//
//                             VELOXCHEM
//      ---------------------------------------------------
//                     An Electronic Structure Code
//
//  Copyright Â© 2019 by VeloxChem developers. All rights reserved.
//  Contact: Zilvinas Rinkevicius (rinkevic@kth.se), KTH, Sweden.

#include "NuclearPotentialRecFuncForGF.hpp"

namespace npotrecfunc { // npotrecfunc namespace

    void
    compNuclearPotentialForGF(      CMemBlock2D<double>& primBuffer,
                              const CMemBlock2D<double>& auxBuffer,
                              const CMemBlock2D<double>& osFactors,
                              const CMemBlock2D<double>& paDistances,
                              const CMemBlock2D<double>& pbDistances,
                              const CMemBlock2D<double>& pcDistances,
                              const CGtoBlock&           braGtoBlock,
                              const CGtoBlock&           ketGtoBlock,
                              const int32_t              iContrGto)
    {
        npotrecfunc::compNuclearPotentialForGF_0_1(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_1_2(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_2_3(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_3_4(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_4_5(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_5_6(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_6_7(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_7_8(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_8_9(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_9_10(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                    braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_10_11(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_11_12(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_12_13(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_13_14(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_14_15(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_15_16(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_16_17(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_17_18(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_18_19(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_19_20(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_20_21(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_21_22(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_22_23(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_23_24(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_24_25(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_25_26(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_26_27(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_27_28(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_28_29(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_29_30(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_30_31(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_31_32(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_32_33(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_33_34(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_34_35(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_35_36(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_36_37(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_37_38(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_38_39(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_39_40(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_40_41(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_41_42(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_42_43(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_43_44(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_44_45(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_45_46(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_46_47(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_47_48(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_48_49(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_49_50(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_50_51(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_51_52(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_52_53(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_53_54(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_54_55(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_55_56(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_56_57(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_57_58(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_58_59(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_59_60(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_60_61(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_61_62(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_62_63(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_63_64(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_64_65(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_65_66(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_66_67(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_67_68(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_68_69(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_69_70(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_70_71(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_71_72(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_72_73(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_73_74(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_74_75(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_75_76(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_76_77(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_77_78(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_78_79(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_79_80(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_80_81(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_81_82(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_82_83(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_83_84(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_84_85(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_85_86(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_86_87(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_87_88(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_88_89(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_89_90(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_90_91(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_91_92(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_92_93(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_93_94(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_94_95(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_95_96(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_96_97(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_97_98(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_98_99(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_99_100(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                      braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_100_101(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_101_102(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_102_103(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_103_104(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_104_105(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_105_106(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_106_107(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_107_108(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_108_109(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_109_110(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_110_111(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_111_112(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_112_113(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_113_114(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_114_115(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_115_116(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_116_117(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_117_118(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_118_119(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_119_120(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_120_121(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_121_122(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_122_123(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_123_124(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_124_125(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_125_126(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_126_127(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_127_128(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_128_129(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_129_130(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_130_131(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_131_132(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_132_133(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_133_134(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_134_135(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_135_136(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_136_137(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_137_138(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_138_139(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_139_140(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_140_141(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_141_142(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_142_143(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_143_144(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_144_145(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_145_146(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_146_147(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_147_148(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_148_149(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForGF_149_150(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 
    }

    void
    compNuclearPotentialForGF_0_1(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (0,1)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxx = pcDistances.data(119 * idx + 83);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_xxx = primBuffer.data(150 * idx);

            // Batch of Integrals (0,1)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_x, pb_xx, pb_xxx, pc_x, pc_xx, pc_xxx, \
                                     pc_xxxx, pc_xxxxx, pc_xxxxxx, pc_xxxxxxx, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_xxx[j] = fl_s_0_0_0 * (7.5 * pa_x[j] * fl3_fx + 5.625 * fl3_fx * pb_x[j] + 3.0 * pa_xxx[j] * fl2_fx + 13.5 * pa_xx[j] * fl2_fx * pb_x[j] + 9.0 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pa_xxxx[j] * pb_x[j] * fl1_fx + 6.0 * pa_xxx[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pb_xxx[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xxx[j] + pa_xxxx[j] * pb_xxx[j]);

                t_xxxx_xxx[j] += fl_s_0_0_1 * (-22.5 * pa_x[j] * fl3_fx - 13.125 * pc_x[j] * fl3_fx - 16.875 * fl3_fx * pb_x[j] - 6.0 * pa_xxx[j] * fl2_fx - 22.5 * pa_xx[j] * pc_x[j] * fl2_fx - 27.0 * pa_xx[j] * fl2_fx * pb_x[j] - 45.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 18.0 * pa_x[j] * fl2_fx * pb_xx[j] - 11.25 * pc_x[j] * fl2_fx * pb_xx[j] - 1.5 * pa_xxxx[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxxx[j] * pc_x[j] * fl1_fx - 18.0 * pa_xxx[j] * pc_x[j] * pb_x[j] * fl1_fx - 6.0 * pa_xxx[j] * fl1_fx * pb_xx[j] - 27.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xx[j] - 1.5 * fl2_fx * pb_xxx[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xxx[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xxxx[j] * pb_xx[j] * pc_x[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_xxx[j]);

                t_xxxx_xxx[j] += fl_s_0_0_2 * (22.5 * pa_x[j] * fl3_fx + 39.375 * pc_x[j] * fl3_fx + 16.875 * fl3_fx * pb_x[j] + 3.0 * pa_xxx[j] * fl2_fx + 45.0 * pa_xx[j] * pc_x[j] * fl2_fx + 13.5 * pa_xx[j] * fl2_fx * pb_x[j] + 45.0 * pa_x[j] * pc_xx[j] * fl2_fx + 90.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 33.75 * pc_xx[j] * fl2_fx * pb_x[j] + 9.0 * pa_x[j] * fl2_fx * pb_xx[j] + 22.5 * pc_x[j] * fl2_fx * pb_xx[j] + 1.5 * pa_xxxx[j] * pc_x[j] * fl1_fx + 18.0 * pa_xxx[j] * pc_x[j] * pb_x[j] * fl1_fx + 12.0 * pa_xxx[j] * pc_xx[j] * fl1_fx + 54.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx + 27.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xx[j] + 36.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pb_xxx[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] + 3.0 * pc_xx[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_xxxx[j] * pb_x[j] * pc_xx[j] + 12.0 * pa_xxx[j] * pc_xx[j] * pb_xx[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xxx[j]);

                t_xxxx_xxx[j] += fl_s_0_0_3 * (-7.5 * pa_x[j] * fl3_fx - 39.375 * pc_x[j] * fl3_fx - 5.625 * fl3_fx * pb_x[j] - 22.5 * pa_xx[j] * pc_x[j] * fl2_fx - 90.0 * pa_x[j] * pc_xx[j] * fl2_fx - 45.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 26.25 * pc_xxx[j] * fl2_fx - 67.5 * pc_xx[j] * fl2_fx * pb_x[j] - 11.25 * pc_x[j] * fl2_fx * pb_xx[j] - 12.0 * pa_xxx[j] * pc_xx[j] * fl1_fx - 54.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx - 30.0 * pa_xx[j] * pc_xxx[j] * fl1_fx - 60.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx - 36.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] - 15.0 * pc_xxx[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xx[j] * fl1_fx * pb_xxx[j] - pa_xxxx[j] * pc_xxx[j] - 12.0 * pa_xxx[j] * pc_xxx[j] * pb_x[j] - 18.0 * pa_xx[j] * pc_xxx[j] * pb_xx[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_xxx[j]);

                t_xxxx_xxx[j] += fl_s_0_0_4 * (13.125 * pc_x[j] * fl3_fx + 45.0 * pa_x[j] * pc_xx[j] * fl2_fx + 52.5 * pc_xxx[j] * fl2_fx + 33.75 * pc_xx[j] * fl2_fx * pb_x[j] + 30.0 * pa_xx[j] * pc_xxx[j] * fl1_fx + 60.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx + 30.0 * pa_x[j] * pc_xxxx[j] * fl1_fx + 22.5 * pc_xxxx[j] * pb_x[j] * fl1_fx + 15.0 * pc_xxx[j] * fl1_fx * pb_xx[j] + 4.0 * pa_xxx[j] * pc_xxxx[j] + 18.0 * pa_xx[j] * pc_xxxx[j] * pb_x[j] + 12.0 * pa_x[j] * pc_xxxx[j] * pb_xx[j] + pc_xxxx[j] * pb_xxx[j]);

                t_xxxx_xxx[j] += fl_s_0_0_5 * (-26.25 * pc_xxx[j] * fl2_fx - 30.0 * pa_x[j] * pc_xxxx[j] * fl1_fx - 22.5 * pc_xxxx[j] * pb_x[j] * fl1_fx - 10.5 * pc_xxxxx[j] * fl1_fx - 6.0 * pa_xx[j] * pc_xxxxx[j] - 12.0 * pa_x[j] * pc_xxxxx[j] * pb_x[j] - 3.0 * pc_xxxxx[j] * pb_xx[j]);

                t_xxxx_xxx[j] += fl_s_0_0_6 * (10.5 * pc_xxxxx[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxxxx[j] + 3.0 * pc_xxxxxx[j] * pb_x[j]);

                t_xxxx_xxx[j] += -fl_s_0_0_7 * pc_xxxxxxx[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_1_2(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (1,2)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxy = pcDistances.data(119 * idx + 84);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_xxy = primBuffer.data(150 * idx + 1);

            // Batch of Integrals (1,2)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_x, pb_xx, pb_xxy, pb_xy, pb_y, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxx, pc_xxxxxxy, pc_xxxxxy, pc_xxxxy, pc_xxxy, \
                                     pc_xxy, pc_xy, pc_y, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxxx_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_xxy[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_y[j] + 4.5 * pa_xx[j] * fl2_fx * pb_y[j] + 6.0 * pa_x[j] * fl2_fx * pb_xy[j] + 0.5 * pa_xxxx[j] * fl1_fx * pb_y[j] + 4.0 * pa_xxx[j] * fl1_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xxy[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xxy[j] + pa_xxxx[j] * pb_xxy[j]);

                t_xxxx_xxy[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_y[j] - 5.625 * fl3_fx * pb_y[j] - 4.5 * pa_xx[j] * fl2_fx * pc_y[j] - 9.0 * pa_xx[j] * fl2_fx * pb_y[j] - 15.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 6.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 12.0 * pa_x[j] * fl2_fx * pb_xy[j] - 7.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * pa_xxxx[j] * fl1_fx * pc_y[j] - 0.5 * pa_xxxx[j] * fl1_fx * pb_y[j] - 6.0 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_y[j] - 4.0 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_y[j] - 4.0 * pa_xxx[j] * fl1_fx * pb_xy[j] - 18.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xy[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * fl2_fx * pb_xxy[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xxy[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] - pa_xxxx[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xxxx[j] * pb_xy[j] * pc_x[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_xxy[j]);

                t_xxxx_xxy[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_y[j] + 5.625 * fl3_fx * pb_y[j] + 9.0 * pa_xx[j] * fl2_fx * pc_y[j] + 4.5 * pa_xx[j] * fl2_fx * pb_y[j] + 15.0 * pa_x[j] * pc_xy[j] * fl2_fx + 30.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 11.25 * pc_xx[j] * fl2_fx * pb_y[j] + 12.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 6.0 * pa_x[j] * fl2_fx * pb_xy[j] + 7.5 * pc_xy[j] * fl2_fx * pb_x[j] + 15.0 * pc_x[j] * fl2_fx * pb_xy[j] + 0.5 * pa_xxxx[j] * fl1_fx * pc_y[j] + 6.0 * pa_xxx[j] * pc_xy[j] * fl1_fx + 6.0 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_y[j] + 4.0 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_y[j] + 18.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] + 18.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] + 18.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xy[j] + 24.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] + 1.5 * fl2_fx * pb_xx[j] * pc_y[j] + 0.75 * fl2_fx * pb_xxy[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] + 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_xx[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xxxx[j] * pb_x[j] * pc_xy[j] + pa_xxxx[j] * pc_xx[j] * pb_y[j] + 4.0 * pa_xxx[j] * pc_xy[j] * pb_xx[j] + 8.0 * pa_xxx[j] * pc_xx[j] * pb_xy[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xxy[j]);

                t_xxxx_xxy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 1.875 * fl3_fx * pb_y[j] - 4.5 * pa_xx[j] * fl2_fx * pc_y[j] - 30.0 * pa_x[j] * pc_xy[j] * fl2_fx - 15.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 11.25 * pc_xxy[j] * fl2_fx - 22.5 * pc_xx[j] * fl2_fx * pb_y[j] - 6.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 15.0 * pc_xy[j] * fl2_fx * pb_x[j] - 7.5 * pc_x[j] * fl2_fx * pb_xy[j] - 6.0 * pa_xxx[j] * pc_xy[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xxy[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] - 18.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] - 20.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - 24.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 24.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] - 10.0 * pc_xxx[j] * fl1_fx * pb_xy[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xx[j] * fl1_fx * pb_xxy[j] - pa_xxxx[j] * pc_xxy[j] - 8.0 * pa_xxx[j] * pc_xxy[j] * pb_x[j] - 4.0 * pa_xxx[j] * pc_xxx[j] * pb_y[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_xx[j] - 12.0 * pa_xx[j] * pc_xxx[j] * pb_xy[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_xxy[j]);

                t_xxxx_xxy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 15.0 * pa_x[j] * pc_xy[j] * fl2_fx + 22.5 * pc_xxy[j] * fl2_fx + 11.25 * pc_xx[j] * fl2_fx * pb_y[j] + 7.5 * pc_xy[j] * fl2_fx * pb_x[j] + 18.0 * pa_xx[j] * pc_xxy[j] * fl1_fx + 20.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 20.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + 24.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 7.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + 10.0 * pc_xxxy[j] * fl1_fx * pb_x[j] + 10.0 * pc_xxx[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_xx[j] + 4.0 * pa_xxx[j] * pc_xxxy[j] + 12.0 * pa_xx[j] * pc_xxxy[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxxx[j] * pb_y[j] + 4.0 * pa_x[j] * pc_xxxy[j] * pb_xx[j] + 8.0 * pa_x[j] * pc_xxxx[j] * pb_xy[j] + pc_xxxx[j] * pb_xxy[j]);

                t_xxxx_xxy[j] += fl_s_0_0_5 * (-11.25 * pc_xxy[j] * fl2_fx - 20.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 7.5 * pc_xxxxy[j] * fl1_fx - 7.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - 10.0 * pc_xxxy[j] * fl1_fx * pb_x[j] - 6.0 * pa_xx[j] * pc_xxxxy[j] - 8.0 * pa_x[j] * pc_xxxxy[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxxxx[j] * pb_y[j] - pc_xxxxy[j] * pb_xx[j] - 2.0 * pc_xxxxx[j] * pb_xy[j]);

                t_xxxx_xxy[j] += fl_s_0_0_6 * (7.5 * pc_xxxxy[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxxxy[j] + 2.0 * pc_xxxxxy[j] * pb_x[j] + pc_xxxxxx[j] * pb_y[j]);

                t_xxxx_xxy[j] += -fl_s_0_0_7 * pc_xxxxxxy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_2_3(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (2,3)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxz = pcDistances.data(119 * idx + 85);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_xxz = primBuffer.data(150 * idx + 2);

            // Batch of Integrals (2,3)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_x, pb_xx, pb_xxz, pb_xz, pb_z, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxx, pc_xxxxxxz, pc_xxxxxz, pc_xxxxz, pc_xxxz, \
                                     pc_xxz, pc_xz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxxx_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_xxz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_z[j] + 4.5 * pa_xx[j] * fl2_fx * pb_z[j] + 6.0 * pa_x[j] * fl2_fx * pb_xz[j] + 0.5 * pa_xxxx[j] * fl1_fx * pb_z[j] + 4.0 * pa_xxx[j] * fl1_fx * pb_xz[j] + 0.75 * fl2_fx * pb_xxz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xxz[j] + pa_xxxx[j] * pb_xxz[j]);

                t_xxxx_xxz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_z[j] - 5.625 * fl3_fx * pb_z[j] - 4.5 * pa_xx[j] * fl2_fx * pc_z[j] - 9.0 * pa_xx[j] * fl2_fx * pb_z[j] - 15.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 6.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 12.0 * pa_x[j] * fl2_fx * pb_xz[j] - 7.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.5 * pa_xxxx[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxxx[j] * fl1_fx * pb_z[j] - 6.0 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] - 4.0 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_z[j] - 4.0 * pa_xxx[j] * fl1_fx * pb_xz[j] - 18.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * fl2_fx * pb_xxz[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xxz[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] - pa_xxxx[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xxxx[j] * pb_xz[j] * pc_x[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_xxz[j]);

                t_xxxx_xxz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pb_z[j] + 9.0 * pa_xx[j] * fl2_fx * pc_z[j] + 4.5 * pa_xx[j] * fl2_fx * pb_z[j] + 15.0 * pa_x[j] * pc_xz[j] * fl2_fx + 30.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 11.25 * pc_xx[j] * fl2_fx * pb_z[j] + 12.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 6.0 * pa_x[j] * fl2_fx * pb_xz[j] + 7.5 * pc_xz[j] * fl2_fx * pb_x[j] + 15.0 * pc_x[j] * fl2_fx * pb_xz[j] + 0.5 * pa_xxxx[j] * fl1_fx * pc_z[j] + 6.0 * pa_xxx[j] * pc_xz[j] * fl1_fx + 6.0 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] + 4.0 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_z[j] + 18.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] + 18.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_x[j] + 18.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xz[j] + 24.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] + 1.5 * fl2_fx * pb_xx[j] * pc_z[j] + 0.75 * fl2_fx * pb_xxz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] + 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xxxx[j] * pb_x[j] * pc_xz[j] + pa_xxxx[j] * pc_xx[j] * pb_z[j] + 4.0 * pa_xxx[j] * pc_xz[j] * pb_xx[j] + 8.0 * pa_xxx[j] * pc_xx[j] * pb_xz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xxz[j]);

                t_xxxx_xxz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pb_z[j] - 4.5 * pa_xx[j] * fl2_fx * pc_z[j] - 30.0 * pa_x[j] * pc_xz[j] * fl2_fx - 15.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 11.25 * pc_xxz[j] * fl2_fx - 22.5 * pc_xx[j] * fl2_fx * pb_z[j] - 6.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 15.0 * pc_xz[j] * fl2_fx * pb_x[j] - 7.5 * pc_x[j] * fl2_fx * pb_xz[j] - 6.0 * pa_xxx[j] * pc_xz[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xxz[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] - 18.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_x[j] - 20.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 24.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 24.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] - 10.0 * pc_xxx[j] * fl1_fx * pb_xz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xx[j] * fl1_fx * pb_xxz[j] - pa_xxxx[j] * pc_xxz[j] - 8.0 * pa_xxx[j] * pc_xxz[j] * pb_x[j] - 4.0 * pa_xxx[j] * pc_xxx[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_xx[j] - 12.0 * pa_xx[j] * pc_xxx[j] * pb_xz[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_xxz[j]);

                t_xxxx_xxz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 15.0 * pa_x[j] * pc_xz[j] * fl2_fx + 22.5 * pc_xxz[j] * fl2_fx + 11.25 * pc_xx[j] * fl2_fx * pb_z[j] + 7.5 * pc_xz[j] * fl2_fx * pb_x[j] + 18.0 * pa_xx[j] * pc_xxz[j] * fl1_fx + 20.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 20.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 24.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 7.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 10.0 * pc_xxxz[j] * fl1_fx * pb_x[j] + 10.0 * pc_xxx[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_xx[j] + 4.0 * pa_xxx[j] * pc_xxxz[j] + 12.0 * pa_xx[j] * pc_xxxz[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxxx[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xxxz[j] * pb_xx[j] + 8.0 * pa_x[j] * pc_xxxx[j] * pb_xz[j] + pc_xxxx[j] * pb_xxz[j]);

                t_xxxx_xxz[j] += fl_s_0_0_5 * (-11.25 * pc_xxz[j] * fl2_fx - 20.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 7.5 * pc_xxxxz[j] * fl1_fx - 7.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 10.0 * pc_xxxz[j] * fl1_fx * pb_x[j] - 6.0 * pa_xx[j] * pc_xxxxz[j] - 8.0 * pa_x[j] * pc_xxxxz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxxxx[j] * pb_z[j] - pc_xxxxz[j] * pb_xx[j] - 2.0 * pc_xxxxx[j] * pb_xz[j]);

                t_xxxx_xxz[j] += fl_s_0_0_6 * (7.5 * pc_xxxxz[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxxxz[j] + 2.0 * pc_xxxxxz[j] * pb_x[j] + pc_xxxxxx[j] * pb_z[j]);

                t_xxxx_xxz[j] += -fl_s_0_0_7 * pc_xxxxxxz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_3_4(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (3,4)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyy = pcDistances.data(119 * idx + 86);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_xyy = primBuffer.data(150 * idx + 3);

            // Batch of Integrals (3,4)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_x, pb_xy, pb_xyy, pb_y, pb_yy, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyy, pc_xxxxy, pc_xxxxyy, pc_xxxy, \
                                     pc_xxxyy, pc_xxy, pc_xxyy, pc_xy, pc_xyy, pc_y, pc_yy, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_xyy[j] = fl_s_0_0_0 * (1.5 * pa_x[j] * fl3_fx + pa_xxx[j] * fl2_fx + 0.375 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xxxx[j] * pb_x[j] * fl1_fx + 2.0 * pa_xxx[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pb_xyy[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xyy[j] + pa_xxxx[j] * pb_xyy[j]);

                t_xxxx_xyy[j] += fl_s_0_0_1 * (-4.5 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 2.0 * pa_xxx[j] * fl2_fx - 4.5 * pa_xx[j] * pc_x[j] * fl2_fx - 1.125 * fl3_fx * pb_x[j] - 3.0 * pa_xx[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 6.0 * pa_x[j] * fl2_fx * pb_yy[j] - 3.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xxxx[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxxx[j] * pc_x[j] * fl1_fx - 2.0 * pa_xxx[j] * pc_x[j] * pb_x[j] * fl1_fx - 4.0 * pa_xxx[j] * fl1_fx * pb_y[j] * pc_y[j] - 2.0 * pa_xxx[j] * fl1_fx * pb_yy[j] - 9.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] - 1.5 * fl2_fx * pb_xy[j] * pc_y[j] - 1.5 * fl2_fx * pb_xyy[j] - 6.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xyy[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_xxxx[j] * pb_xy[j] * pc_y[j] - pa_xxxx[j] * pc_x[j] * pb_yy[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_xyy[j]);

                t_xxxx_xyy[j] += fl_s_0_0_2 * (4.5 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + pa_xxx[j] * fl2_fx + 9.0 * pa_xx[j] * pc_x[j] * fl2_fx + 6.0 * pa_x[j] * pc_xx[j] * fl2_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * fl2_fx * pc_yy[j] + 12.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 3.0 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xy[j] * fl2_fx * pb_y[j] + 7.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xxxx[j] * pc_x[j] * fl1_fx + 2.0 * pa_xxx[j] * pc_x[j] * pb_x[j] * fl1_fx + 2.0 * pa_xxx[j] * pc_xx[j] * fl1_fx + 2.0 * pa_xxx[j] * fl1_fx * pc_yy[j] + 4.0 * pa_xxx[j] * fl1_fx * pb_y[j] * pc_y[j] + 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx + 18.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] + 9.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] + 12.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pb_x[j] * pc_yy[j] + 3.0 * fl2_fx * pb_xy[j] * pc_y[j] + 0.75 * fl2_fx * pb_xyy[j] + 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] + 6.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] + 12.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_xx[j] * fl1_fx * pb_xyy[j] + pa_xxxx[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xxxx[j] * pc_xy[j] * pb_y[j] + 8.0 * pa_xxx[j] * pc_xy[j] * pb_xy[j] + 4.0 * pa_xxx[j] * pc_xx[j] * pb_yy[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xyy[j]);

                t_xxxx_xyy[j] += fl_s_0_0_3 * (-1.5 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 4.5 * pa_xx[j] * pc_x[j] * fl2_fx - 12.0 * pa_x[j] * pc_xx[j] * fl2_fx - 2.5 * pc_xxx[j] * fl2_fx - 0.375 * fl3_fx * pb_x[j] - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_yy[j] - 6.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 3.0 * pc_xx[j] * fl2_fx * pb_x[j] - 3.75 * pc_xyy[j] * fl2_fx - 15.0 * pc_xy[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pb_yy[j] - 2.0 * pa_xxx[j] * pc_xx[j] * fl1_fx - 2.0 * pa_xxx[j] * fl1_fx * pc_yy[j] - 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxx[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xyy[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx - 24.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 12.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - 5.0 * pc_xxx[j] * fl1_fx * pb_yy[j] - 1.5 * fl2_fx * pb_x[j] * pc_yy[j] - 1.5 * fl2_fx * pb_xy[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] - 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 12.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xxy[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xx[j] * fl1_fx * pb_xyy[j] - pa_xxxx[j] * pc_xyy[j] - 4.0 * pa_xxx[j] * pc_xyy[j] * pb_x[j] - 8.0 * pa_xxx[j] * pc_xxy[j] * pb_y[j] - 12.0 * pa_xx[j] * pc_xxy[j] * pb_xy[j] - 6.0 * pa_xx[j] * pc_xxx[j] * pb_yy[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_xyy[j]);

                t_xxxx_xyy[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 6.0 * pa_x[j] * pc_xx[j] * fl2_fx + 5.0 * pc_xxx[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xyy[j] * fl2_fx + 7.5 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_xxx[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xyy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxx[j] * fl1_fx + 12.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 24.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxx[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxy[j] * fl1_fx * pb_y[j] + 5.0 * pc_xxx[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pb_x[j] * pc_yy[j] + 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_x[j] + 6.0 * pc_xxy[j] * fl1_fx * pb_xy[j] + 4.0 * pa_xxx[j] * pc_xxyy[j] + 6.0 * pa_xx[j] * pc_xxyy[j] * pb_x[j] + 12.0 * pa_xx[j] * pc_xxxy[j] * pb_y[j] + 8.0 * pa_x[j] * pc_xxxy[j] * pb_xy[j] + 4.0 * pa_x[j] * pc_xxxx[j] * pb_yy[j] + pc_xxxx[j] * pb_xyy[j]);

                t_xxxx_xyy[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xyy[j] * fl2_fx - 2.0 * pa_x[j] * pc_xxxx[j] * fl1_fx - 12.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 0.5 * pc_xxxx[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxx[j] * fl1_fx - 5.0 * pc_xxxyy[j] * fl1_fx - 10.0 * pc_xxxy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_x[j] - 6.0 * pa_xx[j] * pc_xxxyy[j] - 4.0 * pa_x[j] * pc_xxxyy[j] * pb_x[j] - 8.0 * pa_x[j] * pc_xxxxy[j] * pb_y[j] - 2.0 * pc_xxxxy[j] * pb_xy[j] - pc_xxxxx[j] * pb_yy[j]);

                t_xxxx_xyy[j] += fl_s_0_0_6 * (0.5 * pc_xxxxx[j] * fl1_fx + 5.0 * pc_xxxyy[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxxyy[j] + pc_xxxxyy[j] * pb_x[j] + 2.0 * pc_xxxxxy[j] * pb_y[j]);

                t_xxxx_xyy[j] += -fl_s_0_0_7 * pc_xxxxxyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_4_5(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (4,5)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_xyz = primBuffer.data(150 * idx + 4);

            // Batch of Integrals (4,5)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_x, pb_xy, pb_xyz, pb_xz, pb_y, pb_yz, pb_z, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyz, pc_xxxxxz, \
                                     pc_xxxxy, pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyz, pc_xxz, \
                                     pc_xy, pc_xyz, pc_xz, pc_y, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxxx_xyz[j] = fl_s_0_0_0 * (3.0 * pa_x[j] * fl2_fx * pb_yz[j] + 2.0 * pa_xxx[j] * fl1_fx * pb_yz[j] + 0.75 * fl2_fx * pb_xyz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xyz[j] + pa_xxxx[j] * pb_xyz[j]);

                t_xxxx_xyz[j] += fl_s_0_0_1 * (-3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 6.0 * pa_x[j] * fl2_fx * pb_yz[j] - 3.75 * pc_x[j] * fl2_fx * pb_yz[j] - 2.0 * pa_xxx[j] * fl1_fx * pb_y[j] * pc_z[j] - 2.0 * pa_xxx[j] * fl1_fx * pc_y[j] * pb_z[j] - 2.0 * pa_xxx[j] * fl1_fx * pb_yz[j] - 9.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] - 0.75 * fl2_fx * pb_xy[j] * pc_z[j] - 0.75 * fl2_fx * pb_xz[j] * pc_y[j] - 1.5 * fl2_fx * pb_xyz[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xyz[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] - pa_xxxx[j] * pb_xy[j] * pc_z[j] - pa_xxxx[j] * pb_xz[j] * pc_y[j] - pa_xxxx[j] * pc_x[j] * pb_yz[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_xyz[j]);

                t_xxxx_xyz[j] += fl_s_0_0_2 * (3.0 * pa_x[j] * fl2_fx * pc_yz[j] + 6.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 6.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 3.0 * pa_x[j] * fl2_fx * pb_yz[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 7.5 * pc_x[j] * fl2_fx * pb_yz[j] + 2.0 * pa_xxx[j] * fl1_fx * pc_yz[j] + 2.0 * pa_xxx[j] * fl1_fx * pb_y[j] * pc_z[j] + 2.0 * pa_xxx[j] * fl1_fx * pc_y[j] * pb_z[j] + 9.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] + 9.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 9.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] + 12.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + 0.75 * fl2_fx * pb_x[j] * pc_yz[j] + 1.5 * fl2_fx * pb_xy[j] * pc_z[j] + 1.5 * fl2_fx * pb_xz[j] * pc_y[j] + 0.75 * fl2_fx * pb_xyz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] + 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_xyz[j] + pa_xxxx[j] * pb_x[j] * pc_yz[j] + pa_xxxx[j] * pc_xz[j] * pb_y[j] + pa_xxxx[j] * pc_xy[j] * pb_z[j] + 4.0 * pa_xxx[j] * pc_xz[j] * pb_xy[j] + 4.0 * pa_xxx[j] * pc_xy[j] * pb_xz[j] + 4.0 * pa_xxx[j] * pc_xx[j] * pb_yz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xyz[j]);

                t_xxxx_xyz[j] += fl_s_0_0_3 * (-6.0 * pa_x[j] * fl2_fx * pc_yz[j] - 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pb_yz[j] - 2.0 * pa_xxx[j] * fl1_fx * pc_yz[j] - 9.0 * pa_xx[j] * pc_xyz[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] - 9.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 12.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 12.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 12.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - 5.0 * pc_xxx[j] * fl1_fx * pb_yz[j] - 1.5 * fl2_fx * pb_x[j] * pc_yz[j] - 0.75 * fl2_fx * pb_xy[j] * pc_z[j] - 0.75 * fl2_fx * pb_xz[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yz[j] - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_xyz[j] - pa_xxxx[j] * pc_xyz[j] - 4.0 * pa_xxx[j] * pc_xyz[j] * pb_x[j] - 4.0 * pa_xxx[j] * pc_xxz[j] * pb_y[j] - 4.0 * pa_xxx[j] * pc_xxy[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_xy[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_xz[j] - 6.0 * pa_xx[j] * pc_xxx[j] * pb_yz[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_xyz[j]);

                t_xxxx_xyz[j] += fl_s_0_0_4 * (3.0 * pa_x[j] * fl2_fx * pc_yz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 9.0 * pa_xx[j] * pc_xyz[j] * fl1_fx + 12.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 12.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 12.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] + 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] + 5.0 * pc_xxx[j] * fl1_fx * pb_yz[j] + 0.75 * fl2_fx * pb_x[j] * pc_yz[j] + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_xz[j] + 4.0 * pa_xxx[j] * pc_xxyz[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxxz[j] * pb_y[j] + 6.0 * pa_xx[j] * pc_xxxy[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xxxz[j] * pb_xy[j] + 4.0 * pa_x[j] * pc_xxxy[j] * pb_xz[j] + 4.0 * pa_x[j] * pc_xxxx[j] * pb_yz[j] + pc_xxxx[j] * pb_xyz[j]);

                t_xxxx_xyz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 12.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] - 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 6.0 * pa_xx[j] * pc_xxxyz[j] - 4.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxxxz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xxxxy[j] * pb_z[j] - pc_xxxxz[j] * pb_xy[j] - pc_xxxxy[j] * pb_xz[j] - pc_xxxxx[j] * pb_yz[j]);

                t_xxxx_xyz[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxxyz[j] + pc_xxxxyz[j] * pb_x[j] + pc_xxxxxz[j] * pb_y[j] + pc_xxxxxy[j] * pb_z[j]);

                t_xxxx_xyz[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_5_6(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (5,6)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxzz = pcDistances.data(119 * idx + 88);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_xzz = primBuffer.data(150 * idx + 5);

            // Batch of Integrals (5,6)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_x, pb_xz, pb_xzz, pb_z, pb_zz, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxz, pc_xxxxxzz, pc_xxxxz, pc_xxxxzz, pc_xxxz, \
                                     pc_xxxzz, pc_xxz, pc_xxzz, pc_xz, pc_xzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_xzz[j] = fl_s_0_0_0 * (1.5 * pa_x[j] * fl3_fx + pa_xxx[j] * fl2_fx + 0.375 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xxxx[j] * pb_x[j] * fl1_fx + 2.0 * pa_xxx[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_xzz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xzz[j] + pa_xxxx[j] * pb_xzz[j]);

                t_xxxx_xzz[j] += fl_s_0_0_1 * (-4.5 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 2.0 * pa_xxx[j] * fl2_fx - 4.5 * pa_xx[j] * pc_x[j] * fl2_fx - 1.125 * fl3_fx * pb_x[j] - 3.0 * pa_xx[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 6.0 * pa_x[j] * fl2_fx * pb_zz[j] - 3.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xxxx[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxxx[j] * pc_x[j] * fl1_fx - 2.0 * pa_xxx[j] * pc_x[j] * pb_x[j] * fl1_fx - 4.0 * pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] - 2.0 * pa_xxx[j] * fl1_fx * pb_zz[j] - 9.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] - 1.5 * fl2_fx * pb_xz[j] * pc_z[j] - 1.5 * fl2_fx * pb_xzz[j] - 6.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xzz[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_xxxx[j] * pb_xz[j] * pc_z[j] - pa_xxxx[j] * pc_x[j] * pb_zz[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_xzz[j]);

                t_xxxx_xzz[j] += fl_s_0_0_2 * (4.5 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + pa_xxx[j] * fl2_fx + 9.0 * pa_xx[j] * pc_x[j] * fl2_fx + 6.0 * pa_x[j] * pc_xx[j] * fl2_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * fl2_fx * pc_zz[j] + 12.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 3.0 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xz[j] * fl2_fx * pb_z[j] + 7.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xxxx[j] * pc_x[j] * fl1_fx + 2.0 * pa_xxx[j] * pc_x[j] * pb_x[j] * fl1_fx + 2.0 * pa_xxx[j] * pc_xx[j] * fl1_fx + 2.0 * pa_xxx[j] * fl1_fx * pc_zz[j] + 4.0 * pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] + 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx + 18.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 9.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] + 12.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_x[j] * pc_zz[j] + 3.0 * fl2_fx * pb_xz[j] * pc_z[j] + 0.75 * fl2_fx * pb_xzz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] + 6.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] + 12.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_xzz[j] + pa_xxxx[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xxxx[j] * pc_xz[j] * pb_z[j] + 8.0 * pa_xxx[j] * pc_xz[j] * pb_xz[j] + 4.0 * pa_xxx[j] * pc_xx[j] * pb_zz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xzz[j]);

                t_xxxx_xzz[j] += fl_s_0_0_3 * (-1.5 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 4.5 * pa_xx[j] * pc_x[j] * fl2_fx - 12.0 * pa_x[j] * pc_xx[j] * fl2_fx - 2.5 * pc_xxx[j] * fl2_fx - 0.375 * fl3_fx * pb_x[j] - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_zz[j] - 6.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 3.0 * pc_xx[j] * fl2_fx * pb_x[j] - 3.75 * pc_xzz[j] * fl2_fx - 15.0 * pc_xz[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pb_zz[j] - 2.0 * pa_xxx[j] * pc_xx[j] * fl1_fx - 2.0 * pa_xxx[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxx[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xzz[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx - 24.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 12.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - 5.0 * pc_xxx[j] * fl1_fx * pb_zz[j] - 1.5 * fl2_fx * pb_x[j] * pc_zz[j] - 1.5 * fl2_fx * pb_xz[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] - 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 12.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xxz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_xzz[j] - pa_xxxx[j] * pc_xzz[j] - 4.0 * pa_xxx[j] * pc_xzz[j] * pb_x[j] - 8.0 * pa_xxx[j] * pc_xxz[j] * pb_z[j] - 12.0 * pa_xx[j] * pc_xxz[j] * pb_xz[j] - 6.0 * pa_xx[j] * pc_xxx[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_xzz[j]);

                t_xxxx_xzz[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 6.0 * pa_x[j] * pc_xx[j] * fl2_fx + 5.0 * pc_xxx[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xzz[j] * fl2_fx + 7.5 * pc_xz[j] * fl2_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_xxx[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxx[j] * fl1_fx + 12.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 24.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxx[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxz[j] * fl1_fx * pb_z[j] + 5.0 * pc_xxx[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_x[j] * pc_zz[j] + 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xxz[j] * fl1_fx * pb_xz[j] + 4.0 * pa_xxx[j] * pc_xxzz[j] + 6.0 * pa_xx[j] * pc_xxzz[j] * pb_x[j] + 12.0 * pa_xx[j] * pc_xxxz[j] * pb_z[j] + 8.0 * pa_x[j] * pc_xxxz[j] * pb_xz[j] + 4.0 * pa_x[j] * pc_xxxx[j] * pb_zz[j] + pc_xxxx[j] * pb_xzz[j]);

                t_xxxx_xzz[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xzz[j] * fl2_fx - 2.0 * pa_x[j] * pc_xxxx[j] * fl1_fx - 12.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 0.5 * pc_xxxx[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxx[j] * fl1_fx - 5.0 * pc_xxxzz[j] * fl1_fx - 10.0 * pc_xxxz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxzz[j] * fl1_fx * pb_x[j] - 6.0 * pa_xx[j] * pc_xxxzz[j] - 4.0 * pa_x[j] * pc_xxxzz[j] * pb_x[j] - 8.0 * pa_x[j] * pc_xxxxz[j] * pb_z[j] - 2.0 * pc_xxxxz[j] * pb_xz[j] - pc_xxxxx[j] * pb_zz[j]);

                t_xxxx_xzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxx[j] * fl1_fx + 5.0 * pc_xxxzz[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxxzz[j] + pc_xxxxzz[j] * pb_x[j] + 2.0 * pc_xxxxxz[j] * pb_z[j]);

                t_xxxx_xzz[j] += -fl_s_0_0_7 * pc_xxxxxzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_6_7(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (6,7)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_yyy = primBuffer.data(150 * idx + 6);

            // Batch of Integrals (6,7)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_y, pb_yy, pb_yyy, pc_x, pc_xx, pc_xxx, \
                                     pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyy, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xy, pc_xyy, pc_xyyy, pc_y, pc_yy, pc_yyy, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_yyy[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_y[j] + 4.5 * pa_xx[j] * fl2_fx * pb_y[j] + 1.5 * pa_xxxx[j] * pb_y[j] * fl1_fx + 0.75 * fl2_fx * pb_yyy[j] + 3.0 * pa_xx[j] * fl1_fx * pb_yyy[j] + pa_xxxx[j] * pb_yyy[j]);

                t_xxxx_yyy[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_y[j] - 1.125 * fl3_fx * pc_y[j] - 9.0 * pa_xx[j] * fl2_fx * pb_y[j] - 4.5 * pa_xx[j] * fl2_fx * pc_y[j] - 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pa_xxxx[j] * pb_y[j] * fl1_fx - 1.5 * pa_xxxx[j] * pc_y[j] * fl1_fx - 6.0 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * fl2_fx * pb_yyy[j] - 9.0 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_yyy[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_xxxx[j] * pb_yy[j] * pc_y[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_yyy[j]);

                t_xxxx_yyy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_y[j] + 3.375 * fl3_fx * pb_y[j] + 9.0 * pa_xx[j] * fl2_fx * pc_y[j] + 4.5 * pa_xx[j] * fl2_fx * pb_y[j] + 18.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 9.0 * pa_x[j] * pc_xy[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pa_xxxx[j] * pc_y[j] * fl1_fx + 6.0 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx + 6.0 * pa_xxx[j] * pc_xy[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 4.5 * fl2_fx * pb_yy[j] * pc_y[j] + 0.75 * fl2_fx * pb_yyy[j] + 9.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] + 9.0 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] + 18.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] + 3.0 * pc_xx[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_xxxx[j] * pb_y[j] * pc_yy[j] + 12.0 * pa_xxx[j] * pc_xy[j] * pb_yy[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_yyy[j]);

                t_xxxx_yyy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 4.5 * pa_xx[j] * fl2_fx * pc_y[j] - 18.0 * pa_x[j] * pc_xy[j] * fl2_fx - 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 9.0 * pc_xx[j] * fl2_fx * pb_y[j] - 4.5 * pc_xxy[j] * fl2_fx - 6.0 * pa_xxx[j] * pc_xy[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xxy[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx - 0.75 * fl2_fx * pc_yyy[j] - 4.5 * fl2_fx * pb_y[j] * pc_yy[j] - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yyy[j] - 9.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] - 18.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 18.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 9.0 * pc_xxy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xx[j] * fl1_fx * pb_yyy[j] - pa_xxxx[j] * pc_yyy[j] - 12.0 * pa_xxx[j] * pc_xyy[j] * pb_y[j] - 18.0 * pa_xx[j] * pc_xxy[j] * pb_yy[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_yyy[j]);

                t_xxxx_yyy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 9.0 * pa_x[j] * pc_xy[j] * fl2_fx + 9.0 * pc_xxy[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_y[j] + 9.0 * pa_xx[j] * pc_xxy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 1.5 * pc_xxxx[j] * pb_y[j] * fl1_fx + 1.5 * fl2_fx * pc_yyy[j] + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yyy[j] + 6.0 * pa_x[j] * pc_xyyy[j] * fl1_fx + 18.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxy[j] * fl1_fx * pb_yy[j] + 4.0 * pa_xxx[j] * pc_xyyy[j] + 18.0 * pa_xx[j] * pc_xxyy[j] * pb_y[j] + 12.0 * pa_x[j] * pc_xxxy[j] * pb_yy[j] + pc_xxxx[j] * pb_yyy[j]);

                t_xxxx_yyy[j] += fl_s_0_0_5 * (-4.5 * pc_xxy[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 1.5 * pc_xxxx[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxxy[j] * fl1_fx - 0.75 * fl2_fx * pc_yyy[j] - 6.0 * pa_x[j] * pc_xyyy[j] * fl1_fx - 3.0 * pc_xxyyy[j] * fl1_fx - 9.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 6.0 * pa_xx[j] * pc_xxyyy[j] - 12.0 * pa_x[j] * pc_xxxyy[j] * pb_y[j] - 3.0 * pc_xxxxy[j] * pb_yy[j]);

                t_xxxx_yyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyyy[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxyyy[j] + 3.0 * pc_xxxxyy[j] * pb_y[j]);

                t_xxxx_yyy[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_7_8(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (7,8)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_yyz = primBuffer.data(150 * idx + 7);

            // Batch of Integrals (7,8)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_y, pb_yy, pb_yyz, pb_yz, pb_z, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyz, pc_xxxxyz, pc_xxxxz, pc_xxxy, \
                                     pc_xxxyy, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyz, pc_xxz, \
                                     pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyz, pc_yz, pc_z, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_yyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pb_z[j] + 0.5 * pa_xxxx[j] * fl1_fx * pb_z[j] + 0.75 * fl2_fx * pb_yyz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_yyz[j] + pa_xxxx[j] * pb_yyz[j]);

                t_xxxx_yyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 1.5 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_xx[j] * fl2_fx * pb_z[j] - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.5 * pa_xxxx[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxxx[j] * fl1_fx * pb_z[j] - 2.0 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * fl2_fx * pb_yz[j] * pc_y[j] - 1.5 * fl2_fx * pb_yyz[j] - 3.0 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] - 6.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_yyz[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] - pa_xxxx[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xxxx[j] * pb_yz[j] * pc_y[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_yyz[j]);

                t_xxxx_yyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 3.0 * pa_xx[j] * fl2_fx * pc_z[j] + 1.5 * pa_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xz[j] * fl2_fx + 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * pa_xxxx[j] * fl1_fx * pc_z[j] + 2.0 * pa_xxx[j] * pc_xz[j] * fl1_fx + 2.0 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] + 1.5 * fl2_fx * pb_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pb_yy[j] * pc_z[j] + 3.0 * fl2_fx * pb_yz[j] * pc_y[j] + 0.75 * fl2_fx * pb_yyz[j] + 6.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yz[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] + 3.0 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] + 6.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] + 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 12.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_xxxx[j] * pb_y[j] * pc_yz[j] + pa_xxxx[j] * pc_yy[j] * pb_z[j] + 4.0 * pa_xxx[j] * pc_xz[j] * pb_yy[j] + 8.0 * pa_xxx[j] * pc_xy[j] * pb_yz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_yyz[j]);

                t_xxxx_yyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 1.5 * pa_xx[j] * fl2_fx * pc_z[j] - 6.0 * pa_x[j] * pc_xz[j] * fl2_fx - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 2.0 * pa_xxx[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pb_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * fl2_fx * pb_yz[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yyz[j] - 6.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yz[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] - 12.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 12.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] - 6.0 * pc_xxy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_yyz[j] - pa_xxxx[j] * pc_yyz[j] - 8.0 * pa_xxx[j] * pc_xyz[j] * pb_y[j] - 4.0 * pa_xxx[j] * pc_xyy[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_yy[j] - 12.0 * pa_xx[j] * pc_xxy[j] * pb_yz[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_yyz[j]);

                t_xxxx_yyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 3.0 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_xxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pb_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yyz[j] + 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 12.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] + 6.0 * pc_xxy[j] * fl1_fx * pb_yz[j] + 4.0 * pa_xxx[j] * pc_xyyz[j] + 12.0 * pa_xx[j] * pc_xxyz[j] * pb_y[j] + 6.0 * pa_xx[j] * pc_xxyy[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xxxz[j] * pb_yy[j] + 8.0 * pa_x[j] * pc_xxxy[j] * pb_yz[j] + pc_xxxx[j] * pb_yyz[j]);

                t_xxxx_yyz[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 2.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 0.5 * pc_xxxxz[j] * fl1_fx - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 6.0 * pa_xx[j] * pc_xxyyz[j] - 8.0 * pa_x[j] * pc_xxxyz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xxxyy[j] * pb_z[j] - pc_xxxxz[j] * pb_yy[j] - 2.0 * pc_xxxxy[j] * pb_yz[j]);

                t_xxxx_yyz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxyyz[j] + 2.0 * pc_xxxxyz[j] * pb_y[j] + pc_xxxxyy[j] * pb_z[j]);

                t_xxxx_yyz[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_8_9(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (8,9)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_yzz = primBuffer.data(150 * idx + 8);

            // Batch of Integrals (8,9)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_y, pb_yz, pb_yzz, pb_z, pb_zz, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyz, pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, pc_xxxy, \
                                     pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, \
                                     pc_xy, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_yzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 1.5 * pa_xx[j] * fl2_fx * pb_y[j] + 0.5 * pa_xxxx[j] * pb_y[j] * fl1_fx + 0.75 * fl2_fx * pb_yzz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_yzz[j] + pa_xxxx[j] * pb_yzz[j]);

                t_xxxx_yzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_y[j] - 0.375 * fl3_fx * pc_y[j] - 3.0 * pa_xx[j] * fl2_fx * pb_y[j] - 1.5 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.5 * pa_xxxx[j] * pb_y[j] * fl1_fx - 0.5 * pa_xxxx[j] * pc_y[j] * fl1_fx - 2.0 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * fl2_fx * pb_yzz[j] - 6.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_xx[j] * fl1_fx * pb_yzz[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_xxxx[j] * pb_yz[j] * pc_z[j] - pa_xxxx[j] * pc_y[j] * pb_zz[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_yzz[j]);

                t_xxxx_yzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 3.0 * pa_xx[j] * fl2_fx * pc_y[j] + 1.5 * pa_xx[j] * fl2_fx * pb_y[j] + 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 3.0 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * pa_xxxx[j] * pc_y[j] * fl1_fx + 2.0 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx + 2.0 * pa_xxx[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx + 0.75 * fl2_fx * pb_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * fl2_fx * pb_yz[j] * pc_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pb_yzz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] + 6.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] + 6.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] + 3.0 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] + 12.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_yzz[j] + pa_xxxx[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xxxx[j] * pc_yz[j] * pb_z[j] + 8.0 * pa_xxx[j] * pc_xz[j] * pb_yz[j] + 4.0 * pa_xxx[j] * pc_xy[j] * pb_zz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_yzz[j]);

                t_xxxx_yzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 1.5 * pa_xx[j] * fl2_fx * pc_y[j] - 6.0 * pa_x[j] * pc_xy[j] * fl2_fx - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 1.5 * pc_xxy[j] * fl2_fx - 2.0 * pa_xxx[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxy[j] * fl1_fx - 2.0 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pb_y[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yzz[j] - 3.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] - 6.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] - 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 12.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 12.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 6.0 * pc_xxz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_yzz[j] - pa_xxxx[j] * pc_yzz[j] - 4.0 * pa_xxx[j] * pc_xzz[j] * pb_y[j] - 8.0 * pa_xxx[j] * pc_xyz[j] * pb_z[j] - 12.0 * pa_xx[j] * pc_xxz[j] * pb_yz[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_yzz[j]);

                t_xxxx_yzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 3.0 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_xxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 0.5 * pc_xxxx[j] * pb_y[j] * fl1_fx + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pb_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yzz[j] + 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 12.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] + 4.0 * pa_xxx[j] * pc_xyzz[j] + 6.0 * pa_xx[j] * pc_xxzz[j] * pb_y[j] + 12.0 * pa_xx[j] * pc_xxyz[j] * pb_z[j] + 8.0 * pa_x[j] * pc_xxxz[j] * pb_yz[j] + 4.0 * pa_x[j] * pc_xxxy[j] * pb_zz[j] + pc_xxxx[j] * pb_yzz[j]);

                t_xxxx_yzz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 2.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 0.5 * pc_xxxx[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxxxy[j] * fl1_fx - 0.75 * fl2_fx * pc_yzz[j] - 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_xx[j] * pc_xxyzz[j] - 4.0 * pa_x[j] * pc_xxxzz[j] * pb_y[j] - 8.0 * pa_x[j] * pc_xxxyz[j] * pb_z[j] - 2.0 * pc_xxxxz[j] * pb_yz[j] - pc_xxxxy[j] * pb_zz[j]);

                t_xxxx_yzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxyzz[j] + pc_xxxxzz[j] * pb_y[j] + 2.0 * pc_xxxxyz[j] * pb_z[j]);

                t_xxxx_yzz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_9_10(      CMemBlock2D<double>& primBuffer,
                                   const CMemBlock2D<double>& auxBuffer,
                                   const CMemBlock2D<double>& osFactors,
                                   const CMemBlock2D<double>& paDistances,
                                   const CMemBlock2D<double>& pbDistances,
                                   const CMemBlock2D<double>& pcDistances,
                                   const CGtoBlock&           braGtoBlock,
                                   const CGtoBlock&           ketGtoBlock,
                                   const int32_t              iContrGto)
    {
        // Batch of Integrals (9,10)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxx = paDistances.data(34 * idx + 19);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxx_zzz = primBuffer.data(150 * idx + 9);

            // Batch of Integrals (9,10)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxx, pb_z, pb_zz, pb_zzz, pc_x, pc_xx, pc_xxx, \
                                     pc_xxxx, pc_xxxxz, pc_xxxxzz, pc_xxxxzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xz, pc_xzz, pc_xzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxx_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxx_zzz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_z[j] + 4.5 * pa_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_xxxx[j] * pb_z[j] * fl1_fx + 0.75 * fl2_fx * pb_zzz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_zzz[j] + pa_xxxx[j] * pb_zzz[j]);

                t_xxxx_zzz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_z[j] - 1.125 * fl3_fx * pc_z[j] - 9.0 * pa_xx[j] * fl2_fx * pb_z[j] - 4.5 * pa_xx[j] * fl2_fx * pc_z[j] - 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pa_xxxx[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxxx[j] * pc_z[j] * fl1_fx - 6.0 * pa_xxx[j] * pc_x[j] * pb_z[j] * fl1_fx - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * fl2_fx * pb_zzz[j] - 9.0 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_zzz[j] - 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_xxxx[j] * pb_zz[j] * pc_z[j] - 4.0 * pa_xxx[j] * pc_x[j] * pb_zzz[j]);

                t_xxxx_zzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 9.0 * pa_xx[j] * fl2_fx * pc_z[j] + 4.5 * pa_xx[j] * fl2_fx * pb_z[j] + 18.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 9.0 * pa_x[j] * pc_xz[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_xxxx[j] * pc_z[j] * fl1_fx + 6.0 * pa_xxx[j] * pc_x[j] * pb_z[j] * fl1_fx + 6.0 * pa_xxx[j] * pc_xz[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xx[j] * pb_z[j] * fl1_fx + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 4.5 * fl2_fx * pb_zz[j] * pc_z[j] + 0.75 * fl2_fx * pb_zzz[j] + 9.0 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] + 9.0 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] + 18.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_zzz[j] + 3.0 * pa_xxxx[j] * pb_z[j] * pc_zz[j] + 12.0 * pa_xxx[j] * pc_xz[j] * pb_zz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_zzz[j]);

                t_xxxx_zzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 4.5 * pa_xx[j] * fl2_fx * pc_z[j] - 18.0 * pa_x[j] * pc_xz[j] * fl2_fx - 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 9.0 * pc_xx[j] * fl2_fx * pb_z[j] - 4.5 * pc_xxz[j] * fl2_fx - 6.0 * pa_xxx[j] * pc_xz[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xx[j] * pb_z[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xxz[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxx[j] * pb_z[j] * fl1_fx - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * fl2_fx * pb_z[j] * pc_zz[j] - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pc_zzz[j] - 9.0 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] - 18.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 18.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 9.0 * pc_xxz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_zzz[j] - pa_xxxx[j] * pc_zzz[j] - 12.0 * pa_xxx[j] * pc_xzz[j] * pb_z[j] - 18.0 * pa_xx[j] * pc_xxz[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xxx[j] * pb_zzz[j]);

                t_xxxx_zzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 9.0 * pa_x[j] * pc_xz[j] * fl2_fx + 9.0 * pc_xxz[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_z[j] + 9.0 * pa_xx[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxx[j] * pb_z[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 1.5 * pc_xxxx[j] * pb_z[j] * fl1_fx + 1.5 * fl2_fx * pc_zzz[j] + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 3.0 * pa_xx[j] * fl1_fx * pc_zzz[j] + 6.0 * pa_x[j] * pc_xzzz[j] * fl1_fx + 18.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_xxx[j] * pc_xzzz[j] + 18.0 * pa_xx[j] * pc_xxzz[j] * pb_z[j] + 12.0 * pa_x[j] * pc_xxxz[j] * pb_zz[j] + pc_xxxx[j] * pb_zzz[j]);

                t_xxxx_zzz[j] += fl_s_0_0_5 * (-4.5 * pc_xxz[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 1.5 * pc_xxxx[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxxxz[j] * fl1_fx - 0.75 * fl2_fx * pc_zzz[j] - 6.0 * pa_x[j] * pc_xzzz[j] * fl1_fx - 3.0 * pc_xxzzz[j] * fl1_fx - 9.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_xx[j] * pc_xxzzz[j] - 12.0 * pa_x[j] * pc_xxxzz[j] * pb_z[j] - 3.0 * pc_xxxxz[j] * pb_zz[j]);

                t_xxxx_zzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxzzz[j] * fl1_fx + 4.0 * pa_x[j] * pc_xxxzzz[j] + 3.0 * pc_xxxxzz[j] * pb_z[j]);

                t_xxxx_zzz[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_10_11(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (10,11)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxy = pcDistances.data(119 * idx + 84);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_xxx = primBuffer.data(150 * idx + 10);

            // Batch of Integrals (10,11)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_x, pb_xx, pb_xxx, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxx, pc_xxxxxxy, pc_xxxxxy, pc_xxxxy, \
                                     pc_xxxy, pc_xxy, pc_xy, pc_y, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xxxy_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxy_xxx[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pa_y[j] + 2.25 * pa_xxy[j] * fl2_fx + 6.75 * pa_xy[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xxxy[j] * pb_x[j] * fl1_fx + 4.5 * pa_xxy[j] * fl1_fx * pb_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xxx[j] + pa_xxxy[j] * pb_xxx[j]);

                t_xxxy_xxx[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_y[j] - 5.625 * fl3_fx * pa_y[j] - 4.5 * pa_xxy[j] * fl2_fx - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 11.25 * pa_xy[j] * pc_x[j] * fl2_fx - 6.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 13.5 * pa_xy[j] * fl2_fx * pb_x[j] - 11.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 2.25 * fl2_fx * pc_y[j] * pb_xx[j] - 4.5 * fl2_fx * pa_y[j] * pb_xx[j] - 1.5 * pa_xxxy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxxy[j] * pc_x[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_y[j] * pb_x[j] * fl1_fx - 13.5 * pa_xxy[j] * pc_x[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_xx[j] - 4.5 * pa_xxy[j] * fl1_fx * pb_xx[j] - 13.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xx[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxx[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxx[j] - 3.0 * pa_xxxy[j] * pb_xx[j] * pc_x[j] - pa_xxx[j] * pc_y[j] * pb_xxx[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_xxx[j]);

                t_xxxy_xxx[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_y[j] + 5.625 * fl3_fx * pa_y[j] + 4.5 * pa_xx[j] * fl2_fx * pc_y[j] + 2.25 * pa_xxy[j] * fl2_fx + 22.5 * pa_xy[j] * pc_x[j] * fl2_fx + 11.25 * pa_x[j] * pc_xy[j] * fl2_fx + 13.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + 6.75 * pa_xy[j] * fl2_fx * pb_x[j] + 11.25 * pc_xx[j] * fl2_fx * pa_y[j] + 11.25 * pc_xy[j] * fl2_fx * pb_x[j] + 22.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 4.5 * fl2_fx * pc_y[j] * pb_xx[j] + 2.25 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xxxy[j] * pc_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx + 13.5 * pa_xxy[j] * pc_x[j] * pb_x[j] * fl1_fx + 9.0 * pa_xxy[j] * pc_xx[j] * fl1_fx + 13.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + 4.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_xx[j] + 27.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx + 13.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 13.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xx[j] + 9.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxx[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxx[j] + 3.0 * pa_xxxy[j] * pb_x[j] * pc_xx[j] + 3.0 * pa_xxx[j] * pc_xy[j] * pb_xx[j] + 9.0 * pa_xxy[j] * pc_xx[j] * pb_xx[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xxx[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_xxx[j]);

                t_xxxy_xxx[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 1.875 * fl3_fx * pa_y[j] - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 22.5 * pa_x[j] * pc_xy[j] * fl2_fx - 11.25 * pa_xy[j] * pc_x[j] * fl2_fx - 6.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 22.5 * pc_xx[j] * fl2_fx * pa_y[j] - 11.25 * pc_xxy[j] * fl2_fx - 22.5 * pc_xy[j] * fl2_fx * pb_x[j] - 11.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 2.25 * fl2_fx * pc_y[j] * pb_xx[j] - 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx - 9.0 * pa_xxy[j] * pc_xx[j] * fl1_fx - 13.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xxy[j] * fl1_fx - 27.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx - 15.0 * pa_xy[j] * pc_xxx[j] * fl1_fx - 27.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 13.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 15.0 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxy[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] - pa_xxxy[j] * pc_xxx[j] - 3.0 * pa_xxx[j] * pc_xxy[j] * pb_x[j] - 9.0 * pa_xxy[j] * pc_xxx[j] * pb_x[j] - 9.0 * pa_xx[j] * pc_xxy[j] * pb_xx[j] - 9.0 * pa_xy[j] * pc_xxx[j] * pb_xx[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xxx[j] - pc_xxx[j] * pa_y[j] * pb_xxx[j]);

                t_xxxy_xxx[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 11.25 * pa_x[j] * pc_xy[j] * fl2_fx + 22.5 * pc_xxy[j] * fl2_fx + 11.25 * pc_xx[j] * fl2_fx * pa_y[j] + 11.25 * pc_xy[j] * fl2_fx * pb_x[j] + 9.0 * pa_xx[j] * pc_xxy[j] * fl1_fx + 15.0 * pa_xy[j] * pc_xxx[j] * fl1_fx + 27.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 15.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 15.0 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx + 7.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 15.0 * pc_xxxy[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxy[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxxy[j] + 3.0 * pa_xxy[j] * pc_xxxx[j] + 9.0 * pa_xx[j] * pc_xxxy[j] * pb_x[j] + 9.0 * pa_xy[j] * pc_xxxx[j] * pb_x[j] + 9.0 * pa_x[j] * pc_xxxy[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_y[j] * pb_xx[j] + pc_xxxy[j] * pb_xxx[j]);

                t_xxxy_xxx[j] += fl_s_0_0_5 * (-11.25 * pc_xxy[j] * fl2_fx - 15.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 7.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 15.0 * pc_xxxy[j] * pb_x[j] * fl1_fx - 7.5 * pc_xxxxy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxxxy[j] - 3.0 * pa_xy[j] * pc_xxxxx[j] - 9.0 * pa_x[j] * pc_xxxxy[j] * pb_x[j] - 3.0 * pc_xxxxx[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxxy[j] * pb_xx[j]);

                t_xxxy_xxx[j] += fl_s_0_0_6 * (7.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxxy[j] + pc_xxxxxx[j] * pa_y[j] + 3.0 * pc_xxxxxy[j] * pb_x[j]);

                t_xxxy_xxx[j] += -fl_s_0_0_7 * pc_xxxxxxy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_11_12(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (11,12)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyy = pcDistances.data(119 * idx + 86);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_xxy = primBuffer.data(150 * idx + 11);

            // Batch of Integrals (11,12)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_x, pb_xx, pb_xxy, pb_xy, \
                                     pb_y, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyy, pc_xxxxy, \
                                     pc_xxxxyy, pc_xxxy, pc_xxxyy, pc_xxy, pc_xxyy, pc_xy, pc_xyy, pc_y, pc_yy, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxy_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxy_xxy[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 2.25 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xxxy[j] * fl1_fx * pb_y[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xxy[j] * fl1_fx * pb_xy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xxy[j] + pa_xxxy[j] * pb_xxy[j]);

                t_xxxy_xxy[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 0.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 3.0 * pa_xx[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 2.25 * pa_xy[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 4.5 * pa_xy[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 1.5 * fl2_fx * pc_y[j] * pb_xy[j] - 3.0 * fl2_fx * pa_y[j] * pb_xy[j] - 0.5 * pa_xxxy[j] * fl1_fx * pc_y[j] - 0.5 * pa_xxxy[j] * fl1_fx * pb_y[j] - 0.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_y[j] - pa_xxx[j] * fl1_fx * pb_x[j] * pc_x[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_xx[j] - 4.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_y[j] - 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xx[j] - 3.0 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pc_y[j] * pb_xy[j] - 3.0 * pa_xxy[j] * fl1_fx * pb_xy[j] - 9.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxy[j] - pa_xxxy[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xxxy[j] * pb_xy[j] * pc_x[j] - pa_xxx[j] * pc_y[j] * pb_xxy[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_xxy[j]);

                t_xxxy_xxy[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pc_yy[j] + 4.5 * pa_xy[j] * fl2_fx * pc_y[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 2.25 * pa_xy[j] * fl2_fx * pb_y[j] + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_y[j] + 7.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pc_yy[j] * pb_x[j] + 3.0 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] + 3.0 * fl2_fx * pc_y[j] * pb_xy[j] + 1.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xxxy[j] * fl1_fx * pc_y[j] + 0.5 * pa_xxx[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_y[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_xx[j] + pa_xxx[j] * fl1_fx * pb_x[j] * pc_x[j] + 4.5 * pa_xxy[j] * pc_xy[j] * fl1_fx + 4.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_y[j] + 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_x[j] + 3.0 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_y[j] + 3.0 * pa_xx[j] * fl1_fx * pc_y[j] * pb_xy[j] + 9.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] + 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] + 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 9.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xy[j] + 6.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_xy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxy[j] + 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xx[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxy[j] + 2.0 * pa_xxxy[j] * pb_x[j] * pc_xy[j] + pa_xxxy[j] * pc_xx[j] * pb_y[j] + pa_xxx[j] * pc_yy[j] * pb_xx[j] + 2.0 * pa_xxx[j] * pc_xy[j] * pb_xy[j] + 3.0 * pa_xxy[j] * pc_xy[j] * pb_xx[j] + 6.0 * pa_xxy[j] * pc_xx[j] * pb_xy[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xxy[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_xxy[j]);

                t_xxxy_xxy[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * fl2_fx * pc_yy[j] - 2.25 * pa_xy[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 2.5 * pc_xxx[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_x[j] - 3.75 * pc_xyy[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pa_y[j] - 7.5 * pc_xy[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pc_yy[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 1.5 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * pa_xxx[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xxx[j] * fl1_fx * pc_xx[j] - 4.5 * pa_xxy[j] * pc_xy[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] - 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_x[j] - 9.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] - 9.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] - 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xxy[j] * fl1_fx * pa_y[j] * pb_x[j] - 6.0 * pc_xxy[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_xy[j] - 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xx[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxy[j] - pa_xxxy[j] * pc_xxy[j] - 2.0 * pa_xxx[j] * pc_xyy[j] * pb_x[j] - pa_xxx[j] * pc_xxy[j] * pb_y[j] - 6.0 * pa_xxy[j] * pc_xxy[j] * pb_x[j] - 3.0 * pa_xxy[j] * pc_xxx[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_xx[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_xy[j] - 3.0 * pa_xy[j] * pc_xxy[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xxx[j] * pb_xy[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xxy[j] - pc_xxx[j] * pa_y[j] * pb_xxy[j]);

                t_xxxy_xxy[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 2.25 * pa_x[j] * fl2_fx * pc_yy[j] + 5.0 * pc_xxx[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xyy[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pb_x[j] + 4.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx + 9.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] + 9.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 5.0 * pc_xxxy[j] * pa_y[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + 5.0 * pc_xxxy[j] * fl1_fx * pb_y[j] + pc_xxxx[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xxyy[j] * fl1_fx * pb_x[j] + 6.0 * pc_xxy[j] * fl1_fx * pa_y[j] * pb_x[j] + 6.0 * pc_xxy[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxyy[j] + 3.0 * pa_xxy[j] * pc_xxxy[j] + 6.0 * pa_xx[j] * pc_xxyy[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxxy[j] * pb_y[j] + 6.0 * pa_xy[j] * pc_xxxy[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xxxx[j] * pb_y[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxy[j] * pb_xy[j] + pc_xxxy[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxxx[j] * pa_y[j] * pb_xy[j] + pc_xxxy[j] * pb_xxy[j]);

                t_xxxy_xxy[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xyy[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx - 5.0 * pc_xxxy[j] * pa_y[j] * fl1_fx - 5.0 * pc_xxxyy[j] * fl1_fx - 5.0 * pc_xxxy[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxxxx[j] * fl1_fx - pc_xxxx[j] * fl1_fx * pb_x[j] - 6.0 * pc_xxyy[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxxyy[j] - 3.0 * pa_xy[j] * pc_xxxxy[j] - 6.0 * pa_x[j] * pc_xxxyy[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxxy[j] * pb_y[j] - 2.0 * pc_xxxxy[j] * pa_y[j] * pb_x[j] - pc_xxxxx[j] * pa_y[j] * pb_y[j] - pc_xxxyy[j] * pb_xx[j] - 2.0 * pc_xxxxy[j] * pb_xy[j]);

                t_xxxy_xxy[j] += fl_s_0_0_6 * (5.0 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxyy[j] + pc_xxxxxy[j] * pa_y[j] + 2.0 * pc_xxxxyy[j] * pb_x[j] + pc_xxxxxy[j] * pb_y[j]);

                t_xxxy_xxy[j] += -fl_s_0_0_7 * pc_xxxxxyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_12_13(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (12,13)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_xxz = primBuffer.data(150 * idx + 12);

            // Batch of Integrals (12,13)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_x, pb_xx, pb_xxz, pb_xz, \
                                     pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyz, pc_xxxxxz, \
                                     pc_xxxxy, pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyz, pc_xxz, \
                                     pc_xy, pc_xyz, pc_xz, pc_y, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xxxy_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxxy_xxz[j] = fl_s_0_0_0 * (2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xxxy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xxy[j] * fl1_fx * pb_xz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xxz[j] + pa_xxxy[j] * pb_xxz[j]);

                t_xxxy_xxz[j] += fl_s_0_0_1 * (-2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pa_xy[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_xz[j] - 3.0 * fl2_fx * pa_y[j] * pb_xz[j] - 0.5 * pa_xxxy[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxxy[j] * fl1_fx * pb_z[j] - 0.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_z[j] - 4.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] - 3.0 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pc_y[j] * pb_xz[j] - 3.0 * pa_xxy[j] * fl1_fx * pb_xz[j] - 9.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxz[j] - pa_xxxy[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xxxy[j] * pb_xz[j] * pc_x[j] - pa_xxx[j] * pc_y[j] * pb_xxz[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_xxz[j]);

                t_xxxy_xxz[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pa_xy[j] * fl2_fx * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 3.75 * pc_xz[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 7.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] + 3.0 * fl2_fx * pc_y[j] * pb_xz[j] + 1.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xxxy[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_z[j] + 4.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 4.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_x[j] + 3.0 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_z[j] + 3.0 * pa_xx[j] * fl1_fx * pc_y[j] * pb_xz[j] + 9.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] + 9.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_x[j] + 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 9.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xz[j] + 6.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_xz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xx[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxz[j] + 2.0 * pa_xxxy[j] * pb_x[j] * pc_xz[j] + pa_xxxy[j] * pc_xx[j] * pb_z[j] + pa_xxx[j] * pc_yz[j] * pb_xx[j] + 2.0 * pa_xxx[j] * pc_xy[j] * pb_xz[j] + 3.0 * pa_xxy[j] * pc_xz[j] * pb_xx[j] + 6.0 * pa_xxy[j] * pc_xx[j] * pb_xz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xxz[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_xxz[j]);

                t_xxxy_xxz[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pa_y[j] - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_x[j] - 9.0 * pa_xy[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 9.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_x[j] - 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - 6.0 * pc_xxz[j] * fl1_fx * pa_y[j] * pb_x[j] - 6.0 * pc_xxy[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_xz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - pa_xxxy[j] * pc_xxz[j] - 2.0 * pa_xxx[j] * pc_xyz[j] * pb_x[j] - pa_xxx[j] * pc_xxy[j] * pb_z[j] - 6.0 * pa_xxy[j] * pc_xxz[j] * pb_x[j] - 3.0 * pa_xxy[j] * pc_xxx[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_xz[j] - 3.0 * pa_xy[j] * pc_xxz[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xxx[j] * pb_xz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xxz[j] - pc_xxx[j] * pa_y[j] * pb_xxz[j]);

                t_xxxy_xxz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_xy[j] * pc_xxz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xxz[j] * fl1_fx * pa_y[j] * pb_x[j] + 6.0 * pc_xxy[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxyz[j] + 3.0 * pa_xxy[j] * pc_xxxz[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxxy[j] * pb_z[j] + 6.0 * pa_xy[j] * pc_xxxz[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xxxx[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxy[j] * pb_xz[j] + pc_xxxz[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxxx[j] * pa_y[j] * pb_xz[j] + pc_xxxy[j] * pb_xxz[j]);

                t_xxxy_xxz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] - 6.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxxyz[j] - 3.0 * pa_xy[j] * pc_xxxxz[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxxy[j] * pb_z[j] - 2.0 * pc_xxxxz[j] * pa_y[j] * pb_x[j] - pc_xxxxx[j] * pa_y[j] * pb_z[j] - pc_xxxyz[j] * pb_xx[j] - 2.0 * pc_xxxxy[j] * pb_xz[j]);

                t_xxxy_xxz[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxyz[j] + pc_xxxxxz[j] * pa_y[j] + 2.0 * pc_xxxxyz[j] * pb_x[j] + pc_xxxxxy[j] * pb_z[j]);

                t_xxxy_xxz[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_13_14(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (13,14)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_xyy = primBuffer.data(150 * idx + 13);

            // Batch of Integrals (13,14)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_x, pb_xy, pb_xyy, pb_y, \
                                     pb_yy, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyy, pc_xxxy, \
                                     pc_xxxyy, pc_xxxyyy, pc_xxy, pc_xxyy, pc_xxyyy, pc_xy, pc_xyy, pc_xyyy, pc_y, pc_yy, \
                                     pc_yyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxxy_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxy_xyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * fl3_fx * pb_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * pa_xxxy[j] * pb_x[j] * fl1_fx + pa_xxx[j] * fl1_fx * pb_xy[j] + 1.5 * pa_xxy[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xyy[j] + pa_xxxy[j] * pb_xyy[j]);

                t_xxxy_xyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 1.125 * fl3_fx * pc_y[j] - 2.25 * fl3_fx * pb_y[j] - 1.5 * pa_xxy[j] * fl2_fx - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_xx[j] * fl2_fx * pb_y[j] - 2.25 * pa_xy[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pa_xy[j] * fl2_fx * pb_x[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_y[j] * pb_yy[j] - 1.5 * fl2_fx * pa_y[j] * pb_yy[j] - 0.5 * pa_xxxy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxxy[j] * pc_x[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_y[j] * pb_x[j] * fl1_fx - pa_xxx[j] * fl1_fx * pc_x[j] * pb_y[j] - pa_xxx[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xxy[j] * pc_x[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xy[j] - 3.0 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_y[j] - 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_yy[j] - 1.5 * pa_xxy[j] * fl1_fx * pb_yy[j] - 4.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyy[j] - 2.0 * pa_xxxy[j] * pb_xy[j] * pc_y[j] - pa_xxxy[j] * pc_x[j] * pb_yy[j] - pa_xxx[j] * pc_y[j] * pb_xyy[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_xyy[j]);

                t_xxxy_xyy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pa_y[j] + 2.25 * fl3_fx * pb_y[j] + 4.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_y[j] + 4.5 * pa_xy[j] * pc_x[j] * fl2_fx + 6.75 * pa_x[j] * pc_xy[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 1.5 * pc_xx[j] * fl2_fx * pa_y[j] + 3.0 * pc_xx[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * pc_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_y[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yy[j] * pb_y[j] + 3.0 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] + 1.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.75 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * pa_xxxy[j] * pc_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx + pa_xxx[j] * fl1_fx * pc_x[j] * pb_y[j] + 1.5 * pa_xxy[j] * pc_x[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_xx[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xy[j] + 1.5 * pa_xxy[j] * fl1_fx * pc_yy[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_y[j] + 3.0 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_yy[j] + 1.5 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] + 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 4.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xy[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyy[j] + pa_xxxy[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xxxy[j] * pc_xy[j] * pb_y[j] + 2.0 * pa_xxx[j] * pc_yy[j] * pb_xy[j] + pa_xxx[j] * pc_xy[j] * pb_yy[j] + 6.0 * pa_xxy[j] * pc_xy[j] * pb_xy[j] + 3.0 * pa_xxy[j] * pc_xx[j] * pb_yy[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xyy[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_xyy[j]);

                t_xxxy_xyy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * fl3_fx * pb_y[j] - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 13.5 * pa_x[j] * pc_xy[j] * fl2_fx - 2.25 * pa_xy[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 3.0 * pc_xx[j] * fl2_fx * pa_y[j] - 4.5 * pc_xxy[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 4.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_yyy[j] - 1.5 * fl2_fx * pa_y[j] * pc_yy[j] - 3.0 * fl2_fx * pc_yy[j] * pb_y[j] - 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_y[j] * pb_yy[j] - 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_xx[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yyy[j] - 1.5 * pa_xxy[j] * fl1_fx * pc_yy[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_y[j] - 1.5 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xxx[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] - 4.5 * pa_xy[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx - pc_xxx[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xxy[j] * fl1_fx * pa_y[j] * pb_y[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_yy[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_x[j] - 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xy[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_x[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xyy[j] - pa_xxxy[j] * pc_xyy[j] - pa_xxx[j] * pc_yyy[j] * pb_x[j] - 2.0 * pa_xxx[j] * pc_xyy[j] * pb_y[j] - 3.0 * pa_xxy[j] * pc_xyy[j] * pb_x[j] - 6.0 * pa_xxy[j] * pc_xxy[j] * pb_y[j] - 6.0 * pa_xx[j] * pc_xyy[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xxy[j] * pb_yy[j] - 6.0 * pa_xy[j] * pc_xxy[j] * pb_xy[j] - 3.0 * pa_xy[j] * pc_xxx[j] * pb_yy[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xyy[j] - pc_xxx[j] * pa_y[j] * pb_xyy[j]);

                t_xxxy_xyy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 6.75 * pa_x[j] * pc_xy[j] * fl2_fx + 9.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_y[j] + 3.0 * pc_xx[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyy[j] + 0.75 * fl2_fx * pa_y[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yy[j] * pb_y[j] + 4.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yyy[j] + 1.5 * pa_xy[j] * pc_xxx[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + 4.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xyy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxxy[j] * pb_x[j] * fl1_fx + pc_xxxx[j] * fl1_fx * pb_y[j] + pc_xxx[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xxyy[j] * fl1_fx * pa_y[j] + 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 6.0 * pc_xxy[j] * fl1_fx * pa_y[j] * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_x[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_xy[j] + pa_xxx[j] * pc_xyyy[j] + 3.0 * pa_xxy[j] * pc_xxyy[j] + 3.0 * pa_xx[j] * pc_xyyy[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxyy[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_xxyy[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xxxy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xxyy[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xxxy[j] * pb_yy[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_xy[j] + pc_xxxx[j] * pa_y[j] * pb_yy[j] + pc_xxxy[j] * pb_xyy[j]);

                t_xxxy_xyy[j] += fl_s_0_0_5 * (-4.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yyy[j] - 4.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxxy[j] * fl1_fx - pc_xxxx[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyyy[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pa_y[j] - 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyyy[j] - 3.0 * pa_xy[j] * pc_xxxyy[j] - 3.0 * pa_x[j] * pc_xxyyy[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxxyy[j] * pb_y[j] - pc_xxxyy[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxxyy[j] * pb_xy[j] - pc_xxxxy[j] * pb_yy[j]);

                t_xxxy_xyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyyy[j] + pc_xxxxyy[j] * pa_y[j] + pc_xxxyyy[j] * pb_x[j] + 2.0 * pc_xxxxyy[j] * pb_y[j]);

                t_xxxy_xyy[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_14_15(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (14,15)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_xyz = primBuffer.data(150 * idx + 14);

            // Batch of Integrals (14,15)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_x, pb_xy, pb_xyz, pb_xz, \
                                     pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyz, \
                                     pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, \
                                     pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyz, \
                                     pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxxy_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxy_xyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_xz[j] + 1.5 * pa_xxy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xyz[j] + pa_xxxy[j] * pb_xyz[j]);

                t_xxxy_xyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_xx[j] * fl2_fx * pb_z[j] - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 1.5 * fl2_fx * pa_y[j] * pb_yz[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_z[j] - 0.5 * pa_xxx[j] * fl1_fx * pc_x[j] * pb_z[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_xz[j] - 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xz[j] - 1.5 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_z[j] - 1.5 * pa_xxy[j] * fl1_fx * pc_y[j] * pb_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_yz[j] - 1.5 * pa_xxy[j] * fl1_fx * pb_yz[j] - 4.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyz[j] - pa_xxxy[j] * pb_xy[j] * pc_z[j] - pa_xxxy[j] * pb_xz[j] * pc_y[j] - pa_xxxy[j] * pc_x[j] * pb_yz[j] - pa_xxx[j] * pc_y[j] * pb_xyz[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_xyz[j]);

                t_xxxy_xyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_yz[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_xz[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_z[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_x[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xz[j] + 1.5 * pa_xxy[j] * fl1_fx * pc_yz[j] + 1.5 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_y[j] + 1.5 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_z[j] + 1.5 * pa_xxy[j] * fl1_fx * pc_y[j] * pb_z[j] + 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_yz[j] + 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] + 4.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.5 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 4.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xy[j] + 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyz[j] + pa_xxxy[j] * pb_x[j] * pc_yz[j] + pa_xxxy[j] * pc_xz[j] * pb_y[j] + pa_xxxy[j] * pc_xy[j] * pb_z[j] + pa_xxx[j] * pc_yz[j] * pb_xy[j] + pa_xxx[j] * pc_yy[j] * pb_xz[j] + pa_xxx[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_xxy[j] * pc_xz[j] * pb_xy[j] + 3.0 * pa_xxy[j] * pc_xy[j] * pb_xz[j] + 3.0 * pa_xxy[j] * pc_xx[j] * pb_yz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xyz[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_xyz[j]);

                t_xxxy_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * pc_xz[j] * fl2_fx - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 0.5 * pa_xxx[j] * fl1_fx * pc_xz[j] - 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_x[j] - 1.5 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yyz[j] - 1.5 * pa_xxy[j] * fl1_fx * pc_yz[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_y[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] - 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] - 4.5 * pa_xy[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 4.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] - 4.5 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xxz[j] * fl1_fx * pa_y[j] * pb_y[j] - 3.0 * pc_xxy[j] * fl1_fx * pa_y[j] * pb_z[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_yz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] - 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] - 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xy[j] - 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xyz[j] - pa_xxxy[j] * pc_xyz[j] - pa_xxx[j] * pc_yyz[j] * pb_x[j] - pa_xxx[j] * pc_xyz[j] * pb_y[j] - pa_xxx[j] * pc_xyy[j] * pb_z[j] - 3.0 * pa_xxy[j] * pc_xyz[j] * pb_x[j] - 3.0 * pa_xxy[j] * pc_xxz[j] * pb_y[j] - 3.0 * pa_xxy[j] * pc_xxy[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xxy[j] * pb_yz[j] - 3.0 * pa_xy[j] * pc_xxz[j] * pb_xy[j] - 3.0 * pa_xy[j] * pc_xxy[j] * pb_xz[j] - 3.0 * pa_xy[j] * pc_xxx[j] * pb_yz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xyz[j] - pc_xxx[j] * pa_y[j] * pb_xyz[j]);

                t_xxxy_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yyz[j] + 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 4.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xxyz[j] * fl1_fx * pa_y[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pa_y[j] * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pa_y[j] * pb_z[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xz[j] + pa_xxx[j] * pc_xyyz[j] + 3.0 * pa_xxy[j] * pc_xxyz[j] + 3.0 * pa_xx[j] * pc_xyyz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxyz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_xxyy[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xxxz[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_xxxy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xxxy[j] * pb_yz[j] + pc_xxxz[j] * pa_y[j] * pb_xy[j] + pc_xxxy[j] * pa_y[j] * pb_xz[j] + pc_xxxx[j] * pa_y[j] * pb_yz[j] + pc_xxxy[j] * pb_xyz[j]);

                t_xxxy_xyz[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 0.5 * pc_xxxxz[j] * fl1_fx - 0.5 * pc_xxxz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pa_y[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyyz[j] - 3.0 * pa_xy[j] * pc_xxxyz[j] - 3.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxyz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xxxyy[j] * pb_z[j] - pc_xxxyz[j] * pa_y[j] * pb_x[j] - pc_xxxxz[j] * pa_y[j] * pb_y[j] - pc_xxxxy[j] * pa_y[j] * pb_z[j] - pc_xxxyz[j] * pb_xy[j] - pc_xxxyy[j] * pb_xz[j] - pc_xxxxy[j] * pb_yz[j]);

                t_xxxy_xyz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyyz[j] + pc_xxxxyz[j] * pa_y[j] + pc_xxxyyz[j] * pb_x[j] + pc_xxxxyz[j] * pb_y[j] + pc_xxxxyy[j] * pb_z[j]);

                t_xxxy_xyz[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_15_16(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (15,16)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_xzz = primBuffer.data(150 * idx + 15);

            // Batch of Integrals (15,16)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_x, pb_xz, pb_xzz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyz, pc_xxxxyzz, pc_xxxxz, \
                                     pc_xxxxzz, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyz, pc_xxyzz, \
                                     pc_xxz, pc_xxzz, pc_xy, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yz, pc_yzz, pc_z, pc_zz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxy_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxy_xzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xxxy[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xzz[j] + pa_xxxy[j] * pb_xzz[j]);

                t_xxxy_xzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 2.25 * pa_xy[j] * pc_x[j] * fl2_fx - 1.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * fl2_fx * pa_y[j] * pb_zz[j] - 0.5 * pa_xxxy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxxy[j] * pc_x[j] * fl1_fx - 0.5 * pa_xxx[j] * pc_y[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_x[j] * pb_x[j] * fl1_fx - 3.0 * pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xxy[j] * fl1_fx * pb_zz[j] - 4.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xzz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xzz[j] - 2.0 * pa_xxxy[j] * pb_xz[j] * pc_z[j] - pa_xxxy[j] * pc_x[j] * pb_zz[j] - pa_xxx[j] * pc_y[j] * pb_xzz[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_xzz[j]);

                t_xxxy_xzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pa_y[j] + 1.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 4.5 * pa_xy[j] * pc_x[j] * fl2_fx + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xxxy[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_y[j] * pb_x[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_x[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_xx[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxy[j] * fl1_fx * pc_zz[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] + 1.5 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx + 9.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 4.5 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_xzz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xzz[j] + pa_xxxy[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xxxy[j] * pc_xz[j] * pb_z[j] + 2.0 * pa_xxx[j] * pc_yz[j] * pb_xz[j] + pa_xxx[j] * pc_xy[j] * pb_zz[j] + 6.0 * pa_xxy[j] * pc_xz[j] * pb_xz[j] + 3.0 * pa_xxy[j] * pc_xx[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xzz[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_xzz[j]);

                t_xxxy_xzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 4.5 * pa_x[j] * pc_xy[j] * fl2_fx - 2.25 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pa_y[j] - 1.5 * pc_xxy[j] * fl2_fx - 0.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pa_y[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xxx[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_xx[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_yzz[j] - 1.5 * pa_xxy[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] - 1.5 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xxx[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 4.5 * pa_xy[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 9.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxz[j] * fl1_fx * pa_y[j] * pb_z[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xx[j] * fl1_fx * pa_y[j] * pb_zz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] - 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] - pa_xxxy[j] * pc_xzz[j] - pa_xxx[j] * pc_yzz[j] * pb_x[j] - 2.0 * pa_xxx[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_xxy[j] * pc_xzz[j] * pb_x[j] - 6.0 * pa_xxy[j] * pc_xxz[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xyz[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xxy[j] * pb_zz[j] - 6.0 * pa_xy[j] * pc_xxz[j] * pb_xz[j] - 3.0 * pa_xy[j] * pc_xxx[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xzz[j] - pc_xxx[j] * pa_y[j] * pb_xzz[j]);

                t_xxxy_xzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yzz[j] + 1.5 * pa_xy[j] * pc_xxx[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xzz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxxy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxzz[j] * fl1_fx * pa_y[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxz[j] * fl1_fx * pa_y[j] * pb_z[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + pa_xxx[j] * pc_xyzz[j] + 3.0 * pa_xxy[j] * pc_xxzz[j] + 3.0 * pa_xx[j] * pc_xyzz[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_xxzz[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xxxz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xxxy[j] * pb_zz[j] + 2.0 * pc_xxxz[j] * pa_y[j] * pb_xz[j] + pc_xxxx[j] * pa_y[j] * pb_zz[j] + pc_xxxy[j] * pb_xzz[j]);

                t_xxxy_xzz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxy[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pa_y[j] - 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyzz[j] - 3.0 * pa_xy[j] * pc_xxxzz[j] - 3.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_z[j] - pc_xxxzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pb_xz[j] - pc_xxxxy[j] * pb_zz[j]);

                t_xxxy_xzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyzz[j] + pc_xxxxzz[j] * pa_y[j] + pc_xxxyzz[j] * pb_x[j] + 2.0 * pc_xxxxyz[j] * pb_z[j]);

                t_xxxy_xzz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_16_17(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (16,17)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_yyy = primBuffer.data(150 * idx + 16);

            // Batch of Integrals (16,17)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_y, pb_yy, pb_yyy, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, pc_xxy, pc_xxyy, \
                                     pc_xxyyy, pc_xxyyyy, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_y, pc_yy, pc_yyy, pc_yyyy, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxy_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxy_yyy[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 2.25 * pa_xy[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xxxy[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxx[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yyy[j] + pa_xxxy[j] * pb_yyy[j]);

                t_xxxy_yyy[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 4.5 * pa_xy[j] * fl2_fx * pb_y[j] - 2.25 * pa_xy[j] * fl2_fx * pc_y[j] - 6.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 4.5 * pa_x[j] * fl2_fx * pb_yy[j] - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_xxxy[j] * pb_y[j] * fl1_fx - 1.5 * pa_xxxy[j] * pc_y[j] * fl1_fx - 4.5 * pa_xxx[j] * pc_y[j] * pb_y[j] * fl1_fx - 1.5 * pa_xxx[j] * fl1_fx * pb_yy[j] - 4.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] - 4.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_yyy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyy[j] - 3.0 * pa_xxxy[j] * pb_yy[j] * pc_y[j] - pa_xxx[j] * pc_y[j] * pb_yyy[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_yyy[j]);

                t_xxxy_yyy[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 4.5 * pa_xy[j] * fl2_fx * pc_y[j] + 13.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 4.5 * pa_x[j] * fl2_fx * pc_yy[j] + 2.25 * pa_xy[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_yy[j] + 4.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pa_y[j] + 6.75 * pc_xy[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xxxy[j] * pc_y[j] * fl1_fx + 4.5 * pa_xxx[j] * pc_y[j] * pb_y[j] * fl1_fx + 3.0 * pa_xxx[j] * pc_yy[j] * fl1_fx + 4.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx + 4.5 * pa_xxy[j] * pc_xy[j] * fl1_fx + 13.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx + 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] + 4.5 * pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + 4.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yy[j] + 4.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_yyy[j] + 4.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyy[j] + 3.0 * pa_xxxy[j] * pb_y[j] * pc_yy[j] + 3.0 * pa_xxx[j] * pc_yy[j] * pb_yy[j] + 9.0 * pa_xxy[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_yyy[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_yyy[j]);

                t_xxxy_yyy[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_xx[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 9.0 * pa_x[j] * fl2_fx * pc_yy[j] - 2.25 * pa_xy[j] * fl2_fx * pc_y[j] - 6.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pa_y[j] - 13.5 * pc_xy[j] * fl2_fx * pb_y[j] - 4.5 * pc_xyy[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xxx[j] * pc_yy[j] * fl1_fx - 4.5 * pa_xxy[j] * pc_xy[j] * fl1_fx - 13.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xyy[j] * fl1_fx - 4.5 * pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx - 4.5 * pa_xy[j] * pc_xxy[j] * fl1_fx - 13.5 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xy[j] * fl1_fx * pc_yyy[j] - 4.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_y[j] - 4.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] - 4.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yy[j] - 4.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_y[j] - 4.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] - pa_xxxy[j] * pc_yyy[j] - 3.0 * pa_xxx[j] * pc_yyy[j] * pb_y[j] - 9.0 * pa_xxy[j] * pc_xyy[j] * pb_y[j] - 9.0 * pa_xx[j] * pc_xyy[j] * pb_yy[j] - 9.0 * pa_xy[j] * pc_xxy[j] * pb_yy[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_yyy[j] - pc_xxx[j] * pa_y[j] * pb_yyy[j]);

                t_xxxy_yyy[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pc_xxx[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_yy[j] + 9.0 * pc_xyy[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_y[j] + 6.75 * pc_xy[j] * fl2_fx * pb_y[j] + 9.0 * pa_xx[j] * pc_xyy[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xxy[j] * fl1_fx + 13.5 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + 4.5 * pc_xxxy[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyyy[j] + 1.5 * pa_xy[j] * fl1_fx * pc_yyy[j] + 4.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pa_y[j] + 4.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_y[j] + 4.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + pa_xxx[j] * pc_yyyy[j] + 3.0 * pa_xxy[j] * pc_xyyy[j] + 9.0 * pa_xx[j] * pc_xyyy[j] * pb_y[j] + 9.0 * pa_xy[j] * pc_xxyy[j] * pb_y[j] + 9.0 * pa_x[j] * pc_xxyy[j] * pb_yy[j] + 3.0 * pc_xxxy[j] * pa_y[j] * pb_yy[j] + pc_xxxy[j] * pb_yyy[j]);

                t_xxxy_yyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xyy[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 1.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 4.5 * pc_xxxy[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxxyy[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_yyyy[j] - 1.5 * pc_xyyyy[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pa_y[j] - 4.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_xx[j] * pc_xyyyy[j] - 3.0 * pa_xy[j] * pc_xxyyy[j] - 9.0 * pa_x[j] * pc_xxyyy[j] * pb_y[j] - 3.0 * pc_xxxyy[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxxyy[j] * pb_yy[j]);

                t_xxxy_yyy[j] += fl_s_0_0_6 * (3.0 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyyy[j] + pc_xxxyyy[j] * pa_y[j] + 3.0 * pc_xxxyyy[j] * pb_y[j]);

                t_xxxy_yyy[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_17_18(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (17,18)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_yyz = primBuffer.data(150 * idx + 17);

            // Batch of Integrals (17,18)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_y, pb_yy, pb_yyz, pb_yz, \
                                     pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyz, pc_xxxyyz, \
                                     pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, \
                                     pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xxxy_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxxy_yyz[j] = fl_s_0_0_0 * (0.75 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xxxy[j] * fl1_fx * pb_z[j] + pa_xxx[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yyz[j] + pa_xxxy[j] * pb_yyz[j]);

                t_xxxy_yyz[j] += fl_s_0_0_1 * (-0.75 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_xy[j] * fl2_fx * pb_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 3.0 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xxxy[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxxy[j] * fl1_fx * pb_z[j] - 1.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_z[j] - pa_xxx[j] * fl1_fx * pb_y[j] * pc_z[j] - pa_xxx[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] - 3.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_yyz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyz[j] - pa_xxxy[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xxxy[j] * pb_yz[j] * pc_y[j] - pa_xxx[j] * pc_y[j] * pb_yyz[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_yyz[j]);

                t_xxxy_yyz[j] += fl_s_0_0_2 * (1.5 * pa_xy[j] * fl2_fx * pc_z[j] + 2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 0.75 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xz[j] * fl2_fx * pa_y[j] + 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xxxy[j] * fl1_fx * pc_z[j] + 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_z[j] + pa_xxx[j] * fl1_fx * pb_y[j] * pc_z[j] + 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] + 3.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_yyz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyz[j] + 2.0 * pa_xxxy[j] * pb_y[j] * pc_yz[j] + pa_xxxy[j] * pc_yy[j] * pb_z[j] + pa_xxx[j] * pc_yz[j] * pb_yy[j] + 2.0 * pa_xxx[j] * pc_yy[j] * pb_yz[j] + 3.0 * pa_xxy[j] * pc_xz[j] * pb_yy[j] + 6.0 * pa_xxy[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_yyz[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_yyz[j]);

                t_xxxy_yyz[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 0.75 * pa_xy[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 1.5 * pc_xz[j] * fl2_fx * pa_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] - 1.5 * pa_xy[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xxx[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pc_yyz[j] - 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] - 3.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_z[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - pa_xxxy[j] * pc_yyz[j] - 2.0 * pa_xxx[j] * pc_yyz[j] * pb_y[j] - pa_xxx[j] * pc_yyy[j] * pb_z[j] - 6.0 * pa_xxy[j] * pc_xyz[j] * pb_y[j] - 3.0 * pa_xxy[j] * pc_xyy[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_xx[j] * pc_xyy[j] * pb_yz[j] - 3.0 * pa_xy[j] * pc_xxz[j] * pb_yy[j] - 6.0 * pa_xy[j] * pc_xxy[j] * pb_yz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_yyz[j] - pc_xxx[j] * pa_y[j] * pb_yyz[j]);

                t_xxxy_yyz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_xxz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + pc_xxxz[j] * fl1_fx * pb_y[j] + pc_xxx[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyyz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_yyz[j] + 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pa_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_yz[j] + pa_xxx[j] * pc_yyyz[j] + 3.0 * pa_xxy[j] * pc_xyyz[j] + 6.0 * pa_xx[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_xyyy[j] * pb_z[j] + 6.0 * pa_xy[j] * pc_xxyz[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_xxyy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_yy[j] + 6.0 * pa_x[j] * pc_xxyy[j] * pb_yz[j] + pc_xxxz[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_yz[j] + pc_xxxy[j] * pb_yyz[j]);

                t_xxxy_yyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - pc_xxxz[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyyz[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pa_y[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyyyz[j] - 3.0 * pa_xy[j] * pc_xxyyz[j] - 6.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xxyyy[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_y[j] - pc_xxxyy[j] * pa_y[j] * pb_z[j] - pc_xxxyz[j] * pb_yy[j] - 2.0 * pc_xxxyy[j] * pb_yz[j]);

                t_xxxy_yyz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyyz[j] + pc_xxxyyz[j] * pa_y[j] + 2.0 * pc_xxxyyz[j] * pb_y[j] + pc_xxxyyy[j] * pb_z[j]);

                t_xxxy_yyz[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_18_19(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (18,19)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_yzz = primBuffer.data(150 * idx + 18);

            // Batch of Integrals (18,19)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_y, pb_yz, pb_yzz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, \
                                     pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, \
                                     pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, \
                                     pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxy_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxy_yzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.25 * pa_xxx[j] * fl2_fx + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xxxy[j] * pb_y[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yzz[j] + pa_xxxy[j] * pb_yzz[j]);

                t_xxxy_yzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.5 * pa_xxx[j] * fl2_fx - 0.75 * pa_xx[j] * pc_x[j] * fl2_fx - 1.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xxxy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xxxy[j] * pc_y[j] * fl1_fx - 0.5 * pa_xxx[j] * pc_y[j] * pb_y[j] * fl1_fx - pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] - 1.5 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_yzz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yzz[j] - 2.0 * pa_xxxy[j] * pb_yz[j] * pc_z[j] - pa_xxxy[j] * pc_y[j] * pb_zz[j] - pa_xxx[j] * pc_y[j] * pb_yzz[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_yzz[j]);

                t_xxxy_yzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.25 * pa_xxx[j] * fl2_fx + 1.5 * pa_xx[j] * pc_x[j] * fl2_fx + 0.75 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pa_xy[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pa_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xxxy[j] * pc_y[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_y[j] * pb_y[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pc_zz[j] + pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] + 3.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] + 3.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] + 1.5 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_yzz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_zz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yzz[j] + pa_xxxy[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xxxy[j] * pc_yz[j] * pb_z[j] + 2.0 * pa_xxx[j] * pc_yz[j] * pb_yz[j] + pa_xxx[j] * pc_yy[j] * pb_zz[j] + 6.0 * pa_xxy[j] * pc_xz[j] * pb_yz[j] + 3.0 * pa_xxy[j] * pc_xy[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_yzz[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_yzz[j]);

                t_xxxy_yzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.75 * pa_xx[j] * pc_x[j] * fl2_fx - 1.5 * pa_x[j] * pc_xx[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 1.5 * pa_x[j] * fl2_fx * pc_yy[j] - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 1.5 * pc_xy[j] * fl2_fx * pa_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xxx[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xxx[j] * fl1_fx * pc_zz[j] - 1.5 * pa_xxy[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xxy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xy[j] * fl1_fx * pc_yzz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] - 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] - 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] - 3.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] - pa_xxxy[j] * pc_yzz[j] - pa_xxx[j] * pc_yzz[j] * pb_y[j] - 2.0 * pa_xxx[j] * pc_yyz[j] * pb_z[j] - 3.0 * pa_xxy[j] * pc_xzz[j] * pb_y[j] - 6.0 * pa_xxy[j] * pc_xyz[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xyz[j] * pb_yz[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_zz[j] - 6.0 * pa_xy[j] * pc_xxz[j] * pb_yz[j] - 3.0 * pa_xy[j] * pc_xxy[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_yzz[j] - pc_xxx[j] * pa_y[j] * pb_yzz[j]);

                t_xxxy_yzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pc_xxx[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xzz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxxy[j] * pb_y[j] * fl1_fx + pc_xxxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyzz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_yzz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] + 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + pa_xxx[j] * pc_yyzz[j] + 3.0 * pa_xxy[j] * pc_xyzz[j] + 3.0 * pa_xx[j] * pc_xyzz[j] * pb_y[j] + 6.0 * pa_xx[j] * pc_xyyz[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_xxzz[j] * pb_y[j] + 6.0 * pa_xy[j] * pc_xxyz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_zz[j] + 2.0 * pc_xxxz[j] * pa_y[j] * pb_yz[j] + pc_xxxy[j] * pa_y[j] * pb_zz[j] + pc_xxxy[j] * pb_yzz[j]);

                t_xxxy_yzz[j] += fl_s_0_0_5 * (-0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xxyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxzz[j] * fl1_fx - 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - pc_xxxz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyzz[j] - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_y[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyyzz[j] - 3.0 * pa_xy[j] * pc_xxyzz[j] - 3.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - 6.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxxzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pb_yz[j] - pc_xxxyy[j] * pb_zz[j]);

                t_xxxy_yzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyzz[j] + pc_xxxyzz[j] * pa_y[j] + pc_xxxyzz[j] * pb_y[j] + 2.0 * pc_xxxyyz[j] * pb_z[j]);

                t_xxxy_yzz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_19_20(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (19,20)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxy = paDistances.data(34 * idx + 10);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxy = paDistances.data(34 * idx + 20);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxy_zzz = primBuffer.data(150 * idx + 19);

            // Batch of Integrals (19,20)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxy, pa_xxy, pa_xy, pa_y, pb_z, pb_zz, pb_zzz, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, \
                                     pc_xxxzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, \
                                     pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_z, \
                                     pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxxy_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxxy_zzz[j] = fl_s_0_0_0 * (2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xxxy[j] * pb_z[j] * fl1_fx + 1.5 * pa_xy[j] * fl1_fx * pb_zzz[j] + pa_xxxy[j] * pb_zzz[j]);

                t_xxxy_zzz[j] += fl_s_0_0_1 * (-4.5 * pa_xy[j] * fl2_fx * pb_z[j] - 2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * pa_xxxy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxxy[j] * pc_z[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_y[j] * pb_z[j] * fl1_fx - 4.5 * pa_xxy[j] * pc_x[j] * pb_z[j] * fl1_fx - 4.5 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_zzz[j] - 3.0 * pa_xxxy[j] * pb_zz[j] * pc_z[j] - pa_xxx[j] * pc_y[j] * pb_zzz[j] - 3.0 * pa_xxy[j] * pc_x[j] * pb_zzz[j]);

                t_xxxy_zzz[j] += fl_s_0_0_2 * (4.5 * pa_xy[j] * fl2_fx * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xxxy[j] * pc_z[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xxy[j] * pc_x[j] * pb_z[j] * fl1_fx + 4.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xy[j] * pb_z[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xx[j] * pb_z[j] * fl1_fx + 4.5 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] + 4.5 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] + 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_zz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_zzz[j] + 3.0 * pa_xxxy[j] * pb_z[j] * pc_zz[j] + 3.0 * pa_xxx[j] * pc_yz[j] * pb_zz[j] + 9.0 * pa_xxy[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_zzz[j] + 3.0 * pa_xy[j] * pc_xx[j] * pb_zzz[j]);

                t_xxxy_zzz[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pa_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xy[j] * pc_xx[j] * pb_z[j] * fl1_fx - 4.5 * pa_xy[j] * pc_xxz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxx[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pa_xy[j] * fl1_fx * pc_zzz[j] - 4.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] - 4.5 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] - 4.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] - 4.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_z[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - pa_xxxy[j] * pc_zzz[j] - 3.0 * pa_xxx[j] * pc_yzz[j] * pb_z[j] - 9.0 * pa_xxy[j] * pc_xzz[j] * pb_z[j] - 9.0 * pa_xx[j] * pc_xyz[j] * pb_zz[j] - 9.0 * pa_xy[j] * pc_xxz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_zzz[j] - pc_xxx[j] * pa_y[j] * pb_zzz[j]);

                t_xxxy_zzz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xxz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxy[j] * pb_z[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_y[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxxy[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pc_yzzz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_zzz[j] + 4.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pa_y[j] + 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_xxx[j] * pc_yzzz[j] + 3.0 * pa_xxy[j] * pc_xzzz[j] + 9.0 * pa_xx[j] * pc_xyzz[j] * pb_z[j] + 9.0 * pa_xy[j] * pc_xxzz[j] * pb_z[j] + 9.0 * pa_x[j] * pc_xxyz[j] * pb_zz[j] + 3.0 * pc_xxxz[j] * pa_y[j] * pb_zz[j] + pc_xxxy[j] * pb_zzz[j]);

                t_xxxy_zzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_yzzz[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pa_y[j] - 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyzzz[j] - 3.0 * pa_xy[j] * pc_xxzzz[j] - 9.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - 3.0 * pc_xxxzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxxyz[j] * pb_zz[j]);

                t_xxxy_zzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyzzz[j] + pc_xxxzzz[j] * pa_y[j] + 3.0 * pc_xxxyzz[j] * pb_z[j]);

                t_xxxy_zzz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_20_21(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (20,21)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxz = pcDistances.data(119 * idx + 85);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_xxx = primBuffer.data(150 * idx + 20);

            // Batch of Integrals (20,21)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_x, pb_xx, pb_xxx, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxx, pc_xxxxxxz, pc_xxxxxz, pc_xxxxz, \
                                     pc_xxxz, pc_xxz, pc_xz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xxxz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxz_xxx[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pa_z[j] + 2.25 * pa_xxz[j] * fl2_fx + 6.75 * pa_xz[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xxxz[j] * pb_x[j] * fl1_fx + 4.5 * pa_xxz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xxx[j] + pa_xxxz[j] * pb_xxx[j]);

                t_xxxz_xxx[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_z[j] - 5.625 * fl3_fx * pa_z[j] - 4.5 * pa_xxz[j] * fl2_fx - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 11.25 * pa_xz[j] * pc_x[j] * fl2_fx - 6.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 13.5 * pa_xz[j] * fl2_fx * pb_x[j] - 11.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 2.25 * fl2_fx * pc_z[j] * pb_xx[j] - 4.5 * fl2_fx * pa_z[j] * pb_xx[j] - 1.5 * pa_xxxz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxxz[j] * pc_x[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_z[j] * pb_x[j] * fl1_fx - 13.5 * pa_xxz[j] * pc_x[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xx[j] - 4.5 * pa_xxz[j] * fl1_fx * pb_xx[j] - 13.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xx[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] - 3.0 * pa_xxxz[j] * pb_xx[j] * pc_x[j] - pa_xxx[j] * pc_z[j] * pb_xxx[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_xxx[j]);

                t_xxxz_xxx[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pa_z[j] + 4.5 * pa_xx[j] * fl2_fx * pc_z[j] + 2.25 * pa_xxz[j] * fl2_fx + 22.5 * pa_xz[j] * pc_x[j] * fl2_fx + 11.25 * pa_x[j] * pc_xz[j] * fl2_fx + 13.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 6.75 * pa_xz[j] * fl2_fx * pb_x[j] + 11.25 * pc_xx[j] * fl2_fx * pa_z[j] + 11.25 * pc_xz[j] * fl2_fx * pb_x[j] + 22.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 4.5 * fl2_fx * pc_z[j] * pb_xx[j] + 2.25 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xxxz[j] * pc_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx + 13.5 * pa_xxz[j] * pc_x[j] * pb_x[j] * fl1_fx + 9.0 * pa_xxz[j] * pc_xx[j] * fl1_fx + 13.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + 4.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xx[j] + 27.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx + 13.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 13.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xx[j] + 9.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] + 3.0 * pa_xxxz[j] * pb_x[j] * pc_xx[j] + 3.0 * pa_xxx[j] * pc_xz[j] * pb_xx[j] + 9.0 * pa_xxz[j] * pc_xx[j] * pb_xx[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xxx[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_xxx[j]);

                t_xxxz_xxx[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pa_z[j] - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 22.5 * pa_x[j] * pc_xz[j] * fl2_fx - 11.25 * pa_xz[j] * pc_x[j] * fl2_fx - 6.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 22.5 * pc_xx[j] * fl2_fx * pa_z[j] - 11.25 * pc_xxz[j] * fl2_fx - 22.5 * pc_xz[j] * fl2_fx * pb_x[j] - 11.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 2.25 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx - 9.0 * pa_xxz[j] * pc_xx[j] * fl1_fx - 13.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xxz[j] * fl1_fx - 27.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx - 15.0 * pa_xz[j] * pc_xxx[j] * fl1_fx - 27.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 13.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 15.0 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxz[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] - pa_xxxz[j] * pc_xxx[j] - 3.0 * pa_xxx[j] * pc_xxz[j] * pb_x[j] - 9.0 * pa_xxz[j] * pc_xxx[j] * pb_x[j] - 9.0 * pa_xx[j] * pc_xxz[j] * pb_xx[j] - 9.0 * pa_xz[j] * pc_xxx[j] * pb_xx[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xxx[j] - pc_xxx[j] * pa_z[j] * pb_xxx[j]);

                t_xxxz_xxx[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 11.25 * pa_x[j] * pc_xz[j] * fl2_fx + 22.5 * pc_xxz[j] * fl2_fx + 11.25 * pc_xx[j] * fl2_fx * pa_z[j] + 11.25 * pc_xz[j] * fl2_fx * pb_x[j] + 9.0 * pa_xx[j] * pc_xxz[j] * fl1_fx + 15.0 * pa_xz[j] * pc_xxx[j] * fl1_fx + 27.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 15.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 15.0 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx + 7.5 * pc_xxxx[j] * pa_z[j] * fl1_fx + 15.0 * pc_xxxz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxz[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxxz[j] + 3.0 * pa_xxz[j] * pc_xxxx[j] + 9.0 * pa_xx[j] * pc_xxxz[j] * pb_x[j] + 9.0 * pa_xz[j] * pc_xxxx[j] * pb_x[j] + 9.0 * pa_x[j] * pc_xxxz[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_z[j] * pb_xx[j] + pc_xxxz[j] * pb_xxx[j]);

                t_xxxz_xxx[j] += fl_s_0_0_5 * (-11.25 * pc_xxz[j] * fl2_fx - 15.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 7.5 * pc_xxxx[j] * pa_z[j] * fl1_fx - 15.0 * pc_xxxz[j] * pb_x[j] * fl1_fx - 7.5 * pc_xxxxz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxxxz[j] - 3.0 * pa_xz[j] * pc_xxxxx[j] - 9.0 * pa_x[j] * pc_xxxxz[j] * pb_x[j] - 3.0 * pc_xxxxx[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxxxz[j] * pb_xx[j]);

                t_xxxz_xxx[j] += fl_s_0_0_6 * (7.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxxz[j] + pc_xxxxxx[j] * pa_z[j] + 3.0 * pc_xxxxxz[j] * pb_x[j]);

                t_xxxz_xxx[j] += -fl_s_0_0_7 * pc_xxxxxxz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_21_22(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (21,22)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_xxy = primBuffer.data(150 * idx + 21);

            // Batch of Integrals (21,22)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_x, pb_xx, pb_xxy, pb_xy, \
                                     pb_y, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyz, pc_xxxxxz, \
                                     pc_xxxxy, pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyz, pc_xxz, \
                                     pc_xy, pc_xyz, pc_xz, pc_y, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xxxz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxxz_xxy[j] = fl_s_0_0_0 * (2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xxxz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xxz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xxy[j] + pa_xxxz[j] * pb_xxy[j]);

                t_xxxz_xxy[j] += fl_s_0_0_1 * (-2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 4.5 * pa_xz[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 3.0 * fl2_fx * pa_z[j] * pb_xy[j] - 0.5 * pa_xxxz[j] * fl1_fx * pc_y[j] - 0.5 * pa_xxxz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xxx[j] * pc_z[j] * fl1_fx * pb_y[j] - 4.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_y[j] - 3.0 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xy[j] - 3.0 * pa_xxz[j] * fl1_fx * pb_xy[j] - 9.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] - pa_xxxz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xxxz[j] * pb_xy[j] * pc_x[j] - pa_xxx[j] * pc_z[j] * pb_xxy[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_xxy[j]);

                t_xxxz_xxy[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pa_xz[j] * fl2_fx * pc_y[j] + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 7.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] + 3.0 * fl2_fx * pc_z[j] * pb_xy[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xxxz[j] * fl1_fx * pc_y[j] + 0.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_z[j] * fl1_fx * pb_y[j] + 4.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_y[j] + 4.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_x[j] + 3.0 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_y[j] + 3.0 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xy[j] + 9.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] + 9.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] + 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 9.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xy[j] + 6.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] + 2.0 * pa_xxxz[j] * pb_x[j] * pc_xy[j] + pa_xxxz[j] * pc_xx[j] * pb_y[j] + pa_xxx[j] * pc_yz[j] * pb_xx[j] + 2.0 * pa_xxx[j] * pc_xz[j] * pb_xy[j] + 3.0 * pa_xxz[j] * pc_xy[j] * pb_xx[j] + 6.0 * pa_xxz[j] * pc_xx[j] * pb_xy[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xxy[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_xxy[j]);

                t_xxxz_xxy[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pa_z[j] - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_x[j] - 9.0 * pa_xz[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 9.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] - 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] - 6.0 * pc_xxz[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] - 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - pa_xxxz[j] * pc_xxy[j] - 2.0 * pa_xxx[j] * pc_xyz[j] * pb_x[j] - pa_xxx[j] * pc_xxz[j] * pb_y[j] - 6.0 * pa_xxz[j] * pc_xxy[j] * pb_x[j] - 3.0 * pa_xxz[j] * pc_xxx[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_xy[j] - 3.0 * pa_xz[j] * pc_xxy[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxx[j] * pb_xy[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xxy[j] - pc_xxx[j] * pa_z[j] * pb_xxy[j]);

                t_xxxz_xxy[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_xz[j] * pc_xxy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] + 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] + 6.0 * pc_xxz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxyz[j] + 3.0 * pa_xxz[j] * pc_xxxy[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxxz[j] * pb_y[j] + 6.0 * pa_xz[j] * pc_xxxy[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xxxx[j] * pb_y[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxz[j] * pb_xy[j] + pc_xxxy[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxxx[j] * pa_z[j] * pb_xy[j] + pc_xxxz[j] * pb_xxy[j]);

                t_xxxz_xxy[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxxyz[j] - 3.0 * pa_xz[j] * pc_xxxxy[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxxz[j] * pb_y[j] - 2.0 * pc_xxxxy[j] * pa_z[j] * pb_x[j] - pc_xxxxx[j] * pa_z[j] * pb_y[j] - pc_xxxyz[j] * pb_xx[j] - 2.0 * pc_xxxxz[j] * pb_xy[j]);

                t_xxxz_xxy[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxyz[j] + pc_xxxxxy[j] * pa_z[j] + 2.0 * pc_xxxxyz[j] * pb_x[j] + pc_xxxxxz[j] * pb_y[j]);

                t_xxxz_xxy[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_22_23(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (22,23)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxzz = pcDistances.data(119 * idx + 88);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_xxz = primBuffer.data(150 * idx + 22);

            // Batch of Integrals (22,23)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_x, pb_xx, pb_xxz, pb_xz, \
                                     pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxz, pc_xxxxxzz, pc_xxxxz, \
                                     pc_xxxxzz, pc_xxxz, pc_xxxzz, pc_xxz, pc_xxzz, pc_xz, pc_xzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxz_xxz[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 2.25 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xxxz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xxz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xxz[j] + pa_xxxz[j] * pb_xxz[j]);

                t_xxxz_xxz[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 0.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 3.0 * pa_xx[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 2.25 * pa_xz[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 4.5 * pa_xz[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 3.0 * fl2_fx * pa_z[j] * pb_xz[j] - 0.5 * pa_xxxz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxxz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xxx[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_xxx[j] * fl1_fx * pb_x[j] * pc_x[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_xx[j] - 4.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xx[j] - 3.0 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xz[j] - 3.0 * pa_xxz[j] * fl1_fx * pb_xz[j] - 9.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] - pa_xxxz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xxxz[j] * pb_xz[j] * pc_x[j] - pa_xxx[j] * pc_z[j] * pb_xxz[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_xxz[j]);

                t_xxxz_xxz[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pc_zz[j] + 4.5 * pa_xz[j] * fl2_fx * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 2.25 * pa_xz[j] * fl2_fx * pb_z[j] + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 3.75 * pc_xz[j] * fl2_fx * pa_z[j] + 3.75 * pc_xz[j] * fl2_fx * pb_z[j] + 7.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 3.0 * fl2_fx * pc_z[j] * pb_xz[j] + 1.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xxxz[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxx[j] * pc_zz[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_xx[j] + pa_xxx[j] * fl1_fx * pb_x[j] * pc_x[j] + 4.5 * pa_xxz[j] * pc_xz[j] * fl1_fx + 4.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_x[j] + 3.0 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_z[j] + 3.0 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xz[j] + 9.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] + 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_x[j] + 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 9.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xz[j] + 6.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] + 2.0 * pa_xxxz[j] * pb_x[j] * pc_xz[j] + pa_xxxz[j] * pc_xx[j] * pb_z[j] + pa_xxx[j] * pc_zz[j] * pb_xx[j] + 2.0 * pa_xxx[j] * pc_xz[j] * pb_xz[j] + 3.0 * pa_xxz[j] * pc_xz[j] * pb_xx[j] + 6.0 * pa_xxz[j] * pc_xx[j] * pb_xz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xxz[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_xxz[j]);

                t_xxxz_xxz[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * fl2_fx * pc_zz[j] - 2.25 * pa_xz[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 2.5 * pc_xxx[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_x[j] - 3.75 * pc_xzz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pa_z[j] - 7.5 * pc_xz[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pc_zz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xxx[j] * pc_zz[j] * fl1_fx - 0.5 * pa_xxx[j] * fl1_fx * pc_xx[j] - 4.5 * pa_xxz[j] * pc_xz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_x[j] - 9.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] - 9.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_x[j] - 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] - 6.0 * pc_xxz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxz[j] - pa_xxxz[j] * pc_xxz[j] - 2.0 * pa_xxx[j] * pc_xzz[j] * pb_x[j] - pa_xxx[j] * pc_xxz[j] * pb_z[j] - 6.0 * pa_xxz[j] * pc_xxz[j] * pb_x[j] - 3.0 * pa_xxz[j] * pc_xxx[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_xx[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_xz[j] - 3.0 * pa_xz[j] * pc_xxz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxx[j] * pb_xz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xxz[j] - pc_xxx[j] * pa_z[j] * pb_xxz[j]);

                t_xxxz_xxz[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 2.25 * pa_x[j] * fl2_fx * pc_zz[j] + 5.0 * pc_xxx[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xzz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pa_z[j] + 3.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 4.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx + 9.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] + 9.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 5.0 * pc_xxxz[j] * pa_z[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] + 5.0 * pc_xxxz[j] * fl1_fx * pb_z[j] + pc_xxxx[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xxzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] + 6.0 * pc_xxz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxzz[j] + 3.0 * pa_xxz[j] * pc_xxxz[j] + 6.0 * pa_xx[j] * pc_xxzz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxxz[j] * pb_z[j] + 6.0 * pa_xz[j] * pc_xxxz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xxxx[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxz[j] * pb_xz[j] + pc_xxxz[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxxx[j] * pa_z[j] * pb_xz[j] + pc_xxxz[j] * pb_xxz[j]);

                t_xxxz_xxz[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xzz[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx - 5.0 * pc_xxxz[j] * pa_z[j] * fl1_fx - 5.0 * pc_xxxzz[j] * fl1_fx - 5.0 * pc_xxxz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxxx[j] * fl1_fx - pc_xxxx[j] * fl1_fx * pb_x[j] - 6.0 * pc_xxzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxxzz[j] - 3.0 * pa_xz[j] * pc_xxxxz[j] - 6.0 * pa_x[j] * pc_xxxzz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxxz[j] * pb_z[j] - 2.0 * pc_xxxxz[j] * pa_z[j] * pb_x[j] - pc_xxxxx[j] * pa_z[j] * pb_z[j] - pc_xxxzz[j] * pb_xx[j] - 2.0 * pc_xxxxz[j] * pb_xz[j]);

                t_xxxz_xxz[j] += fl_s_0_0_6 * (5.0 * pc_xxxzz[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxzz[j] + pc_xxxxxz[j] * pa_z[j] + 2.0 * pc_xxxxzz[j] * pb_x[j] + pc_xxxxxz[j] * pb_z[j]);

                t_xxxz_xxz[j] += -fl_s_0_0_7 * pc_xxxxxzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_23_24(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (23,24)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_xyy = primBuffer.data(150 * idx + 23);

            // Batch of Integrals (23,24)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_x, pb_xy, pb_xyy, pb_y, \
                                     pb_yy, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyz, pc_xxxxyz, \
                                     pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyz, \
                                     pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyz, pc_yz, pc_z, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxz_xyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xxxz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xyy[j] + pa_xxxz[j] * pb_xyy[j]);

                t_xxxz_xyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 2.25 * pa_xz[j] * pc_x[j] * fl2_fx - 1.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * fl2_fx * pa_z[j] * pb_yy[j] - 0.5 * pa_xxxz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxxz[j] * pc_x[j] * fl1_fx - 0.5 * pa_xxx[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_x[j] * pb_x[j] * fl1_fx - 3.0 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_y[j] - 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_xxz[j] * fl1_fx * pb_yy[j] - 4.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] - 2.0 * pa_xxxz[j] * pb_xy[j] * pc_y[j] - pa_xxxz[j] * pc_x[j] * pb_yy[j] - pa_xxx[j] * pc_z[j] * pb_xyy[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_xyy[j]);

                t_xxxz_xyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 4.5 * pa_xz[j] * pc_x[j] * fl2_fx + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xxxz[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_z[j] * pb_x[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_x[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_xx[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxz[j] * fl1_fx * pc_yy[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_y[j] + 3.0 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_yy[j] + 1.5 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx + 9.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 4.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] + pa_xxxz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xxxz[j] * pc_xy[j] * pb_y[j] + 2.0 * pa_xxx[j] * pc_yz[j] * pb_xy[j] + pa_xxx[j] * pc_xz[j] * pb_yy[j] + 6.0 * pa_xxz[j] * pc_xy[j] * pb_xy[j] + 3.0 * pa_xxz[j] * pc_xx[j] * pb_yy[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xyy[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_xyy[j]);

                t_xxxz_xyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * pc_xz[j] * fl2_fx - 2.25 * pa_xz[j] * pc_x[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pa_z[j] - 1.5 * pc_xxz[j] * fl2_fx - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pa_z[j] * pc_yy[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_xxx[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_xx[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_yyz[j] - 1.5 * pa_xxz[j] * fl1_fx * pc_yy[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_y[j] - 1.5 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xxx[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 4.5 * pa_xz[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 9.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] - pa_xxxz[j] * pc_xyy[j] - pa_xxx[j] * pc_yyz[j] * pb_x[j] - 2.0 * pa_xxx[j] * pc_xyz[j] * pb_y[j] - 3.0 * pa_xxz[j] * pc_xyy[j] * pb_x[j] - 6.0 * pa_xxz[j] * pc_xxy[j] * pb_y[j] - 6.0 * pa_xx[j] * pc_xyz[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xxz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_xxy[j] * pb_xy[j] - 3.0 * pa_xz[j] * pc_xxx[j] * pb_yy[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xyy[j] - pc_xxx[j] * pa_z[j] * pb_xyy[j]);

                t_xxxz_xyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_z[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yyz[j] + 1.5 * pa_xz[j] * pc_xxx[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xyy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx + 0.5 * pc_xxxz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyy[j] * fl1_fx * pa_z[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + pa_xxx[j] * pc_xyyz[j] + 3.0 * pa_xxz[j] * pc_xxyy[j] + 3.0 * pa_xx[j] * pc_xyyz[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_xxyy[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xxxy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xxxz[j] * pb_yy[j] + 2.0 * pc_xxxy[j] * pa_z[j] * pb_xy[j] + pc_xxxx[j] * pa_z[j] * pb_yy[j] + pc_xxxz[j] * pb_xyy[j]);

                t_xxxz_xyy[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx - 0.5 * pc_xxxz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxz[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pa_z[j] - 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyyz[j] - 3.0 * pa_xz[j] * pc_xxxyy[j] - 3.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_y[j] - pc_xxxyy[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pb_xy[j] - pc_xxxxz[j] * pb_yy[j]);

                t_xxxz_xyy[j] += fl_s_0_0_6 * (0.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyyz[j] + pc_xxxxyy[j] * pa_z[j] + pc_xxxyyz[j] * pb_x[j] + 2.0 * pc_xxxxyz[j] * pb_y[j]);

                t_xxxz_xyy[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_24_25(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (24,25)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_xyz = primBuffer.data(150 * idx + 24);

            // Batch of Integrals (24,25)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_x, pb_xy, pb_xyz, pb_xz, \
                                     pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyz, pc_xxxxyzz, \
                                     pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, \
                                     pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxxz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxz_xyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_xy[j] + 1.5 * pa_xxz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xyz[j] + pa_xxxz[j] * pb_xyz[j]);

                t_xxxz_xyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 1.5 * pa_xx[j] * fl2_fx * pb_y[j] - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_y[j] - 0.5 * pa_xxx[j] * fl1_fx * pc_x[j] * pb_y[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_z[j] - 1.5 * pa_xxz[j] * fl1_fx * pc_y[j] * pb_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_yz[j] - 1.5 * pa_xxz[j] * fl1_fx * pb_yz[j] - 4.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] - pa_xxxz[j] * pb_xy[j] * pc_z[j] - pa_xxxz[j] * pb_xz[j] * pc_y[j] - pa_xxxz[j] * pc_x[j] * pb_yz[j] - pa_xxx[j] * pc_z[j] * pb_xyz[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_xyz[j]);

                t_xxxz_xyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_xy[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_x[j] * pc_y[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_x[j] * pb_y[j] + 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] + 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xy[j] + 1.5 * pa_xxz[j] * fl1_fx * pc_yz[j] + 1.5 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_y[j] + 1.5 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] + 1.5 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_z[j] + 1.5 * pa_xxz[j] * fl1_fx * pc_y[j] * pb_z[j] + 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_yz[j] + 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] + 4.5 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 4.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] + pa_xxxz[j] * pb_x[j] * pc_yz[j] + pa_xxxz[j] * pc_xz[j] * pb_y[j] + pa_xxxz[j] * pc_xy[j] * pb_z[j] + pa_xxx[j] * pc_zz[j] * pb_xy[j] + pa_xxx[j] * pc_yz[j] * pb_xz[j] + pa_xxx[j] * pc_xz[j] * pb_yz[j] + 3.0 * pa_xxz[j] * pc_xz[j] * pb_xy[j] + 3.0 * pa_xxz[j] * pc_xy[j] * pb_xz[j] + 3.0 * pa_xxz[j] * pc_xx[j] * pb_yz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xyz[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_xyz[j]);

                t_xxxz_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 4.5 * pa_x[j] * pc_xy[j] * fl2_fx - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_yz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_xxx[j] * fl1_fx * pc_xy[j] - 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] - 1.5 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yzz[j] - 1.5 * pa_xxz[j] * fl1_fx * pc_yz[j] - 1.5 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_y[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] - 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] - 4.5 * pa_xz[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 4.5 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 4.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xyz[j] - pa_xxxz[j] * pc_xyz[j] - pa_xxx[j] * pc_yzz[j] * pb_x[j] - pa_xxx[j] * pc_xzz[j] * pb_y[j] - pa_xxx[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_xxz[j] * pc_xyz[j] * pb_x[j] - 3.0 * pa_xxz[j] * pc_xxz[j] * pb_y[j] - 3.0 * pa_xxz[j] * pc_xxy[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xxz[j] * pb_yz[j] - 3.0 * pa_xz[j] * pc_xxz[j] * pb_xy[j] - 3.0 * pa_xz[j] * pc_xxy[j] * pb_xz[j] - 3.0 * pa_xz[j] * pc_xxx[j] * pb_yz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xyz[j] - pc_xxx[j] * pa_z[j] * pb_xyz[j]);

                t_xxxz_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yzz[j] + 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + 4.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 4.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xxyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xz[j] + pa_xxx[j] * pc_xyzz[j] + 3.0 * pa_xxz[j] * pc_xxyz[j] + 3.0 * pa_xx[j] * pc_xyzz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxzz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_xxyz[j] * pb_z[j] + 3.0 * pa_xz[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xxxz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_xxxy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xxxz[j] * pb_yz[j] + pc_xxxz[j] * pa_z[j] * pb_xy[j] + pc_xxxy[j] * pa_z[j] * pb_xz[j] + pc_xxxx[j] * pa_z[j] * pb_yz[j] + pc_xxxz[j] * pb_xyz[j]);

                t_xxxz_xyz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_xxxxy[j] * fl1_fx - 0.5 * pc_xxxy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyzz[j] - 3.0 * pa_xz[j] * pc_xxxyz[j] - 3.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxzz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xxxyz[j] * pb_z[j] - pc_xxxyz[j] * pa_z[j] * pb_x[j] - pc_xxxxz[j] * pa_z[j] * pb_y[j] - pc_xxxxy[j] * pa_z[j] * pb_z[j] - pc_xxxzz[j] * pb_xy[j] - pc_xxxyz[j] * pb_xz[j] - pc_xxxxz[j] * pb_yz[j]);

                t_xxxz_xyz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyzz[j] + pc_xxxxyz[j] * pa_z[j] + pc_xxxyzz[j] * pb_x[j] + pc_xxxxzz[j] * pb_y[j] + pc_xxxxyz[j] * pb_z[j]);

                t_xxxz_xyz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_25_26(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (25,26)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_xzz = primBuffer.data(150 * idx + 25);

            // Batch of Integrals (25,26)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_x, pb_xz, pb_xzz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxz, pc_xxxxzz, pc_xxxxzzz, pc_xxxz, \
                                     pc_xxxzz, pc_xxxzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xz, pc_xzz, pc_xzzz, pc_z, pc_zz, \
                                     pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxxz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxz_xzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_z[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xxxz[j] * pb_x[j] * fl1_fx + pa_xxx[j] * fl1_fx * pb_xz[j] + 1.5 * pa_xxz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xzz[j] + pa_xxxz[j] * pb_xzz[j]);

                t_xxxz_xzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 2.25 * fl3_fx * pb_z[j] - 1.5 * pa_xxz[j] * fl2_fx - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_xx[j] * fl2_fx * pb_z[j] - 2.25 * pa_xz[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pa_xz[j] * fl2_fx * pb_x[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.5 * pa_xxxz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxxz[j] * pc_x[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_z[j] * pb_x[j] * fl1_fx - pa_xxx[j] * fl1_fx * pc_x[j] * pb_z[j] - pa_xxx[j] * fl1_fx * pb_xz[j] - 1.5 * pa_xxz[j] * pc_x[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xz[j] - 3.0 * pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_xxz[j] * fl1_fx * pb_zz[j] - 4.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] - 2.0 * pa_xxxz[j] * pb_xz[j] * pc_z[j] - pa_xxxz[j] * pc_x[j] * pb_zz[j] - pa_xxx[j] * pc_z[j] * pb_xzz[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_xzz[j]);

                t_xxxz_xzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 2.25 * fl3_fx * pb_z[j] + 4.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_z[j] + 4.5 * pa_xz[j] * pc_x[j] * fl2_fx + 6.75 * pa_x[j] * pc_xz[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 3.0 * pc_xx[j] * fl2_fx * pb_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * pc_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xxxz[j] * pc_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx + pa_xxx[j] * fl1_fx * pc_x[j] * pb_z[j] + 1.5 * pa_xxz[j] * pc_x[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_xx[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_xz[j] + 1.5 * pa_xxz[j] * fl1_fx * pc_zz[j] + 3.0 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_z[j] + 3.0 * pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_zz[j] + 1.5 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] + 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] + 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] + pa_xxxz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xxxz[j] * pc_xz[j] * pb_z[j] + 2.0 * pa_xxx[j] * pc_zz[j] * pb_xz[j] + pa_xxx[j] * pc_xz[j] * pb_zz[j] + 6.0 * pa_xxz[j] * pc_xz[j] * pb_xz[j] + 3.0 * pa_xxz[j] * pc_xx[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xzz[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_xzz[j]);

                t_xxxz_xzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * fl3_fx * pb_z[j] - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 13.5 * pa_x[j] * pc_xz[j] * fl2_fx - 2.25 * pa_xz[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 3.0 * pc_xx[j] * fl2_fx * pa_z[j] - 4.5 * pc_xxz[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 4.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_xx[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_zzz[j] - 1.5 * pa_xxz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_z[j] - 1.5 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xxx[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] - 4.5 * pa_xz[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_xxx[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] - 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xzz[j] - pa_xxxz[j] * pc_xzz[j] - pa_xxx[j] * pc_zzz[j] * pb_x[j] - 2.0 * pa_xxx[j] * pc_xzz[j] * pb_z[j] - 3.0 * pa_xxz[j] * pc_xzz[j] * pb_x[j] - 6.0 * pa_xxz[j] * pc_xxz[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xzz[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xxz[j] * pb_zz[j] - 6.0 * pa_xz[j] * pc_xxz[j] * pb_xz[j] - 3.0 * pa_xz[j] * pc_xxx[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xzz[j] - pc_xxx[j] * pa_z[j] * pb_xzz[j]);

                t_xxxz_xzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 6.75 * pa_x[j] * pc_xz[j] * fl2_fx + 9.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 3.0 * pc_xx[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_zzz[j] + 1.5 * pa_xz[j] * pc_xxx[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xzzz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xzz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxxz[j] * pb_x[j] * fl1_fx + pc_xxxx[j] * fl1_fx * pb_z[j] + pc_xxx[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xxzz[j] * fl1_fx * pa_z[j] + 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_xz[j] + pa_xxx[j] * pc_xzzz[j] + 3.0 * pa_xxz[j] * pc_xxzz[j] + 3.0 * pa_xx[j] * pc_xzzz[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxzz[j] * pb_z[j] + 3.0 * pa_xz[j] * pc_xxzz[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xxxz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xxzz[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xxxz[j] * pb_zz[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_xz[j] + pc_xxxx[j] * pa_z[j] * pb_zz[j] + pc_xxxz[j] * pb_xzz[j]);

                t_xxxz_xzz[j] += fl_s_0_0_5 * (-4.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * pa_x[j] * pc_xxxz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xzzz[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxxz[j] * fl1_fx - pc_xxxx[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxzzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pa_z[j] - 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xzzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxzzz[j] - 3.0 * pa_xz[j] * pc_xxxzz[j] - 3.0 * pa_x[j] * pc_xxzzz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxxzz[j] * pb_z[j] - pc_xxxzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xxxzz[j] * pb_xz[j] - pc_xxxxz[j] * pb_zz[j]);

                t_xxxz_xzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxzzz[j] + pc_xxxxzz[j] * pa_z[j] + pc_xxxzzz[j] * pb_x[j] + 2.0 * pc_xxxxzz[j] * pb_z[j]);

                t_xxxz_xzz[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_26_27(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (26,27)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_yyy = primBuffer.data(150 * idx + 26);

            // Batch of Integrals (26,27)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_y, pb_yy, pb_yyy, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyz, pc_xxxyyz, pc_xxxyz, \
                                     pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyz, \
                                     pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxxz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxxz_yyy[j] = fl_s_0_0_0 * (2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_xxxz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xz[j] * fl1_fx * pb_yyy[j] + pa_xxxz[j] * pb_yyy[j]);

                t_xxxz_yyy[j] += fl_s_0_0_1 * (-4.5 * pa_xz[j] * fl2_fx * pb_y[j] - 2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pa_xxxz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xxxz[j] * pc_y[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_z[j] * pb_y[j] * fl1_fx - 4.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx - 4.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] - 3.0 * pa_xxxz[j] * pb_yy[j] * pc_y[j] - pa_xxx[j] * pc_z[j] * pb_yyy[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_yyy[j]);

                t_xxxz_yyy[j] += fl_s_0_0_2 * (4.5 * pa_xz[j] * fl2_fx * pc_y[j] + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_xxxz[j] * pc_y[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx + 4.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx + 4.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] + 4.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] + 3.0 * pa_xxxz[j] * pb_y[j] * pc_yy[j] + 3.0 * pa_xxx[j] * pc_yz[j] * pb_yy[j] + 9.0 * pa_xxz[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_yyy[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_yyy[j]);

                t_xxxz_yyy[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx - 4.5 * pa_xz[j] * pc_xxy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pa_xz[j] * fl1_fx * pc_yyy[j] - 4.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] - 4.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 4.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] - 4.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - pa_xxxz[j] * pc_yyy[j] - 3.0 * pa_xxx[j] * pc_yyz[j] * pb_y[j] - 9.0 * pa_xxz[j] * pc_xyy[j] * pb_y[j] - 9.0 * pa_xx[j] * pc_xyz[j] * pb_yy[j] - 9.0 * pa_xz[j] * pc_xxy[j] * pb_yy[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_yyy[j] - pc_xxx[j] * pa_z[j] * pb_yyy[j]);

                t_xxxz_yyy[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xxy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pc_yyyz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_yyy[j] + 4.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pa_z[j] + 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pa_xxx[j] * pc_yyyz[j] + 3.0 * pa_xxz[j] * pc_xyyy[j] + 9.0 * pa_xx[j] * pc_xyyz[j] * pb_y[j] + 9.0 * pa_xz[j] * pc_xxyy[j] * pb_y[j] + 9.0 * pa_x[j] * pc_xxyz[j] * pb_yy[j] + 3.0 * pc_xxxy[j] * pa_z[j] * pb_yy[j] + pc_xxxz[j] * pb_yyy[j]);

                t_xxxz_yyy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_yyyz[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pa_z[j] - 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xx[j] * pc_xyyyz[j] - 3.0 * pa_xz[j] * pc_xxyyy[j] - 9.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - 3.0 * pc_xxxyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxxyz[j] * pb_yy[j]);

                t_xxxz_yyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyyz[j] + pc_xxxyyy[j] * pa_z[j] + 3.0 * pc_xxxyyz[j] * pb_y[j]);

                t_xxxz_yyy[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_27_28(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (27,28)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_yyz = primBuffer.data(150 * idx + 27);

            // Batch of Integrals (27,28)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_y, pb_yy, pb_yyz, pb_yz, \
                                     pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, \
                                     pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, \
                                     pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, \
                                     pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxz_yyz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.25 * pa_xxx[j] * fl2_fx + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xxxz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_yyz[j] + pa_xxxz[j] * pb_yyz[j]);

                t_xxxz_yyz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.5 * pa_xxx[j] * fl2_fx - 0.75 * pa_xx[j] * pc_x[j] * fl2_fx - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xxxz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxxz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xxx[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_xxx[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] - 3.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] - pa_xxxz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xxxz[j] * pb_yz[j] * pc_y[j] - pa_xxx[j] * pc_z[j] * pb_yyz[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_yyz[j]);

                t_xxxz_yyz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.25 * pa_xxx[j] * fl2_fx + 1.5 * pa_xx[j] * pc_x[j] * fl2_fx + 0.75 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pa_xz[j] * fl2_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xxxz[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxx[j] * pc_zz[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_yy[j] + pa_xxx[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_xxz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] + 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] + 3.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] + 2.0 * pa_xxxz[j] * pb_y[j] * pc_yz[j] + pa_xxxz[j] * pc_yy[j] * pb_z[j] + pa_xxx[j] * pc_zz[j] * pb_yy[j] + 2.0 * pa_xxx[j] * pc_yz[j] * pb_yz[j] + 3.0 * pa_xxz[j] * pc_xz[j] * pb_yy[j] + 6.0 * pa_xxz[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_yyz[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_yyz[j]);

                t_xxxz_yyz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.75 * pa_xx[j] * pc_x[j] * fl2_fx - 1.5 * pa_x[j] * pc_xx[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_x[j] * fl2_fx * pc_yy[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xxx[j] * pc_zz[j] * fl1_fx - 0.5 * pa_xxx[j] * fl1_fx * pc_yy[j] - 1.5 * pa_xxz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] - 1.5 * pa_xz[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xz[j] * fl1_fx * pc_yyz[j] - 3.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] - 3.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yz[j] - 1.5 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] - pa_xxxz[j] * pc_yyz[j] - 2.0 * pa_xxx[j] * pc_yzz[j] * pb_y[j] - pa_xxx[j] * pc_yyz[j] * pb_z[j] - 6.0 * pa_xxz[j] * pc_xyz[j] * pb_y[j] - 3.0 * pa_xxz[j] * pc_xyy[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_yy[j] - 6.0 * pa_xx[j] * pc_xyz[j] * pb_yz[j] - 3.0 * pa_xz[j] * pc_xxz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_xxy[j] * pb_yz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_yyz[j] - pc_xxx[j] * pa_z[j] * pb_yyz[j]);

                t_xxxz_yyz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pc_xxx[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xxyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxz[j] * pa_z[j] * fl1_fx + 0.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] + pc_xxxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyzz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_yyz[j] + 3.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + pa_xxx[j] * pc_yyzz[j] + 3.0 * pa_xxz[j] * pc_xyyz[j] + 6.0 * pa_xx[j] * pc_xyzz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_xyyz[j] * pb_z[j] + 6.0 * pa_xz[j] * pc_xxyz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_xxyy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_yy[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_yz[j] + pc_xxxz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xxxy[j] * pa_z[j] * pb_yz[j] + pc_xxxz[j] * pb_yyz[j]);

                t_xxxz_yyz[j] += fl_s_0_0_5 * (-0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pa_x[j] * pc_xxzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxyy[j] * fl1_fx - 0.5 * pc_xxxz[j] * pa_z[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxyy[j] * fl1_fx - pc_xxxy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyzz[j] - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyyzz[j] - 3.0 * pa_xz[j] * pc_xxyyz[j] - 6.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_y[j] - pc_xxxyy[j] * pa_z[j] * pb_z[j] - pc_xxxzz[j] * pb_yy[j] - 2.0 * pc_xxxyz[j] * pb_yz[j]);

                t_xxxz_yyz[j] += fl_s_0_0_6 * (0.5 * pc_xxxzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyzz[j] + pc_xxxyyz[j] * pa_z[j] + 2.0 * pc_xxxyzz[j] * pb_y[j] + pc_xxxyyz[j] * pb_z[j]);

                t_xxxz_yyz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_28_29(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (28,29)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_yzz = primBuffer.data(150 * idx + 28);

            // Batch of Integrals (28,29)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_y, pb_yz, pb_yzz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, \
                                     pc_xxxzz, pc_xxxzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, \
                                     pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xxxz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxxz_yzz[j] = fl_s_0_0_0 * (0.75 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xxxz[j] * pb_y[j] * fl1_fx + pa_xxx[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_yzz[j] + pa_xxxz[j] * pb_yzz[j]);

                t_xxxz_yzz[j] += fl_s_0_0_1 * (-1.5 * pa_xz[j] * fl2_fx * pb_y[j] - 0.75 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xxxz[j] * pb_y[j] * fl1_fx - 0.5 * pa_xxxz[j] * pc_y[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_z[j] * pb_y[j] * fl1_fx - pa_xxx[j] * fl1_fx * pc_y[j] * pb_z[j] - pa_xxx[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] - 3.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] - 1.5 * pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] - 2.0 * pa_xxxz[j] * pb_yz[j] * pc_z[j] - pa_xxxz[j] * pc_y[j] * pb_zz[j] - pa_xxx[j] * pc_z[j] * pb_yzz[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_yzz[j]);

                t_xxxz_yzz[j] += fl_s_0_0_2 * (1.5 * pa_xz[j] * fl2_fx * pc_y[j] + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.75 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xxxz[j] * pc_y[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + pa_xxx[j] * fl1_fx * pc_y[j] * pb_z[j] + 1.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] + 3.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] + 3.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] + 1.5 * pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] + pa_xxxz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xxxz[j] * pc_yz[j] * pb_z[j] + 2.0 * pa_xxx[j] * pc_zz[j] * pb_yz[j] + pa_xxx[j] * pc_yz[j] * pb_zz[j] + 6.0 * pa_xxz[j] * pc_xz[j] * pb_yz[j] + 3.0 * pa_xxz[j] * pc_xy[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_yzz[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_yzz[j]);

                t_xxxz_yzz[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 1.5 * pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xxy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx - pc_xxx[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xz[j] * fl1_fx * pc_yzz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] - 3.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] - 1.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] - 3.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] - 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - pa_xxxz[j] * pc_yzz[j] - pa_xxx[j] * pc_zzz[j] * pb_y[j] - 2.0 * pa_xxx[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_xxz[j] * pc_xzz[j] * pb_y[j] - 6.0 * pa_xxz[j] * pc_xyz[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xzz[j] * pb_yz[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_zz[j] - 6.0 * pa_xz[j] * pc_xxz[j] * pb_yz[j] - 3.0 * pa_xz[j] * pc_xxy[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_yzz[j] - pc_xxx[j] * pa_z[j] * pb_yzz[j]);

                t_xxxz_yzz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xxy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx + pc_xxxy[j] * fl1_fx * pb_z[j] + pc_xxx[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yzzz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_yzz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] + 3.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_xxx[j] * pc_yzzz[j] + 3.0 * pa_xxz[j] * pc_xyzz[j] + 3.0 * pa_xx[j] * pc_xzzz[j] * pb_y[j] + 6.0 * pa_xx[j] * pc_xyzz[j] * pb_z[j] + 3.0 * pa_xz[j] * pc_xxzz[j] * pb_y[j] + 6.0 * pa_xz[j] * pc_xxyz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xxzz[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_zz[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_yz[j] + pc_xxxy[j] * pa_z[j] * pb_zz[j] + pc_xxxz[j] * pb_yzz[j]);

                t_xxxz_yzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - pc_xxxy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_yzzz[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyzzz[j] - 3.0 * pa_xz[j] * pc_xxyzz[j] - 3.0 * pa_x[j] * pc_xxzzz[j] * pb_y[j] - 6.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - pc_xxxzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xxxzz[j] * pb_yz[j] - pc_xxxyz[j] * pb_zz[j]);

                t_xxxz_yzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyzzz[j] + pc_xxxyzz[j] * pa_z[j] + pc_xxxzzz[j] * pb_y[j] + 2.0 * pc_xxxyzz[j] * pb_z[j]);

                t_xxxz_yzz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_29_30(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (29,30)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(34 * idx + 9);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxxz = paDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxxz_zzz = primBuffer.data(150 * idx + 29);

            // Batch of Integrals (29,30)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pa_xxxz, pa_xxz, pa_xz, pa_z, pb_z, pb_zz, pb_zzz, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxxzzzz, pc_xxz, pc_xxzz, \
                                     pc_xxzzz, pc_xxzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxxz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxxz_zzz[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 2.25 * pa_xz[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xxxz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_zzz[j] + pa_xxxz[j] * pb_zzz[j]);

                t_xxxz_zzz[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 4.5 * pa_xz[j] * fl2_fx * pb_z[j] - 2.25 * pa_xz[j] * fl2_fx * pc_z[j] - 6.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_zz[j] - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * pa_xxxz[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxxz[j] * pc_z[j] * fl1_fx - 4.5 * pa_xxx[j] * pc_z[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxx[j] * fl1_fx * pb_zz[j] - 4.5 * pa_xxz[j] * pc_x[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] - 4.5 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] - 3.0 * pa_xxxz[j] * pb_zz[j] * pc_z[j] - pa_xxx[j] * pc_z[j] * pb_zzz[j] - 3.0 * pa_xxz[j] * pc_x[j] * pb_zzz[j]);

                t_xxxz_zzz[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 4.5 * pa_xz[j] * fl2_fx * pc_z[j] + 13.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_zz[j] + 2.25 * pa_xz[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_zz[j] + 4.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pa_z[j] + 6.75 * pc_xz[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xxxz[j] * pc_z[j] * fl1_fx + 4.5 * pa_xxx[j] * pc_z[j] * pb_z[j] * fl1_fx + 3.0 * pa_xxx[j] * pc_zz[j] * fl1_fx + 4.5 * pa_xxz[j] * pc_x[j] * pb_z[j] * fl1_fx + 4.5 * pa_xxz[j] * pc_xz[j] * fl1_fx + 13.5 * pa_xx[j] * pc_xz[j] * pb_z[j] * fl1_fx + 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] + 4.5 * pa_xz[j] * pc_xx[j] * pb_z[j] * fl1_fx + 4.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + 4.5 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 4.5 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] + 4.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] + 3.0 * pa_xxxz[j] * pb_z[j] * pc_zz[j] + 3.0 * pa_xxx[j] * pc_zz[j] * pb_zz[j] + 9.0 * pa_xxz[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_zzz[j] + 3.0 * pa_xz[j] * pc_xx[j] * pb_zzz[j]);

                t_xxxz_zzz[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_xx[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 9.0 * pa_x[j] * fl2_fx * pc_zz[j] - 2.25 * pa_xz[j] * fl2_fx * pc_z[j] - 6.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pa_z[j] - 13.5 * pc_xz[j] * fl2_fx * pb_z[j] - 4.5 * pc_xzz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xxx[j] * pc_zz[j] * fl1_fx - 4.5 * pa_xxz[j] * pc_xz[j] * fl1_fx - 13.5 * pa_xx[j] * pc_xz[j] * pb_z[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xzz[j] * fl1_fx - 4.5 * pa_xz[j] * pc_xx[j] * pb_z[j] * fl1_fx - 4.5 * pa_xz[j] * pc_xxz[j] * fl1_fx - 13.5 * pa_x[j] * pc_xxz[j] * pb_z[j] * fl1_fx - 4.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxx[j] * pa_z[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xz[j] * fl1_fx * pc_zzz[j] - 4.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] - 4.5 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] - 4.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 4.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 4.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] - pa_xxxz[j] * pc_zzz[j] - 3.0 * pa_xxx[j] * pc_zzz[j] * pb_z[j] - 9.0 * pa_xxz[j] * pc_xzz[j] * pb_z[j] - 9.0 * pa_xx[j] * pc_xzz[j] * pb_zz[j] - 9.0 * pa_xz[j] * pc_xxz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_zzz[j] - pc_xxx[j] * pa_z[j] * pb_zzz[j]);

                t_xxxz_zzz[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pc_xxx[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_zz[j] + 9.0 * pc_xzz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pa_z[j] + 6.75 * pc_xz[j] * fl2_fx * pb_z[j] + 9.0 * pa_xx[j] * pc_xzz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xxz[j] * fl1_fx + 13.5 * pa_x[j] * pc_xxz[j] * pb_z[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxxz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xxxz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zzzz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_zzz[j] + 4.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pa_z[j] + 4.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 4.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + pa_xxx[j] * pc_zzzz[j] + 3.0 * pa_xxz[j] * pc_xzzz[j] + 9.0 * pa_xx[j] * pc_xzzz[j] * pb_z[j] + 9.0 * pa_xz[j] * pc_xxzz[j] * pb_z[j] + 9.0 * pa_x[j] * pc_xxzz[j] * pb_zz[j] + 3.0 * pc_xxxz[j] * pa_z[j] * pb_zz[j] + pc_xxxz[j] * pb_zzz[j]);

                t_xxxz_zzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xzz[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 1.5 * pc_xxxz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xxxz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxxzz[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_zzzz[j] - 1.5 * pc_xzzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pa_z[j] - 4.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xzzzz[j] - 3.0 * pa_xz[j] * pc_xxzzz[j] - 9.0 * pa_x[j] * pc_xxzzz[j] * pb_z[j] - 3.0 * pc_xxxzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxxzz[j] * pb_zz[j]);

                t_xxxz_zzz[j] += fl_s_0_0_6 * (3.0 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxzzzz[j] + pc_xxxzzz[j] * pa_z[j] + 3.0 * pc_xxxzzz[j] * pb_z[j]);

                t_xxxz_zzz[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_30_31(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (30,31)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyy = pcDistances.data(119 * idx + 86);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_xxx = primBuffer.data(150 * idx + 30);

            // Batch of Integrals (30,31)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xx, pb_xxx, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyy, pc_xxxxy, \
                                     pc_xxxxyy, pc_xxxy, pc_xxxyy, pc_xxy, pc_xxyy, pc_xy, pc_xyy, pc_y, pc_yy, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyy_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_xxx[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xyy[j] * fl2_fx + 2.25 * fl2_fx * pa_yy[j] * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pa_xxyy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xyy[j] * fl1_fx * pb_xx[j] + 0.25 * fl2_fx * pb_xxx[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xxx[j] + pa_xxyy[j] * pb_xxx[j]);

                t_xxyy_xxx[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 3.375 * fl3_fx * pb_x[j] - 3.0 * pa_xyy[j] * fl2_fx - 3.0 * pa_xy[j] * fl2_fx * pc_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_yy[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 4.5 * fl2_fx * pa_yy[j] * pb_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pb_xx[j] - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 1.5 * pa_xxyy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxyy[j] * pc_x[j] * fl1_fx - 3.0 * pa_xxy[j] * pc_y[j] * pb_x[j] * fl1_fx - 9.0 * pa_xyy[j] * pc_x[j] * pb_x[j] * fl1_fx - 6.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_xx[j] - 3.0 * pa_xyy[j] * fl1_fx * pb_xx[j] - 4.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_xx[j] - 0.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_xxx[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xxx[j] - 3.0 * pa_xxyy[j] * pb_xx[j] * pc_x[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_xxx[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_xxx[j]);

                t_xxyy_xxx[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 3.375 * fl3_fx * pb_x[j] + 6.0 * pa_xy[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pa_xyy[j] * fl2_fx + 7.5 * pc_x[j] * fl2_fx * pa_yy[j] + 7.5 * pc_xy[j] * fl2_fx * pa_y[j] + 2.25 * fl2_fx * pc_yy[j] * pb_x[j] + 9.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 2.25 * fl2_fx * pa_yy[j] * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pb_xx[j] + 1.5 * pa_xxyy[j] * pc_x[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_y[j] * pb_x[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx + 9.0 * pa_xyy[j] * pc_x[j] * pb_x[j] * fl1_fx + 6.0 * pa_xyy[j] * pc_xx[j] * fl1_fx + 18.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xx[j] + 6.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_xx[j] + 9.0 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx + 9.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xx[j] + 4.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_xx[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xxx[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_xxx[j] + 3.0 * pa_xxyy[j] * pb_x[j] * pc_xx[j] + 6.0 * pa_xxy[j] * pc_xy[j] * pb_xx[j] + pa_xx[j] * pc_yy[j] * pb_xxx[j] + 6.0 * pa_xyy[j] * pc_xx[j] * pb_xx[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xxx[j] + pc_xx[j] * pa_yy[j] * pb_xxx[j]);

                t_xxyy_xxx[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_yy[j] - 3.0 * pa_xy[j] * fl2_fx * pc_y[j] - 15.0 * pc_xy[j] * fl2_fx * pa_y[j] - 3.75 * pc_xyy[j] * fl2_fx - 3.75 * pc_x[j] * fl2_fx * pa_yy[j] - 4.5 * fl2_fx * pc_yy[j] * pb_x[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 6.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 9.0 * pc_xx[j] * fl2_fx * pb_x[j] - 2.5 * pc_xxx[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * pa_xxy[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 6.0 * pa_xyy[j] * pc_xx[j] * fl1_fx - 18.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 12.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xx[j] - 9.0 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_yy[j] * fl1_fx - 18.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xx[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xxx[j] - pa_xxyy[j] * pc_xxx[j] - 6.0 * pa_xxy[j] * pc_xxy[j] * pb_x[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_xx[j] - 6.0 * pa_xyy[j] * pc_xxx[j] * pb_x[j] - 12.0 * pa_xy[j] * pc_xxy[j] * pb_xx[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_yy[j] * pb_xx[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xxx[j]);

                t_xxyy_xxx[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * fl2_fx * pc_yy[j] + 7.5 * pc_xyy[j] * fl2_fx + 7.5 * pc_xy[j] * fl2_fx * pa_y[j] + 2.25 * fl2_fx * pc_yy[j] * pb_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 5.0 * pc_xxx[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 12.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_yy[j] * fl1_fx + 18.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxy[j] * pa_y[j] * fl1_fx + 9.0 * pc_xxyy[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] + pa_x[j] * pc_xxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xxy[j] * pc_xxxy[j] + 3.0 * pa_xx[j] * pc_xxyy[j] * pb_x[j] + 2.0 * pa_xyy[j] * pc_xxxx[j] + 12.0 * pa_xy[j] * pc_xxxy[j] * pb_x[j] + 6.0 * pa_x[j] * pc_xxyy[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_yy[j] * pb_x[j] + 6.0 * pc_xxxy[j] * pa_y[j] * pb_xx[j] + pc_xxyy[j] * pb_xxx[j]);

                t_xxyy_xxx[j] += fl_s_0_0_5 * (-3.75 * pc_xyy[j] * fl2_fx - 2.5 * pc_xxx[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 10.0 * pc_xxxy[j] * pa_y[j] * fl1_fx - 9.0 * pc_xxyy[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxyy[j] * fl1_fx - pa_x[j] * pc_xxxx[j] * fl1_fx - 0.5 * pc_xxxxx[j] * fl1_fx - 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxxyy[j] - 4.0 * pa_xy[j] * pc_xxxxy[j] - 6.0 * pa_x[j] * pc_xxxyy[j] * pb_x[j] - pc_xxxxx[j] * pa_yy[j] - 6.0 * pc_xxxxy[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxyy[j] * pb_xx[j]);

                t_xxyy_xxx[j] += fl_s_0_0_6 * (5.0 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxyy[j] + 2.0 * pc_xxxxxy[j] * pa_y[j] + 3.0 * pc_xxxxyy[j] * pb_x[j]);

                t_xxyy_xxx[j] += -fl_s_0_0_7 * pc_xxxxxyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_31_32(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (31,32)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_xxy = primBuffer.data(150 * idx + 31);

            // Batch of Integrals (31,32)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xx, pb_xxy, \
                                     pb_xy, pb_y, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyy, pc_xxxy, \
                                     pc_xxxyy, pc_xxxyyy, pc_xxy, pc_xxyy, pc_xxyyy, pc_xy, pc_xyy, pc_xyyy, pc_y, pc_yy, \
                                     pc_yyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxyy_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_xxy[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_y[j] + 0.375 * fl3_fx * pb_y[j] + 0.5 * pa_xxy[j] * fl2_fx + 2.0 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_xy[j] + 0.5 * fl2_fx * pa_y[j] * pb_xx[j] + 0.5 * pa_xxyy[j] * fl1_fx * pb_y[j] + pa_xxy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xyy[j] * fl1_fx * pb_xy[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xxy[j] + pa_xxyy[j] * pb_xxy[j]);

                t_xxyy_xxy[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_y[j] - 1.125 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 3.0 * pa_xy[j] * pc_x[j] * fl2_fx - 4.0 * pa_xy[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 1.5 * fl2_fx * pa_yy[j] * pb_y[j] - 0.5 * pa_xx[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 2.0 * pa_x[j] * fl2_fx * pb_xy[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - fl2_fx * pa_y[j] * pb_xx[j] - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - 0.5 * pa_xxyy[j] * fl1_fx * pc_y[j] - 0.5 * pa_xxyy[j] * fl1_fx * pb_y[j] - pa_xxy[j] * pc_y[j] * fl1_fx * pb_y[j] - 2.0 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_x[j] - pa_xxy[j] * fl1_fx * pb_xx[j] - 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xx[j] - 3.0 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xx[j] - 2.0 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_y[j] - 4.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_xy[j] - 2.0 * pa_xyy[j] * fl1_fx * pb_xy[j] - 3.0 * pc_x[j] * fl1_fx * pa_yy[j] * pb_xy[j] - 0.5 * fl2_fx * pb_xxy[j] - pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxy[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_xxy[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xxy[j] - pa_xxyy[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xxyy[j] * pb_xy[j] * pc_x[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_xxy[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_xxy[j]);

                t_xxyy_xxy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_y[j] + 2.25 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pb_y[j] + 0.5 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 6.0 * pa_xy[j] * pc_x[j] * fl2_fx + 4.5 * pa_x[j] * pc_xy[j] * fl2_fx + 6.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + 2.0 * pa_xy[j] * fl2_fx * pb_x[j] + 3.0 * pc_xx[j] * pa_y[j] * fl2_fx + 6.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 4.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.75 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_yy[j] * pc_y[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * fl2_fx * pb_xy[j] + 1.5 * fl2_fx * pc_y[j] * pb_xx[j] + 0.5 * fl2_fx * pa_y[j] * pb_xx[j] + 0.5 * pa_xxyy[j] * fl1_fx * pc_y[j] + pa_xxy[j] * pc_yy[j] * fl1_fx + pa_xxy[j] * pc_y[j] * fl1_fx * pb_y[j] + pa_xxy[j] * fl1_fx * pc_xx[j] + 2.0 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_x[j] + 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xyy[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_y[j] + 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 4.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_x[j] + 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 4.0 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xy[j] + 2.0 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_y[j] + 4.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_xy[j] + 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] + pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xy[j] * fl1_fx * pa_yy[j] * pb_x[j] + 6.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xy[j] + 3.0 * pc_x[j] * fl1_fx * pa_yy[j] * pb_xy[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] + pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_y[j] * pc_yy[j] * pb_xx[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xxy[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_xxy[j] + 2.0 * pa_xxyy[j] * pb_x[j] * pc_xy[j] + pa_xxyy[j] * pc_xx[j] * pb_y[j] + 2.0 * pa_xxy[j] * pc_yy[j] * pb_xx[j] + 4.0 * pa_xxy[j] * pc_xy[j] * pb_xy[j] + pa_xx[j] * pc_yy[j] * pb_xxy[j] + 2.0 * pa_xyy[j] * pc_xy[j] * pb_xx[j] + 4.0 * pa_xyy[j] * pc_xx[j] * pb_xy[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xxy[j] + pc_xx[j] * pa_yy[j] * pb_xxy[j]);

                t_xxyy_xxy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 3.0 * pa_xy[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xy[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 6.0 * pc_xx[j] * pa_y[j] * fl2_fx - 4.5 * pc_xxy[j] * fl2_fx - 9.0 * pc_xy[j] * fl2_fx * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 0.75 * fl2_fx * pc_yyy[j] - 3.0 * fl2_fx * pa_y[j] * pc_yy[j] - 1.5 * fl2_fx * pc_yy[j] * pb_y[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - pa_xxy[j] * pc_yy[j] * fl1_fx - pa_xxy[j] * fl1_fx * pc_xx[j] - 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_y[j] - 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] - 3.0 * pa_xyy[j] * pc_xy[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_xxx[j] * fl1_fx - 4.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_x[j] - 4.0 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_x[j] - 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xy[j] - 3.0 * pc_xxy[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - 2.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_x[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_yy[j] * pb_x[j] - 6.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xy[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] - pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] - pc_xxx[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_xx[j] - fl1_fx * pa_y[j] * pc_yy[j] * pb_xx[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xxy[j] - pa_xxyy[j] * pc_xxy[j] - 4.0 * pa_xxy[j] * pc_xyy[j] * pb_x[j] - 2.0 * pa_xxy[j] * pc_xxy[j] * pb_y[j] - pa_xx[j] * pc_yyy[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xyy[j] * pb_xy[j] - 4.0 * pa_xyy[j] * pc_xxy[j] * pb_x[j] - 2.0 * pa_xyy[j] * pc_xxx[j] * pb_y[j] - 4.0 * pa_xy[j] * pc_xyy[j] * pb_xx[j] - 8.0 * pa_xy[j] * pc_xxy[j] * pb_xy[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xxy[j] - pc_xxy[j] * pa_yy[j] * pb_xx[j] - 2.0 * pc_xxx[j] * pa_yy[j] * pb_xy[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xxy[j]);

                t_xxyy_xxy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 4.5 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xx[j] * pa_y[j] * fl2_fx + 9.0 * pc_xxy[j] * fl2_fx + 4.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyy[j] + 1.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.75 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_x[j] + 3.0 * pc_xxy[j] * pa_yy[j] * fl1_fx + 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + pc_xxxx[j] * pa_y[j] * fl1_fx + 2.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxxy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xyyy[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + pc_xxx[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_xx[j] + 2.0 * pa_xxy[j] * pc_xxyy[j] + 2.0 * pa_xx[j] * pc_xyyy[j] * pb_x[j] + pa_xx[j] * pc_xxyy[j] * pb_y[j] + 2.0 * pa_xyy[j] * pc_xxxy[j] + 8.0 * pa_xy[j] * pc_xxyy[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxxy[j] * pb_y[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxyy[j] * pb_xy[j] + 2.0 * pc_xxxy[j] * pa_yy[j] * pb_x[j] + pc_xxxx[j] * pa_yy[j] * pb_y[j] + 2.0 * pc_xxyy[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxxy[j] * pa_y[j] * pb_xy[j] + pc_xxyy[j] * pb_xxy[j]);

                t_xxyy_xxy[j] += fl_s_0_0_5 * (-4.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yyy[j] - 3.0 * pa_x[j] * pc_xyyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - pc_xxxx[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyyy[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxxxy[j] * fl1_fx - 3.0 * pc_xxxy[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - pa_xx[j] * pc_xxyyy[j] - 4.0 * pa_xy[j] * pc_xxxyy[j] - 4.0 * pa_x[j] * pc_xxyyy[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxyy[j] * pb_y[j] - pc_xxxxy[j] * pa_yy[j] - 4.0 * pc_xxxyy[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_y[j] * pb_y[j] - pc_xxyyy[j] * pb_xx[j] - 2.0 * pc_xxxyy[j] * pb_xy[j]);

                t_xxyy_xxy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyyy[j] + 2.0 * pc_xxxxyy[j] * pa_y[j] + 2.0 * pc_xxxyyy[j] * pb_x[j] + pc_xxxxyy[j] * pb_y[j]);

                t_xxyy_xxy[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_32_33(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (32,33)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_xxz = primBuffer.data(150 * idx + 32);

            // Batch of Integrals (32,33)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xx, pb_xxz, \
                                     pb_xz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyz, \
                                     pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, \
                                     pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyz, \
                                     pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxyy_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_xxz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + pa_x[j] * fl2_fx * pb_xz[j] + 0.5 * pa_xxyy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xyy[j] * fl1_fx * pb_xz[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xxz[j] + pa_xxyy[j] * pb_xxz[j]);

                t_xxyy_xxz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 1.5 * fl2_fx * pa_yy[j] * pb_z[j] - 0.25 * pa_xx[j] * fl2_fx * pc_z[j] - 0.5 * pa_xx[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.0 * pa_x[j] * fl2_fx * pb_xz[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.5 * pa_xxyy[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxyy[j] * fl1_fx * pb_z[j] - pa_xxy[j] * pc_y[j] * fl1_fx * pb_z[j] - 3.0 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] - 2.0 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_z[j] - 4.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_xz[j] - 2.0 * pa_xyy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_x[j] * fl1_fx * pa_yy[j] * pb_xz[j] - 0.25 * fl2_fx * pb_xx[j] * pc_z[j] - 0.5 * fl2_fx * pb_xxz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] - pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_z[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xxz[j] - pa_xxyy[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xxyy[j] * pb_xz[j] * pc_x[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_xxz[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_xxz[j]);

                t_xxyy_xxz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pa_yy[j] * pc_z[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 0.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 2.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + pa_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * pc_x[j] * fl2_fx * pb_xz[j] + 0.5 * pa_xxyy[j] * fl1_fx * pc_z[j] + pa_xxy[j] * pc_yz[j] * fl1_fx + pa_xxy[j] * pc_y[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xyy[j] * pc_xz[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] + 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xz[j] + 2.0 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_z[j] + 4.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_xz[j] + 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xz[j] * fl1_fx * pa_yy[j] * pb_x[j] + 6.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xz[j] + 3.0 * pc_x[j] * fl1_fx * pa_yy[j] * pb_xz[j] + 0.5 * fl2_fx * pb_xx[j] * pc_z[j] + 0.25 * fl2_fx * pb_xxz[j] + pa_xx[j] * fl1_fx * pb_x[j] * pc_xz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] + pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] + pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_z[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_xxz[j] + 2.0 * pa_xxyy[j] * pb_x[j] * pc_xz[j] + pa_xxyy[j] * pc_xx[j] * pb_z[j] + 2.0 * pa_xxy[j] * pc_yz[j] * pb_xx[j] + 4.0 * pa_xxy[j] * pc_xy[j] * pb_xz[j] + pa_xx[j] * pc_yy[j] * pb_xxz[j] + 2.0 * pa_xyy[j] * pc_xz[j] * pb_xx[j] + 4.0 * pa_xyy[j] * pc_xx[j] * pb_xz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xxz[j] + pc_xx[j] * pa_yy[j] * pb_xxz[j]);

                t_xxyy_xxz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.25 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - pa_xxy[j] * pc_yz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xyy[j] * pc_xz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] - 4.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_x[j] - 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] - 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 6.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_yy[j] * pb_x[j] - 6.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xz[j] - 0.25 * fl2_fx * pb_xx[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxz[j] - pa_xx[j] * fl1_fx * pb_x[j] * pc_xz[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] - 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - pc_xxx[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xxz[j] - pa_xxyy[j] * pc_xxz[j] - 4.0 * pa_xxy[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_xxy[j] * pc_xxy[j] * pb_z[j] - pa_xx[j] * pc_yyz[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xyy[j] * pb_xz[j] - 4.0 * pa_xyy[j] * pc_xxz[j] * pb_x[j] - 2.0 * pa_xyy[j] * pc_xxx[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xx[j] - 8.0 * pa_xy[j] * pc_xxy[j] * pb_xz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xxz[j] - pc_xxz[j] * pa_yy[j] * pb_xx[j] - 2.0 * pc_xxx[j] * pa_yy[j] * pb_xz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xxz[j]);

                t_xxyy_xxz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] + 3.0 * pc_xxz[j] * pa_yy[j] * fl1_fx + 6.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_xz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xxz[j] + pa_x[j] * pc_xxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + pc_xxxz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + pc_xxx[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] + 2.0 * pa_xxy[j] * pc_xxyz[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_x[j] + pa_xx[j] * pc_xxyy[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_xxxz[j] + 8.0 * pa_xy[j] * pc_xxyz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxxy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxyy[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_yy[j] * pb_x[j] + pc_xxxx[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxxy[j] * pa_y[j] * pb_xz[j] + pc_xxyy[j] * pb_xxz[j]);

                t_xxyy_xxz[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yyz[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 6.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxxz[j] * fl1_fx - 0.5 * pc_xxxxz[j] * fl1_fx - pc_xxxz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - pa_xx[j] * pc_xxyyz[j] - 4.0 * pa_xy[j] * pc_xxxyz[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxyy[j] * pb_z[j] - pc_xxxxz[j] * pa_yy[j] - 4.0 * pc_xxxyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_y[j] * pb_z[j] - pc_xxyyz[j] * pb_xx[j] - 2.0 * pc_xxxyy[j] * pb_xz[j]);

                t_xxyy_xxz[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyyz[j] + 2.0 * pc_xxxxyz[j] * pa_y[j] + 2.0 * pc_xxxyyz[j] * pb_x[j] + pc_xxxxyy[j] * pb_z[j]);

                t_xxyy_xxz[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_33_34(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (33,34)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_xyy = primBuffer.data(150 * idx + 33);

            // Batch of Integrals (33,34)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xy, pb_xyy, \
                                     pb_y, pb_yy, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxyy_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_xyy[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 0.375 * fl3_fx * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_xyy[j] * fl2_fx + 2.0 * pa_xy[j] * fl2_fx * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_yy[j] + 0.25 * fl2_fx * pa_yy[j] * pb_x[j] + fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xxyy[j] * pb_x[j] * fl1_fx + 2.0 * pa_xxy[j] * fl1_fx * pb_xy[j] + pa_xyy[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xyy[j] + pa_xxyy[j] * pb_xyy[j]);

                t_xxyy_xyy[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_xyy[j] * fl2_fx - 3.0 * pa_xy[j] * fl2_fx * pc_y[j] - 4.0 * pa_xy[j] * fl2_fx * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_yy[j] - 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * fl2_fx * pa_yy[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 2.0 * fl2_fx * pa_y[j] * pb_xy[j] - 1.5 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * pa_xxyy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxyy[j] * pc_x[j] * fl1_fx - 3.0 * pa_xxy[j] * pc_y[j] * pb_x[j] * fl1_fx - 2.0 * pa_xxy[j] * fl1_fx * pc_x[j] * pb_y[j] - 2.0 * pa_xxy[j] * fl1_fx * pb_xy[j] - 3.0 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xy[j] - pa_xyy[j] * pc_x[j] * pb_x[j] * fl1_fx - 4.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xy[j] - 2.0 * pa_xyy[j] * fl1_fx * pb_y[j] * pc_y[j] - 2.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_yy[j] - pa_xyy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_yy[j] - 0.5 * fl2_fx * pb_xyy[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xyy[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] - fl1_fx * pa_yy[j] * pb_xy[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_xyy[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xyy[j] - 2.0 * pa_xxyy[j] * pb_xy[j] * pc_y[j] - pa_xxyy[j] * pc_x[j] * pb_yy[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_xyy[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_xyy[j]);

                t_xxyy_xyy[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 6.0 * pa_xy[j] * fl2_fx * pc_y[j] + 3.0 * pa_x[j] * fl2_fx * pc_yy[j] + 6.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 0.5 * pa_xyy[j] * fl2_fx + 2.0 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pa_yy[j] + 4.5 * pc_xy[j] * fl2_fx * pa_y[j] + 6.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 4.5 * pc_xy[j] * fl2_fx * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 1.5 * fl2_fx * pc_yy[j] * pb_x[j] + 3.0 * fl2_fx * pc_y[j] * pb_xy[j] + 0.25 * fl2_fx * pa_yy[j] * pb_x[j] + fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xxyy[j] * pc_x[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_y[j] * pb_x[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_xy[j] * fl1_fx + 2.0 * pa_xxy[j] * fl1_fx * pc_x[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xy[j] + pa_xyy[j] * pc_x[j] * pb_x[j] * fl1_fx + pa_xyy[j] * pc_xx[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 4.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] + 4.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xy[j] + 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + pa_xyy[j] * fl1_fx * pc_yy[j] + 4.0 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_yy[j] * pb_yy[j] + 2.0 * pa_xyy[j] * fl1_fx * pb_y[j] * pc_y[j] + 2.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_yy[j] + 0.5 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx + 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_yy[j] * pb_y[j] + 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yy[j] + 1.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_yy[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_yy[j] * pb_x[j] * pc_yy[j] + 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xyy[j] + fl1_fx * pa_yy[j] * pb_xy[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_xyy[j] + pa_xxyy[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xxyy[j] * pc_xy[j] * pb_y[j] + 4.0 * pa_xxy[j] * pc_yy[j] * pb_xy[j] + 2.0 * pa_xxy[j] * pc_xy[j] * pb_yy[j] + pa_xx[j] * pc_yy[j] * pb_xyy[j] + 4.0 * pa_xyy[j] * pc_xy[j] * pb_xy[j] + 2.0 * pa_xyy[j] * pc_xx[j] * pb_yy[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xyy[j] + pc_xx[j] * pa_yy[j] * pb_xyy[j]);

                t_xxyy_xyy[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_yy[j] - 3.0 * pa_xy[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 0.75 * pc_xxx[j] * fl2_fx - 1.5 * pc_xx[j] * fl2_fx * pb_x[j] - 9.0 * pc_xy[j] * fl2_fx * pa_y[j] - 4.5 * pc_xyy[j] * fl2_fx - 9.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_yy[j] - 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pc_yy[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 1.5 * fl2_fx * pc_y[j] * pb_xy[j] - 3.0 * pa_xxy[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] - pa_xyy[j] * pc_xx[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - 4.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 2.0 * pa_xy[j] * fl1_fx * pc_yyy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_y[j] - pa_xyy[j] * fl1_fx * pc_yy[j] - 4.0 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_yy[j] * pb_yy[j] - 0.5 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 2.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_yy[j] - 6.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_y[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_yy[j] * pb_y[j] - 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yy[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xyy[j] - fl1_fx * pa_y[j] * pc_yyy[j] * pb_x[j] - fl1_fx * pc_yyy[j] * pb_xy[j] - 0.5 * fl1_fx * pa_yy[j] * pb_x[j] * pc_yy[j] - 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xyy[j] - pa_xxyy[j] * pc_xyy[j] - 2.0 * pa_xxy[j] * pc_yyy[j] * pb_x[j] - 4.0 * pa_xxy[j] * pc_xyy[j] * pb_y[j] - 2.0 * pa_xx[j] * pc_yyy[j] * pb_xy[j] - pa_xx[j] * pc_xyy[j] * pb_yy[j] - 2.0 * pa_xyy[j] * pc_xyy[j] * pb_x[j] - 4.0 * pa_xyy[j] * pc_xxy[j] * pb_y[j] - 8.0 * pa_xy[j] * pc_xyy[j] * pb_xy[j] - 4.0 * pa_xy[j] * pc_xxy[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_yy[j] * pb_xy[j] - pc_xxx[j] * pa_yy[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xyy[j]);

                t_xxyy_xyy[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xxx[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 9.0 * pc_xyy[j] * fl2_fx + 4.5 * pc_xy[j] * fl2_fx * pa_y[j] + 4.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xyy[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_yyyy[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yyy[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_y[j] + 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxxy[j] * pa_y[j] * fl1_fx + 2.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxxy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyyy[j] * fl1_fx * pa_y[j] + 3.0 * pc_xyyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_yy[j] + 6.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pc_yyyy[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_yyy[j] * pb_x[j] + fl1_fx * pc_yyy[j] * pb_xy[j] + 2.0 * pa_xxy[j] * pc_xyyy[j] + pa_xx[j] * pc_yyyy[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xyyy[j] * pb_y[j] + 2.0 * pa_xyy[j] * pc_xxyy[j] + 4.0 * pa_xy[j] * pc_xyyy[j] * pb_x[j] + 8.0 * pa_xy[j] * pc_xxyy[j] * pb_y[j] + 4.0 * pa_x[j] * pc_xyyy[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xxyy[j] * pb_yy[j] + pc_xxyy[j] * pa_yy[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_yy[j] * pb_y[j] + 4.0 * pc_xxyy[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_yy[j] + pc_xxyy[j] * pb_xyy[j]);

                t_xxyy_xyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xyy[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyyy[j] - 3.0 * pc_xxxy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxxyy[j] * fl1_fx - 3.0 * pc_xxxy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyyy[j] * fl1_fx - 3.0 * pc_xyyy[j] * fl1_fx * pa_y[j] - 3.0 * pc_xyyy[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyy[j] * pb_x[j] - pa_xx[j] * pc_xyyyy[j] - 4.0 * pa_xy[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyy[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxyyy[j] * pb_y[j] - pc_xxxyy[j] * pa_yy[j] - 2.0 * pc_xxyyy[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxxyy[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyyy[j] * pb_xy[j] - pc_xxxyy[j] * pb_yy[j]);

                t_xxyy_xyy[j] += fl_s_0_0_6 * (3.0 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyyy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyyy[j] + 2.0 * pc_xxxyyy[j] * pa_y[j] + pc_xxyyyy[j] * pb_x[j] + 2.0 * pc_xxxyyy[j] * pb_y[j]);

                t_xxyy_xyy[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_34_35(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (34,35)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_xyz = primBuffer.data(150 * idx + 34);

            // Batch of Integrals (34,35)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xy, pb_xyz, \
                                     pb_xz, pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, \
                                     pc_xxxyyyz, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, \
                                     pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, \
                                     pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyy_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxyy_xyz[j] = fl_s_0_0_0 * (pa_xy[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * fl2_fx * pa_y[j] * pb_xz[j] + pa_xxy[j] * fl1_fx * pb_xz[j] + pa_xyy[j] * fl1_fx * pb_yz[j] + 0.25 * fl2_fx * pb_xyz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xyz[j] + pa_xxyy[j] * pb_xyz[j]);

                t_xxyy_xyz[j] += fl_s_0_0_1 * (-pa_xy[j] * fl2_fx * pc_z[j] - 2.0 * pa_xy[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - fl2_fx * pa_y[j] * pb_xz[j] - 0.75 * fl2_fx * pc_y[j] * pb_xz[j] - pa_xxy[j] * fl1_fx * pb_x[j] * pc_z[j] - pa_xxy[j] * fl1_fx * pc_x[j] * pb_z[j] - pa_xxy[j] * fl1_fx * pb_xz[j] - 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xz[j] - 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xz[j] - pa_xyy[j] * fl1_fx * pb_y[j] * pc_z[j] - pa_xyy[j] * fl1_fx * pc_y[j] * pb_z[j] - 2.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_yz[j] - pa_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xy[j] * pc_z[j] - 0.5 * fl2_fx * pb_xyz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xyz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xy[j] * pc_z[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xz[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xyz[j] - pa_xxyy[j] * pb_xy[j] * pc_z[j] - pa_xxyy[j] * pb_xz[j] * pc_y[j] - pa_xxyy[j] * pc_x[j] * pb_yz[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_xyz[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_xyz[j]);

                t_xxyy_xyz[j] += fl_s_0_0_2 * (2.0 * pa_xy[j] * fl2_fx * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pa_y[j] + 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yz[j] + fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * fl2_fx * pc_y[j] * pb_xz[j] + 0.5 * fl2_fx * pa_y[j] * pb_xz[j] + pa_xxy[j] * fl1_fx * pc_xz[j] + pa_xxy[j] * fl1_fx * pb_x[j] * pc_z[j] + pa_xxy[j] * fl1_fx * pc_x[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xz[j] + 2.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_x[j] + 2.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xz[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + pa_xyy[j] * fl1_fx * pc_yz[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_y[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_yy[j] * pb_yz[j] + pa_xyy[j] * fl1_fx * pb_y[j] * pc_z[j] + pa_xyy[j] * fl1_fx * pc_y[j] * pb_z[j] + 2.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_yz[j] + pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_yy[j] * pb_y[j] + 1.5 * pc_xy[j] * fl1_fx * pa_yy[j] * pb_z[j] + 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yz[j] + 1.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_yz[j] + 0.5 * fl2_fx * pb_xy[j] * pc_z[j] + 0.25 * fl2_fx * pb_xyz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xz[j] * pb_y[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] + pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_x[j] * pc_yz[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] + fl1_fx * pa_y[j] * pc_yy[j] * pb_xz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xy[j] * pc_z[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xz[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_xyz[j] + pa_xxyy[j] * pb_x[j] * pc_yz[j] + pa_xxyy[j] * pc_xz[j] * pb_y[j] + pa_xxyy[j] * pc_xy[j] * pb_z[j] + 2.0 * pa_xxy[j] * pc_yz[j] * pb_xy[j] + 2.0 * pa_xxy[j] * pc_yy[j] * pb_xz[j] + 2.0 * pa_xxy[j] * pc_xy[j] * pb_yz[j] + pa_xx[j] * pc_yy[j] * pb_xyz[j] + 2.0 * pa_xyy[j] * pc_xz[j] * pb_xy[j] + 2.0 * pa_xyy[j] * pc_xy[j] * pb_xz[j] + 2.0 * pa_xyy[j] * pc_xx[j] * pb_yz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xyz[j] + pc_xx[j] * pa_yy[j] * pb_xyz[j]);

                t_xxyy_xyz[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pc_xz[j] * fl2_fx * pa_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_xz[j] - pa_xxy[j] * fl1_fx * pc_xz[j] - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_x[j] - 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_xxz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_x[j] - 2.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 2.0 * pa_xy[j] * fl1_fx * pc_yyz[j] - pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] - pa_xyy[j] * fl1_fx * pc_yz[j] - 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_y[j] - 2.0 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_yy[j] * pb_yz[j] - pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_yy[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] - 3.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_z[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_yy[j] * pb_y[j] - 1.5 * pc_xy[j] * fl1_fx * pa_yy[j] * pb_z[j] - 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xy[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xz[j] * pb_y[j] - pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xyz[j] - fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_xz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_x[j] * pc_yz[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] - fl1_fx * pa_y[j] * pc_yy[j] * pb_xz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xyz[j] - pa_xxyy[j] * pc_xyz[j] - 2.0 * pa_xxy[j] * pc_yyz[j] * pb_x[j] - 2.0 * pa_xxy[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xxy[j] * pc_xyy[j] * pb_z[j] - pa_xx[j] * pc_yyz[j] * pb_xy[j] - pa_xx[j] * pc_yyy[j] * pb_xz[j] - pa_xx[j] * pc_xyy[j] * pb_yz[j] - 2.0 * pa_xyy[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_xyy[j] * pc_xxz[j] * pb_y[j] - 2.0 * pa_xyy[j] * pc_xxy[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xy[j] - 4.0 * pa_xy[j] * pc_xyy[j] * pb_xz[j] - 4.0 * pa_xy[j] * pc_xxy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xyz[j] - pc_xxz[j] * pa_yy[j] * pb_xy[j] - pc_xxy[j] * pa_yy[j] * pb_xz[j] - pc_xxx[j] * pa_yy[j] * pb_yz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xyz[j]);

                t_xxyy_xyz[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + pa_x[j] * fl1_fx * pc_yyyz[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yyz[j] + pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] + pc_xxxz[j] * pa_y[j] * fl1_fx + pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] + pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xyyz[j] * fl1_fx * pa_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_yy[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] + 3.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_z[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_xz[j] + 2.0 * pa_xxy[j] * pc_xyyz[j] + pa_xx[j] * pc_yyyz[j] * pb_x[j] + pa_xx[j] * pc_xyyz[j] * pb_y[j] + pa_xx[j] * pc_xyyy[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_xxyz[j] + 4.0 * pa_xy[j] * pc_xyyz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxyz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_xxyy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxyy[j] * pb_yz[j] + pc_xxyz[j] * pa_yy[j] * pb_x[j] + pc_xxxz[j] * pa_yy[j] * pb_y[j] + pc_xxxy[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxyy[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_yz[j] + pc_xxyy[j] * pb_xyz[j]);

                t_xxyy_xyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyyz[j] - pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pa_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] - pa_xx[j] * pc_xyyyz[j] - 4.0 * pa_xy[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxyyy[j] * pb_z[j] - pc_xxxyz[j] * pa_yy[j] - 2.0 * pc_xxyyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxxyy[j] * pa_y[j] * pb_z[j] - pc_xxyyz[j] * pb_xy[j] - pc_xxyyy[j] * pb_xz[j] - pc_xxxyy[j] * pb_yz[j]);

                t_xxyy_xyz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyyz[j] + 2.0 * pc_xxxyyz[j] * pa_y[j] + pc_xxyyyz[j] * pb_x[j] + pc_xxxyyz[j] * pb_y[j] + pc_xxxyyy[j] * pb_z[j]);

                t_xxyy_xyz[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_35_36(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (35,36)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_xzz = primBuffer.data(150 * idx + 35);

            // Batch of Integrals (35,36)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xz, pb_xzz, \
                                     pb_z, pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyyzz, \
                                     pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, \
                                     pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, \
                                     pc_xz, pc_xzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyy_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_xzz[j] = fl_s_0_0_0 * (0.25 * pa_x[j] * fl3_fx + 0.5 * pa_xyy[j] * fl2_fx + 0.125 * fl3_fx * pb_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_zz[j] + 0.25 * fl2_fx * pa_yy[j] * pb_x[j] + 0.5 * pa_xxyy[j] * pb_x[j] * fl1_fx + pa_xyy[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_xzz[j] + pa_xxyy[j] * pb_xzz[j]);

                t_xxyy_xzz[j] += fl_s_0_0_1 * (-0.75 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - pa_xyy[j] * fl2_fx - pa_xy[j] * fl2_fx * pc_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_yy[j] - 0.375 * fl3_fx * pb_x[j] - 0.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * fl2_fx * pa_yy[j] * pb_x[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 0.5 * pa_xxyy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxyy[j] * pc_x[j] * fl1_fx - pa_xxy[j] * pc_y[j] * pb_x[j] * fl1_fx - pa_xyy[j] * pc_x[j] * pb_x[j] * fl1_fx - 2.0 * pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] - pa_xyy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_zz[j] - 0.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.5 * fl2_fx * pb_xzz[j] - pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xzz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] - fl1_fx * pa_yy[j] * pb_xz[j] * pc_z[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_xzz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_xzz[j] - 2.0 * pa_xxyy[j] * pb_xz[j] * pc_z[j] - pa_xxyy[j] * pc_x[j] * pb_zz[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_xzz[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_xzz[j]);

                t_xxyy_xzz[j] += fl_s_0_0_2 * (0.75 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 2.0 * pa_xy[j] * fl2_fx * pc_y[j] + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 0.5 * pa_xyy[j] * fl2_fx + 1.5 * pc_x[j] * fl2_fx * pa_yy[j] + 1.5 * pc_xy[j] * fl2_fx * pa_y[j] + 0.375 * fl3_fx * pb_x[j] + 0.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 2.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_zz[j] + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 0.25 * fl2_fx * pc_yy[j] * pb_x[j] + 0.25 * fl2_fx * pa_yy[j] * pb_x[j] + 0.5 * pa_xxyy[j] * pc_x[j] * fl1_fx + pa_xxy[j] * pc_y[j] * pb_x[j] * fl1_fx + pa_xxy[j] * pc_xy[j] * fl1_fx + 0.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx + pa_xyy[j] * pc_x[j] * pb_x[j] * fl1_fx + pa_xyy[j] * pc_xx[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + pa_xyy[j] * fl1_fx * pc_zz[j] + 4.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] + 2.0 * pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] + 2.0 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] + 0.5 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xz[j] * fl1_fx * pa_yy[j] * pb_z[j] + 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_zz[j] + 1.5 * pc_x[j] * fl1_fx * pa_yy[j] * pb_zz[j] + 0.25 * fl2_fx * pb_x[j] * pc_zz[j] + fl2_fx * pb_xz[j] * pc_z[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] + pa_xx[j] * fl1_fx * pc_xz[j] * pb_z[j] + pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] + 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_x[j] * pc_zz[j] + 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xzz[j] + fl1_fx * pa_yy[j] * pb_xz[j] * pc_z[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_xzz[j] + pa_xxyy[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xxyy[j] * pc_xz[j] * pb_z[j] + 4.0 * pa_xxy[j] * pc_yz[j] * pb_xz[j] + 2.0 * pa_xxy[j] * pc_xy[j] * pb_zz[j] + pa_xx[j] * pc_yy[j] * pb_xzz[j] + 4.0 * pa_xyy[j] * pc_xz[j] * pb_xz[j] + 2.0 * pa_xyy[j] * pc_xx[j] * pb_zz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xzz[j] + pc_xx[j] * pa_yy[j] * pb_xzz[j]);

                t_xxyy_xzz[j] += fl_s_0_0_3 * (-0.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - pa_x[j] * fl2_fx * pc_yy[j] - pa_xy[j] * fl2_fx * pc_y[j] - 3.0 * pc_xy[j] * fl2_fx * pa_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pa_yy[j] - 0.125 * fl3_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - pa_x[j] * pc_xx[j] * fl2_fx - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_zz[j] - pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 0.5 * pc_xx[j] * fl2_fx * pb_x[j] - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * fl2_fx * pc_yy[j] * pb_x[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - pa_xxy[j] * pc_xy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - pa_xyy[j] * pc_xx[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 2.0 * pa_xy[j] * fl1_fx * pc_yzz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] - pa_xyy[j] * fl1_fx * pc_zz[j] - 4.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] - 0.5 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx - pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * pc_xzz[j] * fl1_fx * pa_yy[j] - 6.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_yy[j] * pb_z[j] - 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_zz[j] - 0.5 * fl2_fx * pb_x[j] * pc_zz[j] - 0.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xzz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] - pa_xx[j] * fl1_fx * pc_xz[j] * pb_z[j] - pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - pc_xxz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xzz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] - fl1_fx * pc_yyz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_x[j] * pc_zz[j] - 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xzz[j] - pa_xxyy[j] * pc_xzz[j] - 2.0 * pa_xxy[j] * pc_yzz[j] * pb_x[j] - 4.0 * pa_xxy[j] * pc_xyz[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_yyz[j] * pb_xz[j] - pa_xx[j] * pc_xyy[j] * pb_zz[j] - 2.0 * pa_xyy[j] * pc_xzz[j] * pb_x[j] - 4.0 * pa_xyy[j] * pc_xxz[j] * pb_z[j] - 8.0 * pa_xy[j] * pc_xyz[j] * pb_xz[j] - 4.0 * pa_xy[j] * pc_xxy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xzz[j] - 2.0 * pc_xxz[j] * pa_yy[j] * pb_xz[j] - pc_xxx[j] * pa_yy[j] * pb_zz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xzz[j]);

                t_xxyy_xzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pa_y[j] + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pc_xxx[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_x[j] + 0.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * fl1_fx * pc_yyzz[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yzz[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] + 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx + pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + pc_xxxy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxyy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyzz[j] * fl1_fx * pa_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_yy[j] + 6.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_x[j] * pc_zz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xzz[j] + pa_x[j] * pc_xxzz[j] * fl1_fx + pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxzz[j] * fl1_fx * pb_x[j] + pc_xxxz[j] * fl1_fx * pb_z[j] + pc_xxz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] + fl1_fx * pc_yyz[j] * pb_xz[j] + 2.0 * pa_xxy[j] * pc_xyzz[j] + pa_xx[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_xxzz[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_x[j] + 8.0 * pa_xy[j] * pc_xxyz[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxyy[j] * pb_zz[j] + pc_xxzz[j] * pa_yy[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_yy[j] * pb_z[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_zz[j] + pc_xxyy[j] * pb_xzz[j]);

                t_xxyy_xzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - pa_x[j] * pc_xxyy[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyzz[j] - pc_xxxy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pa_y[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xxzz[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * fl1_fx * pb_x[j] - pc_xxxz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] - pa_xx[j] * pc_xyyzz[j] - 4.0 * pa_xy[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxxzz[j] * pa_yy[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxxyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxyyz[j] * pb_xz[j] - pc_xxxyy[j] * pb_zz[j]);

                t_xxyy_xzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyzz[j] + 2.0 * pc_xxxyzz[j] * pa_y[j] + pc_xxyyzz[j] * pb_x[j] + 2.0 * pc_xxxyyz[j] * pb_z[j]);

                t_xxyy_xzz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_36_37(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (36,37)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyy = pcDistances.data(119 * idx + 98);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_yyy = primBuffer.data(150 * idx + 36);

            // Batch of Integrals (36,37)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_y, pb_yy, pb_yyy, \
                                     pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyy, pc_xy, pc_xyy, \
                                     pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyy_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_yyy[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xxy[j] * fl2_fx + 2.25 * pa_xx[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_yy[j] + 1.5 * pa_xxyy[j] * pb_y[j] * fl1_fx + 3.0 * pa_xxy[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pb_yyy[j] + 0.5 * pa_xx[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yyy[j] + pa_xxyy[j] * pb_yyy[j]);

                t_xxyy_yyy[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_y[j] - 1.875 * fl3_fx * pc_y[j] - 3.375 * fl3_fx * pb_y[j] - 3.0 * pa_xxy[j] * fl2_fx - 3.75 * pa_xx[j] * pc_y[j] * fl2_fx - 4.5 * pa_xx[j] * fl2_fx * pb_y[j] - 3.0 * pa_xy[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * fl2_fx * pa_yy[j] * pb_y[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 3.0 * fl2_fx * pa_y[j] * pb_yy[j] - 2.25 * fl2_fx * pc_y[j] * pb_yy[j] - 1.5 * pa_xxyy[j] * pb_y[j] * fl1_fx - 1.5 * pa_xxyy[j] * pc_y[j] * fl1_fx - 9.0 * pa_xxy[j] * pc_y[j] * pb_y[j] * fl1_fx - 3.0 * pa_xxy[j] * fl1_fx * pb_yy[j] - 4.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yy[j] - 3.0 * pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx - 6.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] - 0.5 * fl2_fx * pb_yyy[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yyy[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] - 1.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_yyy[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yyy[j] - 3.0 * pa_xxyy[j] * pb_yy[j] * pc_y[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_yyy[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_yyy[j]);

                t_xxyy_yyy[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_y[j] + 5.625 * fl3_fx * pc_y[j] + 3.375 * fl3_fx * pb_y[j] + 1.5 * pa_xxy[j] * fl2_fx + 7.5 * pa_xx[j] * pc_y[j] * fl2_fx + 2.25 * pa_xx[j] * fl2_fx * pb_y[j] + 6.0 * pa_xy[j] * pc_x[j] * fl2_fx + 7.5 * pa_x[j] * pc_xy[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 2.25 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_yy[j] * pc_y[j] + 9.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 3.0 * fl2_fx * pa_y[j] * pc_yy[j] + 4.5 * fl2_fx * pc_yy[j] * pb_y[j] + 4.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_yy[j] + 1.5 * pa_xxyy[j] * pc_y[j] * fl1_fx + 9.0 * pa_xxy[j] * pc_y[j] * pb_y[j] * fl1_fx + 6.0 * pa_xxy[j] * pc_yy[j] * fl1_fx + 9.0 * pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx + 4.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_xy[j] * fl1_fx + 18.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx + 6.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] + 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pb_yyy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] + 1.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_yy[j] + 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yy[j] + 0.5 * fl1_fx * pc_yy[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_yyy[j] + 3.0 * pa_xxyy[j] * pb_y[j] * pc_yy[j] + 6.0 * pa_xxy[j] * pc_yy[j] * pb_yy[j] + pa_xx[j] * pc_yy[j] * pb_yyy[j] + 6.0 * pa_xyy[j] * pc_xy[j] * pb_yy[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_yyy[j] + pc_xx[j] * pa_yy[j] * pb_yyy[j]);

                t_xxyy_yyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pa_y[j] - 1.125 * fl3_fx * pb_y[j] - 3.75 * pa_xx[j] * pc_y[j] * fl2_fx - 3.0 * pa_xy[j] * pc_x[j] * fl2_fx - 15.0 * pa_x[j] * pc_xy[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 3.0 * pc_xx[j] * pa_y[j] * fl2_fx - 3.75 * pc_xxy[j] * fl2_fx - 4.5 * pc_xx[j] * fl2_fx * pb_y[j] - 6.0 * fl2_fx * pa_y[j] * pc_yy[j] - 9.0 * fl2_fx * pc_yy[j] * pb_y[j] - 2.5 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 2.25 * fl2_fx * pc_y[j] * pb_yy[j] - 6.0 * pa_xxy[j] * pc_yy[j] * fl1_fx - 9.0 * pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx - 5.0 * pa_xx[j] * pc_yyy[j] * fl1_fx - 3.0 * pa_xyy[j] * pc_xy[j] * fl1_fx - 18.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx - 12.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 18.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_yy[j] * fl1_fx - 9.0 * pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yyy[j] - 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_y[j] - 1.5 * fl1_fx * pc_yyy[j] * pb_yy[j] - 1.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_yy[j] - 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yy[j] - 0.5 * fl1_fx * pc_yy[j] * pb_yyy[j] - pa_xxyy[j] * pc_yyy[j] - 6.0 * pa_xxy[j] * pc_yyy[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_yyy[j] * pb_yy[j] - 6.0 * pa_xyy[j] * pc_xyy[j] * pb_y[j] - 12.0 * pa_xy[j] * pc_xyy[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_yyy[j] - 3.0 * pc_xxy[j] * pa_yy[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_yyy[j]);

                t_xxyy_yyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 7.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 7.5 * pc_xxy[j] * fl2_fx + 2.25 * pc_xx[j] * fl2_fx * pb_y[j] + 5.0 * fl2_fx * pc_yyy[j] + 3.0 * fl2_fx * pa_y[j] * pc_yy[j] + 4.5 * fl2_fx * pc_yy[j] * pb_y[j] + 5.0 * pa_xx[j] * pc_yyy[j] * fl1_fx + 12.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + 18.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx + 10.0 * pa_x[j] * pc_xyyy[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_yy[j] * fl1_fx + 9.0 * pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx + 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 9.0 * pc_xxyy[j] * pb_y[j] * fl1_fx + 4.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_y[j] * pc_yyyy[j] + 1.5 * fl1_fx * pc_yyyy[j] * pb_y[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yyy[j] + 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_y[j] + 1.5 * fl1_fx * pc_yyy[j] * pb_yy[j] + 2.0 * pa_xxy[j] * pc_yyyy[j] + 3.0 * pa_xx[j] * pc_yyyy[j] * pb_y[j] + 2.0 * pa_xyy[j] * pc_xyyy[j] + 12.0 * pa_xy[j] * pc_xyyy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xyyy[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_yy[j] * pb_y[j] + 6.0 * pc_xxyy[j] * pa_y[j] * pb_yy[j] + pc_xxyy[j] * pb_yyy[j]);

                t_xxyy_yyy[j] += fl_s_0_0_5 * (-3.75 * pc_xxy[j] * fl2_fx - 2.5 * fl2_fx * pc_yyy[j] - 10.0 * pa_x[j] * pc_xyyy[j] * fl1_fx - 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - 9.0 * pc_xxyy[j] * pb_y[j] * fl1_fx - 5.0 * pc_xxyyy[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyyy[j] - fl1_fx * pa_y[j] * pc_yyyy[j] - 1.5 * fl1_fx * pc_yyyy[j] * pb_y[j] - pa_xx[j] * pc_yyyyy[j] - 4.0 * pa_xy[j] * pc_xyyyy[j] - 6.0 * pa_x[j] * pc_xyyyy[j] * pb_y[j] - pc_xxyyy[j] * pa_yy[j] - 6.0 * pc_xxyyy[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxyyy[j] * pb_yy[j]);

                t_xxyy_yyy[j] += fl_s_0_0_6 * (5.0 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyy[j] + 2.0 * pa_x[j] * pc_xyyyyy[j] + 2.0 * pc_xxyyyy[j] * pa_y[j] + 3.0 * pc_xxyyyy[j] * pb_y[j]);

                t_xxyy_yyy[j] += -fl_s_0_0_7 * pc_xxyyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_37_38(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (37,38)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_yyz = primBuffer.data(150 * idx + 37);

            // Batch of Integrals (37,38)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_y, pb_yy, pb_yyz, \
                                     pb_yz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyz, \
                                     pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, \
                                     pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, \
                                     pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxyy_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_yyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_yy[j] * pb_z[j] + fl2_fx * pa_y[j] * pb_yz[j] + 0.5 * pa_xxyy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xxy[j] * fl1_fx * pb_yz[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yyz[j] + pa_xxyy[j] * pb_yyz[j]);

                t_xxyy_yyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_xx[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.25 * fl2_fx * pa_yy[j] * pc_z[j] - 0.5 * fl2_fx * pa_yy[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 2.0 * fl2_fx * pa_y[j] * pb_yz[j] - 1.5 * fl2_fx * pc_y[j] * pb_yz[j] - 0.5 * pa_xxyy[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xxy[j] * pc_y[j] * fl1_fx * pb_z[j] - 2.0 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_z[j] - 2.0 * pa_xxy[j] * fl1_fx * pb_yz[j] - 3.0 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yz[j] - pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] - 4.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] - 0.25 * fl2_fx * pb_yy[j] * pc_z[j] - 0.5 * fl2_fx * pb_yyz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yyz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_z[j] - fl1_fx * pa_yy[j] * pb_yz[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yyz[j] - pa_xxyy[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xxyy[j] * pb_yz[j] * pc_y[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_yyz[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_yyz[j]);

                t_xxyy_yyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pa_yy[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 2.0 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * fl2_fx * pc_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_yy[j] * pb_z[j] + fl2_fx * pa_y[j] * pb_yz[j] + 0.5 * pa_xxyy[j] * fl1_fx * pc_z[j] + 3.0 * pa_xxy[j] * pc_yz[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_y[j] * fl1_fx * pb_z[j] + 2.0 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_z[j] + 3.0 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yz[j] + pa_xyy[j] * pc_xz[j] * fl1_fx + pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] + 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] + 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] + 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] + 0.5 * fl2_fx * pb_yy[j] * pc_z[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] + pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] + fl1_fx * pa_yy[j] * pb_y[j] * pc_yz[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_z[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] + 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_z[j] + fl1_fx * pa_yy[j] * pb_yz[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_yyz[j] + 2.0 * pa_xxyy[j] * pb_y[j] * pc_yz[j] + pa_xxyy[j] * pc_yy[j] * pb_z[j] + 2.0 * pa_xxy[j] * pc_yz[j] * pb_yy[j] + 4.0 * pa_xxy[j] * pc_yy[j] * pb_yz[j] + pa_xx[j] * pc_yy[j] * pb_yyz[j] + 2.0 * pa_xyy[j] * pc_xz[j] * pb_yy[j] + 4.0 * pa_xyy[j] * pc_xy[j] * pb_yz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_yyz[j] + pc_xx[j] * pa_yy[j] * pb_yyz[j]);

                t_xxyy_yyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * pc_xx[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yy[j] * pb_z[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 0.25 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_yz[j] - 3.0 * pa_xxy[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] - pa_xyy[j] * pc_xz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 4.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxz[j] * pa_yy[j] * fl1_fx - 0.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] - 0.25 * fl2_fx * pb_yy[j] * pc_z[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yyz[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] - fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_yy[j] - fl1_fx * pc_yyy[j] * pb_yz[j] - fl1_fx * pa_yy[j] * pb_y[j] * pc_yz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_z[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] - 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_yyz[j] - pa_xxyy[j] * pc_yyz[j] - 4.0 * pa_xxy[j] * pc_yyz[j] * pb_y[j] - 2.0 * pa_xxy[j] * pc_yyy[j] * pb_z[j] - pa_xx[j] * pc_yyz[j] * pb_yy[j] - 2.0 * pa_xx[j] * pc_yyy[j] * pb_yz[j] - 4.0 * pa_xyy[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xyy[j] * pc_xyy[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_yy[j] - 8.0 * pa_xy[j] * pc_xyy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_yyz[j] - pc_xxz[j] * pa_yy[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_yy[j] * pb_yz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_yyz[j]);

                t_xxyy_yyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_y[j] * pc_yyyz[j] + fl1_fx * pc_yyyz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yyz[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] + fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_yy[j] + fl1_fx * pc_yyy[j] * pb_yz[j] + 2.0 * pa_xxy[j] * pc_yyyz[j] + 2.0 * pa_xx[j] * pc_yyyz[j] * pb_y[j] + pa_xx[j] * pc_yyyy[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_xyyz[j] + 8.0 * pa_xy[j] * pc_xyyz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_xyyy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_xyyy[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_yy[j] * pb_y[j] + pc_xxyy[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_yy[j] + 4.0 * pc_xxyy[j] * pa_y[j] * pb_yz[j] + pc_xxyy[j] * pb_yyz[j]);

                t_xxyy_yyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pc_yyz[j] - 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyyz[j] - fl1_fx * pa_y[j] * pc_yyyz[j] - fl1_fx * pc_yyyz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] - pa_xx[j] * pc_yyyyz[j] - 4.0 * pa_xy[j] * pc_xyyyz[j] - 4.0 * pa_x[j] * pc_xyyyz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyyyy[j] * pb_z[j] - pc_xxyyz[j] * pa_yy[j] - 4.0 * pc_xxyyz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyyy[j] * pa_y[j] * pb_z[j] - pc_xxyyz[j] * pb_yy[j] - 2.0 * pc_xxyyy[j] * pb_yz[j]);

                t_xxyy_yyz[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + 2.0 * pa_x[j] * pc_xyyyyz[j] + 2.0 * pc_xxyyyz[j] * pa_y[j] + 2.0 * pc_xxyyyz[j] * pb_y[j] + pc_xxyyyy[j] * pb_z[j]);

                t_xxyy_yyz[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_38_39(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (38,39)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_yzz = primBuffer.data(150 * idx + 38);

            // Batch of Integrals (38,39)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_y, pb_yz, pb_yzz, \
                                     pb_z, pb_zz, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyyzz, \
                                     pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyy, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyy_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_yzz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_y[j] + 0.5 * pa_xxy[j] * fl2_fx + 0.125 * fl3_fx * pb_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pa_yy[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xxyy[j] * pb_y[j] * fl1_fx + pa_xxy[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yzz[j] + pa_xxyy[j] * pb_yzz[j]);

                t_xxyy_yzz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - pa_xy[j] * pc_x[j] * fl2_fx - 0.375 * fl3_fx * pb_y[j] - 0.5 * pa_xx[j] * fl2_fx * pb_y[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.5 * fl2_fx * pa_yy[j] * pb_y[j] - 0.25 * fl2_fx * pa_yy[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - fl2_fx * pa_y[j] * pb_zz[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xxyy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xxyy[j] * pc_y[j] * fl1_fx - pa_xxy[j] * pc_y[j] * pb_y[j] * fl1_fx - 2.0 * pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] - pa_xxy[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] - pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx - 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] - 0.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.5 * fl2_fx * pb_yzz[j] - pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yzz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] - fl1_fx * pa_yy[j] * pb_yz[j] * pc_z[j] - 0.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_zz[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_yzz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yzz[j] - 2.0 * pa_xxyy[j] * pb_yz[j] * pc_z[j] - pa_xxyy[j] * pc_y[j] * pb_zz[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_yzz[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_yzz[j]);

                t_xxyy_yzz[j] += fl_s_0_0_2 * (0.75 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.5 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 2.0 * pa_xy[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.5 * pc_xx[j] * pa_y[j] * fl2_fx + 0.375 * fl3_fx * pb_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 0.25 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pa_yy[j] * pc_y[j] + fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.5 * fl2_fx * pa_y[j] * pc_zz[j] + 2.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.25 * fl2_fx * pa_yy[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xxyy[j] * pc_y[j] * fl1_fx + pa_xxy[j] * pc_y[j] * pb_y[j] * fl1_fx + pa_xxy[j] * pc_yy[j] * fl1_fx + pa_xxy[j] * fl1_fx * pc_zz[j] + 2.0 * pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] + 0.5 * pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx + 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] + pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx + pa_xyy[j] * pc_xy[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx + 4.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 0.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx + pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_y[j] * pc_zz[j] + fl2_fx * pb_yz[j] * pc_z[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] + pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] + 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_zz[j] + fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] + 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] + fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_yzz[j] + fl1_fx * pa_yy[j] * pb_yz[j] * pc_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_zz[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_yzz[j] + pa_xxyy[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xxyy[j] * pc_yz[j] * pb_z[j] + 4.0 * pa_xxy[j] * pc_yz[j] * pb_yz[j] + 2.0 * pa_xxy[j] * pc_yy[j] * pb_zz[j] + pa_xx[j] * pc_yy[j] * pb_yzz[j] + 4.0 * pa_xyy[j] * pc_xz[j] * pb_yz[j] + 2.0 * pa_xyy[j] * pc_xy[j] * pb_zz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_yzz[j] + pc_xx[j] * pa_yy[j] * pb_yzz[j]);

                t_xxyy_yzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.25 * fl3_fx * pa_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 0.125 * fl3_fx * pb_y[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.5 * pc_xx[j] * fl2_fx * pb_y[j] - fl2_fx * pa_y[j] * pc_yy[j] - fl2_fx * pa_y[j] * pc_zz[j] - 0.5 * fl2_fx * pc_yy[j] * pb_y[j] - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pa_yy[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - pa_xxy[j] * pc_yy[j] * fl1_fx - pa_xxy[j] * fl1_fx * pc_zz[j] - 0.5 * pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xyy[j] * pc_xy[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xzz[j] * fl1_fx - 4.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_yy[j] * fl1_fx - pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx - 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 0.5 * fl2_fx * pb_y[j] * pc_zz[j] - 0.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] - pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - pc_xxz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yzz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] - fl1_fx * pc_yyz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_zz[j] - fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] - 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] - fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_yzz[j] - pa_xxyy[j] * pc_yzz[j] - 2.0 * pa_xxy[j] * pc_yzz[j] * pb_y[j] - 4.0 * pa_xxy[j] * pc_yyz[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_yyz[j] * pb_yz[j] - pa_xx[j] * pc_yyy[j] * pb_zz[j] - 2.0 * pa_xyy[j] * pc_xzz[j] * pb_y[j] - 4.0 * pa_xyy[j] * pc_xyz[j] * pb_z[j] - 8.0 * pa_xy[j] * pc_xyz[j] * pb_yz[j] - 4.0 * pa_xy[j] * pc_xyy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_yzz[j] - 2.0 * pc_xxz[j] * pa_yy[j] * pb_yz[j] - pc_xxy[j] * pa_yy[j] * pb_zz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_yzz[j]);

                t_xxyy_yzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.5 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pc_yyy[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.5 * fl2_fx * pa_y[j] * pc_zz[j] + 0.25 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xzz[j] * fl1_fx + pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx + pa_x[j] * pc_xyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_yy[j] * fl1_fx + pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx + pc_xxyy[j] * pa_y[j] * fl1_fx + pc_xxzz[j] * pa_y[j] * fl1_fx + 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxyy[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_y[j] * pc_zz[j] + pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxzz[j] * fl1_fx * pb_y[j] + pc_xxz[j] * fl1_fx * pb_yz[j] + fl1_fx * pa_y[j] * pc_yyzz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_y[j] + fl1_fx * pc_yyyz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yzz[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] + fl1_fx * pc_yyz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] + 2.0 * pa_xxy[j] * pc_yyzz[j] + pa_xx[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xx[j] * pc_yyyz[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_xyzz[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_y[j] + 8.0 * pa_xy[j] * pc_xyyz[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_yz[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_zz[j] + pc_xxzz[j] * pa_yy[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_yy[j] * pb_z[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_yz[j] + 2.0 * pc_xxyy[j] * pa_y[j] * pb_zz[j] + pc_xxyy[j] * pb_yzz[j]);

                t_xxyy_yzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pc_yzz[j] - pa_x[j] * pc_xyyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - pc_xxyy[j] * pa_y[j] * fl1_fx - pc_xxzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyzz[j] - fl1_fx * pa_y[j] * pc_yyzz[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_y[j] - fl1_fx * pc_yyyz[j] * pb_z[j] - pa_xx[j] * pc_yyyzz[j] - 4.0 * pa_xy[j] * pc_xyyzz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xyyyz[j] * pb_z[j] - pc_xxyzz[j] * pa_yy[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_y[j] - 4.0 * pc_xxyyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxyyz[j] * pb_yz[j] - pc_xxyyy[j] * pb_zz[j]);

                t_xxyy_yzz[j] += fl_s_0_0_6 * (0.5 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 2.0 * pa_x[j] * pc_xyyyzz[j] + 2.0 * pc_xxyyzz[j] * pa_y[j] + pc_xxyyzz[j] * pb_y[j] + 2.0 * pc_xxyyyz[j] * pb_z[j]);

                t_xxyy_yzz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_39_40(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (39,40)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xyy = paDistances.data(34 * idx + 12);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyy = paDistances.data(34 * idx + 22);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyy_zzz = primBuffer.data(150 * idx + 39);

            // Batch of Integrals (39,40)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyy, pa_xy, pa_xyy, pa_y, pa_yy, pb_z, pb_zz, pb_zzz, \
                                     pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, \
                                     pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, \
                                     pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, \
                                     pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyy_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyy_zzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 1.5 * pa_xxyy[j] * pb_z[j] * fl1_fx + 0.25 * fl2_fx * pb_zzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_zzz[j] + pa_xxyy[j] * pb_zzz[j]);

                t_xxyy_zzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_xx[j] * fl2_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * fl2_fx * pa_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 1.5 * pa_xxyy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxyy[j] * pc_z[j] * fl1_fx - 3.0 * pa_xxy[j] * pc_y[j] * pb_z[j] * fl1_fx - 3.0 * pa_xyy[j] * pc_x[j] * pb_z[j] * fl1_fx - 0.75 * fl2_fx * pb_zz[j] * pc_z[j] - 0.5 * fl2_fx * pb_zzz[j] - 1.5 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pb_zzz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] - 1.5 * fl1_fx * pa_yy[j] * pb_zz[j] * pc_z[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_zzz[j] - 3.0 * pa_xxyy[j] * pb_zz[j] * pc_z[j] - 2.0 * pa_xxy[j] * pc_y[j] * pb_zzz[j] - 2.0 * pa_xyy[j] * pc_x[j] * pb_zzz[j]);

                t_xxyy_zzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_yy[j] * pc_z[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 1.5 * pa_xxyy[j] * pc_z[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_y[j] * pb_z[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yy[j] * pb_z[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_x[j] * pb_z[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_xz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xy[j] * pb_z[j] * fl1_fx + 1.5 * pc_xx[j] * pa_yy[j] * pb_z[j] * fl1_fx + 0.75 * fl2_fx * pb_z[j] * pc_zz[j] + 1.5 * fl2_fx * pb_zz[j] * pc_z[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] + 1.5 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] + 1.5 * fl1_fx * pa_yy[j] * pb_z[j] * pc_zz[j] + 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_yy[j] * pb_zz[j] * pc_z[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_zzz[j] + 3.0 * pa_xxyy[j] * pb_z[j] * pc_zz[j] + 6.0 * pa_xxy[j] * pc_yz[j] * pb_zz[j] + pa_xx[j] * pc_yy[j] * pb_zzz[j] + 6.0 * pa_xyy[j] * pc_xz[j] * pb_zz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_zzz[j] + pc_xx[j] * pa_yy[j] * pb_zzz[j]);

                t_xxyy_zzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pc_xx[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 3.0 * pa_xxy[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xyy[j] * pc_xz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xy[j] * pb_z[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xx[j] * pa_yy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_y[j] * pb_z[j] * fl1_fx - 0.25 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pb_z[j] * pc_zz[j] - 0.75 * fl2_fx * pb_zz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_zzz[j] - 1.5 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] - 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_yy[j] * pb_z[j] * pc_zz[j] - 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_zzz[j] - pa_xxyy[j] * pc_zzz[j] - 6.0 * pa_xxy[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_yyz[j] * pb_zz[j] - 6.0 * pa_xyy[j] * pc_xzz[j] * pb_z[j] - 12.0 * pa_xy[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_zzz[j] - 3.0 * pc_xxz[j] * pa_yy[j] * pb_zz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_zzz[j]);

                t_xxyy_zzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyy[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_y[j] * pb_z[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxyy[j] * pb_z[j] * fl1_fx + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pb_z[j] * pc_zz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_zzz[j] + pa_x[j] * pc_xzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_y[j] * pc_yzzz[j] + 1.5 * fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_zz[j] + 2.0 * pa_xxy[j] * pc_yzzz[j] + 3.0 * pa_xx[j] * pc_yyzz[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_xzzz[j] + 12.0 * pa_xy[j] * pc_xyzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xyyz[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xxyz[j] * pa_y[j] * pb_zz[j] + pc_xxyy[j] * pb_zzz[j]);

                t_xxyy_zzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 0.25 * fl2_fx * pc_zzz[j] - pa_x[j] * pc_xzzz[j] * fl1_fx - 0.5 * pc_xxzzz[j] * fl1_fx - 1.5 * pc_xxzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - fl1_fx * pa_y[j] * pc_yzzz[j] - 1.5 * fl1_fx * pc_yyzz[j] * pb_z[j] - pa_xx[j] * pc_yyzzz[j] - 4.0 * pa_xy[j] * pc_xyzzz[j] - 6.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxzzz[j] * pa_yy[j] - 6.0 * pc_xxyzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxyyz[j] * pb_zz[j]);

                t_xxyy_zzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 2.0 * pa_x[j] * pc_xyyzzz[j] + 2.0 * pc_xxyzzz[j] * pa_y[j] + 3.0 * pc_xxyyzz[j] * pb_z[j]);

                t_xxyy_zzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_40_41(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (40,41)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_xxx = primBuffer.data(150 * idx + 40);

            // Batch of Integrals (40,41)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_x, pb_xx, pb_xxx, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyz, \
                                     pc_xxxxxz, pc_xxxxy, pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyz, \
                                     pc_xxz, pc_xy, pc_xyz, pc_xz, pc_y, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxyz_xxx[j] = fl_s_0_0_0 * (1.5 * pa_xyz[j] * fl2_fx + 2.25 * fl2_fx * pa_yz[j] * pb_x[j] + 1.5 * pa_xxyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xyz[j] * fl1_fx * pb_xx[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xxx[j] + pa_xxyz[j] * pb_xxx[j]);

                t_xxyz_xxx[j] += fl_s_0_0_1 * (-3.0 * pa_xyz[j] * fl2_fx - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_yz[j] - 2.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 2.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 4.5 * fl2_fx * pa_yz[j] * pb_x[j] - 1.5 * pa_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxyz[j] * pc_x[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_y[j] * pb_x[j] * fl1_fx - 9.0 * pa_xyz[j] * pc_x[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xx[j] - 3.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_xx[j] - 3.0 * pa_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxx[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxx[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xxx[j] - 3.0 * pa_xxyz[j] * pb_xx[j] * pc_x[j] - pa_xxy[j] * pc_z[j] * pb_xxx[j] - pa_xxz[j] * pc_y[j] * pb_xxx[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_xxx[j]);

                t_xxyz_xxx[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + 3.0 * pa_xz[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 1.5 * pa_xyz[j] * fl2_fx + 7.5 * pc_x[j] * fl2_fx * pa_yz[j] + 3.75 * pc_xz[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_x[j] + 4.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + 4.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + 2.25 * fl2_fx * pa_yz[j] * pb_x[j] + 1.5 * pa_xxyz[j] * pc_x[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + 9.0 * pa_xyz[j] * pc_x[j] * pb_x[j] * fl1_fx + 6.0 * pa_xyz[j] * pc_xx[j] * fl1_fx + 9.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + 9.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] + 3.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xx[j] + 3.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_xx[j] + 9.0 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xx[j] + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] + 4.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xxx[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxx[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxx[j] + 3.0 * pa_xxyz[j] * pb_x[j] * pc_xx[j] + 3.0 * pa_xxy[j] * pc_xz[j] * pb_xx[j] + 3.0 * pa_xxz[j] * pc_xy[j] * pb_xx[j] + pa_xx[j] * pc_yz[j] * pb_xxx[j] + 6.0 * pa_xyz[j] * pc_xx[j] * pb_xx[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xxx[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xxx[j] + pc_xx[j] * pa_yz[j] * pb_xxx[j]);

                t_xxyz_xxx[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 7.5 * pc_xz[j] * fl2_fx * pa_y[j] - 7.5 * pc_xy[j] * fl2_fx * pa_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 3.75 * pc_x[j] * fl2_fx * pa_yz[j] - 4.5 * fl2_fx * pc_yz[j] * pb_x[j] - 2.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 2.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 6.0 * pa_xyz[j] * pc_xx[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] - 9.0 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_yz[j] * fl1_fx - 9.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xx[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xxx[j] - pa_xxyz[j] * pc_xxx[j] - 3.0 * pa_xxy[j] * pc_xxz[j] * pb_x[j] - 3.0 * pa_xxz[j] * pc_xxy[j] * pb_x[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_xyz[j] * pc_xxx[j] * pb_x[j] - 6.0 * pa_xy[j] * pc_xxz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxy[j] * pb_xx[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_yz[j] * pb_xx[j] - pc_xxz[j] * pa_y[j] * pb_xxx[j] - pc_xxy[j] * pa_z[j] * pb_xxx[j]);

                t_xxyz_xxx[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xxy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_yz[j] * fl1_fx + 9.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx + 9.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx + 9.0 * pc_xxyz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + pa_xxy[j] * pc_xxxz[j] + pa_xxz[j] * pc_xxxy[j] + 3.0 * pa_xx[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_xyz[j] * pc_xxxx[j] + 6.0 * pa_xy[j] * pc_xxxz[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xxxy[j] * pb_x[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_yz[j] * pb_x[j] + 3.0 * pc_xxxz[j] * pa_y[j] * pb_xx[j] + 3.0 * pc_xxxy[j] * pa_z[j] * pb_xx[j] + pc_xxyz[j] * pb_xxx[j]);

                t_xxyz_xxx[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx - 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx - 9.0 * pc_xxyz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - pa_xx[j] * pc_xxxyz[j] - 2.0 * pa_xy[j] * pc_xxxxz[j] - 2.0 * pa_xz[j] * pc_xxxxy[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - pc_xxxxx[j] * pa_yz[j] - 3.0 * pc_xxxxz[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxxy[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxxyz[j] * pb_xx[j]);

                t_xxyz_xxx[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxyz[j] + pc_xxxxxz[j] * pa_y[j] + pc_xxxxxy[j] * pa_z[j] + 3.0 * pc_xxxxyz[j] * pb_x[j]);

                t_xxyz_xxx[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_41_42(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (41,42)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_xxy = primBuffer.data(150 * idx + 41);

            // Batch of Integrals (41,42)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_x, pb_xx, pb_xxy, pb_xy, pb_y, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, \
                                     pc_xxxxyyz, pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyz, pc_xxxz, \
                                     pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xz, \
                                     pc_y, pc_yy, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xxyz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyz_xxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.25 * pa_xxz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_xxyz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xxz[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xxy[j] + pa_xxyz[j] * pb_xxy[j]);

                t_xxyz_xxy[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pa_z[j] - 0.5 * pa_xxz[j] * fl2_fx - 0.25 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 2.0 * pa_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 1.5 * fl2_fx * pa_yz[j] * pb_y[j] - 0.25 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * fl2_fx * pa_z[j] * pb_xx[j] - 0.5 * pa_xxyz[j] * fl1_fx * pc_y[j] - 0.5 * pa_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xxy[j] * pc_z[j] * fl1_fx * pb_y[j] - 0.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_y[j] - pa_xxz[j] * fl1_fx * pb_x[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_y[j] - pa_xz[j] * pc_x[j] * fl1_fx * pb_xx[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_y[j] - 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xy[j] - 2.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_xy[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_x[j] * fl1_fx * pa_yz[j] * pb_xy[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxy[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxy[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xxy[j] - pa_xxyz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xxyz[j] * pb_xy[j] * pc_x[j] - pa_xxy[j] * pc_z[j] * pb_xxy[j] - pa_xxz[j] * pc_y[j] * pb_xxy[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_xxy[j]);

                t_xxyz_xxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 0.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 3.0 * pa_xz[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 2.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_xxyz[j] * fl1_fx * pc_y[j] + 0.5 * pa_xxy[j] * pc_yz[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_z[j] * fl1_fx * pb_y[j] + 0.5 * pa_xxz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xxz[j] * fl1_fx * pc_xx[j] + pa_xx[j] * fl1_fx * pc_xz[j] * pb_x[j] + pa_xxz[j] * fl1_fx * pb_x[j] * pc_x[j] + 0.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xx[j] + 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 2.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + pa_xz[j] * pc_x[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_x[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_y[j] + 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xy[j] + 2.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_xy[j] + 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] + 3.0 * pc_xy[j] * fl1_fx * pa_yz[j] * pb_x[j] + 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_x[j] * fl1_fx * pa_yz[j] * pb_xy[j] + 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xx[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xxy[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxy[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxy[j] + 2.0 * pa_xxyz[j] * pb_x[j] * pc_xy[j] + pa_xxyz[j] * pc_xx[j] * pb_y[j] + pa_xxy[j] * pc_yz[j] * pb_xx[j] + 2.0 * pa_xxy[j] * pc_xz[j] * pb_xy[j] + pa_xxz[j] * pc_yy[j] * pb_xx[j] + 2.0 * pa_xxz[j] * pc_xy[j] * pb_xy[j] + pa_xx[j] * pc_yz[j] * pb_xxy[j] + 2.0 * pa_xyz[j] * pc_xy[j] * pb_xx[j] + 4.0 * pa_xyz[j] * pc_xx[j] * pb_xy[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xxy[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xxy[j] + pc_xx[j] * pa_yz[j] * pb_xxy[j]);

                t_xxyz_xxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.25 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pc_xx[j] * fl2_fx * pa_z[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pa_z[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.25 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_xxy[j] * pc_yz[j] * fl1_fx - 0.5 * pa_xxz[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxz[j] - 0.5 * pa_xxz[j] * fl1_fx * pc_xx[j] - pa_xx[j] * fl1_fx * pc_xz[j] * pb_x[j] - 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - pa_xz[j] * pc_xxx[j] * fl1_fx - 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 2.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] - 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_x[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_x[j] - 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] - 3.0 * pc_xxy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_xxx[j] * fl1_fx * pa_z[j] * pb_x[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] - 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_yz[j] * pb_x[j] - 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] - 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xx[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xxy[j] - pa_xxyz[j] * pc_xxy[j] - 2.0 * pa_xxy[j] * pc_xyz[j] * pb_x[j] - pa_xxy[j] * pc_xxz[j] * pb_y[j] - 2.0 * pa_xxz[j] * pc_xyy[j] * pb_x[j] - pa_xxz[j] * pc_xxy[j] * pb_y[j] - pa_xx[j] * pc_yyz[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xyz[j] * pb_xy[j] - 4.0 * pa_xyz[j] * pc_xxy[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xxx[j] * pb_y[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xxz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xxy[j] * pb_xy[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xxy[j] - pc_xxy[j] * pa_yz[j] * pb_xx[j] - 2.0 * pc_xxx[j] * pa_yz[j] * pb_xy[j] - pc_xxz[j] * pa_y[j] * pb_xxy[j] - pc_xxy[j] * pa_z[j] * pb_xxy[j]);

                t_xxyz_xxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xxz[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + pa_x[j] * pc_xxxz[j] * fl1_fx + pa_xz[j] * pc_xxx[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] + 3.0 * pc_xxy[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxx[j] * fl1_fx * pa_z[j] + pc_xxxz[j] * fl1_fx * pb_x[j] + pc_xxx[j] * fl1_fx * pa_z[j] * pb_x[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] + pa_xxy[j] * pc_xxyz[j] + pa_xxz[j] * pc_xxyy[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_x[j] + pa_xx[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xyz[j] * pc_xxxy[j] + 4.0 * pa_xy[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxxz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xxyy[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxxy[j] * pb_y[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxyz[j] * pb_xy[j] + 2.0 * pc_xxxy[j] * pa_yz[j] * pb_x[j] + pc_xxxx[j] * pa_yz[j] * pb_y[j] + pc_xxyz[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxxz[j] * pa_y[j] * pb_xy[j] + pc_xxyy[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxxy[j] * pa_z[j] * pb_xy[j] + pc_xxyz[j] * pb_xxy[j]);

                t_xxyz_xxy[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - pa_x[j] * pc_xxxz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxxxz[j] * fl1_fx - 0.5 * pc_xxxx[j] * fl1_fx * pa_z[j] - pc_xxxz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxyyz[j] - 2.0 * pa_xy[j] * pc_xxxyz[j] - 2.0 * pa_xz[j] * pc_xxxyy[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxyz[j] * pb_y[j] - pc_xxxxy[j] * pa_yz[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_x[j] - pc_xxxxz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxxyy[j] * pa_z[j] * pb_x[j] - pc_xxxxy[j] * pa_z[j] * pb_y[j] - pc_xxyyz[j] * pb_xx[j] - 2.0 * pc_xxxyz[j] * pb_xy[j]);

                t_xxyz_xxy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyyz[j] + pc_xxxxyz[j] * pa_y[j] + pc_xxxxyy[j] * pa_z[j] + 2.0 * pc_xxxyyz[j] * pb_x[j] + pc_xxxxyz[j] * pb_y[j]);

                t_xxyz_xxy[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_42_43(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (42,43)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_xxz = primBuffer.data(150 * idx + 42);

            // Batch of Integrals (42,43)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_x, pb_xx, pb_xxz, pb_xz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyz, \
                                     pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, \
                                     pc_xxy, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyz, pc_xyzz, pc_xz, pc_xzz, \
                                     pc_y, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xxyz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyz_xxz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.25 * pa_xxy[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_xx[j] + 0.5 * pa_xxyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xxz[j] + pa_xxyz[j] * pb_xxz[j]);

                t_xxyz_xxz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.5 * pa_xxy[j] * fl2_fx - 0.25 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 2.0 * pa_xy[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 1.5 * fl2_fx * pa_yz[j] * pb_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_xx[j] - 0.25 * fl2_fx * pc_y[j] * pb_xx[j] - 0.5 * pa_xxyz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xxy[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_xxy[j] * fl1_fx * pb_x[j] * pc_x[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_xx[j] - 0.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xx[j] - 3.0 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_x[j] * fl1_fx * pb_xx[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xz[j] - 2.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_xz[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_x[j] * fl1_fx * pa_yz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xxz[j] - pa_xxyz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xxyz[j] * pb_xz[j] * pc_x[j] - pa_xxy[j] * pc_z[j] * pb_xxz[j] - pa_xxz[j] * pc_y[j] * pb_xxz[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_xxz[j]);

                t_xxyz_xxz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pa_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 0.5 * pa_xx[j] * pc_y[j] * fl2_fx + 3.0 * pa_xy[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 2.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pa_yz[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.5 * fl2_fx * pc_y[j] * pb_xx[j] + 0.25 * fl2_fx * pa_y[j] * pb_xx[j] + 0.5 * pa_xxyz[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxy[j] * pc_zz[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxy[j] * fl1_fx * pc_xx[j] + pa_xxy[j] * fl1_fx * pb_x[j] * pc_x[j] + 0.5 * pa_xxz[j] * pc_yz[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] + 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_x[j] + pa_xy[j] * pc_x[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_x[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_z[j] + 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_xz[j] + 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xz[j] * fl1_fx * pa_yz[j] * pb_x[j] + 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xz[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] + 3.0 * pc_x[j] * fl1_fx * pa_yz[j] * pb_xz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xx[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxz[j] + 2.0 * pa_xxyz[j] * pb_x[j] * pc_xz[j] + pa_xxyz[j] * pc_xx[j] * pb_z[j] + pa_xxy[j] * pc_zz[j] * pb_xx[j] + 2.0 * pa_xxy[j] * pc_xz[j] * pb_xz[j] + pa_xxz[j] * pc_yz[j] * pb_xx[j] + 2.0 * pa_xxz[j] * pc_xy[j] * pb_xz[j] + pa_xx[j] * pc_yz[j] * pb_xxz[j] + 2.0 * pa_xyz[j] * pc_xz[j] * pb_xx[j] + 4.0 * pa_xyz[j] * pc_xx[j] * pb_xz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xxz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xxz[j] + pc_xx[j] * pa_yz[j] * pb_xxz[j]);

                t_xxyz_xxz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.25 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 3.0 * pc_xx[j] * pa_y[j] * fl2_fx - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pa_y[j] * pc_zz[j] - 1.5 * fl2_fx * pc_yz[j] * pa_z[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_xx[j] - 0.5 * pa_xxy[j] * pc_zz[j] * fl1_fx - 0.5 * pa_xxy[j] * fl1_fx * pc_xx[j] - 0.5 * pa_xxz[j] * pc_yz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - pa_xx[j] * pc_xy[j] * fl1_fx * pb_x[j] - 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_xxx[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_x[j] - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] - 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_x[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_x[j] - 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_yz[j] * pb_x[j] - 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xz[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xx[j] - 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xx[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xxz[j] - pa_xxyz[j] * pc_xxz[j] - 2.0 * pa_xxy[j] * pc_xzz[j] * pb_x[j] - pa_xxy[j] * pc_xxz[j] * pb_z[j] - 2.0 * pa_xxz[j] * pc_xyz[j] * pb_x[j] - pa_xxz[j] * pc_xxy[j] * pb_z[j] - pa_xx[j] * pc_yzz[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xyz[j] * pb_xz[j] - 4.0 * pa_xyz[j] * pc_xxz[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xxx[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xxz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xxy[j] * pb_xz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xxz[j] - pc_xxz[j] * pa_yz[j] * pb_xx[j] - 2.0 * pc_xxx[j] * pa_yz[j] * pb_xz[j] - pc_xxz[j] * pa_y[j] * pb_xxz[j] - pc_xxy[j] * pa_z[j] * pb_xxz[j]);

                t_xxyz_xxz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx + pa_xy[j] * pc_xxx[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] + 3.0 * pc_xxz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + pc_xxxy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] + pa_xxy[j] * pc_xxzz[j] + pa_xxz[j] * pc_xxyz[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_x[j] + pa_xx[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_xxxz[j] + 4.0 * pa_xy[j] * pc_xxzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxxz[j] * pb_z[j] + 4.0 * pa_xz[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxxy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxyz[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_yz[j] * pb_x[j] + pc_xxxx[j] * pa_yz[j] * pb_z[j] + pc_xxzz[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxxz[j] * pa_y[j] * pb_xz[j] + pc_xxyz[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxxy[j] * pa_z[j] * pb_xz[j] + pc_xxyz[j] * pb_xxz[j]);

                t_xxyz_xxz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - pa_x[j] * pc_xxxy[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxxy[j] * fl1_fx - pc_xxxy[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxyzz[j] - 2.0 * pa_xy[j] * pc_xxxzz[j] - 2.0 * pa_xz[j] * pc_xxxyz[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxyz[j] * pb_z[j] - pc_xxxxz[j] * pa_yz[j] - 2.0 * pc_xxxzz[j] * pa_y[j] * pb_x[j] - pc_xxxxz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_x[j] - pc_xxxxy[j] * pa_z[j] * pb_z[j] - pc_xxyzz[j] * pb_xx[j] - 2.0 * pc_xxxyz[j] * pb_xz[j]);

                t_xxyz_xxz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyzz[j] + pc_xxxxzz[j] * pa_y[j] + pc_xxxxyz[j] * pa_z[j] + 2.0 * pc_xxxyzz[j] * pb_x[j] + pc_xxxxyz[j] * pb_z[j]);

                t_xxyz_xxz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_43_44(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (43,44)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_xyy = primBuffer.data(150 * idx + 43);

            // Batch of Integrals (43,44)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_x, pb_xy, pb_xyy, pb_y, pb_yy, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, \
                                     pc_xxxyyyz, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, \
                                     pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, \
                                     pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxyz_xyy[j] = fl_s_0_0_0 * (0.5 * pa_xyz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pa_yz[j] * pb_x[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xxyz[j] * pb_x[j] * fl1_fx + pa_xxz[j] * fl1_fx * pb_xy[j] + pa_xyz[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xyy[j] + pa_xxyz[j] * pb_xyy[j]);

                t_xxyz_xyy[j] += fl_s_0_0_1 * (-pa_xyz[j] * fl2_fx - 0.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 2.0 * pa_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_yz[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * fl2_fx * pa_yz[j] * pb_x[j] - 0.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.5 * fl2_fx * pc_z[j] * pb_xy[j] - fl2_fx * pa_z[j] * pb_xy[j] - 0.5 * pa_xxyz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxyz[j] * pc_x[j] * fl1_fx - 0.5 * pa_xxy[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_y[j] * pb_x[j] * fl1_fx - pa_xxz[j] * fl1_fx * pc_x[j] * pb_y[j] - pa_xx[j] * fl1_fx * pc_z[j] * pb_xy[j] - pa_xxz[j] * fl1_fx * pb_xy[j] - pa_xyz[j] * pc_x[j] * pb_x[j] * fl1_fx - 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xy[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_y[j] - pa_xy[j] * fl1_fx * pc_z[j] * pb_yy[j] - pa_xz[j] * fl1_fx * pc_y[j] * pb_yy[j] - pa_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_yy[j] - fl1_fx * pa_yz[j] * pb_xy[j] * pc_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xyy[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xyy[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xyy[j] - 2.0 * pa_xxyz[j] * pb_xy[j] * pc_y[j] - pa_xxyz[j] * pc_x[j] * pb_yy[j] - pa_xxy[j] * pc_z[j] * pb_xyy[j] - pa_xxz[j] * pc_y[j] * pb_xyy[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_xyy[j]);

                t_xxyz_xyy[j] += fl_s_0_0_2 * (pa_xy[j] * fl2_fx * pc_z[j] + 3.0 * pa_xz[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 2.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 0.5 * pa_xyz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pa_yz[j] + 0.75 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + fl2_fx * pc_z[j] * pb_xy[j] + 0.25 * fl2_fx * pa_yz[j] * pb_x[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xxyz[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_z[j] * pb_x[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + pa_xx[j] * fl1_fx * pc_xz[j] * pb_y[j] + pa_xxz[j] * fl1_fx * pc_x[j] * pb_y[j] + pa_xx[j] * fl1_fx * pc_z[j] * pb_xy[j] + pa_xyz[j] * pc_x[j] * pb_x[j] * fl1_fx + pa_xyz[j] * pc_xx[j] * fl1_fx + pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xy[j] + pa_xyz[j] * fl1_fx * pc_yy[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_y[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_y[j] + pa_xy[j] * fl1_fx * pc_z[j] * pb_yy[j] + pa_xz[j] * fl1_fx * pc_y[j] * pb_yy[j] + 0.5 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx + pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_yz[j] * pb_y[j] + 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yy[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_yy[j] + 0.5 * fl1_fx * pa_yz[j] * pb_x[j] * pc_yy[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] + fl1_fx * pc_yy[j] * pa_z[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xyy[j] + fl1_fx * pa_yz[j] * pb_xy[j] * pc_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xyy[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xyy[j] + pa_xxyz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xxyz[j] * pc_xy[j] * pb_y[j] + 2.0 * pa_xxy[j] * pc_yz[j] * pb_xy[j] + pa_xxy[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_xxz[j] * pc_yy[j] * pb_xy[j] + pa_xxz[j] * pc_xy[j] * pb_yy[j] + pa_xx[j] * pc_yz[j] * pb_xyy[j] + 4.0 * pa_xyz[j] * pc_xy[j] * pb_xy[j] + 2.0 * pa_xyz[j] * pc_xx[j] * pb_yy[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xyy[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xyy[j] + pc_xx[j] * pa_yz[j] * pb_xyy[j]);

                t_xxyz_xyy[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 0.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pc_xz[j] * fl2_fx * pa_y[j] - 4.5 * pc_xy[j] * fl2_fx * pa_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_yz[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - pa_xx[j] * fl1_fx * pc_xz[j] * pb_y[j] - pa_xyz[j] * pc_xx[j] * fl1_fx - pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - pa_xy[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - pa_xy[j] * fl1_fx * pc_yyz[j] - pa_xz[j] * fl1_fx * pc_yyy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] - pa_xyz[j] * fl1_fx * pc_yy[j] - 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_y[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] - 0.5 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx - 0.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_xxx[j] * fl1_fx * pa_z[j] * pb_y[j] - pc_xxz[j] * fl1_fx * pb_xy[j] - pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] - 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_yz[j] * pb_y[j] - 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] - 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_x[j] - fl1_fx * pc_yyz[j] * pb_xy[j] - 0.5 * fl1_fx * pa_yz[j] * pb_x[j] * pc_yy[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] - fl1_fx * pc_yy[j] * pa_z[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xyy[j] - pa_xxyz[j] * pc_xyy[j] - pa_xxy[j] * pc_yyz[j] * pb_x[j] - 2.0 * pa_xxy[j] * pc_xyz[j] * pb_y[j] - pa_xxz[j] * pc_yyy[j] * pb_x[j] - 2.0 * pa_xxz[j] * pc_xyy[j] * pb_y[j] - 2.0 * pa_xx[j] * pc_yyz[j] * pb_xy[j] - pa_xx[j] * pc_xyz[j] * pb_yy[j] - 2.0 * pa_xyz[j] * pc_xyy[j] * pb_x[j] - 4.0 * pa_xyz[j] * pc_xxy[j] * pb_y[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_xxz[j] * pb_yy[j] - 4.0 * pa_xz[j] * pc_xyy[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xxy[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_yz[j] * pb_xy[j] - pc_xxx[j] * pa_yz[j] * pb_yy[j] - pc_xxz[j] * pa_y[j] * pb_xyy[j] - pc_xxy[j] * pa_z[j] * pb_xyy[j]);

                t_xxyz_xyy[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + pa_xy[j] * pc_xxz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_yyyz[j] + pa_xy[j] * fl1_fx * pc_yyz[j] + pa_xz[j] * fl1_fx * pc_yyy[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] + 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx + 0.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx + pc_xxxz[j] * fl1_fx * pb_y[j] + pc_xxx[j] * fl1_fx * pa_z[j] * pb_y[j] + pc_xxz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyyz[j] * fl1_fx * pa_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_yz[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] + 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] + 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_x[j] + fl1_fx * pc_yyz[j] * pb_xy[j] + pa_xxy[j] * pc_xyyz[j] + pa_xxz[j] * pc_xyyy[j] + pa_xx[j] * pc_yyyz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_xyz[j] * pc_xxyy[j] + 2.0 * pa_xy[j] * pc_xyyz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyy[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxyy[j] * pb_y[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xxyz[j] * pb_yy[j] + pc_xxyy[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_xy[j] + pc_xxxz[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xxyy[j] * pa_z[j] * pb_xy[j] + pc_xxxy[j] * pa_z[j] * pb_yy[j] + pc_xxyz[j] * pb_xyy[j]);

                t_xxyz_xyy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyyz[j] - 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - pc_xxxz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pa_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] - pa_xx[j] * pc_xyyyz[j] - 2.0 * pa_xy[j] * pc_xxyyz[j] - 2.0 * pa_xz[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - pc_xxxyy[j] * pa_yz[j] - pc_xxyyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_y[j] - pc_xxyyy[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyy[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pb_xy[j] - pc_xxxyz[j] * pb_yy[j]);

                t_xxyz_xyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyyz[j] + pc_xxxyyz[j] * pa_y[j] + pc_xxxyyy[j] * pa_z[j] + pc_xxyyyz[j] * pb_x[j] + 2.0 * pc_xxxyyz[j] * pb_y[j]);

                t_xxyz_xyy[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_44_45(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (44,45)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_xyz = primBuffer.data(150 * idx + 44);

            // Batch of Integrals (44,45)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_x, pb_xy, pb_xyz, pb_xz, pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, \
                                     pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, \
                                     pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, \
                                     pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, \
                                     pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxyz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyz_xyz[j] = fl_s_0_0_0 * (0.25 * pa_x[j] * fl3_fx + 0.125 * fl3_fx * pb_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_xy[j] * fl2_fx * pb_y[j] + 0.5 * pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xxy[j] * fl1_fx * pb_xy[j] + 0.5 * pa_xxz[j] * fl1_fx * pb_xz[j] + pa_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xyz[j] + pa_xxyz[j] * pb_xyz[j]);

                t_xxyz_xyz[j] += fl_s_0_0_1 * (-0.75 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.375 * fl3_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - 0.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 0.5 * pa_xy[j] * fl2_fx * pc_y[j] - pa_xy[j] * fl2_fx * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 0.5 * pa_xz[j] * fl2_fx * pc_z[j] - 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - pa_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_xy[j] - 0.25 * fl2_fx * pc_y[j] * pb_xy[j] - 0.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_y[j] - 0.5 * pa_xxy[j] * fl1_fx * pc_x[j] * pb_y[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xy[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_z[j] - 0.5 * pa_xxz[j] * fl1_fx * pc_x[j] * pb_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_xz[j] - pa_xy[j] * pc_x[j] * fl1_fx * pb_xy[j] - pa_xz[j] * pc_x[j] * fl1_fx * pb_xz[j] - pa_xyz[j] * fl1_fx * pb_y[j] * pc_z[j] - pa_xyz[j] * fl1_fx * pc_y[j] * pb_z[j] - pa_xy[j] * fl1_fx * pc_z[j] * pb_yz[j] - pa_xz[j] * fl1_fx * pc_y[j] * pb_yz[j] - pa_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xy[j] * pc_z[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xz[j] * pc_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xyz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xyz[j] - pa_xxyz[j] * pb_xy[j] * pc_z[j] - pa_xxyz[j] * pb_xz[j] * pc_y[j] - pa_xxyz[j] * pc_x[j] * pb_yz[j] - pa_xxy[j] * pc_z[j] * pb_xyz[j] - pa_xxz[j] * pc_y[j] * pb_xyz[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_xyz[j]);

                t_xxyz_xyz[j] += fl_s_0_0_2 * (0.75 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.375 * fl3_fx * pb_x[j] + 0.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + pa_xy[j] * fl2_fx * pc_y[j] + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + pa_xz[j] * fl2_fx * pc_z[j] + pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.5 * pa_xy[j] * fl2_fx * pb_y[j] + 0.5 * pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pa_y[j] + 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] + 0.25 * fl2_fx * pc_yy[j] * pb_x[j] + 0.5 * fl2_fx * pc_y[j] * pb_xy[j] + 0.25 * fl2_fx * pc_zz[j] * pb_x[j] + 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 0.5 * fl2_fx * pc_z[j] * pb_xz[j] + 0.25 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xxy[j] * fl1_fx * pc_xy[j] + 0.5 * pa_xxy[j] * fl1_fx * pb_x[j] * pc_y[j] + 0.5 * pa_xxy[j] * fl1_fx * pc_x[j] * pb_y[j] + 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_x[j] + 0.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_xy[j] + 0.5 * pa_xxz[j] * fl1_fx * pc_xz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_x[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xz[j] * pb_z[j] + 0.5 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_z[j] + 0.5 * pa_xxz[j] * fl1_fx * pc_x[j] * pb_z[j] + 0.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_xz[j] + pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] + pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] + pa_xy[j] * pc_x[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + pa_xz[j] * pc_xz[j] * fl1_fx * pb_x[j] + pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + pa_xz[j] * pc_x[j] * fl1_fx * pb_xz[j] + pa_xyz[j] * fl1_fx * pc_yz[j] + pa_xy[j] * fl1_fx * pc_zz[j] * pb_y[j] + pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] + pa_xz[j] * fl1_fx * pc_yz[j] * pb_y[j] + pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] + pa_xyz[j] * fl1_fx * pb_y[j] * pc_z[j] + pa_xyz[j] * fl1_fx * pc_y[j] * pb_z[j] + pa_xy[j] * fl1_fx * pc_z[j] * pb_yz[j] + pa_xz[j] * fl1_fx * pc_y[j] * pb_yz[j] + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_yz[j] * pb_y[j] + 1.5 * pc_xy[j] * fl1_fx * pa_yz[j] * pb_z[j] + 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_yz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_x[j] * pc_yz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xy[j] + 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xy[j] * pc_z[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xz[j] * pc_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xyz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xyz[j] + pa_xxyz[j] * pb_x[j] * pc_yz[j] + pa_xxyz[j] * pc_xz[j] * pb_y[j] + pa_xxyz[j] * pc_xy[j] * pb_z[j] + pa_xxy[j] * pc_zz[j] * pb_xy[j] + pa_xxy[j] * pc_yz[j] * pb_xz[j] + pa_xxy[j] * pc_xz[j] * pb_yz[j] + pa_xxz[j] * pc_yz[j] * pb_xy[j] + pa_xxz[j] * pc_yy[j] * pb_xz[j] + pa_xxz[j] * pc_xy[j] * pb_yz[j] + pa_xx[j] * pc_yz[j] * pb_xyz[j] + 2.0 * pa_xyz[j] * pc_xz[j] * pb_xy[j] + 2.0 * pa_xyz[j] * pc_xy[j] * pb_xz[j] + 2.0 * pa_xyz[j] * pc_xx[j] * pb_yz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xyz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xyz[j] + pc_xx[j] * pa_yz[j] * pb_xyz[j]);

                t_xxyz_xyz[j] += fl_s_0_0_3 * (-0.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.125 * fl3_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - pa_x[j] * pc_xx[j] * fl2_fx - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_yy[j] - pa_x[j] * fl2_fx * pc_zz[j] - 0.5 * pa_xy[j] * fl2_fx * pc_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 0.5 * pa_xz[j] * fl2_fx * pc_z[j] - 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.25 * pc_xxx[j] * fl2_fx - 0.5 * pc_xx[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pa_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.5 * fl2_fx * pc_yy[j] * pb_x[j] - 0.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 0.25 * fl2_fx * pc_y[j] * pb_xy[j] - 0.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xxy[j] * fl1_fx * pc_xy[j] - 0.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_x[j] - 0.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xzz[j] - 0.5 * pa_xxz[j] * fl1_fx * pc_xz[j] - 0.5 * pa_xx[j] * fl1_fx * pc_zz[j] * pb_x[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xz[j] * pb_z[j] - pa_xy[j] * pc_xxy[j] * fl1_fx - pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] - pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - pa_xz[j] * pc_xxz[j] * fl1_fx - pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_xz[j] * fl1_fx * pb_x[j] - pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - pa_xy[j] * fl1_fx * pc_yzz[j] - pa_xz[j] * fl1_fx * pc_yyz[j] - pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] - pa_xyz[j] * fl1_fx * pc_yz[j] - pa_xy[j] * fl1_fx * pc_zz[j] * pb_y[j] - pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] - pa_xz[j] * fl1_fx * pc_yz[j] * pb_y[j] - pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] - 0.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] - 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_z[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_yz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_y[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_yz[j] * pb_y[j] - 1.5 * pc_xy[j] * fl1_fx * pa_yz[j] * pb_z[j] - 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_x[j] * pc_yz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xy[j] - 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xyz[j] - pa_xxyz[j] * pc_xyz[j] - pa_xxy[j] * pc_yzz[j] * pb_x[j] - pa_xxy[j] * pc_xzz[j] * pb_y[j] - pa_xxy[j] * pc_xyz[j] * pb_z[j] - pa_xxz[j] * pc_yyz[j] * pb_x[j] - pa_xxz[j] * pc_xyz[j] * pb_y[j] - pa_xxz[j] * pc_xyy[j] * pb_z[j] - pa_xx[j] * pc_yzz[j] * pb_xy[j] - pa_xx[j] * pc_yyz[j] * pb_xz[j] - pa_xx[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_xyz[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xxz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_xxy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xxz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xxy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xyz[j] - pc_xxz[j] * pa_yz[j] * pb_xy[j] - pc_xxy[j] * pa_yz[j] * pb_xz[j] - pc_xxx[j] * pa_yz[j] * pb_yz[j] - pc_xxz[j] * pa_y[j] * pb_xyz[j] - pc_xxy[j] * pa_z[j] * pb_xyz[j]);

                t_xxyz_xyz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pc_xxx[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xzz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_x[j] + 0.25 * fl2_fx * pc_zz[j] * pb_x[j] + 0.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xzz[j] + pa_xy[j] * pc_xxy[j] * fl1_fx + pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + pa_x[j] * pc_xxzz[j] * fl1_fx + pa_xz[j] * pc_xxz[j] * fl1_fx + pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + pa_x[j] * fl1_fx * pc_yyzz[j] + pa_xy[j] * fl1_fx * pc_yzz[j] + pa_xz[j] * fl1_fx * pc_yyz[j] + pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] + 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxxz[j] * fl1_fx * pa_z[j] + 0.5 * pc_xxzz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] + 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_z[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pa_z[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_yz[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_xz[j] + pa_xxy[j] * pc_xyzz[j] + pa_xxz[j] * pc_xyyz[j] + pa_xx[j] * pc_yyzz[j] * pb_x[j] + pa_xx[j] * pc_xyzz[j] * pb_y[j] + pa_xx[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_xxyz[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxzz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xxyy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxyz[j] * pb_yz[j] + pc_xxyz[j] * pa_yz[j] * pb_x[j] + pc_xxxz[j] * pa_yz[j] * pb_y[j] + pc_xxxy[j] * pa_yz[j] * pb_z[j] + pc_xxzz[j] * pa_y[j] * pb_xy[j] + pc_xxyz[j] * pa_y[j] * pb_xz[j] + pc_xxxz[j] * pa_y[j] * pb_yz[j] + pc_xxyz[j] * pa_z[j] * pb_xy[j] + pc_xxyy[j] * pa_z[j] * pb_xz[j] + pc_xxxy[j] * pa_z[j] * pb_yz[j] + pc_xxyz[j] * pb_xyz[j]);

                t_xxyz_xyz[j] += fl_s_0_0_5 * (-0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - pa_x[j] * pc_xxyy[j] * fl1_fx - pa_x[j] * pc_xxzz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyzz[j] - 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 0.5 * pc_xxyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxxzz[j] * fl1_fx - 0.5 * pc_xxxz[j] * fl1_fx * pa_z[j] - 0.5 * pc_xxzz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pa_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] - pa_xx[j] * pc_xyyzz[j] - 2.0 * pa_xy[j] * pc_xxyzz[j] - 2.0 * pa_xz[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxxyz[j] * pa_yz[j] - pc_xxyzz[j] * pa_y[j] * pb_x[j] - pc_xxxzz[j] * pa_y[j] * pb_y[j] - pc_xxxyz[j] * pa_y[j] * pb_z[j] - pc_xxyyz[j] * pa_z[j] * pb_x[j] - pc_xxxyz[j] * pa_z[j] * pb_y[j] - pc_xxxyy[j] * pa_z[j] * pb_z[j] - pc_xxyzz[j] * pb_xy[j] - pc_xxyyz[j] * pb_xz[j] - pc_xxxyz[j] * pb_yz[j]);

                t_xxyz_xyz[j] += fl_s_0_0_6 * (0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyzz[j] + pc_xxxyzz[j] * pa_y[j] + pc_xxxyyz[j] * pa_z[j] + pc_xxyyzz[j] * pb_x[j] + pc_xxxyzz[j] * pb_y[j] + pc_xxxyyz[j] * pb_z[j]);

                t_xxyz_xyz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_45_46(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (45,46)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_xzz = primBuffer.data(150 * idx + 45);

            // Batch of Integrals (45,46)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_x, pb_xz, pb_xzz, pb_z, pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyz, pc_xxxyzz, \
                                     pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxyz_xzz[j] = fl_s_0_0_0 * (0.5 * pa_xyz[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_yz[j] * pb_x[j] + 0.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xxyz[j] * pb_x[j] * fl1_fx + pa_xxy[j] * fl1_fx * pb_xz[j] + pa_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_xzz[j] + pa_xxyz[j] * pb_xzz[j]);

                t_xxyz_xzz[j] += fl_s_0_0_1 * (-pa_xyz[j] * fl2_fx - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 2.0 * pa_xy[j] * fl2_fx * pb_z[j] - 0.5 * pa_xz[j] * fl2_fx * pc_y[j] - pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_yz[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 0.5 * fl2_fx * pa_yz[j] * pb_x[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - fl2_fx * pa_y[j] * pb_xz[j] - 0.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.5 * fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * pa_xxyz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxyz[j] * pc_x[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_z[j] * pb_x[j] * fl1_fx - pa_xxy[j] * fl1_fx * pc_x[j] * pb_z[j] - pa_xxy[j] * fl1_fx * pb_xz[j] - 0.5 * pa_xxz[j] * pc_y[j] * pb_x[j] * fl1_fx - pa_xx[j] * pc_y[j] * fl1_fx * pb_xz[j] - pa_xyz[j] * pc_x[j] * pb_x[j] * fl1_fx - 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xz[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] - pa_xy[j] * fl1_fx * pc_z[j] * pb_zz[j] - pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] - pa_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_zz[j] - fl1_fx * pa_yz[j] * pb_xz[j] * pc_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xzz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xzz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_xzz[j] - 2.0 * pa_xxyz[j] * pb_xz[j] * pc_z[j] - pa_xxyz[j] * pc_x[j] * pb_zz[j] - pa_xxy[j] * pc_z[j] * pb_xzz[j] - pa_xxz[j] * pc_y[j] * pb_xzz[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_xzz[j]);

                t_xxyz_xzz[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + pa_xz[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 2.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.5 * pa_xyz[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_yz[j] + 2.25 * pc_xz[j] * fl2_fx * pa_y[j] + 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + 0.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + fl2_fx * pc_y[j] * pb_xz[j] + 0.25 * fl2_fx * pa_yz[j] * pb_x[j] + 0.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xxyz[j] * pc_x[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + pa_xxy[j] * fl1_fx * pc_x[j] * pb_z[j] + 0.5 * pa_xxz[j] * pc_y[j] * pb_x[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + pa_xx[j] * pc_y[j] * fl1_fx * pb_xz[j] + pa_xyz[j] * pc_x[j] * pb_x[j] * fl1_fx + pa_xyz[j] * pc_xx[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_xz[j] + pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + pa_xyz[j] * fl1_fx * pc_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_z[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] + pa_xy[j] * fl1_fx * pc_z[j] * pb_zz[j] + pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 0.5 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx + pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_yz[j] * pb_z[j] + 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_zz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_x[j] * fl1_fx * pa_yz[j] * pb_zz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_x[j] * pc_zz[j] + fl1_fx * pa_y[j] * pc_zz[j] * pb_xz[j] + fl1_fx * pc_yz[j] * pa_z[j] * pb_xz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xzz[j] + fl1_fx * pa_yz[j] * pb_xz[j] * pc_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xzz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xzz[j] + pa_xxyz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xxyz[j] * pc_xz[j] * pb_z[j] + 2.0 * pa_xxy[j] * pc_zz[j] * pb_xz[j] + pa_xxy[j] * pc_xz[j] * pb_zz[j] + 2.0 * pa_xxz[j] * pc_yz[j] * pb_xz[j] + pa_xxz[j] * pc_xy[j] * pb_zz[j] + pa_xx[j] * pc_yz[j] * pb_xzz[j] + 4.0 * pa_xyz[j] * pc_xz[j] * pb_xz[j] + 2.0 * pa_xyz[j] * pc_xx[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xzz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xzz[j] + pc_xx[j] * pa_yz[j] * pb_xzz[j]);

                t_xxyz_xzz[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 0.5 * pa_xz[j] * fl2_fx * pc_y[j] - pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pa_y[j] - 1.5 * pc_xy[j] * fl2_fx * pa_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_yz[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 0.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.5 * fl2_fx * pc_y[j] * pb_xz[j] - 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 0.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - pa_xyz[j] * pc_xx[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xxz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - pa_xz[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - pa_xy[j] * fl1_fx * pc_zzz[j] - pa_xz[j] * fl1_fx * pc_yzz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] - pa_xyz[j] * fl1_fx * pc_zz[j] - 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_z[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] - 0.5 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_xxy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_yz[j] - 3.0 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_z[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_yz[j] * pb_z[j] - 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_x[j] - fl1_fx * pc_yzz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_x[j] * pc_zz[j] - fl1_fx * pa_y[j] * pc_zz[j] * pb_xz[j] - fl1_fx * pc_yz[j] * pa_z[j] * pb_xz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xzz[j] - pa_xxyz[j] * pc_xzz[j] - pa_xxy[j] * pc_zzz[j] * pb_x[j] - 2.0 * pa_xxy[j] * pc_xzz[j] * pb_z[j] - pa_xxz[j] * pc_yzz[j] * pb_x[j] - 2.0 * pa_xxz[j] * pc_xyz[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_yzz[j] * pb_xz[j] - pa_xx[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_xyz[j] * pc_xzz[j] * pb_x[j] - 4.0 * pa_xyz[j] * pc_xxz[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_xzz[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xxz[j] * pb_zz[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xxy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xzz[j] - 2.0 * pc_xxz[j] * pa_yz[j] * pb_xz[j] - pc_xxx[j] * pa_yz[j] * pb_zz[j] - pc_xxz[j] * pa_y[j] * pb_xzz[j] - pc_xxy[j] * pa_z[j] * pb_xzz[j]);

                t_xxyz_xzz[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pa_y[j] + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xxz[j] * fl1_fx + pa_xz[j] * pc_xxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + pa_x[j] * fl1_fx * pc_yzzz[j] + pa_xy[j] * fl1_fx * pc_zzz[j] + pa_xz[j] * fl1_fx * pc_yzz[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] + 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx + pc_xxxy[j] * fl1_fx * pb_z[j] + pc_xxy[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xzzz[j] * fl1_fx * pa_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_yz[j] + 3.0 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_x[j] + fl1_fx * pc_yzz[j] * pb_xz[j] + pa_xxy[j] * pc_xzzz[j] + pa_xxz[j] * pc_xyzz[j] + pa_xx[j] * pc_yzzz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_xxzz[j] + 2.0 * pa_xy[j] * pc_xzzz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxzz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyzz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxyz[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxyz[j] * pb_zz[j] + pc_xxzz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xxzz[j] * pa_y[j] * pb_xz[j] + pc_xxxz[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_xz[j] + pc_xxxy[j] * pa_z[j] * pb_zz[j] + pc_xxyz[j] * pb_xzz[j]);

                t_xxyz_xzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yzzz[j] - 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - pc_xxxy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pa_y[j] - 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] - pa_xx[j] * pc_xyzzz[j] - 2.0 * pa_xy[j] * pc_xxzzz[j] - 2.0 * pa_xz[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - pc_xxxzz[j] * pa_yz[j] - pc_xxzzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxzz[j] * pa_y[j] * pb_z[j] - pc_xxyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xxyzz[j] * pb_xz[j] - pc_xxxyz[j] * pb_zz[j]);

                t_xxyz_xzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyzzz[j] + pc_xxxzzz[j] * pa_y[j] + pc_xxxyzz[j] * pa_z[j] + pc_xxyzzz[j] * pb_x[j] + 2.0 * pc_xxxyzz[j] * pb_z[j]);

                t_xxyz_xzz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_46_47(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (46,47)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_yyy = primBuffer.data(150 * idx + 46);

            // Batch of Integrals (46,47)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_y, pb_yy, pb_yyy, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyz, \
                                     pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, \
                                     pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, \
                                     pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxyz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyz_yyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_xxyz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxz[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yyy[j] + pa_xxyz[j] * pb_yyy[j]);

                t_xxyz_yyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 1.5 * fl2_fx * pa_yz[j] * pb_y[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 2.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * fl2_fx * pa_z[j] * pb_yy[j] - 1.5 * pa_xxyz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xxyz[j] * pc_y[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_z[j] * pb_y[j] * fl1_fx - 4.5 * pa_xxz[j] * pc_y[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_xxz[j] * fl1_fx * pb_yy[j] - 3.0 * pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] - 1.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yyy[j] - 3.0 * pa_xxyz[j] * pb_yy[j] * pc_y[j] - pa_xxy[j] * pc_z[j] * pb_yyy[j] - pa_xxz[j] * pc_y[j] * pb_yyy[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_yyy[j]);

                t_xxyz_yyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 3.0 * pa_xz[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pa_z[j] + 1.5 * fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 4.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_xxyz[j] * pc_y[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xxz[j] * pc_y[j] * pb_y[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_yy[j] * fl1_fx + 4.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_yy[j] + 3.0 * pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx + 9.0 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_yy[j] + 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] + 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yy[j] + 0.5 * fl1_fx * pc_yz[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyy[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyy[j] + 3.0 * pa_xxyz[j] * pb_y[j] * pc_yy[j] + 3.0 * pa_xxy[j] * pc_yz[j] * pb_yy[j] + 3.0 * pa_xxz[j] * pc_yy[j] * pb_yy[j] + pa_xx[j] * pc_yz[j] * pb_yyy[j] + 6.0 * pa_xyz[j] * pc_xy[j] * pb_yy[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_yyy[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_yyy[j] + pc_xx[j] * pa_yz[j] * pb_yyy[j]);

                t_xxyz_yyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 1.5 * pc_xx[j] * fl2_fx * pa_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 3.0 * fl2_fx * pc_yy[j] * pa_z[j] - 4.5 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yyz[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 2.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xxz[j] * pc_yy[j] * fl1_fx - 4.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx - 4.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yyy[j] - 1.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] - 1.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_y[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_yy[j] - 1.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_yy[j] - 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] - 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yy[j] - 0.5 * fl1_fx * pc_yz[j] * pb_yyy[j] - pa_xxyz[j] * pc_yyy[j] - 3.0 * pa_xxy[j] * pc_yyz[j] * pb_y[j] - 3.0 * pa_xxz[j] * pc_yyy[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_yyz[j] * pb_yy[j] - 6.0 * pa_xyz[j] * pc_xyy[j] * pb_y[j] - 6.0 * pa_xy[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_xyy[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_yyy[j] - 3.0 * pc_xxy[j] * pa_yz[j] * pb_yy[j] - pc_xxz[j] * pa_y[j] * pb_yyy[j] - pc_xxy[j] * pa_z[j] * pb_yyy[j]);

                t_xxyz_yyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pa_z[j] + 3.0 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pc_yy[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xyy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + 4.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 4.5 * pc_xxyz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyyz[j] + 0.5 * fl1_fx * pc_yyyy[j] * pa_z[j] + 1.5 * fl1_fx * pc_yyyz[j] * pb_y[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yyy[j] + 1.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] + 1.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_y[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_yy[j] + pa_xxy[j] * pc_yyyz[j] + pa_xxz[j] * pc_yyyy[j] + 3.0 * pa_xx[j] * pc_yyyz[j] * pb_y[j] + 2.0 * pa_xyz[j] * pc_xyyy[j] + 6.0 * pa_xy[j] * pc_xyyz[j] * pb_y[j] + 6.0 * pa_xz[j] * pc_xyyy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xyyz[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_yz[j] * pb_y[j] + 3.0 * pc_xxyz[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_yy[j] + pc_xxyz[j] * pb_yyy[j]);

                t_xxyz_yyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pc_yyz[j] - 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 4.5 * pc_xxyz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyyz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyyz[j] - 0.5 * fl1_fx * pc_yyyy[j] * pa_z[j] - 1.5 * fl1_fx * pc_yyyz[j] * pb_y[j] - pa_xx[j] * pc_yyyyz[j] - 2.0 * pa_xy[j] * pc_xyyyz[j] - 2.0 * pa_xz[j] * pc_xyyyy[j] - 6.0 * pa_x[j] * pc_xyyyz[j] * pb_y[j] - pc_xxyyy[j] * pa_yz[j] - 3.0 * pc_xxyyz[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxyyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxyyz[j] * pb_yy[j]);

                t_xxyz_yyy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + 2.0 * pa_x[j] * pc_xyyyyz[j] + pc_xxyyyz[j] * pa_y[j] + pc_xxyyyy[j] * pa_z[j] + 3.0 * pc_xxyyyz[j] * pb_y[j]);

                t_xxyz_yyy[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_47_48(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (47,48)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_yyz = primBuffer.data(150 * idx + 47);

            // Batch of Integrals (47,48)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_y, pb_yy, pb_yyz, pb_yz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, \
                                     pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, \
                                     pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyz_yyz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_y[j] + 0.25 * fl3_fx * pb_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pa_yz[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xxyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxy[j] * fl1_fx * pb_yy[j] + pa_xxz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yyz[j] + pa_xxyz[j] * pb_yyz[j]);

                t_xxyz_yyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pb_y[j] - 0.5 * pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - pa_xx[j] * fl2_fx * pb_y[j] - 0.5 * pa_xy[j] * pc_x[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.25 * fl2_fx * pa_yz[j] * pc_z[j] - 0.5 * fl2_fx * pa_yz[j] * pb_z[j] - 0.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_yy[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_yz[j] - fl2_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_xxyz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xxy[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_xxy[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yy[j] - pa_xxz[j] * fl1_fx * pb_y[j] * pc_z[j] - pa_xx[j] * fl1_fx * pc_z[j] * pb_yz[j] - pa_xxz[j] * fl1_fx * pb_yz[j] - pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] - 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_z[j] - fl1_fx * pa_yz[j] * pb_yz[j] * pc_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yyz[j] - pa_xxyz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xxyz[j] * pb_yz[j] * pc_y[j] - pa_xxy[j] * pc_z[j] * pb_yyz[j] - pa_xxz[j] * pc_y[j] * pb_yyz[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_yyz[j]);

                t_xxyz_yyz[j] += fl_s_0_0_2 * (0.375 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_y[j] + pa_xy[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 2.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pa_yz[j] * pc_z[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + 0.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 0.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + fl2_fx * pc_z[j] * pb_yz[j] + 0.25 * fl2_fx * pa_yz[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xxyz[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxy[j] * pc_zz[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_xxy[j] * fl1_fx * pc_yy[j] + pa_xxy[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + pa_xx[j] * pc_yy[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yy[j] + pa_xx[j] * fl1_fx * pc_zz[j] * pb_y[j] + pa_xxz[j] * fl1_fx * pb_y[j] * pc_z[j] + pa_xx[j] * fl1_fx * pc_z[j] * pb_yz[j] + pa_xyz[j] * pc_xz[j] * fl1_fx + pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] + pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] + pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] + pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] + fl1_fx * pa_yz[j] * pb_y[j] * pc_yz[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yy[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_yy[j] + fl1_fx * pc_yy[j] * pa_z[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_z[j] + fl1_fx * pa_yz[j] * pb_yz[j] * pc_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyz[j] + 2.0 * pa_xxyz[j] * pb_y[j] * pc_yz[j] + pa_xxyz[j] * pc_yy[j] * pb_z[j] + pa_xxy[j] * pc_zz[j] * pb_yy[j] + 2.0 * pa_xxy[j] * pc_yz[j] * pb_yz[j] + pa_xxz[j] * pc_yz[j] * pb_yy[j] + 2.0 * pa_xxz[j] * pc_yy[j] * pb_yz[j] + pa_xx[j] * pc_yz[j] * pb_yyz[j] + 2.0 * pa_xyz[j] * pc_xz[j] * pb_yy[j] + 4.0 * pa_xyz[j] * pc_xy[j] * pb_yz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_yyz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_yyz[j] + pc_xx[j] * pa_yz[j] * pb_yyz[j]);

                t_xxyz_yyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.125 * fl3_fx * pa_y[j] - 0.25 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 0.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_zz[j] - 0.5 * fl2_fx * pa_y[j] * pc_yy[j] - 1.5 * fl2_fx * pc_yz[j] * pa_z[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pc_yyy[j] - fl2_fx * pc_yy[j] * pb_y[j] - fl2_fx * pc_zz[j] * pb_y[j] - 0.25 * fl2_fx * pa_yz[j] * pc_z[j] - 0.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_xxy[j] * pc_zz[j] * fl1_fx - 0.5 * pa_xxy[j] * fl1_fx * pc_yy[j] - 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx - pa_xx[j] * pc_yy[j] * fl1_fx * pb_y[j] - pa_xx[j] * fl1_fx * pc_zz[j] * pb_y[j] - pa_xyz[j] * pc_xz[j] * fl1_fx - pa_xy[j] * pc_xzz[j] * fl1_fx - pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_xyy[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxz[j] * pa_yz[j] * fl1_fx - 0.5 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] - pc_xxz[j] * fl1_fx * pb_yz[j] - pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yyz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] - fl1_fx * pc_yyz[j] * pb_yz[j] - fl1_fx * pa_yz[j] * pb_y[j] * pc_yz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yy[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_yy[j] - fl1_fx * pc_yy[j] * pa_z[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_yyz[j] - pa_xxyz[j] * pc_yyz[j] - 2.0 * pa_xxy[j] * pc_yzz[j] * pb_y[j] - pa_xxy[j] * pc_yyz[j] * pb_z[j] - 2.0 * pa_xxz[j] * pc_yyz[j] * pb_y[j] - pa_xxz[j] * pc_yyy[j] * pb_z[j] - pa_xx[j] * pc_yzz[j] * pb_yy[j] - 2.0 * pa_xx[j] * pc_yyz[j] * pb_yz[j] - 4.0 * pa_xyz[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_xyy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_yy[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_yy[j] - 4.0 * pa_xz[j] * pc_xyy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_yyz[j] - pc_xxz[j] * pa_yz[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_yz[j] * pb_yz[j] - pc_xxz[j] * pa_y[j] * pb_yyz[j] - pc_xxy[j] * pa_z[j] * pb_yyz[j]);

                t_xxyz_yyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.5 * fl2_fx * pc_yyy[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx + pa_xy[j] * pc_xzz[j] * fl1_fx + pa_xy[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xyyy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * pa_yz[j] * fl1_fx + 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx + pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + pc_xxyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + pc_xxzz[j] * fl1_fx * pb_y[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] + pc_xxz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] + 0.5 * fl1_fx * pc_yyyz[j] * pa_z[j] + fl1_fx * pc_yyzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yyz[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] + fl1_fx * pc_yyz[j] * pb_yz[j] + pa_xxy[j] * pc_yyzz[j] + pa_xxz[j] * pc_yyyz[j] + 2.0 * pa_xx[j] * pc_yyzz[j] * pb_y[j] + pa_xx[j] * pc_yyyz[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_xyyz[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xyyz[j] * pb_z[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_yz[j] * pb_y[j] + pc_xxyy[j] * pa_yz[j] * pb_z[j] + pc_xxzz[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_yz[j] + pc_xxyz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xxyy[j] * pa_z[j] * pb_yz[j] + pc_xxyz[j] * pb_yyz[j]);

                t_xxyz_yyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 0.25 * fl2_fx * pc_yyy[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - pa_x[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxyyy[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_y[j] - pc_xxzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] - 0.5 * fl1_fx * pc_yyyz[j] * pa_z[j] - fl1_fx * pc_yyzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] - pa_xx[j] * pc_yyyzz[j] - 2.0 * pa_xy[j] * pc_xyyzz[j] - 2.0 * pa_xz[j] * pc_xyyyz[j] - 4.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_z[j] - pc_xxyyz[j] * pa_yz[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_y[j] - pc_xxyyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - pc_xxyyy[j] * pa_z[j] * pb_z[j] - pc_xxyzz[j] * pb_yy[j] - 2.0 * pc_xxyyz[j] * pb_yz[j]);

                t_xxyz_yyz[j] += fl_s_0_0_6 * (1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 2.0 * pa_x[j] * pc_xyyyzz[j] + pc_xxyyzz[j] * pa_y[j] + pc_xxyyyz[j] * pa_z[j] + 2.0 * pc_xxyyzz[j] * pb_y[j] + pc_xxyyyz[j] * pb_z[j]);

                t_xxyz_yyz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_48_49(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (48,49)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_yzz = primBuffer.data(150 * idx + 48);

            // Batch of Integrals (48,49)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_y, pb_yz, pb_yzz, pb_z, pb_zz, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, \
                                     pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, \
                                     pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxyz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyz_yzz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_z[j] + 0.25 * fl3_fx * pb_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_yz[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xxyz[j] * pb_y[j] * fl1_fx + pa_xxy[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xxz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yzz[j] + pa_xxyz[j] * pb_yzz[j]);

                t_xxyz_yzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pb_z[j] - 0.5 * pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - pa_xx[j] * fl2_fx * pb_z[j] - 0.5 * pa_xz[j] * pc_x[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.5 * fl2_fx * pa_yz[j] * pb_y[j] - 0.25 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - fl2_fx * pa_y[j] * pb_yz[j] - 0.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_y[j] * pb_yz[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.5 * pa_xxyz[j] * pb_y[j] * fl1_fx - 0.5 * pa_xxyz[j] * pc_y[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_z[j] * pb_y[j] * fl1_fx - pa_xxy[j] * fl1_fx * pc_y[j] * pb_z[j] - pa_xxy[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xxz[j] * pc_y[j] * pb_y[j] * fl1_fx - pa_xx[j] * pc_y[j] * fl1_fx * pb_yz[j] - pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_zz[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_zz[j] - pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx - 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] - pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] - fl1_fx * pa_yz[j] * pb_yz[j] * pc_z[j] - 0.5 * fl1_fx * pa_yz[j] * pc_y[j] * pb_zz[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yzz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yzz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yzz[j] - 2.0 * pa_xxyz[j] * pb_yz[j] * pc_z[j] - pa_xxyz[j] * pc_y[j] * pb_zz[j] - pa_xxy[j] * pc_z[j] * pb_yzz[j] - pa_xxz[j] * pc_y[j] * pb_yzz[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_yzz[j]);

                t_xxyz_yzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 0.375 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_z[j] + pa_xz[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 2.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 0.25 * pc_xx[j] * fl2_fx * pa_z[j] + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 0.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 0.25 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + fl2_fx * pc_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 0.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.25 * fl2_fx * pa_yz[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xxyz[j] * pc_y[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx + pa_xxy[j] * fl1_fx * pc_y[j] * pb_z[j] + 0.5 * pa_xxz[j] * pc_y[j] * pb_y[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_yy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx + pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] + pa_xx[j] * pc_y[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xxz[j] * fl1_fx * pc_zz[j] + pa_xx[j] * fl1_fx * pc_zz[j] * pb_z[j] + pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] + 0.5 * pa_xx[j] * fl1_fx * pc_z[j] * pb_zz[j] + pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx + pa_xyz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] + pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] + 0.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx + pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_zz[j] + fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] + fl1_fx * pa_y[j] * pc_zz[j] * pb_yz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] + fl1_fx * pc_yz[j] * pa_z[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_yzz[j] + fl1_fx * pa_yz[j] * pb_yz[j] * pc_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_y[j] * pb_zz[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yzz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yzz[j] + pa_xxyz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xxyz[j] * pc_yz[j] * pb_z[j] + 2.0 * pa_xxy[j] * pc_zz[j] * pb_yz[j] + pa_xxy[j] * pc_yz[j] * pb_zz[j] + 2.0 * pa_xxz[j] * pc_yz[j] * pb_yz[j] + pa_xxz[j] * pc_yy[j] * pb_zz[j] + pa_xx[j] * pc_yz[j] * pb_yzz[j] + 4.0 * pa_xyz[j] * pc_xz[j] * pb_yz[j] + 2.0 * pa_xyz[j] * pc_xy[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_yzz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_yzz[j] + pc_xx[j] * pa_yz[j] * pb_yzz[j]);

                t_xxyz_yzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.125 * fl3_fx * pa_z[j] - 0.25 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 0.5 * pa_xz[j] * pc_x[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.5 * pc_xx[j] * fl2_fx * pa_z[j] - 0.75 * pc_xxz[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 0.5 * fl2_fx * pc_yy[j] * pa_z[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 0.75 * fl2_fx * pc_yyz[j] - fl2_fx * pc_yy[j] * pb_z[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.5 * fl2_fx * pa_z[j] * pc_zz[j] - fl2_fx * pc_zz[j] * pb_z[j] - 0.25 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_y[j] * pb_yz[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx - 0.5 * pa_xxz[j] * pc_yy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_zzz[j] - 0.5 * pa_xxz[j] * fl1_fx * pc_zz[j] - pa_xx[j] * fl1_fx * pc_zz[j] * pb_z[j] - pa_xyz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx - pa_xz[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 2.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - pa_xz[j] * pc_xzz[j] * fl1_fx - 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx - pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx - pc_xxy[j] * fl1_fx * pb_yz[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_y[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_y[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] - fl1_fx * pc_yzz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_zz[j] - fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] - fl1_fx * pa_y[j] * pc_zz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] - fl1_fx * pc_yz[j] * pa_z[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_yzz[j] - pa_xxyz[j] * pc_yzz[j] - pa_xxy[j] * pc_zzz[j] * pb_y[j] - 2.0 * pa_xxy[j] * pc_yzz[j] * pb_z[j] - pa_xxz[j] * pc_yzz[j] * pb_y[j] - 2.0 * pa_xxz[j] * pc_yyz[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_yzz[j] * pb_yz[j] - pa_xx[j] * pc_yyz[j] * pb_zz[j] - 2.0 * pa_xyz[j] * pc_xzz[j] * pb_y[j] - 4.0 * pa_xyz[j] * pc_xyz[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_xzz[j] * pb_yz[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_zz[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_yzz[j] - 2.0 * pc_xxz[j] * pa_yz[j] * pb_yz[j] - pc_xxy[j] * pa_yz[j] * pb_zz[j] - pc_xxz[j] * pa_y[j] * pb_yzz[j] - pc_xxy[j] * pa_z[j] * pb_yzz[j]);

                t_xxyz_yzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pa_z[j] + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.25 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_zzz[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + pa_xz[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xzzz[j] * fl1_fx + pa_xz[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_y[j] * fl1_fx + pc_xxyy[j] * fl1_fx * pb_z[j] + pc_xxy[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xxzz[j] * fl1_fx * pa_z[j] + pc_xxzz[j] * fl1_fx * pb_z[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pa_z[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] + fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yzz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_y[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_y[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] + fl1_fx * pc_yzz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] + pa_xxy[j] * pc_yzzz[j] + pa_xxz[j] * pc_yyzz[j] + pa_xx[j] * pc_yzzz[j] * pb_y[j] + 2.0 * pa_xx[j] * pc_yyzz[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_xyzz[j] + 2.0 * pa_xy[j] * pc_xzzz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_yz[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_zz[j] + pc_xxzz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xxzz[j] * pa_y[j] * pb_yz[j] + pc_xxyz[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_yz[j] + pc_xxyy[j] * pa_z[j] * pb_zz[j] + pc_xxyz[j] * pb_yzz[j]);

                t_xxyz_yzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 0.25 * fl2_fx * pc_zzz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - pa_x[j] * pc_xzzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * fl1_fx * pa_z[j] - pc_xxzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_yyzz[j] * pa_z[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] - fl1_fx * pc_yyzz[j] * pb_z[j] - pa_xx[j] * pc_yyzzz[j] - 2.0 * pa_xy[j] * pc_xyzzz[j] - 2.0 * pa_xz[j] * pc_xyyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxyzz[j] * pa_yz[j] - pc_xxzzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_z[j] - pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xxyzz[j] * pb_yz[j] - pc_xxyyz[j] * pb_zz[j]);

                t_xxyz_yzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 2.0 * pa_x[j] * pc_xyyzzz[j] + pc_xxyzzz[j] * pa_y[j] + pc_xxyyzz[j] * pa_z[j] + pc_xxyzzz[j] * pb_y[j] + 2.0 * pc_xxyyzz[j] * pb_z[j]);

                t_xxyz_yzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_49_50(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (49,50)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(34 * idx + 10);

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxyz = paDistances.data(34 * idx + 23);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxyz_zzz = primBuffer.data(150 * idx + 49);

            // Batch of Integrals (49,50)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xxyz, pa_xxz, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, \
                                     pb_z, pb_zz, pb_zzz, pc_x, pc_xx, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, \
                                     pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, \
                                     pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, \
                                     pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxyz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxyz_zzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 1.5 * pa_xxyz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxy[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_zzz[j] + pa_xxyz[j] * pb_zzz[j]);

                t_xxyz_zzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 1.5 * fl2_fx * pa_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 2.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_zz[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xxyz[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxyz[j] * pc_z[j] * fl1_fx - 4.5 * pa_xxy[j] * pc_z[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxy[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xxz[j] * pc_y[j] * pb_z[j] * fl1_fx - 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xyz[j] * pc_x[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] - 1.5 * fl1_fx * pa_yz[j] * pb_zz[j] * pc_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_zzz[j] - 3.0 * pa_xxyz[j] * pb_zz[j] * pc_z[j] - pa_xxy[j] * pc_z[j] * pb_zzz[j] - pa_xxz[j] * pc_y[j] * pb_zzz[j] - 2.0 * pa_xyz[j] * pc_x[j] * pb_zzz[j]);

                t_xxyz_zzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 3.0 * pa_xy[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * fl2_fx * pa_yz[j] * pc_z[j] + 4.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 1.5 * pa_xxyz[j] * pc_z[j] * fl1_fx + 4.5 * pa_xxy[j] * pc_z[j] * pb_z[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_zz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_yz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xyz[j] * pc_x[j] * pb_z[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx + 9.0 * pa_xy[j] * pc_xz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xz[j] * pc_xy[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xx[j] * pa_yz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * fl1_fx * pa_yz[j] * pb_z[j] * pc_zz[j] + 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_zz[j] + 1.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_yz[j] * pb_zz[j] * pc_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_zzz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_zzz[j] + 3.0 * pa_xxyz[j] * pb_z[j] * pc_zz[j] + 3.0 * pa_xxy[j] * pc_zz[j] * pb_zz[j] + 3.0 * pa_xxz[j] * pc_yz[j] * pb_zz[j] + pa_xx[j] * pc_yz[j] * pb_zzz[j] + 6.0 * pa_xyz[j] * pc_xz[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_zzz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_zzz[j] + pc_xx[j] * pa_yz[j] * pb_zzz[j]);

                t_xxyz_zzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * fl2_fx * pa_y[j] * pc_zz[j] - 1.5 * fl2_fx * pc_yz[j] * pa_z[j] - 4.5 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pc_yzz[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 2.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_xxy[j] * pc_zz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_yz[j] * pb_z[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * pb_z[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xx[j] * pa_yz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_yz[j] * fl1_fx - 4.5 * pc_xxz[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxy[j] * pa_z[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_zzz[j] - 1.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_z[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_yz[j] * pb_z[j] * pc_zz[j] - 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_zz[j] - 1.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_zzz[j] - pa_xxyz[j] * pc_zzz[j] - 3.0 * pa_xxy[j] * pc_zzz[j] * pb_z[j] - 3.0 * pa_xxz[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_yzz[j] * pb_zz[j] - 6.0 * pa_xyz[j] * pc_xzz[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_xzz[j] * pb_zz[j] - 6.0 * pa_xz[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_zzz[j] - 3.0 * pc_xxz[j] * pa_yz[j] * pb_zz[j] - pc_xxz[j] * pa_y[j] * pb_zzz[j] - pc_xxy[j] * pa_z[j] * pb_zzz[j]);

                t_xxyz_zzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 3.0 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_yz[j] * fl1_fx + 4.5 * pc_xxz[j] * pa_y[j] * pb_z[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xxyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] + 0.5 * fl1_fx * pc_yzzz[j] * pa_z[j] + 1.5 * fl1_fx * pc_yzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_zzz[j] + 1.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_z[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_zz[j] + pa_xxy[j] * pc_zzzz[j] + pa_xxz[j] * pc_yzzz[j] + 3.0 * pa_xx[j] * pc_yzzz[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_xzzz[j] + 6.0 * pa_xy[j] * pc_xzzz[j] * pb_z[j] + 6.0 * pa_xz[j] * pc_xyzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xyzz[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pa_yz[j] * pb_z[j] + 3.0 * pc_xxzz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xxyz[j] * pa_z[j] * pb_zz[j] + pc_xxyz[j] * pb_zzz[j]);

                t_xxyz_zzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pc_yzz[j] - 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xxyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 0.5 * fl1_fx * pc_yzzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] - 0.5 * fl1_fx * pc_yzzz[j] * pa_z[j] - 1.5 * fl1_fx * pc_yzzz[j] * pb_z[j] - pa_xx[j] * pc_yzzzz[j] - 2.0 * pa_xy[j] * pc_xzzzz[j] - 2.0 * pa_xz[j] * pc_xyzzz[j] - 6.0 * pa_x[j] * pc_xyzzz[j] * pb_z[j] - pc_xxzzz[j] * pa_yz[j] - 3.0 * pc_xxzzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pb_zz[j]);

                t_xxyz_zzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + 2.0 * pa_x[j] * pc_xyzzzz[j] + pc_xxzzzz[j] * pa_y[j] + pc_xxyzzz[j] * pa_z[j] + 3.0 * pc_xxyzzz[j] * pb_z[j]);

                t_xxyz_zzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_50_51(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (50,51)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxzz = pcDistances.data(119 * idx + 88);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_xxx = primBuffer.data(150 * idx + 50);

            // Batch of Integrals (50,51)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxx, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxz, pc_xxxxxzz, pc_xxxxz, \
                                     pc_xxxxzz, pc_xxxz, pc_xxxzz, pc_xxz, pc_xxzz, pc_xz, pc_xzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxzz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_xxx[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xzz[j] * fl2_fx + 2.25 * fl2_fx * pa_zz[j] * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pa_xxzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xzz[j] * fl1_fx * pb_xx[j] + 0.25 * fl2_fx * pb_xxx[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xxx[j] + pa_xxzz[j] * pb_xxx[j]);

                t_xxzz_xxx[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 3.375 * fl3_fx * pb_x[j] - 3.0 * pa_xzz[j] * fl2_fx - 3.0 * pa_xz[j] * fl2_fx * pc_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_zz[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 4.5 * fl2_fx * pa_zz[j] * pb_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pb_xx[j] - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 1.5 * pa_xxzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xxzz[j] * pc_x[j] * fl1_fx - 3.0 * pa_xxz[j] * pc_z[j] * pb_x[j] * fl1_fx - 9.0 * pa_xzz[j] * pc_x[j] * pb_x[j] * fl1_fx - 6.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xx[j] - 3.0 * pa_xzz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xx[j] - 0.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxx[j] - 3.0 * pa_xxzz[j] * pb_xx[j] * pc_x[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_xxx[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_xxx[j]);

                t_xxzz_xxx[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 3.375 * fl3_fx * pb_x[j] + 6.0 * pa_xz[j] * fl2_fx * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pa_xzz[j] * fl2_fx + 7.5 * pc_x[j] * fl2_fx * pa_zz[j] + 7.5 * pc_xz[j] * fl2_fx * pa_z[j] + 2.25 * fl2_fx * pc_zz[j] * pb_x[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 2.25 * fl2_fx * pa_zz[j] * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pb_xx[j] + 1.5 * pa_xxzz[j] * pc_x[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_z[j] * pb_x[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx + 9.0 * pa_xzz[j] * pc_x[j] * pb_x[j] * fl1_fx + 6.0 * pa_xzz[j] * pc_xx[j] * fl1_fx + 18.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] + 6.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xx[j] + 9.0 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] + 4.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xx[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] + 3.0 * pa_xxzz[j] * pb_x[j] * pc_xx[j] + 6.0 * pa_xxz[j] * pc_xz[j] * pb_xx[j] + pa_xx[j] * pc_zz[j] * pb_xxx[j] + 6.0 * pa_xzz[j] * pc_xx[j] * pb_xx[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xxx[j] + pc_xx[j] * pa_zz[j] * pb_xxx[j]);

                t_xxzz_xxx[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_zz[j] - 3.0 * pa_xz[j] * fl2_fx * pc_z[j] - 15.0 * pc_xz[j] * fl2_fx * pa_z[j] - 3.75 * pc_xzz[j] * fl2_fx - 3.75 * pc_x[j] * fl2_fx * pa_zz[j] - 4.5 * fl2_fx * pc_zz[j] * pb_x[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 6.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 9.0 * pc_xx[j] * fl2_fx * pb_x[j] - 2.5 * pc_xxx[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * pa_xxz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 6.0 * pa_xzz[j] * pc_xx[j] * fl1_fx - 18.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 12.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] - 9.0 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_zz[j] * fl1_fx - 18.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 4.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] - pa_xxzz[j] * pc_xxx[j] - 6.0 * pa_xxz[j] * pc_xxz[j] * pb_x[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_xx[j] - 6.0 * pa_xzz[j] * pc_xxx[j] * pb_x[j] - 12.0 * pa_xz[j] * pc_xxz[j] * pb_xx[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xxx[j]);

                t_xxzz_xxx[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 7.5 * pc_xzz[j] * fl2_fx + 7.5 * pc_xz[j] * fl2_fx * pa_z[j] + 2.25 * fl2_fx * pc_zz[j] * pb_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 5.0 * pc_xxx[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 12.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_zz[j] * fl1_fx + 18.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xxzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] + pa_x[j] * pc_xxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xxz[j] * pc_xxxz[j] + 3.0 * pa_xx[j] * pc_xxzz[j] * pb_x[j] + 2.0 * pa_xzz[j] * pc_xxxx[j] + 12.0 * pa_xz[j] * pc_xxxz[j] * pb_x[j] + 6.0 * pa_x[j] * pc_xxzz[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_zz[j] * pb_x[j] + 6.0 * pc_xxxz[j] * pa_z[j] * pb_xx[j] + pc_xxzz[j] * pb_xxx[j]);

                t_xxzz_xxx[j] += fl_s_0_0_5 * (-3.75 * pc_xzz[j] * fl2_fx - 2.5 * pc_xxx[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 10.0 * pc_xxxz[j] * pa_z[j] * fl1_fx - 9.0 * pc_xxzz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxzz[j] * fl1_fx - pa_x[j] * pc_xxxx[j] * fl1_fx - 0.5 * pc_xxxxx[j] * fl1_fx - 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxxzz[j] - 4.0 * pa_xz[j] * pc_xxxxz[j] - 6.0 * pa_x[j] * pc_xxxzz[j] * pb_x[j] - pc_xxxxx[j] * pa_zz[j] - 6.0 * pc_xxxxz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxxzz[j] * pb_xx[j]);

                t_xxzz_xxx[j] += fl_s_0_0_6 * (5.0 * pc_xxxzz[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxzz[j] + 2.0 * pc_xxxxxz[j] * pa_z[j] + 3.0 * pc_xxxxzz[j] * pb_x[j]);

                t_xxzz_xxx[j] += -fl_s_0_0_7 * pc_xxxxxzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_51_52(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (51,52)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_xxy = primBuffer.data(150 * idx + 51);

            // Batch of Integrals (51,52)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxy, \
                                     pb_xy, pb_y, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyz, pc_xxxxyzz, \
                                     pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, \
                                     pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxzz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_xxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_xy[j] + 0.5 * pa_xxzz[j] * fl1_fx * pb_y[j] + 2.0 * pa_xzz[j] * fl1_fx * pb_xy[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xxy[j] + pa_xxzz[j] * pb_xxy[j]);

                t_xxzz_xxy[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * fl2_fx * pa_zz[j] * pb_y[j] - 0.25 * pa_xx[j] * fl2_fx * pc_y[j] - 0.5 * pa_xx[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.0 * pa_x[j] * fl2_fx * pb_xy[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * pa_xxzz[j] * fl1_fx * pc_y[j] - 0.5 * pa_xxzz[j] * fl1_fx * pb_y[j] - pa_xxz[j] * pc_z[j] * fl1_fx * pb_y[j] - 3.0 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_y[j] - 2.0 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_y[j] - 4.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xy[j] - 2.0 * pa_xzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xy[j] - 0.25 * fl2_fx * pb_xx[j] * pc_y[j] - 0.5 * fl2_fx * pb_xxy[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] - pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxy[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_y[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxy[j] - pa_xxzz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xxzz[j] * pb_xy[j] * pc_x[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_xxy[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_xxy[j]);

                t_xxzz_xxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * fl2_fx * pa_zz[j] * pc_y[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 0.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 2.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * pc_x[j] * fl2_fx * pb_xy[j] + 0.5 * pa_xxzz[j] * fl1_fx * pc_y[j] + pa_xxz[j] * pc_yz[j] * fl1_fx + pa_xxz[j] * pc_z[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_y[j] + 6.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] + 2.0 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_y[j] + 4.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xy[j] + 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_x[j] + 6.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xy[j] + 0.5 * fl2_fx * pb_xx[j] * pc_y[j] + 0.25 * fl2_fx * pb_xxy[j] + pa_xx[j] * fl1_fx * pb_x[j] * pc_xy[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] + pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_z[j] * pc_yz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_y[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] + 2.0 * pa_xxzz[j] * pb_x[j] * pc_xy[j] + pa_xxzz[j] * pc_xx[j] * pb_y[j] + 2.0 * pa_xxz[j] * pc_yz[j] * pb_xx[j] + 4.0 * pa_xxz[j] * pc_xz[j] * pb_xy[j] + pa_xx[j] * pc_zz[j] * pb_xxy[j] + 2.0 * pa_xzz[j] * pc_xy[j] * pb_xx[j] + 4.0 * pa_xzz[j] * pc_xx[j] * pb_xy[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xxy[j] + pc_xx[j] * pa_zz[j] * pb_xxy[j]);

                t_xxzz_xxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pa_z[j] * pc_yz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.25 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - pa_xxz[j] * pc_yz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xzz[j] * pc_xy[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] - 4.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_x[j] - 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] - 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_x[j] - 6.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] - 0.25 * fl2_fx * pb_xx[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxy[j] - pa_xx[j] * fl1_fx * pb_x[j] * pc_xy[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - pc_xxx[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] - fl1_fx * pa_z[j] * pc_yz[j] * pb_xx[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] - pa_xxzz[j] * pc_xxy[j] - 4.0 * pa_xxz[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_xxz[j] * pc_xxz[j] * pb_y[j] - pa_xx[j] * pc_yzz[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_xzz[j] * pc_xxy[j] * pb_x[j] - 2.0 * pa_xzz[j] * pc_xxx[j] * pb_y[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xx[j] - 8.0 * pa_xz[j] * pc_xxz[j] * pb_xy[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xxy[j] - pc_xxy[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xxx[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xxy[j]);

                t_xxzz_xxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] + 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_xy[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xxy[j] + pa_x[j] * pc_xxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + pc_xxxy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + pc_xxx[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] + 2.0 * pa_xxz[j] * pc_xxyz[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_x[j] + pa_xx[j] * pc_xxzz[j] * pb_y[j] + 2.0 * pa_xzz[j] * pc_xxxy[j] + 8.0 * pa_xz[j] * pc_xxyz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxxz[j] * pb_y[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxzz[j] * pb_xy[j] + 2.0 * pc_xxxy[j] * pa_zz[j] * pb_x[j] + pc_xxxx[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxxz[j] * pa_z[j] * pb_xy[j] + pc_xxzz[j] * pb_xxy[j]);

                t_xxzz_xxy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yzz[j] - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxxy[j] * fl1_fx - 0.5 * pc_xxxxy[j] * fl1_fx - pc_xxxy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - pa_xx[j] * pc_xxyzz[j] - 4.0 * pa_xz[j] * pc_xxxyz[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxzz[j] * pb_y[j] - pc_xxxxy[j] * pa_zz[j] - 4.0 * pc_xxxyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_z[j] * pb_y[j] - pc_xxyzz[j] * pb_xx[j] - 2.0 * pc_xxxzz[j] * pb_xy[j]);

                t_xxzz_xxy[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyzz[j] + 2.0 * pc_xxxxyz[j] * pa_z[j] + 2.0 * pc_xxxyzz[j] * pb_x[j] + pc_xxxxzz[j] * pb_y[j]);

                t_xxzz_xxy[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_52_53(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (52,53)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_xxz = primBuffer.data(150 * idx + 52);

            // Batch of Integrals (52,53)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxz, \
                                     pb_xz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxz, pc_xxxxzz, pc_xxxxzzz, pc_xxxz, \
                                     pc_xxxzz, pc_xxxzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xz, pc_xzz, pc_xzzz, pc_z, pc_zz, \
                                     pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxzz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_xxz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 0.375 * fl3_fx * pb_z[j] + 0.5 * pa_xxz[j] * fl2_fx + 2.0 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + pa_x[j] * fl2_fx * pb_xz[j] + 0.5 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_xxzz[j] * fl1_fx * pb_z[j] + pa_xxz[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xzz[j] * fl1_fx * pb_xz[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xxz[j] + pa_xxzz[j] * pb_xxz[j]);

                t_xxzz_xxz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 3.0 * pa_xz[j] * pc_x[j] * fl2_fx - 4.0 * pa_xz[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.5 * pa_xx[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 2.0 * pa_x[j] * fl2_fx * pb_xz[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - fl2_fx * pa_z[j] * pb_xx[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_xxzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxzz[j] * fl1_fx * pb_z[j] - pa_xxz[j] * pc_z[j] * fl1_fx * pb_z[j] - 2.0 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_x[j] - pa_xxz[j] * fl1_fx * pb_xx[j] - 1.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_xx[j] - 3.0 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xx[j] - 2.0 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_z[j] - 4.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xz[j] - 2.0 * pa_xzz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xz[j] - 0.5 * fl2_fx * pb_xxz[j] - pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxz[j] - pa_xxzz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xxzz[j] * pb_xz[j] * pc_x[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_xxz[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_xxz[j]);

                t_xxzz_xxz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 2.25 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pb_z[j] + 0.5 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * pc_z[j] * fl2_fx + 6.0 * pa_xz[j] * pc_x[j] * fl2_fx + 4.5 * pa_x[j] * pc_xz[j] * fl2_fx + 6.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 2.0 * pa_xz[j] * fl2_fx * pb_x[j] + 3.0 * pc_xx[j] * pa_z[j] * fl2_fx + 6.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 4.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + pa_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * pc_x[j] * fl2_fx * pb_xz[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.5 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_xxzz[j] * fl1_fx * pc_z[j] + pa_xxz[j] * pc_zz[j] * fl1_fx + pa_xxz[j] * pc_z[j] * fl1_fx * pb_z[j] + pa_xxz[j] * fl1_fx * pc_xx[j] + 2.0 * pa_xxz[j] * fl1_fx * pb_x[j] * pc_x[j] + 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xzz[j] * pc_xz[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] + 6.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 4.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_x[j] + 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 4.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] + 2.0 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_z[j] + 4.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xz[j] + 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] + pc_xx[j] * pa_z[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_x[j] + 6.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 3.0 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] + pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] + 2.0 * pa_xxzz[j] * pb_x[j] * pc_xz[j] + pa_xxzz[j] * pc_xx[j] * pb_z[j] + 2.0 * pa_xxz[j] * pc_zz[j] * pb_xx[j] + 4.0 * pa_xxz[j] * pc_xz[j] * pb_xz[j] + pa_xx[j] * pc_zz[j] * pb_xxz[j] + 2.0 * pa_xzz[j] * pc_xz[j] * pb_xx[j] + 4.0 * pa_xzz[j] * pc_xx[j] * pb_xz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xxz[j] + pc_xx[j] * pa_zz[j] * pb_xxz[j]);

                t_xxzz_xxz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 3.0 * pa_xz[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xz[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 6.0 * pc_xx[j] * pa_z[j] * fl2_fx - 4.5 * pc_xxz[j] * fl2_fx - 9.0 * pc_xz[j] * fl2_fx * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_zzz[j] - 3.0 * fl2_fx * pa_z[j] * pc_zz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - pa_xxz[j] * pc_zz[j] * fl1_fx - pa_xxz[j] * fl1_fx * pc_xx[j] - 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xzz[j] * pc_xz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_xxx[j] * fl1_fx - 4.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] - 4.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_x[j] - 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] - 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_xx[j] * pa_z[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_x[j] - 6.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] - pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] - pc_xxx[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxz[j] - pa_xxzz[j] * pc_xxz[j] - 4.0 * pa_xxz[j] * pc_xzz[j] * pb_x[j] - 2.0 * pa_xxz[j] * pc_xxz[j] * pb_z[j] - pa_xx[j] * pc_zzz[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xzz[j] * pb_xz[j] - 4.0 * pa_xzz[j] * pc_xxz[j] * pb_x[j] - 2.0 * pa_xzz[j] * pc_xxx[j] * pb_z[j] - 4.0 * pa_xz[j] * pc_xzz[j] * pb_xx[j] - 8.0 * pa_xz[j] * pc_xxz[j] * pb_xz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xxz[j] - pc_xxz[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xxx[j] * pa_zz[j] * pb_xz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xxz[j]);

                t_xxzz_xxz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 4.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xx[j] * pa_z[j] * fl2_fx + 9.0 * pc_xxz[j] * fl2_fx + 4.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] + 3.0 * pc_xxz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxxx[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxxz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xzzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + pc_xxx[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + 2.0 * pa_xxz[j] * pc_xxzz[j] + 2.0 * pa_xx[j] * pc_xzzz[j] * pb_x[j] + pa_xx[j] * pc_xxzz[j] * pb_z[j] + 2.0 * pa_xzz[j] * pc_xxxz[j] + 8.0 * pa_xz[j] * pc_xxzz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxxz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxzz[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_zz[j] * pb_x[j] + pc_xxxx[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xxzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxxz[j] * pa_z[j] * pb_xz[j] + pc_xxzz[j] * pb_xxz[j]);

                t_xxzz_xxz[j] += fl_s_0_0_5 * (-4.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 3.0 * pa_x[j] * pc_xzzz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - pc_xxxx[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxzzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxxxz[j] * fl1_fx - 3.0 * pc_xxxz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xzzz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - pa_xx[j] * pc_xxzzz[j] - 4.0 * pa_xz[j] * pc_xxxzz[j] - 4.0 * pa_x[j] * pc_xxzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxzz[j] * pb_z[j] - pc_xxxxz[j] * pa_zz[j] - 4.0 * pc_xxxzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_z[j] * pb_z[j] - pc_xxzzz[j] * pb_xx[j] - 2.0 * pc_xxxzz[j] * pb_xz[j]);

                t_xxzz_xxz[j] += fl_s_0_0_6 * (3.0 * pc_xxzzz[j] * fl1_fx + 1.5 * pc_xxxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxzzz[j] + 2.0 * pc_xxxxzz[j] * pa_z[j] + 2.0 * pc_xxxzzz[j] * pb_x[j] + pc_xxxxzz[j] * pb_z[j]);

                t_xxzz_xxz[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_53_54(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (53,54)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_xyy = primBuffer.data(150 * idx + 53);

            // Batch of Integrals (53,54)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xy, pb_xyy, \
                                     pb_y, pb_yy, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyyzz, \
                                     pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, \
                                     pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, \
                                     pc_xz, pc_xzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxzz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_xyy[j] = fl_s_0_0_0 * (0.25 * pa_x[j] * fl3_fx + 0.5 * pa_xzz[j] * fl2_fx + 0.125 * fl3_fx * pb_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_yy[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + 0.5 * pa_xxzz[j] * pb_x[j] * fl1_fx + pa_xzz[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xyy[j] + pa_xxzz[j] * pb_xyy[j]);

                t_xxzz_xyy[j] += fl_s_0_0_1 * (-0.75 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - pa_xzz[j] * fl2_fx - pa_xz[j] * fl2_fx * pc_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - 0.375 * fl3_fx * pb_x[j] - 0.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * fl2_fx * pa_zz[j] * pb_x[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.5 * pa_xxzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxzz[j] * pc_x[j] * fl1_fx - pa_xxz[j] * pc_z[j] * pb_x[j] * fl1_fx - pa_xzz[j] * pc_x[j] * pb_x[j] * fl1_fx - 2.0 * pa_xzz[j] * fl1_fx * pb_y[j] * pc_y[j] - 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yy[j] - pa_xzz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_yy[j] - 0.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.5 * fl2_fx * pb_xyy[j] - pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xyy[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] - fl1_fx * pa_zz[j] * pb_xy[j] * pc_y[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xyy[j] - 2.0 * pa_xxzz[j] * pb_xy[j] * pc_y[j] - pa_xxzz[j] * pc_x[j] * pb_yy[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_xyy[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_xyy[j]);

                t_xxzz_xyy[j] += fl_s_0_0_2 * (0.75 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 2.0 * pa_xz[j] * fl2_fx * pc_z[j] + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pa_xzz[j] * fl2_fx + 1.5 * pc_x[j] * fl2_fx * pa_zz[j] + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 0.375 * fl3_fx * pb_x[j] + 0.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 2.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_yy[j] + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 0.25 * fl2_fx * pc_zz[j] * pb_x[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + 0.5 * pa_xxzz[j] * pc_x[j] * fl1_fx + pa_xxz[j] * pc_z[j] * pb_x[j] * fl1_fx + pa_xxz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx + pa_xzz[j] * pc_x[j] * pb_x[j] * fl1_fx + pa_xzz[j] * pc_xx[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_xzz[j] * fl1_fx * pc_yy[j] + 4.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 2.0 * pa_xzz[j] * fl1_fx * pb_y[j] * pc_y[j] + 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yy[j] + 0.5 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_y[j] + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_yy[j] + 0.25 * fl2_fx * pb_x[j] * pc_yy[j] + fl2_fx * pb_xy[j] * pc_y[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] + pa_xx[j] * fl1_fx * pc_xy[j] * pb_y[j] + pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_yy[j] + 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] + fl1_fx * pa_zz[j] * pb_xy[j] * pc_y[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] + pa_xxzz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xxzz[j] * pc_xy[j] * pb_y[j] + 4.0 * pa_xxz[j] * pc_yz[j] * pb_xy[j] + 2.0 * pa_xxz[j] * pc_xz[j] * pb_yy[j] + pa_xx[j] * pc_zz[j] * pb_xyy[j] + 4.0 * pa_xzz[j] * pc_xy[j] * pb_xy[j] + 2.0 * pa_xzz[j] * pc_xx[j] * pb_yy[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xyy[j] + pc_xx[j] * pa_zz[j] * pb_xyy[j]);

                t_xxzz_xyy[j] += fl_s_0_0_3 * (-0.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - pa_x[j] * fl2_fx * pc_zz[j] - pa_xz[j] * fl2_fx * pc_z[j] - 3.0 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - 0.125 * fl3_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - pa_x[j] * pc_xx[j] * fl2_fx - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_yy[j] - pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 0.5 * pc_xx[j] * fl2_fx * pb_x[j] - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - pa_xxz[j] * pc_xz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - pa_xzz[j] * pc_xx[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 2.0 * pa_xz[j] * fl1_fx * pc_yyz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] - pa_xzz[j] * fl1_fx * pc_yy[j] - 4.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 0.5 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx - pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pa_zz[j] - 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_y[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * fl2_fx * pb_x[j] * pc_yy[j] - 0.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xyy[j] - 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] - pa_xx[j] * fl1_fx * pc_xy[j] * pb_y[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - pc_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xyy[j] - fl1_fx * pa_z[j] * pc_yyz[j] * pb_x[j] - fl1_fx * pc_yzz[j] * pb_xy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_yy[j] - 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] - pa_xxzz[j] * pc_xyy[j] - 2.0 * pa_xxz[j] * pc_yyz[j] * pb_x[j] - 4.0 * pa_xxz[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xx[j] * pc_yzz[j] * pb_xy[j] - pa_xx[j] * pc_xzz[j] * pb_yy[j] - 2.0 * pa_xzz[j] * pc_xyy[j] * pb_x[j] - 4.0 * pa_xzz[j] * pc_xxy[j] * pb_y[j] - 8.0 * pa_xz[j] * pc_xyz[j] * pb_xy[j] - 4.0 * pa_xz[j] * pc_xxz[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_zz[j] * pb_xy[j] - pc_xxx[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xyy[j]);

                t_xxzz_xyy[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 0.5 * pc_xxx[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pc_zz[j] * pb_x[j] + 0.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + pa_x[j] * pc_xxzz[j] * fl1_fx + pa_x[j] * fl1_fx * pc_yyzz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yyz[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] + 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx + pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + pc_xxxz[j] * pa_z[j] * fl1_fx + 0.5 * pc_xxzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_zz[j] + 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pb_x[j] * pc_yy[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xyy[j] + pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_x[j] + pc_xxxy[j] * fl1_fx * pb_y[j] + pc_xxy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] + fl1_fx * pa_z[j] * pc_yyz[j] * pb_x[j] + fl1_fx * pc_yzz[j] * pb_xy[j] + 2.0 * pa_xxz[j] * pc_xyyz[j] + pa_xx[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_xzz[j] * pc_xxyy[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_x[j] + 8.0 * pa_xz[j] * pc_xxyz[j] * pb_y[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xxzz[j] * pb_yy[j] + pc_xxyy[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_zz[j] * pb_y[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_yy[j] + pc_xxzz[j] * pb_xyy[j]);

                t_xxzz_xyy[j] += fl_s_0_0_5 * (-0.75 * pc_xzz[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - pa_x[j] * pc_xxzz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyzz[j] - pc_xxxz[j] * pa_z[j] * fl1_fx - 0.5 * pc_xxzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xxyy[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 0.5 * pc_xxyy[j] * fl1_fx * pb_x[j] - pc_xxxy[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] - pa_xx[j] * pc_xyyzz[j] - 4.0 * pa_xz[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - pc_xxxyy[j] * pa_zz[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxxyz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyzz[j] * pb_xy[j] - pc_xxxzz[j] * pb_yy[j]);

                t_xxzz_xyy[j] += fl_s_0_0_6 * (0.5 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyzz[j] + 2.0 * pc_xxxyyz[j] * pa_z[j] + pc_xxyyzz[j] * pb_x[j] + 2.0 * pc_xxxyzz[j] * pb_y[j]);

                t_xxzz_xyy[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_54_55(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (54,55)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_xyz = primBuffer.data(150 * idx + 54);

            // Batch of Integrals (54,55)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xy, pb_xyz, \
                                     pb_xz, pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyz, pc_xxxyzz, \
                                     pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxzz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xxzz_xyz[j] = fl_s_0_0_0 * (pa_xz[j] * fl2_fx * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + pa_xxz[j] * fl1_fx * pb_xy[j] + pa_xzz[j] * fl1_fx * pb_yz[j] + 0.25 * fl2_fx * pb_xyz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xyz[j] + pa_xxzz[j] * pb_xyz[j]);

                t_xxzz_xyz[j] += fl_s_0_0_1 * (-pa_xz[j] * fl2_fx * pc_y[j] - 2.0 * pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - fl2_fx * pa_z[j] * pb_xy[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - pa_xxz[j] * fl1_fx * pb_x[j] * pc_y[j] - pa_xxz[j] * fl1_fx * pc_x[j] * pb_y[j] - pa_xxz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_xy[j] - 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xy[j] - pa_xzz[j] * fl1_fx * pb_y[j] * pc_z[j] - pa_xzz[j] * fl1_fx * pc_y[j] * pb_z[j] - 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yz[j] - pa_xzz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xz[j] * pc_y[j] - 0.5 * fl2_fx * pb_xyz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xyz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xz[j] * pc_y[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xyz[j] - pa_xxzz[j] * pb_xy[j] * pc_z[j] - pa_xxzz[j] * pb_xz[j] * pc_y[j] - pa_xxzz[j] * pc_x[j] * pb_yz[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_xyz[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_xyz[j]);

                t_xxzz_xyz[j] += fl_s_0_0_2 * (2.0 * pa_xz[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pa_z[j] + 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_yz[j] + fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xy[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + pa_xxz[j] * fl1_fx * pc_xy[j] + pa_xxz[j] * fl1_fx * pb_x[j] * pc_y[j] + pa_xxz[j] * fl1_fx * pc_x[j] * pb_y[j] + 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_x[j] + 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] + 1.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_xy[j] + 2.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] + 2.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] + 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xy[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + pa_xzz[j] * fl1_fx * pc_yz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_y[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] + pa_xzz[j] * fl1_fx * pb_y[j] * pc_z[j] + pa_xzz[j] * fl1_fx * pc_y[j] * pb_z[j] + 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yz[j] + pc_xx[j] * pa_z[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_y[j] + 1.5 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_z[j] + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_yz[j] + 0.5 * fl2_fx * pb_xz[j] * pc_y[j] + 0.25 * fl2_fx * pb_xyz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xy[j] * pb_z[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_yz[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] + fl1_fx * pa_z[j] * pc_yz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xz[j] * pc_y[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] + pa_xxzz[j] * pb_x[j] * pc_yz[j] + pa_xxzz[j] * pc_xz[j] * pb_y[j] + pa_xxzz[j] * pc_xy[j] * pb_z[j] + 2.0 * pa_xxz[j] * pc_zz[j] * pb_xy[j] + 2.0 * pa_xxz[j] * pc_yz[j] * pb_xz[j] + 2.0 * pa_xxz[j] * pc_xz[j] * pb_yz[j] + pa_xx[j] * pc_zz[j] * pb_xyz[j] + 2.0 * pa_xzz[j] * pc_xz[j] * pb_xy[j] + 2.0 * pa_xzz[j] * pc_xy[j] * pb_xz[j] + 2.0 * pa_xzz[j] * pc_xx[j] * pb_yz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xyz[j] + pc_xx[j] * pa_zz[j] * pb_xyz[j]);

                t_xxzz_xyz[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.0 * pc_xy[j] * fl2_fx * pa_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - pa_xxz[j] * fl1_fx * pc_xy[j] - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_x[j] - 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_xxy[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] - 2.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yzz[j] - pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] - pa_xzz[j] * fl1_fx * pc_yz[j] - 2.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_y[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] - pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_xx[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_zz[j] - 3.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_y[j] - 1.5 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_z[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xz[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xy[j] * pb_z[j] - pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xyz[j] - fl1_fx * pa_z[j] * pc_yzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_yz[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] - fl1_fx * pa_z[j] * pc_yz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xyz[j] - pa_xxzz[j] * pc_xyz[j] - 2.0 * pa_xxz[j] * pc_yzz[j] * pb_x[j] - 2.0 * pa_xxz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xxz[j] * pc_xyz[j] * pb_z[j] - pa_xx[j] * pc_zzz[j] * pb_xy[j] - pa_xx[j] * pc_yzz[j] * pb_xz[j] - pa_xx[j] * pc_xzz[j] * pb_yz[j] - 2.0 * pa_xzz[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_xzz[j] * pc_xxz[j] * pb_y[j] - 2.0 * pa_xzz[j] * pc_xxy[j] * pb_z[j] - 4.0 * pa_xz[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xz[j] - 4.0 * pa_xz[j] * pc_xxz[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xyz[j] - pc_xxz[j] * pa_zz[j] * pb_xy[j] - pc_xxy[j] * pa_zz[j] * pb_xz[j] - pc_xxx[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xyz[j]);

                t_xxzz_xyz[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_yzzz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yzz[j] + pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] + pc_xxxy[j] * pa_z[j] * fl1_fx + pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] + pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_zz[j] + 3.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] + fl1_fx * pa_z[j] * pc_yzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_xz[j] + 2.0 * pa_xxz[j] * pc_xyzz[j] + pa_xx[j] * pc_yzzz[j] * pb_x[j] + pa_xx[j] * pc_xzzz[j] * pb_y[j] + pa_xx[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_xzz[j] * pc_xxyz[j] + 4.0 * pa_xz[j] * pc_xyzz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxzz[j] * pb_yz[j] + pc_xxyz[j] * pa_zz[j] * pb_x[j] + pc_xxxz[j] * pa_zz[j] * pb_y[j] + pc_xxxy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xxzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_yz[j] + pc_xxzz[j] * pb_xyz[j]);

                t_xxzz_xyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yzzz[j] - pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] - pa_xx[j] * pc_xyzzz[j] - 4.0 * pa_xz[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - pc_xxxyz[j] * pa_zz[j] - 2.0 * pc_xxyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - pc_xxzzz[j] * pb_xy[j] - pc_xxyzz[j] * pb_xz[j] - pc_xxxzz[j] * pb_yz[j]);

                t_xxzz_xyz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyzzz[j] + 2.0 * pc_xxxyzz[j] * pa_z[j] + pc_xxyzzz[j] * pb_x[j] + pc_xxxzzz[j] * pb_y[j] + pc_xxxyzz[j] * pb_z[j]);

                t_xxzz_xyz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_55_56(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (55,56)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_xzz = primBuffer.data(150 * idx + 55);

            // Batch of Integrals (55,56)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xz, pb_xzz, \
                                     pb_z, pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxxzzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxzz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_xzz[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 0.375 * fl3_fx * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_xzz[j] * fl2_fx + 2.0 * pa_xz[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_zz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xxzz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xxz[j] * fl1_fx * pb_xz[j] + pa_xzz[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xzz[j] + pa_xxzz[j] * pb_xzz[j]);

                t_xxzz_xzz[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_xzz[j] * fl2_fx - 3.0 * pa_xz[j] * fl2_fx * pc_z[j] - 4.0 * pa_xz[j] * fl2_fx * pb_z[j] - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * fl2_fx * pa_zz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 2.0 * fl2_fx * pa_z[j] * pb_xz[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xxzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xxzz[j] * pc_x[j] * fl1_fx - 3.0 * pa_xxz[j] * pc_z[j] * pb_x[j] * fl1_fx - 2.0 * pa_xxz[j] * fl1_fx * pc_x[j] * pb_z[j] - 2.0 * pa_xxz[j] * fl1_fx * pb_xz[j] - 3.0 * pa_xx[j] * pc_z[j] * fl1_fx * pb_xz[j] - pa_xzz[j] * pc_x[j] * pb_x[j] * fl1_fx - 4.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xz[j] - 2.0 * pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_zz[j] - pa_xzz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_zz[j] - 0.5 * fl2_fx * pb_xzz[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xzz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] - fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xzz[j] - 2.0 * pa_xxzz[j] * pb_xz[j] * pc_z[j] - pa_xxzz[j] * pc_x[j] * pb_zz[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_xzz[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_xzz[j]);

                t_xxzz_xzz[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 6.0 * pa_xz[j] * fl2_fx * pc_z[j] + 3.0 * pa_x[j] * fl2_fx * pc_zz[j] + 6.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.5 * pa_xzz[j] * fl2_fx + 2.0 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pa_zz[j] + 4.5 * pc_xz[j] * fl2_fx * pa_z[j] + 6.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 4.5 * pc_xz[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 3.0 * fl2_fx * pc_z[j] * pb_xz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xxzz[j] * pc_x[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_z[j] * pb_x[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_xz[j] * fl1_fx + 2.0 * pa_xxz[j] * fl1_fx * pc_x[j] * pb_z[j] + 3.0 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_z[j] * fl1_fx * pb_xz[j] + pa_xzz[j] * pc_x[j] * pb_x[j] * fl1_fx + pa_xzz[j] * pc_xx[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 4.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] + 4.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_xz[j] + 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + pa_xzz[j] * fl1_fx * pc_zz[j] + 4.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 2.0 * pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_zz[j] + 0.5 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx + 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_z[j] + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_zz[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xzz[j] + fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] + pa_xxzz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xxzz[j] * pc_xz[j] * pb_z[j] + 4.0 * pa_xxz[j] * pc_zz[j] * pb_xz[j] + 2.0 * pa_xxz[j] * pc_xz[j] * pb_zz[j] + pa_xx[j] * pc_zz[j] * pb_xzz[j] + 4.0 * pa_xzz[j] * pc_xz[j] * pb_xz[j] + 2.0 * pa_xzz[j] * pc_xx[j] * pb_zz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xzz[j] + pc_xx[j] * pa_zz[j] * pb_xzz[j]);

                t_xxzz_xzz[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_zz[j] - 3.0 * pa_xz[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.75 * pc_xxx[j] * fl2_fx - 1.5 * pc_xx[j] * fl2_fx * pb_x[j] - 9.0 * pc_xz[j] * fl2_fx * pa_z[j] - 4.5 * pc_xzz[j] * fl2_fx - 9.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 3.0 * pa_xxz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_xzz[j] * pc_xx[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - 4.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 2.0 * pa_xz[j] * fl1_fx * pc_zzz[j] - 2.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] - pa_xzz[j] * fl1_fx * pc_zz[j] - 4.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 0.5 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 2.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_zz[j] - 6.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_z[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xzz[j] - fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] - fl1_fx * pc_zzz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xzz[j] - pa_xxzz[j] * pc_xzz[j] - 2.0 * pa_xxz[j] * pc_zzz[j] * pb_x[j] - 4.0 * pa_xxz[j] * pc_xzz[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_zzz[j] * pb_xz[j] - pa_xx[j] * pc_xzz[j] * pb_zz[j] - 2.0 * pa_xzz[j] * pc_xzz[j] * pb_x[j] - 4.0 * pa_xzz[j] * pc_xxz[j] * pb_z[j] - 8.0 * pa_xz[j] * pc_xzz[j] * pb_xz[j] - 4.0 * pa_xz[j] * pc_xxz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xzz[j] - 2.0 * pc_xxz[j] * pa_zz[j] * pb_xz[j] - pc_xxx[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xzz[j]);

                t_xxzz_xzz[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xxx[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 9.0 * pc_xzz[j] * fl2_fx + 4.5 * pc_xz[j] * fl2_fx * pa_z[j] + 4.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xzz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + pa_x[j] * fl1_fx * pc_zzzz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_zzz[j] + 2.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxxz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxxz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xzzz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xzzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_zz[j] + 6.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] + fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] + fl1_fx * pc_zzz[j] * pb_xz[j] + 2.0 * pa_xxz[j] * pc_xzzz[j] + pa_xx[j] * pc_zzzz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xzzz[j] * pb_z[j] + 2.0 * pa_xzz[j] * pc_xxzz[j] + 4.0 * pa_xz[j] * pc_xzzz[j] * pb_x[j] + 8.0 * pa_xz[j] * pc_xxzz[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xzzz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxzz[j] * pb_zz[j] + pc_xxzz[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_xxzz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_zz[j] + pc_xxzz[j] * pb_xzz[j]);

                t_xxzz_xzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xzz[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_zzzz[j] - 3.0 * pc_xxxz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxxzz[j] * fl1_fx - 3.0 * pc_xxxz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xzzzz[j] * fl1_fx - 3.0 * pc_xzzz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xzzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] - pa_xx[j] * pc_xzzzz[j] - 4.0 * pa_xz[j] * pc_xxzzz[j] - 2.0 * pa_x[j] * pc_xzzzz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxzzz[j] * pb_z[j] - pc_xxxzz[j] * pa_zz[j] - 2.0 * pc_xxzzz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxxzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xxzzz[j] * pb_xz[j] - pc_xxxzz[j] * pb_zz[j]);

                t_xxzz_xzz[j] += fl_s_0_0_6 * (3.0 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xzzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxzzzz[j] + 2.0 * pc_xxxzzz[j] * pa_z[j] + pc_xxzzzz[j] * pb_x[j] + 2.0 * pc_xxxzzz[j] * pb_z[j]);

                t_xxzz_xzz[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_56_57(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (56,57)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_yyy = primBuffer.data(150 * idx + 56);

            // Batch of Integrals (56,57)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_y, pb_yy, pb_yyy, \
                                     pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, \
                                     pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxzz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_yyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 1.5 * pa_xxzz[j] * pb_y[j] * fl1_fx + 0.25 * fl2_fx * pb_yyy[j] + 0.5 * pa_xx[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yyy[j] + pa_xxzz[j] * pb_yyy[j]);

                t_xxzz_yyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xx[j] * fl2_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * fl2_fx * pa_zz[j] * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * pa_xxzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xxzz[j] * pc_y[j] * fl1_fx - 3.0 * pa_xxz[j] * pc_z[j] * pb_y[j] * fl1_fx - 3.0 * pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 0.75 * fl2_fx * pb_yy[j] * pc_y[j] - 0.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yyy[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] - 1.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_y[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yyy[j] - 3.0 * pa_xxzz[j] * pb_yy[j] * pc_y[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_yyy[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_yyy[j]);

                t_xxzz_yyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_zz[j] * pc_y[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 1.5 * pa_xxzz[j] * pc_y[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_z[j] * pb_y[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_xy[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx + 0.75 * fl2_fx * pb_y[j] * pc_yy[j] + 1.5 * fl2_fx * pb_yy[j] * pc_y[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] + 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] + 1.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_yy[j] + 3.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_y[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] + 3.0 * pa_xxzz[j] * pb_y[j] * pc_yy[j] + 6.0 * pa_xxz[j] * pc_yz[j] * pb_yy[j] + pa_xx[j] * pc_zz[j] * pb_yyy[j] + 6.0 * pa_xzz[j] * pc_xy[j] * pb_yy[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_yyy[j] + pc_xx[j] * pa_zz[j] * pb_yyy[j]);

                t_xxzz_yyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pc_yz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.75 * fl2_fx * pc_yzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 3.0 * pa_xxz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xzz[j] * pc_xy[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx - 0.25 * fl2_fx * pc_yyy[j] - 1.5 * fl2_fx * pb_y[j] * pc_yy[j] - 0.75 * fl2_fx * pb_yy[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_yyy[j] - 1.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] - 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] - 0.5 * fl1_fx * pa_zz[j] * pc_yyy[j] - 3.0 * fl1_fx * pa_z[j] * pc_yyz[j] * pb_y[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_yy[j] - 1.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_yy[j] - 3.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] - pa_xxzz[j] * pc_yyy[j] - 6.0 * pa_xxz[j] * pc_yyz[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_yzz[j] * pb_yy[j] - 6.0 * pa_xzz[j] * pc_xyy[j] * pb_y[j] - 12.0 * pa_xz[j] * pc_xyz[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_yyy[j] - 3.0 * pc_xxy[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_yyy[j]);

                t_xxzz_yyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxzz[j] * pb_y[j] * fl1_fx + 0.5 * fl2_fx * pc_yyy[j] + 0.75 * fl2_fx * pb_y[j] * pc_yy[j] + 0.5 * pa_xx[j] * fl1_fx * pc_yyy[j] + pa_x[j] * pc_xyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_z[j] * pc_yyyz[j] + 1.5 * fl1_fx * pc_yyzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yyy[j] + 3.0 * fl1_fx * pa_z[j] * pc_yyz[j] * pb_y[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_yy[j] + 2.0 * pa_xxz[j] * pc_yyyz[j] + 3.0 * pa_xx[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xzz[j] * pc_xyyy[j] + 12.0 * pa_xz[j] * pc_xyyz[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xyzz[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_xxyz[j] * pa_z[j] * pb_yy[j] + pc_xxzz[j] * pb_yyy[j]);

                t_xxzz_yyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 0.25 * fl2_fx * pc_yyy[j] - pa_x[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 1.5 * pc_xxyy[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyzz[j] - fl1_fx * pa_z[j] * pc_yyyz[j] - 1.5 * fl1_fx * pc_yyzz[j] * pb_y[j] - pa_xx[j] * pc_yyyzz[j] - 4.0 * pa_xz[j] * pc_xyyyz[j] - 6.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - pc_xxyyy[j] * pa_zz[j] - 6.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxyzz[j] * pb_yy[j]);

                t_xxzz_yyy[j] += fl_s_0_0_6 * (1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 2.0 * pa_x[j] * pc_xyyyzz[j] + 2.0 * pc_xxyyyz[j] * pa_z[j] + 3.0 * pc_xxyyzz[j] * pb_y[j]);

                t_xxzz_yyy[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_57_58(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (57,58)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_yyz = primBuffer.data(150 * idx + 57);

            // Batch of Integrals (57,58)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_y, pb_yy, pb_yyz, \
                                     pb_yz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, \
                                     pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxzz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_yyz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_z[j] + 0.5 * pa_xxz[j] * fl2_fx + 0.125 * fl3_fx * pb_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xxzz[j] * fl1_fx * pb_z[j] + pa_xxz[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yyz[j] + pa_xxzz[j] * pb_yyz[j]);

                t_xxzz_yyz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - pa_xz[j] * pc_x[j] * fl2_fx - 0.375 * fl3_fx * pb_z[j] - 0.5 * pa_xx[j] * fl2_fx * pb_z[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - fl2_fx * pa_z[j] * pb_yy[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_xxzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxzz[j] * fl1_fx * pb_z[j] - pa_xxz[j] * pc_z[j] * fl1_fx * pb_z[j] - 2.0 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_y[j] - pa_xxz[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yy[j] - pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] - 0.5 * fl2_fx * pb_yz[j] * pc_y[j] - 0.5 * fl2_fx * pb_yyz[j] - pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yyz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] - fl1_fx * pa_zz[j] * pb_yz[j] * pc_y[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yyz[j] - pa_xxzz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xxzz[j] * pb_yz[j] * pc_y[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_yyz[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_yyz[j]);

                t_xxzz_yyz[j] += fl_s_0_0_2 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.5 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * pc_z[j] * fl2_fx + 2.0 * pa_xz[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.5 * pc_xx[j] * pa_z[j] * fl2_fx + 0.375 * fl3_fx * pb_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 0.25 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pa_zz[j] * pc_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_yy[j] + 2.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xxzz[j] * fl1_fx * pc_z[j] + pa_xxz[j] * pc_zz[j] * fl1_fx + pa_xxz[j] * pc_z[j] * fl1_fx * pb_z[j] + pa_xxz[j] * fl1_fx * pc_yy[j] + 2.0 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_y[j] + 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] + 1.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yy[j] + pa_xzz[j] * pc_xz[j] * fl1_fx + pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] + 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 4.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 2.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 0.5 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] + pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pc_yy[j] * pb_z[j] + fl2_fx * pb_yz[j] * pc_y[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] + pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] + 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] + fl1_fx * pa_zz[j] * pb_y[j] * pc_yz[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yy[j] * pb_z[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] + 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] + fl1_fx * pa_zz[j] * pb_yz[j] * pc_y[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] + 2.0 * pa_xxzz[j] * pb_y[j] * pc_yz[j] + pa_xxzz[j] * pc_yy[j] * pb_z[j] + 2.0 * pa_xxz[j] * pc_zz[j] * pb_yy[j] + 4.0 * pa_xxz[j] * pc_yz[j] * pb_yz[j] + pa_xx[j] * pc_zz[j] * pb_yyz[j] + 2.0 * pa_xzz[j] * pc_xz[j] * pb_yy[j] + 4.0 * pa_xzz[j] * pc_xy[j] * pb_yz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_yyz[j] + pc_xx[j] * pa_zz[j] * pb_yyz[j]);

                t_xxzz_yyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.25 * fl3_fx * pa_z[j] - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - pa_xz[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - pc_xx[j] * pa_z[j] * fl2_fx - 0.75 * pc_xxz[j] * fl2_fx - 0.125 * fl3_fx * pb_z[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.5 * pc_xx[j] * fl2_fx * pb_z[j] - fl2_fx * pa_z[j] * pc_zz[j] - fl2_fx * pa_z[j] * pc_yy[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - pa_xxz[j] * pc_zz[j] * fl1_fx - pa_xxz[j] * fl1_fx * pc_yy[j] - 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] - pa_xzz[j] * pc_xz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_xyy[j] * fl1_fx - 4.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xxz[j] * pa_zz[j] * fl1_fx - 0.5 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] - pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 0.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.5 * fl2_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - pc_xxy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_yyz[j] - 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_y[j] - fl1_fx * pa_z[j] * pc_yyz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - fl1_fx * pc_yzz[j] * pb_yz[j] - fl1_fx * pa_zz[j] * pb_y[j] * pc_yz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_yy[j] * pb_z[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] - 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyz[j] - pa_xxzz[j] * pc_yyz[j] - 4.0 * pa_xxz[j] * pc_yzz[j] * pb_y[j] - 2.0 * pa_xxz[j] * pc_yyz[j] * pb_z[j] - pa_xx[j] * pc_zzz[j] * pb_yy[j] - 2.0 * pa_xx[j] * pc_yzz[j] * pb_yz[j] - 4.0 * pa_xzz[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xzz[j] * pc_xyy[j] * pb_z[j] - 4.0 * pa_xz[j] * pc_xzz[j] * pb_yy[j] - 8.0 * pa_xz[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_yyz[j] - pc_xxz[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_yyz[j]);

                t_xxzz_yyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.5 * pc_xx[j] * pa_z[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pa_z[j] * pc_yy[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xyy[j] * fl1_fx + pa_x[j] * pc_xzzz[j] * fl1_fx + pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * pa_zz[j] * fl1_fx + pc_xxzz[j] * pa_z[j] * fl1_fx + pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxyy[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pc_yy[j] * pb_z[j] + pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] + pc_xxy[j] * fl1_fx * pb_yz[j] + fl1_fx * pa_z[j] * pc_yyzz[j] + fl1_fx * pc_yzzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yyz[j] + 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_y[j] + fl1_fx * pa_z[j] * pc_yyz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + fl1_fx * pc_yzz[j] * pb_yz[j] + 2.0 * pa_xxz[j] * pc_yyzz[j] + 2.0 * pa_xx[j] * pc_yzzz[j] * pb_y[j] + pa_xx[j] * pc_yyzz[j] * pb_z[j] + 2.0 * pa_xzz[j] * pc_xyyz[j] + 8.0 * pa_xz[j] * pc_xyzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_y[j] + pc_xxyy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xxzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_yz[j] + pc_xxzz[j] * pb_yyz[j]);

                t_xxzz_yyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.25 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pc_yyz[j] - pa_x[j] * pc_xzzz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - pc_xxzz[j] * pa_z[j] * fl1_fx - pc_xxyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - fl1_fx * pa_z[j] * pc_yyzz[j] - fl1_fx * pc_yzzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_z[j] - pa_xx[j] * pc_yyzzz[j] - 4.0 * pa_xz[j] * pc_xyyzz[j] - 4.0 * pa_x[j] * pc_xyzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxyyz[j] * pa_zz[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - pc_xxzzz[j] * pb_yy[j] - 2.0 * pc_xxyzz[j] * pb_yz[j]);

                t_xxzz_yyz[j] += fl_s_0_0_6 * (0.5 * pc_xxzzz[j] * fl1_fx + 1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 2.0 * pa_x[j] * pc_xyyzzz[j] + 2.0 * pc_xxyyzz[j] * pa_z[j] + 2.0 * pc_xxyzzz[j] * pb_y[j] + pc_xxyyzz[j] * pb_z[j]);

                t_xxzz_yyz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_58_59(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (58,59)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_yzz = primBuffer.data(150 * idx + 58);

            // Batch of Integrals (58,59)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_y, pb_yz, pb_yzz, \
                                     pb_z, pb_zz, pc_x, pc_xx, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, \
                                     pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxzz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_yzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xxzz[j] * pb_y[j] * fl1_fx + 2.0 * pa_xxz[j] * fl1_fx * pb_yz[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yzz[j] + pa_xxzz[j] * pb_yzz[j]);

                t_xxzz_yzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 1.5 * pa_xx[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.5 * fl2_fx * pa_zz[j] * pb_y[j] - 0.25 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 2.0 * fl2_fx * pa_z[j] * pb_yz[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_xxzz[j] * pb_y[j] * fl1_fx - 0.5 * pa_xxzz[j] * pc_y[j] * fl1_fx - 3.0 * pa_xxz[j] * pc_z[j] * pb_y[j] * fl1_fx - 2.0 * pa_xxz[j] * fl1_fx * pc_y[j] * pb_z[j] - 2.0 * pa_xxz[j] * fl1_fx * pb_yz[j] - 3.0 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yz[j] - pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 4.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] - 0.25 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * fl2_fx * pb_yzz[j] - 0.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yzz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] - fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] - 0.5 * fl1_fx * pa_zz[j] * pc_y[j] * pb_zz[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yzz[j] - 2.0 * pa_xxzz[j] * pb_yz[j] * pc_z[j] - pa_xxzz[j] * pc_y[j] * pb_zz[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_yzz[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_yzz[j]);

                t_xxzz_yzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pa_zz[j] * pc_y[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 2.0 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * fl2_fx * pc_z[j] * pb_yz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xxzz[j] * pc_y[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_z[j] * pb_y[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_yz[j] * fl1_fx + 2.0 * pa_xxz[j] * fl1_fx * pc_y[j] * pb_z[j] + 3.0 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yz[j] + pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx + pa_xzz[j] * pc_xy[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 4.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] + 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx + 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] + 0.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] + fl1_fx * pa_zz[j] * pc_yz[j] * pb_z[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] + fl1_fx * pa_z[j] * pc_yz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yzz[j] + fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_y[j] * pb_zz[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] + pa_xxzz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xxzz[j] * pc_yz[j] * pb_z[j] + 4.0 * pa_xxz[j] * pc_zz[j] * pb_yz[j] + 2.0 * pa_xxz[j] * pc_yz[j] * pb_zz[j] + pa_xx[j] * pc_zz[j] * pb_yzz[j] + 4.0 * pa_xzz[j] * pc_xz[j] * pb_yz[j] + 2.0 * pa_xzz[j] * pc_xy[j] * pb_zz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_yzz[j] + pc_xx[j] * pa_zz[j] * pb_yzz[j]);

                t_xxzz_yzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * pc_xx[j] * fl2_fx * pb_y[j] - 3.0 * fl2_fx * pa_z[j] * pc_yz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 3.0 * pa_xxz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xzz[j] * pc_xy[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 4.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] - 0.25 * fl2_fx * pc_y[j] * pb_zz[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_yzz[j] - fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] - 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] - fl1_fx * pc_zzz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] - fl1_fx * pa_zz[j] * pc_yz[j] * pb_z[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] - fl1_fx * pa_z[j] * pc_yz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yzz[j] - pa_xxzz[j] * pc_yzz[j] - 2.0 * pa_xxz[j] * pc_zzz[j] * pb_y[j] - 4.0 * pa_xxz[j] * pc_yzz[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_zzz[j] * pb_yz[j] - pa_xx[j] * pc_yzz[j] * pb_zz[j] - 2.0 * pa_xzz[j] * pc_xzz[j] * pb_y[j] - 4.0 * pa_xzz[j] * pc_xyz[j] * pb_z[j] - 8.0 * pa_xz[j] * pc_xzz[j] * pb_yz[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_yzz[j] - 2.0 * pc_xxz[j] * pa_zz[j] * pb_yz[j] - pc_xxy[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_yzz[j]);

                t_xxzz_yzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxzz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_z[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] + fl1_fx * pc_yzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yzz[j] + fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] + fl1_fx * pc_zzz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_zz[j] + 2.0 * pa_xxz[j] * pc_yzzz[j] + pa_xx[j] * pc_zzzz[j] * pb_y[j] + 2.0 * pa_xx[j] * pc_yzzz[j] * pb_z[j] + 2.0 * pa_xzz[j] * pc_xyzz[j] + 4.0 * pa_xz[j] * pc_xzzz[j] * pb_y[j] + 8.0 * pa_xz[j] * pc_xyzz[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xzzz[j] * pb_yz[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_zz[j] + pc_xxzz[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_xxzz[j] * pa_z[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_zz[j] + pc_xxzz[j] * pb_yzz[j]);

                t_xxzz_yzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pc_yzz[j] - 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yzzzz[j] - fl1_fx * pa_z[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] - fl1_fx * pc_yzzz[j] * pb_z[j] - pa_xx[j] * pc_yzzzz[j] - 4.0 * pa_xz[j] * pc_xyzzz[j] - 2.0 * pa_x[j] * pc_xzzzz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xyzzz[j] * pb_z[j] - pc_xxyzz[j] * pa_zz[j] - 2.0 * pc_xxzzz[j] * pa_z[j] * pb_y[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xxzzz[j] * pb_yz[j] - pc_xxyzz[j] * pb_zz[j]);

                t_xxzz_yzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + 2.0 * pa_x[j] * pc_xyzzzz[j] + 2.0 * pc_xxyzzz[j] * pa_z[j] + pc_xxzzzz[j] * pb_y[j] + 2.0 * pc_xxyzzz[j] * pb_z[j]);

                t_xxzz_yzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_59_60(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (59,60)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(34 * idx + 3);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(34 * idx + 11);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xxzz = paDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxzzzzz = pcDistances.data(119 * idx + 103);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxzz_zzz = primBuffer.data(150 * idx + 59);

            // Batch of Integrals (59,60)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xxzz, pa_xz, pa_xzz, pa_z, pa_zz, pb_z, pb_zz, pb_zzz, \
                                     pc_x, pc_xx, pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xxzzzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxzz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxzz_zzz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xxz[j] * fl2_fx + 2.25 * pa_xx[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 1.5 * pa_xxzz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xxz[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] + pa_xxzz[j] * pb_zzz[j]);

                t_xxzz_zzz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 3.375 * fl3_fx * pb_z[j] - 3.0 * pa_xxz[j] * fl2_fx - 3.75 * pa_xx[j] * pc_z[j] * fl2_fx - 4.5 * pa_xx[j] * fl2_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_zz[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_xxzz[j] * pb_z[j] * fl1_fx - 1.5 * pa_xxzz[j] * pc_z[j] * fl1_fx - 9.0 * pa_xxz[j] * pc_z[j] * pb_z[j] * fl1_fx - 3.0 * pa_xxz[j] * fl1_fx * pb_zz[j] - 4.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xzz[j] * pc_x[j] * pb_z[j] * fl1_fx - 6.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] - 0.5 * fl2_fx * pb_zzz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_zzz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] - 3.0 * pa_xxzz[j] * pb_zz[j] * pc_z[j] - 2.0 * pa_xxz[j] * pc_z[j] * pb_zzz[j] - 2.0 * pa_xzz[j] * pc_x[j] * pb_zzz[j]);

                t_xxzz_zzz[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 1.5 * pa_xxz[j] * fl2_fx + 7.5 * pa_xx[j] * pc_z[j] * fl2_fx + 2.25 * pa_xx[j] * fl2_fx * pb_z[j] + 6.0 * pa_xz[j] * pc_x[j] * fl2_fx + 7.5 * pa_x[j] * pc_xz[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 2.25 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 1.5 * pa_xxzz[j] * pc_z[j] * fl1_fx + 9.0 * pa_xxz[j] * pc_z[j] * pb_z[j] * fl1_fx + 6.0 * pa_xxz[j] * pc_zz[j] * fl1_fx + 9.0 * pa_xx[j] * pc_zz[j] * pb_z[j] * fl1_fx + 4.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xzz[j] * pc_x[j] * pb_z[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_xz[j] * fl1_fx + 18.0 * pa_xz[j] * pc_xz[j] * pb_z[j] * fl1_fx + 6.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] + 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xx[j] * pa_zz[j] * pb_z[j] * fl1_fx + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] + 3.0 * pa_xxzz[j] * pb_z[j] * pc_zz[j] + 6.0 * pa_xxz[j] * pc_zz[j] * pb_zz[j] + pa_xx[j] * pc_zz[j] * pb_zzz[j] + 6.0 * pa_xzz[j] * pc_xz[j] * pb_zz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_zzz[j] + pc_xx[j] * pa_zz[j] * pb_zzz[j]);

                t_xxzz_zzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pb_z[j] - 3.75 * pa_xx[j] * pc_z[j] * fl2_fx - 3.0 * pa_xz[j] * pc_x[j] * fl2_fx - 15.0 * pa_x[j] * pc_xz[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 3.0 * pc_xx[j] * pa_z[j] * fl2_fx - 3.75 * pc_xxz[j] * fl2_fx - 4.5 * pc_xx[j] * fl2_fx * pb_z[j] - 6.0 * fl2_fx * pa_z[j] * pc_zz[j] - 9.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.5 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 6.0 * pa_xxz[j] * pc_zz[j] * fl1_fx - 9.0 * pa_xx[j] * pc_zz[j] * pb_z[j] * fl1_fx - 5.0 * pa_xx[j] * pc_zzz[j] * fl1_fx - 3.0 * pa_xzz[j] * pc_xz[j] * fl1_fx - 18.0 * pa_xz[j] * pc_xz[j] * pb_z[j] * fl1_fx - 12.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 18.0 * pa_x[j] * pc_xzz[j] * pb_z[j] * fl1_fx - 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xx[j] * pa_zz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_zz[j] * fl1_fx - 9.0 * pc_xxz[j] * pa_z[j] * pb_z[j] * fl1_fx - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] - pa_xxzz[j] * pc_zzz[j] - 6.0 * pa_xxz[j] * pc_zzz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_zzz[j] * pb_zz[j] - 6.0 * pa_xzz[j] * pc_xzz[j] * pb_z[j] - 12.0 * pa_xz[j] * pc_xzz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_zzz[j] - 3.0 * pc_xxz[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_zzz[j]);

                t_xxzz_zzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 7.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 7.5 * pc_xxz[j] * fl2_fx + 2.25 * pc_xx[j] * fl2_fx * pb_z[j] + 5.0 * fl2_fx * pc_zzz[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 5.0 * pa_xx[j] * pc_zzz[j] * fl1_fx + 12.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + 18.0 * pa_x[j] * pc_xzz[j] * pb_z[j] * fl1_fx + 10.0 * pa_x[j] * pc_xzzz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xxz[j] * pa_z[j] * pb_z[j] * fl1_fx + 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xxzz[j] * pb_z[j] * fl1_fx + 4.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_z[j] * pc_zzzz[j] + 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] + 2.0 * pa_xxz[j] * pc_zzzz[j] + 3.0 * pa_xx[j] * pc_zzzz[j] * pb_z[j] + 2.0 * pa_xzz[j] * pc_xzzz[j] + 12.0 * pa_xz[j] * pc_xzzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xzzz[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xxzz[j] * pa_z[j] * pb_zz[j] + pc_xxzz[j] * pb_zzz[j]);

                t_xxzz_zzz[j] += fl_s_0_0_5 * (-3.75 * pc_xxz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 10.0 * pa_x[j] * pc_xzzz[j] * fl1_fx - 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - 9.0 * pc_xxzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_xxzzz[j] * fl1_fx - 0.5 * fl1_fx * pc_zzzzz[j] - fl1_fx * pa_z[j] * pc_zzzz[j] - 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] - pa_xx[j] * pc_zzzzz[j] - 4.0 * pa_xz[j] * pc_xzzzz[j] - 6.0 * pa_x[j] * pc_xzzzz[j] * pb_z[j] - pc_xxzzz[j] * pa_zz[j] - 6.0 * pc_xxzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxzzz[j] * pb_zz[j]);

                t_xxzz_zzz[j] += fl_s_0_0_6 * (5.0 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + 2.0 * pa_x[j] * pc_xzzzzz[j] + 2.0 * pc_xxzzzz[j] * pa_z[j] + 3.0 * pc_xxzzzz[j] * pb_z[j]);

                t_xxzz_zzz[j] += -fl_s_0_0_7 * pc_xxzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_60_61(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (60,61)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_xxx = primBuffer.data(150 * idx + 60);

            // Batch of Integrals (60,61)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_x, pb_xx, pb_xxx, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyy, pc_xxxy, pc_xxxyy, \
                                     pc_xxxyyy, pc_xxy, pc_xxyy, pc_xxyyy, pc_xy, pc_xyy, pc_xyyy, pc_y, pc_yy, pc_yyy, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyy_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyy_xxx[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pa_y[j] + 0.75 * fl2_fx * pa_yyy[j] + 2.25 * pa_xy[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xyyy[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pa_yyy[j] * pb_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xxx[j] + pa_xyyy[j] * pb_xxx[j]);

                t_xyyy_xxx[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pa_y[j] - 1.125 * fl3_fx * pc_y[j] - 1.5 * fl2_fx * pa_yyy[j] - 2.25 * fl2_fx * pa_yy[j] * pc_y[j] - 4.5 * pa_xy[j] * fl2_fx * pb_x[j] - 2.25 * pa_xy[j] * fl2_fx * pc_x[j] - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 6.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 4.5 * fl2_fx * pa_y[j] * pb_xx[j] - 2.25 * fl2_fx * pc_y[j] * pb_xx[j] - 1.5 * pa_xyyy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xyyy[j] * pc_x[j] * fl1_fx - 4.5 * pa_xyy[j] * pc_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_x[j] * pa_yyy[j] * pb_x[j] * fl1_fx - 4.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_xx[j] - 1.5 * fl1_fx * pa_yyy[j] * pb_xx[j] - 4.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xyyy[j] * pb_xx[j] * pc_x[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_xxx[j] - pc_x[j] * pa_yyy[j] * pb_xxx[j]);

                t_xyyy_xxx[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pa_y[j] + 3.375 * fl3_fx * pc_y[j] + 4.5 * fl2_fx * pa_yy[j] * pc_y[j] + 2.25 * fl2_fx * pa_y[j] * pc_yy[j] + 0.75 * fl2_fx * pa_yyy[j] + 4.5 * pa_xy[j] * fl2_fx * pc_x[j] + 2.25 * pa_xy[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 13.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 4.5 * pc_xx[j] * pa_y[j] * fl2_fx + 6.75 * pc_xy[j] * fl2_fx * pb_x[j] + 4.5 * fl2_fx * pc_y[j] * pb_xx[j] + 2.25 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xyyy[j] * pc_x[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_y[j] * pb_x[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_xy[j] * fl1_fx + 4.5 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_yyy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yyy[j] * fl1_fx + 13.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx + 4.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xx[j] + 4.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_xx[j] + 4.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_xyyy[j] * pb_x[j] * pc_xx[j] + 9.0 * pa_xyy[j] * pc_xy[j] * pb_xx[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_yyy[j] * pb_xx[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_xxx[j]);

                t_xyyy_xxx[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pa_y[j] - 4.5 * fl2_fx * pa_y[j] * pc_yy[j] - 0.75 * fl2_fx * pc_yyy[j] - 2.25 * fl2_fx * pa_yy[j] * pc_y[j] - 2.25 * pa_xy[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_xy[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 9.0 * pc_xx[j] * pa_y[j] * fl2_fx - 6.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 13.5 * pc_xy[j] * fl2_fx * pb_x[j] - 4.5 * pc_xxy[j] * fl2_fx - 2.25 * fl2_fx * pc_y[j] * pb_xx[j] - 4.5 * pa_xyy[j] * pc_xy[j] * fl1_fx - 4.5 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 4.5 * pa_xy[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yyy[j] * fl1_fx - 13.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxy[j] * pa_yy[j] * fl1_fx - 13.5 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * fl1_fx * pc_yyy[j] * pb_xx[j] - 4.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xx[j] - 1.5 * pa_xy[j] * fl1_fx * pc_xxx[j] - 4.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] - 4.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] - pa_xyyy[j] * pc_xxx[j] - 9.0 * pa_xyy[j] * pc_xxy[j] * pb_x[j] - 9.0 * pa_xy[j] * pc_xyy[j] * pb_xx[j] - pa_x[j] * pc_yyy[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_yyy[j] * pb_x[j] - 9.0 * pc_xxy[j] * pa_yy[j] * pb_xx[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_xxx[j]);

                t_xyyy_xxx[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 1.5 * fl2_fx * pc_yyy[j] + 2.25 * fl2_fx * pa_y[j] * pc_yy[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 4.5 * pc_xx[j] * pa_y[j] * fl2_fx + 9.0 * pc_xxy[j] * fl2_fx + 6.75 * pc_xy[j] * fl2_fx * pb_x[j] + 4.5 * pa_xy[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 9.0 * pc_xxy[j] * pa_yy[j] * fl1_fx + 13.5 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 4.5 * pc_xyyy[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pc_yyy[j] * pb_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 4.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxxy[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xyy[j] * pc_xxxy[j] + 9.0 * pa_xy[j] * pc_xxyy[j] * pb_x[j] + 3.0 * pa_x[j] * pc_xyyy[j] * pb_xx[j] + pc_xxxx[j] * pa_yyy[j] + 9.0 * pc_xxxy[j] * pa_yy[j] * pb_x[j] + 9.0 * pc_xxyy[j] * pa_y[j] * pb_xx[j] + pc_xyyy[j] * pb_xxx[j]);

                t_xyyy_xxx[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yyy[j] - 4.5 * pc_xxy[j] * fl2_fx - 1.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 9.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - 4.5 * pc_xyyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 1.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxxy[j] * fl1_fx - 4.5 * pc_xxxy[j] * fl1_fx * pb_x[j] - 3.0 * pa_xy[j] * pc_xxxyy[j] - 3.0 * pa_x[j] * pc_xxyyy[j] * pb_x[j] - 3.0 * pc_xxxxy[j] * pa_yy[j] - 9.0 * pc_xxxyy[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxyyy[j] * pb_xx[j]);

                t_xyyy_xxx[j] += fl_s_0_0_6 * (3.0 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxxxy[j] * fl1_fx + pa_x[j] * pc_xxxyyy[j] + 3.0 * pc_xxxxyy[j] * pa_y[j] + 3.0 * pc_xxxyyy[j] * pb_x[j]);

                t_xyyy_xxx[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_61_62(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (61,62)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_xxy = primBuffer.data(150 * idx + 61);

            // Batch of Integrals (61,62)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_x, pb_xx, pb_xxy, pb_xy, \
                                     pb_y, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xyyy_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyy_xxy[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.75 * pa_xyy[j] * fl2_fx + 1.5 * fl2_fx * pa_yy[j] * pb_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xyyy[j] * fl1_fx * pb_y[j] + 1.5 * pa_xyy[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_yyy[j] * pb_xy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xxy[j] + pa_xyyy[j] * pb_xxy[j]);

                t_xyyy_xxy[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 1.5 * pa_xyy[j] * fl2_fx - 2.25 * pa_xy[j] * pc_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * fl2_fx * pa_yy[j] * pb_x[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 1.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pa_y[j] * pb_xy[j] - 1.5 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * pa_xyyy[j] * fl1_fx * pc_y[j] - 0.5 * pa_xyyy[j] * fl1_fx * pb_y[j] - 1.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_y[j] - 3.0 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_x[j] - 1.5 * pa_xyy[j] * fl1_fx * pb_xx[j] - 4.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_x[j] * pa_yyy[j] * fl1_fx * pb_y[j] - 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xx[j] - fl1_fx * pa_yyy[j] * pb_x[j] * pc_y[j] - 3.0 * fl1_fx * pa_yy[j] * pc_y[j] * pb_xy[j] - fl1_fx * pa_yyy[j] * pb_xy[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] - pa_xyyy[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xyyy[j] * pb_xy[j] * pc_x[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_xxy[j] - pc_x[j] * pa_yyy[j] * pb_xxy[j]);

                t_xyyy_xxy[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.75 * pa_xyy[j] * fl2_fx + 4.5 * pa_xy[j] * pc_y[j] * fl2_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 4.5 * pc_x[j] * pa_yy[j] * fl2_fx + 6.75 * pc_xy[j] * pa_y[j] * fl2_fx + 9.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 3.0 * fl2_fx * pc_yy[j] * pb_x[j] + 1.5 * fl2_fx * pa_yy[j] * pb_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 3.0 * fl2_fx * pc_y[j] * pb_xy[j] + 1.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xyyy[j] * fl1_fx * pc_y[j] + 1.5 * pa_xyy[j] * pc_yy[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_y[j] + 1.5 * pa_xyy[j] * fl1_fx * pc_xx[j] + 3.0 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_x[j] + 1.5 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_y[j] + 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] + 4.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xy[j] * pa_yyy[j] * fl1_fx + 1.5 * pc_x[j] * pa_yyy[j] * fl1_fx * pb_y[j] + 4.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_x[j] + 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xx[j] + 4.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] + 3.0 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_x[j] + 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xy[j] + fl1_fx * pa_yyy[j] * pb_x[j] * pc_y[j] + 3.0 * fl1_fx * pa_yy[j] * pc_y[j] * pb_xy[j] + 1.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xyyy[j] * pb_x[j] * pc_xy[j] + pa_xyyy[j] * pc_xx[j] * pb_y[j] + 3.0 * pa_xyy[j] * pc_yy[j] * pb_xx[j] + 6.0 * pa_xyy[j] * pc_xy[j] * pb_xy[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_xxy[j] + pc_xy[j] * pa_yyy[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_yyy[j] * pb_xy[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_xxy[j]);

                t_xyyy_xxy[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 2.25 * pa_xy[j] * pc_y[j] * fl2_fx - 3.0 * pa_x[j] * pc_yy[j] * fl2_fx - 2.25 * pc_x[j] * pa_yy[j] * fl2_fx - 13.5 * pc_xy[j] * pa_y[j] * fl2_fx - 4.5 * pc_xyy[j] * fl2_fx - 6.0 * fl2_fx * pc_yy[j] * pb_x[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_xx[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxx[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 1.5 * fl2_fx * pc_y[j] * pb_xy[j] - 1.5 * pa_xyy[j] * pc_yy[j] * fl1_fx - 1.5 * pa_xyy[j] * fl1_fx * pc_xx[j] - 1.5 * pa_xy[j] * pc_yyy[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_y[j] - 4.5 * pa_xy[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] - 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xy[j] * pa_yyy[j] * fl1_fx - 4.5 * pc_xyy[j] * pa_yy[j] * fl1_fx - 4.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxx[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_x[j] - 4.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] - 9.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] - 4.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_xx[j] - 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_x[j] - fl1_fx * pc_yyy[j] * pb_xy[j] - 3.0 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_x[j] - 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xy[j] - 1.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] - 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxy[j] - pa_xyyy[j] * pc_xxy[j] - 6.0 * pa_xyy[j] * pc_xyy[j] * pb_x[j] - 3.0 * pa_xyy[j] * pc_xxy[j] * pb_y[j] - 3.0 * pa_xy[j] * pc_yyy[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xyy[j] * pb_xy[j] - pa_x[j] * pc_yyy[j] * pb_xxy[j] - 2.0 * pc_xxy[j] * pa_yyy[j] * pb_x[j] - pc_xxx[j] * pa_yyy[j] * pb_y[j] - 3.0 * pc_xyy[j] * pa_yy[j] * pb_xx[j] - 6.0 * pc_xxy[j] * pa_yy[j] * pb_xy[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_xxy[j]);

                t_xyyy_xxy[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 6.75 * pc_xy[j] * pa_y[j] * fl2_fx + 9.0 * pc_xyy[j] * fl2_fx + 3.0 * fl2_fx * pc_yy[j] * pb_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xxx[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xy[j] * pc_yyy[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xxy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyy[j] * pa_yy[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_yy[j] * fl1_fx + 4.5 * pc_xyyy[j] * pa_y[j] * fl1_fx + 4.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] + 4.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + 9.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 6.0 * pc_xxyy[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_xx[j] + fl1_fx * pc_yyyy[j] * pb_x[j] + 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_x[j] + fl1_fx * pc_yyy[j] * pb_xy[j] + 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_xy[j] + 3.0 * pa_xyy[j] * pc_xxyy[j] + 6.0 * pa_xy[j] * pc_xyyy[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xxyy[j] * pb_y[j] + pa_x[j] * pc_yyyy[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_xy[j] + pc_xxxy[j] * pa_yyy[j] + 6.0 * pc_xxyy[j] * pa_yy[j] * pb_x[j] + 3.0 * pc_xxxy[j] * pa_yy[j] * pb_y[j] + 3.0 * pc_xyyy[j] * pa_y[j] * pb_xx[j] + 6.0 * pc_xxyy[j] * pa_y[j] * pb_xy[j] + pc_xyyy[j] * pb_xxy[j]);

                t_xyyy_xxy[j] += fl_s_0_0_5 * (-4.5 * pc_xyy[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 4.5 * pc_xyyy[j] * pa_y[j] * fl1_fx - 4.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyyy[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxxyy[j] * fl1_fx - 6.0 * pc_xxyy[j] * fl1_fx * pb_x[j] - fl1_fx * pc_yyyy[j] * pb_x[j] - 1.5 * pc_xxxy[j] * fl1_fx * pb_y[j] - 3.0 * pa_xy[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyy[j] * pb_x[j] - pa_x[j] * pc_xxyyy[j] * pb_y[j] - 3.0 * pc_xxxyy[j] * pa_yy[j] - 6.0 * pc_xxyyy[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxyy[j] * pa_y[j] * pb_y[j] - pc_xyyyy[j] * pb_xx[j] - 2.0 * pc_xxyyy[j] * pb_xy[j]);

                t_xyyy_xxy[j] += fl_s_0_0_6 * (1.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xxxyy[j] * fl1_fx + pa_x[j] * pc_xxyyyy[j] + 3.0 * pc_xxxyyy[j] * pa_y[j] + 2.0 * pc_xxyyyy[j] * pb_x[j] + pc_xxxyyy[j] * pb_y[j]);

                t_xyyy_xxy[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_62_63(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (62,63)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_xxz = primBuffer.data(150 * idx + 62);

            // Batch of Integrals (62,63)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_x, pb_xx, pb_xxz, pb_xz, \
                                     pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyz, pc_xxxyyz, \
                                     pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, \
                                     pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyyy_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyyy_xxz[j] = fl_s_0_0_0 * (0.75 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xyyy[j] * fl1_fx * pb_z[j] + fl1_fx * pa_yyy[j] * pb_xz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xxz[j] + pa_xyyy[j] * pb_xxz[j]);

                t_xyyy_xxz[j] += fl_s_0_0_1 * (-0.75 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_xy[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 3.0 * fl2_fx * pa_y[j] * pb_xz[j] - 1.5 * fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * pa_xyyy[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyyy[j] * fl1_fx * pb_z[j] - 1.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_z[j] - 1.5 * pc_x[j] * pa_yyy[j] * fl1_fx * pb_z[j] - fl1_fx * pa_yyy[j] * pb_x[j] * pc_z[j] - 3.0 * fl1_fx * pa_yy[j] * pc_y[j] * pb_xz[j] - fl1_fx * pa_yyy[j] * pb_xz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] - pa_xyyy[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xyyy[j] * pb_xz[j] * pc_x[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_xxz[j] - pc_x[j] * pa_yyy[j] * pb_xxz[j]);

                t_xyyy_xxz[j] += fl_s_0_0_2 * (1.5 * pa_xy[j] * fl2_fx * pc_z[j] + 0.75 * pa_xy[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pc_y[j] * pb_xz[j] + 1.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xyyy[j] * fl1_fx * pc_z[j] + 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_z[j] + 1.5 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xz[j] * pa_yyy[j] * fl1_fx + 1.5 * pc_x[j] * pa_yyy[j] * fl1_fx * pb_z[j] + 4.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] + 3.0 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_x[j] + 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xz[j] + fl1_fx * pa_yyy[j] * pb_x[j] * pc_z[j] + 3.0 * fl1_fx * pa_yy[j] * pc_y[j] * pb_xz[j] + 3.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xyyy[j] * pb_x[j] * pc_xz[j] + pa_xyyy[j] * pc_xx[j] * pb_z[j] + 3.0 * pa_xyy[j] * pc_yz[j] * pb_xx[j] + 6.0 * pa_xyy[j] * pc_xy[j] * pb_xz[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_xxz[j] + pc_xz[j] * pa_yyy[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_yyy[j] * pb_xz[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_xxz[j]);

                t_xyyy_xxz[j] += fl_s_0_0_3 * (-0.75 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 4.5 * pc_xz[j] * pa_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_xz[j] - 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yyz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xz[j] * pa_yyy[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 4.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] - 4.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] - fl1_fx * pc_yyy[j] * pb_xz[j] - 3.0 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_x[j] - 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xz[j] - 1.5 * pa_xy[j] * fl1_fx * pc_xxz[j] - 3.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xz[j] - 1.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - pa_xyyy[j] * pc_xxz[j] - 6.0 * pa_xyy[j] * pc_xyz[j] * pb_x[j] - 3.0 * pa_xyy[j] * pc_xxy[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_yyz[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xyy[j] * pb_xz[j] - pa_x[j] * pc_yyy[j] * pb_xxz[j] - 2.0 * pc_xxz[j] * pa_yyy[j] * pb_x[j] - pc_xxx[j] * pa_yyy[j] * pb_z[j] - 3.0 * pc_xyz[j] * pa_yy[j] * pb_xx[j] - 6.0 * pc_xxy[j] * pa_yy[j] * pb_xz[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_xxz[j]);

                t_xyyy_xxz[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xy[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 4.5 * pc_xyyz[j] * pa_y[j] * fl1_fx + 4.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + fl1_fx * pc_yyyz[j] * pb_x[j] + 3.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] + fl1_fx * pc_yyy[j] * pb_xz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_xxz[j] + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_xz[j] + 3.0 * pa_xyy[j] * pc_xxyz[j] + 6.0 * pa_xy[j] * pc_xyyz[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xxyy[j] * pb_z[j] + pa_x[j] * pc_yyyz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_xz[j] + pc_xxxz[j] * pa_yyy[j] + 6.0 * pc_xxyz[j] * pa_yy[j] * pb_x[j] + 3.0 * pc_xxxy[j] * pa_yy[j] * pb_z[j] + 3.0 * pc_xyyz[j] * pa_y[j] * pb_xx[j] + 6.0 * pc_xxyy[j] * pa_y[j] * pb_xz[j] + pc_xyyy[j] * pb_xxz[j]);

                t_xyyy_xxz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 4.5 * pc_xyyz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - fl1_fx * pc_yyyz[j] * pb_x[j] - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xy[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - pa_x[j] * pc_xxyyy[j] * pb_z[j] - 3.0 * pc_xxxyz[j] * pa_yy[j] - 6.0 * pc_xxyyz[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxyy[j] * pa_y[j] * pb_z[j] - pc_xyyyz[j] * pb_xx[j] - 2.0 * pc_xxyyy[j] * pb_xz[j]);

                t_xyyy_xxz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_x[j] * pc_xxyyyz[j] + 3.0 * pc_xxxyyz[j] * pa_y[j] + 2.0 * pc_xxyyyz[j] * pb_x[j] + pc_xxxyyy[j] * pb_z[j]);

                t_xyyy_xxz[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_63_64(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (63,64)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyy = pcDistances.data(119 * idx + 98);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_xyy = primBuffer.data(150 * idx + 63);

            // Batch of Integrals (63,64)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_x, pb_xy, pb_xyy, pb_y, \
                                     pb_yy, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyy, pc_xy, pc_xyy, \
                                     pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyy_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyy_xyy[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pa_y[j] + 0.75 * fl3_fx * pb_y[j] + 2.25 * pa_xy[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_yyy[j] + 1.5 * fl2_fx * pa_yy[j] * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * pa_xyyy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xyy[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_yyy[j] * pb_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xyy[j] + pa_xyyy[j] * pb_xyy[j]);

                t_xyyy_xyy[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pa_y[j] - 1.875 * fl3_fx * pc_y[j] - 2.25 * fl3_fx * pb_y[j] - 2.25 * pa_xy[j] * fl2_fx * pc_x[j] - 4.5 * pa_xy[j] * fl2_fx * pb_x[j] - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.5 * fl2_fx * pa_yyy[j] - 2.25 * fl2_fx * pa_yy[j] * pc_y[j] - 3.0 * fl2_fx * pa_yy[j] * pb_y[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pb_xy[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pa_y[j] * pb_yy[j] - 0.75 * fl2_fx * pc_y[j] * pb_yy[j] - 0.5 * pa_xyyy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xyyy[j] * pc_x[j] * fl1_fx - 4.5 * pa_xyy[j] * pc_y[j] * pb_x[j] * fl1_fx - 3.0 * pa_xyy[j] * fl1_fx * pc_x[j] * pb_y[j] - 3.0 * pa_xyy[j] * fl1_fx * pb_xy[j] - 9.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xy[j] - 0.5 * pc_x[j] * pa_yyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xy[j] - fl1_fx * pa_yyy[j] * pb_y[j] * pc_y[j] - 1.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_yy[j] - 0.5 * fl1_fx * pa_yyy[j] * pb_yy[j] - 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_xyyy[j] * pb_xy[j] * pc_y[j] - pa_xyyy[j] * pc_x[j] * pb_yy[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_xyy[j] - pc_x[j] * pa_yyy[j] * pb_xyy[j]);

                t_xyyy_xyy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pa_y[j] + 5.625 * fl3_fx * pc_y[j] + 2.25 * fl3_fx * pb_y[j] + 4.5 * pa_xy[j] * fl2_fx * pc_x[j] + 2.25 * pa_xy[j] * fl2_fx * pb_x[j] + 3.75 * pa_x[j] * pc_xy[j] * fl2_fx + 7.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 2.25 * pc_xx[j] * pa_y[j] * fl2_fx + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pb_x[j] + 4.5 * fl2_fx * pa_yy[j] * pc_y[j] + 4.5 * fl2_fx * pa_y[j] * pc_yy[j] + 9.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 3.0 * fl2_fx * pc_yy[j] * pb_y[j] + 0.25 * fl2_fx * pa_yyy[j] + 1.5 * fl2_fx * pa_yy[j] * pb_y[j] + 3.0 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * fl2_fx * pb_xy[j] + 1.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.75 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * pa_xyyy[j] * pc_x[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_y[j] * pb_x[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xyy[j] * fl1_fx * pc_x[j] * pb_y[j] + 9.0 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 9.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xy[j] + 6.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_x[j] * pa_yyy[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yyy[j] * fl1_fx + 4.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] + 3.0 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xy[j] + 9.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_yyy[j] * pc_yy[j] + 3.0 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_y[j] + 1.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yy[j] + fl1_fx * pa_yyy[j] * pb_y[j] * pc_y[j] + 1.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] + 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xyy[j] + pa_xyyy[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xyyy[j] * pc_xy[j] * pb_y[j] + 6.0 * pa_xyy[j] * pc_yy[j] * pb_xy[j] + 3.0 * pa_xyy[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_yyy[j] * pb_xy[j] + pc_xx[j] * pa_yyy[j] * pb_yy[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_xyy[j]);

                t_xyyy_xyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pa_y[j] - 0.75 * fl3_fx * pb_y[j] - 2.25 * pa_xy[j] * fl2_fx * pc_x[j] - 7.5 * pa_x[j] * pc_xy[j] * fl2_fx - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 4.5 * pc_xx[j] * pa_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 3.75 * pc_xxy[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pb_x[j] - 9.0 * fl2_fx * pa_y[j] * pc_yy[j] - 2.5 * fl2_fx * pc_yyy[j] - 6.0 * fl2_fx * pc_yy[j] * pb_y[j] - 2.25 * fl2_fx * pa_yy[j] * pc_y[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_y[j] * pb_yy[j] - 4.5 * pa_xyy[j] * pc_xy[j] * fl1_fx - 9.0 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 5.0 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xx[j] * pa_yyy[j] * fl1_fx - 4.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxy[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] - 9.0 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - 9.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xyy[j] * fl1_fx * pb_xy[j] - 1.5 * fl1_fx * pa_yy[j] * pc_yyy[j] - 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_yy[j] - 0.5 * fl1_fx * pa_yyy[j] * pc_yy[j] - 3.0 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_y[j] - 1.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yy[j] - 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xyy[j] - pa_xyyy[j] * pc_xyy[j] - 3.0 * pa_xyy[j] * pc_yyy[j] * pb_x[j] - 6.0 * pa_xyy[j] * pc_xyy[j] * pb_y[j] - 6.0 * pa_xy[j] * pc_yyy[j] * pb_xy[j] - 3.0 * pa_xy[j] * pc_xyy[j] * pb_yy[j] - pa_x[j] * pc_yyy[j] * pb_xyy[j] - pc_xyy[j] * pa_yyy[j] * pb_x[j] - 2.0 * pc_xxy[j] * pa_yyy[j] * pb_y[j] - 6.0 * pc_xyy[j] * pa_yy[j] * pb_xy[j] - 3.0 * pc_xxy[j] * pa_yy[j] * pb_yy[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_xyy[j]);

                t_xyyy_xyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 3.75 * pa_x[j] * pc_xy[j] * fl2_fx + 2.25 * pc_xx[j] * pa_y[j] * fl2_fx + 7.5 * pc_xxy[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pb_x[j] + 5.0 * fl2_fx * pc_yyy[j] + 4.5 * fl2_fx * pa_y[j] * pc_yy[j] + 3.0 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 9.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 5.0 * pa_x[j] * pc_xyyy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 4.5 * pc_xxy[j] * pa_yy[j] * fl1_fx + 9.0 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 9.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + 5.0 * pc_xyyy[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 6.0 * pc_xyy[j] * fl1_fx * pb_xy[j] + 1.5 * fl1_fx * pa_y[j] * pc_yyyy[j] + fl1_fx * pc_yyyy[j] * pb_y[j] + 1.5 * fl1_fx * pa_yy[j] * pc_yyy[j] + 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_yy[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xyy[j] * pc_xyyy[j] + 3.0 * pa_xy[j] * pc_yyyy[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xyyy[j] * pb_y[j] + 2.0 * pa_x[j] * pc_yyyy[j] * pb_xy[j] + pa_x[j] * pc_xyyy[j] * pb_yy[j] + pc_xxyy[j] * pa_yyy[j] + 3.0 * pc_xyyy[j] * pa_yy[j] * pb_x[j] + 6.0 * pc_xxyy[j] * pa_yy[j] * pb_y[j] + 6.0 * pc_xyyy[j] * pa_y[j] * pb_xy[j] + 3.0 * pc_xxyy[j] * pa_y[j] * pb_yy[j] + pc_xyyy[j] * pb_xyy[j]);

                t_xyyy_xyy[j] += fl_s_0_0_5 * (-3.75 * pc_xxy[j] * fl2_fx - 2.5 * fl2_fx * pc_yyy[j] - 5.0 * pa_x[j] * pc_xyyy[j] * fl1_fx - 9.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - 5.0 * pc_xyyy[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxyyy[j] * fl1_fx - 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyyy[j] - 1.5 * fl1_fx * pa_y[j] * pc_yyyy[j] - fl1_fx * pc_yyyy[j] * pb_y[j] - 3.0 * pa_xy[j] * pc_xyyyy[j] - pa_x[j] * pc_yyyyy[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyyyy[j] * pb_y[j] - 3.0 * pc_xxyyy[j] * pa_yy[j] - 3.0 * pc_xyyyy[j] * pa_y[j] * pb_x[j] - 6.0 * pc_xxyyy[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xyyyy[j] * pb_xy[j] - pc_xxyyy[j] * pb_yy[j]);

                t_xyyy_xyy[j] += fl_s_0_0_6 * (5.0 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyy[j] + pa_x[j] * pc_xyyyyy[j] + 3.0 * pc_xxyyyy[j] * pa_y[j] + pc_xyyyyy[j] * pb_x[j] + 2.0 * pc_xxyyyy[j] * pb_y[j]);

                t_xyyy_xyy[j] += -fl_s_0_0_7 * pc_xxyyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_64_65(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (64,65)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_xyz = primBuffer.data(150 * idx + 64);

            // Batch of Integrals (64,65)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_x, pb_xy, pb_xyz, pb_xz, \
                                     pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyz, \
                                     pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, \
                                     pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, \
                                     pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xyyy_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyy_xyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 1.5 * pa_xyy[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yyy[j] * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xyz[j] + pa_xyyy[j] * pb_xyz[j]);

                t_xyyy_xyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_yy[j] * pb_z[j] - 2.25 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_yz[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 1.5 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_z[j] - 1.5 * pa_xyy[j] * fl1_fx * pc_x[j] * pb_z[j] - 1.5 * pa_xyy[j] * fl1_fx * pb_xz[j] - 4.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xz[j] - 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xz[j] - 0.5 * fl1_fx * pa_yyy[j] * pb_y[j] * pc_z[j] - 0.5 * fl1_fx * pa_yyy[j] * pc_y[j] * pb_z[j] - 1.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yyy[j] * pb_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] - 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] - pa_xyyy[j] * pb_xy[j] * pc_z[j] - pa_xyyy[j] * pb_xz[j] * pc_y[j] - pa_xyyy[j] * pc_x[j] * pb_yz[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_xyz[j] - pc_x[j] * pa_yyy[j] * pb_xyz[j]);

                t_xyyy_xyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * fl2_fx * pa_yy[j] * pc_z[j] + 2.25 * fl2_fx * pa_y[j] * pc_yz[j] + 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_xz[j] + 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_y[j] * pb_yz[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 1.5 * pa_xyy[j] * fl1_fx * pc_xz[j] + 1.5 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_z[j] + 1.5 * pa_xyy[j] * fl1_fx * pc_x[j] * pb_z[j] + 4.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_x[j] + 4.5 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xz[j] + 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xz[j] + 4.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yyy[j] * pc_yz[j] + 1.5 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_y[j] + 1.5 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_z[j] + 1.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yz[j] + 0.5 * fl1_fx * pa_yyy[j] * pb_y[j] * pc_z[j] + 0.5 * fl1_fx * pa_yyy[j] * pc_y[j] * pb_z[j] + 1.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_y[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] + 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xyz[j] + pa_xyyy[j] * pb_x[j] * pc_yz[j] + pa_xyyy[j] * pc_xz[j] * pb_y[j] + pa_xyyy[j] * pc_xy[j] * pb_z[j] + 3.0 * pa_xyy[j] * pc_yz[j] * pb_xy[j] + 3.0 * pa_xyy[j] * pc_yy[j] * pb_xz[j] + 3.0 * pa_xyy[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_xyz[j] + pc_xz[j] * pa_yyy[j] * pb_xy[j] + pc_xy[j] * pa_yyy[j] * pb_xz[j] + pc_xx[j] * pa_yyy[j] * pb_yz[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_xyz[j]);

                t_xyyy_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 4.5 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 2.25 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 1.5 * pa_xyy[j] * fl1_fx * pc_xz[j] - 4.5 * pa_xy[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_x[j] - 4.5 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] - 4.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_x[j] - 4.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 4.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_xz[j] - 1.5 * fl1_fx * pa_yy[j] * pc_yyz[j] - 1.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] - 1.5 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yyy[j] * pc_yz[j] - 1.5 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_y[j] - 1.5 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_z[j] - 1.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_y[j] - 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xyz[j] - pa_xyyy[j] * pc_xyz[j] - 3.0 * pa_xyy[j] * pc_yyz[j] * pb_x[j] - 3.0 * pa_xyy[j] * pc_xyz[j] * pb_y[j] - 3.0 * pa_xyy[j] * pc_xyy[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_yyz[j] * pb_xy[j] - 3.0 * pa_xy[j] * pc_yyy[j] * pb_xz[j] - 3.0 * pa_xy[j] * pc_xyy[j] * pb_yz[j] - pa_x[j] * pc_yyy[j] * pb_xyz[j] - pc_xyz[j] * pa_yyy[j] * pb_x[j] - pc_xxz[j] * pa_yyy[j] * pb_y[j] - pc_xxy[j] * pa_yyy[j] * pb_z[j] - 3.0 * pc_xyz[j] * pa_yy[j] * pb_xy[j] - 3.0 * pc_xyy[j] * pa_yy[j] * pb_xz[j] - 3.0 * pc_xxy[j] * pa_yy[j] * pb_yz[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_xyz[j]);

                t_xyyy_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 3.0 * fl2_fx * pc_yyz[j] + 2.25 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 4.5 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx + 4.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_xz[j] + 1.5 * fl1_fx * pa_y[j] * pc_yyyz[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] + 1.5 * fl1_fx * pa_yy[j] * pc_yyz[j] + 1.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] + 1.5 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_yz[j] + 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xyy[j] * pc_xyyz[j] + 3.0 * pa_xy[j] * pc_yyyz[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_xyyy[j] * pb_z[j] + pa_x[j] * pc_yyyz[j] * pb_xy[j] + pa_x[j] * pc_yyyy[j] * pb_xz[j] + pa_x[j] * pc_xyyy[j] * pb_yz[j] + pc_xxyz[j] * pa_yyy[j] + 3.0 * pc_xyyz[j] * pa_yy[j] * pb_x[j] + 3.0 * pc_xxyz[j] * pa_yy[j] * pb_y[j] + 3.0 * pc_xxyy[j] * pa_yy[j] * pb_z[j] + 3.0 * pc_xyyz[j] * pa_y[j] * pb_xy[j] + 3.0 * pc_xyyy[j] * pa_y[j] * pb_xz[j] + 3.0 * pc_xxyy[j] * pa_y[j] * pb_yz[j] + pc_xyyy[j] * pb_xyz[j]);

                t_xyyy_xyz[j] += fl_s_0_0_5 * (-1.5 * fl2_fx * pc_yyz[j] - 0.75 * pc_xxz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 4.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyyyz[j] - 1.5 * fl1_fx * pa_y[j] * pc_yyyz[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xy[j] * pc_xyyyz[j] - pa_x[j] * pc_yyyyz[j] * pb_x[j] - pa_x[j] * pc_xyyyz[j] * pb_y[j] - pa_x[j] * pc_xyyyy[j] * pb_z[j] - 3.0 * pc_xxyyz[j] * pa_yy[j] - 3.0 * pc_xyyyz[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxyyz[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxyyy[j] * pa_y[j] * pb_z[j] - pc_xyyyz[j] * pb_xy[j] - pc_xyyyy[j] * pb_xz[j] - pc_xxyyy[j] * pb_yz[j]);

                t_xyyy_xyz[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + pa_x[j] * pc_xyyyyz[j] + 3.0 * pc_xxyyyz[j] * pa_y[j] + pc_xyyyyz[j] * pb_x[j] + pc_xxyyyz[j] * pb_y[j] + pc_xxyyyy[j] * pb_z[j]);

                t_xyyy_xyz[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_65_66(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (65,66)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_xzz = primBuffer.data(150 * idx + 65);

            // Batch of Integrals (65,66)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_x, pb_xz, pb_xzz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, \
                                     pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyy_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyy_xzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.25 * fl2_fx * pa_yyy[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xyyy[j] * pb_x[j] * fl1_fx + 0.5 * fl1_fx * pa_yyy[j] * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xzz[j] + pa_xyyy[j] * pb_xzz[j]);

                t_xyyy_xzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.5 * fl2_fx * pa_yyy[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 1.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_zz[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xyyy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xyyy[j] * pc_x[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_y[j] * pb_x[j] * fl1_fx - 0.5 * pc_x[j] * pa_yyy[j] * pb_x[j] * fl1_fx - fl1_fx * pa_yyy[j] * pb_z[j] * pc_z[j] - 1.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yyy[j] * pb_zz[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] - 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_xyyy[j] * pb_xz[j] * pc_z[j] - pa_xyyy[j] * pc_x[j] * pb_zz[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_xzz[j] - pc_x[j] * pa_yyy[j] * pb_xzz[j]);

                t_xyyy_xzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 1.5 * fl2_fx * pa_yy[j] * pc_y[j] + 0.75 * fl2_fx * pa_y[j] * pc_yy[j] + 0.25 * fl2_fx * pa_yyy[j] + 1.5 * pa_xy[j] * fl2_fx * pc_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 3.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xyyy[j] * pc_x[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 0.5 * pc_x[j] * pa_yyy[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yyy[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx + 0.5 * fl1_fx * pa_yyy[j] * pc_zz[j] + 3.0 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] + 1.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] + fl1_fx * pa_yyy[j] * pb_z[j] * pc_z[j] + 1.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] + 3.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_z[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] + 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] + pa_xyyy[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xyyy[j] * pc_xz[j] * pb_z[j] + 6.0 * pa_xyy[j] * pc_yz[j] * pb_xz[j] + 3.0 * pa_xyy[j] * pc_xy[j] * pb_zz[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_xzz[j] + 2.0 * pc_xz[j] * pa_yyy[j] * pb_xz[j] + pc_xx[j] * pa_yyy[j] * pb_zz[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_xzz[j]);

                t_xyyy_xzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 1.5 * fl2_fx * pa_y[j] * pc_yy[j] - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pa_y[j] * pc_zz[j] - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xyy[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xyy[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xx[j] * pa_yyy[j] * fl1_fx - 1.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * fl1_fx * pa_yy[j] * pc_yzz[j] - 3.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yyy[j] * pc_zz[j] - 3.0 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] - 1.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] - 1.5 * pa_xy[j] * fl1_fx * pc_xzz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] - 3.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_z[j] - 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] - pa_xyyy[j] * pc_xzz[j] - 3.0 * pa_xyy[j] * pc_yzz[j] * pb_x[j] - 6.0 * pa_xyy[j] * pc_xyz[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_yyz[j] * pb_xz[j] - 3.0 * pa_xy[j] * pc_xyy[j] * pb_zz[j] - pa_x[j] * pc_yyy[j] * pb_xzz[j] - pc_xzz[j] * pa_yyy[j] * pb_x[j] - 2.0 * pc_xxz[j] * pa_yyy[j] * pb_z[j] - 6.0 * pc_xyz[j] * pa_yy[j] * pb_xz[j] - 3.0 * pc_xxy[j] * pa_yy[j] * pb_zz[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_xzz[j]);

                t_xyyy_xzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.5 * fl2_fx * pc_yyy[j] + 0.75 * fl2_fx * pa_y[j] * pc_yy[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * pa_xy[j] * pc_xyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_yy[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxyy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xyyy[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pa_y[j] * pc_yyzz[j] + fl1_fx * pc_yyyz[j] * pb_z[j] + 1.5 * fl1_fx * pa_yy[j] * pc_yzz[j] + 3.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pc_xzz[j] + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xyy[j] * pc_xyzz[j] + 3.0 * pa_xy[j] * pc_yyzz[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yyyz[j] * pb_xz[j] + pa_x[j] * pc_xyyy[j] * pb_zz[j] + pc_xxzz[j] * pa_yyy[j] + 3.0 * pc_xyzz[j] * pa_yy[j] * pb_x[j] + 6.0 * pc_xxyz[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xyyz[j] * pa_y[j] * pb_xz[j] + 3.0 * pc_xxyy[j] * pa_y[j] * pb_zz[j] + pc_xyyy[j] * pb_xzz[j]);

                t_xyyy_xzz[j] += fl_s_0_0_5 * (-0.25 * fl2_fx * pc_yyy[j] - 0.75 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 1.5 * pc_xxyy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xyyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyzz[j] - 1.5 * fl1_fx * pa_y[j] * pc_yyzz[j] - fl1_fx * pc_yyyz[j] * pb_z[j] - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 1.5 * pc_xxzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xy[j] * pc_xyyzz[j] - pa_x[j] * pc_yyyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pa_yy[j] - 3.0 * pc_xyyzz[j] * pa_y[j] * pb_x[j] - 6.0 * pc_xxyyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xyyyz[j] * pb_xz[j] - pc_xxyyy[j] * pb_zz[j]);

                t_xyyy_xzz[j] += fl_s_0_0_6 * (0.5 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 1.5 * pc_xxyzz[j] * fl1_fx + pa_x[j] * pc_xyyyzz[j] + 3.0 * pc_xxyyzz[j] * pa_y[j] + pc_xyyyzz[j] * pb_x[j] + 2.0 * pc_xxyyyz[j] * pb_z[j]);

                t_xyyy_xzz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_66_67(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (66,67)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyy = pcDistances.data(119 * idx + 104);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_yyy = primBuffer.data(150 * idx + 66);

            // Batch of Integrals (66,67)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_y, pb_yy, pb_yyy, pc_x, \
                                     pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyy, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyy, pc_yyyyy, pc_yyyyyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyyy_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyy_yyy[j] = fl_s_0_0_0 * (1.875 * pa_x[j] * fl3_fx + 2.25 * pa_xyy[j] * fl2_fx + 6.75 * pa_xy[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xyyy[j] * pb_y[j] * fl1_fx + 4.5 * pa_xyy[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yyy[j] + pa_xyyy[j] * pb_yyy[j]);

                t_xyyy_yyy[j] += fl_s_0_0_1 * (-5.625 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 4.5 * pa_xyy[j] * fl2_fx - 11.25 * pa_xy[j] * pc_y[j] * fl2_fx - 13.5 * pa_xy[j] * fl2_fx * pb_y[j] - 11.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * pa_yy[j] * fl2_fx - 6.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 4.5 * pa_x[j] * fl2_fx * pb_yy[j] - 2.25 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_xyyy[j] * pb_y[j] * fl1_fx - 1.5 * pa_xyyy[j] * pc_y[j] * fl1_fx - 13.5 * pa_xyy[j] * pc_y[j] * pb_y[j] * fl1_fx - 4.5 * pa_xyy[j] * fl1_fx * pb_yy[j] - 13.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_x[j] * pa_yyy[j] * pb_y[j] * fl1_fx - 4.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_xyyy[j] * pb_yy[j] * pc_y[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_yyy[j] - pc_x[j] * pa_yyy[j] * pb_yyy[j]);

                t_xyyy_yyy[j] += fl_s_0_0_2 * (5.625 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 2.25 * pa_xyy[j] * fl2_fx + 22.5 * pa_xy[j] * pc_y[j] * fl2_fx + 6.75 * pa_xy[j] * fl2_fx * pb_y[j] + 11.25 * pa_x[j] * pc_yy[j] * fl2_fx + 22.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * pa_yy[j] * fl2_fx + 11.25 * pc_xy[j] * pa_y[j] * fl2_fx + 13.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 11.25 * pc_xy[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_yy[j] + 4.5 * pc_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xyyy[j] * pc_y[j] * fl1_fx + 13.5 * pa_xyy[j] * pc_y[j] * pb_y[j] * fl1_fx + 9.0 * pa_xyy[j] * pc_yy[j] * fl1_fx + 27.0 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 13.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_yy[j] + 9.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_yyy[j] * pb_y[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yyy[j] * fl1_fx + 13.5 * pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx + 4.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yy[j] + 13.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_xyyy[j] * pb_y[j] * pc_yy[j] + 9.0 * pa_xyy[j] * pc_yy[j] * pb_yy[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_yyy[j] + 3.0 * pc_xy[j] * pa_yyy[j] * pb_yy[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_yyy[j]);

                t_xyyy_yyy[j] += fl_s_0_0_3 * (-1.875 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 11.25 * pa_xy[j] * pc_y[j] * fl2_fx - 22.5 * pa_x[j] * pc_yy[j] * fl2_fx - 11.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * pa_yy[j] * fl2_fx - 22.5 * pc_xy[j] * pa_y[j] * fl2_fx - 6.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 11.25 * pc_xyy[j] * fl2_fx - 22.5 * pc_xy[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_yy[j] - 9.0 * pa_xyy[j] * pc_yy[j] * fl1_fx - 27.0 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx - 15.0 * pa_xy[j] * pc_yyy[j] * fl1_fx - 15.0 * pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 9.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * pa_yyy[j] * fl1_fx - 13.5 * pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx - 9.0 * pc_xyy[j] * pa_yy[j] * fl1_fx - 27.0 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx - 13.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] - 9.0 * pc_xyy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] - pa_xyyy[j] * pc_yyy[j] - 9.0 * pa_xyy[j] * pc_yyy[j] * pb_y[j] - 9.0 * pa_xy[j] * pc_yyy[j] * pb_yy[j] - pa_x[j] * pc_yyy[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_yyy[j] * pb_y[j] - 9.0 * pc_xyy[j] * pa_yy[j] * pb_yy[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_yyy[j]);

                t_xyyy_yyy[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 11.25 * pa_x[j] * pc_yy[j] * fl2_fx + 11.25 * pc_xy[j] * pa_y[j] * fl2_fx + 22.5 * pc_xyy[j] * fl2_fx + 11.25 * pc_xy[j] * fl2_fx * pb_y[j] + 15.0 * pa_xy[j] * pc_yyy[j] * fl1_fx + 15.0 * pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 7.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + 9.0 * pc_xyy[j] * pa_yy[j] * fl1_fx + 27.0 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx + 15.0 * pc_xyyy[j] * pa_y[j] * fl1_fx + 15.0 * pc_xyyy[j] * pb_y[j] * fl1_fx + 9.0 * pc_xyy[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xyy[j] * pc_yyyy[j] + 9.0 * pa_xy[j] * pc_yyyy[j] * pb_y[j] + 3.0 * pa_x[j] * pc_yyyy[j] * pb_yy[j] + pc_xyyy[j] * pa_yyy[j] + 9.0 * pc_xyyy[j] * pa_yy[j] * pb_y[j] + 9.0 * pc_xyyy[j] * pa_y[j] * pb_yy[j] + pc_xyyy[j] * pb_yyy[j]);

                t_xyyy_yyy[j] += fl_s_0_0_5 * (-11.25 * pc_xyy[j] * fl2_fx - 7.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 15.0 * pc_xyyy[j] * pa_y[j] * fl1_fx - 15.0 * pc_xyyy[j] * pb_y[j] * fl1_fx - 7.5 * pc_xyyyy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yyyyy[j] - 3.0 * pa_x[j] * pc_yyyyy[j] * pb_y[j] - 3.0 * pc_xyyyy[j] * pa_yy[j] - 9.0 * pc_xyyyy[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xyyyy[j] * pb_yy[j]);

                t_xyyy_yyy[j] += fl_s_0_0_6 * (7.5 * pc_xyyyy[j] * fl1_fx + pa_x[j] * pc_yyyyyy[j] + 3.0 * pc_xyyyyy[j] * pa_y[j] + 3.0 * pc_xyyyyy[j] * pb_y[j]);

                t_xyyy_yyy[j] += -fl_s_0_0_7 * pc_xyyyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_67_68(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (67,68)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_yyz = primBuffer.data(150 * idx + 67);

            // Batch of Integrals (67,68)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_y, pb_yy, pb_yyz, pb_yz, \
                                     pb_z, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyz, pc_xyyyyz, \
                                     pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, \
                                     pc_yyyyz, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xyyy_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyyy_yyz[j] = fl_s_0_0_0 * (2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xyyy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xyy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yyz[j] + pa_xyyy[j] * pb_yyz[j]);

                t_xyyy_yyz[j] += fl_s_0_0_1 * (-2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 4.5 * pa_xy[j] * fl2_fx * pb_z[j] - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 3.0 * pa_x[j] * fl2_fx * pb_yz[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xyyy[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyyy[j] * fl1_fx * pb_z[j] - 4.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_z[j] - 3.0 * pa_xyy[j] * fl1_fx * pb_y[j] * pc_z[j] - 3.0 * pa_xyy[j] * fl1_fx * pb_yz[j] - 9.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_x[j] * pa_yyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yyz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] - pa_xyyy[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xyyy[j] * pb_yz[j] * pc_y[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_yyz[j] - pc_x[j] * pa_yyy[j] * pb_yyz[j]);

                t_xyyy_yyz[j] += fl_s_0_0_2 * (4.5 * pa_xy[j] * fl2_fx * pc_z[j] + 2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 7.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xyyy[j] * fl1_fx * pc_z[j] + 4.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_z[j] + 3.0 * pa_xyy[j] * fl1_fx * pb_y[j] * pc_z[j] + 9.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 9.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 9.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_yz[j] + 6.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xz[j] * pa_yyy[j] * fl1_fx + 0.5 * pc_x[j] * pa_yyy[j] * fl1_fx * pb_z[j] + 4.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_y[j] + 3.0 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yz[j] + 9.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_xyyy[j] * pb_y[j] * pc_yz[j] + pa_xyyy[j] * pc_yy[j] * pb_z[j] + 3.0 * pa_xyy[j] * pc_yz[j] * pb_yy[j] + 6.0 * pa_xyy[j] * pc_yy[j] * pb_yz[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_yyz[j] + pc_xz[j] * pa_yyy[j] * pb_yy[j] + 2.0 * pc_xy[j] * pa_yyy[j] * pb_yz[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_yyz[j]);

                t_xyyy_yyz[j] += fl_s_0_0_3 * (-2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 4.5 * pc_xz[j] * pa_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 3.0 * pc_xz[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 4.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 9.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 5.0 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xz[j] * pa_yyy[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 4.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_y[j] - 9.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] - 9.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] - 9.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] - 6.0 * pc_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - pa_xyyy[j] * pc_yyz[j] - 6.0 * pa_xyy[j] * pc_yyz[j] * pb_y[j] - 3.0 * pa_xyy[j] * pc_yyy[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_yyz[j] * pb_yy[j] - 6.0 * pa_xy[j] * pc_yyy[j] * pb_yz[j] - pa_x[j] * pc_yyy[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_yyy[j] * pb_y[j] - pc_xyy[j] * pa_yyy[j] * pb_z[j] - 3.0 * pc_xyz[j] * pa_yy[j] * pb_yy[j] - 6.0 * pc_xyy[j] * pa_yy[j] * pb_yz[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_yyz[j]);

                t_xyyy_yyz[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 9.0 * pa_xy[j] * pc_yyz[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 6.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 9.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + 9.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] + 9.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] + 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] + 6.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xyy[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xyy[j] * pc_yyyz[j] + 6.0 * pa_xy[j] * pc_yyyz[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_yyyy[j] * pb_z[j] + pa_x[j] * pc_yyyz[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_yyyy[j] * pb_yz[j] + pc_xyyz[j] * pa_yyy[j] + 6.0 * pc_xyyz[j] * pa_yy[j] * pb_y[j] + 3.0 * pc_xyyy[j] * pa_yy[j] * pb_z[j] + 3.0 * pc_xyyz[j] * pa_y[j] * pb_yy[j] + 6.0 * pc_xyyy[j] * pa_y[j] * pb_yz[j] + pc_xyyy[j] * pb_yyz[j]);

                t_xyyy_yyz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx - 9.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] - 6.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xy[j] * pc_yyyyz[j] - 2.0 * pa_x[j] * pc_yyyyz[j] * pb_y[j] - pa_x[j] * pc_yyyyy[j] * pb_z[j] - 3.0 * pc_xyyyz[j] * pa_yy[j] - 6.0 * pc_xyyyz[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xyyyy[j] * pa_y[j] * pb_z[j] - pc_xyyyz[j] * pb_yy[j] - 2.0 * pc_xyyyy[j] * pb_yz[j]);

                t_xyyy_yyz[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_yyyyyz[j] + 3.0 * pc_xyyyyz[j] * pa_y[j] + 2.0 * pc_xyyyyz[j] * pb_y[j] + pc_xyyyyy[j] * pb_z[j]);

                t_xyyy_yyz[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_68_69(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (68,69)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_yzz = primBuffer.data(150 * idx + 68);

            // Batch of Integrals (68,69)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_y, pb_yz, pb_yzz, pb_z, \
                                     pb_zz, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyyzz, pc_xyyyz, \
                                     pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, \
                                     pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xyyy_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyy_yzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xyyy[j] * pb_y[j] * fl1_fx + 1.5 * pa_xyy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yzz[j] + pa_xyyy[j] * pb_yzz[j]);

                t_xyyy_yzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xyy[j] * fl2_fx - 2.25 * pa_xy[j] * pc_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 1.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xyyy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xyyy[j] * pc_y[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_y[j] * pb_y[j] * fl1_fx - 3.0 * pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] - 1.5 * pa_xyy[j] * fl1_fx * pb_zz[j] - 4.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_x[j] * pa_yyy[j] * pb_y[j] * fl1_fx - 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_xyyy[j] * pb_yz[j] * pc_z[j] - pa_xyyy[j] * pc_y[j] * pb_zz[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_yzz[j] - pc_x[j] * pa_yyy[j] * pb_yzz[j]);

                t_xyyy_yzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 4.5 * pa_xy[j] * pc_y[j] * fl2_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_x[j] * pa_yy[j] * fl2_fx + 2.25 * pc_xy[j] * pa_y[j] * fl2_fx + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xyyy[j] * pc_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_y[j] * pb_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_yy[j] * fl1_fx + 1.5 * pa_xyy[j] * fl1_fx * pc_zz[j] + 3.0 * pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 9.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 4.5 * pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 0.5 * pc_x[j] * pa_yyy[j] * pb_y[j] * fl1_fx + 0.5 * pc_xy[j] * pa_yyy[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx + 3.0 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] + 4.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] + 3.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] + pa_xyyy[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xyyy[j] * pc_yz[j] * pb_z[j] + 6.0 * pa_xyy[j] * pc_yz[j] * pb_yz[j] + 3.0 * pa_xyy[j] * pc_yy[j] * pb_zz[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_yzz[j] + 2.0 * pc_xz[j] * pa_yyy[j] * pb_yz[j] + pc_xy[j] * pa_yyy[j] * pb_zz[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_yzz[j]);

                t_xyyy_yzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 2.25 * pa_xy[j] * pc_y[j] * fl2_fx - 3.0 * pa_x[j] * pc_yy[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 4.5 * pc_xy[j] * pa_y[j] * fl2_fx - 1.5 * pc_xyy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * pa_xyy[j] * pc_yy[j] * fl1_fx - 1.5 * pa_xyy[j] * fl1_fx * pc_zz[j] - 1.5 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yyy[j] * fl1_fx - 4.5 * pa_xy[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 6.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * pa_yyy[j] * fl1_fx - 1.5 * pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 4.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] - 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] - pa_xyyy[j] * pc_yzz[j] - 3.0 * pa_xyy[j] * pc_yzz[j] * pb_y[j] - 6.0 * pa_xyy[j] * pc_yyz[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_yyz[j] * pb_yz[j] - 3.0 * pa_xy[j] * pc_yyy[j] * pb_zz[j] - pa_x[j] * pc_yyy[j] * pb_yzz[j] - pc_xzz[j] * pa_yyy[j] * pb_y[j] - 2.0 * pc_xyz[j] * pa_yyy[j] * pb_z[j] - 6.0 * pc_xyz[j] * pa_yy[j] * pb_yz[j] - 3.0 * pc_xyy[j] * pa_yy[j] * pb_zz[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_yzz[j]);

                t_xyyy_yzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 2.25 * pc_xy[j] * pa_y[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_xy[j] * pc_yyy[j] * fl1_fx + 4.5 * pa_xy[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyy[j] * pa_yy[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_yy[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyyy[j] * pa_y[j] * fl1_fx + 4.5 * pc_xyzz[j] * pa_y[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyyy[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xyy[j] * pc_yyzz[j] + 3.0 * pa_xy[j] * pc_yyzz[j] * pb_y[j] + 6.0 * pa_xy[j] * pc_yyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yyyz[j] * pb_yz[j] + pa_x[j] * pc_yyyy[j] * pb_zz[j] + pc_xyzz[j] * pa_yyy[j] + 3.0 * pc_xyzz[j] * pa_yy[j] * pb_y[j] + 6.0 * pc_xyyz[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xyyz[j] * pa_y[j] * pb_yz[j] + 3.0 * pc_xyyy[j] * pa_y[j] * pb_zz[j] + pc_xyyy[j] * pb_yzz[j]);

                t_xyyy_yzz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 1.5 * pc_xyyy[j] * pa_y[j] * fl1_fx - 4.5 * pc_xyzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xyyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyyyy[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xy[j] * pc_yyyzz[j] - pa_x[j] * pc_yyyzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_yyyyz[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pa_yy[j] - 3.0 * pc_xyyzz[j] * pa_y[j] * pb_y[j] - 6.0 * pc_xyyyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xyyyz[j] * pb_yz[j] - pc_xyyyy[j] * pb_zz[j]);

                t_xyyy_yzz[j] += fl_s_0_0_6 * (0.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + pa_x[j] * pc_yyyyzz[j] + 3.0 * pc_xyyyzz[j] * pa_y[j] + pc_xyyyzz[j] * pb_y[j] + 2.0 * pc_xyyyyz[j] * pb_z[j]);

                t_xyyy_yzz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_69_70(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (69,70)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyy = paDistances.data(34 * idx + 25);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyy_zzz = primBuffer.data(150 * idx + 69);

            // Batch of Integrals (69,70)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyy, pa_y, pa_yy, pa_yyy, pb_z, pb_zz, pb_zzz, pc_x, \
                                     pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, \
                                     pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xyyy_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyyy_zzz[j] = fl_s_0_0_0 * (2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xyyy[j] * pb_z[j] * fl1_fx + 1.5 * pa_xy[j] * fl1_fx * pb_zzz[j] + pa_xyyy[j] * pb_zzz[j]);

                t_xyyy_zzz[j] += fl_s_0_0_1 * (-4.5 * pa_xy[j] * fl2_fx * pb_z[j] - 2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pa_xyyy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xyyy[j] * pc_z[j] * fl1_fx - 4.5 * pa_xyy[j] * pc_y[j] * pb_z[j] * fl1_fx - 1.5 * pc_x[j] * pa_yyy[j] * pb_z[j] * fl1_fx - 4.5 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_xy[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_xyyy[j] * pb_zz[j] * pc_z[j] - 3.0 * pa_xyy[j] * pc_y[j] * pb_zzz[j] - pc_x[j] * pa_yyy[j] * pb_zzz[j]);

                t_xyyy_zzz[j] += fl_s_0_0_2 * (4.5 * pa_xy[j] * fl2_fx * pc_z[j] + 2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xyyy[j] * pc_z[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_y[j] * pb_z[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xy[j] * pc_yy[j] * pb_z[j] * fl1_fx + 1.5 * pc_x[j] * pa_yyy[j] * pb_z[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yyy[j] * fl1_fx + 4.5 * pc_xy[j] * pa_yy[j] * pb_z[j] * fl1_fx + 4.5 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 4.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 3.0 * pa_xyyy[j] * pb_z[j] * pc_zz[j] + 9.0 * pa_xyy[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_zzz[j] + 3.0 * pc_xz[j] * pa_yyy[j] * pb_zz[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_zzz[j]);

                t_xyyy_zzz[j] += fl_s_0_0_3 * (-2.25 * pa_xy[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * pc_yz[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 4.5 * pc_xz[j] * pa_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xy[j] * pc_yy[j] * pb_z[j] * fl1_fx - 4.5 * pa_xy[j] * pc_yyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yyy[j] * fl1_fx - 4.5 * pc_xy[j] * pa_yy[j] * pb_z[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 4.5 * pc_xyy[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pa_xy[j] * fl1_fx * pc_zzz[j] - 4.5 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] - 4.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] - 4.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - pa_xyyy[j] * pc_zzz[j] - 9.0 * pa_xyy[j] * pc_yzz[j] * pb_z[j] - 9.0 * pa_xy[j] * pc_yyz[j] * pb_zz[j] - pa_x[j] * pc_yyy[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_yyy[j] * pb_z[j] - 9.0 * pc_xyz[j] * pa_yy[j] * pb_zz[j] - 3.0 * pc_xyy[j] * pa_y[j] * pb_zzz[j]);

                t_xyyy_zzz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_xy[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyy[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 4.5 * pc_xyy[j] * pa_y[j] * pb_z[j] * fl1_fx + 4.5 * pc_xyyz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyyy[j] * pb_z[j] * fl1_fx + 1.5 * pa_xy[j] * fl1_fx * pc_zzz[j] + 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzzz[j] * pa_y[j] * fl1_fx + 4.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xyy[j] * pc_yzzz[j] + 9.0 * pa_xy[j] * pc_yyzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yyyz[j] * pb_zz[j] + pc_xzzz[j] * pa_yyy[j] + 9.0 * pc_xyzz[j] * pa_yy[j] * pb_z[j] + 9.0 * pc_xyyz[j] * pa_y[j] * pb_zz[j] + pc_xyyy[j] * pb_zzz[j]);

                t_xyyy_zzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 4.5 * pc_xyyz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xy[j] * pc_yyzzz[j] - 3.0 * pa_x[j] * pc_yyyzz[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pa_yy[j] - 9.0 * pc_xyyzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xyyyz[j] * pb_zz[j]);

                t_xyyy_zzz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yyyzzz[j] + 3.0 * pc_xyyzzz[j] * pa_y[j] + 3.0 * pc_xyyyzz[j] * pb_z[j]);

                t_xyyy_zzz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_70_71(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (70,71)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_xxx = primBuffer.data(150 * idx + 70);

            // Batch of Integrals (70,71)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_x, pb_xx, pb_xxx, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyz, \
                                     pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, \
                                     pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyz, \
                                     pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xyyz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyz_xxx[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * fl2_fx * pa_yyz[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xyyz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pa_yyz[j] * pb_xx[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xxx[j] + pa_xyyz[j] * pb_xxx[j]);

                t_xyyz_xxx[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * fl2_fx * pa_yyz[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_yz[j] * pc_y[j] - 1.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * fl2_fx * pa_z[j] * pb_xx[j] - 1.5 * pa_xyyz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xyyz[j] * pc_x[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_z[j] * pb_x[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_x[j] * pa_yyz[j] * pb_x[j] * fl1_fx - 1.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_xx[j] - 3.0 * fl1_fx * pa_yz[j] * pc_y[j] * pb_xx[j] - 1.5 * fl1_fx * pa_yyz[j] * pb_xx[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xxx[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] - 3.0 * pa_xyyz[j] * pb_xx[j] * pc_x[j] - pa_xyy[j] * pc_z[j] * pb_xxx[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_xxx[j] - pc_x[j] * pa_yyz[j] * pb_xxx[j]);

                t_xyyz_xxx[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 1.5 * fl2_fx * pa_yy[j] * pc_z[j] + 3.0 * fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pa_yyz[j] + 1.5 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xyyz[j] * pc_x[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_y[j] * pb_x[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_yyz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yyz[j] * fl1_fx + 4.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx + 9.0 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx + 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] + 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xx[j] + 1.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_xx[j] + 3.0 * fl1_fx * pa_yz[j] * pc_y[j] * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] + 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] + 3.0 * pa_xyyz[j] * pb_x[j] * pc_xx[j] + 3.0 * pa_xyy[j] * pc_xz[j] * pb_xx[j] + 6.0 * pa_xyz[j] * pc_xy[j] * pb_xx[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xxx[j] + pa_xz[j] * pc_yy[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_yyz[j] * pb_xx[j] + pc_xz[j] * pa_yy[j] * pb_xxx[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xxx[j]);

                t_xyyz_xxx[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pa_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_yz[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pc_xx[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xxz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yyz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_yy[j] * fl1_fx - 9.0 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_yz[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * fl1_fx * pc_yyz[j] * pb_xx[j] - 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] - 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xx[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_xx[j] - 1.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xxx[j] - pa_xyyz[j] * pc_xxx[j] - 3.0 * pa_xyy[j] * pc_xxz[j] * pb_x[j] - 6.0 * pa_xyz[j] * pc_xxy[j] * pb_x[j] - 6.0 * pa_xy[j] * pc_xyz[j] * pb_xx[j] - 3.0 * pa_xz[j] * pc_xyy[j] * pb_xx[j] - pa_x[j] * pc_yyz[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_yyz[j] * pb_x[j] - 3.0 * pc_xxz[j] * pa_yy[j] * pb_xx[j] - 6.0 * pc_xxy[j] * pa_yz[j] * pb_xx[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xxx[j] - pc_xyy[j] * pa_z[j] * pb_xxx[j]);

                t_xyyz_xxx[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_yy[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_yz[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 4.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyyz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pc_yyz[j] * pb_xx[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxxz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pa_z[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + pa_xyy[j] * pc_xxxz[j] + 2.0 * pa_xyz[j] * pc_xxxy[j] + 6.0 * pa_xy[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xxyy[j] * pb_x[j] + 3.0 * pa_x[j] * pc_xyyz[j] * pb_xx[j] + pc_xxxx[j] * pa_yyz[j] + 3.0 * pc_xxxz[j] * pa_yy[j] * pb_x[j] + 6.0 * pc_xxxy[j] * pa_yz[j] * pb_x[j] + 6.0 * pc_xxyz[j] * pa_y[j] * pb_xx[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_xx[j] + pc_xyyz[j] * pb_xxx[j]);

                t_xyyz_xxx[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yyz[j] - 1.5 * pc_xxz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 6.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xxxz[j] - 0.5 * pc_xxxxz[j] * fl1_fx - 0.5 * pc_xxxx[j] * fl1_fx * pa_z[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_x[j] - 2.0 * pa_xy[j] * pc_xxxyz[j] - pa_xz[j] * pc_xxxyy[j] - 3.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - pc_xxxxz[j] * pa_yy[j] - 2.0 * pc_xxxxy[j] * pa_yz[j] - 6.0 * pc_xxxyz[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxyy[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxyyz[j] * pb_xx[j]);

                t_xyyz_xxx[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxxxz[j] * fl1_fx + pa_x[j] * pc_xxxyyz[j] + 2.0 * pc_xxxxyz[j] * pa_y[j] + pc_xxxxyy[j] * pa_z[j] + 3.0 * pc_xxxyyz[j] * pb_x[j]);

                t_xyyz_xxx[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_71_72(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (71,72)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_xxy = primBuffer.data(150 * idx + 71);

            // Batch of Integrals (71,72)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_x, pb_xx, pb_xxy, pb_xy, pb_y, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, \
                                     pc_xxxyyyz, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, \
                                     pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, \
                                     pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyyz_xxy[j] = fl_s_0_0_0 * (0.5 * pa_xyz[j] * fl2_fx + fl2_fx * pa_yz[j] * pb_x[j] + 0.25 * pa_xz[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xyyz[j] * fl1_fx * pb_y[j] + pa_xyz[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_yyz[j] * pb_xy[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xxy[j] + pa_xyyz[j] * pb_xxy[j]);

                t_xyyz_xxy[j] += fl_s_0_0_1 * (-pa_xyz[j] * fl2_fx - 0.5 * pa_xy[j] * fl2_fx * pc_z[j] - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 2.0 * fl2_fx * pa_yz[j] * pb_x[j] - 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.5 * pa_xz[j] * fl2_fx * pb_y[j] - 0.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_z[j] * pb_xy[j] - fl2_fx * pa_z[j] * pb_xy[j] - 0.5 * pa_xyyz[j] * fl1_fx * pc_y[j] - 0.5 * pa_xyyz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xyy[j] * pc_z[j] * fl1_fx * pb_y[j] - pa_xyz[j] * pc_y[j] * fl1_fx * pb_y[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_x[j] - pa_xy[j] * fl1_fx * pc_z[j] * pb_xx[j] - pa_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_x[j] * pa_yyz[j] * fl1_fx * pb_y[j] - pc_x[j] * pa_yz[j] * fl1_fx * pb_xx[j] - fl1_fx * pa_yyz[j] * pb_x[j] * pc_y[j] - fl1_fx * pa_yy[j] * pc_z[j] * pb_xy[j] - 2.0 * fl1_fx * pa_yz[j] * pc_y[j] * pb_xy[j] - fl1_fx * pa_yyz[j] * pb_xy[j] - pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xxy[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] - pa_xyyz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xyyz[j] * pb_xy[j] * pc_x[j] - pa_xyy[j] * pc_z[j] * pb_xxy[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_xxy[j] - pc_x[j] * pa_yyz[j] * pb_xxy[j]);

                t_xyyz_xxy[j] += fl_s_0_0_2 * (pa_xy[j] * fl2_fx * pc_z[j] + 0.5 * pa_xyz[j] * fl2_fx + 1.5 * pa_xz[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 3.0 * pc_x[j] * pa_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + fl2_fx * pa_yz[j] * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 0.25 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + fl2_fx * pc_z[j] * pb_xy[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xyyz[j] * fl1_fx * pc_y[j] + 0.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_z[j] * fl1_fx * pb_y[j] + pa_xyz[j] * pc_yy[j] * fl1_fx + pa_xyz[j] * pc_y[j] * fl1_fx * pb_y[j] + pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] + pa_xyz[j] * fl1_fx * pc_xx[j] + 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_x[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_x[j] + pa_xy[j] * fl1_fx * pc_z[j] * pb_xx[j] + 0.5 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_y[j] + 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xy[j] * pa_yyz[j] * fl1_fx + 1.5 * pc_x[j] * pa_yyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_y[j] + 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_x[j] + pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] + pc_x[j] * pa_yz[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] + fl1_fx * pa_yy[j] * pc_yz[j] * pb_x[j] + 2.0 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_x[j] + 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] + fl1_fx * pc_yy[j] * pa_z[j] * pb_xy[j] + fl1_fx * pa_yyz[j] * pb_x[j] * pc_y[j] + fl1_fx * pa_yy[j] * pc_z[j] * pb_xy[j] + 2.0 * fl1_fx * pa_yz[j] * pc_y[j] * pb_xy[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_xz[j] * pb_xy[j] + pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] + pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] + 2.0 * pa_xyyz[j] * pb_x[j] * pc_xy[j] + pa_xyyz[j] * pc_xx[j] * pb_y[j] + pa_xyy[j] * pc_yz[j] * pb_xx[j] + 2.0 * pa_xyy[j] * pc_xz[j] * pb_xy[j] + 2.0 * pa_xyz[j] * pc_yy[j] * pb_xx[j] + 4.0 * pa_xyz[j] * pc_xy[j] * pb_xy[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xxy[j] + pa_xz[j] * pc_yy[j] * pb_xxy[j] + pc_xy[j] * pa_yyz[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_yyz[j] * pb_xy[j] + pc_xz[j] * pa_yy[j] * pb_xxy[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xxy[j]);

                t_xyyz_xxy[j] += fl_s_0_0_3 * (-0.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 3.0 * pc_xz[j] * pa_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pa_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pc_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - pa_xyz[j] * pc_yy[j] * fl1_fx - pa_xy[j] * pc_yyz[j] * fl1_fx - pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] - pa_xy[j] * fl1_fx * pc_xxz[j] - pa_xyz[j] * fl1_fx * pc_xx[j] - 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_x[j] - 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx - 0.5 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 1.5 * pa_xz[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xy[j] * pa_yyz[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] - pc_xxx[j] * pa_yz[j] * fl1_fx - 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] - 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_x[j] - pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] - fl1_fx * pc_yyy[j] * pa_z[j] * pb_x[j] - fl1_fx * pc_yyz[j] * pb_xy[j] - fl1_fx * pa_yy[j] * pc_yz[j] * pb_x[j] - 2.0 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_x[j] - 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] - fl1_fx * pc_yy[j] * pa_z[j] * pb_xy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_y[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_xz[j] * pb_xy[j] - 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_y[j] - pc_xxz[j] * fl1_fx * pb_xy[j] - pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - pa_xyyz[j] * pc_xxy[j] - 2.0 * pa_xyy[j] * pc_xyz[j] * pb_x[j] - pa_xyy[j] * pc_xxz[j] * pb_y[j] - 4.0 * pa_xyz[j] * pc_xyy[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xxy[j] * pb_y[j] - 2.0 * pa_xy[j] * pc_yyz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xy[j] - pa_xz[j] * pc_yyy[j] * pb_xx[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_xy[j] - pa_x[j] * pc_yyz[j] * pb_xxy[j] - 2.0 * pc_xxy[j] * pa_yyz[j] * pb_x[j] - pc_xxx[j] * pa_yyz[j] * pb_y[j] - pc_xyz[j] * pa_yy[j] * pb_xx[j] - 2.0 * pc_xxz[j] * pa_yy[j] * pb_xy[j] - 2.0 * pc_xyy[j] * pa_yz[j] * pb_xx[j] - 4.0 * pc_xxy[j] * pa_yz[j] * pb_xy[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xxy[j] - pc_xyy[j] * pa_z[j] * pb_xxy[j]);

                t_xyyz_xxy[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + pa_xy[j] * pc_yyz[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_xxz[j] + 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] + pc_xxxz[j] * pa_y[j] * fl1_fx + pc_xxx[j] * pa_yz[j] * fl1_fx + 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxxy[j] * fl1_fx * pa_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + fl1_fx * pc_yyyz[j] * pb_x[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] + fl1_fx * pc_yyy[j] * pa_z[j] * pb_x[j] + fl1_fx * pc_yyz[j] * pb_xy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_y[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_y[j] + pc_xxz[j] * fl1_fx * pb_xy[j] + pa_xyy[j] * pc_xxyz[j] + 2.0 * pa_xyz[j] * pc_xxyy[j] + 4.0 * pa_xy[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyy[j] * pb_x[j] + pa_xz[j] * pc_xxyy[j] * pb_y[j] + pa_x[j] * pc_yyyz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xy[j] + pc_xxxy[j] * pa_yyz[j] + 2.0 * pc_xxyz[j] * pa_yy[j] * pb_x[j] + pc_xxxz[j] * pa_yy[j] * pb_y[j] + 4.0 * pc_xxyy[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_xy[j] + pc_xyyy[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxyy[j] * pa_z[j] * pb_xy[j] + pc_xyyz[j] * pb_xxy[j]);

                t_xyyz_xxy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pa_z[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - fl1_fx * pc_yyyz[j] * pb_x[j] - 0.5 * pc_xxxz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_xxyyz[j] - pa_xz[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - pa_x[j] * pc_xxyyz[j] * pb_y[j] - pc_xxxyz[j] * pa_yy[j] - 2.0 * pc_xxxyy[j] * pa_yz[j] - 4.0 * pc_xxyyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyyy[j] * pa_z[j] * pb_x[j] - pc_xxxyy[j] * pa_z[j] * pb_y[j] - pc_xyyyz[j] * pb_xx[j] - 2.0 * pc_xxyyz[j] * pb_xy[j]);

                t_xyyz_xxy[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_x[j] * pc_xxyyyz[j] + 2.0 * pc_xxxyyz[j] * pa_y[j] + pc_xxxyyy[j] * pa_z[j] + 2.0 * pc_xxyyyz[j] * pb_x[j] + pc_xxxyyz[j] * pb_y[j]);

                t_xyyz_xxy[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_72_73(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (72,73)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_xxz = primBuffer.data(150 * idx + 72);

            // Batch of Integrals (72,73)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_x, pb_xx, pb_xxz, pb_xz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, \
                                     pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, \
                                     pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyz_xxz[j] = fl_s_0_0_0 * (0.125 * pa_x[j] * fl3_fx + 0.25 * fl3_fx * pb_x[j] + 0.25 * pa_xyy[j] * fl2_fx + 0.5 * fl2_fx * pa_yy[j] * pb_x[j] + 0.25 * pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xyyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xyy[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_yyz[j] * pb_xz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xxz[j] + pa_xyyz[j] * pb_xxz[j]);

                t_xyyz_xxz[j] += fl_s_0_0_1 * (-0.375 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 0.5 * pa_xyy[j] * fl2_fx - 0.5 * pa_xy[j] * pc_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - fl2_fx * pa_yy[j] * pb_x[j] - fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 0.25 * pa_xz[j] * fl2_fx * pc_z[j] - 0.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_xz[j] - fl2_fx * pa_z[j] * pb_xz[j] - 0.5 * pa_xyyz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xyy[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_xyy[j] * fl1_fx * pb_x[j] * pc_x[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_xx[j] - pa_xyz[j] * pc_y[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_x[j] * pa_yyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xx[j] - fl1_fx * pa_yyz[j] * pb_x[j] * pc_z[j] - fl1_fx * pa_yy[j] * pc_z[j] * pb_xz[j] - 2.0 * fl1_fx * pa_yz[j] * pc_y[j] * pb_xz[j] - fl1_fx * pa_yyz[j] * pb_xz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] - pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xxz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] - pa_xyyz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xyyz[j] * pb_xz[j] * pc_x[j] - pa_xyy[j] * pc_z[j] * pb_xxz[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_xxz[j] - pc_x[j] * pa_yyz[j] * pb_xxz[j]);

                t_xyyz_xxz[j] += fl_s_0_0_2 * (0.375 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xyy[j] * fl2_fx + pa_xy[j] * pc_y[j] * fl2_fx + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_x[j] * pa_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 2.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + 0.5 * fl2_fx * pa_yy[j] * pb_x[j] + 0.5 * pa_xz[j] * fl2_fx * pc_z[j] + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.25 * pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 0.5 * pc_x[j] * fl2_fx * pb_xx[j] + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + fl2_fx * pc_z[j] * pb_xz[j] + 0.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xyyz[j] * fl1_fx * pc_z[j] + 0.5 * pa_xyy[j] * pc_zz[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_xyy[j] * fl1_fx * pc_xx[j] + pa_xyy[j] * fl1_fx * pb_x[j] * pc_x[j] + pa_xyz[j] * pc_yz[j] * fl1_fx + pa_xyz[j] * pc_y[j] * fl1_fx * pb_z[j] + pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] + pa_xy[j] * pc_y[j] * fl1_fx * pb_xx[j] + 0.5 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xz[j] * pa_yyz[j] * fl1_fx + 1.5 * pc_x[j] * pa_yyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] + pc_xx[j] * pa_yy[j] * fl1_fx * pb_x[j] + 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] + pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_yy[j] * pc_zz[j] * pb_x[j] + 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_x[j] + 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] + fl1_fx * pc_yy[j] * pa_z[j] * pb_xz[j] + fl1_fx * pa_yyz[j] * pb_x[j] * pc_z[j] + fl1_fx * pa_yy[j] * pc_z[j] * pb_xz[j] + 2.0 * fl1_fx * pa_yz[j] * pc_y[j] * pb_xz[j] + pa_xz[j] * fl1_fx * pb_x[j] * pc_xz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] + pa_x[j] * fl1_fx * pc_xz[j] * pb_xz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] + pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] + 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] + pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] + 2.0 * pa_xyyz[j] * pb_x[j] * pc_xz[j] + pa_xyyz[j] * pc_xx[j] * pb_z[j] + pa_xyy[j] * pc_zz[j] * pb_xx[j] + 2.0 * pa_xyy[j] * pc_xz[j] * pb_xz[j] + 2.0 * pa_xyz[j] * pc_yz[j] * pb_xx[j] + 4.0 * pa_xyz[j] * pc_xy[j] * pb_xz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xxz[j] + pa_xz[j] * pc_yy[j] * pb_xxz[j] + pc_xz[j] * pa_yyz[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_yyz[j] * pb_xz[j] + pc_xz[j] * pa_yy[j] * pb_xxz[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xxz[j]);

                t_xyyz_xxz[j] += fl_s_0_0_3 * (-0.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.25 * fl3_fx * pb_x[j] - 0.5 * pa_xy[j] * pc_y[j] * fl2_fx - 0.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - fl2_fx * pc_yy[j] * pb_x[j] - fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_zz[j] - 0.5 * pa_x[j] * fl2_fx * pc_xx[j] - 0.25 * pa_xz[j] * fl2_fx * pc_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.25 * pc_xxx[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - fl2_fx * pc_zz[j] * pb_x[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xyy[j] * pc_zz[j] * fl1_fx - 0.5 * pa_xyy[j] * fl1_fx * pc_xx[j] - pa_xyz[j] * pc_yz[j] * fl1_fx - pa_xy[j] * pc_yzz[j] * fl1_fx - pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_xxy[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_x[j] - 0.5 * pa_xz[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * pa_yyz[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx - pc_xx[j] * pa_yy[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 2.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] - fl1_fx * pc_yyz[j] * pb_xz[j] - fl1_fx * pa_yy[j] * pc_zz[j] * pb_x[j] - 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_x[j] - 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] - fl1_fx * pc_yy[j] * pa_z[j] * pb_xz[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xxz[j] - pa_x[j] * fl1_fx * pc_xzz[j] * pb_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_z[j] - pa_xz[j] * fl1_fx * pb_x[j] * pc_xz[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] - pa_x[j] * fl1_fx * pc_xz[j] * pb_xz[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] - 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_z[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - pc_xxz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] - pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xxz[j] - pa_xyyz[j] * pc_xxz[j] - 2.0 * pa_xyy[j] * pc_xzz[j] * pb_x[j] - pa_xyy[j] * pc_xxz[j] * pb_z[j] - 4.0 * pa_xyz[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xxy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xz[j] - pa_xz[j] * pc_yyz[j] * pb_xx[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_xz[j] - pa_x[j] * pc_yyz[j] * pb_xxz[j] - 2.0 * pc_xxz[j] * pa_yyz[j] * pb_x[j] - pc_xxx[j] * pa_yyz[j] * pb_z[j] - pc_xzz[j] * pa_yy[j] * pb_xx[j] - 2.0 * pc_xxz[j] * pa_yy[j] * pb_xz[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_xx[j] - 4.0 * pc_xxy[j] * pa_yz[j] * pb_xz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xxz[j] - pc_xyy[j] * pa_z[j] * pb_xxz[j]);

                t_xyyz_xxz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + 1.5 * pc_xzz[j] * fl2_fx + 0.5 * pc_xxx[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + pa_xy[j] * pc_yzz[j] * fl1_fx + pa_xy[j] * pc_xxy[j] * fl1_fx + 0.5 * pa_xz[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xzz[j] * pa_yy[j] * fl1_fx + 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xxxy[j] * pa_y[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + pc_xxyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + fl1_fx * pc_yyzz[j] * pb_x[j] + 2.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] + fl1_fx * pc_yyz[j] * pb_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xxz[j] + pa_x[j] * fl1_fx * pc_xzz[j] * pb_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_z[j] + 0.5 * pc_xxxz[j] * fl1_fx * pa_z[j] + pc_xxzz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] + 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + pc_xxz[j] * fl1_fx * pb_xz[j] + pa_xyy[j] * pc_xxzz[j] + 2.0 * pa_xyz[j] * pc_xxyz[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_x[j] + pa_xz[j] * pc_xxyy[j] * pb_z[j] + pa_x[j] * pc_yyzz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xz[j] + pc_xxxz[j] * pa_yyz[j] + 2.0 * pc_xxzz[j] * pa_yy[j] * pb_x[j] + pc_xxxz[j] * pa_yy[j] * pb_z[j] + 4.0 * pc_xxyz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_xz[j] + pc_xyyz[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxyy[j] * pa_z[j] * pb_xz[j] + pc_xyyz[j] * pb_xxz[j]);

                t_xyyz_xxz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - pc_xxxy[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxyy[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_x[j] - fl1_fx * pc_yyzz[j] * pb_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] - 0.5 * pc_xxxzz[j] * fl1_fx - 0.5 * pc_xxxz[j] * fl1_fx * pa_z[j] - pc_xxzz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_xxyzz[j] - pa_xz[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxxzz[j] * pa_yy[j] - 2.0 * pc_xxxyz[j] * pa_yz[j] - 4.0 * pc_xxyzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - pc_xxxyy[j] * pa_z[j] * pb_z[j] - pc_xyyzz[j] * pb_xx[j] - 2.0 * pc_xxyyz[j] * pb_xz[j]);

                t_xyyz_xxz[j] += fl_s_0_0_6 * (1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + pa_x[j] * pc_xxyyzz[j] + 2.0 * pc_xxxyzz[j] * pa_y[j] + pc_xxxyyz[j] * pa_z[j] + 2.0 * pc_xxyyzz[j] * pb_x[j] + pc_xxxyyz[j] * pb_z[j]);

                t_xyyz_xxz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_73_74(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (73,74)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_xyy = primBuffer.data(150 * idx + 73);

            // Batch of Integrals (73,74)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_x, pb_xy, pb_xyy, pb_y, pb_yy, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, \
                                     pc_xxyyyyz, pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, \
                                     pc_xyyyyz, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, \
                                     pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyyz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyz_xyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_yyz[j] + fl2_fx * pa_yz[j] * pb_y[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xyyz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xyz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_yyz[j] * pb_yy[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xyy[j] + pa_xyyz[j] * pb_xyy[j]);

                t_xyyz_xyy[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pa_z[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 1.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * fl2_fx * pa_yyz[j] - 0.25 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_yz[j] * pc_y[j] - fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 2.0 * fl2_fx * pa_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.25 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * fl2_fx * pa_z[j] * pb_yy[j] - 0.5 * pa_xyyz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xyyz[j] * pc_x[j] * fl1_fx - 0.5 * pa_xyy[j] * pc_z[j] * pb_x[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_y[j] * pb_x[j] * fl1_fx - 2.0 * pa_xyz[j] * fl1_fx * pc_x[j] * pb_y[j] - 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xy[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xy[j] - 0.5 * pc_x[j] * pa_yyz[j] * pb_x[j] * fl1_fx - 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_xy[j] - fl1_fx * pa_yyz[j] * pb_y[j] * pc_y[j] - 0.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_yy[j] - fl1_fx * pa_yz[j] * pc_y[j] * pb_yy[j] - 0.5 * fl1_fx * pa_yyz[j] * pb_yy[j] - 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xyy[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] - 2.0 * pa_xyyz[j] * pb_xy[j] * pc_y[j] - pa_xyyz[j] * pc_x[j] * pb_yy[j] - pa_xyy[j] * pc_z[j] * pb_xyy[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_xyy[j] - pc_x[j] * pa_yyz[j] * pb_xyy[j]);

                t_xyyz_xyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.5 * fl2_fx * pa_yy[j] * pc_z[j] + 3.0 * fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 2.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pa_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 0.25 * fl2_fx * pa_yyz[j] + fl2_fx * pa_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xyyz[j] * pc_x[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_z[j] * pb_x[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_xz[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_y[j] * pb_x[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_y[j] + 2.0 * pa_xyz[j] * fl1_fx * pc_x[j] * pb_y[j] + 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_xy[j] + 3.0 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 3.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xy[j] + 0.5 * pc_x[j] * pa_yyz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yyz[j] * fl1_fx + 0.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx + 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] + 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] + 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] + 0.5 * fl1_fx * pa_yyz[j] * pc_yy[j] + fl1_fx * pa_yy[j] * pc_yz[j] * pb_y[j] + 2.0 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_y[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] + 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yy[j] + fl1_fx * pa_yyz[j] * pb_y[j] * pc_y[j] + 0.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_yy[j] + fl1_fx * pa_yz[j] * pc_y[j] * pb_yy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yy[j] + 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] + 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] + pa_xyyz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xyyz[j] * pc_xy[j] * pb_y[j] + 2.0 * pa_xyy[j] * pc_yz[j] * pb_xy[j] + pa_xyy[j] * pc_xz[j] * pb_yy[j] + 4.0 * pa_xyz[j] * pc_yy[j] * pb_xy[j] + 2.0 * pa_xyz[j] * pc_xy[j] * pb_yy[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xyy[j] + pa_xz[j] * pc_yy[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_yyz[j] * pb_xy[j] + pc_xx[j] * pa_yyz[j] * pb_yy[j] + pc_xz[j] * pa_yy[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xyy[j]);

                t_xyyz_xyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * pc_xx[j] * fl2_fx * pa_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 3.0 * fl2_fx * pc_yy[j] * pa_z[j] - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 0.25 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_yz[j] * pc_y[j] - fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.25 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_xyy[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_y[j] - 3.0 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xx[j] * pa_yyz[j] * fl1_fx - 0.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] - 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yyz[j] - fl1_fx * pa_yz[j] * pc_yyy[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] - fl1_fx * pc_yyy[j] * pa_z[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_yy[j] - 0.5 * fl1_fx * pa_yyz[j] * pc_yy[j] - fl1_fx * pa_yy[j] * pc_yz[j] * pb_y[j] - 2.0 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_y[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] - 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yy[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xyy[j] - pa_xyyz[j] * pc_xyy[j] - pa_xyy[j] * pc_yyz[j] * pb_x[j] - 2.0 * pa_xyy[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_yyy[j] * pb_x[j] - 4.0 * pa_xyz[j] * pc_xyy[j] * pb_y[j] - 4.0 * pa_xy[j] * pc_yyz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_yy[j] - 2.0 * pa_xz[j] * pc_yyy[j] * pb_xy[j] - pa_xz[j] * pc_xyy[j] * pb_yy[j] - pa_x[j] * pc_yyz[j] * pb_xyy[j] - pc_xyy[j] * pa_yyz[j] * pb_x[j] - 2.0 * pc_xxy[j] * pa_yyz[j] * pb_y[j] - 2.0 * pc_xyz[j] * pa_yy[j] * pb_xy[j] - pc_xxz[j] * pa_yy[j] * pb_yy[j] - 4.0 * pc_xyy[j] * pa_yz[j] * pb_xy[j] - 2.0 * pc_xxy[j] * pa_yz[j] * pb_yy[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xyy[j] - pc_xyy[j] * pa_z[j] * pb_xyy[j]);

                t_xyyz_xyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pc_yy[j] * pa_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + fl1_fx * pa_y[j] * pc_yyyz[j] + 0.5 * fl1_fx * pc_yyyy[j] * pa_z[j] + fl1_fx * pc_yyyz[j] * pb_y[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yyz[j] + fl1_fx * pa_yz[j] * pc_yyy[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] + fl1_fx * pc_yyy[j] * pa_z[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_yy[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + pa_xyy[j] * pc_xyyz[j] + 2.0 * pa_xyz[j] * pc_xyyy[j] + 2.0 * pa_xy[j] * pc_yyyz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xyyz[j] * pb_y[j] + pa_xz[j] * pc_yyyy[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xyyy[j] * pb_y[j] + 2.0 * pa_x[j] * pc_yyyz[j] * pb_xy[j] + pa_x[j] * pc_xyyz[j] * pb_yy[j] + pc_xxyy[j] * pa_yyz[j] + pc_xyyz[j] * pa_yy[j] * pb_x[j] + 2.0 * pc_xxyz[j] * pa_yy[j] * pb_y[j] + 2.0 * pc_xyyy[j] * pa_yz[j] * pb_x[j] + 4.0 * pc_xxyy[j] * pa_yz[j] * pb_y[j] + 4.0 * pc_xyyz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xyyy[j] * pa_z[j] * pb_xy[j] + pc_xxyy[j] * pa_z[j] * pb_yy[j] + pc_xyyz[j] * pb_xyy[j]);

                t_xyyz_xyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyyz[j] - fl1_fx * pa_y[j] * pc_yyyz[j] - 0.5 * fl1_fx * pc_yyyy[j] * pa_z[j] - fl1_fx * pc_yyyz[j] * pb_y[j] - 2.0 * pa_xy[j] * pc_xyyyz[j] - pa_xz[j] * pc_xyyyy[j] - pa_x[j] * pc_yyyyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_y[j] - pc_xxyyz[j] * pa_yy[j] - 2.0 * pc_xxyyy[j] * pa_yz[j] - 2.0 * pc_xyyyz[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxyyz[j] * pa_y[j] * pb_y[j] - pc_xyyyy[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyyy[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pb_xy[j] - pc_xxyyz[j] * pb_yy[j]);

                t_xyyz_xyy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + pa_x[j] * pc_xyyyyz[j] + 2.0 * pc_xxyyyz[j] * pa_y[j] + pc_xxyyyy[j] * pa_z[j] + pc_xyyyyz[j] * pb_x[j] + 2.0 * pc_xxyyyz[j] * pb_y[j]);

                t_xyyz_xyy[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_74_75(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (74,75)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_xyz = primBuffer.data(150 * idx + 74);

            // Batch of Integrals (74,75)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_x, pb_xy, pb_xyz, pb_xz, pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, \
                                     pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, \
                                     pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, \
                                     pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xyyz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyz_xyz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_y[j] + 0.125 * fl3_fx * pb_y[j] + 0.5 * pa_xy[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_yy[j] * pb_y[j] + 0.5 * fl2_fx * pa_yz[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xyy[j] * fl1_fx * pb_xy[j] + pa_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yyz[j] * pb_yz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xyz[j] + pa_xyyz[j] * pb_xyz[j]);

                t_xyyz_xyz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.5 * pa_xy[j] * fl2_fx * pc_x[j] - pa_xy[j] * fl2_fx * pb_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.25 * fl2_fx * pa_yy[j] * pc_y[j] - 0.5 * fl2_fx * pa_yy[j] * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 0.5 * fl2_fx * pa_yz[j] * pc_z[j] - 0.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_yz[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.25 * pc_x[j] * fl2_fx * pb_xy[j] - 0.25 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_y[j] - 0.5 * pa_xyy[j] * fl1_fx * pc_x[j] * pb_y[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_xy[j] - pa_xy[j] * pc_y[j] * fl1_fx * pb_xy[j] - pa_xyz[j] * fl1_fx * pb_x[j] * pc_z[j] - pa_xyz[j] * fl1_fx * pc_x[j] * pb_z[j] - pa_xy[j] * fl1_fx * pc_z[j] * pb_xz[j] - pa_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xy[j] - pc_x[j] * pa_yz[j] * fl1_fx * pb_xz[j] - 0.5 * fl1_fx * pa_yyz[j] * pb_y[j] * pc_z[j] - 0.5 * fl1_fx * pa_yyz[j] * pc_y[j] * pb_z[j] - 0.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_yz[j] - fl1_fx * pa_yz[j] * pc_y[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yyz[j] * pb_yz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] - 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] - pa_xyyz[j] * pb_xy[j] * pc_z[j] - pa_xyyz[j] * pb_xz[j] * pc_y[j] - pa_xyyz[j] * pc_x[j] * pb_yz[j] - pa_xyy[j] * pc_z[j] * pb_xyz[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_xyz[j] - pc_x[j] * pa_yyz[j] * pb_xyz[j]);

                t_xyyz_xyz[j] += fl_s_0_0_2 * (0.75 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.375 * fl3_fx * pb_y[j] + pa_xy[j] * fl2_fx * pc_x[j] + 0.5 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * pa_y[j] * fl2_fx + pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pa_yy[j] * pc_y[j] + 0.5 * fl2_fx * pa_y[j] * pc_yy[j] + fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pc_zz[j] + fl2_fx * pa_yz[j] * pc_z[j] + fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 0.25 * fl2_fx * pa_yy[j] * pb_y[j] + 0.5 * fl2_fx * pa_yz[j] * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.25 * pa_x[j] * fl2_fx * pb_xy[j] + 0.25 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * pc_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pc_zz[j] * pb_y[j] + 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 0.5 * fl2_fx * pc_z[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xyy[j] * fl1_fx * pc_xy[j] + 0.5 * pa_xyy[j] * fl1_fx * pb_x[j] * pc_y[j] + 0.5 * pa_xyy[j] * fl1_fx * pc_x[j] * pb_y[j] + pa_xy[j] * pc_yy[j] * fl1_fx * pb_x[j] + pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] + pa_xy[j] * pc_y[j] * fl1_fx * pb_xy[j] + pa_xyz[j] * fl1_fx * pc_xz[j] + pa_xy[j] * fl1_fx * pc_zz[j] * pb_x[j] + pa_xy[j] * fl1_fx * pc_xz[j] * pb_z[j] + pa_xyz[j] * fl1_fx * pb_x[j] * pc_z[j] + pa_xyz[j] * fl1_fx * pc_x[j] * pb_z[j] + pa_xy[j] * fl1_fx * pc_z[j] * pb_xz[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] + 1.5 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_x[j] + 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] + 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_xy[j] + pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] + pc_xz[j] * pa_yz[j] * fl1_fx * pb_x[j] + pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] + pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] + pc_x[j] * pa_yz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] + 0.5 * fl1_fx * pa_yyz[j] * pc_yz[j] + 0.5 * fl1_fx * pa_yy[j] * pc_zz[j] * pb_y[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] + fl1_fx * pa_yz[j] * pc_yz[j] * pb_y[j] + fl1_fx * pa_yz[j] * pc_yy[j] * pb_z[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yz[j] + 0.5 * fl1_fx * pa_yyz[j] * pb_y[j] * pc_z[j] + 0.5 * fl1_fx * pa_yyz[j] * pc_y[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_yz[j] + fl1_fx * pa_yz[j] * pc_y[j] * pb_yz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xz[j] * pb_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] + 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] + 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] + 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] + pa_xyyz[j] * pb_x[j] * pc_yz[j] + pa_xyyz[j] * pc_xz[j] * pb_y[j] + pa_xyyz[j] * pc_xy[j] * pb_z[j] + pa_xyy[j] * pc_zz[j] * pb_xy[j] + pa_xyy[j] * pc_yz[j] * pb_xz[j] + pa_xyy[j] * pc_xz[j] * pb_yz[j] + 2.0 * pa_xyz[j] * pc_yz[j] * pb_xy[j] + 2.0 * pa_xyz[j] * pc_yy[j] * pb_xz[j] + 2.0 * pa_xyz[j] * pc_xy[j] * pb_yz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xyz[j] + pa_xz[j] * pc_yy[j] * pb_xyz[j] + pc_xz[j] * pa_yyz[j] * pb_xy[j] + pc_xy[j] * pa_yyz[j] * pb_xz[j] + pc_xx[j] * pa_yyz[j] * pb_yz[j] + pc_xz[j] * pa_yy[j] * pb_xyz[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xyz[j]);

                t_xyyz_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.25 * fl3_fx * pa_y[j] - 0.125 * fl3_fx * pb_y[j] - 0.5 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - pc_xx[j] * pa_y[j] * fl2_fx - 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - fl2_fx * pa_y[j] * pc_yy[j] - fl2_fx * pa_y[j] * pc_zz[j] - 0.25 * fl2_fx * pc_yyy[j] - 0.5 * fl2_fx * pc_yy[j] * pb_y[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pc_yz[j] * pa_z[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pa_yy[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 0.5 * fl2_fx * pa_yz[j] * pc_z[j] - 0.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.25 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.25 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_xyy[j] * fl1_fx * pc_xy[j] - pa_xy[j] * pc_xyy[j] * fl1_fx - pa_xy[j] * pc_yy[j] * fl1_fx * pb_x[j] - pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] - pa_xy[j] * fl1_fx * pc_xzz[j] - pa_xyz[j] * fl1_fx * pc_xz[j] - pa_xy[j] * fl1_fx * pc_zz[j] * pb_x[j] - pa_xy[j] * fl1_fx * pc_xz[j] * pb_z[j] - 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_x[j] - 0.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_x[j] - 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxy[j] * pa_yy[j] * fl1_fx - 0.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] - pc_xyy[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] - pc_xxz[j] * pa_yz[j] * fl1_fx - pc_xzz[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xz[j] * pa_yz[j] * fl1_fx * pb_x[j] - pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] - pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yzz[j] - fl1_fx * pa_yz[j] * pc_yyz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] - fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yyz[j] * pc_yz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_zz[j] * pb_y[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] - fl1_fx * pa_yz[j] * pc_yz[j] * pb_y[j] - fl1_fx * pa_yz[j] * pc_yy[j] * pb_z[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xz[j] * pb_y[j] - 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yz[j] - 0.5 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] - 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xyz[j] - pa_xyyz[j] * pc_xyz[j] - pa_xyy[j] * pc_yzz[j] * pb_x[j] - pa_xyy[j] * pc_xzz[j] * pb_y[j] - pa_xyy[j] * pc_xyz[j] * pb_z[j] - 2.0 * pa_xyz[j] * pc_yyz[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_xyy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_yyz[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_yz[j] - pa_xz[j] * pc_yyz[j] * pb_xy[j] - pa_xz[j] * pc_yyy[j] * pb_xz[j] - pa_xz[j] * pc_xyy[j] * pb_yz[j] - pa_x[j] * pc_yyz[j] * pb_xyz[j] - pc_xyz[j] * pa_yyz[j] * pb_x[j] - pc_xxz[j] * pa_yyz[j] * pb_y[j] - pc_xxy[j] * pa_yyz[j] * pb_z[j] - pc_xzz[j] * pa_yy[j] * pb_xy[j] - pc_xyz[j] * pa_yy[j] * pb_xz[j] - pc_xxz[j] * pa_yy[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_xy[j] - 2.0 * pc_xyy[j] * pa_yz[j] * pb_xz[j] - 2.0 * pc_xxy[j] * pa_yz[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xyz[j] - pc_xyy[j] * pa_z[j] * pb_xyz[j]);

                t_xyyz_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 0.5 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pc_yyy[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.5 * fl2_fx * pa_y[j] * pc_zz[j] + 0.25 * fl2_fx * pc_yy[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.25 * pc_xx[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pc_zz[j] * pb_y[j] + pa_xy[j] * pc_xyy[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_xzz[j] + 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_yy[j] * fl1_fx + pc_xxyy[j] * pa_y[j] * fl1_fx + pc_xyy[j] * pa_y[j] * fl1_fx * pb_x[j] + pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + pc_xxzz[j] * pa_y[j] * fl1_fx + pc_xxz[j] * pa_yz[j] * fl1_fx + pc_xzz[j] * pa_y[j] * fl1_fx * pb_x[j] + pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxyz[j] * fl1_fx * pa_z[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xz[j] + fl1_fx * pa_y[j] * pc_yyzz[j] + 0.5 * fl1_fx * pc_yyyz[j] * pa_z[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yzz[j] + fl1_fx * pa_yz[j] * pc_yyz[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] + fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_yz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] + 0.5 * pc_xxzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_yz[j] + pa_xyy[j] * pc_xyzz[j] + 2.0 * pa_xyz[j] * pc_xyyz[j] + 2.0 * pa_xy[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xyyz[j] * pb_z[j] + pa_xz[j] * pc_yyyz[j] * pb_x[j] + pa_xz[j] * pc_xyyz[j] * pb_y[j] + pa_xz[j] * pc_xyyy[j] * pb_z[j] + pa_x[j] * pc_yyzz[j] * pb_xy[j] + pa_x[j] * pc_yyyz[j] * pb_xz[j] + pa_x[j] * pc_xyyz[j] * pb_yz[j] + pc_xxyz[j] * pa_yyz[j] + pc_xyzz[j] * pa_yy[j] * pb_x[j] + pc_xxzz[j] * pa_yy[j] * pb_y[j] + pc_xxyz[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xyyz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxyz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xxyy[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xyyz[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pa_z[j] * pb_xy[j] + pc_xyyy[j] * pa_z[j] * pb_xz[j] + pc_xxyy[j] * pa_z[j] * pb_yz[j] + pc_xyyz[j] * pb_xyz[j]);

                t_xyyz_xyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pc_yzz[j] - 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - pc_xxyy[j] * pa_y[j] * fl1_fx - pc_xxzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pa_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyyzz[j] - fl1_fx * pa_y[j] * pc_yyzz[j] - 0.5 * fl1_fx * pc_yyyz[j] * pa_z[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] - 0.5 * pc_xxzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_xyyzz[j] - pa_xz[j] * pc_xyyyz[j] - pa_x[j] * pc_yyyzz[j] * pb_x[j] - pa_x[j] * pc_xyyzz[j] * pb_y[j] - pa_x[j] * pc_xyyyz[j] * pb_z[j] - pc_xxyzz[j] * pa_yy[j] - 2.0 * pc_xxyyz[j] * pa_yz[j] - 2.0 * pc_xyyzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_y[j] * pb_z[j] - pc_xyyyz[j] * pa_z[j] * pb_x[j] - pc_xxyyz[j] * pa_z[j] * pb_y[j] - pc_xxyyy[j] * pa_z[j] * pb_z[j] - pc_xyyzz[j] * pb_xy[j] - pc_xyyyz[j] * pb_xz[j] - pc_xxyyz[j] * pb_yz[j]);

                t_xyyz_xyz[j] += fl_s_0_0_6 * (0.5 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + pa_x[j] * pc_xyyyzz[j] + 2.0 * pc_xxyyzz[j] * pa_y[j] + pc_xxyyyz[j] * pa_z[j] + pc_xyyyzz[j] * pb_x[j] + pc_xxyyzz[j] * pb_y[j] + pc_xxyyyz[j] * pb_z[j]);

                t_xyyz_xyz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_75_76(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (75,76)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_xzz = primBuffer.data(150 * idx + 75);

            // Batch of Integrals (75,76)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_x, pb_xz, pb_xzz, pb_z, pb_zz, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, \
                                     pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, \
                                     pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyz_xzz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_z[j] + 0.25 * fl3_fx * pb_z[j] + 0.25 * fl2_fx * pa_yyz[j] + 0.5 * fl2_fx * pa_yy[j] * pb_z[j] + 0.25 * pa_xz[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xyyz[j] * pb_x[j] * fl1_fx + pa_xyy[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yyz[j] * pb_zz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xzz[j] + pa_xyyz[j] * pb_xzz[j]);

                t_xyyz_xzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pb_z[j] - 0.5 * fl2_fx * pa_yyz[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - fl2_fx * pa_yy[j] * pb_z[j] - 0.5 * fl2_fx * pa_yz[j] * pc_y[j] - fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.25 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_xz[j] - 0.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.5 * pa_xyyz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xyyz[j] * pc_x[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_z[j] * pb_x[j] * fl1_fx - pa_xyy[j] * fl1_fx * pc_x[j] * pb_z[j] - pa_xyy[j] * fl1_fx * pb_xz[j] - pa_xyz[j] * pc_y[j] * pb_x[j] * fl1_fx - 2.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_x[j] * pa_yyz[j] * pb_x[j] * fl1_fx - pc_x[j] * pa_yy[j] * fl1_fx * pb_xz[j] - fl1_fx * pa_yyz[j] * pb_z[j] * pc_z[j] - 0.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_zz[j] - fl1_fx * pa_yz[j] * pc_y[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yyz[j] * pb_zz[j] - pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] - 2.0 * pa_xyyz[j] * pb_xz[j] * pc_z[j] - pa_xyyz[j] * pc_x[j] * pb_zz[j] - pa_xyy[j] * pc_z[j] * pb_xzz[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_xzz[j] - pc_x[j] * pa_yyz[j] * pb_xzz[j]);

                t_xyyz_xzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 0.375 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 1.5 * fl2_fx * pa_yy[j] * pc_z[j] + fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 2.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pa_z[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + 0.25 * fl2_fx * pa_yyz[j] + 0.5 * fl2_fx * pa_yy[j] * pb_z[j] + 0.5 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.25 * pa_xz[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_xz[j] + 0.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.25 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + pc_x[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 0.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xyyz[j] * pc_x[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx + pa_xyy[j] * fl1_fx * pc_x[j] * pb_z[j] + pa_xyz[j] * pc_y[j] * pb_x[j] * fl1_fx + pa_xyz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_xz[j] + 0.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx + pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] + 0.5 * pc_x[j] * pa_yyz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yyz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx + pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] + pc_x[j] * pa_yy[j] * fl1_fx * pb_xz[j] + pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx + 2.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yyz[j] * pc_zz[j] + fl1_fx * pa_yy[j] * pc_zz[j] * pb_z[j] + 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_zz[j] + fl1_fx * pa_yyz[j] * pb_z[j] * pc_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_z[j] * pb_zz[j] + fl1_fx * pa_yz[j] * pc_y[j] * pb_zz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] + pa_xz[j] * fl1_fx * pc_xz[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_zz[j] + pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] + 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] + pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] + pa_xyyz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xyyz[j] * pc_xz[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_zz[j] * pb_xz[j] + pa_xyy[j] * pc_xz[j] * pb_zz[j] + 4.0 * pa_xyz[j] * pc_yz[j] * pb_xz[j] + 2.0 * pa_xyz[j] * pc_xy[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xzz[j] + pa_xz[j] * pc_yy[j] * pb_xzz[j] + 2.0 * pc_xz[j] * pa_yyz[j] * pb_xz[j] + pc_xx[j] * pa_yyz[j] * pb_zz[j] + pc_xz[j] * pa_yy[j] * pb_xzz[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xzz[j]);

                t_xyyz_xzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.125 * fl3_fx * pa_z[j] - 0.25 * fl3_fx * pb_z[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 0.5 * fl2_fx * pc_yy[j] * pa_z[j] - 0.75 * fl2_fx * pc_yyz[j] - fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 0.5 * fl2_fx * pa_yz[j] * pc_y[j] - fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.25 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.5 * pc_xx[j] * fl2_fx * pa_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxz[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.5 * fl2_fx * pa_z[j] * pc_zz[j] - fl2_fx * pc_zz[j] * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx - pa_xyz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 0.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xz[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * pa_yyz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx - pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] - pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx - pc_xxy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 2.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_xyy[j] * fl1_fx * pb_xz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_zzz[j] - fl1_fx * pa_yz[j] * pc_yzz[j] - 2.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yyz[j] * pc_zz[j] - fl1_fx * pa_yy[j] * pc_zz[j] * pb_z[j] - 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_zz[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] - pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] - 0.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] - pa_xz[j] * fl1_fx * pc_xz[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_zz[j] - 0.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] - pc_xzz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xzz[j] - pa_xyyz[j] * pc_xzz[j] - pa_xyy[j] * pc_zzz[j] * pb_x[j] - 2.0 * pa_xyy[j] * pc_xzz[j] * pb_z[j] - 2.0 * pa_xyz[j] * pc_yzz[j] * pb_x[j] - 4.0 * pa_xyz[j] * pc_xyz[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_yzz[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_xz[j] - pa_xz[j] * pc_xyy[j] * pb_zz[j] - pa_x[j] * pc_yyz[j] * pb_xzz[j] - pc_xzz[j] * pa_yyz[j] * pb_x[j] - 2.0 * pc_xxz[j] * pa_yyz[j] * pb_z[j] - 2.0 * pc_xzz[j] * pa_yy[j] * pb_xz[j] - pc_xxz[j] * pa_yy[j] * pb_zz[j] - 4.0 * pc_xyz[j] * pa_yz[j] * pb_xz[j] - 2.0 * pc_xxy[j] * pa_yz[j] * pb_zz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xzz[j] - pc_xyy[j] * pa_z[j] * pb_xzz[j]);

                t_xyyz_xzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.25 * fl2_fx * pc_yy[j] * pa_z[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 0.5 * pa_xz[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx + pc_xxy[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyyz[j] * pb_x[j] * fl1_fx + pc_xxyy[j] * fl1_fx * pb_z[j] + pc_xyy[j] * fl1_fx * pb_xz[j] + fl1_fx * pa_y[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pa_z[j] + fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_zzz[j] + fl1_fx * pa_yz[j] * pc_yzz[j] + 2.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xzz[j] + 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] + pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] + 0.5 * pc_xxzz[j] * fl1_fx * pa_z[j] + 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] + pc_xxzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] + pc_xzz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + pa_xyy[j] * pc_xzzz[j] + 2.0 * pa_xyz[j] * pc_xyzz[j] + 2.0 * pa_xy[j] * pc_yzzz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_z[j] + pa_xz[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yyzz[j] * pb_xz[j] + pa_x[j] * pc_xyyz[j] * pb_zz[j] + pc_xxzz[j] * pa_yyz[j] + pc_xzzz[j] * pa_yy[j] * pb_x[j] + 2.0 * pc_xxzz[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_yz[j] * pb_x[j] + 4.0 * pc_xxyz[j] * pa_yz[j] * pb_z[j] + 4.0 * pc_xyzz[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xz[j] + pc_xxyy[j] * pa_z[j] * pb_zz[j] + pc_xyyz[j] * pb_xzz[j]);

                t_xyyz_xzz[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yyz[j] - 0.75 * pc_xxz[j] * fl2_fx - 0.25 * fl2_fx * pc_zzz[j] - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - fl1_fx * pa_y[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_yyzz[j] * pa_z[j] - fl1_fx * pc_yyzz[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * fl1_fx * pa_z[j] - 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] - pc_xxzz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_xyzzz[j] - pa_xz[j] * pc_xyyzz[j] - pa_x[j] * pc_yyzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxzzz[j] * pa_yy[j] - 2.0 * pc_xxyzz[j] * pa_yz[j] - 2.0 * pc_xyzzz[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxyzz[j] * pa_y[j] * pb_z[j] - pc_xyyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xyyzz[j] * pb_xz[j] - pc_xxyyz[j] * pb_zz[j]);

                t_xyyz_xzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 0.5 * pc_xxzzz[j] * fl1_fx + pa_x[j] * pc_xyyzzz[j] + 2.0 * pc_xxyzzz[j] * pa_y[j] + pc_xxyyzz[j] * pa_z[j] + pc_xyyzzz[j] * pb_x[j] + 2.0 * pc_xxyyzz[j] * pb_z[j]);

                t_xyyz_xzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_76_77(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (76,77)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_yyy = primBuffer.data(150 * idx + 76);

            // Batch of Integrals (76,77)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_y, pb_yy, pb_yyy, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyz, \
                                     pc_xyyyyz, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, \
                                     pc_yyyyyz, pc_yyyyz, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyyz_yyy[j] = fl_s_0_0_0 * (1.5 * pa_xyz[j] * fl2_fx + 2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_xyyz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xyz[j] * fl1_fx * pb_yy[j] + 0.5 * pa_xz[j] * fl1_fx * pb_yyy[j] + pa_xyyz[j] * pb_yyy[j]);

                t_xyyz_yyy[j] += fl_s_0_0_1 * (-3.0 * pa_xyz[j] * fl2_fx - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 3.75 * pa_xz[j] * pc_y[j] * fl2_fx - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 4.5 * pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pa_xyyz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xyyz[j] * pc_y[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_z[j] * pb_y[j] * fl1_fx - 9.0 * pa_xyz[j] * pc_y[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_yy[j] - 3.0 * pa_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_x[j] * pa_yyz[j] * pb_y[j] * fl1_fx - 3.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yy[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] - 0.5 * pa_xz[j] * fl1_fx * pb_yyy[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] - 3.0 * pa_xyyz[j] * pb_yy[j] * pc_y[j] - pa_xyy[j] * pc_z[j] * pb_yyy[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_yyy[j] - pc_x[j] * pa_yyz[j] * pb_yyy[j]);

                t_xyyz_yyy[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + 1.5 * pa_xyz[j] * fl2_fx + 7.5 * pa_xz[j] * pc_y[j] * fl2_fx + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * pa_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 1.5 * pa_xyyz[j] * pc_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + 9.0 * pa_xyz[j] * pc_y[j] * pb_y[j] * fl1_fx + 6.0 * pa_xyz[j] * pc_yy[j] * fl1_fx + 9.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_yy[j] + 9.0 * pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 4.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_yyz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yyz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx + 9.0 * pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] + 3.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yy[j] + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] + 0.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] + 3.0 * pa_xyyz[j] * pb_y[j] * pc_yy[j] + 3.0 * pa_xyy[j] * pc_yz[j] * pb_yy[j] + 6.0 * pa_xyz[j] * pc_yy[j] * pb_yy[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_yyy[j] + pa_xz[j] * pc_yy[j] * pb_yyy[j] + 3.0 * pc_xy[j] * pa_yyz[j] * pb_yy[j] + pc_xz[j] * pa_yy[j] * pb_yyy[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_yyy[j]);

                t_xyyz_yyy[j] += fl_s_0_0_3 * (-1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.75 * pa_xz[j] * pc_y[j] * fl2_fx - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.0 * pc_xz[j] * pa_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pa_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - 6.0 * pa_xyz[j] * pc_yy[j] * fl1_fx - 9.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx - 5.0 * pa_xz[j] * pc_yyy[j] * fl1_fx - 9.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * pa_yyz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 9.0 * pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx - 6.0 * pc_xyy[j] * pa_yz[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx - 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] - 9.0 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - pa_xyyz[j] * pc_yyy[j] - 3.0 * pa_xyy[j] * pc_yyz[j] * pb_y[j] - 6.0 * pa_xyz[j] * pc_yyy[j] * pb_y[j] - 6.0 * pa_xy[j] * pc_yyz[j] * pb_yy[j] - 3.0 * pa_xz[j] * pc_yyy[j] * pb_yy[j] - pa_x[j] * pc_yyz[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_yyz[j] * pb_y[j] - 3.0 * pc_xyz[j] * pa_yy[j] * pb_yy[j] - 6.0 * pc_xyy[j] * pa_yz[j] * pb_yy[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_yyy[j] - pc_xyy[j] * pa_z[j] * pb_yyy[j]);

                t_xyyz_yyy[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 6.0 * pa_xy[j] * pc_yyz[j] * fl1_fx + 5.0 * pa_xz[j] * pc_yyy[j] * fl1_fx + 9.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 6.0 * pc_xyy[j] * pa_yz[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + 9.0 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyyz[j] * pb_y[j] * fl1_fx + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pa_xyy[j] * pc_yyyz[j] + 2.0 * pa_xyz[j] * pc_yyyy[j] + 6.0 * pa_xy[j] * pc_yyyz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_yyyy[j] * pb_y[j] + 3.0 * pa_x[j] * pc_yyyz[j] * pb_yy[j] + pc_xyyy[j] * pa_yyz[j] + 3.0 * pc_xyyz[j] * pa_yy[j] * pb_y[j] + 6.0 * pc_xyyy[j] * pa_yz[j] * pb_y[j] + 6.0 * pc_xyyz[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xyyy[j] * pa_z[j] * pb_yy[j] + pc_xyyz[j] * pb_yyy[j]);

                t_xyyz_yyy[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx - 6.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx - 9.0 * pc_xyyz[j] * pb_y[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_yyyyz[j] - pa_xz[j] * pc_yyyyy[j] - 3.0 * pa_x[j] * pc_yyyyz[j] * pb_y[j] - pc_xyyyz[j] * pa_yy[j] - 2.0 * pc_xyyyy[j] * pa_yz[j] - 6.0 * pc_xyyyz[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xyyyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyyz[j] * pb_yy[j]);

                t_xyyz_yyy[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_yyyyyz[j] + 2.0 * pc_xyyyyz[j] * pa_y[j] + pc_xyyyyy[j] * pa_z[j] + 3.0 * pc_xyyyyz[j] * pb_y[j]);

                t_xyyz_yyy[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_77_78(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (77,78)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_yyz = primBuffer.data(150 * idx + 77);

            // Batch of Integrals (77,78)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_y, pb_yy, pb_yyz, pb_yz, pb_z, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, \
                                     pc_xyyyyzz, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, \
                                     pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyyz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyz_yyz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.25 * pa_xyy[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xyyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xyy[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_yyz[j] + pa_xyyz[j] * pb_yyz[j]);

                t_xyyz_yyz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.5 * pa_xyy[j] * fl2_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 2.0 * pa_xy[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * pa_yy[j] * fl2_fx - pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.25 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xyyz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xyy[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_xyy[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_yy[j] - 3.0 * pa_xyz[j] * pc_y[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_y[j] * fl1_fx * pb_yy[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_yz[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_x[j] * pa_yyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yy[j] - 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_yyz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] - pa_xyyz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xyyz[j] * pb_yz[j] * pc_y[j] - pa_xyy[j] * pc_z[j] * pb_yyz[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_yyz[j] - pc_x[j] * pa_yyz[j] * pb_yyz[j]);

                t_xyyz_yyz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.25 * pa_xyy[j] * fl2_fx + 3.0 * pa_xy[j] * pc_y[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 3.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pa_xz[j] * fl2_fx * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.5 * pc_x[j] * pa_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 2.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xyyz[j] * fl1_fx * pc_z[j] + 0.5 * pa_xyy[j] * pc_zz[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_xyy[j] * fl1_fx * pc_yy[j] + pa_xyy[j] * fl1_fx * pb_y[j] * pc_y[j] + 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_y[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_y[j] + pa_xy[j] * pc_y[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_y[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_z[j] + 2.0 * pa_xy[j] * fl1_fx * pc_z[j] * pb_yz[j] + 3.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xz[j] * pa_yyz[j] * fl1_fx + 0.5 * pc_x[j] * pa_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] + pc_xy[j] * pa_yy[j] * fl1_fx * pb_y[j] + 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] + pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] + 2.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_y[j] + 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] + 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 0.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] + 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 0.5 * pc_xz[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] + 2.0 * pa_xyyz[j] * pb_y[j] * pc_yz[j] + pa_xyyz[j] * pc_yy[j] * pb_z[j] + pa_xyy[j] * pc_zz[j] * pb_yy[j] + 2.0 * pa_xyy[j] * pc_yz[j] * pb_yz[j] + 2.0 * pa_xyz[j] * pc_yz[j] * pb_yy[j] + 4.0 * pa_xyz[j] * pc_yy[j] * pb_yz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_yyz[j] + pa_xz[j] * pc_yy[j] * pb_yyz[j] + pc_xz[j] * pa_yyz[j] * pb_yy[j] + 2.0 * pc_xy[j] * pa_yyz[j] * pb_yz[j] + pc_xz[j] * pa_yy[j] * pb_yyz[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_yyz[j]);

                t_xyyz_yyz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 3.0 * pa_x[j] * pc_yy[j] * fl2_fx - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.25 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pc_xy[j] * pa_y[j] * fl2_fx - pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xyy[j] * pc_zz[j] * fl1_fx - 0.5 * pa_xyy[j] * fl1_fx * pc_yy[j] - 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_yyy[j] * fl1_fx - 2.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_y[j] - 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xz[j] * pa_yyz[j] * fl1_fx - 0.5 * pc_xzz[j] * pa_yy[j] * fl1_fx - 0.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyy[j] * pa_yy[j] * fl1_fx - pc_xy[j] * pa_yy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] - pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] - 2.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] - 2.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_y[j] - 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * pc_xz[j] * fl1_fx * pb_yyz[j] - pa_xyyz[j] * pc_yyz[j] - 2.0 * pa_xyy[j] * pc_yzz[j] * pb_y[j] - pa_xyy[j] * pc_yyz[j] * pb_z[j] - 4.0 * pa_xyz[j] * pc_yyz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_yyy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_yy[j] - 4.0 * pa_xy[j] * pc_yyz[j] * pb_yz[j] - pa_xz[j] * pc_yyz[j] * pb_yy[j] - 2.0 * pa_xz[j] * pc_yyy[j] * pb_yz[j] - pa_x[j] * pc_yyz[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_yyz[j] * pb_y[j] - pc_xyy[j] * pa_yyz[j] * pb_z[j] - pc_xzz[j] * pa_yy[j] * pb_yy[j] - 2.0 * pc_xyz[j] * pa_yy[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_yy[j] - 4.0 * pc_xyy[j] * pa_yz[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_yyz[j] - pc_xyy[j] * pa_z[j] * pb_yyz[j]);

                t_xyyz_yyz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xzz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx + pa_xy[j] * pc_yyy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xzz[j] * pa_yy[j] * fl1_fx + 0.5 * pc_xyy[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xyyy[j] * pa_y[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] + 2.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + pc_xyyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + pa_xyy[j] * pc_yyzz[j] + 2.0 * pa_xyz[j] * pc_yyyz[j] + 4.0 * pa_xy[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_yyyz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_yyyz[j] * pb_y[j] + pa_xz[j] * pc_yyyy[j] * pb_z[j] + pa_x[j] * pc_yyzz[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_yyyz[j] * pb_yz[j] + pc_xyyz[j] * pa_yyz[j] + 2.0 * pc_xyzz[j] * pa_yy[j] * pb_y[j] + pc_xyyz[j] * pa_yy[j] * pb_z[j] + 4.0 * pc_xyyz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xyyy[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_yy[j] + 4.0 * pc_xyyz[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xyyy[j] * pa_z[j] * pb_yz[j] + pc_xyyz[j] * pb_yyz[j]);

                t_xyyz_yyz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - pc_xyyy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyyyy[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_yyyzz[j] - pa_xz[j] * pc_yyyyz[j] - 2.0 * pa_x[j] * pc_yyyzz[j] * pb_y[j] - pa_x[j] * pc_yyyyz[j] * pb_z[j] - pc_xyyzz[j] * pa_yy[j] - 2.0 * pc_xyyyz[j] * pa_yz[j] - 4.0 * pc_xyyzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_y[j] - pc_xyyyy[j] * pa_z[j] * pb_z[j] - pc_xyyzz[j] * pb_yy[j] - 2.0 * pc_xyyyz[j] * pb_yz[j]);

                t_xyyz_yyz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xyyyy[j] * fl1_fx + pa_x[j] * pc_yyyyzz[j] + 2.0 * pc_xyyyzz[j] * pa_y[j] + pc_xyyyyz[j] * pa_z[j] + 2.0 * pc_xyyyzz[j] * pb_y[j] + pc_xyyyyz[j] * pb_z[j]);

                t_xyyz_yyz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_78_79(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (78,79)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_yzz = primBuffer.data(150 * idx + 78);

            // Batch of Integrals (78,79)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_y, pb_yz, pb_yzz, pb_z, pb_zz, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, \
                                     pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyyz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyyz_yzz[j] = fl_s_0_0_0 * (0.5 * pa_xyz[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_z[j] + 0.25 * pa_xz[j] * fl2_fx * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xyyz[j] * pb_y[j] * fl1_fx + pa_xyy[j] * fl1_fx * pb_yz[j] + pa_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_yzz[j] + pa_xyyz[j] * pb_yzz[j]);

                t_xyyz_yzz[j] += fl_s_0_0_1 * (-pa_xyz[j] * fl2_fx - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 2.0 * pa_xy[j] * fl2_fx * pb_z[j] - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.5 * pc_x[j] * pa_yz[j] * fl2_fx - pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 0.5 * pa_xz[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - pa_x[j] * fl2_fx * pb_yz[j] - 0.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xyyz[j] * pb_y[j] * fl1_fx - 0.5 * pa_xyyz[j] * pc_y[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_z[j] * pb_y[j] * fl1_fx - pa_xyy[j] * fl1_fx * pc_y[j] * pb_z[j] - pa_xyy[j] * fl1_fx * pb_yz[j] - pa_xyz[j] * pc_y[j] * pb_y[j] * fl1_fx - 2.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_yz[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] - pa_xy[j] * fl1_fx * pc_z[j] * pb_zz[j] - pa_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_x[j] * pa_yyz[j] * pb_y[j] * fl1_fx - pc_x[j] * pa_yy[j] * fl1_fx * pb_yz[j] - pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] - pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_yzz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] - 2.0 * pa_xyyz[j] * pb_yz[j] * pc_z[j] - pa_xyyz[j] * pc_y[j] * pb_zz[j] - pa_xyy[j] * pc_z[j] * pb_yzz[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_yzz[j] - pc_x[j] * pa_yyz[j] * pb_yzz[j]);

                t_xyyz_yzz[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + 0.5 * pa_xyz[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xz[j] * pc_y[j] * fl2_fx + 2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 3.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + pc_x[j] * pa_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 2.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 0.25 * pa_xz[j] * fl2_fx * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xyyz[j] * pc_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + pa_xyy[j] * fl1_fx * pc_y[j] * pb_z[j] + pa_xyz[j] * pc_y[j] * pb_y[j] * fl1_fx + pa_xyz[j] * pc_yy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 2.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_yz[j] + pa_xyz[j] * fl1_fx * pc_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_z[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] + pa_xy[j] * fl1_fx * pc_z[j] * pb_zz[j] + 0.5 * pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx + pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 0.5 * pc_x[j] * pa_yyz[j] * pb_y[j] * fl1_fx + 0.5 * pc_xy[j] * pa_yyz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx + pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] + pc_x[j] * pa_yy[j] * fl1_fx * pb_yz[j] + pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx + 2.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] + 2.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] + pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] + pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] + pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] + pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] + pa_xyyz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xyyz[j] * pc_yz[j] * pb_z[j] + 2.0 * pa_xyy[j] * pc_zz[j] * pb_yz[j] + pa_xyy[j] * pc_yz[j] * pb_zz[j] + 4.0 * pa_xyz[j] * pc_yz[j] * pb_yz[j] + 2.0 * pa_xyz[j] * pc_yy[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_yzz[j] + pa_xz[j] * pc_yy[j] * pb_yzz[j] + 2.0 * pc_xz[j] * pa_yyz[j] * pb_yz[j] + pc_xy[j] * pa_yyz[j] * pb_zz[j] + pc_xz[j] * pa_yy[j] * pb_yzz[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_yzz[j]);

                t_xyyz_yzz[j] += fl_s_0_0_3 * (-1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl2_fx - 0.5 * pc_x[j] * pa_yz[j] * fl2_fx - pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pa_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pc_xz[j] * fl2_fx * pb_y[j] - 0.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - pa_xyz[j] * pc_yy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yyz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] - pa_xy[j] * fl1_fx * pc_zzz[j] - pa_xyz[j] * fl1_fx * pc_zz[j] - 2.0 * pa_xy[j] * fl1_fx * pc_zz[j] * pb_z[j] - 0.5 * pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx - pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xz[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * pa_yyz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] - pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx - pc_xyy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx - 2.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] - pc_xzz[j] * pa_yz[j] * fl1_fx - 2.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] - pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx - pc_xyy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] - 0.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] - 0.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] - pc_xzz[j] * fl1_fx * pb_yz[j] - pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - pa_xyyz[j] * pc_yzz[j] - pa_xyy[j] * pc_zzz[j] * pb_y[j] - 2.0 * pa_xyy[j] * pc_yzz[j] * pb_z[j] - 2.0 * pa_xyz[j] * pc_yzz[j] * pb_y[j] - 4.0 * pa_xyz[j] * pc_yyz[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_yzz[j] * pb_yz[j] - 2.0 * pa_xy[j] * pc_yyz[j] * pb_zz[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_yz[j] - pa_xz[j] * pc_yyy[j] * pb_zz[j] - pa_x[j] * pc_yyz[j] * pb_yzz[j] - pc_xzz[j] * pa_yyz[j] * pb_y[j] - 2.0 * pc_xyz[j] * pa_yyz[j] * pb_z[j] - 2.0 * pc_xzz[j] * pa_yy[j] * pb_yz[j] - pc_xyz[j] * pa_yy[j] * pb_zz[j] - 4.0 * pc_xyz[j] * pa_yz[j] * pb_yz[j] - 2.0 * pc_xyy[j] * pa_yz[j] * pb_zz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_yzz[j] - pc_xyy[j] * pa_z[j] * pb_yzz[j]);

                t_xyyz_yzz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_yyz[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_zzz[j] + 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + pc_xyy[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xzzz[j] * pa_y[j] * fl1_fx + pc_xzz[j] * pa_yz[j] * fl1_fx + 2.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyyz[j] * pb_y[j] * fl1_fx + pc_xyyy[j] * fl1_fx * pb_z[j] + pc_xyy[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] + 0.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] + pc_xzz[j] * fl1_fx * pb_yz[j] + pa_xyy[j] * pc_yzzz[j] + 2.0 * pa_xyz[j] * pc_yyzz[j] + 2.0 * pa_xy[j] * pc_yzzz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_yyzz[j] * pb_z[j] + pa_xz[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_yyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yyzz[j] * pb_yz[j] + pa_x[j] * pc_yyyz[j] * pb_zz[j] + pc_xyzz[j] * pa_yyz[j] + pc_xzzz[j] * pa_yy[j] * pb_y[j] + 2.0 * pc_xyzz[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_yz[j] * pb_y[j] + 4.0 * pc_xyyz[j] * pa_yz[j] * pb_z[j] + 4.0 * pc_xyzz[j] * pa_y[j] * pb_yz[j] + 2.0 * pc_xyyz[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_yz[j] + pc_xyyy[j] * pa_z[j] * pb_zz[j] + pc_xyyz[j] * pb_yzz[j]);

                t_xyyz_yzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - pc_xzzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_yyzzz[j] - pa_xz[j] * pc_yyyzz[j] - pa_x[j] * pc_yyzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_yyyzz[j] * pb_z[j] - pc_xyzzz[j] * pa_yy[j] - 2.0 * pc_xyyzz[j] * pa_yz[j] - 2.0 * pc_xyzzz[j] * pa_y[j] * pb_y[j] - 4.0 * pc_xyyzz[j] * pa_y[j] * pb_z[j] - pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xyyzz[j] * pb_yz[j] - pc_xyyyz[j] * pb_zz[j]);

                t_xyyz_yzz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yyyzzz[j] + 2.0 * pc_xyyzzz[j] * pa_y[j] + pc_xyyyzz[j] * pa_z[j] + pc_xyyzzz[j] * pb_y[j] + 2.0 * pc_xyyyzz[j] * pb_z[j]);

                t_xyyz_yzz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_79_80(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (79,80)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(34 * idx + 12);

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyyz = paDistances.data(34 * idx + 26);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyyz_zzz = primBuffer.data(150 * idx + 79);

            // Batch of Integrals (79,80)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_xyyz, pa_xyz, pa_xz, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, \
                                     pb_z, pb_zz, pb_zzz, pc_x, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, \
                                     pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, \
                                     pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, \
                                     pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xyyz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyyz_zzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xyyz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xyy[j] * fl1_fx * pb_zz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_zzz[j] + pa_xyyz[j] * pb_zzz[j]);

                t_xyyz_zzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xyy[j] * fl2_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 1.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * pa_xyyz[j] * pb_z[j] * fl1_fx - 1.5 * pa_xyyz[j] * pc_z[j] * fl1_fx - 4.5 * pa_xyy[j] * pc_z[j] * pb_z[j] * fl1_fx - 1.5 * pa_xyy[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xyz[j] * pc_y[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_x[j] * pa_yyz[j] * pb_z[j] * fl1_fx - 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_zzz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] - 3.0 * pa_xyyz[j] * pb_zz[j] * pc_z[j] - pa_xyy[j] * pc_z[j] * pb_zzz[j] - 2.0 * pa_xyz[j] * pc_y[j] * pb_zzz[j] - pc_x[j] * pa_yyz[j] * pb_zzz[j]);

                t_xyyz_zzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 3.0 * pa_xy[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_x[j] * pa_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pa_xz[j] * fl2_fx * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xyyz[j] * pc_z[j] * fl1_fx + 4.5 * pa_xyy[j] * pc_z[j] * pb_z[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_zz[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_y[j] * pb_z[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx + 9.0 * pa_xy[j] * pc_yz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xz[j] * pc_yy[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_yyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yyz[j] * fl1_fx + 4.5 * pc_xz[j] * pa_yy[j] * pb_z[j] * fl1_fx + 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xy[j] * pa_yz[j] * pb_z[j] * fl1_fx + 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] + 3.0 * pa_xyyz[j] * pb_z[j] * pc_zz[j] + 3.0 * pa_xyy[j] * pc_zz[j] * pb_zz[j] + 6.0 * pa_xyz[j] * pc_yz[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_zzz[j] + pa_xz[j] * pc_yy[j] * pb_zzz[j] + 3.0 * pc_xz[j] * pa_yyz[j] * pb_zz[j] + pc_xz[j] * pa_yy[j] * pb_zzz[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_zzz[j]);

                t_xyyz_zzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pc_zz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_z[j] - 1.5 * pc_xzz[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xyy[j] * pc_zz[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_yz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yyz[j] * fl1_fx - 4.5 * pa_x[j] * pc_yyz[j] * pb_z[j] * fl1_fx - 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * pa_yyz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_yy[j] * pb_z[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xy[j] * pa_yz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_y[j] * pb_z[j] * fl1_fx - 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xyy[j] * pa_z[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 0.5 * pa_xz[j] * fl1_fx * pc_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] - 1.5 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_zzz[j] - pa_xyyz[j] * pc_zzz[j] - 3.0 * pa_xyy[j] * pc_zzz[j] * pb_z[j] - 6.0 * pa_xyz[j] * pc_yzz[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_yzz[j] * pb_zz[j] - 3.0 * pa_xz[j] * pc_yyz[j] * pb_zz[j] - pa_x[j] * pc_yyz[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_yyz[j] * pb_z[j] - 3.0 * pc_xzz[j] * pa_yy[j] * pb_zz[j] - 6.0 * pc_xyz[j] * pa_yz[j] * pb_zz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_zzz[j] - pc_xyy[j] * pa_z[j] * pb_zzz[j]);

                t_xyyz_zzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pc_xzz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 6.0 * pa_xy[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yyz[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_y[j] * pb_z[j] * fl1_fx + 6.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_zzz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 0.5 * pc_xzzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + pa_xyy[j] * pc_zzzz[j] + 2.0 * pa_xyz[j] * pc_yzzz[j] + 6.0 * pa_xy[j] * pc_yzzz[j] * pb_z[j] + 3.0 * pa_xz[j] * pc_yyzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_zz[j] + pc_xzzz[j] * pa_yyz[j] + 3.0 * pc_xzzz[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xyzz[j] * pa_yz[j] * pb_z[j] + 6.0 * pc_xyzz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xyyz[j] * pa_z[j] * pb_zz[j] + pc_xyyz[j] * pb_zzz[j]);

                t_xyyz_zzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xzz[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] - 0.5 * pc_xzzzz[j] * fl1_fx - 0.5 * pc_xzzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_yzzzz[j] - pa_xz[j] * pc_yyzzz[j] - 3.0 * pa_x[j] * pc_yyzzz[j] * pb_z[j] - pc_xzzzz[j] * pa_yy[j] - 2.0 * pc_xyzzz[j] * pa_yz[j] - 6.0 * pc_xyzzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pb_zz[j]);

                t_xyyz_zzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_yyzzzz[j] + 2.0 * pc_xyzzzz[j] * pa_y[j] + pc_xyyzzz[j] * pa_z[j] + 3.0 * pc_xyyzzz[j] * pb_z[j]);

                t_xyyz_zzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_80_81(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (80,81)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_xxx = primBuffer.data(150 * idx + 80);

            // Batch of Integrals (80,81)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_x, pb_xx, pb_xxx, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyz, pc_xxxxyzz, \
                                     pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, \
                                     pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xyzz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyzz_xxx[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * fl2_fx * pa_yzz[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xyzz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pa_yzz[j] * pb_xx[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xxx[j] + pa_xyzz[j] * pb_xxx[j]);

                t_xyzz_xxx[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * fl2_fx * pa_yzz[j] - 1.5 * fl2_fx * pa_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_zz[j] - 1.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pb_xx[j] - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - 1.5 * pa_xyzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xyzz[j] * pc_x[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_x[j] * pa_yzz[j] * pb_x[j] * fl1_fx - 3.0 * fl1_fx * pa_yz[j] * pc_z[j] * pb_xx[j] - 1.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_xx[j] - 1.5 * fl1_fx * pa_yzz[j] * pb_xx[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xxx[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xyzz[j] * pb_xx[j] * pc_x[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_xxx[j] - pa_xzz[j] * pc_y[j] * pb_xxx[j] - pc_x[j] * pa_yzz[j] * pb_xxx[j]);

                t_xyzz_xxx[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 3.0 * fl2_fx * pa_yz[j] * pc_z[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_y[j] * pa_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pa_yzz[j] + 1.5 * pa_xy[j] * fl2_fx * pc_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_y[j] * pb_xx[j] + 0.75 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xyzz[j] * pc_x[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_z[j] * pb_x[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yzz[j] * fl1_fx + 9.0 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xx[j] + 3.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xx[j] + 3.0 * fl1_fx * pa_yz[j] * pc_z[j] * pb_xx[j] + 1.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_xyzz[j] * pb_x[j] * pc_xx[j] + 6.0 * pa_xyz[j] * pc_xz[j] * pb_xx[j] + pa_xy[j] * pc_zz[j] * pb_xxx[j] + 3.0 * pa_xzz[j] * pc_xy[j] * pb_xx[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_yzz[j] * pb_xx[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xxx[j] + pc_xy[j] * pa_zz[j] * pb_xxx[j]);

                t_xyzz_xxx[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 1.5 * fl2_fx * pa_y[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pa_z[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pa_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_zz[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 3.0 * pc_xx[j] * pa_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 4.5 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yzz[j] * fl1_fx - 9.0 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_yz[j] * fl1_fx - 4.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * fl1_fx * pc_yzz[j] * pb_xx[j] - 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xx[j] - 3.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xx[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xxx[j] - pa_xyzz[j] * pc_xxx[j] - 6.0 * pa_xyz[j] * pc_xxz[j] * pb_x[j] - 3.0 * pa_xy[j] * pc_xzz[j] * pb_xx[j] - 3.0 * pa_xzz[j] * pc_xxy[j] * pb_x[j] - 6.0 * pa_xz[j] * pc_xyz[j] * pb_xx[j] - pa_x[j] * pc_yzz[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_yzz[j] * pb_x[j] - 6.0 * pc_xxz[j] * pa_yz[j] * pb_xx[j] - pc_xzz[j] * pa_y[j] * pb_xxx[j] - 3.0 * pc_xxy[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xxx[j]);

                t_xyzz_xxx[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_xy[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_yz[j] * fl1_fx + 4.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyzz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pc_yzz[j] * pb_xx[j] + 0.5 * pa_xy[j] * fl1_fx * pc_xxx[j] + 0.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_xyz[j] * pc_xxxz[j] + 3.0 * pa_xy[j] * pc_xxzz[j] * pb_x[j] + pa_xzz[j] * pc_xxxy[j] + 6.0 * pa_xz[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_x[j] * pc_xyzz[j] * pb_xx[j] + pc_xxxx[j] * pa_yzz[j] + 6.0 * pc_xxxz[j] * pa_yz[j] * pb_x[j] + 3.0 * pc_xxzz[j] * pa_y[j] * pb_xx[j] + 3.0 * pc_xxxy[j] * pa_zz[j] * pb_x[j] + 6.0 * pc_xxyz[j] * pa_z[j] * pb_xx[j] + pc_xyzz[j] * pb_xxx[j]);

                t_xyzz_xxx[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yzz[j] - 1.5 * pc_xxy[j] * fl2_fx - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxxy[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pb_x[j] - pa_xy[j] * pc_xxxzz[j] - 2.0 * pa_xz[j] * pc_xxxyz[j] - 3.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_yz[j] - 3.0 * pc_xxxzz[j] * pa_y[j] * pb_x[j] - pc_xxxxy[j] * pa_zz[j] - 6.0 * pc_xxxyz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxyzz[j] * pb_xx[j]);

                t_xyzz_xxx[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxxxy[j] * fl1_fx + pa_x[j] * pc_xxxyzz[j] + pc_xxxxzz[j] * pa_y[j] + 2.0 * pc_xxxxyz[j] * pa_z[j] + 3.0 * pc_xxxyzz[j] * pb_x[j]);

                t_xyzz_xxx[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_81_82(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (81,82)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_xxy = primBuffer.data(150 * idx + 81);

            // Batch of Integrals (81,82)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_x, pb_xx, pb_xxy, pb_xy, pb_y, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, \
                                     pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, \
                                     pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyzz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyzz_xxy[j] = fl_s_0_0_0 * (0.125 * pa_x[j] * fl3_fx + 0.25 * fl3_fx * pb_x[j] + 0.25 * pa_xzz[j] * fl2_fx + 0.5 * fl2_fx * pa_zz[j] * pb_x[j] + 0.25 * pa_xy[j] * fl2_fx * pb_y[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xyzz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xzz[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_yzz[j] * pb_xy[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xxy[j] + pa_xyzz[j] * pb_xxy[j]);

                t_xyzz_xxy[j] += fl_s_0_0_1 * (-0.375 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 0.5 * pa_xzz[j] * fl2_fx - 0.5 * pa_xz[j] * fl2_fx * pc_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - fl2_fx * pa_zz[j] * pb_x[j] - 0.25 * pa_xy[j] * fl2_fx * pc_y[j] - 0.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - fl2_fx * pa_y[j] * pb_xy[j] - 0.5 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * pa_xyzz[j] * fl1_fx * pc_y[j] - 0.5 * pa_xyzz[j] * fl1_fx * pb_y[j] - pa_xyz[j] * pc_z[j] * fl1_fx * pb_y[j] - 0.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_y[j] - pa_xzz[j] * fl1_fx * pb_x[j] * pc_x[j] - pa_xz[j] * fl1_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_x[j] * pa_yzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xx[j] - fl1_fx * pa_yzz[j] * pb_x[j] * pc_y[j] - 2.0 * fl1_fx * pa_yz[j] * pc_z[j] * pb_xy[j] - fl1_fx * pc_y[j] * pa_zz[j] * pb_xy[j] - fl1_fx * pa_yzz[j] * pb_xy[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] - pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xxy[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] - pa_xyzz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xyzz[j] * pb_xy[j] * pc_x[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_xxy[j] - pa_xzz[j] * pc_y[j] * pb_xxy[j] - pc_x[j] * pa_yzz[j] * pb_xxy[j]);

                t_xyzz_xxy[j] += fl_s_0_0_2 * (0.375 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + pa_xz[j] * fl2_fx * pc_z[j] + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + 0.25 * pa_xzz[j] * fl2_fx + 1.5 * pc_x[j] * fl2_fx * pa_zz[j] + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + 2.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 0.5 * fl2_fx * pa_zz[j] * pb_x[j] + 0.5 * pa_xy[j] * fl2_fx * pc_y[j] + 0.25 * pa_xy[j] * fl2_fx * pb_y[j] + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 0.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 0.5 * pc_x[j] * fl2_fx * pb_xx[j] + fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + fl2_fx * pc_y[j] * pb_xy[j] + 0.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * pa_xyzz[j] * fl1_fx * pc_y[j] + pa_xyz[j] * pc_yz[j] * fl1_fx + pa_xyz[j] * pc_z[j] * fl1_fx * pb_y[j] + 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xzz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_y[j] + pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xzz[j] * fl1_fx * pc_xx[j] + 2.0 * pa_xz[j] * fl1_fx * pc_xz[j] * pb_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] + pa_xzz[j] * fl1_fx * pb_x[j] * pc_x[j] + pa_xz[j] * fl1_fx * pc_z[j] * pb_xx[j] + 1.5 * pc_xy[j] * pa_yzz[j] * fl1_fx + 1.5 * pc_x[j] * pa_yzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] + pc_xx[j] * fl1_fx * pa_zz[j] * pb_x[j] + pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] + 0.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xx[j] + 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_zz[j] * pb_xy[j] + fl1_fx * pc_yy[j] * pa_zz[j] * pb_x[j] + 2.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xy[j] + fl1_fx * pa_yzz[j] * pb_x[j] * pc_y[j] + 2.0 * fl1_fx * pa_yz[j] * pc_z[j] * pb_xy[j] + fl1_fx * pc_y[j] * pa_zz[j] * pb_xy[j] + pa_xy[j] * fl1_fx * pb_x[j] * pc_xy[j] + 0.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] + pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] + pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xyzz[j] * pb_x[j] * pc_xy[j] + pa_xyzz[j] * pc_xx[j] * pb_y[j] + 2.0 * pa_xyz[j] * pc_yz[j] * pb_xx[j] + 4.0 * pa_xyz[j] * pc_xz[j] * pb_xy[j] + pa_xy[j] * pc_zz[j] * pb_xxy[j] + pa_xzz[j] * pc_yy[j] * pb_xx[j] + 2.0 * pa_xzz[j] * pc_xy[j] * pb_xy[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xxy[j] + pc_xy[j] * pa_yzz[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_yzz[j] * pb_xy[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xxy[j] + pc_xy[j] * pa_zz[j] * pb_xxy[j]);

                t_xyzz_xxy[j] += fl_s_0_0_3 * (-0.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.25 * fl3_fx * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_zz[j] - 0.5 * pa_xz[j] * fl2_fx * pc_z[j] - 3.0 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - fl2_fx * pc_zz[j] * pb_x[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.25 * pa_xy[j] * fl2_fx * pc_y[j] - 0.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_xx[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.25 * pc_xxx[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_x[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - fl2_fx * pc_yy[j] * pb_x[j] - 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 0.5 * fl2_fx * pc_y[j] * pb_xy[j] - pa_xyz[j] * pc_yz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_yzz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xzz[j] * pc_yy[j] * fl1_fx - pa_xz[j] * pc_yyz[j] * fl1_fx - pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] - pa_xz[j] * fl1_fx * pc_xxz[j] - pa_x[j] * fl1_fx * pc_xzz[j] * pb_x[j] - 0.5 * pa_xzz[j] * fl1_fx * pc_xx[j] - 2.0 * pa_xz[j] * fl1_fx * pc_xz[j] * pb_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] - 1.5 * pc_xy[j] * pa_yzz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxx[j] * fl1_fx * pa_zz[j] - 2.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - pc_xx[j] * fl1_fx * pa_zz[j] * pb_x[j] - pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] - 2.0 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] - fl1_fx * pc_yzz[j] * pb_xy[j] - 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_x[j] - fl1_fx * pa_y[j] * pc_zz[j] * pb_xy[j] - fl1_fx * pc_yy[j] * pa_zz[j] * pb_x[j] - 2.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xy[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xxy[j] - pa_xy[j] * fl1_fx * pb_x[j] * pc_xy[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 0.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - pc_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xxy[j] - pa_xyzz[j] * pc_xxy[j] - 4.0 * pa_xyz[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xxz[j] * pb_y[j] - pa_xy[j] * pc_yzz[j] * pb_xx[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_xy[j] - 2.0 * pa_xzz[j] * pc_xyy[j] * pb_x[j] - pa_xzz[j] * pc_xxy[j] * pb_y[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xy[j] - pa_x[j] * pc_yzz[j] * pb_xxy[j] - 2.0 * pc_xxy[j] * pa_yzz[j] * pb_x[j] - pc_xxx[j] * pa_yzz[j] * pb_y[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_xx[j] - 4.0 * pc_xxz[j] * pa_yz[j] * pb_xy[j] - pc_xzz[j] * pa_y[j] * pb_xxy[j] - pc_xyy[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xxy[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xxy[j]);

                t_xyzz_xxy[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.5 * pc_xxx[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + 0.5 * pa_xy[j] * pc_yzz[j] * fl1_fx + pa_xz[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] + pa_xz[j] * fl1_fx * pc_xxz[j] + pa_x[j] * fl1_fx * pc_xzz[j] * pb_x[j] + 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + pc_xxxz[j] * fl1_fx * pa_z[j] + pc_xxzz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * fl1_fx * pa_zz[j] + 2.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + fl1_fx * pc_yyzz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] + 2.0 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] + fl1_fx * pc_yzz[j] * pb_xy[j] + 0.5 * pa_xy[j] * fl1_fx * pc_xxy[j] + 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + pc_xxyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + pc_xxy[j] * fl1_fx * pb_xy[j] + 2.0 * pa_xyz[j] * pc_xxyz[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_x[j] + pa_xy[j] * pc_xxzz[j] * pb_y[j] + pa_xzz[j] * pc_xxyy[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxyz[j] * pb_y[j] + pa_x[j] * pc_yyzz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xy[j] + pc_xxxy[j] * pa_yzz[j] + 4.0 * pc_xxyz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_yz[j] * pb_y[j] + pc_xyzz[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxzz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxyy[j] * pa_zz[j] * pb_x[j] + pc_xxxy[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_xy[j] + pc_xyzz[j] * pb_xxy[j]);

                t_xyzz_xxy[j] += fl_s_0_0_5 * (-0.75 * pc_xzz[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] - 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxxzz[j] * fl1_fx - pc_xxxz[j] * fl1_fx * pa_z[j] - pc_xxzz[j] * fl1_fx * pb_x[j] - fl1_fx * pc_yyzz[j] * pb_x[j] - 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx - 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] - pa_xy[j] * pc_xxyzz[j] - 2.0 * pa_xz[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - pa_x[j] * pc_xxyzz[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pa_yz[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_x[j] - pc_xxxzz[j] * pa_y[j] * pb_y[j] - pc_xxxyy[j] * pa_zz[j] - 4.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_y[j] - pc_xyyzz[j] * pb_xx[j] - 2.0 * pc_xxyzz[j] * pb_xy[j]);

                t_xyzz_xxy[j] += fl_s_0_0_6 * (1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + pa_x[j] * pc_xxyyzz[j] + pc_xxxyzz[j] * pa_y[j] + 2.0 * pc_xxxyyz[j] * pa_z[j] + 2.0 * pc_xxyyzz[j] * pb_x[j] + pc_xxxyzz[j] * pb_y[j]);

                t_xyzz_xxy[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_82_83(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (82,83)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_xxz = primBuffer.data(150 * idx + 82);

            // Batch of Integrals (82,83)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_x, pb_xx, pb_xxz, pb_xz, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyz, pc_xxxyzz, \
                                     pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyzz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyzz_xxz[j] = fl_s_0_0_0 * (0.5 * pa_xyz[j] * fl2_fx + fl2_fx * pa_yz[j] * pb_x[j] + 0.25 * pa_xy[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xyzz[j] * fl1_fx * pb_z[j] + pa_xyz[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_yzz[j] * pb_xz[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xxz[j] + pa_xyzz[j] * pb_xxz[j]);

                t_xyzz_xxz[j] += fl_s_0_0_1 * (-pa_xyz[j] * fl2_fx - 0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 0.5 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - 2.0 * fl2_fx * pa_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.5 * pa_xy[j] * fl2_fx * pb_z[j] - 0.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - fl2_fx * pa_y[j] * pb_xz[j] - 0.5 * fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * pa_xyzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyzz[j] * fl1_fx * pb_z[j] - pa_xyz[j] * pc_z[j] * fl1_fx * pb_z[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_x[j] - pa_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_xx[j] - 0.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_x[j] * pa_yzz[j] * fl1_fx * pb_z[j] - pc_x[j] * pa_yz[j] * fl1_fx * pb_xx[j] - fl1_fx * pa_yzz[j] * pb_x[j] * pc_z[j] - 2.0 * fl1_fx * pa_yz[j] * pc_z[j] * pb_xz[j] - fl1_fx * pc_y[j] * pa_zz[j] * pb_xz[j] - fl1_fx * pa_yzz[j] * pb_xz[j] - pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xxz[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] - pa_xyzz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xyzz[j] * pb_xz[j] * pc_x[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_xxz[j] - pa_xzz[j] * pc_y[j] * pb_xxz[j] - pc_x[j] * pa_yzz[j] * pb_xxz[j]);

                t_xyzz_xxz[j] += fl_s_0_0_2 * (0.5 * pa_xyz[j] * fl2_fx + 1.5 * pa_xy[j] * pc_z[j] * fl2_fx + pa_xz[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 3.0 * pc_x[j] * pa_yz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 3.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + 2.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + fl2_fx * pa_yz[j] * pb_x[j] + 0.25 * pa_xy[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + fl2_fx * pc_y[j] * pb_xz[j] + 0.5 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xyzz[j] * fl1_fx * pc_z[j] + pa_xyz[j] * pc_zz[j] * fl1_fx + pa_xyz[j] * pc_z[j] * fl1_fx * pb_z[j] + pa_xyz[j] * fl1_fx * pc_xx[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_x[j] * pc_x[j] + 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_x[j] + 1.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_xx[j] + 0.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_z[j] + pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 2.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] + pa_xz[j] * pc_y[j] * fl1_fx * pb_xx[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xz[j] * pa_yzz[j] * fl1_fx + 1.5 * pc_x[j] * pa_yzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] + 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_x[j] + pc_x[j] * pa_yz[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] + 2.0 * fl1_fx * pa_yz[j] * pc_zz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_zz[j] * pb_xz[j] + fl1_fx * pc_yz[j] * pa_zz[j] * pb_x[j] + 2.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xz[j] + fl1_fx * pa_yzz[j] * pb_x[j] * pc_z[j] + 2.0 * fl1_fx * pa_yz[j] * pc_z[j] * pb_xz[j] + fl1_fx * pc_y[j] * pa_zz[j] * pb_xz[j] + 0.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] + pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] + pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xyzz[j] * pb_x[j] * pc_xz[j] + pa_xyzz[j] * pc_xx[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_zz[j] * pb_xx[j] + 4.0 * pa_xyz[j] * pc_xz[j] * pb_xz[j] + pa_xy[j] * pc_zz[j] * pb_xxz[j] + pa_xzz[j] * pc_yz[j] * pb_xx[j] + 2.0 * pa_xzz[j] * pc_xy[j] * pb_xz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xxz[j] + pc_xz[j] * pa_yzz[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_yzz[j] * pb_xz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xxz[j] + pc_xy[j] * pa_zz[j] * pb_xxz[j]);

                t_xyzz_xxz[j] += fl_s_0_0_3 * (-0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 0.5 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - 4.5 * pc_xz[j] * pa_y[j] * fl2_fx - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 0.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.5 * fl2_fx * pc_y[j] * pb_xz[j] - pa_xyz[j] * pc_zz[j] * fl1_fx - pa_xyz[j] * fl1_fx * pc_xx[j] - 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xy[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_x[j] - 0.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - pa_xz[j] * pc_yzz[j] * fl1_fx - pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_xxy[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_x[j] - 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * pa_yzz[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] - pc_xxx[j] * pa_yz[j] * fl1_fx - 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - fl1_fx * pa_y[j] * pc_zzz[j] * pb_x[j] - 2.0 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_x[j] - fl1_fx * pc_yzz[j] * pb_xz[j] - 2.0 * fl1_fx * pa_yz[j] * pc_zz[j] * pb_x[j] - fl1_fx * pa_y[j] * pc_zz[j] * pb_xz[j] - fl1_fx * pc_yz[j] * pa_zz[j] * pb_x[j] - 2.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xz[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] - 0.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] - pc_xxy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - pa_xyzz[j] * pc_xxz[j] - 4.0 * pa_xyz[j] * pc_xzz[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xxz[j] * pb_z[j] - pa_xy[j] * pc_zzz[j] * pb_xx[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_xz[j] - 2.0 * pa_xzz[j] * pc_xyz[j] * pb_x[j] - pa_xzz[j] * pc_xxy[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_yzz[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xz[j] - pa_x[j] * pc_yzz[j] * pb_xxz[j] - 2.0 * pc_xxz[j] * pa_yzz[j] * pb_x[j] - pc_xxx[j] * pa_yzz[j] * pb_z[j] - 2.0 * pc_xzz[j] * pa_yz[j] * pb_xx[j] - 4.0 * pc_xxz[j] * pa_yz[j] * pb_xz[j] - pc_xzz[j] * pa_y[j] * pb_xxz[j] - pc_xyz[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xxy[j] * pa_zz[j] * pb_xz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xxz[j]);

                t_xyzz_xxz[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_xxz[j] * fl1_fx + pa_xz[j] * pc_yzz[j] * fl1_fx + pa_xz[j] * pc_xxy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xzz[j] * pa_yz[j] * fl1_fx + pc_xxx[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xzzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxxy[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + fl1_fx * pc_yzzz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_zzz[j] * pb_x[j] + 2.0 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_x[j] + fl1_fx * pc_yzz[j] * pb_xz[j] + 0.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + pc_xxy[j] * fl1_fx * pb_xz[j] + 2.0 * pa_xyz[j] * pc_xxzz[j] + 2.0 * pa_xy[j] * pc_xzzz[j] * pb_x[j] + pa_xy[j] * pc_xxzz[j] * pb_z[j] + pa_xzz[j] * pc_xxyz[j] + 4.0 * pa_xz[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxyz[j] * pb_z[j] + pa_x[j] * pc_yzzz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xz[j] + pc_xxxz[j] * pa_yzz[j] + 4.0 * pc_xxzz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_yz[j] * pb_z[j] + pc_xzzz[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxzz[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_x[j] + pc_xxxy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_xz[j] + pc_xyzz[j] * pb_xxz[j]);

                t_xyzz_xxz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xzzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - fl1_fx * pc_yzzz[j] * pb_x[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_xxzzz[j] - 2.0 * pa_xz[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - pa_x[j] * pc_xxyzz[j] * pb_z[j] - 2.0 * pc_xxxzz[j] * pa_yz[j] - 2.0 * pc_xxzzz[j] * pa_y[j] * pb_x[j] - pc_xxxzz[j] * pa_y[j] * pb_z[j] - pc_xxxyz[j] * pa_zz[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - pc_xyzzz[j] * pb_xx[j] - 2.0 * pc_xxyzz[j] * pb_xz[j]);

                t_xyzz_xxz[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_x[j] * pc_xxyzzz[j] + pc_xxxzzz[j] * pa_y[j] + 2.0 * pc_xxxyzz[j] * pa_z[j] + 2.0 * pc_xxyzzz[j] * pb_x[j] + pc_xxxyzz[j] * pb_z[j]);

                t_xyzz_xxz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_83_84(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (83,84)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_xyy = primBuffer.data(150 * idx + 83);

            // Batch of Integrals (83,84)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_x, pb_xy, pb_xyy, pb_y, pb_yy, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, \
                                     pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, \
                                     pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyzz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyzz_xyy[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_y[j] + 0.25 * fl3_fx * pb_y[j] + 0.25 * fl2_fx * pa_yzz[j] + 0.5 * fl2_fx * pa_zz[j] * pb_y[j] + 0.25 * pa_xy[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * pa_xyzz[j] * pb_x[j] * fl1_fx + pa_xzz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_yzz[j] * pb_yy[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xyy[j] + pa_xyzz[j] * pb_xyy[j]);

                t_xyzz_xyy[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pb_y[j] - 0.5 * fl2_fx * pa_yzz[j] - 0.5 * fl2_fx * pa_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_zz[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - fl2_fx * pa_zz[j] * pb_y[j] - 0.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.25 * pa_xy[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - pa_x[j] * fl2_fx * pb_xy[j] - 0.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_yy[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.5 * pa_xyzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xyzz[j] * pc_x[j] * fl1_fx - pa_xyz[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_y[j] * pb_x[j] * fl1_fx - pa_xzz[j] * fl1_fx * pc_x[j] * pb_y[j] - 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xy[j] - pa_xzz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_x[j] * pa_yzz[j] * pb_x[j] * fl1_fx - pc_x[j] * fl1_fx * pa_zz[j] * pb_xy[j] - fl1_fx * pa_yzz[j] * pb_y[j] * pc_y[j] - fl1_fx * pa_yz[j] * pc_z[j] * pb_yy[j] - 0.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_yy[j] - 0.5 * fl1_fx * pa_yzz[j] * pb_yy[j] - pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xyy[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_xyzz[j] * pb_xy[j] * pc_y[j] - pa_xyzz[j] * pc_x[j] * pb_yy[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_xyy[j] - pa_xzz[j] * pc_y[j] * pb_xyy[j] - pc_x[j] * pa_yzz[j] * pb_xyy[j]);

                t_xyzz_xyy[j] += fl_s_0_0_2 * (0.375 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.75 * fl3_fx * pb_y[j] + fl2_fx * pa_yz[j] * pc_z[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_y[j] * pa_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pa_z[j] + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + 2.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 0.25 * fl2_fx * pa_yzz[j] + 0.5 * fl2_fx * pa_zz[j] * pb_y[j] + 0.5 * pa_xy[j] * fl2_fx * pc_x[j] + 0.25 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_xy[j] + 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + pc_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 0.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * pa_xyzz[j] * pc_x[j] * fl1_fx + pa_xyz[j] * pc_z[j] * pb_x[j] * fl1_fx + pa_xyz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xz[j] * fl1_fx * pc_xz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] + pa_xzz[j] * fl1_fx * pc_x[j] * pb_y[j] + 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_xy[j] + 0.5 * pc_x[j] * pa_yzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yzz[j] * fl1_fx + pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + pc_xx[j] * fl1_fx * pa_zz[j] * pb_y[j] + 2.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] + pc_x[j] * fl1_fx * pa_zz[j] * pb_xy[j] + 0.5 * fl1_fx * pa_yzz[j] * pc_yy[j] + 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yy[j] + fl1_fx * pc_yy[j] * pa_zz[j] * pb_y[j] + fl1_fx * pc_yz[j] * pa_z[j] * pb_yy[j] + fl1_fx * pa_yzz[j] * pb_y[j] * pc_y[j] + fl1_fx * pa_yz[j] * pc_z[j] * pb_yy[j] + 0.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_yy[j] + 0.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] + pa_xy[j] * fl1_fx * pc_xy[j] * pb_y[j] + pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] + 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] + pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] + 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] + pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xyy[j] + pa_xyzz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xyzz[j] * pc_xy[j] * pb_y[j] + 4.0 * pa_xyz[j] * pc_yz[j] * pb_xy[j] + 2.0 * pa_xyz[j] * pc_xz[j] * pb_yy[j] + pa_xy[j] * pc_zz[j] * pb_xyy[j] + 2.0 * pa_xzz[j] * pc_yy[j] * pb_xy[j] + pa_xzz[j] * pc_xy[j] * pb_yy[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_yzz[j] * pb_xy[j] + pc_xx[j] * pa_yzz[j] * pb_yy[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xyy[j] + pc_xy[j] * pa_zz[j] * pb_xyy[j]);

                t_xyzz_xyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.125 * fl3_fx * pa_y[j] - 0.25 * fl3_fx * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pa_z[j] - 0.75 * fl2_fx * pc_yzz[j] - fl2_fx * pc_zz[j] * pb_y[j] - 0.5 * fl2_fx * pa_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_zz[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.25 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_y[j] - 0.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pa_y[j] * pc_yy[j] - 0.25 * fl2_fx * pc_yyy[j] - fl2_fx * pc_yy[j] * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - pa_xyz[j] * pc_xz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xy[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] - 2.0 * pa_xz[j] * fl1_fx * pc_xz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 0.5 * pc_xx[j] * pa_yzz[j] * fl1_fx - pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx - pc_xxz[j] * pa_yz[j] * fl1_fx - 0.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 2.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] - pc_xzz[j] * fl1_fx * pb_xy[j] - pc_xx[j] * fl1_fx * pa_zz[j] * pb_y[j] - 2.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] - fl1_fx * pa_yz[j] * pc_yyz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyy[j] * pa_zz[j] - 2.0 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] - 0.5 * fl1_fx * pa_yzz[j] * pc_yy[j] - 2.0 * fl1_fx * pa_yz[j] * pc_yz[j] * pb_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yy[j] - fl1_fx * pc_yy[j] * pa_zz[j] * pb_y[j] - fl1_fx * pc_yz[j] * pa_z[j] * pb_yy[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xyy[j] - 0.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] - pa_xy[j] * fl1_fx * pc_xy[j] * pb_y[j] - 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] - 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] - pc_xyy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xyy[j] - pa_xyzz[j] * pc_xyy[j] - 2.0 * pa_xyz[j] * pc_yyz[j] * pb_x[j] - 4.0 * pa_xyz[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_xy[j] - pa_xy[j] * pc_xzz[j] * pb_yy[j] - pa_xzz[j] * pc_yyy[j] * pb_x[j] - 2.0 * pa_xzz[j] * pc_xyy[j] * pb_y[j] - 4.0 * pa_xz[j] * pc_yyz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_yy[j] - pa_x[j] * pc_yzz[j] * pb_xyy[j] - pc_xyy[j] * pa_yzz[j] * pb_x[j] - 2.0 * pc_xxy[j] * pa_yzz[j] * pb_y[j] - 4.0 * pc_xyz[j] * pa_yz[j] * pb_xy[j] - 2.0 * pc_xxz[j] * pa_yz[j] * pb_yy[j] - pc_xzz[j] * pa_y[j] * pb_xyy[j] - 2.0 * pc_xyy[j] * pa_zz[j] * pb_xy[j] - pc_xxy[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xyy[j]);

                t_xyzz_xyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pa_z[j] + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pc_yyy[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 0.5 * pa_xy[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] + pc_xxz[j] * pa_yz[j] * fl1_fx + 0.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyzz[j] * pb_x[j] * fl1_fx + pc_xxzz[j] * fl1_fx * pb_y[j] + 2.0 * pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] + pc_xzz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] + fl1_fx * pc_yyyz[j] * pa_z[j] + fl1_fx * pc_yyzz[j] * pb_y[j] + fl1_fx * pa_yz[j] * pc_yyz[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyy[j] * pa_zz[j] + 2.0 * fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] + 0.5 * pa_xy[j] * fl1_fx * pc_xyy[j] + 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_x[j] + pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] + pc_xxyy[j] * fl1_fx * pb_y[j] + pc_xyy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xyz[j] * pc_xyyz[j] + pa_xy[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_y[j] + pa_xzz[j] * pc_xyyy[j] + 2.0 * pa_xz[j] * pc_yyyz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_x[j] * pc_yyzz[j] * pb_xy[j] + pa_x[j] * pc_xyzz[j] * pb_yy[j] + pc_xxyy[j] * pa_yzz[j] + 2.0 * pc_xyyz[j] * pa_yz[j] * pb_x[j] + 4.0 * pc_xxyz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_xy[j] + pc_xxzz[j] * pa_y[j] * pb_yy[j] + pc_xyyy[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxyy[j] * pa_zz[j] * pb_y[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_yy[j] + pc_xyzz[j] * pb_xyy[j]);

                t_xyzz_xyy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yzz[j] - 0.75 * pc_xxy[j] * fl2_fx - 0.25 * fl2_fx * pc_yyy[j] - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - pc_xxzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] - fl1_fx * pc_yyyz[j] * pa_z[j] - fl1_fx * pc_yyzz[j] * pb_y[j] - 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] - pc_xxyy[j] * fl1_fx * pb_y[j] - pa_xy[j] * pc_xyyzz[j] - 2.0 * pa_xz[j] * pc_xyyyz[j] - pa_x[j] * pc_yyyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_yz[j] - pc_xyyzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_y[j] - pc_xxyyy[j] * pa_zz[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyzz[j] * pb_xy[j] - pc_xxyzz[j] * pb_yy[j]);

                t_xyzz_xyy[j] += fl_s_0_0_6 * (1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 0.5 * pc_xxyyy[j] * fl1_fx + pa_x[j] * pc_xyyyzz[j] + pc_xxyyzz[j] * pa_y[j] + 2.0 * pc_xxyyyz[j] * pa_z[j] + pc_xyyyzz[j] * pb_x[j] + 2.0 * pc_xxyyzz[j] * pb_y[j]);

                t_xyzz_xyy[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_84_85(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (84,85)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_xyz = primBuffer.data(150 * idx + 84);

            // Batch of Integrals (84,85)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_x, pb_xy, pb_xyz, pb_xz, pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, \
                                     pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, \
                                     pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xyzz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyzz_xyz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_z[j] + 0.125 * fl3_fx * pb_z[j] + 0.5 * pa_xz[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pa_yz[j] * pb_y[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pa_y[j] * pb_yz[j] + pa_xyz[j] * fl1_fx * pb_xy[j] + 0.5 * pa_xzz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yzz[j] * pb_yz[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xyz[j] + pa_xyzz[j] * pb_xyz[j]);

                t_xyzz_xyz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.5 * pa_xz[j] * fl2_fx * pc_x[j] - pa_xz[j] * fl2_fx * pb_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * fl2_fx * pa_yz[j] * pc_y[j] - fl2_fx * pa_yz[j] * pb_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 0.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.25 * pc_x[j] * fl2_fx * pb_xz[j] - 0.25 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_yz[j] - 0.25 * fl2_fx * pc_y[j] * pb_yz[j] - pa_xyz[j] * fl1_fx * pb_x[j] * pc_y[j] - pa_xyz[j] * fl1_fx * pc_x[j] * pb_y[j] - pa_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_xy[j] - pa_xz[j] * pc_y[j] * fl1_fx * pb_xy[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_z[j] - 0.5 * pa_xzz[j] * fl1_fx * pc_x[j] * pb_z[j] - pa_xz[j] * fl1_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_xz[j] - pc_x[j] * pa_yz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_yzz[j] * pb_y[j] * pc_z[j] - 0.5 * fl1_fx * pa_yzz[j] * pc_y[j] * pb_z[j] - fl1_fx * pa_yz[j] * pc_z[j] * pb_yz[j] - 0.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yzz[j] * pb_yz[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] - 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xyz[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] - pa_xyzz[j] * pb_xy[j] * pc_z[j] - pa_xyzz[j] * pb_xz[j] * pc_y[j] - pa_xyzz[j] * pc_x[j] * pb_yz[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_xyz[j] - pa_xzz[j] * pc_y[j] * pb_xyz[j] - pc_x[j] * pa_yzz[j] * pb_xyz[j]);

                t_xyzz_xyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 0.75 * fl3_fx * pa_z[j] + 0.375 * fl3_fx * pb_z[j] + pa_xz[j] * fl2_fx * pc_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.5 * pa_xz[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pa_z[j] + pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + fl2_fx * pa_yz[j] * pc_y[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 0.5 * fl2_fx * pc_yy[j] * pa_z[j] + fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_zz[j] * pc_z[j] + fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.5 * fl2_fx * pa_yz[j] * pb_y[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xz[j] + 0.25 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * pc_x[j] * fl2_fx * pb_xz[j] + 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_z[j] + 0.5 * fl2_fx * pc_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_y[j] * pb_yz[j] + pa_xyz[j] * fl1_fx * pc_xy[j] + pa_xyz[j] * fl1_fx * pb_x[j] * pc_y[j] + pa_xyz[j] * fl1_fx * pc_x[j] * pb_y[j] + 1.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_x[j] + 1.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 1.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_xy[j] + pa_xz[j] * pc_yy[j] * fl1_fx * pb_x[j] + pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] + pa_xz[j] * pc_y[j] * fl1_fx * pb_xy[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 0.5 * pa_xzz[j] * fl1_fx * pc_xz[j] + pa_xz[j] * fl1_fx * pc_zz[j] * pb_x[j] + pa_xz[j] * fl1_fx * pc_xz[j] * pb_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] + 0.5 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_z[j] + 0.5 * pa_xzz[j] * fl1_fx * pc_x[j] * pb_z[j] + pa_xz[j] * fl1_fx * pc_z[j] * pb_xz[j] + pc_xy[j] * pa_yz[j] * fl1_fx * pb_x[j] + pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] + pc_x[j] * pa_yz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] + pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_x[j] + 0.5 * pc_xx[j] * fl1_fx * pa_zz[j] * pb_z[j] + pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 0.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_xz[j] + 0.5 * fl1_fx * pa_yzz[j] * pc_yz[j] + fl1_fx * pa_yz[j] * pc_zz[j] * pb_y[j] + fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yz[j] * pa_zz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yy[j] * pa_zz[j] * pb_z[j] + fl1_fx * pc_yz[j] * pa_z[j] * pb_yz[j] + 0.5 * fl1_fx * pa_yzz[j] * pb_y[j] * pc_z[j] + 0.5 * fl1_fx * pa_yzz[j] * pc_y[j] * pb_z[j] + fl1_fx * pa_yz[j] * pc_z[j] * pb_yz[j] + 0.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_yz[j] + 0.5 * pa_xy[j] * fl1_fx * pc_xy[j] * pb_z[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] + 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] + 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xyz[j] + pa_xyzz[j] * pb_x[j] * pc_yz[j] + pa_xyzz[j] * pc_xz[j] * pb_y[j] + pa_xyzz[j] * pc_xy[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_zz[j] * pb_xy[j] + 2.0 * pa_xyz[j] * pc_yz[j] * pb_xz[j] + 2.0 * pa_xyz[j] * pc_xz[j] * pb_yz[j] + pa_xy[j] * pc_zz[j] * pb_xyz[j] + pa_xzz[j] * pc_yz[j] * pb_xy[j] + pa_xzz[j] * pc_yy[j] * pb_xz[j] + pa_xzz[j] * pc_xy[j] * pb_yz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xyz[j] + pc_xz[j] * pa_yzz[j] * pb_xy[j] + pc_xy[j] * pa_yzz[j] * pb_xz[j] + pc_xx[j] * pa_yzz[j] * pb_yz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xyz[j] + pc_xy[j] * pa_zz[j] * pb_xyz[j]);

                t_xyzz_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.25 * fl3_fx * pa_z[j] - 0.125 * fl3_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.5 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - pc_xx[j] * fl2_fx * pa_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - fl2_fx * pc_yy[j] * pa_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 0.25 * fl2_fx * pc_zzz[j] - fl2_fx * pa_z[j] * pc_zz[j] - 0.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.5 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.5 * pc_xx[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.25 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_yz[j] - pa_xyz[j] * fl1_fx * pc_xy[j] - 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_x[j] - 1.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] - pa_xz[j] * pc_xyy[j] * fl1_fx - pa_xz[j] * pc_yy[j] * fl1_fx * pb_x[j] - pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] - pa_xz[j] * fl1_fx * pc_xzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] - 0.5 * pa_xzz[j] * fl1_fx * pc_xz[j] - pa_xz[j] * fl1_fx * pc_zz[j] * pb_x[j] - pa_xz[j] * fl1_fx * pc_xz[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] - pc_xxy[j] * pa_yz[j] * fl1_fx - pc_xy[j] * pa_yz[j] * fl1_fx * pb_x[j] - pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] - pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxz[j] * fl1_fx * pa_zz[j] - pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xz[j] * fl1_fx * pa_zz[j] * pb_x[j] - 0.5 * pc_xx[j] * fl1_fx * pa_zz[j] * pb_z[j] - pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] - fl1_fx * pa_yz[j] * pc_yzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyz[j] * pa_zz[j] - fl1_fx * pc_yzz[j] * pa_z[j] * pb_y[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_yzz[j] * pc_yz[j] - fl1_fx * pa_yz[j] * pc_zz[j] * pb_y[j] - fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yz[j] * pa_zz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yy[j] * pa_zz[j] * pb_z[j] - fl1_fx * pc_yz[j] * pa_z[j] * pb_yz[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xy[j] * pb_z[j] - 0.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] - 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xyz[j] - pa_xyzz[j] * pc_xyz[j] - 2.0 * pa_xyz[j] * pc_yzz[j] * pb_x[j] - 2.0 * pa_xyz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_xyz[j] * pb_z[j] - pa_xy[j] * pc_zzz[j] * pb_xy[j] - pa_xy[j] * pc_yzz[j] * pb_xz[j] - pa_xy[j] * pc_xzz[j] * pb_yz[j] - pa_xzz[j] * pc_yyz[j] * pb_x[j] - pa_xzz[j] * pc_xyz[j] * pb_y[j] - pa_xzz[j] * pc_xyy[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_yzz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_yz[j] - pa_x[j] * pc_yzz[j] * pb_xyz[j] - pc_xyz[j] * pa_yzz[j] * pb_x[j] - pc_xxz[j] * pa_yzz[j] * pb_y[j] - pc_xxy[j] * pa_yzz[j] * pb_z[j] - 2.0 * pc_xzz[j] * pa_yz[j] * pb_xy[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_xz[j] - 2.0 * pc_xxz[j] * pa_yz[j] * pb_yz[j] - pc_xzz[j] * pa_y[j] * pb_xyz[j] - pc_xyz[j] * pa_zz[j] * pb_xy[j] - pc_xyy[j] * pa_zz[j] * pb_xz[j] - pc_xxy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xyz[j]);

                t_xyzz_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.5 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 0.25 * pc_xx[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx + pa_xz[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] + pa_xz[j] * fl1_fx * pc_xzz[j] + 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] + pc_xxy[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + pc_xxyy[j] * pa_z[j] * fl1_fx + pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] + pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xy[j] + pc_xxzz[j] * fl1_fx * pa_z[j] + 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxz[j] * fl1_fx * pa_zz[j] + pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] + fl1_fx * pc_yyzz[j] * pa_z[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_z[j] + fl1_fx * pa_yz[j] * pc_yzz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyz[j] * pa_zz[j] + fl1_fx * pc_yzz[j] * pa_z[j] * pb_y[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_yz[j] + 0.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_yz[j] + 2.0 * pa_xyz[j] * pc_xyzz[j] + pa_xy[j] * pc_yzzz[j] * pb_x[j] + pa_xy[j] * pc_xzzz[j] * pb_y[j] + pa_xy[j] * pc_xyzz[j] * pb_z[j] + pa_xzz[j] * pc_xyyz[j] + 2.0 * pa_xz[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_z[j] + pa_x[j] * pc_yzzz[j] * pb_xy[j] + pa_x[j] * pc_yyzz[j] * pb_xz[j] + pa_x[j] * pc_xyzz[j] * pb_yz[j] + pc_xxyz[j] * pa_yzz[j] + 2.0 * pc_xyzz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxzz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_yz[j] * pb_z[j] + pc_xzzz[j] * pa_y[j] * pb_xy[j] + pc_xyzz[j] * pa_y[j] * pb_xz[j] + pc_xxzz[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pa_zz[j] * pb_x[j] + pc_xxyz[j] * pa_zz[j] * pb_y[j] + pc_xxyy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_yz[j] + pc_xyzz[j] * pb_xyz[j]);

                t_xyzz_xyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 0.25 * fl2_fx * pc_zzz[j] - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] - 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - pc_xxyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxzzz[j] * fl1_fx - pc_xxzz[j] * fl1_fx * pa_z[j] - 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] - fl1_fx * pc_yyzz[j] * pa_z[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_z[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_xyzzz[j] - 2.0 * pa_xz[j] * pc_xyyzz[j] - pa_x[j] * pc_yyzzz[j] * pb_x[j] - pa_x[j] * pc_xyzzz[j] * pb_y[j] - pa_x[j] * pc_xyyzz[j] * pb_z[j] - 2.0 * pc_xxyzz[j] * pa_yz[j] - pc_xyzzz[j] * pa_y[j] * pb_x[j] - pc_xxzzz[j] * pa_y[j] * pb_y[j] - pc_xxyzz[j] * pa_y[j] * pb_z[j] - pc_xxyyz[j] * pa_zz[j] - 2.0 * pc_xyyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - pc_xyzzz[j] * pb_xy[j] - pc_xyyzz[j] * pb_xz[j] - pc_xxyzz[j] * pb_yz[j]);

                t_xyzz_xyz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + pa_x[j] * pc_xyyzzz[j] + pc_xxyzzz[j] * pa_y[j] + 2.0 * pc_xxyyzz[j] * pa_z[j] + pc_xyyzzz[j] * pb_x[j] + pc_xxyzzz[j] * pb_y[j] + pc_xxyyzz[j] * pb_z[j]);

                t_xyzz_xyz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_85_86(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (85,86)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_xzz = primBuffer.data(150 * idx + 85);

            // Batch of Integrals (85,86)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_x, pb_xz, pb_xzz, pb_z, pb_zz, pc_x, pc_xx, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, \
                                     pc_xxyzzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, \
                                     pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyzz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyzz_xzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_yzz[j] + fl2_fx * pa_yz[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xyzz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yzz[j] * pb_zz[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xzz[j] + pa_xyzz[j] * pb_xzz[j]);

                t_xyzz_xzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.5 * fl2_fx * pa_yzz[j] - 1.5 * fl2_fx * pa_yz[j] * pc_z[j] - 2.0 * fl2_fx * pa_yz[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pa_zz[j] - fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_zz[j] - 0.25 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xyzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xyzz[j] * pc_x[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_z[j] * pb_x[j] * fl1_fx - 2.0 * pa_xyz[j] * fl1_fx * pc_x[j] * pb_z[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pa_xy[j] * pc_z[j] * fl1_fx * pb_xz[j] - 0.5 * pa_xzz[j] * pc_y[j] * pb_x[j] * fl1_fx - 2.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_x[j] * pa_yzz[j] * pb_x[j] * fl1_fx - 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_xz[j] - fl1_fx * pa_yzz[j] * pb_z[j] * pc_z[j] - fl1_fx * pa_yz[j] * pc_z[j] * pb_zz[j] - 0.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yzz[j] * pb_zz[j] - 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xzz[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_xyzz[j] * pb_xz[j] * pc_z[j] - pa_xyzz[j] * pc_x[j] * pb_zz[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_xzz[j] - pa_xzz[j] * pc_y[j] * pb_xzz[j] - pc_x[j] * pa_yzz[j] * pb_xzz[j]);

                t_xyzz_xzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 1.5 * pa_xy[j] * fl2_fx * pc_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pa_yz[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 3.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 0.5 * fl2_fx * pc_y[j] * pa_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pa_z[j] + 2.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 0.25 * fl2_fx * pa_yzz[j] + fl2_fx * pa_yz[j] * pb_z[j] + 0.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.25 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_xyzz[j] * pc_x[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_z[j] * pb_x[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx + 2.0 * pa_xyz[j] * fl1_fx * pc_x[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_z[j] * fl1_fx * pb_xz[j] + 0.5 * pa_xzz[j] * pc_y[j] * pb_x[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_xz[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_x[j] * pa_yzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yzz[j] * fl1_fx + 3.0 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx + 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] + 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_yzz[j] * pc_zz[j] + 2.0 * fl1_fx * pa_yz[j] * pc_zz[j] * pb_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_zz[j] + fl1_fx * pc_yz[j] * pa_zz[j] * pb_z[j] + fl1_fx * pc_yz[j] * pa_z[j] * pb_zz[j] + fl1_fx * pa_yzz[j] * pb_z[j] * pc_z[j] + fl1_fx * pa_yz[j] * pc_z[j] * pb_zz[j] + 0.5 * fl1_fx * pc_y[j] * pa_zz[j] * pb_zz[j] + 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] + 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xzz[j] + pa_xyzz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xyzz[j] * pc_xz[j] * pb_z[j] + 4.0 * pa_xyz[j] * pc_zz[j] * pb_xz[j] + 2.0 * pa_xyz[j] * pc_xz[j] * pb_zz[j] + pa_xy[j] * pc_zz[j] * pb_xzz[j] + 2.0 * pa_xzz[j] * pc_yz[j] * pb_xz[j] + pa_xzz[j] * pc_xy[j] * pb_zz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xzz[j] + 2.0 * pc_xz[j] * pa_yzz[j] * pb_xz[j] + pc_xx[j] * pa_yzz[j] * pb_zz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xzz[j] + pc_xy[j] * pa_zz[j] * pb_xzz[j]);

                t_xyzz_xzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 3.0 * fl2_fx * pa_y[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pa_z[j] - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pa_yz[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pa_zz[j] - fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_xyz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * pa_yzz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_yz[j] * fl1_fx - 2.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - fl1_fx * pa_yz[j] * pc_zzz[j] - fl1_fx * pa_y[j] * pc_zzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pa_zz[j] - 2.0 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yzz[j] * pc_zz[j] - 2.0 * fl1_fx * pa_yz[j] * pc_zz[j] * pb_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_zz[j] - fl1_fx * pc_yz[j] * pa_zz[j] * pb_z[j] - fl1_fx * pc_yz[j] * pa_z[j] * pb_zz[j] - 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xzz[j] - pa_xyzz[j] * pc_xzz[j] - 2.0 * pa_xyz[j] * pc_zzz[j] * pb_x[j] - 4.0 * pa_xyz[j] * pc_xzz[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_zzz[j] * pb_xz[j] - pa_xy[j] * pc_xzz[j] * pb_zz[j] - pa_xzz[j] * pc_yzz[j] * pb_x[j] - 2.0 * pa_xzz[j] * pc_xyz[j] * pb_z[j] - 4.0 * pa_xz[j] * pc_yzz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_zz[j] - pa_x[j] * pc_yzz[j] * pb_xzz[j] - pc_xzz[j] * pa_yzz[j] * pb_x[j] - 2.0 * pc_xxz[j] * pa_yzz[j] * pb_z[j] - 4.0 * pc_xzz[j] * pa_yz[j] * pb_xz[j] - 2.0 * pc_xxz[j] * pa_yz[j] * pb_zz[j] - pc_xzz[j] * pa_y[j] * pb_xzz[j] - 2.0 * pc_xyz[j] * pa_zz[j] * pb_xz[j] - pc_xxy[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xzz[j]);

                t_xyzz_xzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pa_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] + fl1_fx * pc_yzzz[j] * pa_z[j] + fl1_fx * pc_yzzz[j] * pb_z[j] + fl1_fx * pa_yz[j] * pc_zzz[j] + fl1_fx * pa_y[j] * pc_zzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pa_zz[j] + 2.0 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_zz[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xyz[j] * pc_xzzz[j] + pa_xy[j] * pc_zzzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xzzz[j] * pb_z[j] + pa_xzz[j] * pc_xyzz[j] + 2.0 * pa_xz[j] * pc_yzzz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yzzz[j] * pb_xz[j] + pa_x[j] * pc_xyzz[j] * pb_zz[j] + pc_xxzz[j] * pa_yzz[j] + 2.0 * pc_xzzz[j] * pa_yz[j] * pb_x[j] + 4.0 * pc_xxzz[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xzzz[j] * pa_y[j] * pb_xz[j] + pc_xxzz[j] * pa_y[j] * pb_zz[j] + pc_xyzz[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_xyzz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_zz[j] + pc_xyzz[j] * pb_xzz[j]);

                t_xyzz_xzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yzzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] - fl1_fx * pc_yzzz[j] * pa_z[j] - fl1_fx * pc_yzzz[j] * pb_z[j] - pa_xy[j] * pc_xzzzz[j] - 2.0 * pa_xz[j] * pc_xyzzz[j] - pa_x[j] * pc_yzzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_z[j] - 2.0 * pc_xxzzz[j] * pa_yz[j] - pc_xzzzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxzzz[j] * pa_y[j] * pb_z[j] - pc_xxyzz[j] * pa_zz[j] - 2.0 * pc_xyzzz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xyzzz[j] * pb_xz[j] - pc_xxyzz[j] * pb_zz[j]);

                t_xyzz_xzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + pa_x[j] * pc_xyzzzz[j] + pc_xxzzzz[j] * pa_y[j] + 2.0 * pc_xxyzzz[j] * pa_z[j] + pc_xyzzzz[j] * pb_x[j] + 2.0 * pc_xxyzzz[j] * pb_z[j]);

                t_xyzz_xzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_86_87(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (86,87)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_yyy = primBuffer.data(150 * idx + 86);

            // Batch of Integrals (86,87)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_y, pb_yy, pb_yyy, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyyzz, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xyzz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyzz_yyy[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xzz[j] * fl2_fx + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xyzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xzz[j] * fl1_fx * pb_yy[j] + 0.5 * pa_xy[j] * fl1_fx * pb_yyy[j] + pa_xyzz[j] * pb_yyy[j]);

                t_xyzz_yyy[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xzz[j] * fl2_fx - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - 1.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_xyzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xyzz[j] * pc_y[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_z[j] * pb_y[j] * fl1_fx - 4.5 * pa_xzz[j] * pc_y[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_xzz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_x[j] * pa_yzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_yy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] - 0.5 * pa_xy[j] * fl1_fx * pb_yyy[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_xyzz[j] * pb_yy[j] * pc_y[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_yyy[j] - pa_xzz[j] * pc_y[j] * pb_yyy[j] - pc_x[j] * pa_yzz[j] * pb_yyy[j]);

                t_xyzz_yyy[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 3.0 * pa_xz[j] * fl2_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pa_xzz[j] * fl2_fx + 1.5 * pc_x[j] * fl2_fx * pa_zz[j] + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pa_xy[j] * fl2_fx * pc_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xyzz[j] * pc_y[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_z[j] * pb_y[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_y[j] * pb_y[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_yy[j] * fl1_fx + 9.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 3.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yy[j] + 1.5 * pc_x[j] * pa_yzz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yzz[j] * fl1_fx + 3.0 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx + 4.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] + 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_xy[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_xyzz[j] * pb_y[j] * pc_yy[j] + 6.0 * pa_xyz[j] * pc_yz[j] * pb_yy[j] + pa_xy[j] * pc_zz[j] * pb_yyy[j] + 3.0 * pa_xzz[j] * pc_yy[j] * pb_yy[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_yyy[j] + 3.0 * pc_xy[j] * pa_yzz[j] * pb_yy[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_yyy[j] + pc_xy[j] * pa_zz[j] * pb_yyy[j]);

                t_xyzz_yyy[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 3.0 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pa_zz[j] - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_yy[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_y[j] - 1.5 * pc_xyy[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xzz[j] * pc_yy[j] * fl1_fx - 9.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 6.0 * pa_xz[j] * pc_yyz[j] * fl1_fx - 4.5 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 1.5 * pc_xy[j] * pa_yzz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx - 4.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * pa_xy[j] * fl1_fx * pc_yyy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] - 1.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_yyy[j] - pa_xyzz[j] * pc_yyy[j] - 6.0 * pa_xyz[j] * pc_yyz[j] * pb_y[j] - 3.0 * pa_xy[j] * pc_yzz[j] * pb_yy[j] - 3.0 * pa_xzz[j] * pc_yyy[j] * pb_y[j] - 6.0 * pa_xz[j] * pc_yyz[j] * pb_yy[j] - pa_x[j] * pc_yzz[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_yzz[j] * pb_y[j] - 6.0 * pc_xyz[j] * pa_yz[j] * pb_yy[j] - pc_xzz[j] * pa_y[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_yyy[j]);

                t_xyzz_yyy[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_xy[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_yyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyzz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + 0.5 * pa_xy[j] * fl1_fx * pc_yyy[j] + 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyyy[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xyz[j] * pc_yyyz[j] + 3.0 * pa_xy[j] * pc_yyzz[j] * pb_y[j] + pa_xzz[j] * pc_yyyy[j] + 6.0 * pa_xz[j] * pc_yyyz[j] * pb_y[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_yy[j] + pc_xyyy[j] * pa_yzz[j] + 6.0 * pc_xyyz[j] * pa_yz[j] * pb_y[j] + 3.0 * pc_xyzz[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xyyy[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_xyyz[j] * pa_z[j] * pb_yy[j] + pc_xyzz[j] * pb_yyy[j]);

                t_xyzz_yyy[j] += fl_s_0_0_5 * (-0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx - 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 0.5 * pc_xyyy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xyyyy[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - pa_xy[j] * pc_yyyzz[j] - 2.0 * pa_xz[j] * pc_yyyyz[j] - 3.0 * pa_x[j] * pc_yyyzz[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_yz[j] - 3.0 * pc_xyyzz[j] * pa_y[j] * pb_y[j] - pc_xyyyy[j] * pa_zz[j] - 6.0 * pc_xyyyz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyzz[j] * pb_yy[j]);

                t_xyzz_yyy[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xyyyy[j] * fl1_fx + pa_x[j] * pc_yyyyzz[j] + pc_xyyyzz[j] * pa_y[j] + 2.0 * pc_xyyyyz[j] * pa_z[j] + 3.0 * pc_xyyyzz[j] * pb_y[j]);

                t_xyzz_yyy[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_87_88(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (87,88)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_yyz = primBuffer.data(150 * idx + 87);

            // Batch of Integrals (87,88)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_y, pb_yy, pb_yyz, pb_yz, pb_z, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, \
                                     pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyzz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyzz_yyz[j] = fl_s_0_0_0 * (0.5 * pa_xyz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_y[j] + 0.25 * pa_xy[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xyzz[j] * fl1_fx * pb_z[j] + pa_xyz[j] * fl1_fx * pb_yy[j] + pa_xzz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xy[j] * fl1_fx * pb_yyz[j] + pa_xyzz[j] * pb_yyz[j]);

                t_xyzz_yyz[j] += fl_s_0_0_1 * (-pa_xyz[j] * fl2_fx - 0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_y[j] * fl2_fx - 2.0 * pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.5 * pc_x[j] * pa_yz[j] * fl2_fx - pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.5 * pa_xy[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - pa_x[j] * fl2_fx * pb_yz[j] - 0.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 0.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xyzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyzz[j] * fl1_fx * pb_z[j] - pa_xyz[j] * pc_z[j] * fl1_fx * pb_z[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_y[j] - pa_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_y[j] * fl1_fx * pb_yy[j] - pa_xzz[j] * fl1_fx * pb_y[j] * pc_z[j] - 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yz[j] - pa_xzz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_x[j] * pa_yzz[j] * fl1_fx * pb_z[j] - pc_x[j] * pa_yz[j] * fl1_fx * pb_yy[j] - pc_x[j] * fl1_fx * pa_zz[j] * pb_yz[j] - pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_xy[j] * fl1_fx * pb_yyz[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] - pa_xyzz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xyzz[j] * pb_yz[j] * pc_y[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_yyz[j] - pa_xzz[j] * pc_y[j] * pb_yyz[j] - pc_x[j] * pa_yzz[j] * pb_yyz[j]);

                t_xyzz_yyz[j] += fl_s_0_0_2 * (0.5 * pa_xyz[j] * fl2_fx + 1.5 * pa_xy[j] * pc_z[j] * fl2_fx + 3.0 * pa_xz[j] * pc_y[j] * fl2_fx + 2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + pa_xz[j] * fl2_fx * pb_y[j] + pc_x[j] * pa_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 2.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 0.25 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xyzz[j] * fl1_fx * pc_z[j] + pa_xyz[j] * pc_zz[j] * fl1_fx + pa_xyz[j] * pc_z[j] * fl1_fx * pb_z[j] + pa_xyz[j] * fl1_fx * pc_yy[j] + 2.0 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_y[j] + 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 1.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 2.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_y[j] + pa_xz[j] * pc_y[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] + pa_xzz[j] * fl1_fx * pb_y[j] * pc_z[j] + 2.0 * pa_xz[j] * fl1_fx * pc_z[j] * pb_yz[j] + 0.5 * pc_xz[j] * pa_yzz[j] * fl1_fx + 0.5 * pc_x[j] * pa_yzz[j] * fl1_fx * pb_z[j] + pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] + 2.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_y[j] + pc_x[j] * pa_yz[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] + pc_xz[j] * fl1_fx * pa_zz[j] * pb_y[j] + 2.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] + pc_x[j] * fl1_fx * pa_zz[j] * pb_yz[j] + 0.5 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] + pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] + pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] + pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_xyzz[j] * pb_y[j] * pc_yz[j] + pa_xyzz[j] * pc_yy[j] * pb_z[j] + 2.0 * pa_xyz[j] * pc_zz[j] * pb_yy[j] + 4.0 * pa_xyz[j] * pc_yz[j] * pb_yz[j] + pa_xy[j] * pc_zz[j] * pb_yyz[j] + pa_xzz[j] * pc_yz[j] * pb_yy[j] + 2.0 * pa_xzz[j] * pc_yy[j] * pb_yz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_yyz[j] + pc_xz[j] * pa_yzz[j] * pb_yy[j] + 2.0 * pc_xy[j] * pa_yzz[j] * pb_yz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_yyz[j] + pc_xy[j] * pa_zz[j] * pb_yyz[j]);

                t_xyzz_yyz[j] += fl_s_0_0_3 * (-0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_y[j] * fl2_fx - 4.5 * pa_x[j] * pc_yz[j] * fl2_fx - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.5 * pc_x[j] * pa_yz[j] * fl2_fx - 1.5 * pc_xz[j] * pa_y[j] * fl2_fx - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_y[j] - pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.5 * pc_x[j] * fl2_fx * pb_yz[j] - pa_xyz[j] * pc_zz[j] * fl1_fx - pa_xyz[j] * fl1_fx * pc_yy[j] - 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xy[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_yyy[j] * fl1_fx - 2.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] - pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] - 2.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] - 0.5 * pc_xz[j] * pa_yzz[j] * fl1_fx - pc_xzz[j] * pa_yz[j] * fl1_fx - pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] - pc_xyy[j] * pa_yz[j] * fl1_fx - 2.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 2.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] - pc_xzz[j] * fl1_fx * pb_yz[j] - pc_xz[j] * fl1_fx * pa_zz[j] * pb_y[j] - 2.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] - 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] - pc_xyy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - pa_xyzz[j] * pc_yyz[j] - 4.0 * pa_xyz[j] * pc_yzz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_yyz[j] * pb_z[j] - pa_xy[j] * pc_zzz[j] * pb_yy[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_yz[j] - 2.0 * pa_xzz[j] * pc_yyz[j] * pb_y[j] - pa_xzz[j] * pc_yyy[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_yzz[j] * pb_yy[j] - 4.0 * pa_xz[j] * pc_yyz[j] * pb_yz[j] - pa_x[j] * pc_yzz[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_yzz[j] * pb_y[j] - pc_xyy[j] * pa_yzz[j] * pb_z[j] - 2.0 * pc_xzz[j] * pa_yz[j] * pb_yy[j] - 4.0 * pc_xyz[j] * pa_yz[j] * pb_yz[j] - pc_xzz[j] * pa_y[j] * pb_yyz[j] - pc_xyz[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xyy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_yyz[j]);

                t_xyzz_yyz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yzz[j] * fl1_fx + pa_xz[j] * pc_yyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] + pc_xzz[j] * pa_yz[j] * fl1_fx + pc_xyy[j] * pa_yz[j] * fl1_fx + 0.5 * pc_xzzz[j] * pa_y[j] * fl1_fx + 0.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xyyy[j] * pa_z[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pc_xzzz[j] * fl1_fx * pb_y[j] + 2.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] + pc_xzz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + pc_xyy[j] * fl1_fx * pb_yz[j] + 2.0 * pa_xyz[j] * pc_yyzz[j] + 2.0 * pa_xy[j] * pc_yzzz[j] * pb_y[j] + pa_xy[j] * pc_yyzz[j] * pb_z[j] + pa_xzz[j] * pc_yyyz[j] + 4.0 * pa_xz[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_yyyz[j] * pb_z[j] + pa_x[j] * pc_yzzz[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_yyzz[j] * pb_yz[j] + pc_xyyz[j] * pa_yzz[j] + 4.0 * pc_xyzz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_yz[j] * pb_z[j] + pc_xzzz[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_yz[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_y[j] + pc_xyyy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_yz[j] + pc_xyzz[j] * pb_yyz[j]);

                t_xyzz_yyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 0.5 * pc_xzzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - pc_xzzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_yyzzz[j] - 2.0 * pa_xz[j] * pc_yyyzz[j] - 2.0 * pa_x[j] * pc_yyzzz[j] * pb_y[j] - pa_x[j] * pc_yyyzz[j] * pb_z[j] - 2.0 * pc_xyyzz[j] * pa_yz[j] - 2.0 * pc_xyzzz[j] * pa_y[j] * pb_y[j] - pc_xyyzz[j] * pa_y[j] * pb_z[j] - pc_xyyyz[j] * pa_zz[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - pc_xyzzz[j] * pb_yy[j] - 2.0 * pc_xyyzz[j] * pb_yz[j]);

                t_xyzz_yyz[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_yyyzzz[j] + pc_xyyzzz[j] * pa_y[j] + 2.0 * pc_xyyyzz[j] * pa_z[j] + 2.0 * pc_xyyzzz[j] * pb_y[j] + pc_xyyyzz[j] * pb_z[j]);

                t_xyzz_yyz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_88_89(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (88,89)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_yzz = primBuffer.data(150 * idx + 88);

            // Batch of Integrals (88,89)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_y, pb_yz, pb_yzz, pb_z, pb_zz, pc_x, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, \
                                     pc_xyyzzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, \
                                     pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyzz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyzz_yzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.25 * pa_xzz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xyzz[j] * pb_y[j] * fl1_fx + 2.0 * pa_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xzz[j] * fl1_fx * pb_zz[j] + 0.5 * pa_xy[j] * fl1_fx * pb_yzz[j] + pa_xyzz[j] * pb_yzz[j]);

                t_xyzz_yzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 1.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.5 * pa_xzz[j] * fl2_fx - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 2.0 * pa_xz[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.25 * pc_x[j] * fl2_fx * pa_zz[j] - pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.25 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xyzz[j] * pb_y[j] * fl1_fx - 0.5 * pa_xyzz[j] * pc_y[j] * fl1_fx - 3.0 * pa_xyz[j] * pc_z[j] * pb_y[j] * fl1_fx - 2.0 * pa_xyz[j] * fl1_fx * pc_y[j] * pb_z[j] - 2.0 * pa_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xzz[j] * pc_y[j] * pb_y[j] * fl1_fx - 2.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yz[j] - pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] - pa_xz[j] * fl1_fx * pc_z[j] * pb_zz[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_x[j] * pa_yzz[j] * pb_y[j] * fl1_fx - 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_zz[j] - 0.5 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xy[j] * fl1_fx * pb_yzz[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_xyzz[j] * pb_yz[j] * pc_z[j] - pa_xyzz[j] * pc_y[j] * pb_zz[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_yzz[j] - pa_xzz[j] * pc_y[j] * pb_yzz[j] - pc_x[j] * pa_yzz[j] * pb_yzz[j]);

                t_xyzz_yzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 1.5 * pa_xy[j] * fl2_fx * pc_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 3.0 * pa_xz[j] * fl2_fx * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.25 * pa_xzz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.5 * pc_x[j] * fl2_fx * pa_zz[j] + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 2.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xyzz[j] * pc_y[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_z[j] * pb_y[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx + 2.0 * pa_xyz[j] * fl1_fx * pc_y[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xzz[j] * pc_y[j] * pb_y[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_yy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 2.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yz[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xzz[j] * fl1_fx * pc_zz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] + pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] + pa_xz[j] * fl1_fx * pc_z[j] * pb_zz[j] + 0.5 * pc_x[j] * pa_yzz[j] * pb_y[j] * fl1_fx + 0.5 * pc_xy[j] * pa_yzz[j] * fl1_fx + 3.0 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx + 2.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] + 2.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] + pc_xz[j] * fl1_fx * pa_zz[j] * pb_z[j] + pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 0.5 * pc_x[j] * fl1_fx * pa_zz[j] * pb_zz[j] + 0.5 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_yzz[j] + pa_xyzz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xyzz[j] * pc_yz[j] * pb_z[j] + 4.0 * pa_xyz[j] * pc_zz[j] * pb_yz[j] + 2.0 * pa_xyz[j] * pc_yz[j] * pb_zz[j] + pa_xy[j] * pc_zz[j] * pb_yzz[j] + 2.0 * pa_xzz[j] * pc_yz[j] * pb_yz[j] + pa_xzz[j] * pc_yy[j] * pb_zz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_yzz[j] + 2.0 * pc_xz[j] * pa_yzz[j] * pb_yz[j] + pc_xy[j] * pa_yzz[j] * pb_zz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_yzz[j] + pc_xy[j] * pa_zz[j] * pb_yzz[j]);

                t_xyzz_yzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 3.0 * pc_xz[j] * fl2_fx * pa_z[j] - 1.5 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pa_zz[j] - pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xyz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xzz[j] * pc_yy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] - pa_xz[j] * fl1_fx * pc_zzz[j] - pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] - 0.5 * pa_xzz[j] * fl1_fx * pc_zz[j] - 2.0 * pa_xz[j] * fl1_fx * pc_zz[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 0.5 * pc_xy[j] * pa_yzz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx - 2.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xzz[j] * fl1_fx * pa_zz[j] - 2.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - pc_xz[j] * fl1_fx * pa_zz[j] * pb_z[j] - pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_yzz[j] - pa_xyzz[j] * pc_yzz[j] - 2.0 * pa_xyz[j] * pc_zzz[j] * pb_y[j] - 4.0 * pa_xyz[j] * pc_yzz[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_zzz[j] * pb_yz[j] - pa_xy[j] * pc_yzz[j] * pb_zz[j] - pa_xzz[j] * pc_yzz[j] * pb_y[j] - 2.0 * pa_xzz[j] * pc_yyz[j] * pb_z[j] - 4.0 * pa_xz[j] * pc_yzz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_zz[j] - pa_x[j] * pc_yzz[j] * pb_yzz[j] - pc_xzz[j] * pa_yzz[j] * pb_y[j] - 2.0 * pc_xyz[j] * pa_yzz[j] * pb_z[j] - 4.0 * pc_xzz[j] * pa_yz[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_zz[j] - pc_xzz[j] * pa_y[j] * pb_yzz[j] - 2.0 * pc_xyz[j] * pa_zz[j] * pb_yz[j] - pc_xyy[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_yzz[j]);

                t_xyzz_yzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] + pa_xz[j] * fl1_fx * pc_zzz[j] + pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 3.0 * pc_xyz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyzz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + pc_xzzz[j] * fl1_fx * pa_z[j] + pc_xzzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pa_zz[j] + 2.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xyz[j] * pc_yzzz[j] + pa_xy[j] * pc_zzzz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_yzzz[j] * pb_z[j] + pa_xzz[j] * pc_yyzz[j] + 2.0 * pa_xz[j] * pc_yzzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_yyzz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yzzz[j] * pb_yz[j] + pa_x[j] * pc_yyzz[j] * pb_zz[j] + pc_xyzz[j] * pa_yzz[j] + 2.0 * pc_xzzz[j] * pa_yz[j] * pb_y[j] + 4.0 * pc_xyzz[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xzzz[j] * pa_y[j] * pb_yz[j] + pc_xyzz[j] * pa_y[j] * pb_zz[j] + pc_xyzz[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_xyzz[j] * pa_z[j] * pb_yz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_zz[j] + pc_xyzz[j] * pb_yzz[j]);

                t_xyzz_yzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xzz[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] - 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xzzzz[j] * fl1_fx - pc_xzzz[j] * fl1_fx * pa_z[j] - pc_xzzz[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_yzzzz[j] - 2.0 * pa_xz[j] * pc_yyzzz[j] - pa_x[j] * pc_yzzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_yyzzz[j] * pb_z[j] - 2.0 * pc_xyzzz[j] * pa_yz[j] - pc_xzzzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xyzzz[j] * pa_y[j] * pb_z[j] - pc_xyyzz[j] * pa_zz[j] - 2.0 * pc_xyzzz[j] * pa_z[j] * pb_y[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xyzzz[j] * pb_yz[j] - pc_xyyzz[j] * pb_zz[j]);

                t_xyzz_yzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_yyzzzz[j] + pc_xyzzzz[j] * pa_y[j] + 2.0 * pc_xyyzzz[j] * pa_z[j] + pc_xyzzzz[j] * pb_y[j] + 2.0 * pc_xyyzzz[j] * pb_z[j]);

                t_xyzz_yzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_89_90(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (89,90)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(34 * idx + 4);

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(34 * idx + 13);

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xyzz = paDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyzz_zzz = primBuffer.data(150 * idx + 89);

            // Batch of Integrals (89,90)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xyzz, pa_xz, pa_xzz, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, \
                                     pb_z, pb_zz, pb_zzz, pc_x, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, \
                                     pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, \
                                     pc_yzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyzz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xyzz_zzz[j] = fl_s_0_0_0 * (1.5 * pa_xyz[j] * fl2_fx + 2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xyzz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * pa_xy[j] * fl1_fx * pb_zzz[j] + pa_xyzz[j] * pb_zzz[j]);

                t_xyzz_zzz[j] += fl_s_0_0_1 * (-3.0 * pa_xyz[j] * fl2_fx - 3.75 * pa_xy[j] * pc_z[j] * fl2_fx - 4.5 * pa_xy[j] * fl2_fx * pb_z[j] - 1.5 * pa_xz[j] * pc_y[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pa_xyzz[j] * pb_z[j] * fl1_fx - 1.5 * pa_xyzz[j] * pc_z[j] * fl1_fx - 9.0 * pa_xyz[j] * pc_z[j] * pb_z[j] * fl1_fx - 3.0 * pa_xyz[j] * fl1_fx * pb_zz[j] - 4.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xzz[j] * pc_y[j] * pb_z[j] * fl1_fx - 3.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_x[j] * pa_yzz[j] * pb_z[j] * fl1_fx - 3.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] - 0.5 * pa_xy[j] * fl1_fx * pb_zzz[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_xyzz[j] * pb_zz[j] * pc_z[j] - 2.0 * pa_xyz[j] * pc_z[j] * pb_zzz[j] - pa_xzz[j] * pc_y[j] * pb_zzz[j] - pc_x[j] * pa_yzz[j] * pb_zzz[j]);

                t_xyzz_zzz[j] += fl_s_0_0_2 * (1.5 * pa_xyz[j] * fl2_fx + 7.5 * pa_xy[j] * pc_z[j] * fl2_fx + 2.25 * pa_xy[j] * fl2_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_y[j] * fl2_fx + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 4.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 3.0 * pc_x[j] * pa_yz[j] * fl2_fx + 3.75 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xyzz[j] * pc_z[j] * fl1_fx + 9.0 * pa_xyz[j] * pc_z[j] * pb_z[j] * fl1_fx + 6.0 * pa_xyz[j] * pc_zz[j] * fl1_fx + 9.0 * pa_xy[j] * pc_zz[j] * pb_z[j] * fl1_fx + 4.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xzz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 9.0 * pa_xz[j] * pc_yz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_yzz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yzz[j] * fl1_fx + 9.0 * pc_xz[j] * pa_yz[j] * pb_z[j] * fl1_fx + 3.0 * pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] + 4.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xy[j] * pa_zz[j] * pb_z[j] * fl1_fx + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 3.0 * pa_xyzz[j] * pb_z[j] * pc_zz[j] + 6.0 * pa_xyz[j] * pc_zz[j] * pb_zz[j] + pa_xy[j] * pc_zz[j] * pb_zzz[j] + 3.0 * pa_xzz[j] * pc_yz[j] * pb_zz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_zzz[j] + 3.0 * pc_xz[j] * pa_yzz[j] * pb_zz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_zzz[j] + pc_xy[j] * pa_zz[j] * pb_zzz[j]);

                t_xyzz_zzz[j] += fl_s_0_0_3 * (-3.75 * pa_xy[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_y[j] * fl2_fx - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * pa_yz[j] * fl2_fx - 7.5 * pc_xz[j] * pa_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 3.75 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 6.0 * pa_xyz[j] * pc_zz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_zz[j] * pb_z[j] * fl1_fx - 5.0 * pa_xy[j] * pc_zzz[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_yz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xz[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_x[j] * pc_yzz[j] * pb_z[j] * fl1_fx - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * pa_yzz[j] * fl1_fx - 9.0 * pc_xz[j] * pa_yz[j] * pb_z[j] * fl1_fx - 6.0 * pc_xzz[j] * pa_yz[j] * fl1_fx - 9.0 * pc_xzz[j] * pa_y[j] * pb_z[j] * fl1_fx - 4.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * pa_zz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - pa_xyzz[j] * pc_zzz[j] - 6.0 * pa_xyz[j] * pc_zzz[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_zzz[j] * pb_zz[j] - 3.0 * pa_xzz[j] * pc_yzz[j] * pb_z[j] - 6.0 * pa_xz[j] * pc_yzz[j] * pb_zz[j] - pa_x[j] * pc_yzz[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_yzz[j] * pb_z[j] - 6.0 * pc_xzz[j] * pa_yz[j] * pb_zz[j] - pc_xzz[j] * pa_y[j] * pb_zzz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_zzz[j]);

                t_xyzz_zzz[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 3.75 * pc_xz[j] * pa_y[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 5.0 * pa_xy[j] * pc_zzz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_yzz[j] * fl1_fx + 9.0 * pa_x[j] * pc_yzz[j] * pb_z[j] * fl1_fx + 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx + 6.0 * pc_xzz[j] * pa_yz[j] * fl1_fx + 9.0 * pc_xzz[j] * pa_y[j] * pb_z[j] * fl1_fx + 5.0 * pc_xzzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx + 6.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyzz[j] * pb_z[j] * fl1_fx + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xyz[j] * pc_zzzz[j] + 3.0 * pa_xy[j] * pc_zzzz[j] * pb_z[j] + pa_xzz[j] * pc_yzzz[j] + 6.0 * pa_xz[j] * pc_yzzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yzzz[j] * pb_zz[j] + pc_xzzz[j] * pa_yzz[j] + 6.0 * pc_xzzz[j] * pa_yz[j] * pb_z[j] + 3.0 * pc_xzzz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_zz[j] + pc_xyzz[j] * pb_zzz[j]);

                t_xyzz_zzz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx - 5.0 * pc_xzzz[j] * pa_y[j] * fl1_fx - 6.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - 9.0 * pc_xyzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - pa_xy[j] * pc_zzzzz[j] - 2.0 * pa_xz[j] * pc_yzzzz[j] - 3.0 * pa_x[j] * pc_yzzzz[j] * pb_z[j] - 2.0 * pc_xzzzz[j] * pa_yz[j] - 3.0 * pc_xzzzz[j] * pa_y[j] * pb_z[j] - pc_xyzzz[j] * pa_zz[j] - 6.0 * pc_xyzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pb_zz[j]);

                t_xyzz_zzz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yzzzzz[j] + pc_xzzzzz[j] * pa_y[j] + 2.0 * pc_xyzzzz[j] * pa_z[j] + 3.0 * pc_xyzzzz[j] * pb_z[j]);

                t_xyzz_zzz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_90_91(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (90,91)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_xxx = primBuffer.data(150 * idx + 90);

            // Batch of Integrals (90,91)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxx, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxx, pc_xxxxz, pc_xxxxzz, pc_xxxxzzz, pc_xxxz, pc_xxxzz, \
                                     pc_xxxzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xz, pc_xzz, pc_xzzz, pc_z, pc_zz, pc_zzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xzzz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzzz_xxx[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pa_z[j] + 0.75 * fl2_fx * pa_zzz[j] + 2.25 * pa_xz[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xzzz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pa_zzz[j] * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xxx[j] + pa_xzzz[j] * pb_xxx[j]);

                t_xzzz_xxx[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 1.5 * fl2_fx * pa_zzz[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * pa_xz[j] * fl2_fx * pb_x[j] - 2.25 * pa_xz[j] * fl2_fx * pc_x[j] - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 6.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 4.5 * fl2_fx * pa_z[j] * pb_xx[j] - 2.25 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * pa_xzzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xzzz[j] * pc_x[j] * fl1_fx - 4.5 * pa_xzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 4.5 * pc_x[j] * pa_zzz[j] * pb_x[j] * fl1_fx - 4.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xx[j] - 1.5 * fl1_fx * pa_zzz[j] * pb_xx[j] - 4.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xzzz[j] * pb_xx[j] * pc_x[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_xxx[j] - pc_x[j] * pa_zzz[j] * pb_xxx[j]);

                t_xzzz_xxx[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pa_z[j] + 3.375 * fl3_fx * pc_z[j] + 4.5 * fl2_fx * pa_zz[j] * pc_z[j] + 2.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pa_zzz[j] + 4.5 * pa_xz[j] * fl2_fx * pc_x[j] + 2.25 * pa_xz[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 13.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] + 4.5 * pc_xx[j] * pa_z[j] * fl2_fx + 6.75 * pc_xz[j] * fl2_fx * pb_x[j] + 4.5 * fl2_fx * pc_z[j] * pb_xx[j] + 2.25 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xzzz[j] * pc_x[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_xz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_zzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xx[j] * pa_zzz[j] * fl1_fx + 13.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 4.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] + 4.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xx[j] + 4.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xx[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_xzzz[j] * pb_x[j] * pc_xx[j] + 9.0 * pa_xzz[j] * pc_xz[j] * pb_xx[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_zzz[j] * pb_xx[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_xxx[j]);

                t_xzzz_xxx[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pa_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_zz[j] - 0.75 * fl2_fx * pc_zzz[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 2.25 * pa_xz[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_xz[j] * fl2_fx - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 9.0 * pc_xx[j] * pa_z[j] * fl2_fx - 6.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 13.5 * pc_xz[j] * fl2_fx * pb_x[j] - 4.5 * pc_xxz[j] * fl2_fx - 2.25 * fl2_fx * pc_z[j] * pb_xx[j] - 4.5 * pa_xzz[j] * pc_xz[j] * fl1_fx - 4.5 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 4.5 * pa_xz[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xx[j] * pa_zzz[j] * fl1_fx - 13.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxz[j] * pa_zz[j] * fl1_fx - 13.5 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - 4.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] - 1.5 * pa_xz[j] * fl1_fx * pc_xxx[j] - 4.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 4.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_x[j] - 4.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] - pa_xzzz[j] * pc_xxx[j] - 9.0 * pa_xzz[j] * pc_xxz[j] * pb_x[j] - 9.0 * pa_xz[j] * pc_xzz[j] * pb_xx[j] - pa_x[j] * pc_zzz[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_zzz[j] * pb_x[j] - 9.0 * pc_xxz[j] * pa_zz[j] * pb_xx[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_xxx[j]);

                t_xzzz_xxx[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pc_zzz[j] + 2.25 * fl2_fx * pa_z[j] * pc_zz[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 4.5 * pc_xx[j] * pa_z[j] * fl2_fx + 9.0 * pc_xxz[j] * fl2_fx + 6.75 * pc_xz[j] * fl2_fx * pb_x[j] + 4.5 * pa_xz[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xzzz[j] * fl1_fx + 9.0 * pc_xxz[j] * pa_zz[j] * fl1_fx + 13.5 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xzzz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxx[j] * pa_z[j] * fl1_fx + 4.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxxz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_xzz[j] * pc_xxxz[j] + 9.0 * pa_xz[j] * pc_xxzz[j] * pb_x[j] + 3.0 * pa_x[j] * pc_xzzz[j] * pb_xx[j] + pc_xxxx[j] * pa_zzz[j] + 9.0 * pc_xxxz[j] * pa_zz[j] * pb_x[j] + 9.0 * pc_xxzz[j] * pa_z[j] * pb_xx[j] + pc_xzzz[j] * pb_xxx[j]);

                t_xzzz_xxx[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_zzz[j] - 4.5 * pc_xxz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xzzz[j] * fl1_fx - 9.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xzzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx - 1.5 * pc_xxxx[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxxxz[j] * fl1_fx - 4.5 * pc_xxxz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xz[j] * pc_xxxzz[j] - 3.0 * pa_x[j] * pc_xxzzz[j] * pb_x[j] - 3.0 * pc_xxxxz[j] * pa_zz[j] - 9.0 * pc_xxxzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxzzz[j] * pb_xx[j]);

                t_xzzz_xxx[j] += fl_s_0_0_6 * (3.0 * pc_xxzzz[j] * fl1_fx + 1.5 * pc_xxxxz[j] * fl1_fx + pa_x[j] * pc_xxxzzz[j] + 3.0 * pc_xxxxzz[j] * pa_z[j] + 3.0 * pc_xxxzzz[j] * pb_x[j]);

                t_xzzz_xxx[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_91_92(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (91,92)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_xxy = primBuffer.data(150 * idx + 91);

            // Batch of Integrals (91,92)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxy, pb_xy, \
                                     pb_y, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, \
                                     pc_xxxzz, pc_xxxzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, \
                                     pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xzzz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xzzz_xxy[j] = fl_s_0_0_0 * (0.75 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xzzz[j] * fl1_fx * pb_y[j] + fl1_fx * pa_zzz[j] * pb_xy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xxy[j] + pa_xzzz[j] * pb_xxy[j]);

                t_xzzz_xxy[j] += fl_s_0_0_1 * (-0.75 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_xz[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 3.0 * fl2_fx * pa_z[j] * pb_xy[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_xzzz[j] * fl1_fx * pc_y[j] - 0.5 * pa_xzzz[j] * fl1_fx * pb_y[j] - 1.5 * pa_xzz[j] * pc_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_x[j] * pa_zzz[j] * fl1_fx * pb_y[j] - fl1_fx * pa_zzz[j] * pb_x[j] * pc_y[j] - 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xy[j] - fl1_fx * pa_zzz[j] * pb_xy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxy[j] - pa_xzzz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_xzzz[j] * pb_xy[j] * pc_x[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_xxy[j] - pc_x[j] * pa_zzz[j] * pb_xxy[j]);

                t_xzzz_xxy[j] += fl_s_0_0_2 * (1.5 * pa_xz[j] * fl2_fx * pc_y[j] + 0.75 * pa_xz[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pc_z[j] * pb_xy[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xzzz[j] * fl1_fx * pc_y[j] + 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_z[j] * fl1_fx * pb_y[j] + 1.5 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx + 1.5 * pc_x[j] * pa_zzz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_y[j] + 3.0 * fl1_fx * pa_zz[j] * pc_yz[j] * pb_x[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] + fl1_fx * pa_zzz[j] * pb_x[j] * pc_y[j] + 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xy[j] + 3.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xy[j] + 1.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xy[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xzzz[j] * pb_x[j] * pc_xy[j] + pa_xzzz[j] * pc_xx[j] * pb_y[j] + 3.0 * pa_xzz[j] * pc_yz[j] * pb_xx[j] + 6.0 * pa_xzz[j] * pc_xz[j] * pb_xy[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_xxy[j] + pc_xy[j] * pa_zzz[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_zzz[j] * pb_xy[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_xxy[j]);

                t_xzzz_xxy[j] += fl_s_0_0_3 * (-0.75 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 4.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_y[j] - 4.5 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_x[j] - fl1_fx * pc_zzz[j] * pb_xy[j] - 3.0 * fl1_fx * pa_zz[j] * pc_yz[j] * pb_x[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] - 1.5 * pa_xz[j] * fl1_fx * pc_xxy[j] - 3.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xy[j] - 1.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - pa_xzzz[j] * pc_xxy[j] - 6.0 * pa_xzz[j] * pc_xyz[j] * pb_x[j] - 3.0 * pa_xzz[j] * pc_xxz[j] * pb_y[j] - 3.0 * pa_xz[j] * pc_yzz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xzz[j] * pb_xy[j] - pa_x[j] * pc_zzz[j] * pb_xxy[j] - 2.0 * pc_xxy[j] * pa_zzz[j] * pb_x[j] - pc_xxx[j] * pa_zzz[j] * pb_y[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_xx[j] - 6.0 * pc_xxz[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_xxy[j]);

                t_xzzz_xxy[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xz[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + fl1_fx * pc_yzzz[j] * pb_x[j] + 3.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_x[j] + fl1_fx * pc_zzz[j] * pb_xy[j] + 1.5 * pa_xz[j] * fl1_fx * pc_xxy[j] + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_xy[j] + 3.0 * pa_xzz[j] * pc_xxyz[j] + 6.0 * pa_xz[j] * pc_xyzz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xxzz[j] * pb_y[j] + pa_x[j] * pc_yzzz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_xy[j] + pc_xxxy[j] * pa_zzz[j] + 6.0 * pc_xxyz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xxxz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xxzz[j] * pa_z[j] * pb_xy[j] + pc_xzzz[j] * pb_xxy[j]);

                t_xzzz_xxy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - fl1_fx * pc_yzzz[j] * pb_x[j] - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - pa_x[j] * pc_xxzzz[j] * pb_y[j] - 3.0 * pc_xxxyz[j] * pa_zz[j] - 6.0 * pc_xxyzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxxzz[j] * pa_z[j] * pb_y[j] - pc_xyzzz[j] * pb_xx[j] - 2.0 * pc_xxzzz[j] * pb_xy[j]);

                t_xzzz_xxy[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_x[j] * pc_xxyzzz[j] + 3.0 * pc_xxxyzz[j] * pa_z[j] + 2.0 * pc_xxyzzz[j] * pb_x[j] + pc_xxxzzz[j] * pb_y[j]);

                t_xzzz_xxy[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_92_93(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (92,93)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_xxz = primBuffer.data(150 * idx + 92);

            // Batch of Integrals (92,93)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxz, pb_xz, \
                                     pb_z, pc_x, pc_xx, pc_xxx, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxxzzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xzzz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzzz_xxz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.75 * pa_xzz[j] * fl2_fx + 1.5 * fl2_fx * pa_zz[j] * pb_x[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xzzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xzz[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_zzz[j] * pb_xz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xxz[j] + pa_xzzz[j] * pb_xxz[j]);

                t_xzzz_xxz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 1.5 * pa_xzz[j] * fl2_fx - 2.25 * pa_xz[j] * pc_z[j] * fl2_fx - 2.25 * pc_x[j] * pa_zz[j] * fl2_fx - 3.0 * fl2_fx * pa_zz[j] * pb_x[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pa_z[j] * pb_xz[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xzzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xzzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xzz[j] * pc_z[j] * fl1_fx * pb_z[j] - 3.0 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_x[j] - 1.5 * pa_xzz[j] * fl1_fx * pb_xx[j] - 4.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_xx[j] - 1.5 * pc_x[j] * pa_zzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_xx[j] - fl1_fx * pa_zzz[j] * pb_x[j] * pc_z[j] - 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xz[j] - fl1_fx * pa_zzz[j] * pb_xz[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxz[j] - pa_xzzz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_xzzz[j] * pb_xz[j] * pc_x[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_xxz[j] - pc_x[j] * pa_zzz[j] * pb_xxz[j]);

                t_xzzz_xxz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.75 * pa_xzz[j] * fl2_fx + 4.5 * pa_xz[j] * pc_z[j] * fl2_fx + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 4.5 * pc_x[j] * pa_zz[j] * fl2_fx + 6.75 * pc_xz[j] * pa_z[j] * fl2_fx + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 3.0 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * fl2_fx * pa_zz[j] * pb_x[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 4.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 3.0 * fl2_fx * pc_z[j] * pb_xz[j] + 1.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xzzz[j] * fl1_fx * pc_z[j] + 1.5 * pa_xzz[j] * pc_zz[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_z[j] * fl1_fx * pb_z[j] + 1.5 * pa_xzz[j] * fl1_fx * pc_xx[j] + 3.0 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_x[j] + 1.5 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_x[j] + 4.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xz[j] * pa_zzz[j] * fl1_fx + 1.5 * pc_x[j] * pa_zzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_x[j] + 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_xx[j] + 4.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_xx[j] + 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_x[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] + fl1_fx * pa_zzz[j] * pb_x[j] * pc_z[j] + 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xz[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xzzz[j] * pb_x[j] * pc_xz[j] + pa_xzzz[j] * pc_xx[j] * pb_z[j] + 3.0 * pa_xzz[j] * pc_zz[j] * pb_xx[j] + 6.0 * pa_xzz[j] * pc_xz[j] * pb_xz[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_xxz[j] + pc_xz[j] * pa_zzz[j] * pb_xx[j] + 2.0 * pc_xx[j] * pa_zzz[j] * pb_xz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_xxz[j]);

                t_xzzz_xxz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 2.25 * pa_xz[j] * pc_z[j] * fl2_fx - 3.0 * pa_x[j] * pc_zz[j] * fl2_fx - 2.25 * pc_x[j] * pa_zz[j] * fl2_fx - 13.5 * pc_xz[j] * pa_z[j] * fl2_fx - 4.5 * pc_xzz[j] * fl2_fx - 6.0 * fl2_fx * pc_zz[j] * pb_x[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xx[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxx[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * pa_xzz[j] * pc_zz[j] * fl1_fx - 1.5 * pa_xzz[j] * fl1_fx * pc_xx[j] - 1.5 * pa_xz[j] * pc_zzz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 4.5 * pa_xz[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_x[j] - 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_xzz[j] * pa_zz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxx[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_x[j] - 4.5 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_x[j] - 4.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_xx[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] - fl1_fx * pc_zzz[j] * pb_xz[j] - 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_x[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] - 1.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxz[j] - pa_xzzz[j] * pc_xxz[j] - 6.0 * pa_xzz[j] * pc_xzz[j] * pb_x[j] - 3.0 * pa_xzz[j] * pc_xxz[j] * pb_z[j] - 3.0 * pa_xz[j] * pc_zzz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xzz[j] * pb_xz[j] - pa_x[j] * pc_zzz[j] * pb_xxz[j] - 2.0 * pc_xxz[j] * pa_zzz[j] * pb_x[j] - pc_xxx[j] * pa_zzz[j] * pb_z[j] - 3.0 * pc_xzz[j] * pa_zz[j] * pb_xx[j] - 6.0 * pc_xxz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_xxz[j]);

                t_xzzz_xxz[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 6.75 * pc_xz[j] * pa_z[j] * fl2_fx + 9.0 * pc_xzz[j] * fl2_fx + 3.0 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xxx[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xz[j] * pc_zzz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xzz[j] * pa_zz[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_zz[j] * fl1_fx + 4.5 * pc_xzzz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 4.5 * pc_xxxz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_x[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_xx[j] + fl1_fx * pc_zzzz[j] * pb_x[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] + fl1_fx * pc_zzz[j] * pb_xz[j] + 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_xz[j] + 3.0 * pa_xzz[j] * pc_xxzz[j] + 6.0 * pa_xz[j] * pc_xzzz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xxzz[j] * pb_z[j] + pa_x[j] * pc_zzzz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_xz[j] + pc_xxxz[j] * pa_zzz[j] + 6.0 * pc_xxzz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xxxz[j] * pa_zz[j] * pb_z[j] + 3.0 * pc_xzzz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xxzz[j] * pa_z[j] * pb_xz[j] + pc_xzzz[j] * pb_xxz[j]);

                t_xzzz_xxz[j] += fl_s_0_0_5 * (-4.5 * pc_xzz[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 4.5 * pc_xzzz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xxxz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xzzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxxzz[j] * fl1_fx - 6.0 * pc_xxzz[j] * fl1_fx * pb_x[j] - fl1_fx * pc_zzzz[j] * pb_x[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_xxzzz[j] - 2.0 * pa_x[j] * pc_xzzzz[j] * pb_x[j] - pa_x[j] * pc_xxzzz[j] * pb_z[j] - 3.0 * pc_xxxzz[j] * pa_zz[j] - 6.0 * pc_xxzzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxxzz[j] * pa_z[j] * pb_z[j] - pc_xzzzz[j] * pb_xx[j] - 2.0 * pc_xxzzz[j] * pb_xz[j]);

                t_xzzz_xxz[j] += fl_s_0_0_6 * (1.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pc_xxxzz[j] * fl1_fx + pa_x[j] * pc_xxzzzz[j] + 3.0 * pc_xxxzzz[j] * pa_z[j] + 2.0 * pc_xxzzzz[j] * pb_x[j] + pc_xxxzzz[j] * pb_z[j]);

                t_xzzz_xxz[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_93_94(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (93,94)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_xyy = primBuffer.data(150 * idx + 93);

            // Batch of Integrals (93,94)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xy, pb_xyy, pb_y, \
                                     pb_yy, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, \
                                     pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xzzz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzzz_xyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.25 * fl2_fx * pa_zzz[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xzzz[j] * pb_x[j] * fl1_fx + 0.5 * fl1_fx * pa_zzz[j] * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xyy[j] + pa_xzzz[j] * pb_xyy[j]);

                t_xzzz_xyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.5 * fl2_fx * pa_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_yy[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_xzzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xzzz[j] * pc_x[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 0.5 * pc_x[j] * pa_zzz[j] * pb_x[j] * fl1_fx - fl1_fx * pa_zzz[j] * pb_y[j] * pc_y[j] - 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yy[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_yy[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] - 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_xzzz[j] * pb_xy[j] * pc_y[j] - pa_xzzz[j] * pc_x[j] * pb_yy[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_xyy[j] - pc_x[j] * pa_zzz[j] * pb_xyy[j]);

                t_xzzz_xyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 0.25 * fl2_fx * pa_zzz[j] + 1.5 * pa_xz[j] * fl2_fx * pc_x[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * pa_z[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pc_yy[j] + 3.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_xzzz[j] * pc_x[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 0.5 * pc_x[j] * pa_zzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_zzz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 0.5 * fl1_fx * pa_zzz[j] * pc_yy[j] + 3.0 * fl1_fx * pa_zz[j] * pc_yz[j] * pb_y[j] + 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] + fl1_fx * pa_zzz[j] * pb_y[j] * pc_y[j] + 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 3.0 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_y[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] + 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] + pa_xzzz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_xzzz[j] * pc_xy[j] * pb_y[j] + 6.0 * pa_xzz[j] * pc_yz[j] * pb_xy[j] + 3.0 * pa_xzz[j] * pc_xz[j] * pb_yy[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_zzz[j] * pb_xy[j] + pc_xx[j] * pa_zzz[j] * pb_yy[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_xyy[j]);

                t_xzzz_xyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_zz[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xz[j] * fl2_fx - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_z[j] * fl2_fx - 0.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pa_z[j] * pc_yy[j] - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_xzz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xx[j] * pa_zzz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * fl1_fx * pa_zz[j] * pc_yyz[j] - 3.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_yy[j] - 3.0 * fl1_fx * pa_zz[j] * pc_yz[j] * pb_y[j] - 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] - 1.5 * pa_xz[j] * fl1_fx * pc_xyy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 3.0 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_y[j] - 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] - pa_xzzz[j] * pc_xyy[j] - 3.0 * pa_xzz[j] * pc_yyz[j] * pb_x[j] - 6.0 * pa_xzz[j] * pc_xyz[j] * pb_y[j] - 6.0 * pa_xz[j] * pc_yzz[j] * pb_xy[j] - 3.0 * pa_xz[j] * pc_xzz[j] * pb_yy[j] - pa_x[j] * pc_zzz[j] * pb_xyy[j] - pc_xyy[j] * pa_zzz[j] * pb_x[j] - 2.0 * pc_xxy[j] * pa_zzz[j] * pb_y[j] - 6.0 * pc_xyz[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_xxz[j] * pa_zz[j] * pb_yy[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_xyy[j]);

                t_xzzz_xyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * pa_x[j] * pc_xz[j] * fl2_fx + 0.75 * pc_xx[j] * pa_z[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_z[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * pa_xz[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * pc_xzzz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_zz[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxzz[j] * pa_z[j] * fl1_fx + 0.5 * pc_xzzz[j] * pb_x[j] * fl1_fx + 1.5 * fl1_fx * pa_z[j] * pc_yyzz[j] + fl1_fx * pc_yzzz[j] * pb_y[j] + 1.5 * fl1_fx * pa_zz[j] * pc_yyz[j] + 3.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pc_xyy[j] + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xzz[j] * pc_xyyz[j] + 3.0 * pa_xz[j] * pc_yyzz[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_x[j] * pc_yzzz[j] * pb_xy[j] + pa_x[j] * pc_xzzz[j] * pb_yy[j] + pc_xxyy[j] * pa_zzz[j] + 3.0 * pc_xyyz[j] * pa_zz[j] * pb_x[j] + 6.0 * pc_xxyz[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_xy[j] + 3.0 * pc_xxzz[j] * pa_z[j] * pb_yy[j] + pc_xzzz[j] * pb_xyy[j]);

                t_xzzz_xyy[j] += fl_s_0_0_5 * (-0.25 * fl2_fx * pc_zzz[j] - 0.75 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 0.5 * pa_x[j] * pc_xzzz[j] * fl1_fx - 1.5 * pc_xxzz[j] * pa_z[j] * fl1_fx - 0.5 * pc_xzzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * fl1_fx * pc_yyzzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_yyzz[j] - fl1_fx * pc_yzzz[j] * pb_y[j] - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_xxyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_xyyzz[j] - pa_x[j] * pc_yyzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_y[j] - 3.0 * pc_xxyyz[j] * pa_zz[j] - 3.0 * pc_xyyzz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyzzz[j] * pb_xy[j] - pc_xxzzz[j] * pb_yy[j]);

                t_xzzz_xyy[j] += fl_s_0_0_6 * (0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 1.5 * pc_xxyyz[j] * fl1_fx + pa_x[j] * pc_xyyzzz[j] + 3.0 * pc_xxyyzz[j] * pa_z[j] + pc_xyyzzz[j] * pb_x[j] + 2.0 * pc_xxyzzz[j] * pb_y[j]);

                t_xzzz_xyy[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_94_95(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (94,95)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_xyz = primBuffer.data(150 * idx + 94);

            // Batch of Integrals (94,95)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xy, pb_xyz, pb_xz, \
                                     pb_y, pb_yz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, \
                                     pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, \
                                     pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, \
                                     pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xzzz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzzz_xyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 1.5 * pa_xzz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_zzz[j] * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xyz[j] + pa_xzzz[j] * pb_xyz[j]);

                t_xzzz_xyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_zz[j] * pb_y[j] - 2.25 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_y[j] - 1.5 * pa_xzz[j] * fl1_fx * pc_x[j] * pb_y[j] - 1.5 * pa_xzz[j] * fl1_fx * pb_xy[j] - 4.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_xy[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_y[j] * pc_z[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_y[j] * pb_z[j] - 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yz[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_yz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xyz[j] - pa_xzzz[j] * pb_xy[j] * pc_z[j] - pa_xzzz[j] * pb_xz[j] * pc_y[j] - pa_xzzz[j] * pc_x[j] * pb_yz[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_xyz[j] - pc_x[j] * pa_zzz[j] * pb_xyz[j]);

                t_xzzz_xyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * fl2_fx * pa_zz[j] * pc_y[j] + 2.25 * fl2_fx * pa_z[j] * pc_yz[j] + 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_xy[j] + 1.5 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 1.5 * pa_xzz[j] * fl1_fx * pc_xy[j] + 1.5 * pa_xzz[j] * fl1_fx * pb_x[j] * pc_y[j] + 1.5 * pa_xzz[j] * fl1_fx * pc_x[j] * pb_y[j] + 4.5 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_x[j] + 4.5 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_xy[j] + 3.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_y[j] + 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_xy[j] + 4.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_zzz[j] * pc_yz[j] + 1.5 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_y[j] + 1.5 * fl1_fx * pa_zz[j] * pc_yz[j] * pb_z[j] + 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] + 0.5 * fl1_fx * pa_zzz[j] * pb_y[j] * pc_z[j] + 0.5 * fl1_fx * pa_zzz[j] * pc_y[j] * pb_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_z[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xyz[j] + pa_xzzz[j] * pb_x[j] * pc_yz[j] + pa_xzzz[j] * pc_xz[j] * pb_y[j] + pa_xzzz[j] * pc_xy[j] * pb_z[j] + 3.0 * pa_xzz[j] * pc_zz[j] * pb_xy[j] + 3.0 * pa_xzz[j] * pc_yz[j] * pb_xz[j] + 3.0 * pa_xzz[j] * pc_xz[j] * pb_yz[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_xyz[j] + pc_xz[j] * pa_zzz[j] * pb_xy[j] + pc_xy[j] * pa_zzz[j] * pb_xz[j] + pc_xx[j] * pa_zzz[j] * pb_yz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_xyz[j]);

                t_xzzz_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 4.5 * fl2_fx * pa_z[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 2.25 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_xy[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * pa_xzz[j] * fl1_fx * pc_xy[j] - 4.5 * pa_xz[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_x[j] - 4.5 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_y[j] - 4.5 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_x[j] - 4.5 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_xy[j] - 1.5 * fl1_fx * pa_zz[j] * pc_yzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] - 1.5 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_yz[j] - 1.5 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_y[j] - 1.5 * fl1_fx * pa_zz[j] * pc_yz[j] * pb_z[j] - 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] - 1.5 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_z[j] - 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xyz[j] - pa_xzzz[j] * pc_xyz[j] - 3.0 * pa_xzz[j] * pc_yzz[j] * pb_x[j] - 3.0 * pa_xzz[j] * pc_xzz[j] * pb_y[j] - 3.0 * pa_xzz[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_xz[j] * pc_zzz[j] * pb_xy[j] - 3.0 * pa_xz[j] * pc_yzz[j] * pb_xz[j] - 3.0 * pa_xz[j] * pc_xzz[j] * pb_yz[j] - pa_x[j] * pc_zzz[j] * pb_xyz[j] - pc_xyz[j] * pa_zzz[j] * pb_x[j] - pc_xxz[j] * pa_zzz[j] * pb_y[j] - pc_xxy[j] * pa_zzz[j] * pb_z[j] - 3.0 * pc_xzz[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_xyz[j]);

                t_xzzz_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 3.0 * fl2_fx * pc_yzz[j] + 2.25 * fl2_fx * pa_z[j] * pc_yz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 4.5 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 4.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_xy[j] + 1.5 * fl1_fx * pa_z[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_yzz[j] + 1.5 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] + 1.5 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_yz[j] + 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xzz[j] * pc_xyzz[j] + 3.0 * pa_xz[j] * pc_yzzz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xzzz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_xyzz[j] * pb_z[j] + pa_x[j] * pc_zzzz[j] * pb_xy[j] + pa_x[j] * pc_yzzz[j] * pb_xz[j] + pa_x[j] * pc_xzzz[j] * pb_yz[j] + pc_xxyz[j] * pa_zzz[j] + 3.0 * pc_xyzz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xxzz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_xxyz[j] * pa_zz[j] * pb_z[j] + 3.0 * pc_xzzz[j] * pa_z[j] * pb_xy[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_xz[j] + 3.0 * pc_xxzz[j] * pa_z[j] * pb_yz[j] + pc_xzzz[j] * pb_xyz[j]);

                t_xzzz_xyz[j] += fl_s_0_0_5 * (-1.5 * fl2_fx * pc_yzz[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 4.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yzzzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_z[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_xyzzz[j] - pa_x[j] * pc_yzzzz[j] * pb_x[j] - pa_x[j] * pc_xzzzz[j] * pb_y[j] - pa_x[j] * pc_xyzzz[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pa_zz[j] - 3.0 * pc_xyzzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxzzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - pc_xzzzz[j] * pb_xy[j] - pc_xyzzz[j] * pb_xz[j] - pc_xxzzz[j] * pb_yz[j]);

                t_xzzz_xyz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + pa_x[j] * pc_xyzzzz[j] + 3.0 * pc_xxyzzz[j] * pa_z[j] + pc_xyzzzz[j] * pb_x[j] + pc_xxzzzz[j] * pb_y[j] + pc_xxyzzz[j] * pb_z[j]);

                t_xzzz_xyz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_95_96(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (95,96)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxzzzzz = pcDistances.data(119 * idx + 103);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_xzz = primBuffer.data(150 * idx + 95);

            // Batch of Integrals (95,96)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xz, pb_xzz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xxzzzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xzzz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzzz_xzz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 2.25 * pa_xz[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_zzz[j] + 1.5 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xzzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xzz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_zzz[j] * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xzz[j] + pa_xzzz[j] * pb_xzz[j]);

                t_xzzz_xzz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 2.25 * fl3_fx * pb_z[j] - 2.25 * pa_xz[j] * fl2_fx * pc_x[j] - 4.5 * pa_xz[j] * fl2_fx * pb_x[j] - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 0.5 * fl2_fx * pa_zzz[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 3.0 * fl2_fx * pa_zz[j] * pb_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pa_x[j] * fl2_fx * pb_xz[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * pa_xzzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xzzz[j] * pc_x[j] * fl1_fx - 4.5 * pa_xzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 3.0 * pa_xzz[j] * fl1_fx * pc_x[j] * pb_z[j] - 3.0 * pa_xzz[j] * fl1_fx * pb_xz[j] - 9.0 * pa_xz[j] * pc_z[j] * fl1_fx * pb_xz[j] - 0.5 * pc_x[j] * pa_zzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_x[j] * pa_zz[j] * fl1_fx * pb_xz[j] - fl1_fx * pa_zzz[j] * pb_z[j] * pc_z[j] - 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_zz[j] - 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_xzzz[j] * pb_xz[j] * pc_z[j] - pa_xzzz[j] * pc_x[j] * pb_zz[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_xzz[j] - pc_x[j] * pa_zzz[j] * pb_xzz[j]);

                t_xzzz_xzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 2.25 * fl3_fx * pb_z[j] + 4.5 * pa_xz[j] * fl2_fx * pc_x[j] + 2.25 * pa_xz[j] * fl2_fx * pb_x[j] + 3.75 * pa_x[j] * pc_xz[j] * fl2_fx + 7.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] + 2.25 * pc_xx[j] * pa_z[j] * fl2_fx + 4.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] + 3.75 * pc_xz[j] * fl2_fx * pb_x[j] + 4.5 * fl2_fx * pa_zz[j] * pc_z[j] + 4.5 * fl2_fx * pa_z[j] * pc_zz[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 3.0 * fl2_fx * pc_zz[j] * pb_z[j] + 0.25 * fl2_fx * pa_zzz[j] + 1.5 * fl2_fx * pa_zz[j] * pb_z[j] + 3.0 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * pc_x[j] * fl2_fx * pb_xz[j] + 1.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xzzz[j] * pc_x[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_xz[j] * fl1_fx + 3.0 * pa_xzz[j] * fl1_fx * pc_x[j] * pb_z[j] + 9.0 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 9.0 * pa_xz[j] * pc_z[j] * fl1_fx * pb_xz[j] + 6.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_x[j] * pa_zzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_zzz[j] * fl1_fx + 4.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_x[j] * pa_zz[j] * fl1_fx * pb_xz[j] + 9.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_zzz[j] * pc_zz[j] + 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_z[j] + 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] + fl1_fx * pa_zzz[j] * pb_z[j] * pc_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xzz[j] + pa_xzzz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_xzzz[j] * pc_xz[j] * pb_z[j] + 6.0 * pa_xzz[j] * pc_zz[j] * pb_xz[j] + 3.0 * pa_xzz[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_xzz[j] + 2.0 * pc_xz[j] * pa_zzz[j] * pb_xz[j] + pc_xx[j] * pa_zzz[j] * pb_zz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_xzz[j]);

                t_xzzz_xzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pa_z[j] - 0.75 * fl3_fx * pb_z[j] - 2.25 * pa_xz[j] * fl2_fx * pc_x[j] - 7.5 * pa_x[j] * pc_xz[j] * fl2_fx - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_xx[j] * pa_z[j] * fl2_fx - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 3.75 * pc_xxz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pb_x[j] - 9.0 * fl2_fx * pa_z[j] * pc_zz[j] - 2.5 * fl2_fx * pc_zzz[j] - 6.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 4.5 * pa_xzz[j] * pc_xz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 5.0 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] - 9.0 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xzz[j] * fl1_fx * pb_xz[j] - 1.5 * fl1_fx * pa_zz[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_zz[j] - 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_z[j] - 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] - 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xzz[j] - pa_xzzz[j] * pc_xzz[j] - 3.0 * pa_xzz[j] * pc_zzz[j] * pb_x[j] - 6.0 * pa_xzz[j] * pc_xzz[j] * pb_z[j] - 6.0 * pa_xz[j] * pc_zzz[j] * pb_xz[j] - 3.0 * pa_xz[j] * pc_xzz[j] * pb_zz[j] - pa_x[j] * pc_zzz[j] * pb_xzz[j] - pc_xzz[j] * pa_zzz[j] * pb_x[j] - 2.0 * pc_xxz[j] * pa_zzz[j] * pb_z[j] - 6.0 * pc_xzz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_zz[j] * pb_zz[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_xzz[j]);

                t_xzzz_xzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 3.75 * pa_x[j] * pc_xz[j] * fl2_fx + 2.25 * pc_xx[j] * pa_z[j] * fl2_fx + 7.5 * pc_xxz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_x[j] + 5.0 * fl2_fx * pc_zzz[j] + 4.5 * fl2_fx * pa_z[j] * pc_zz[j] + 3.0 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 9.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + 5.0 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 5.0 * pa_x[j] * pc_xzzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xxz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] + 5.0 * pc_xzzz[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xzz[j] * fl1_fx * pb_xz[j] + 1.5 * fl1_fx * pa_z[j] * pc_zzzz[j] + fl1_fx * pc_zzzz[j] * pb_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_zz[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xzz[j] * pc_xzzz[j] + 3.0 * pa_xz[j] * pc_zzzz[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xzzz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_zzzz[j] * pb_xz[j] + pa_x[j] * pc_xzzz[j] * pb_zz[j] + pc_xxzz[j] * pa_zzz[j] + 3.0 * pc_xzzz[j] * pa_zz[j] * pb_x[j] + 6.0 * pc_xxzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xzzz[j] * pa_z[j] * pb_xz[j] + 3.0 * pc_xxzz[j] * pa_z[j] * pb_zz[j] + pc_xzzz[j] * pb_xzz[j]);

                t_xzzz_xzz[j] += fl_s_0_0_5 * (-3.75 * pc_xxz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 5.0 * pa_x[j] * pc_xzzz[j] * fl1_fx - 9.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_xzzz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxzzz[j] * fl1_fx - 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_zzzzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_zzzz[j] - fl1_fx * pc_zzzz[j] * pb_z[j] - 3.0 * pa_xz[j] * pc_xzzzz[j] - pa_x[j] * pc_zzzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xzzzz[j] * pb_z[j] - 3.0 * pc_xxzzz[j] * pa_zz[j] - 3.0 * pc_xzzzz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxzzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xzzzz[j] * pb_xz[j] - pc_xxzzz[j] * pb_zz[j]);

                t_xzzz_xzz[j] += fl_s_0_0_6 * (5.0 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + pa_x[j] * pc_xzzzzz[j] + 3.0 * pc_xxzzzz[j] * pa_z[j] + pc_xzzzzz[j] * pb_x[j] + 2.0 * pc_xxzzzz[j] * pb_z[j]);

                t_xzzz_xzz[j] += -fl_s_0_0_7 * pc_xxzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_96_97(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (96,97)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_yyy = primBuffer.data(150 * idx + 96);

            // Batch of Integrals (96,97)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_y, pb_yy, pb_yyy, pc_x, \
                                     pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, \
                                     pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xzzz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xzzz_yyy[j] = fl_s_0_0_0 * (2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_xzzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xz[j] * fl1_fx * pb_yyy[j] + pa_xzzz[j] * pb_yyy[j]);

                t_xzzz_yyy[j] += fl_s_0_0_1 * (-4.5 * pa_xz[j] * fl2_fx * pb_y[j] - 2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 1.5 * pa_xzzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xzzz[j] * pc_y[j] * fl1_fx - 4.5 * pa_xzz[j] * pc_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_x[j] * pa_zzz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_xzzz[j] * pb_yy[j] * pc_y[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_yyy[j] - pc_x[j] * pa_zzz[j] * pb_yyy[j]);

                t_xzzz_yyy[j] += fl_s_0_0_2 * (4.5 * pa_xz[j] * fl2_fx * pc_y[j] + 2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 4.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_xzzz[j] * pc_y[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_z[j] * pb_y[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 1.5 * pc_x[j] * pa_zzz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx + 4.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyy[j] + 4.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_xzzz[j] * pb_y[j] * pc_yy[j] + 9.0 * pa_xzz[j] * pc_yz[j] * pb_yy[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_yyy[j] + 3.0 * pc_xy[j] * pa_zzz[j] * pb_yy[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_yyy[j]);

                t_xzzz_yyy[j] += fl_s_0_0_3 * (-2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 4.5 * pa_x[j] * pc_yz[j] * fl2_fx - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 4.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xz[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 4.5 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pa_xz[j] * fl1_fx * pc_yyy[j] - 4.5 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 4.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - pa_xzzz[j] * pc_yyy[j] - 9.0 * pa_xzz[j] * pc_yyz[j] * pb_y[j] - 9.0 * pa_xz[j] * pc_yzz[j] * pb_yy[j] - pa_x[j] * pc_zzz[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_zzz[j] * pb_y[j] - 9.0 * pc_xyz[j] * pa_zz[j] * pb_yy[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_yyy[j]);

                t_xzzz_yyy[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pa_xz[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 4.5 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xzzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xz[j] * fl1_fx * pc_yyy[j] + 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xzz[j] * pc_yyyz[j] + 9.0 * pa_xz[j] * pc_yyzz[j] * pb_y[j] + 3.0 * pa_x[j] * pc_yzzz[j] * pb_yy[j] + pc_xyyy[j] * pa_zzz[j] + 9.0 * pc_xyyz[j] * pa_zz[j] * pb_y[j] + 9.0 * pc_xyzz[j] * pa_z[j] * pb_yy[j] + pc_xzzz[j] * pb_yyy[j]);

                t_xzzz_yyy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xzzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_yyyzz[j] - 3.0 * pa_x[j] * pc_yyzzz[j] * pb_y[j] - 3.0 * pc_xyyyz[j] * pa_zz[j] - 9.0 * pc_xyyzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyzzz[j] * pb_yy[j]);

                t_xzzz_yyy[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_yyyzzz[j] + 3.0 * pc_xyyyzz[j] * pa_z[j] + 3.0 * pc_xyyzzz[j] * pb_y[j]);

                t_xzzz_yyy[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_97_98(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (97,98)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_yyz = primBuffer.data(150 * idx + 97);

            // Batch of Integrals (97,98)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_y, pb_yy, pb_yyz, pb_yz, \
                                     pb_z, pc_x, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, pc_xyz, \
                                     pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xzzz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzzz_yyz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xzz[j] * fl2_fx + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xzzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xzz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_yyz[j] + pa_xzzz[j] * pb_yyz[j]);

                t_xzzz_yyz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xzz[j] * fl2_fx - 2.25 * pa_xz[j] * pc_z[j] * fl2_fx - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 1.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xzzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_xzzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_xzz[j] * pc_z[j] * fl1_fx * pb_z[j] - 3.0 * pa_xzz[j] * fl1_fx * pb_y[j] * pc_y[j] - 1.5 * pa_xzz[j] * fl1_fx * pb_yy[j] - 4.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_yy[j] - 0.5 * pc_x[j] * pa_zzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yy[j] - 3.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yyz[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_yyz[j] - pa_xzzz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_xzzz[j] * pb_yz[j] * pc_y[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_yyz[j] - pc_x[j] * pa_zzz[j] * pb_yyz[j]);

                t_xzzz_yyz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * pa_xzz[j] * fl2_fx + 4.5 * pa_xz[j] * pc_z[j] * fl2_fx + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 1.5 * pc_x[j] * pa_zz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_z[j] * fl2_fx + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xzzz[j] * fl1_fx * pc_z[j] + 1.5 * pa_xzz[j] * pc_zz[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_z[j] * fl1_fx * pb_z[j] + 1.5 * pa_xzz[j] * fl1_fx * pc_yy[j] + 3.0 * pa_xzz[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 9.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 4.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_yy[j] + 3.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yy[j] + 0.5 * pc_xz[j] * pa_zzz[j] * fl1_fx + 0.5 * pc_x[j] * pa_zzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] + 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yy[j] + 4.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] + 3.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_xzzz[j] * pb_y[j] * pc_yz[j] + pa_xzzz[j] * pc_yy[j] * pb_z[j] + 3.0 * pa_xzz[j] * pc_zz[j] * pb_yy[j] + 6.0 * pa_xzz[j] * pc_yz[j] * pb_yz[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_yyz[j] + pc_xz[j] * pa_zzz[j] * pb_yy[j] + 2.0 * pc_xy[j] * pa_zzz[j] * pb_yz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_yyz[j]);

                t_xzzz_yyz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 2.25 * pa_xz[j] * pc_z[j] * fl2_fx - 3.0 * pa_x[j] * pc_zz[j] * fl2_fx - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 4.5 * pc_xz[j] * pa_z[j] * fl2_fx - 1.5 * pc_xzz[j] * fl2_fx - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_yy[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 0.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_xzz[j] * pc_zz[j] * fl1_fx - 1.5 * pa_xzz[j] * fl1_fx * pc_yy[j] - 1.5 * pa_xz[j] * pc_zzz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 4.5 * pa_xz[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xz[j] * pa_zzz[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] - 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] - pa_xzzz[j] * pc_yyz[j] - 6.0 * pa_xzz[j] * pc_yzz[j] * pb_y[j] - 3.0 * pa_xzz[j] * pc_yyz[j] * pb_z[j] - 3.0 * pa_xz[j] * pc_zzz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_yzz[j] * pb_yz[j] - pa_x[j] * pc_zzz[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_zzz[j] * pb_y[j] - pc_xyy[j] * pa_zzz[j] * pb_z[j] - 3.0 * pc_xzz[j] * pa_zz[j] * pb_yy[j] - 6.0 * pc_xyz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_yyz[j]);

                t_xzzz_yyz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_z[j] * fl2_fx + 3.0 * pc_xzz[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_xz[j] * pc_zzz[j] * fl1_fx + 4.5 * pa_xz[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xzz[j] * pa_zz[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 1.5 * pc_xzzz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xzz[j] * pc_yyzz[j] + 6.0 * pa_xz[j] * pc_yzzz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_yyzz[j] * pb_z[j] + pa_x[j] * pc_zzzz[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_yzzz[j] * pb_yz[j] + pc_xyyz[j] * pa_zzz[j] + 6.0 * pc_xyzz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_xyyz[j] * pa_zz[j] * pb_z[j] + 3.0 * pc_xzzz[j] * pa_z[j] * pb_yy[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_yz[j] + pc_xzzz[j] * pb_yyz[j]);

                t_xzzz_yyz[j] += fl_s_0_0_5 * (-1.5 * pc_xzz[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 0.5 * pc_xzzzz[j] * fl1_fx - 0.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyyzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_yyzzz[j] - 2.0 * pa_x[j] * pc_yzzzz[j] * pb_y[j] - pa_x[j] * pc_yyzzz[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pa_zz[j] - 6.0 * pc_xyzzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - pc_xzzzz[j] * pb_yy[j] - 2.0 * pc_xyzzz[j] * pb_yz[j]);

                t_xzzz_yyz[j] += fl_s_0_0_6 * (0.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + pa_x[j] * pc_yyzzzz[j] + 3.0 * pc_xyyzzz[j] * pa_z[j] + 2.0 * pc_xyzzzz[j] * pb_y[j] + pc_xyyzzz[j] * pb_z[j]);

                t_xzzz_yyz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_98_99(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (98,99)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_yzz = primBuffer.data(150 * idx + 98);

            // Batch of Integrals (98,99)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_y, pb_yz, pb_yzz, pb_z, \
                                     pb_zz, pc_x, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xzzz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_xzzz_yzz[j] = fl_s_0_0_0 * (2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xzzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xzz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_yzz[j] + pa_xzzz[j] * pb_yzz[j]);

                t_xzzz_yzz[j] += fl_s_0_0_1 * (-2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 4.5 * pa_xz[j] * fl2_fx * pb_y[j] - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pa_x[j] * fl2_fx * pb_yz[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xzzz[j] * pb_y[j] * fl1_fx - 0.5 * pa_xzzz[j] * pc_y[j] * fl1_fx - 4.5 * pa_xzz[j] * pc_z[j] * pb_y[j] * fl1_fx - 3.0 * pa_xzz[j] * fl1_fx * pc_y[j] * pb_z[j] - 3.0 * pa_xzz[j] * fl1_fx * pb_yz[j] - 9.0 * pa_xz[j] * pc_z[j] * fl1_fx * pb_yz[j] - 0.5 * pc_x[j] * pa_zzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yz[j] - 1.5 * pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_xzzz[j] * pb_yz[j] * pc_z[j] - pa_xzzz[j] * pc_y[j] * pb_zz[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_yzz[j] - pc_x[j] * pa_zzz[j] * pb_yzz[j]);

                t_xzzz_yzz[j] += fl_s_0_0_2 * (4.5 * pa_xz[j] * fl2_fx * pc_y[j] + 2.25 * pa_xz[j] * fl2_fx * pb_y[j] + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 7.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xzzz[j] * pc_y[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_z[j] * pb_y[j] * fl1_fx + 4.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 3.0 * pa_xzz[j] * fl1_fx * pc_y[j] * pb_z[j] + 9.0 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 9.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 9.0 * pa_xz[j] * pc_z[j] * fl1_fx * pb_yz[j] + 6.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yz[j] + 0.5 * pc_x[j] * pa_zzz[j] * pb_y[j] * fl1_fx + 0.5 * pc_xy[j] * pa_zzz[j] * fl1_fx + 4.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yz[j] + 9.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yz[j] + 1.5 * pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + pa_xzzz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_xzzz[j] * pc_yz[j] * pb_z[j] + 6.0 * pa_xzz[j] * pc_zz[j] * pb_yz[j] + 3.0 * pa_xzz[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_yzz[j] + 2.0 * pc_xz[j] * pa_zzz[j] * pb_yz[j] + pc_xy[j] * pa_zzz[j] * pb_zz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_yzz[j]);

                t_xzzz_yzz[j] += fl_s_0_0_3 * (-2.25 * pa_xz[j] * fl2_fx * pc_y[j] - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 4.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 4.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 9.0 * pa_xz[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 5.0 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 6.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 9.0 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yz[j] - 6.0 * pc_xzz[j] * fl1_fx * pb_yz[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - pa_xzzz[j] * pc_yzz[j] - 3.0 * pa_xzz[j] * pc_zzz[j] * pb_y[j] - 6.0 * pa_xzz[j] * pc_yzz[j] * pb_z[j] - 6.0 * pa_xz[j] * pc_zzz[j] * pb_yz[j] - 3.0 * pa_xz[j] * pc_yzz[j] * pb_zz[j] - pa_x[j] * pc_zzz[j] * pb_yzz[j] - pc_xzz[j] * pa_zzz[j] * pb_y[j] - 2.0 * pc_xyz[j] * pa_zzz[j] * pb_z[j] - 6.0 * pc_xzz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_zz[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_yzz[j]);

                t_xzzz_yzz[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 9.0 * pa_xz[j] * pc_yzz[j] * fl1_fx + 5.0 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 9.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + 5.0 * pc_xzzz[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xzz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xzz[j] * pc_yzzz[j] + 3.0 * pa_xz[j] * pc_zzzz[j] * pb_y[j] + 6.0 * pa_xz[j] * pc_yzzz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_zzzz[j] * pb_yz[j] + pa_x[j] * pc_yzzz[j] * pb_zz[j] + pc_xyzz[j] * pa_zzz[j] + 3.0 * pc_xzzz[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_xyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xzzz[j] * pa_z[j] * pb_yz[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_zz[j] + pc_xzzz[j] * pb_yzz[j]);

                t_xzzz_yzz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx - 9.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_xzzz[j] * pb_y[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_yzzzz[j] - pa_x[j] * pc_zzzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_yzzzz[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pa_zz[j] - 3.0 * pc_xzzzz[j] * pa_z[j] * pb_y[j] - 6.0 * pc_xyzzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xzzzz[j] * pb_yz[j] - pc_xyzzz[j] * pb_zz[j]);

                t_xzzz_yzz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yzzzzz[j] + 3.0 * pc_xyzzzz[j] * pa_z[j] + pc_xzzzzz[j] * pb_y[j] + 2.0 * pc_xyzzzz[j] * pb_z[j]);

                t_xzzz_yzz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_99_100(      CMemBlock2D<double>& primBuffer,
                                     const CMemBlock2D<double>& auxBuffer,
                                     const CMemBlock2D<double>& osFactors,
                                     const CMemBlock2D<double>& paDistances,
                                     const CMemBlock2D<double>& pbDistances,
                                     const CMemBlock2D<double>& pcDistances,
                                     const CGtoBlock&           braGtoBlock,
                                     const CGtoBlock&           ketGtoBlock,
                                     const int32_t              iContrGto)
    {
        // Batch of Integrals (99,100)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(34 * idx);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(34 * idx + 5);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(34 * idx + 14);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_xzzz = paDistances.data(34 * idx + 28);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xzzzzzz = pcDistances.data(119 * idx + 110);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzzz_zzz = primBuffer.data(150 * idx + 99);

            // Batch of Integrals (99,100)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_xzzz, pa_z, pa_zz, pa_zzz, pb_z, pb_zz, pb_zzz, pc_x, \
                                     pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_xzzzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, pc_zzzzz, pc_zzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xzzz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzzz_zzz[j] = fl_s_0_0_0 * (1.875 * pa_x[j] * fl3_fx + 2.25 * pa_xzz[j] * fl2_fx + 6.75 * pa_xz[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xzzz[j] * pb_z[j] * fl1_fx + 4.5 * pa_xzz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_zzz[j] + pa_xzzz[j] * pb_zzz[j]);

                t_xzzz_zzz[j] += fl_s_0_0_1 * (-5.625 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 4.5 * pa_xzz[j] * fl2_fx - 11.25 * pa_xz[j] * pc_z[j] * fl2_fx - 13.5 * pa_xz[j] * fl2_fx * pb_z[j] - 11.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * pa_zz[j] * fl2_fx - 6.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_zz[j] - 2.25 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * pa_xzzz[j] * pb_z[j] * fl1_fx - 1.5 * pa_xzzz[j] * pc_z[j] * fl1_fx - 13.5 * pa_xzz[j] * pc_z[j] * pb_z[j] * fl1_fx - 4.5 * pa_xzz[j] * fl1_fx * pb_zz[j] - 13.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_x[j] * pa_zzz[j] * pb_z[j] * fl1_fx - 4.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_xzzz[j] * pb_zz[j] * pc_z[j] - 3.0 * pa_xzz[j] * pc_z[j] * pb_zzz[j] - pc_x[j] * pa_zzz[j] * pb_zzz[j]);

                t_xzzz_zzz[j] += fl_s_0_0_2 * (5.625 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 2.25 * pa_xzz[j] * fl2_fx + 22.5 * pa_xz[j] * pc_z[j] * fl2_fx + 6.75 * pa_xz[j] * fl2_fx * pb_z[j] + 11.25 * pa_x[j] * pc_zz[j] * fl2_fx + 22.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * pa_zz[j] * fl2_fx + 11.25 * pc_xz[j] * pa_z[j] * fl2_fx + 13.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] + 11.25 * pc_xz[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_zz[j] + 4.5 * pc_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xzzz[j] * pc_z[j] * fl1_fx + 13.5 * pa_xzz[j] * pc_z[j] * pb_z[j] * fl1_fx + 9.0 * pa_xzz[j] * pc_zz[j] * fl1_fx + 27.0 * pa_xz[j] * pc_zz[j] * pb_z[j] * fl1_fx + 13.5 * pa_xz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 9.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_zzz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xz[j] * pa_zzz[j] * fl1_fx + 13.5 * pc_xz[j] * pa_zz[j] * pb_z[j] * fl1_fx + 4.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_zz[j] + 13.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * pa_z[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] + 3.0 * pa_xzzz[j] * pb_z[j] * pc_zz[j] + 9.0 * pa_xzz[j] * pc_zz[j] * pb_zz[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_zzz[j] + 3.0 * pc_xz[j] * pa_zzz[j] * pb_zz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_zzz[j]);

                t_xzzz_zzz[j] += fl_s_0_0_3 * (-1.875 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 11.25 * pa_xz[j] * pc_z[j] * fl2_fx - 22.5 * pa_x[j] * pc_zz[j] * fl2_fx - 11.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * pa_zz[j] * fl2_fx - 22.5 * pc_xz[j] * pa_z[j] * fl2_fx - 6.75 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 11.25 * pc_xzz[j] * fl2_fx - 22.5 * pc_xz[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_zz[j] - 9.0 * pa_xzz[j] * pc_zz[j] * fl1_fx - 27.0 * pa_xz[j] * pc_zz[j] * pb_z[j] * fl1_fx - 15.0 * pa_xz[j] * pc_zzz[j] * fl1_fx - 15.0 * pa_x[j] * pc_zzz[j] * pb_z[j] * fl1_fx - 9.0 * pa_x[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * pa_zzz[j] * fl1_fx - 13.5 * pc_xz[j] * pa_zz[j] * pb_z[j] * fl1_fx - 9.0 * pc_xzz[j] * pa_zz[j] * fl1_fx - 27.0 * pc_xzz[j] * pa_z[j] * pb_z[j] * fl1_fx - 13.5 * pc_xz[j] * pa_z[j] * fl1_fx * pb_zz[j] - 9.0 * pc_xzz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] - pa_xzzz[j] * pc_zzz[j] - 9.0 * pa_xzz[j] * pc_zzz[j] * pb_z[j] - 9.0 * pa_xz[j] * pc_zzz[j] * pb_zz[j] - pa_x[j] * pc_zzz[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_zzz[j] * pb_z[j] - 9.0 * pc_xzz[j] * pa_zz[j] * pb_zz[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_zzz[j]);

                t_xzzz_zzz[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 11.25 * pa_x[j] * pc_zz[j] * fl2_fx + 11.25 * pc_xz[j] * pa_z[j] * fl2_fx + 22.5 * pc_xzz[j] * fl2_fx + 11.25 * pc_xz[j] * fl2_fx * pb_z[j] + 15.0 * pa_xz[j] * pc_zzz[j] * fl1_fx + 15.0 * pa_x[j] * pc_zzz[j] * pb_z[j] * fl1_fx + 7.5 * pa_x[j] * pc_zzzz[j] * fl1_fx + 9.0 * pc_xzz[j] * pa_zz[j] * fl1_fx + 27.0 * pc_xzz[j] * pa_z[j] * pb_z[j] * fl1_fx + 15.0 * pc_xzzz[j] * pa_z[j] * fl1_fx + 15.0 * pc_xzzz[j] * pb_z[j] * fl1_fx + 9.0 * pc_xzz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xzz[j] * pc_zzzz[j] + 9.0 * pa_xz[j] * pc_zzzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_zzzz[j] * pb_zz[j] + pc_xzzz[j] * pa_zzz[j] + 9.0 * pc_xzzz[j] * pa_zz[j] * pb_z[j] + 9.0 * pc_xzzz[j] * pa_z[j] * pb_zz[j] + pc_xzzz[j] * pb_zzz[j]);

                t_xzzz_zzz[j] += fl_s_0_0_5 * (-11.25 * pc_xzz[j] * fl2_fx - 7.5 * pa_x[j] * pc_zzzz[j] * fl1_fx - 15.0 * pc_xzzz[j] * pa_z[j] * fl1_fx - 15.0 * pc_xzzz[j] * pb_z[j] * fl1_fx - 7.5 * pc_xzzzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_zzzzz[j] - 3.0 * pa_x[j] * pc_zzzzz[j] * pb_z[j] - 3.0 * pc_xzzzz[j] * pa_zz[j] - 9.0 * pc_xzzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xzzzz[j] * pb_zz[j]);

                t_xzzz_zzz[j] += fl_s_0_0_6 * (7.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_zzzzzz[j] + 3.0 * pc_xzzzzz[j] * pa_z[j] + 3.0 * pc_xzzzzz[j] * pb_z[j]);

                t_xzzz_zzz[j] += -fl_s_0_0_7 * pc_xzzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_100_101(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (100,101)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_xxx = primBuffer.data(150 * idx + 100);

            // Batch of Integrals (100,101)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_x, pb_xx, pb_xxx, pc_x, pc_xx, pc_xxx, \
                                     pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, \
                                     pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_y, pc_yy, pc_yyy, pc_yyyy, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_xxx[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_x[j] + 4.5 * pa_yy[j] * fl2_fx * pb_x[j] + 1.5 * pa_yyyy[j] * pb_x[j] * fl1_fx + 0.75 * fl2_fx * pb_xxx[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xxx[j] + pa_yyyy[j] * pb_xxx[j]);

                t_yyyy_xxx[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_x[j] - 1.125 * fl3_fx * pc_x[j] - 9.0 * pa_yy[j] * fl2_fx * pb_x[j] - 4.5 * pa_yy[j] * fl2_fx * pc_x[j] - 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pa_yyyy[j] * pb_x[j] * fl1_fx - 1.5 * pa_yyyy[j] * pc_x[j] * fl1_fx - 6.0 * pa_yyy[j] * pc_y[j] * pb_x[j] * fl1_fx - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxx[j] - 9.0 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xxx[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_yyyy[j] * pb_xx[j] * pc_x[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_xxx[j]);

                t_yyyy_xxx[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_x[j] + 3.375 * fl3_fx * pb_x[j] + 9.0 * pa_yy[j] * fl2_fx * pc_x[j] + 4.5 * pa_yy[j] * fl2_fx * pb_x[j] + 18.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 9.0 * pa_y[j] * pc_xy[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pa_yyyy[j] * pc_x[j] * fl1_fx + 6.0 * pa_yyy[j] * pc_y[j] * pb_x[j] * fl1_fx + 6.0 * pa_yyy[j] * pc_xy[j] * fl1_fx + 9.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 4.5 * fl2_fx * pb_xx[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxx[j] + 9.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 9.0 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 18.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_yyyy[j] * pb_x[j] * pc_xx[j] + 12.0 * pa_yyy[j] * pc_xy[j] * pb_xx[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xxx[j]);

                t_yyyy_xxx[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 4.5 * pa_yy[j] * fl2_fx * pc_x[j] - 18.0 * pa_y[j] * pc_xy[j] * fl2_fx - 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 9.0 * pc_yy[j] * fl2_fx * pb_x[j] - 4.5 * pc_xyy[j] * fl2_fx - 6.0 * pa_yyy[j] * pc_xy[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 9.0 * pa_yy[j] * pc_xyy[j] * fl1_fx - 6.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 0.75 * fl2_fx * pc_xxx[j] - 4.5 * fl2_fx * pb_x[j] * pc_xx[j] - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xxx[j] - 9.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 18.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 18.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xyy[j] * fl1_fx * pb_xx[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xxx[j] - pa_yyyy[j] * pc_xxx[j] - 12.0 * pa_yyy[j] * pc_xxy[j] * pb_x[j] - 18.0 * pa_yy[j] * pc_xyy[j] * pb_xx[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_xxx[j]);

                t_yyyy_xxx[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_x[j] + 9.0 * pa_y[j] * pc_xy[j] * fl2_fx + 9.0 * pc_xyy[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_x[j] + 9.0 * pa_yy[j] * pc_xyy[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyyy[j] * fl1_fx + 1.5 * pc_yyyy[j] * pb_x[j] * fl1_fx + 1.5 * fl2_fx * pc_xxx[j] + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xxx[j] + 6.0 * pa_y[j] * pc_xxxy[j] * fl1_fx + 18.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 9.0 * pc_xxyy[j] * fl1_fx * pb_x[j] + 9.0 * pc_xyy[j] * fl1_fx * pb_xx[j] + 4.0 * pa_yyy[j] * pc_xxxy[j] + 18.0 * pa_yy[j] * pc_xxyy[j] * pb_x[j] + 12.0 * pa_y[j] * pc_xyyy[j] * pb_xx[j] + pc_yyyy[j] * pb_xxx[j]);

                t_yyyy_xxx[j] += fl_s_0_0_5 * (-4.5 * pc_xyy[j] * fl2_fx - 6.0 * pa_y[j] * pc_xyyy[j] * fl1_fx - 1.5 * pc_yyyy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyyy[j] * fl1_fx - 0.75 * fl2_fx * pc_xxx[j] - 6.0 * pa_y[j] * pc_xxxy[j] * fl1_fx - 3.0 * pc_xxxyy[j] * fl1_fx - 9.0 * pc_xxyy[j] * fl1_fx * pb_x[j] - 6.0 * pa_yy[j] * pc_xxxyy[j] - 12.0 * pa_y[j] * pc_xxyyy[j] * pb_x[j] - 3.0 * pc_xyyyy[j] * pb_xx[j]);

                t_yyyy_xxx[j] += fl_s_0_0_6 * (1.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xxxyy[j] * fl1_fx + 4.0 * pa_y[j] * pc_xxxyyy[j] + 3.0 * pc_xxyyyy[j] * pb_x[j]);

                t_yyyy_xxx[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_101_102(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (101,102)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyy = pcDistances.data(119 * idx + 98);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_xxy = primBuffer.data(150 * idx + 101);

            // Batch of Integrals (101,102)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_x, pb_xx, pb_xxy, pb_xy, pb_y, pc_x, pc_xx, \
                                     pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyy, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, \
                                     pc_xyyyyy, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_xxy[j] = fl_s_0_0_0 * (1.5 * pa_y[j] * fl3_fx + pa_yyy[j] * fl2_fx + 0.375 * fl3_fx * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 3.0 * pa_y[j] * fl2_fx * pb_xx[j] + 0.5 * pa_yyyy[j] * fl1_fx * pb_y[j] + 2.0 * pa_yyy[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pb_xxy[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xxy[j] + pa_yyyy[j] * pb_xxy[j]);

                t_yyyy_xxy[j] += fl_s_0_0_1 * (-4.5 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 2.0 * pa_yyy[j] * fl2_fx - 4.5 * pa_yy[j] * pc_y[j] * fl2_fx - 1.125 * fl3_fx * pb_y[j] - 3.0 * pa_yy[j] * fl2_fx * pb_y[j] - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 6.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 6.0 * pa_y[j] * fl2_fx * pb_xx[j] - 3.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * pa_yyyy[j] * fl1_fx * pc_y[j] - 0.5 * pa_yyyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_y[j] - 4.0 * pa_yyy[j] * fl1_fx * pb_x[j] * pc_x[j] - 2.0 * pa_yyy[j] * fl1_fx * pb_xx[j] - 9.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xx[j] - 1.5 * fl2_fx * pb_xy[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxy[j] - 6.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xxy[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] - pa_yyyy[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_yyyy[j] * pb_xy[j] * pc_x[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_xxy[j]);

                t_yyyy_xxy[j] += fl_s_0_0_2 * (4.5 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + pa_yyy[j] * fl2_fx + 9.0 * pa_yy[j] * pc_y[j] * fl2_fx + 6.0 * pa_y[j] * pc_yy[j] * fl2_fx + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 6.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 3.0 * pa_y[j] * fl2_fx * pc_xx[j] + 12.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 3.0 * pa_y[j] * fl2_fx * pb_xx[j] + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_xy[j] * fl2_fx * pb_x[j] + 7.5 * pc_y[j] * fl2_fx * pb_xx[j] + 0.5 * pa_yyyy[j] * fl1_fx * pc_y[j] + 2.0 * pa_yyy[j] * pc_yy[j] * fl1_fx + 2.0 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_y[j] + 2.0 * pa_yyy[j] * fl1_fx * pc_xx[j] + 4.0 * pa_yyy[j] * fl1_fx * pb_x[j] * pc_x[j] + 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_y[j] + 18.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_x[j] + 9.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xx[j] + 12.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pc_xx[j] * pb_y[j] + 3.0 * fl2_fx * pb_xy[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxy[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 6.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] + 12.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_yyyy[j] * pb_x[j] * pc_xy[j] + pa_yyyy[j] * pc_xx[j] * pb_y[j] + 4.0 * pa_yyy[j] * pc_yy[j] * pb_xx[j] + 8.0 * pa_yyy[j] * pc_xy[j] * pb_xy[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xxy[j]);

                t_yyyy_xxy[j] += fl_s_0_0_3 * (-1.5 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 4.5 * pa_yy[j] * pc_y[j] * fl2_fx - 12.0 * pa_y[j] * pc_yy[j] * fl2_fx - 2.5 * pc_yyy[j] * fl2_fx - 0.375 * fl3_fx * pb_y[j] - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 6.0 * pa_y[j] * fl2_fx * pc_xx[j] - 6.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 3.0 * pc_yy[j] * fl2_fx * pb_y[j] - 3.75 * pc_xxy[j] * fl2_fx - 15.0 * pc_xy[j] * fl2_fx * pb_x[j] - 3.75 * pc_y[j] * fl2_fx * pb_xx[j] - 2.0 * pa_yyy[j] * pc_yy[j] * fl1_fx - 2.0 * pa_yyy[j] * fl1_fx * pc_xx[j] - 3.0 * pa_yy[j] * pc_yyy[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_y[j] - 9.0 * pa_yy[j] * pc_xxy[j] * fl1_fx - 18.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_x[j] - 2.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 24.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 12.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] - 5.0 * pc_yyy[j] * fl1_fx * pb_xx[j] - 1.5 * fl2_fx * pc_xx[j] * pb_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_x[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] - 6.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 12.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xyy[j] * fl1_fx * pb_xy[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xxy[j] - pa_yyyy[j] * pc_xxy[j] - 8.0 * pa_yyy[j] * pc_xyy[j] * pb_x[j] - 4.0 * pa_yyy[j] * pc_xxy[j] * pb_y[j] - 6.0 * pa_yy[j] * pc_yyy[j] * pb_xx[j] - 12.0 * pa_yy[j] * pc_xyy[j] * pb_xy[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_xxy[j]);

                t_yyyy_xxy[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 6.0 * pa_y[j] * pc_yy[j] * fl2_fx + 5.0 * pc_yyy[j] * fl2_fx + 3.0 * pa_y[j] * fl2_fx * pc_xx[j] + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_xxy[j] * fl2_fx + 7.5 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * pa_yy[j] * pc_yyy[j] * fl1_fx + 9.0 * pa_yy[j] * pc_xxy[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 12.0 * pa_y[j] * pc_xxyy[j] * fl1_fx + 24.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_y[j] + 10.0 * pc_xyyy[j] * fl1_fx * pb_x[j] + 5.0 * pc_yyy[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pc_xx[j] * pb_y[j] + 6.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 6.0 * pc_xyy[j] * fl1_fx * pb_xy[j] + 4.0 * pa_yyy[j] * pc_xxyy[j] + 12.0 * pa_yy[j] * pc_xyyy[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xxyy[j] * pb_y[j] + 4.0 * pa_y[j] * pc_yyyy[j] * pb_xx[j] + 8.0 * pa_y[j] * pc_xyyy[j] * pb_xy[j] + pc_yyyy[j] * pb_xxy[j]);

                t_yyyy_xxy[j] += fl_s_0_0_5 * (-2.5 * pc_yyy[j] * fl2_fx - 3.75 * pc_xxy[j] * fl2_fx - 2.0 * pa_y[j] * pc_yyyy[j] * fl1_fx - 12.0 * pa_y[j] * pc_xxyy[j] * fl1_fx - 0.5 * pc_yyyyy[j] * fl1_fx - 0.5 * pc_yyyy[j] * fl1_fx * pb_y[j] - 5.0 * pc_xxyyy[j] * fl1_fx - 10.0 * pc_xyyy[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 6.0 * pa_yy[j] * pc_xxyyy[j] - 8.0 * pa_y[j] * pc_xyyyy[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xxyyy[j] * pb_y[j] - pc_yyyyy[j] * pb_xx[j] - 2.0 * pc_xyyyy[j] * pb_xy[j]);

                t_yyyy_xxy[j] += fl_s_0_0_6 * (0.5 * pc_yyyyy[j] * fl1_fx + 5.0 * pc_xxyyy[j] * fl1_fx + 4.0 * pa_y[j] * pc_xxyyyy[j] + 2.0 * pc_xyyyyy[j] * pb_x[j] + pc_xxyyyy[j] * pb_y[j]);

                t_yyyy_xxy[j] += -fl_s_0_0_7 * pc_xxyyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_102_103(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (102,103)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_xxz = primBuffer.data(150 * idx + 102);

            // Batch of Integrals (102,103)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_x, pb_xx, pb_xxz, pb_xz, pb_z, pc_x, pc_xx, \
                                     pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyz, pc_xxyyyz, pc_xxyyz, pc_xxyz, \
                                     pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyz, pc_xyyz, pc_xyz, \
                                     pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_xxz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 1.5 * pa_yy[j] * fl2_fx * pb_z[j] + 0.5 * pa_yyyy[j] * fl1_fx * pb_z[j] + 0.75 * fl2_fx * pb_xxz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xxz[j] + pa_yyyy[j] * pb_xxz[j]);

                t_yyyy_xxz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 1.5 * pa_yy[j] * fl2_fx * pc_z[j] - 3.0 * pa_yy[j] * fl2_fx * pb_z[j] - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.5 * pa_yyyy[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_z[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_z[j] - 6.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xxz[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] - pa_yyyy[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_yyyy[j] * pb_xz[j] * pc_x[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_xxz[j]);

                t_yyyy_xxz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 3.0 * pa_yy[j] * fl2_fx * pc_z[j] + 1.5 * pa_yy[j] * fl2_fx * pb_z[j] + 3.0 * pa_y[j] * pc_yz[j] * fl2_fx + 6.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 0.5 * pa_yyyy[j] * fl1_fx * pc_z[j] + 2.0 * pa_yyy[j] * pc_yz[j] * fl1_fx + 2.0 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 1.5 * fl2_fx * pb_x[j] * pc_xz[j] + 0.75 * fl2_fx * pc_xx[j] * pb_z[j] + 1.5 * fl2_fx * pb_xx[j] * pc_z[j] + 3.0 * fl2_fx * pb_xz[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxz[j] + 6.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xz[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_z[j] + 6.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] + 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 12.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_yyyy[j] * pb_x[j] * pc_xz[j] + pa_yyyy[j] * pc_xx[j] * pb_z[j] + 4.0 * pa_yyy[j] * pc_yz[j] * pb_xx[j] + 8.0 * pa_yyy[j] * pc_xy[j] * pb_xz[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xxz[j]);

                t_yyyy_xxz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 1.5 * pa_yy[j] * fl2_fx * pc_z[j] - 6.0 * pa_y[j] * pc_yz[j] * fl2_fx - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_yyz[j] * fl2_fx - 3.0 * pc_yy[j] * fl2_fx * pb_z[j] - 2.0 * pa_yyy[j] * pc_yz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 2.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 0.75 * fl2_fx * pc_xxz[j] - 3.0 * fl2_fx * pb_x[j] * pc_xz[j] - 1.5 * fl2_fx * pc_xx[j] * pb_z[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_x[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xxz[j] - 6.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xz[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] - 12.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 6.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 12.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xyy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xxz[j] - pa_yyyy[j] * pc_xxz[j] - 8.0 * pa_yyy[j] * pc_xyz[j] * pb_x[j] - 4.0 * pa_yyy[j] * pc_xxy[j] * pb_z[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_xx[j] - 12.0 * pa_yy[j] * pc_xyy[j] * pb_xz[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_xxz[j]);

                t_yyyy_xxz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 3.0 * pa_y[j] * pc_yz[j] * fl2_fx + 3.0 * pc_yyz[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_yyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] + 1.5 * fl2_fx * pc_xxz[j] + 1.5 * fl2_fx * pb_x[j] * pc_xz[j] + 0.75 * fl2_fx * pc_xx[j] * pb_z[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xxz[j] + 6.0 * pa_y[j] * pc_xxyz[j] * fl1_fx + 12.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 6.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 6.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xyy[j] * fl1_fx * pb_xz[j] + 4.0 * pa_yyy[j] * pc_xxyz[j] + 12.0 * pa_yy[j] * pc_xyyz[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xxyy[j] * pb_z[j] + 4.0 * pa_y[j] * pc_yyyz[j] * pb_xx[j] + 8.0 * pa_y[j] * pc_xyyy[j] * pb_xz[j] + pc_yyyy[j] * pb_xxz[j]);

                t_yyyy_xxz[j] += fl_s_0_0_5 * (-1.5 * pc_yyz[j] * fl2_fx - 2.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 0.5 * pc_yyyyz[j] * fl1_fx - 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] - 0.75 * fl2_fx * pc_xxz[j] - 6.0 * pa_y[j] * pc_xxyz[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 6.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 6.0 * pa_yy[j] * pc_xxyyz[j] - 8.0 * pa_y[j] * pc_xyyyz[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xxyyy[j] * pb_z[j] - pc_yyyyz[j] * pb_xx[j] - 2.0 * pc_xyyyy[j] * pb_xz[j]);

                t_yyyy_xxz[j] += fl_s_0_0_6 * (0.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 4.0 * pa_y[j] * pc_xxyyyz[j] + 2.0 * pc_xyyyyz[j] * pb_x[j] + pc_xxyyyy[j] * pb_z[j]);

                t_yyyy_xxz[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_103_104(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (103,104)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyy = pcDistances.data(119 * idx + 104);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_xyy = primBuffer.data(150 * idx + 103);

            // Batch of Integrals (103,104)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_x, pb_xy, pb_xyy, pb_y, pb_yy, pc_x, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyy, pc_y, pc_yy, pc_yyy, pc_yyyy, \
                                     pc_yyyyy, pc_yyyyyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yyyy_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_xyy[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_x[j] + 4.5 * pa_yy[j] * fl2_fx * pb_x[j] + 6.0 * pa_y[j] * fl2_fx * pb_xy[j] + 0.5 * pa_yyyy[j] * pb_x[j] * fl1_fx + 4.0 * pa_yyy[j] * fl1_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xyy[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xyy[j] + pa_yyyy[j] * pb_xyy[j]);

                t_yyyy_xyy[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_x[j] - 5.625 * fl3_fx * pb_x[j] - 4.5 * pa_yy[j] * fl2_fx * pc_x[j] - 9.0 * pa_yy[j] * fl2_fx * pb_x[j] - 15.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 6.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 12.0 * pa_y[j] * fl2_fx * pb_xy[j] - 7.5 * pc_y[j] * fl2_fx * pb_xy[j] - 0.5 * pa_yyyy[j] * pb_x[j] * fl1_fx - 0.5 * pa_yyyy[j] * pc_x[j] * fl1_fx - 6.0 * pa_yyy[j] * pc_y[j] * pb_x[j] * fl1_fx - 4.0 * pa_yyy[j] * fl1_fx * pc_x[j] * pb_y[j] - 4.0 * pa_yyy[j] * fl1_fx * pb_xy[j] - 18.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xy[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 1.5 * fl2_fx * pb_xyy[j] - 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xyy[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_yyyy[j] * pb_xy[j] * pc_y[j] - pa_yyyy[j] * pc_x[j] * pb_yy[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_xyy[j]);

                t_yyyy_xyy[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_x[j] + 5.625 * fl3_fx * pb_x[j] + 9.0 * pa_yy[j] * fl2_fx * pc_x[j] + 4.5 * pa_yy[j] * fl2_fx * pb_x[j] + 15.0 * pa_y[j] * pc_xy[j] * fl2_fx + 30.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 11.25 * pc_yy[j] * fl2_fx * pb_x[j] + 12.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 6.0 * pa_y[j] * fl2_fx * pb_xy[j] + 7.5 * pc_xy[j] * fl2_fx * pb_y[j] + 15.0 * pc_y[j] * fl2_fx * pb_xy[j] + 0.5 * pa_yyyy[j] * pc_x[j] * fl1_fx + 6.0 * pa_yyy[j] * pc_y[j] * pb_x[j] * fl1_fx + 6.0 * pa_yyy[j] * pc_xy[j] * fl1_fx + 4.0 * pa_yyy[j] * fl1_fx * pc_x[j] * pb_y[j] + 18.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 18.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 18.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xy[j] + 24.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] + 1.5 * fl2_fx * pc_x[j] * pb_yy[j] + 0.75 * fl2_fx * pb_xyy[j] + 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] + 6.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xyy[j] + pa_yyyy[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_yyyy[j] * pc_xy[j] * pb_y[j] + 8.0 * pa_yyy[j] * pc_yy[j] * pb_xy[j] + 4.0 * pa_yyy[j] * pc_xy[j] * pb_yy[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xyy[j]);

                t_yyyy_xyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_x[j] - 1.875 * fl3_fx * pb_x[j] - 4.5 * pa_yy[j] * fl2_fx * pc_x[j] - 30.0 * pa_y[j] * pc_xy[j] * fl2_fx - 15.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 11.25 * pc_xyy[j] * fl2_fx - 22.5 * pc_yy[j] * fl2_fx * pb_x[j] - 6.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 15.0 * pc_xy[j] * fl2_fx * pb_y[j] - 7.5 * pc_y[j] * fl2_fx * pb_xy[j] - 6.0 * pa_yyy[j] * pc_xy[j] * fl1_fx - 18.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 18.0 * pa_yy[j] * pc_xyy[j] * fl1_fx - 18.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 20.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 24.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 24.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] - 10.0 * pc_yyy[j] * fl1_fx * pb_xy[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 6.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xyy[j] - pa_yyyy[j] * pc_xyy[j] - 4.0 * pa_yyy[j] * pc_yyy[j] * pb_x[j] - 8.0 * pa_yyy[j] * pc_xyy[j] * pb_y[j] - 12.0 * pa_yy[j] * pc_yyy[j] * pb_xy[j] - 6.0 * pa_yy[j] * pc_xyy[j] * pb_yy[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_xyy[j]);

                t_yyyy_xyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_x[j] + 15.0 * pa_y[j] * pc_xy[j] * fl2_fx + 22.5 * pc_xyy[j] * fl2_fx + 11.25 * pc_yy[j] * fl2_fx * pb_x[j] + 7.5 * pc_xy[j] * fl2_fx * pb_y[j] + 18.0 * pa_yy[j] * pc_xyy[j] * fl1_fx + 20.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 20.0 * pa_y[j] * pc_xyyy[j] * fl1_fx + 24.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 7.5 * pc_yyyy[j] * pb_x[j] * fl1_fx + 10.0 * pc_xyyy[j] * fl1_fx * pb_y[j] + 10.0 * pc_yyy[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_yy[j] + 4.0 * pa_yyy[j] * pc_xyyy[j] + 6.0 * pa_yy[j] * pc_yyyy[j] * pb_x[j] + 12.0 * pa_yy[j] * pc_xyyy[j] * pb_y[j] + 8.0 * pa_y[j] * pc_yyyy[j] * pb_xy[j] + 4.0 * pa_y[j] * pc_xyyy[j] * pb_yy[j] + pc_yyyy[j] * pb_xyy[j]);

                t_yyyy_xyy[j] += fl_s_0_0_5 * (-11.25 * pc_xyy[j] * fl2_fx - 20.0 * pa_y[j] * pc_xyyy[j] * fl1_fx - 7.5 * pc_yyyy[j] * pb_x[j] * fl1_fx - 7.5 * pc_xyyyy[j] * fl1_fx - 10.0 * pc_xyyy[j] * fl1_fx * pb_y[j] - 6.0 * pa_yy[j] * pc_xyyyy[j] - 4.0 * pa_y[j] * pc_yyyyy[j] * pb_x[j] - 8.0 * pa_y[j] * pc_xyyyy[j] * pb_y[j] - 2.0 * pc_yyyyy[j] * pb_xy[j] - pc_xyyyy[j] * pb_yy[j]);

                t_yyyy_xyy[j] += fl_s_0_0_6 * (7.5 * pc_xyyyy[j] * fl1_fx + 4.0 * pa_y[j] * pc_xyyyyy[j] + pc_yyyyyy[j] * pb_x[j] + 2.0 * pc_xyyyyy[j] * pb_y[j]);

                t_yyyy_xyy[j] += -fl_s_0_0_7 * pc_xyyyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_104_105(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (104,105)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_xyz = primBuffer.data(150 * idx + 104);

            // Batch of Integrals (104,105)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_x, pb_xy, pb_xyz, pb_xz, pb_y, pb_yz, pb_z, \
                                     pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyz, pc_xyyyyz, \
                                     pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, \
                                     pc_yyyyz, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yyyy_xyz[j] = fl_s_0_0_0 * (3.0 * pa_y[j] * fl2_fx * pb_xz[j] + 2.0 * pa_yyy[j] * fl1_fx * pb_xz[j] + 0.75 * fl2_fx * pb_xyz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xyz[j] + pa_yyyy[j] * pb_xyz[j]);

                t_yyyy_xyz[j] += fl_s_0_0_1 * (-3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 3.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 6.0 * pa_y[j] * fl2_fx * pb_xz[j] - 3.75 * pc_y[j] * fl2_fx * pb_xz[j] - 2.0 * pa_yyy[j] * fl1_fx * pb_x[j] * pc_z[j] - 2.0 * pa_yyy[j] * fl1_fx * pc_x[j] * pb_z[j] - 2.0 * pa_yyy[j] * fl1_fx * pb_xz[j] - 9.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xz[j] - 0.75 * fl2_fx * pb_xy[j] * pc_z[j] - 0.75 * fl2_fx * pc_x[j] * pb_yz[j] - 1.5 * fl2_fx * pb_xyz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xyz[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] - pa_yyyy[j] * pb_xy[j] * pc_z[j] - pa_yyyy[j] * pb_xz[j] * pc_y[j] - pa_yyyy[j] * pc_x[j] * pb_yz[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_xyz[j]);

                t_yyyy_xyz[j] += fl_s_0_0_2 * (3.0 * pa_y[j] * fl2_fx * pc_xz[j] + 6.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] + 6.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 3.0 * pa_y[j] * fl2_fx * pb_xz[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 7.5 * pc_y[j] * fl2_fx * pb_xz[j] + 2.0 * pa_yyy[j] * fl1_fx * pc_xz[j] + 2.0 * pa_yyy[j] * fl1_fx * pb_x[j] * pc_z[j] + 2.0 * pa_yyy[j] * fl1_fx * pc_x[j] * pb_z[j] + 9.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_x[j] + 9.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 9.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xz[j] + 12.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + 1.5 * fl2_fx * pb_xy[j] * pc_z[j] + 1.5 * fl2_fx * pc_x[j] * pb_yz[j] + 0.75 * fl2_fx * pb_xyz[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_y[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_z[j] + 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] + 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 6.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xyz[j] + pa_yyyy[j] * pb_x[j] * pc_yz[j] + pa_yyyy[j] * pc_xz[j] * pb_y[j] + pa_yyyy[j] * pc_xy[j] * pb_z[j] + 4.0 * pa_yyy[j] * pc_yz[j] * pb_xy[j] + 4.0 * pa_yyy[j] * pc_yy[j] * pb_xz[j] + 4.0 * pa_yyy[j] * pc_xy[j] * pb_yz[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xyz[j]);

                t_yyyy_xyz[j] += fl_s_0_0_3 * (-6.0 * pa_y[j] * fl2_fx * pc_xz[j] - 3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 3.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.75 * pc_y[j] * fl2_fx * pb_xz[j] - 2.0 * pa_yyy[j] * fl1_fx * pc_xz[j] - 9.0 * pa_yy[j] * pc_xyz[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_x[j] - 9.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 12.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 12.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 12.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] - 5.0 * pc_yyy[j] * fl1_fx * pb_xz[j] - 1.5 * fl2_fx * pc_xz[j] * pb_y[j] - 0.75 * fl2_fx * pb_xy[j] * pc_z[j] - 0.75 * fl2_fx * pc_x[j] * pb_yz[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_y[j] - 6.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 6.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xyz[j] - pa_yyyy[j] * pc_xyz[j] - 4.0 * pa_yyy[j] * pc_yyz[j] * pb_x[j] - 4.0 * pa_yyy[j] * pc_xyz[j] * pb_y[j] - 4.0 * pa_yyy[j] * pc_xyy[j] * pb_z[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_xy[j] - 6.0 * pa_yy[j] * pc_yyy[j] * pb_xz[j] - 6.0 * pa_yy[j] * pc_xyy[j] * pb_yz[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_xyz[j]);

                t_yyyy_xyz[j] += fl_s_0_0_4 * (3.0 * pa_y[j] * fl2_fx * pc_xz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 9.0 * pa_yy[j] * pc_xyz[j] * fl1_fx + 12.0 * pa_y[j] * pc_xyyz[j] * fl1_fx + 12.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 12.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 5.0 * pc_yyyz[j] * fl1_fx * pb_x[j] + 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] + 5.0 * pc_yyy[j] * fl1_fx * pb_xz[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + 6.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_yz[j] + 4.0 * pa_yyy[j] * pc_xyyz[j] + 6.0 * pa_yy[j] * pc_yyyz[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xyyz[j] * pb_y[j] + 6.0 * pa_yy[j] * pc_xyyy[j] * pb_z[j] + 4.0 * pa_y[j] * pc_yyyz[j] * pb_xy[j] + 4.0 * pa_y[j] * pc_yyyy[j] * pb_xz[j] + 4.0 * pa_y[j] * pc_xyyy[j] * pb_yz[j] + pc_yyyy[j] * pb_xyz[j]);

                t_yyyy_xyz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 12.0 * pa_y[j] * pc_xyyz[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - 5.0 * pc_yyyz[j] * fl1_fx * pb_x[j] - 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 6.0 * pa_yy[j] * pc_xyyyz[j] - 4.0 * pa_y[j] * pc_yyyyz[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xyyyz[j] * pb_y[j] - 4.0 * pa_y[j] * pc_xyyyy[j] * pb_z[j] - pc_yyyyz[j] * pb_xy[j] - pc_yyyyy[j] * pb_xz[j] - pc_xyyyy[j] * pb_yz[j]);

                t_yyyy_xyz[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + 4.0 * pa_y[j] * pc_xyyyyz[j] + pc_yyyyyz[j] * pb_x[j] + pc_xyyyyz[j] * pb_y[j] + pc_xyyyyy[j] * pb_z[j]);

                t_yyyy_xyz[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_105_106(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (105,106)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_xzz = primBuffer.data(150 * idx + 105);

            // Batch of Integrals (105,106)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_x, pb_xz, pb_xzz, pb_z, pb_zz, pc_x, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyyzz, pc_xyyyz, pc_xyyyzz, pc_xyyz, \
                                     pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, \
                                     pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_xzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 1.5 * pa_yy[j] * fl2_fx * pb_x[j] + 0.5 * pa_yyyy[j] * pb_x[j] * fl1_fx + 0.75 * fl2_fx * pb_xzz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xzz[j] + pa_yyyy[j] * pb_xzz[j]);

                t_yyyy_xzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 3.0 * pa_yy[j] * fl2_fx * pb_x[j] - 1.5 * pa_yy[j] * fl2_fx * pc_x[j] - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * pa_yyyy[j] * pb_x[j] * fl1_fx - 0.5 * pa_yyyy[j] * pc_x[j] * fl1_fx - 2.0 * pa_yyy[j] * pc_y[j] * pb_x[j] * fl1_fx - 1.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 1.5 * fl2_fx * pb_xzz[j] - 6.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xzz[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_yyyy[j] * pb_xz[j] * pc_z[j] - pa_yyyy[j] * pc_x[j] * pb_zz[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_xzz[j]);

                t_yyyy_xzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 3.0 * pa_yy[j] * fl2_fx * pc_x[j] + 1.5 * pa_yy[j] * fl2_fx * pb_x[j] + 6.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 3.0 * pa_y[j] * pc_xy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 0.5 * pa_yyyy[j] * pc_x[j] * fl1_fx + 2.0 * pa_yyy[j] * pc_y[j] * pb_x[j] * fl1_fx + 2.0 * pa_yyy[j] * pc_xy[j] * fl1_fx + 3.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 0.75 * fl2_fx * pb_x[j] * pc_zz[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * fl2_fx * pb_xz[j] * pc_z[j] + 1.5 * fl2_fx * pc_x[j] * pb_zz[j] + 0.75 * fl2_fx * pb_xzz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_zz[j] + 6.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_z[j] + 6.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_z[j] + 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] + 12.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 6.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xzz[j] + pa_yyyy[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_yyyy[j] * pc_xz[j] * pb_z[j] + 8.0 * pa_yyy[j] * pc_yz[j] * pb_xz[j] + 4.0 * pa_yyy[j] * pc_xy[j] * pb_zz[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xzz[j]);

                t_yyyy_xzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 1.5 * pa_yy[j] * fl2_fx * pc_x[j] - 6.0 * pa_y[j] * pc_xy[j] * fl2_fx - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 3.0 * pc_yy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xyy[j] * fl2_fx - 2.0 * pa_yyy[j] * pc_xy[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xyy[j] * fl1_fx - 2.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 0.75 * fl2_fx * pc_xzz[j] - 1.5 * fl2_fx * pb_x[j] * pc_zz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xzz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_zz[j] - 6.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_z[j] - 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 12.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 12.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 6.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 6.0 * pc_yyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xzz[j] - pa_yyyy[j] * pc_xzz[j] - 4.0 * pa_yyy[j] * pc_yzz[j] * pb_x[j] - 8.0 * pa_yyy[j] * pc_xyz[j] * pb_z[j] - 12.0 * pa_yy[j] * pc_yyz[j] * pb_xz[j] - 6.0 * pa_yy[j] * pc_xyy[j] * pb_zz[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_xzz[j]);

                t_yyyy_xzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 3.0 * pa_y[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 3.0 * pa_yy[j] * pc_xyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyyy[j] * fl1_fx + 0.5 * pc_yyyy[j] * pb_x[j] * fl1_fx + 1.5 * fl2_fx * pc_xzz[j] + 0.75 * fl2_fx * pb_x[j] * pc_zz[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xzz[j] + 6.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 12.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yyz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] + 4.0 * pa_yyy[j] * pc_xyzz[j] + 6.0 * pa_yy[j] * pc_yyzz[j] * pb_x[j] + 12.0 * pa_yy[j] * pc_xyyz[j] * pb_z[j] + 8.0 * pa_y[j] * pc_yyyz[j] * pb_xz[j] + 4.0 * pa_y[j] * pc_xyyy[j] * pb_zz[j] + pc_yyyy[j] * pb_xzz[j]);

                t_yyyy_xzz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 2.0 * pa_y[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_yyyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xyyyy[j] * fl1_fx - 0.75 * fl2_fx * pc_xzz[j] - 6.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] - 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_yy[j] * pc_xyyzz[j] - 4.0 * pa_y[j] * pc_yyyzz[j] * pb_x[j] - 8.0 * pa_y[j] * pc_xyyyz[j] * pb_z[j] - 2.0 * pc_yyyyz[j] * pb_xz[j] - pc_xyyyy[j] * pb_zz[j]);

                t_yyyy_xzz[j] += fl_s_0_0_6 * (0.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + 4.0 * pa_y[j] * pc_xyyyzz[j] + pc_yyyyzz[j] * pb_x[j] + 2.0 * pc_xyyyyz[j] * pb_z[j]);

                t_yyyy_xzz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_106_107(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (106,107)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyyyy = pcDistances.data(119 * idx + 111);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_yyy = primBuffer.data(150 * idx + 106);

            // Batch of Integrals (106,107)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_y, pb_yy, pb_yyy, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyy, pc_yyyyy, pc_yyyyyy, pc_yyyyyyy, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_yyy[j] = fl_s_0_0_0 * (7.5 * pa_y[j] * fl3_fx + 5.625 * fl3_fx * pb_y[j] + 3.0 * pa_yyy[j] * fl2_fx + 13.5 * pa_yy[j] * fl2_fx * pb_y[j] + 9.0 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * pa_yyyy[j] * pb_y[j] * fl1_fx + 6.0 * pa_yyy[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pb_yyy[j] + 3.0 * pa_yy[j] * fl1_fx * pb_yyy[j] + pa_yyyy[j] * pb_yyy[j]);

                t_yyyy_yyy[j] += fl_s_0_0_1 * (-22.5 * pa_y[j] * fl3_fx - 13.125 * pc_y[j] * fl3_fx - 16.875 * fl3_fx * pb_y[j] - 6.0 * pa_yyy[j] * fl2_fx - 22.5 * pa_yy[j] * pc_y[j] * fl2_fx - 27.0 * pa_yy[j] * fl2_fx * pb_y[j] - 45.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 18.0 * pa_y[j] * fl2_fx * pb_yy[j] - 11.25 * pc_y[j] * fl2_fx * pb_yy[j] - 1.5 * pa_yyyy[j] * pb_y[j] * fl1_fx - 1.5 * pa_yyyy[j] * pc_y[j] * fl1_fx - 18.0 * pa_yyy[j] * pc_y[j] * pb_y[j] * fl1_fx - 6.0 * pa_yyy[j] * fl1_fx * pb_yy[j] - 27.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yy[j] - 1.5 * fl2_fx * pb_yyy[j] - 3.0 * pa_yy[j] * fl1_fx * pb_yyy[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_yyyy[j] * pb_yy[j] * pc_y[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_yyy[j]);

                t_yyyy_yyy[j] += fl_s_0_0_2 * (22.5 * pa_y[j] * fl3_fx + 39.375 * pc_y[j] * fl3_fx + 16.875 * fl3_fx * pb_y[j] + 3.0 * pa_yyy[j] * fl2_fx + 45.0 * pa_yy[j] * pc_y[j] * fl2_fx + 13.5 * pa_yy[j] * fl2_fx * pb_y[j] + 45.0 * pa_y[j] * pc_yy[j] * fl2_fx + 90.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 33.75 * pc_yy[j] * fl2_fx * pb_y[j] + 9.0 * pa_y[j] * fl2_fx * pb_yy[j] + 22.5 * pc_y[j] * fl2_fx * pb_yy[j] + 1.5 * pa_yyyy[j] * pc_y[j] * fl1_fx + 18.0 * pa_yyy[j] * pc_y[j] * pb_y[j] * fl1_fx + 12.0 * pa_yyy[j] * pc_yy[j] * fl1_fx + 54.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 27.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yy[j] + 36.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pb_yyy[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 3.0 * pc_yy[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_yyyy[j] * pb_y[j] * pc_yy[j] + 12.0 * pa_yyy[j] * pc_yy[j] * pb_yy[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_yyy[j]);

                t_yyyy_yyy[j] += fl_s_0_0_3 * (-7.5 * pa_y[j] * fl3_fx - 39.375 * pc_y[j] * fl3_fx - 5.625 * fl3_fx * pb_y[j] - 22.5 * pa_yy[j] * pc_y[j] * fl2_fx - 90.0 * pa_y[j] * pc_yy[j] * fl2_fx - 45.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 26.25 * pc_yyy[j] * fl2_fx - 67.5 * pc_yy[j] * fl2_fx * pb_y[j] - 11.25 * pc_y[j] * fl2_fx * pb_yy[j] - 12.0 * pa_yyy[j] * pc_yy[j] * fl1_fx - 54.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx - 30.0 * pa_yy[j] * pc_yyy[j] * fl1_fx - 60.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 36.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 15.0 * pc_yyy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yy[j] * fl1_fx * pb_yyy[j] - pa_yyyy[j] * pc_yyy[j] - 12.0 * pa_yyy[j] * pc_yyy[j] * pb_y[j] - 18.0 * pa_yy[j] * pc_yyy[j] * pb_yy[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_yyy[j]);

                t_yyyy_yyy[j] += fl_s_0_0_4 * (13.125 * pc_y[j] * fl3_fx + 45.0 * pa_y[j] * pc_yy[j] * fl2_fx + 52.5 * pc_yyy[j] * fl2_fx + 33.75 * pc_yy[j] * fl2_fx * pb_y[j] + 30.0 * pa_yy[j] * pc_yyy[j] * fl1_fx + 60.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 30.0 * pa_y[j] * pc_yyyy[j] * fl1_fx + 22.5 * pc_yyyy[j] * pb_y[j] * fl1_fx + 15.0 * pc_yyy[j] * fl1_fx * pb_yy[j] + 4.0 * pa_yyy[j] * pc_yyyy[j] + 18.0 * pa_yy[j] * pc_yyyy[j] * pb_y[j] + 12.0 * pa_y[j] * pc_yyyy[j] * pb_yy[j] + pc_yyyy[j] * pb_yyy[j]);

                t_yyyy_yyy[j] += fl_s_0_0_5 * (-26.25 * pc_yyy[j] * fl2_fx - 30.0 * pa_y[j] * pc_yyyy[j] * fl1_fx - 22.5 * pc_yyyy[j] * pb_y[j] * fl1_fx - 10.5 * pc_yyyyy[j] * fl1_fx - 6.0 * pa_yy[j] * pc_yyyyy[j] - 12.0 * pa_y[j] * pc_yyyyy[j] * pb_y[j] - 3.0 * pc_yyyyy[j] * pb_yy[j]);

                t_yyyy_yyy[j] += fl_s_0_0_6 * (10.5 * pc_yyyyy[j] * fl1_fx + 4.0 * pa_y[j] * pc_yyyyyy[j] + 3.0 * pc_yyyyyy[j] * pb_y[j]);

                t_yyyy_yyy[j] += -fl_s_0_0_7 * pc_yyyyyyy[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_107_108(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (107,108)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyyyz = pcDistances.data(119 * idx + 112);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_yyz = primBuffer.data(150 * idx + 107);

            // Batch of Integrals (107,108)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_y, pb_yy, pb_yyz, pb_yz, pb_z, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyy, pc_yyyyyyz, pc_yyyyyz, pc_yyyyz, pc_yyyz, \
                                     pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yyyy_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_yyz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_z[j] + 4.5 * pa_yy[j] * fl2_fx * pb_z[j] + 6.0 * pa_y[j] * fl2_fx * pb_yz[j] + 0.5 * pa_yyyy[j] * fl1_fx * pb_z[j] + 4.0 * pa_yyy[j] * fl1_fx * pb_yz[j] + 0.75 * fl2_fx * pb_yyz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_yyz[j] + pa_yyyy[j] * pb_yyz[j]);

                t_yyyy_yyz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_z[j] - 5.625 * fl3_fx * pb_z[j] - 4.5 * pa_yy[j] * fl2_fx * pc_z[j] - 9.0 * pa_yy[j] * fl2_fx * pb_z[j] - 15.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 6.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 12.0 * pa_y[j] * fl2_fx * pb_yz[j] - 7.5 * pc_y[j] * fl2_fx * pb_yz[j] - 0.5 * pa_yyyy[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyyy[j] * fl1_fx * pb_z[j] - 6.0 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_z[j] - 4.0 * pa_yyy[j] * fl1_fx * pb_y[j] * pc_z[j] - 4.0 * pa_yyy[j] * fl1_fx * pb_yz[j] - 18.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yz[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * fl2_fx * pb_yyz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pb_yyz[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] - pa_yyyy[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_yyyy[j] * pb_yz[j] * pc_y[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_yyz[j]);

                t_yyyy_yyz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pb_z[j] + 9.0 * pa_yy[j] * fl2_fx * pc_z[j] + 4.5 * pa_yy[j] * fl2_fx * pb_z[j] + 15.0 * pa_y[j] * pc_yz[j] * fl2_fx + 30.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 11.25 * pc_yy[j] * fl2_fx * pb_z[j] + 12.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] + 6.0 * pa_y[j] * fl2_fx * pb_yz[j] + 7.5 * pc_yz[j] * fl2_fx * pb_y[j] + 15.0 * pc_y[j] * fl2_fx * pb_yz[j] + 0.5 * pa_yyyy[j] * fl1_fx * pc_z[j] + 6.0 * pa_yyy[j] * pc_yz[j] * fl1_fx + 6.0 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_z[j] + 4.0 * pa_yyy[j] * fl1_fx * pb_y[j] * pc_z[j] + 18.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 18.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 18.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yz[j] + 24.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 1.5 * fl2_fx * pb_yy[j] * pc_z[j] + 0.75 * fl2_fx * pb_yyz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_z[j] + 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_yyyy[j] * pb_y[j] * pc_yz[j] + pa_yyyy[j] * pc_yy[j] * pb_z[j] + 4.0 * pa_yyy[j] * pc_yz[j] * pb_yy[j] + 8.0 * pa_yyy[j] * pc_yy[j] * pb_yz[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_yyz[j]);

                t_yyyy_yyz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pb_z[j] - 4.5 * pa_yy[j] * fl2_fx * pc_z[j] - 30.0 * pa_y[j] * pc_yz[j] * fl2_fx - 15.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 11.25 * pc_yyz[j] * fl2_fx - 22.5 * pc_yy[j] * fl2_fx * pb_z[j] - 6.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 15.0 * pc_yz[j] * fl2_fx * pb_y[j] - 7.5 * pc_y[j] * fl2_fx * pb_yz[j] - 6.0 * pa_yyy[j] * pc_yz[j] * fl1_fx - 18.0 * pa_yy[j] * pc_yyz[j] * fl1_fx - 18.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 18.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 20.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 24.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 24.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 10.0 * pc_yyy[j] * fl1_fx * pb_yz[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yy[j] * fl1_fx * pb_yyz[j] - pa_yyyy[j] * pc_yyz[j] - 8.0 * pa_yyy[j] * pc_yyz[j] * pb_y[j] - 4.0 * pa_yyy[j] * pc_yyy[j] * pb_z[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_yy[j] - 12.0 * pa_yy[j] * pc_yyy[j] * pb_yz[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_yyz[j]);

                t_yyyy_yyz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 15.0 * pa_y[j] * pc_yz[j] * fl2_fx + 22.5 * pc_yyz[j] * fl2_fx + 11.25 * pc_yy[j] * fl2_fx * pb_z[j] + 7.5 * pc_yz[j] * fl2_fx * pb_y[j] + 18.0 * pa_yy[j] * pc_yyz[j] * fl1_fx + 20.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 20.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 24.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 7.5 * pc_yyyy[j] * fl1_fx * pb_z[j] + 10.0 * pc_yyyz[j] * fl1_fx * pb_y[j] + 10.0 * pc_yyy[j] * fl1_fx * pb_yz[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_yy[j] + 4.0 * pa_yyy[j] * pc_yyyz[j] + 12.0 * pa_yy[j] * pc_yyyz[j] * pb_y[j] + 6.0 * pa_yy[j] * pc_yyyy[j] * pb_z[j] + 4.0 * pa_y[j] * pc_yyyz[j] * pb_yy[j] + 8.0 * pa_y[j] * pc_yyyy[j] * pb_yz[j] + pc_yyyy[j] * pb_yyz[j]);

                t_yyyy_yyz[j] += fl_s_0_0_5 * (-11.25 * pc_yyz[j] * fl2_fx - 20.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 7.5 * pc_yyyyz[j] * fl1_fx - 7.5 * pc_yyyy[j] * fl1_fx * pb_z[j] - 10.0 * pc_yyyz[j] * fl1_fx * pb_y[j] - 6.0 * pa_yy[j] * pc_yyyyz[j] - 8.0 * pa_y[j] * pc_yyyyz[j] * pb_y[j] - 4.0 * pa_y[j] * pc_yyyyy[j] * pb_z[j] - pc_yyyyz[j] * pb_yy[j] - 2.0 * pc_yyyyy[j] * pb_yz[j]);

                t_yyyy_yyz[j] += fl_s_0_0_6 * (7.5 * pc_yyyyz[j] * fl1_fx + 4.0 * pa_y[j] * pc_yyyyyz[j] + 2.0 * pc_yyyyyz[j] * pb_y[j] + pc_yyyyyy[j] * pb_z[j]);

                t_yyyy_yyz[j] += -fl_s_0_0_7 * pc_yyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_108_109(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (108,109)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyyzz = pcDistances.data(119 * idx + 113);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_yzz = primBuffer.data(150 * idx + 108);

            // Batch of Integrals (108,109)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_y, pb_yz, pb_yzz, pb_z, pb_zz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, pc_yyyyyzz, pc_yyyyz, pc_yyyyzz, pc_yyyz, \
                                     pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_yzz[j] = fl_s_0_0_0 * (1.5 * pa_y[j] * fl3_fx + pa_yyy[j] * fl2_fx + 0.375 * fl3_fx * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 3.0 * pa_y[j] * fl2_fx * pb_zz[j] + 0.5 * pa_yyyy[j] * pb_y[j] * fl1_fx + 2.0 * pa_yyy[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_yzz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_yzz[j] + pa_yyyy[j] * pb_yzz[j]);

                t_yyyy_yzz[j] += fl_s_0_0_1 * (-4.5 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 2.0 * pa_yyy[j] * fl2_fx - 4.5 * pa_yy[j] * pc_y[j] * fl2_fx - 1.125 * fl3_fx * pb_y[j] - 3.0 * pa_yy[j] * fl2_fx * pb_y[j] - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 6.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 6.0 * pa_y[j] * fl2_fx * pb_zz[j] - 3.75 * pc_y[j] * fl2_fx * pb_zz[j] - 0.5 * pa_yyyy[j] * pb_y[j] * fl1_fx - 0.5 * pa_yyyy[j] * pc_y[j] * fl1_fx - 2.0 * pa_yyy[j] * pc_y[j] * pb_y[j] * fl1_fx - 4.0 * pa_yyy[j] * fl1_fx * pb_z[j] * pc_z[j] - 2.0 * pa_yyy[j] * fl1_fx * pb_zz[j] - 9.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 1.5 * fl2_fx * pb_yz[j] * pc_z[j] - 1.5 * fl2_fx * pb_yzz[j] - 6.0 * pa_yy[j] * fl1_fx * pb_yz[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pb_yzz[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_yyyy[j] * pb_yz[j] * pc_z[j] - pa_yyyy[j] * pc_y[j] * pb_zz[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_yzz[j]);

                t_yyyy_yzz[j] += fl_s_0_0_2 * (4.5 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + pa_yyy[j] * fl2_fx + 9.0 * pa_yy[j] * pc_y[j] * fl2_fx + 6.0 * pa_y[j] * pc_yy[j] * fl2_fx + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 6.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 3.0 * pa_y[j] * fl2_fx * pc_zz[j] + 12.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] + 3.0 * pa_y[j] * fl2_fx * pb_zz[j] + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_yz[j] * fl2_fx * pb_z[j] + 7.5 * pc_y[j] * fl2_fx * pb_zz[j] + 0.5 * pa_yyyy[j] * pc_y[j] * fl1_fx + 2.0 * pa_yyy[j] * pc_y[j] * pb_y[j] * fl1_fx + 2.0 * pa_yyy[j] * pc_yy[j] * fl1_fx + 2.0 * pa_yyy[j] * fl1_fx * pc_zz[j] + 4.0 * pa_yyy[j] * fl1_fx * pb_z[j] * pc_z[j] + 3.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 18.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 9.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 12.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_y[j] * pc_zz[j] + 3.0 * fl2_fx * pb_yz[j] * pc_z[j] + 0.75 * fl2_fx * pb_yzz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_y[j] * pc_zz[j] + 6.0 * pa_yy[j] * fl1_fx * pb_yz[j] * pc_z[j] + 12.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_yzz[j] + pa_yyyy[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_yyyy[j] * pc_yz[j] * pb_z[j] + 8.0 * pa_yyy[j] * pc_yz[j] * pb_yz[j] + 4.0 * pa_yyy[j] * pc_yy[j] * pb_zz[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_yzz[j]);

                t_yyyy_yzz[j] += fl_s_0_0_3 * (-1.5 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 4.5 * pa_yy[j] * pc_y[j] * fl2_fx - 12.0 * pa_y[j] * pc_yy[j] * fl2_fx - 2.5 * pc_yyy[j] * fl2_fx - 0.375 * fl3_fx * pb_y[j] - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 6.0 * pa_y[j] * fl2_fx * pc_zz[j] - 6.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 3.0 * pc_yy[j] * fl2_fx * pb_y[j] - 3.75 * pc_yzz[j] * fl2_fx - 15.0 * pc_yz[j] * fl2_fx * pb_z[j] - 3.75 * pc_y[j] * fl2_fx * pb_zz[j] - 2.0 * pa_yyy[j] * pc_yy[j] * fl1_fx - 2.0 * pa_yyy[j] * fl1_fx * pc_zz[j] - 3.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yyy[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yzz[j] * fl1_fx - 18.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 2.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 24.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 12.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 5.0 * pc_yyy[j] * fl1_fx * pb_zz[j] - 1.5 * fl2_fx * pb_y[j] * pc_zz[j] - 1.5 * fl2_fx * pb_yz[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pb_y[j] * pc_zz[j] - 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 12.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_yzz[j] - pa_yyyy[j] * pc_yzz[j] - 4.0 * pa_yyy[j] * pc_yzz[j] * pb_y[j] - 8.0 * pa_yyy[j] * pc_yyz[j] * pb_z[j] - 12.0 * pa_yy[j] * pc_yyz[j] * pb_yz[j] - 6.0 * pa_yy[j] * pc_yyy[j] * pb_zz[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_yzz[j]);

                t_yyyy_yzz[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 6.0 * pa_y[j] * pc_yy[j] * fl2_fx + 5.0 * pc_yyy[j] * fl2_fx + 3.0 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_yzz[j] * fl2_fx + 7.5 * pc_yz[j] * fl2_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_yyy[j] * fl1_fx + 9.0 * pa_yy[j] * pc_yzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyy[j] * fl1_fx + 12.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 24.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyyy[j] * pb_y[j] * fl1_fx + 10.0 * pc_yyyz[j] * fl1_fx * pb_z[j] + 5.0 * pc_yyy[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_y[j] * pc_zz[j] + 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_yyz[j] * fl1_fx * pb_yz[j] + 4.0 * pa_yyy[j] * pc_yyzz[j] + 6.0 * pa_yy[j] * pc_yyzz[j] * pb_y[j] + 12.0 * pa_yy[j] * pc_yyyz[j] * pb_z[j] + 8.0 * pa_y[j] * pc_yyyz[j] * pb_yz[j] + 4.0 * pa_y[j] * pc_yyyy[j] * pb_zz[j] + pc_yyyy[j] * pb_yzz[j]);

                t_yyyy_yzz[j] += fl_s_0_0_5 * (-2.5 * pc_yyy[j] * fl2_fx - 3.75 * pc_yzz[j] * fl2_fx - 2.0 * pa_y[j] * pc_yyyy[j] * fl1_fx - 12.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 0.5 * pc_yyyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_yyyyy[j] * fl1_fx - 5.0 * pc_yyyzz[j] * fl1_fx - 10.0 * pc_yyyz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yyzz[j] * fl1_fx * pb_y[j] - 6.0 * pa_yy[j] * pc_yyyzz[j] - 4.0 * pa_y[j] * pc_yyyzz[j] * pb_y[j] - 8.0 * pa_y[j] * pc_yyyyz[j] * pb_z[j] - 2.0 * pc_yyyyz[j] * pb_yz[j] - pc_yyyyy[j] * pb_zz[j]);

                t_yyyy_yzz[j] += fl_s_0_0_6 * (0.5 * pc_yyyyy[j] * fl1_fx + 5.0 * pc_yyyzz[j] * fl1_fx + 4.0 * pa_y[j] * pc_yyyyzz[j] + pc_yyyyzz[j] * pb_y[j] + 2.0 * pc_yyyyyz[j] * pb_z[j]);

                t_yyyy_yzz[j] += -fl_s_0_0_7 * pc_yyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_109_110(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (109,110)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyy = paDistances.data(34 * idx + 29);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyy_zzz = primBuffer.data(150 * idx + 109);

            // Batch of Integrals (109,110)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyy, pb_z, pb_zz, pb_zzz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyyzzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyy_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyy_zzz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_z[j] + 4.5 * pa_yy[j] * fl2_fx * pb_z[j] + 1.5 * pa_yyyy[j] * pb_z[j] * fl1_fx + 0.75 * fl2_fx * pb_zzz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_zzz[j] + pa_yyyy[j] * pb_zzz[j]);

                t_yyyy_zzz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_z[j] - 1.125 * fl3_fx * pc_z[j] - 9.0 * pa_yy[j] * fl2_fx * pb_z[j] - 4.5 * pa_yy[j] * fl2_fx * pc_z[j] - 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pa_yyyy[j] * pb_z[j] * fl1_fx - 1.5 * pa_yyyy[j] * pc_z[j] * fl1_fx - 6.0 * pa_yyy[j] * pc_y[j] * pb_z[j] * fl1_fx - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * fl2_fx * pb_zzz[j] - 9.0 * pa_yy[j] * fl1_fx * pb_zz[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pb_zzz[j] - 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_yyyy[j] * pb_zz[j] * pc_z[j] - 4.0 * pa_yyy[j] * pc_y[j] * pb_zzz[j]);

                t_yyyy_zzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 9.0 * pa_yy[j] * fl2_fx * pc_z[j] + 4.5 * pa_yy[j] * fl2_fx * pb_z[j] + 18.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 9.0 * pa_y[j] * pc_yz[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_z[j] + 1.5 * pa_yyyy[j] * pc_z[j] * fl1_fx + 6.0 * pa_yyy[j] * pc_y[j] * pb_z[j] * fl1_fx + 6.0 * pa_yyy[j] * pc_yz[j] * fl1_fx + 9.0 * pa_yy[j] * pc_yy[j] * pb_z[j] * fl1_fx + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 4.5 * fl2_fx * pb_zz[j] * pc_z[j] + 0.75 * fl2_fx * pb_zzz[j] + 9.0 * pa_yy[j] * fl1_fx * pb_z[j] * pc_zz[j] + 9.0 * pa_yy[j] * fl1_fx * pb_zz[j] * pc_z[j] + 18.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_zzz[j] + 3.0 * pa_yyyy[j] * pb_z[j] * pc_zz[j] + 12.0 * pa_yyy[j] * pc_yz[j] * pb_zz[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_zzz[j]);

                t_yyyy_zzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 4.5 * pa_yy[j] * fl2_fx * pc_z[j] - 18.0 * pa_y[j] * pc_yz[j] * fl2_fx - 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 9.0 * pc_yy[j] * fl2_fx * pb_z[j] - 4.5 * pc_yyz[j] * fl2_fx - 6.0 * pa_yyy[j] * pc_yz[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yy[j] * pb_z[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yyz[j] * fl1_fx - 6.0 * pa_y[j] * pc_yyy[j] * pb_z[j] * fl1_fx - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * fl2_fx * pb_z[j] * pc_zz[j] - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pc_zzz[j] - 9.0 * pa_yy[j] * fl1_fx * pb_z[j] * pc_zz[j] - 18.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 18.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 9.0 * pc_yyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_zzz[j] - pa_yyyy[j] * pc_zzz[j] - 12.0 * pa_yyy[j] * pc_yzz[j] * pb_z[j] - 18.0 * pa_yy[j] * pc_yyz[j] * pb_zz[j] - 4.0 * pa_y[j] * pc_yyy[j] * pb_zzz[j]);

                t_yyyy_zzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 9.0 * pa_y[j] * pc_yz[j] * fl2_fx + 9.0 * pc_yyz[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_z[j] + 9.0 * pa_yy[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyy[j] * pb_z[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 1.5 * pc_yyyy[j] * pb_z[j] * fl1_fx + 1.5 * fl2_fx * pc_zzz[j] + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 3.0 * pa_yy[j] * fl1_fx * pc_zzz[j] + 6.0 * pa_y[j] * pc_yzzz[j] * fl1_fx + 18.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_yyz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_yyy[j] * pc_yzzz[j] + 18.0 * pa_yy[j] * pc_yyzz[j] * pb_z[j] + 12.0 * pa_y[j] * pc_yyyz[j] * pb_zz[j] + pc_yyyy[j] * pb_zzz[j]);

                t_yyyy_zzz[j] += fl_s_0_0_5 * (-4.5 * pc_yyz[j] * fl2_fx - 6.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 1.5 * pc_yyyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_yyyyz[j] * fl1_fx - 0.75 * fl2_fx * pc_zzz[j] - 6.0 * pa_y[j] * pc_yzzz[j] * fl1_fx - 3.0 * pc_yyzzz[j] * fl1_fx - 9.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_yy[j] * pc_yyzzz[j] - 12.0 * pa_y[j] * pc_yyyzz[j] * pb_z[j] - 3.0 * pc_yyyyz[j] * pb_zz[j]);

                t_yyyy_zzz[j] += fl_s_0_0_6 * (1.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pc_yyzzz[j] * fl1_fx + 4.0 * pa_y[j] * pc_yyyzzz[j] + 3.0 * pc_yyyyzz[j] * pb_z[j]);

                t_yyyy_zzz[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_110_111(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (110,111)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_xxx = primBuffer.data(150 * idx + 110);

            // Batch of Integrals (110,111)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_x, pb_xx, pb_xxx, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyz, pc_xxxyyz, pc_xxxyz, \
                                     pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyz, \
                                     pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yyyz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yyyz_xxx[j] = fl_s_0_0_0 * (2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_yyyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_yz[j] * fl1_fx * pb_xxx[j] + pa_yyyz[j] * pb_xxx[j]);

                t_yyyz_xxx[j] += fl_s_0_0_1 * (-4.5 * pa_yz[j] * fl2_fx * pb_x[j] - 2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pa_yyyz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yyyz[j] * pc_x[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_z[j] * pb_x[j] * fl1_fx - 4.5 * pa_yyz[j] * pc_y[j] * pb_x[j] * fl1_fx - 4.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxx[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxx[j] - 3.0 * pa_yyyz[j] * pb_xx[j] * pc_x[j] - pa_yyy[j] * pc_z[j] * pb_xxx[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_xxx[j]);

                t_yyyz_xxx[j] += fl_s_0_0_2 * (4.5 * pa_yz[j] * fl2_fx * pc_x[j] + 4.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] + 2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 4.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_yyyz[j] * pc_x[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx + 4.5 * pa_yyz[j] * pc_y[j] * pb_x[j] * fl1_fx + 4.5 * pa_yyz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 4.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xx[j] + 4.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxx[j] + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxx[j] + 3.0 * pa_yyyz[j] * pb_x[j] * pc_xx[j] + 3.0 * pa_yyy[j] * pc_xz[j] * pb_xx[j] + 9.0 * pa_yyz[j] * pc_xy[j] * pb_xx[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xxx[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_xxx[j]);

                t_yyyz_xxx[j] += fl_s_0_0_3 * (-4.5 * pa_y[j] * fl2_fx * pc_xz[j] - 2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 4.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_yyz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 4.5 * pa_yz[j] * pc_xyy[j] * fl1_fx - 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pa_yz[j] * fl1_fx * pc_xxx[j] - 4.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_x[j] - 4.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 4.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xx[j] - 4.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] - pa_yyyz[j] * pc_xxx[j] - 3.0 * pa_yyy[j] * pc_xxz[j] * pb_x[j] - 9.0 * pa_yyz[j] * pc_xxy[j] * pb_x[j] - 9.0 * pa_yy[j] * pc_xyz[j] * pb_xx[j] - 9.0 * pa_yz[j] * pc_xyy[j] * pb_xx[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xxx[j] - pc_yyy[j] * pa_z[j] * pb_xxx[j]);

                t_yyyz_xxx[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_xyy[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx + 1.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pc_xxxz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xxx[j] + 4.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_x[j] + 1.5 * pc_xxxy[j] * fl1_fx * pa_z[j] + 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + pa_yyy[j] * pc_xxxz[j] + 3.0 * pa_yyz[j] * pc_xxxy[j] + 9.0 * pa_yy[j] * pc_xxyz[j] * pb_x[j] + 9.0 * pa_yz[j] * pc_xxyy[j] * pb_x[j] + 9.0 * pa_y[j] * pc_xyyz[j] * pb_xx[j] + 3.0 * pc_xyyy[j] * pa_z[j] * pb_xx[j] + pc_yyyz[j] * pb_xxx[j]);

                t_yyyz_xxx[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pa_y[j] * fl1_fx * pc_xxxz[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pa_z[j] - 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_yy[j] * pc_xxxyz[j] - 3.0 * pa_yz[j] * pc_xxxyy[j] - 9.0 * pa_y[j] * pc_xxyyz[j] * pb_x[j] - 3.0 * pc_xxyyy[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xyyyz[j] * pb_xx[j]);

                t_yyyz_xxx[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxxyyz[j] + pc_xxxyyy[j] * pa_z[j] + 3.0 * pc_xxyyyz[j] * pb_x[j]);

                t_yyyz_xxx[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_111_112(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (111,112)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_xxy = primBuffer.data(150 * idx + 111);

            // Batch of Integrals (111,112)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_x, pb_xx, pb_xxy, pb_xy, \
                                     pb_y, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyz, pc_xxyyyz, \
                                     pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyz, \
                                     pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, pc_yyz, pc_yz, \
                                     pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yyyz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyz_xxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 0.75 * pa_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_yyyz[j] * fl1_fx * pb_y[j] + 1.5 * pa_yyz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xxy[j] + pa_yyyz[j] * pb_xxy[j]);

                t_yyyz_xxy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_yyz[j] * fl2_fx - 0.75 * pa_yy[j] * fl2_fx * pc_z[j] - 2.25 * pa_yz[j] * pc_y[j] * fl2_fx - 1.5 * pa_yz[j] * fl2_fx * pb_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * fl2_fx * pa_z[j] * pb_xx[j] - 0.5 * pa_yyyz[j] * fl1_fx * pc_y[j] - 0.5 * pa_yyyz[j] * fl1_fx * pb_y[j] - 0.5 * pa_yyy[j] * pc_z[j] * fl1_fx * pb_y[j] - 1.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_y[j] - 3.0 * pa_yyz[j] * fl1_fx * pb_x[j] * pc_x[j] - 1.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_xx[j] - 1.5 * pa_yyz[j] * fl1_fx * pb_xx[j] - 4.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xx[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxy[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxy[j] - pa_yyyz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_yyyz[j] * pb_xy[j] * pc_x[j] - pa_yyy[j] * pc_z[j] * pb_xxy[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_xxy[j]);

                t_yyyz_xxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 1.5 * pa_yy[j] * fl2_fx * pc_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 4.5 * pa_yz[j] * pc_y[j] * fl2_fx + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pa_z[j] + 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] + 0.75 * pa_yz[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pc_xx[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_yyyz[j] * fl1_fx * pc_y[j] + 0.5 * pa_yyy[j] * pc_yz[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_z[j] * fl1_fx * pb_y[j] + 1.5 * pa_yyz[j] * pc_yy[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 1.5 * pa_yyz[j] * fl1_fx * pc_xx[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_x[j] + 3.0 * pa_yyz[j] * fl1_fx * pb_x[j] * pc_x[j] + 1.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_xx[j] + 1.5 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_y[j] + 9.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_x[j] + 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 4.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xx[j] + 3.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] + 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xy[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxy[j] + 2.0 * pa_yyyz[j] * pb_x[j] * pc_xy[j] + pa_yyyz[j] * pc_xx[j] * pb_y[j] + pa_yyy[j] * pc_yz[j] * pb_xx[j] + 2.0 * pa_yyy[j] * pc_xz[j] * pb_xy[j] + 3.0 * pa_yyz[j] * pc_yy[j] * pb_xx[j] + 6.0 * pa_yyz[j] * pc_xy[j] * pb_xy[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xxy[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_xxy[j]);

                t_yyyz_xxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * pa_yy[j] * fl2_fx * pc_z[j] - 4.5 * pa_y[j] * pc_yz[j] * fl2_fx - 2.25 * pa_yz[j] * pc_y[j] * fl2_fx - 3.0 * pc_yy[j] * fl2_fx * pa_z[j] - 1.5 * pc_yyz[j] * fl2_fx - 0.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pc_yz[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_xxz[j] - 1.5 * fl2_fx * pa_z[j] * pc_xx[j] - 3.0 * fl2_fx * pc_xz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_yyy[j] * pc_yz[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_yy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 1.5 * pa_yy[j] * fl1_fx * pc_xxz[j] - 1.5 * pa_yyz[j] * fl1_fx * pc_xx[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_x[j] - 1.5 * pa_yz[j] * pc_yyy[j] * fl1_fx - 1.5 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 4.5 * pa_yz[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 9.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_x[j] - 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 0.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 6.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_xx[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_y[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xy[j] - 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] - pa_yyyz[j] * pc_xxy[j] - 2.0 * pa_yyy[j] * pc_xyz[j] * pb_x[j] - pa_yyy[j] * pc_xxz[j] * pb_y[j] - 6.0 * pa_yyz[j] * pc_xyy[j] * pb_x[j] - 3.0 * pa_yyz[j] * pc_xxy[j] * pb_y[j] - 3.0 * pa_yy[j] * pc_yyz[j] * pb_xx[j] - 6.0 * pa_yy[j] * pc_xyz[j] * pb_xy[j] - 3.0 * pa_yz[j] * pc_yyy[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xyy[j] * pb_xy[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xxy[j] - pc_yyy[j] * pa_z[j] * pb_xxy[j]);

                t_yyyz_xxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 3.0 * pc_yyz[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pa_z[j] + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xxz[j] + 0.75 * fl2_fx * pa_z[j] * pc_xx[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_xxz[j] + 1.5 * pa_yz[j] * pc_yyy[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 4.5 * pa_y[j] * pc_xxyz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_xxy[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx + 0.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * fl1_fx * pa_z[j] + 6.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_y[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + pa_yyy[j] * pc_xxyz[j] + 3.0 * pa_yyz[j] * pc_xxyy[j] + 6.0 * pa_yy[j] * pc_xyyz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xxyz[j] * pb_y[j] + 6.0 * pa_yz[j] * pc_xyyy[j] * pb_x[j] + 3.0 * pa_yz[j] * pc_xxyy[j] * pb_y[j] + 3.0 * pa_y[j] * pc_yyyz[j] * pb_xx[j] + 6.0 * pa_y[j] * pc_xyyz[j] * pb_xy[j] + pc_yyyy[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xyyy[j] * pa_z[j] * pb_xy[j] + pc_yyyz[j] * pb_xxy[j]);

                t_yyyz_xxy[j] += fl_s_0_0_5 * (-1.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_xxz[j] - 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx - 4.5 * pa_y[j] * pc_xxyz[j] * fl1_fx - 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyyyz[j] * fl1_fx - 0.5 * pc_yyyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pa_z[j] - 6.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xxyyz[j] - 3.0 * pa_yz[j] * pc_xxyyy[j] - 6.0 * pa_y[j] * pc_xyyyz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xxyyz[j] * pb_y[j] - 2.0 * pc_xyyyy[j] * pa_z[j] * pb_x[j] - pc_xxyyy[j] * pa_z[j] * pb_y[j] - pc_yyyyz[j] * pb_xx[j] - 2.0 * pc_xyyyz[j] * pb_xy[j]);

                t_yyyz_xxy[j] += fl_s_0_0_6 * (0.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxyyyz[j] + pc_xxyyyy[j] * pa_z[j] + 2.0 * pc_xyyyyz[j] * pb_x[j] + pc_xxyyyz[j] * pb_y[j]);

                t_yyyz_xxy[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_112_113(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (112,113)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_xxz = primBuffer.data(150 * idx + 112);

            // Batch of Integrals (112,113)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_x, pb_xx, pb_xxz, pb_xz, \
                                     pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, \
                                     pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyz_xxz[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 0.25 * pa_yyy[j] * fl2_fx + 0.75 * pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 0.5 * pa_yyyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_yyy[j] * fl1_fx * pb_xx[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xxz[j] + pa_yyyz[j] * pb_xxz[j]);

                t_yyyz_xxz[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - 0.5 * pa_yyy[j] * fl2_fx - 0.75 * pa_yy[j] * pc_y[j] * fl2_fx - 0.75 * pa_yz[j] * fl2_fx * pc_z[j] - 1.5 * pa_yz[j] * fl2_fx * pb_z[j] - 0.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_xx[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * pa_yyyz[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_yyy[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_yyy[j] * fl1_fx * pb_x[j] * pc_x[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_xx[j] - 1.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xx[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_z[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxz[j] - pa_yyyz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_yyyz[j] * pb_xz[j] * pc_x[j] - pa_yyy[j] * pc_z[j] * pb_xxz[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_xxz[j]);

                t_yyyz_xxz[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 0.25 * pa_yyy[j] * fl2_fx + 1.5 * pa_yy[j] * pc_y[j] * fl2_fx + 0.75 * pa_y[j] * pc_yy[j] * fl2_fx + 1.5 * pa_yz[j] * fl2_fx * pc_z[j] + 0.75 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 0.75 * pc_yz[j] * fl2_fx * pa_z[j] + 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_y[j] * fl2_fx * pb_xx[j] + 0.5 * pa_yyyz[j] * fl1_fx * pc_z[j] + 0.5 * pa_yyy[j] * pc_zz[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_yyy[j] * fl1_fx * pc_xx[j] + pa_yyy[j] * fl1_fx * pb_x[j] * pc_x[j] + 1.5 * pa_yyz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_z[j] + 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_x[j] + 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xx[j] + 1.5 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] + 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xx[j] + 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_z[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxz[j] + 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xx[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxz[j] + 2.0 * pa_yyyz[j] * pb_x[j] * pc_xz[j] + pa_yyyz[j] * pc_xx[j] * pb_z[j] + pa_yyy[j] * pc_zz[j] * pb_xx[j] + 2.0 * pa_yyy[j] * pc_xz[j] * pb_xz[j] + 3.0 * pa_yyz[j] * pc_yz[j] * pb_xx[j] + 6.0 * pa_yyz[j] * pc_xy[j] * pb_xz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xxz[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_xxz[j]);

                t_yyyz_xxz[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 0.75 * pa_yy[j] * pc_y[j] * fl2_fx - 1.5 * pa_y[j] * pc_yy[j] * fl2_fx - 0.25 * pc_yyy[j] * fl2_fx - 1.5 * pa_y[j] * fl2_fx * pc_zz[j] - 1.5 * pa_y[j] * fl2_fx * pc_xx[j] - 0.75 * pa_yz[j] * fl2_fx * pc_z[j] - 0.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pc_yz[j] * fl2_fx * pa_z[j] - 0.75 * pc_yzz[j] * fl2_fx - 1.5 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * pa_yyy[j] * pc_zz[j] * fl1_fx - 0.5 * pa_yyy[j] * fl1_fx * pc_xx[j] - 1.5 * pa_yyz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_x[j] - 1.5 * pa_yz[j] * pc_yyz[j] * fl1_fx - 1.5 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] - 0.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xxz[j] - 3.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_x[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_z[j] - 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xz[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xx[j] - 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xz[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xx[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] - pa_yyyz[j] * pc_xxz[j] - 2.0 * pa_yyy[j] * pc_xzz[j] * pb_x[j] - pa_yyy[j] * pc_xxz[j] * pb_z[j] - 6.0 * pa_yyz[j] * pc_xyz[j] * pb_x[j] - 3.0 * pa_yyz[j] * pc_xxy[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_xx[j] - 6.0 * pa_yy[j] * pc_xyz[j] * pb_xz[j] - 3.0 * pa_yz[j] * pc_yyz[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xyy[j] * pb_xz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xxz[j] - pc_yyy[j] * pa_z[j] * pb_xxz[j]);

                t_yyyz_xxz[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 0.75 * pa_y[j] * pc_yy[j] * fl2_fx + 0.5 * pc_yyy[j] * fl2_fx + 0.75 * pa_y[j] * fl2_fx * pc_zz[j] + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 1.5 * pc_yzz[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_yz[j] * fl2_fx * pa_z[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_yz[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyzz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_xxyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_yyyz[j] * pa_z[j] * fl1_fx + 0.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyyz[j] * fl1_fx * pb_z[j] + pc_xyyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxzz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xxz[j] + 3.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_x[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_z[j] + 1.5 * pc_xxyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + pa_yyy[j] * pc_xxzz[j] + 3.0 * pa_yyz[j] * pc_xxyz[j] + 6.0 * pa_yy[j] * pc_xyzz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xxyz[j] * pb_z[j] + 6.0 * pa_yz[j] * pc_xyyz[j] * pb_x[j] + 3.0 * pa_yz[j] * pc_xxyy[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_xx[j] + 6.0 * pa_y[j] * pc_xyyz[j] * pb_xz[j] + pc_yyyz[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xyyy[j] * pa_z[j] * pb_xz[j] + pc_yyyz[j] * pb_xxz[j]);

                t_yyyz_xxz[j] += fl_s_0_0_5 * (-0.25 * pc_yyy[j] * fl2_fx - 0.75 * pc_yzz[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * pa_y[j] * pc_yyzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_xxyy[j] * fl1_fx - 0.5 * pc_yyyz[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyyzz[j] * fl1_fx - 0.5 * pc_yyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxyyy[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_x[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxzz[j] - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_xxyzz[j] - 3.0 * pa_yz[j] * pc_xxyyz[j] - 6.0 * pa_y[j] * pc_xyyzz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xxyyz[j] * pb_z[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_x[j] - pc_xxyyy[j] * pa_z[j] * pb_z[j] - pc_yyyzz[j] * pb_xx[j] - 2.0 * pc_xyyyz[j] * pb_xz[j]);

                t_yyyz_xxz[j] += fl_s_0_0_6 * (0.5 * pc_yyyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxyyzz[j] + pc_xxyyyz[j] * pa_z[j] + 2.0 * pc_xyyyzz[j] * pb_x[j] + pc_xxyyyz[j] * pb_z[j]);

                t_yyyz_xxz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_113_114(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (113,114)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_xyy = primBuffer.data(150 * idx + 113);

            // Batch of Integrals (113,114)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_x, pb_xy, pb_xyy, pb_y, \
                                     pb_yy, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyz, pc_xyyyyz, \
                                     pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, \
                                     pc_yyyyz, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_yyyz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yyyz_xyy[j] = fl_s_0_0_0 * (2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_yyyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yyz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xyy[j] + pa_yyyz[j] * pb_xyy[j]);

                t_yyyz_xyy[j] += fl_s_0_0_1 * (-2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 4.5 * pa_yz[j] * fl2_fx * pb_x[j] - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 3.0 * fl2_fx * pa_z[j] * pb_xy[j] - 0.5 * pa_yyyz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yyyz[j] * pc_x[j] * fl1_fx - 0.5 * pa_yyy[j] * pc_z[j] * pb_x[j] * fl1_fx - 4.5 * pa_yyz[j] * pc_y[j] * pb_x[j] * fl1_fx - 3.0 * pa_yyz[j] * fl1_fx * pc_x[j] * pb_y[j] - 3.0 * pa_yy[j] * fl1_fx * pc_z[j] * pb_xy[j] - 3.0 * pa_yyz[j] * fl1_fx * pb_xy[j] - 9.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xy[j] - 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyy[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyy[j] - 2.0 * pa_yyyz[j] * pb_xy[j] * pc_y[j] - pa_yyyz[j] * pc_x[j] * pb_yy[j] - pa_yyy[j] * pc_z[j] * pb_xyy[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_xyy[j]);

                t_yyyz_xyy[j] += fl_s_0_0_2 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pa_yz[j] * fl2_fx * pc_x[j] + 4.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] + 2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 7.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 3.0 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] + 3.0 * fl2_fx * pc_z[j] * pb_xy[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_yyyz[j] * pc_x[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_z[j] * pb_x[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_xz[j] * fl1_fx + 4.5 * pa_yyz[j] * pc_y[j] * pb_x[j] * fl1_fx + 4.5 * pa_yyz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_y[j] + 3.0 * pa_yyz[j] * fl1_fx * pc_x[j] * pb_y[j] + 3.0 * pa_yy[j] * fl1_fx * pc_z[j] * pb_xy[j] + 9.0 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 9.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 9.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xy[j] + 6.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yy[j] + 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyy[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyy[j] + pa_yyyz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_yyyz[j] * pc_xy[j] * pb_y[j] + 2.0 * pa_yyy[j] * pc_yz[j] * pb_xy[j] + pa_yyy[j] * pc_xz[j] * pb_yy[j] + 6.0 * pa_yyz[j] * pc_yy[j] * pb_xy[j] + 3.0 * pa_yyz[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xyy[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_xyy[j]);

                t_yyyz_xyy[j] += fl_s_0_0_3 * (-4.5 * pa_y[j] * fl2_fx * pc_xz[j] - 2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pa_z[j] - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 3.0 * fl2_fx * pc_xz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_yyy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_yyz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_y[j] - 9.0 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 9.0 * pa_yz[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 9.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 5.0 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 6.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] - 6.0 * pc_yyz[j] * fl1_fx * pb_xy[j] - 6.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_xy[j] - 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] - pa_yyyz[j] * pc_xyy[j] - pa_yyy[j] * pc_yyz[j] * pb_x[j] - 2.0 * pa_yyy[j] * pc_xyz[j] * pb_y[j] - 3.0 * pa_yyz[j] * pc_yyy[j] * pb_x[j] - 6.0 * pa_yyz[j] * pc_xyy[j] * pb_y[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_xy[j] - 3.0 * pa_yy[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_yz[j] * pc_yyy[j] * pb_xy[j] - 3.0 * pa_yz[j] * pc_xyy[j] * pb_yy[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xyy[j] - pc_yyy[j] * pa_z[j] * pb_xyy[j]);

                t_yyyz_xyy[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_yz[j] * pc_xyy[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyyz[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 5.0 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx + 5.0 * pc_yyyz[j] * pb_x[j] * fl1_fx + 6.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] + 6.0 * pc_yyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_xyyz[j] + 3.0 * pa_yyz[j] * pc_xyyy[j] + 3.0 * pa_yy[j] * pc_yyyz[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_yz[j] * pc_yyyy[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xyyy[j] * pb_y[j] + 6.0 * pa_y[j] * pc_yyyz[j] * pb_xy[j] + 3.0 * pa_y[j] * pc_xyyz[j] * pb_yy[j] + 2.0 * pc_yyyy[j] * pa_z[j] * pb_xy[j] + pc_xyyy[j] * pa_z[j] * pb_yy[j] + pc_yyyz[j] * pb_xyy[j]);

                t_yyyz_xyy[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 9.0 * pa_y[j] * pc_xyyz[j] * fl1_fx - 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx - 5.0 * pc_yyyz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - 6.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xyyyz[j] - 3.0 * pa_yz[j] * pc_xyyyy[j] - 3.0 * pa_y[j] * pc_yyyyz[j] * pb_x[j] - 6.0 * pa_y[j] * pc_xyyyz[j] * pb_y[j] - pc_yyyyy[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xyyyy[j] * pa_z[j] * pb_y[j] - 2.0 * pc_yyyyz[j] * pb_xy[j] - pc_xyyyz[j] * pb_yy[j]);

                t_yyyz_xyy[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyyyz[j] + pc_xyyyyy[j] * pa_z[j] + pc_yyyyyz[j] * pb_x[j] + 2.0 * pc_xyyyyz[j] * pb_y[j]);

                t_yyyz_xyy[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_114_115(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (114,115)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_xyz = primBuffer.data(150 * idx + 114);

            // Batch of Integrals (114,115)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_x, pb_xy, pb_xyz, pb_xz, \
                                     pb_y, pb_yz, pb_z, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyyzz, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yyyz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyz_xyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_yyy[j] * fl1_fx * pb_xy[j] + 1.5 * pa_yyz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xyz[j] + pa_yyyz[j] * pb_xyz[j]);

                t_yyyz_xyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 1.5 * pa_yy[j] * fl2_fx * pb_x[j] - 2.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pa_y[j] * fl2_fx * pb_xy[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_x[j] * pc_y[j] - 0.5 * pa_yyy[j] * fl1_fx * pc_x[j] * pb_y[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_xy[j] - 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xy[j] - 1.5 * pa_yyz[j] * fl1_fx * pb_x[j] * pc_z[j] - 1.5 * pa_yyz[j] * fl1_fx * pc_x[j] * pb_z[j] - 1.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_xz[j] - 1.5 * pa_yyz[j] * fl1_fx * pb_xz[j] - 4.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_z[j] - 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyz[j] - pa_yyyz[j] * pb_xy[j] * pc_z[j] - pa_yyyz[j] * pb_xz[j] * pc_y[j] - pa_yyyz[j] * pc_x[j] * pb_yz[j] - pa_yyy[j] * pc_z[j] * pb_xyz[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_xyz[j]);

                t_yyyz_xyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 2.25 * pa_y[j] * pc_xy[j] * fl2_fx + 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_yyy[j] * fl1_fx * pc_xy[j] + 0.5 * pa_yyy[j] * fl1_fx * pb_x[j] * pc_y[j] + 0.5 * pa_yyy[j] * fl1_fx * pc_x[j] * pb_y[j] + 1.5 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_x[j] + 1.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xy[j] + 1.5 * pa_yyz[j] * fl1_fx * pc_xz[j] + 1.5 * pa_yy[j] * fl1_fx * pc_zz[j] * pb_x[j] + 1.5 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_z[j] + 1.5 * pa_yyz[j] * fl1_fx * pb_x[j] * pc_z[j] + 1.5 * pa_yyz[j] * fl1_fx * pc_x[j] * pb_z[j] + 1.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_xz[j] + 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] + 4.5 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_x[j] + 4.5 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 4.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xz[j] + 3.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_y[j] + 1.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xy[j] + 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_z[j] + 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyz[j] + 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xy[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyz[j] + pa_yyyz[j] * pb_x[j] * pc_yz[j] + pa_yyyz[j] * pc_xz[j] * pb_y[j] + pa_yyyz[j] * pc_xy[j] * pb_z[j] + pa_yyy[j] * pc_zz[j] * pb_xy[j] + pa_yyy[j] * pc_yz[j] * pb_xz[j] + pa_yyy[j] * pc_xz[j] * pb_yz[j] + 3.0 * pa_yyz[j] * pc_yz[j] * pb_xy[j] + 3.0 * pa_yyz[j] * pc_yy[j] * pb_xz[j] + 3.0 * pa_yyz[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xyz[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_xyz[j]);

                t_yyyz_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 4.5 * pa_y[j] * pc_xy[j] * fl2_fx - 2.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pc_yy[j] * fl2_fx * pb_x[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_xzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_x[j] - 1.5 * fl2_fx * pc_xz[j] * pb_z[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_yyy[j] * fl1_fx * pc_xy[j] - 1.5 * pa_yy[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_x[j] - 1.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 1.5 * pa_yy[j] * fl1_fx * pc_xzz[j] - 1.5 * pa_yyz[j] * fl1_fx * pc_xz[j] - 1.5 * pa_yy[j] * fl1_fx * pc_zz[j] * pb_x[j] - 1.5 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_z[j] - 1.5 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_x[j] - 1.5 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] - 4.5 * pa_yz[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 4.5 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 4.5 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_x[j] - 4.5 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_xy[j] - 3.0 * pc_yyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_y[j] - 1.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xy[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xyz[j] - pa_yyyz[j] * pc_xyz[j] - pa_yyy[j] * pc_yzz[j] * pb_x[j] - pa_yyy[j] * pc_xzz[j] * pb_y[j] - pa_yyy[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_yyz[j] * pc_yyz[j] * pb_x[j] - 3.0 * pa_yyz[j] * pc_xyz[j] * pb_y[j] - 3.0 * pa_yyz[j] * pc_xyy[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_xy[j] - 3.0 * pa_yy[j] * pc_yyz[j] * pb_xz[j] - 3.0 * pa_yy[j] * pc_xyz[j] * pb_yz[j] - 3.0 * pa_yz[j] * pc_yyz[j] * pb_xy[j] - 3.0 * pa_yz[j] * pc_yyy[j] * pb_xz[j] - 3.0 * pa_yz[j] * pc_xyy[j] * pb_yz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xyz[j] - pc_yyy[j] * pa_z[j] * pb_xyz[j]);

                t_yyyz_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 2.25 * pa_y[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 1.5 * pa_yy[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_xzz[j] + 1.5 * pa_y[j] * pc_xyyy[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 4.5 * pa_y[j] * pc_xyzz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 4.5 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] + pa_yyy[j] * pc_xyzz[j] + 3.0 * pa_yyz[j] * pc_xyyz[j] + 3.0 * pa_yy[j] * pc_yyzz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xyzz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_xyyz[j] * pb_z[j] + 3.0 * pa_yz[j] * pc_yyyz[j] * pb_x[j] + 3.0 * pa_yz[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_yz[j] * pc_xyyy[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_xy[j] + 3.0 * pa_y[j] * pc_yyyz[j] * pb_xz[j] + 3.0 * pa_y[j] * pc_xyyz[j] * pb_yz[j] + pc_yyyz[j] * pa_z[j] * pb_xy[j] + pc_yyyy[j] * pa_z[j] * pb_xz[j] + pc_xyyy[j] * pa_z[j] * pb_yz[j] + pc_yyyz[j] * pb_xyz[j]);

                t_yyyz_xyz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 0.75 * fl2_fx * pc_xzz[j] - 1.5 * pa_y[j] * pc_xyyy[j] * fl1_fx - 4.5 * pa_y[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_xyyyy[j] * fl1_fx - 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xyyzz[j] - 3.0 * pa_yz[j] * pc_xyyyz[j] - 3.0 * pa_y[j] * pc_yyyzz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xyyzz[j] * pb_y[j] - 3.0 * pa_y[j] * pc_xyyyz[j] * pb_z[j] - pc_yyyyz[j] * pa_z[j] * pb_x[j] - pc_xyyyz[j] * pa_z[j] * pb_y[j] - pc_xyyyy[j] * pa_z[j] * pb_z[j] - pc_yyyzz[j] * pb_xy[j] - pc_yyyyz[j] * pb_xz[j] - pc_xyyyz[j] * pb_yz[j]);

                t_yyyz_xyz[j] += fl_s_0_0_6 * (0.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyyzz[j] + pc_xyyyyz[j] * pa_z[j] + pc_yyyyzz[j] * pb_x[j] + pc_xyyyzz[j] * pb_y[j] + pc_xyyyyz[j] * pb_z[j]);

                t_yyyz_xyz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_115_116(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (115,116)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_xzz = primBuffer.data(150 * idx + 115);

            // Batch of Integrals (115,116)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_x, pb_xz, pb_xzz, pb_z, \
                                     pb_zz, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, \
                                     pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_yyyz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yyyz_xzz[j] = fl_s_0_0_0 * (0.75 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pb_xz[j] + 0.5 * pa_yyyz[j] * pb_x[j] * fl1_fx + pa_yyy[j] * fl1_fx * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xzz[j] + pa_yyyz[j] * pb_xzz[j]);

                t_yyyz_xzz[j] += fl_s_0_0_1 * (-1.5 * pa_yz[j] * fl2_fx * pb_x[j] - 0.75 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pa_y[j] * fl2_fx * pb_xz[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pc_y[j] * fl2_fx * pb_xz[j] - 0.5 * pa_yyyz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yyyz[j] * pc_x[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_z[j] * pb_x[j] * fl1_fx - pa_yyy[j] * fl1_fx * pc_x[j] * pb_z[j] - pa_yyy[j] * fl1_fx * pb_xz[j] - 1.5 * pa_yyz[j] * pc_y[j] * pb_x[j] * fl1_fx - 3.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xz[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_z[j] - 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xzz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xzz[j] - 2.0 * pa_yyyz[j] * pb_xz[j] * pc_z[j] - pa_yyyz[j] * pc_x[j] * pb_zz[j] - pa_yyy[j] * pc_z[j] * pb_xzz[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_xzz[j]);

                t_yyyz_xzz[j] += fl_s_0_0_2 * (1.5 * pa_yz[j] * fl2_fx * pc_x[j] + 4.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] + 2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 3.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pc_y[j] * fl2_fx * pb_xz[j] + 0.5 * pa_yyyz[j] * pc_x[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx + pa_yyy[j] * fl1_fx * pc_x[j] * pb_z[j] + 1.5 * pa_yyz[j] * pc_y[j] * pb_x[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_xz[j] + 1.5 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_zz[j] + 3.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_z[j] + 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_zz[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_z[j] + 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_xzz[j] + 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xzz[j] + pa_yyyz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_yyyz[j] * pc_xz[j] * pb_z[j] + 2.0 * pa_yyy[j] * pc_zz[j] * pb_xz[j] + pa_yyy[j] * pc_xz[j] * pb_zz[j] + 6.0 * pa_yyz[j] * pc_yz[j] * pb_xz[j] + 3.0 * pa_yyz[j] * pc_xy[j] * pb_zz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xzz[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_xzz[j]);

                t_yyyz_xzz[j] += fl_s_0_0_3 * (-4.5 * pa_y[j] * fl2_fx * pc_xz[j] - 0.75 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 1.5 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 1.5 * pa_yz[j] * pc_xyy[j] * fl1_fx - 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_yyy[j] * fl1_fx * pb_xz[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xzz[j] - 1.5 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_x[j] - 3.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] - 1.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_zz[j] - 3.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_z[j] - 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_zz[j] - 1.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] - pa_yyyz[j] * pc_xzz[j] - pa_yyy[j] * pc_zzz[j] * pb_x[j] - 2.0 * pa_yyy[j] * pc_xzz[j] * pb_z[j] - 3.0 * pa_yyz[j] * pc_yzz[j] * pb_x[j] - 6.0 * pa_yyz[j] * pc_xyz[j] * pb_z[j] - 6.0 * pa_yy[j] * pc_yzz[j] * pb_xz[j] - 3.0 * pa_yy[j] * pc_xyz[j] * pb_zz[j] - 6.0 * pa_yz[j] * pc_yyz[j] * pb_xz[j] - 3.0 * pa_yz[j] * pc_xyy[j] * pb_zz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xzz[j] - pc_yyy[j] * pa_z[j] * pb_xzz[j]);

                t_yyyz_xzz[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_yz[j] * pc_xyy[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx + pc_xyyy[j] * fl1_fx * pb_z[j] + pc_yyy[j] * fl1_fx * pb_xz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xzzz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xzz[j] + 1.5 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_x[j] + 3.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_yyy[j] * pc_xzzz[j] + 3.0 * pa_yyz[j] * pc_xyzz[j] + 3.0 * pa_yy[j] * pc_yzzz[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xyzz[j] * pb_z[j] + 3.0 * pa_yz[j] * pc_yyzz[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xyyz[j] * pb_z[j] + 6.0 * pa_y[j] * pc_yyzz[j] * pb_xz[j] + 3.0 * pa_y[j] * pc_xyyz[j] * pb_zz[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_xz[j] + pc_xyyy[j] * pa_z[j] * pb_zz[j] + pc_yyyz[j] * pb_xzz[j]);

                t_yyyz_xzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx - 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_xzzz[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_xyzzz[j] - 3.0 * pa_yz[j] * pc_xyyzz[j] - 3.0 * pa_y[j] * pc_yyzzz[j] * pb_x[j] - 6.0 * pa_y[j] * pc_xyyzz[j] * pb_z[j] - pc_yyyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yyyzz[j] * pb_xz[j] - pc_xyyyz[j] * pb_zz[j]);

                t_yyyz_xzz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyzzz[j] + pc_xyyyzz[j] * pa_z[j] + pc_yyyzzz[j] * pb_x[j] + 2.0 * pc_xyyyzz[j] * pb_z[j]);

                t_yyyz_xzz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_116_117(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (116,117)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyyyz = pcDistances.data(119 * idx + 112);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_yyy = primBuffer.data(150 * idx + 116);

            // Batch of Integrals (116,117)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_y, pb_yy, pb_yyy, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyy, pc_yyyyyyz, pc_yyyyyz, pc_yyyyz, \
                                     pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_yyyz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyz_yyy[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pa_z[j] + 2.25 * pa_yyz[j] * fl2_fx + 6.75 * pa_yz[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_yyyz[j] * pb_y[j] * fl1_fx + 4.5 * pa_yyz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_yz[j] * fl1_fx * pb_yyy[j] + pa_yyyz[j] * pb_yyy[j]);

                t_yyyz_yyy[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_z[j] - 5.625 * fl3_fx * pa_z[j] - 4.5 * pa_yyz[j] * fl2_fx - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 11.25 * pa_yz[j] * pc_y[j] * fl2_fx - 6.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 13.5 * pa_yz[j] * fl2_fx * pb_y[j] - 11.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 2.25 * fl2_fx * pc_z[j] * pb_yy[j] - 4.5 * fl2_fx * pa_z[j] * pb_yy[j] - 1.5 * pa_yyyz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yyyz[j] * pc_y[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_z[j] * pb_y[j] * fl1_fx - 13.5 * pa_yyz[j] * pc_y[j] * pb_y[j] * fl1_fx - 4.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_yy[j] - 4.5 * pa_yyz[j] * fl1_fx * pb_yy[j] - 13.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yy[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyy[j] - 1.5 * pa_yz[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyy[j] - 3.0 * pa_yyyz[j] * pb_yy[j] * pc_y[j] - pa_yyy[j] * pc_z[j] * pb_yyy[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_yyy[j]);

                t_yyyz_yyy[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pa_z[j] + 4.5 * pa_yy[j] * fl2_fx * pc_z[j] + 2.25 * pa_yyz[j] * fl2_fx + 22.5 * pa_yz[j] * pc_y[j] * fl2_fx + 11.25 * pa_y[j] * pc_yz[j] * fl2_fx + 13.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] + 6.75 * pa_yz[j] * fl2_fx * pb_y[j] + 11.25 * pc_yy[j] * fl2_fx * pa_z[j] + 11.25 * pc_yz[j] * fl2_fx * pb_y[j] + 22.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] + 4.5 * fl2_fx * pc_z[j] * pb_yy[j] + 2.25 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_yyyz[j] * pc_y[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx + 13.5 * pa_yyz[j] * pc_y[j] * pb_y[j] * fl1_fx + 9.0 * pa_yyz[j] * pc_yy[j] * fl1_fx + 13.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 4.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_yy[j] + 27.0 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx + 13.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 13.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yy[j] + 9.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyy[j] + 3.0 * pa_yyyz[j] * pb_y[j] * pc_yy[j] + 3.0 * pa_yyy[j] * pc_yz[j] * pb_yy[j] + 9.0 * pa_yyz[j] * pc_yy[j] * pb_yy[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_yyy[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_yyy[j]);

                t_yyyz_yyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pa_z[j] - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 22.5 * pa_y[j] * pc_yz[j] * fl2_fx - 11.25 * pa_yz[j] * pc_y[j] * fl2_fx - 6.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 22.5 * pc_yy[j] * fl2_fx * pa_z[j] - 11.25 * pc_yyz[j] * fl2_fx - 22.5 * pc_yz[j] * fl2_fx * pb_y[j] - 11.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 2.25 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx - 9.0 * pa_yyz[j] * pc_yy[j] * fl1_fx - 13.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yyz[j] * fl1_fx - 27.0 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx - 15.0 * pa_yz[j] * pc_yyy[j] * fl1_fx - 27.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 13.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 15.0 * pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_yyz[j] * fl1_fx * pb_yy[j] - 9.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] - pa_yyyz[j] * pc_yyy[j] - 3.0 * pa_yyy[j] * pc_yyz[j] * pb_y[j] - 9.0 * pa_yyz[j] * pc_yyy[j] * pb_y[j] - 9.0 * pa_yy[j] * pc_yyz[j] * pb_yy[j] - 9.0 * pa_yz[j] * pc_yyy[j] * pb_yy[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_yyy[j] - pc_yyy[j] * pa_z[j] * pb_yyy[j]);

                t_yyyz_yyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 11.25 * pa_y[j] * pc_yz[j] * fl2_fx + 22.5 * pc_yyz[j] * fl2_fx + 11.25 * pc_yy[j] * fl2_fx * pa_z[j] + 11.25 * pc_yz[j] * fl2_fx * pb_y[j] + 9.0 * pa_yy[j] * pc_yyz[j] * fl1_fx + 15.0 * pa_yz[j] * pc_yyy[j] * fl1_fx + 27.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 15.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 15.0 * pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 7.5 * pc_yyyy[j] * pa_z[j] * fl1_fx + 15.0 * pc_yyyz[j] * pb_y[j] * fl1_fx + 9.0 * pc_yyz[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_yyyz[j] + 3.0 * pa_yyz[j] * pc_yyyy[j] + 9.0 * pa_yy[j] * pc_yyyz[j] * pb_y[j] + 9.0 * pa_yz[j] * pc_yyyy[j] * pb_y[j] + 9.0 * pa_y[j] * pc_yyyz[j] * pb_yy[j] + 3.0 * pc_yyyy[j] * pa_z[j] * pb_yy[j] + pc_yyyz[j] * pb_yyy[j]);

                t_yyyz_yyy[j] += fl_s_0_0_5 * (-11.25 * pc_yyz[j] * fl2_fx - 15.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 7.5 * pc_yyyy[j] * pa_z[j] * fl1_fx - 15.0 * pc_yyyz[j] * pb_y[j] * fl1_fx - 7.5 * pc_yyyyz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yyyyz[j] - 3.0 * pa_yz[j] * pc_yyyyy[j] - 9.0 * pa_y[j] * pc_yyyyz[j] * pb_y[j] - 3.0 * pc_yyyyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_yyyyz[j] * pb_yy[j]);

                t_yyyz_yyy[j] += fl_s_0_0_6 * (7.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyyyz[j] + pc_yyyyyy[j] * pa_z[j] + 3.0 * pc_yyyyyz[j] * pb_y[j]);

                t_yyyz_yyy[j] += -fl_s_0_0_7 * pc_yyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_117_118(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (117,118)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyyzz = pcDistances.data(119 * idx + 113);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_yyz = primBuffer.data(150 * idx + 117);

            // Batch of Integrals (117,118)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_y, pb_yy, pb_yyz, pb_yz, \
                                     pb_z, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, pc_yyyyyzz, pc_yyyyz, \
                                     pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyz_yyz[j] = fl_s_0_0_0 * (1.125 * pa_y[j] * fl3_fx + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_yyy[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 2.25 * pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_yyyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_yyy[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yyz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_yyz[j] + pa_yyyz[j] * pb_yyz[j]);

                t_yyyz_yyz[j] += fl_s_0_0_1 * (-3.375 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 2.25 * fl3_fx * pb_y[j] - 0.5 * pa_yyy[j] * fl2_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 3.0 * pa_yy[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 2.25 * pa_yz[j] * fl2_fx * pc_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 4.5 * pa_yz[j] * fl2_fx * pb_z[j] - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_yy[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 3.0 * fl2_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_yyyz[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_yyy[j] * pc_z[j] * fl1_fx * pb_z[j] - pa_yyy[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_yy[j] - 4.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yy[j] - 3.0 * pa_yyz[j] * fl1_fx * pb_y[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pc_z[j] * pb_yz[j] - 3.0 * pa_yyz[j] * fl1_fx * pb_yz[j] - 9.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyz[j] - pa_yyyz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_yyyz[j] * pb_yz[j] * pc_y[j] - pa_yyy[j] * pc_z[j] * pb_yyz[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_yyz[j]);

                t_yyyz_yyz[j] += fl_s_0_0_2 * (3.375 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 2.25 * fl3_fx * pb_y[j] + 0.25 * pa_yyy[j] * fl2_fx + 4.5 * pa_yy[j] * pc_y[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 4.5 * pa_y[j] * pc_yy[j] * fl2_fx + 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * fl2_fx * pc_zz[j] + 4.5 * pa_yz[j] * fl2_fx * pc_z[j] + 4.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] + 2.25 * pa_yz[j] * fl2_fx * pb_z[j] + 3.0 * pc_yy[j] * fl2_fx * pb_y[j] + 3.75 * pc_yz[j] * fl2_fx * pa_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_z[j] + 7.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * pc_y[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 3.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 3.0 * fl2_fx * pc_z[j] * pb_yz[j] + 1.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_yyyz[j] * fl1_fx * pc_z[j] + 0.5 * pa_yyy[j] * pc_zz[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_z[j] * fl1_fx * pb_z[j] + 0.5 * pa_yyy[j] * fl1_fx * pc_yy[j] + pa_yyy[j] * fl1_fx * pb_y[j] * pc_y[j] + 4.5 * pa_yyz[j] * pc_yz[j] * fl1_fx + 4.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_z[j] + 4.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yy[j] * fl1_fx * pc_zz[j] * pb_y[j] + 3.0 * pa_yyz[j] * fl1_fx * pb_y[j] * pc_z[j] + 3.0 * pa_yy[j] * fl1_fx * pc_z[j] * pb_yz[j] + 9.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 9.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yz[j] + 6.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 1.5 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyz[j] + 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyz[j] + 2.0 * pa_yyyz[j] * pb_y[j] * pc_yz[j] + pa_yyyz[j] * pc_yy[j] * pb_z[j] + pa_yyy[j] * pc_zz[j] * pb_yy[j] + 2.0 * pa_yyy[j] * pc_yz[j] * pb_yz[j] + 3.0 * pa_yyz[j] * pc_yz[j] * pb_yy[j] + 6.0 * pa_yyz[j] * pc_yy[j] * pb_yz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_yyz[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_yyz[j]);

                t_yyyz_yyz[j] += fl_s_0_0_3 * (-1.125 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 0.75 * fl3_fx * pb_y[j] - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 9.0 * pa_y[j] * pc_yy[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * fl2_fx * pc_zz[j] - 2.25 * pa_yz[j] * fl2_fx * pc_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 2.5 * pc_yyy[j] * fl2_fx - 6.0 * pc_yy[j] * fl2_fx * pb_y[j] - 3.75 * pc_yzz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pa_z[j] - 7.5 * pc_yz[j] * fl2_fx * pb_z[j] - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pc_zz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_yyy[j] * pc_zz[j] * fl1_fx - 0.5 * pa_yyy[j] * fl1_fx * pc_yy[j] - 4.5 * pa_yyz[j] * pc_yz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_yyy[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * fl1_fx * pc_zz[j] * pb_y[j] - 9.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 9.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 9.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 5.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_yy[j] - 6.0 * pc_yyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 6.0 * pc_yyz[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yyz[j] - pa_yyyz[j] * pc_yyz[j] - 2.0 * pa_yyy[j] * pc_yzz[j] * pb_y[j] - pa_yyy[j] * pc_yyz[j] * pb_z[j] - 6.0 * pa_yyz[j] * pc_yyz[j] * pb_y[j] - 3.0 * pa_yyz[j] * pc_yyy[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_yy[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_yz[j] - 3.0 * pa_yz[j] * pc_yyz[j] * pb_yy[j] - 6.0 * pa_yz[j] * pc_yyy[j] * pb_yz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_yyz[j] - pc_yyy[j] * pa_z[j] * pb_yyz[j]);

                t_yyyz_yyz[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 4.5 * pa_y[j] * pc_yy[j] * fl2_fx + 2.25 * pa_y[j] * fl2_fx * pc_zz[j] + 5.0 * pc_yyy[j] * fl2_fx + 3.0 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_yzz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pa_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 4.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yyy[j] * fl1_fx + 9.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_yyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 9.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 5.0 * pc_yyyz[j] * pa_z[j] * fl1_fx + 5.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 5.0 * pc_yyyz[j] * fl1_fx * pb_z[j] + pc_yyyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_yy[j] + 6.0 * pc_yyzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_yyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 6.0 * pc_yyz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_yyzz[j] + 3.0 * pa_yyz[j] * pc_yyyz[j] + 6.0 * pa_yy[j] * pc_yyzz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_yyyz[j] * pb_z[j] + 6.0 * pa_yz[j] * pc_yyyz[j] * pb_y[j] + 3.0 * pa_yz[j] * pc_yyyy[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_yy[j] + 6.0 * pa_y[j] * pc_yyyz[j] * pb_yz[j] + pc_yyyz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_yyyy[j] * pa_z[j] * pb_yz[j] + pc_yyyz[j] * pb_yyz[j]);

                t_yyyz_yyz[j] += fl_s_0_0_5 * (-2.5 * pc_yyy[j] * fl2_fx - 3.75 * pc_yzz[j] * fl2_fx - 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_yyyy[j] * fl1_fx - 5.0 * pc_yyyz[j] * pa_z[j] * fl1_fx - 5.0 * pc_yyyzz[j] * fl1_fx - 5.0 * pc_yyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_yyyyy[j] * fl1_fx - pc_yyyy[j] * fl1_fx * pb_y[j] - 6.0 * pc_yyzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_yyyzz[j] - 3.0 * pa_yz[j] * pc_yyyyz[j] - 6.0 * pa_y[j] * pc_yyyzz[j] * pb_y[j] - 3.0 * pa_y[j] * pc_yyyyz[j] * pb_z[j] - 2.0 * pc_yyyyz[j] * pa_z[j] * pb_y[j] - pc_yyyyy[j] * pa_z[j] * pb_z[j] - pc_yyyzz[j] * pb_yy[j] - 2.0 * pc_yyyyz[j] * pb_yz[j]);

                t_yyyz_yyz[j] += fl_s_0_0_6 * (5.0 * pc_yyyzz[j] * fl1_fx + 0.5 * pc_yyyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyyzz[j] + pc_yyyyyz[j] * pa_z[j] + 2.0 * pc_yyyyzz[j] * pb_y[j] + pc_yyyyyz[j] * pb_z[j]);

                t_yyyz_yyz[j] += -fl_s_0_0_7 * pc_yyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_118_119(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (118,119)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_yzz = primBuffer.data(150 * idx + 118);

            // Batch of Integrals (118,119)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_y, pb_yz, pb_yzz, pb_z, \
                                     pb_zz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyyzzz, pc_yyyz, \
                                     pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, \
                                     pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yyyz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyz_yzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_z[j] + 0.75 * pa_yz[j] * fl2_fx * pb_y[j] + 1.5 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_yyyz[j] * pb_y[j] * fl1_fx + pa_yyy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_yyz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_yzz[j] + pa_yyyz[j] * pb_yzz[j]);

                t_yyyz_yzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 2.25 * fl3_fx * pb_z[j] - 1.5 * pa_yyz[j] * fl2_fx - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 3.0 * pa_yy[j] * fl2_fx * pb_z[j] - 2.25 * pa_yz[j] * pc_y[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pa_yz[j] * fl2_fx * pb_y[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pb_yz[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pc_y[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.5 * pa_yyyz[j] * pb_y[j] * fl1_fx - 0.5 * pa_yyyz[j] * pc_y[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_z[j] * pb_y[j] * fl1_fx - pa_yyy[j] * fl1_fx * pc_y[j] * pb_z[j] - pa_yyy[j] * fl1_fx * pb_yz[j] - 1.5 * pa_yyz[j] * pc_y[j] * pb_y[j] * fl1_fx - 3.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yz[j] - 3.0 * pa_yyz[j] * fl1_fx * pb_z[j] * pc_z[j] - 1.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_yyz[j] * fl1_fx * pb_zz[j] - 4.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] - 3.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_yzz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yzz[j] - 2.0 * pa_yyyz[j] * pb_yz[j] * pc_z[j] - pa_yyyz[j] * pc_y[j] * pb_zz[j] - pa_yyy[j] * pc_z[j] * pb_yzz[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_yzz[j]);

                t_yyyz_yzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 2.25 * fl3_fx * pb_z[j] + 4.5 * pa_yy[j] * fl2_fx * pc_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_z[j] + 4.5 * pa_yz[j] * pc_y[j] * fl2_fx + 6.75 * pa_y[j] * pc_yz[j] * fl2_fx + 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pa_z[j] + 3.0 * pc_yy[j] * fl2_fx * pb_z[j] + 4.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] + 0.75 * pa_yz[j] * fl2_fx * pb_y[j] + 1.5 * pa_y[j] * fl2_fx * pb_yz[j] + 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] + 2.25 * pc_yz[j] * fl2_fx * pb_y[j] + 3.0 * pc_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_yyyz[j] * pc_y[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_z[j] * pb_y[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx + pa_yyy[j] * fl1_fx * pc_y[j] * pb_z[j] + 1.5 * pa_yyz[j] * pc_y[j] * pb_y[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_yy[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yz[j] + 1.5 * pa_yyz[j] * fl1_fx * pc_zz[j] + 3.0 * pa_yy[j] * fl1_fx * pc_zz[j] * pb_z[j] + 3.0 * pa_yyz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_yy[j] * fl1_fx * pc_z[j] * pb_zz[j] + 1.5 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 3.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_y[j] * pc_zz[j] + 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yz[j] + 3.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_yzz[j] + 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yzz[j] + pa_yyyz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_yyyz[j] * pc_yz[j] * pb_z[j] + 2.0 * pa_yyy[j] * pc_zz[j] * pb_yz[j] + pa_yyy[j] * pc_yz[j] * pb_zz[j] + 6.0 * pa_yyz[j] * pc_yz[j] * pb_yz[j] + 3.0 * pa_yyz[j] * pc_yy[j] * pb_zz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_yzz[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_yzz[j]);

                t_yyyz_yzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * fl3_fx * pb_z[j] - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 13.5 * pa_y[j] * pc_yz[j] * fl2_fx - 2.25 * pa_yz[j] * pc_y[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * pc_yy[j] * fl2_fx * pa_z[j] - 4.5 * pc_yyz[j] * fl2_fx - 6.0 * pc_yy[j] * fl2_fx * pb_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 4.5 * pc_yz[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pc_y[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_yy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * fl1_fx * pc_zzz[j] - 1.5 * pa_yyz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_yy[j] * fl1_fx * pc_zz[j] * pb_z[j] - 1.5 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx - 1.5 * pa_yz[j] * pc_yyy[j] * fl1_fx - 4.5 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 4.5 * pa_yz[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx - pc_yyy[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yy[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_y[j] - 1.5 * pa_yz[j] * fl1_fx * pb_y[j] * pc_zz[j] - 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yz[j] - 1.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yzz[j] - pa_yyyz[j] * pc_yzz[j] - pa_yyy[j] * pc_zzz[j] * pb_y[j] - 2.0 * pa_yyy[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_yyz[j] * pc_yzz[j] * pb_y[j] - 6.0 * pa_yyz[j] * pc_yyz[j] * pb_z[j] - 6.0 * pa_yy[j] * pc_yzz[j] * pb_yz[j] - 3.0 * pa_yy[j] * pc_yyz[j] * pb_zz[j] - 6.0 * pa_yz[j] * pc_yyz[j] * pb_yz[j] - 3.0 * pa_yz[j] * pc_yyy[j] * pb_zz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_yzz[j] - pc_yyy[j] * pa_z[j] * pb_yzz[j]);

                t_yyyz_yzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 6.75 * pa_y[j] * pc_yz[j] * fl2_fx + 9.0 * pc_yyz[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pa_z[j] + 3.0 * pc_yy[j] * fl2_fx * pb_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * pa_yy[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_zzz[j] + 1.5 * pa_yz[j] * pc_yyy[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 4.5 * pa_y[j] * pc_yzzz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_yzz[j] * fl1_fx + 9.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_yyyz[j] * pb_y[j] * fl1_fx + pc_yyyy[j] * fl1_fx * pb_z[j] + pc_yyy[j] * fl1_fx * pb_yz[j] + 3.0 * pc_yyzz[j] * fl1_fx * pa_z[j] + 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_y[j] + 1.5 * pc_yzzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_yz[j] + pa_yyy[j] * pc_yzzz[j] + 3.0 * pa_yyz[j] * pc_yyzz[j] + 3.0 * pa_yy[j] * pc_yzzz[j] * pb_y[j] + 6.0 * pa_yy[j] * pc_yyzz[j] * pb_z[j] + 3.0 * pa_yz[j] * pc_yyzz[j] * pb_y[j] + 6.0 * pa_yz[j] * pc_yyyz[j] * pb_z[j] + 6.0 * pa_y[j] * pc_yyzz[j] * pb_yz[j] + 3.0 * pa_y[j] * pc_yyyz[j] * pb_zz[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_yz[j] + pc_yyyy[j] * pa_z[j] * pb_zz[j] + pc_yyyz[j] * pb_yzz[j]);

                t_yyyz_yzz[j] += fl_s_0_0_5 * (-4.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * pa_y[j] * pc_yyyz[j] * fl1_fx - 4.5 * pa_y[j] * pc_yzzz[j] * fl1_fx - 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_yyyyz[j] * fl1_fx - pc_yyyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_yyzzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pa_z[j] - 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_yzzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_yyzzz[j] - 3.0 * pa_yz[j] * pc_yyyzz[j] - 3.0 * pa_y[j] * pc_yyzzz[j] * pb_y[j] - 6.0 * pa_y[j] * pc_yyyzz[j] * pb_z[j] - pc_yyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_yyyyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yyyzz[j] * pb_yz[j] - pc_yyyyz[j] * pb_zz[j]);

                t_yyyz_yzz[j] += fl_s_0_0_6 * (1.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pc_yyzzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyzzz[j] + pc_yyyyzz[j] * pa_z[j] + pc_yyyzzz[j] * pb_y[j] + 2.0 * pc_yyyyzz[j] * pb_z[j]);

                t_yyyz_yzz[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_119_120(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (119,120)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(34 * idx + 15);

            auto pa_yyz = paDistances.data(34 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyyz = paDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyyz_zzz = primBuffer.data(150 * idx + 119);

            // Batch of Integrals (119,120)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pa_yyyz, pa_yyz, pa_yz, pa_z, pb_z, pb_zz, pb_zzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyyzzzz, pc_yyz, pc_yyzz, \
                                     pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyyz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyyz_zzz[j] = fl_s_0_0_0 * (1.125 * pa_y[j] * fl3_fx + 0.75 * pa_yyy[j] * fl2_fx + 2.25 * pa_yz[j] * fl2_fx * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_zz[j] + 1.5 * pa_yyyz[j] * pb_z[j] * fl1_fx + 1.5 * pa_yyy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_zzz[j] + pa_yyyz[j] * pb_zzz[j]);

                t_yyyz_zzz[j] += fl_s_0_0_1 * (-3.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 1.5 * pa_yyy[j] * fl2_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 4.5 * pa_yz[j] * fl2_fx * pb_z[j] - 2.25 * pa_yz[j] * fl2_fx * pc_z[j] - 6.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_zz[j] - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_zz[j] - 1.5 * pa_yyyz[j] * pb_z[j] * fl1_fx - 1.5 * pa_yyyz[j] * pc_z[j] * fl1_fx - 4.5 * pa_yyy[j] * pc_z[j] * pb_z[j] * fl1_fx - 1.5 * pa_yyy[j] * fl1_fx * pb_zz[j] - 4.5 * pa_yyz[j] * pc_y[j] * pb_z[j] * fl1_fx - 4.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 4.5 * pa_yz[j] * fl1_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_zzz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_zzz[j] - 3.0 * pa_yyyz[j] * pb_zz[j] * pc_z[j] - pa_yyy[j] * pc_z[j] * pb_zzz[j] - 3.0 * pa_yyz[j] * pc_y[j] * pb_zzz[j]);

                t_yyyz_zzz[j] += fl_s_0_0_2 * (3.375 * pa_y[j] * fl3_fx + 3.375 * pc_y[j] * fl3_fx + 0.75 * pa_yyy[j] * fl2_fx + 4.5 * pa_yy[j] * pc_y[j] * fl2_fx + 2.25 * pa_y[j] * pc_yy[j] * fl2_fx + 4.5 * pa_yz[j] * fl2_fx * pc_z[j] + 13.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] + 4.5 * pa_y[j] * fl2_fx * pc_zz[j] + 2.25 * pa_yz[j] * fl2_fx * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_zz[j] + 4.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] + 2.25 * pc_yz[j] * fl2_fx * pa_z[j] + 6.75 * pc_yz[j] * fl2_fx * pb_z[j] + 4.5 * pc_y[j] * fl2_fx * pb_zz[j] + 1.5 * pa_yyyz[j] * pc_z[j] * fl1_fx + 4.5 * pa_yyy[j] * pc_z[j] * pb_z[j] * fl1_fx + 3.0 * pa_yyy[j] * pc_zz[j] * fl1_fx + 4.5 * pa_yyz[j] * pc_y[j] * pb_z[j] * fl1_fx + 4.5 * pa_yyz[j] * pc_yz[j] * fl1_fx + 13.5 * pa_yy[j] * pc_yz[j] * pb_z[j] * fl1_fx + 4.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 4.5 * pa_yz[j] * pc_yy[j] * pb_z[j] * fl1_fx + 4.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 4.5 * pa_yz[j] * fl1_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 4.5 * pa_yz[j] * fl1_fx * pb_zz[j] * pc_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_z[j] * pb_zzz[j] + 4.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_zzz[j] + 3.0 * pa_yyyz[j] * pb_z[j] * pc_zz[j] + 3.0 * pa_yyy[j] * pc_zz[j] * pb_zz[j] + 9.0 * pa_yyz[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_zzz[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_zzz[j]);

                t_yyyz_zzz[j] += fl_s_0_0_3 * (-1.125 * pa_y[j] * fl3_fx - 3.375 * pc_y[j] * fl3_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 4.5 * pa_y[j] * pc_yy[j] * fl2_fx - 0.75 * pc_yyy[j] * fl2_fx - 9.0 * pa_y[j] * fl2_fx * pc_zz[j] - 2.25 * pa_yz[j] * fl2_fx * pc_z[j] - 6.75 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 4.5 * pc_yz[j] * fl2_fx * pa_z[j] - 13.5 * pc_yz[j] * fl2_fx * pb_z[j] - 4.5 * pc_yzz[j] * fl2_fx - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_zz[j] - 3.0 * pa_yyy[j] * pc_zz[j] * fl1_fx - 4.5 * pa_yyz[j] * pc_yz[j] * fl1_fx - 13.5 * pa_yy[j] * pc_yz[j] * pb_z[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yzz[j] * fl1_fx - 4.5 * pa_yz[j] * pc_yy[j] * pb_z[j] * fl1_fx - 4.5 * pa_yz[j] * pc_yyz[j] * fl1_fx - 13.5 * pa_y[j] * pc_yyz[j] * pb_z[j] * fl1_fx - 4.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yyy[j] * pa_z[j] * pb_z[j] * fl1_fx - 1.5 * pc_yyy[j] * fl1_fx * pb_zz[j] - 1.5 * pa_yz[j] * fl1_fx * pc_zzz[j] - 4.5 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_z[j] - 4.5 * pa_yz[j] * fl1_fx * pb_z[j] * pc_zz[j] - 4.5 * pa_y[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 4.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 4.5 * pc_yzz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] - pa_yyyz[j] * pc_zzz[j] - 3.0 * pa_yyy[j] * pc_zzz[j] * pb_z[j] - 9.0 * pa_yyz[j] * pc_yzz[j] * pb_z[j] - 9.0 * pa_yy[j] * pc_yzz[j] * pb_zz[j] - 9.0 * pa_yz[j] * pc_yyz[j] * pb_zz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_zzz[j] - pc_yyy[j] * pa_z[j] * pb_zzz[j]);

                t_yyyz_zzz[j] += fl_s_0_0_4 * (1.125 * pc_y[j] * fl3_fx + 2.25 * pa_y[j] * pc_yy[j] * fl2_fx + 1.5 * pc_yyy[j] * fl2_fx + 4.5 * pa_y[j] * fl2_fx * pc_zz[j] + 9.0 * pc_yzz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pa_z[j] + 6.75 * pc_yz[j] * fl2_fx * pb_z[j] + 9.0 * pa_yy[j] * pc_yzz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_yyz[j] * fl1_fx + 13.5 * pa_y[j] * pc_yyz[j] * pb_z[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 1.5 * pc_yyy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_yyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_yyyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_yyy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pc_zzzz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_zzz[j] + 4.5 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 1.5 * pc_yzzz[j] * fl1_fx * pa_z[j] + 4.5 * pc_yzzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 4.5 * pc_yzz[j] * fl1_fx * pb_zz[j] + pa_yyy[j] * pc_zzzz[j] + 3.0 * pa_yyz[j] * pc_yzzz[j] + 9.0 * pa_yy[j] * pc_yzzz[j] * pb_z[j] + 9.0 * pa_yz[j] * pc_yyzz[j] * pb_z[j] + 9.0 * pa_y[j] * pc_yyzz[j] * pb_zz[j] + 3.0 * pc_yyyz[j] * pa_z[j] * pb_zz[j] + pc_yyyz[j] * pb_zzz[j]);

                t_yyyz_zzz[j] += fl_s_0_0_5 * (-0.75 * pc_yyy[j] * fl2_fx - 4.5 * pc_yzz[j] * fl2_fx - 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 1.5 * pc_yyyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_yyyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_yyyzz[j] * fl1_fx - 1.5 * pa_y[j] * fl1_fx * pc_zzzz[j] - 1.5 * pc_yzzzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * fl1_fx * pa_z[j] - 4.5 * pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_yzzzz[j] - 3.0 * pa_yz[j] * pc_yyzzz[j] - 9.0 * pa_y[j] * pc_yyzzz[j] * pb_z[j] - 3.0 * pc_yyyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yyyzz[j] * pb_zz[j]);

                t_yyyz_zzz[j] += fl_s_0_0_6 * (3.0 * pc_yyyzz[j] * fl1_fx + 1.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyzzzz[j] + pc_yyyzzz[j] * pa_z[j] + 3.0 * pc_yyyzzz[j] * pb_z[j]);

                t_yyyz_zzz[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_120_121(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (120,121)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_xxx = primBuffer.data(150 * idx + 120);

            // Batch of Integrals (120,121)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxx, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, \
                                     pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, \
                                     pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, \
                                     pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyzz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_xxx[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 1.5 * pa_yyzz[j] * pb_x[j] * fl1_fx + 0.25 * fl2_fx * pb_xxx[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xxx[j] + pa_yyzz[j] * pb_xxx[j]);

                t_yyzz_xxx[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 1.5 * pa_yy[j] * fl2_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * fl2_fx * pa_zz[j] * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * pa_yyzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yyzz[j] * pc_x[j] * fl1_fx - 3.0 * pa_yyz[j] * pc_z[j] * pb_x[j] * fl1_fx - 3.0 * pa_yzz[j] * pc_y[j] * pb_x[j] * fl1_fx - 0.75 * fl2_fx * pb_xx[j] * pc_x[j] - 0.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xxx[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_x[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxx[j] - 3.0 * pa_yyzz[j] * pb_xx[j] * pc_x[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_xxx[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_xxx[j]);

                t_yyzz_xxx[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_zz[j] * pc_x[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 1.5 * pa_yyzz[j] * pc_x[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_z[j] * pb_x[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_y[j] * pb_x[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_xy[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 0.75 * fl2_fx * pb_x[j] * pc_xx[j] + 1.5 * fl2_fx * pb_xx[j] * pc_x[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 3.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xxx[j] + 1.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_xx[j] + 3.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] + 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_x[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] + 3.0 * pa_yyzz[j] * pb_x[j] * pc_xx[j] + 6.0 * pa_yyz[j] * pc_xz[j] * pb_xx[j] + pa_yy[j] * pc_zz[j] * pb_xxx[j] + 6.0 * pa_yzz[j] * pc_xy[j] * pb_xx[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xxx[j] + pc_yy[j] * pa_zz[j] * pb_xxx[j]);

                t_yyzz_xxx[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_yy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.75 * fl2_fx * pc_xzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 3.0 * pa_yyz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_yzz[j] * pc_xy[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 6.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 0.25 * fl2_fx * pc_xxx[j] - 1.5 * fl2_fx * pb_x[j] * pc_xx[j] - 0.75 * fl2_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 3.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xxx[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xxx[j] - 3.0 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_x[j] - 1.5 * fl1_fx * pc_xzz[j] * pb_xx[j] - 1.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_xx[j] - 3.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xx[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] - pa_yyzz[j] * pc_xxx[j] - 6.0 * pa_yyz[j] * pc_xxz[j] * pb_x[j] - 3.0 * pa_yy[j] * pc_xzz[j] * pb_xx[j] - 6.0 * pa_yzz[j] * pc_xxy[j] * pb_x[j] - 12.0 * pa_yz[j] * pc_xyz[j] * pb_xx[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xxx[j] - 3.0 * pc_xyy[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xxx[j]);

                t_yyzz_xxx[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_xzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * pa_yy[j] * pc_xzz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_yyzz[j] * pb_x[j] * fl1_fx + 0.5 * fl2_fx * pc_xxx[j] + 0.75 * fl2_fx * pb_x[j] * pc_xx[j] + 0.5 * pa_yy[j] * fl1_fx * pc_xxx[j] + pa_y[j] * pc_xxxy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + fl1_fx * pa_z[j] * pc_xxxz[j] + 1.5 * fl1_fx * pc_xxzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xxx[j] + 3.0 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_x[j] + 1.5 * fl1_fx * pc_xzz[j] * pb_xx[j] + 2.0 * pa_yyz[j] * pc_xxxz[j] + 3.0 * pa_yy[j] * pc_xxzz[j] * pb_x[j] + 2.0 * pa_yzz[j] * pc_xxxy[j] + 12.0 * pa_yz[j] * pc_xxyz[j] * pb_x[j] + 6.0 * pa_y[j] * pc_xyzz[j] * pb_xx[j] + 3.0 * pc_xxyy[j] * pa_zz[j] * pb_x[j] + 6.0 * pc_xyyz[j] * pa_z[j] * pb_xx[j] + pc_yyzz[j] * pb_xxx[j]);

                t_yyzz_xxx[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 0.75 * fl2_fx * pc_xzz[j] - 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 0.25 * fl2_fx * pc_xxx[j] - pa_y[j] * pc_xxxy[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 1.5 * pc_xxyy[j] * fl1_fx * pb_x[j] - 0.5 * fl1_fx * pc_xxxzz[j] - fl1_fx * pa_z[j] * pc_xxxz[j] - 1.5 * fl1_fx * pc_xxzz[j] * pb_x[j] - pa_yy[j] * pc_xxxzz[j] - 4.0 * pa_yz[j] * pc_xxxyz[j] - 6.0 * pa_y[j] * pc_xxyzz[j] * pb_x[j] - pc_xxxyy[j] * pa_zz[j] - 6.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xyyzz[j] * pb_xx[j]);

                t_yyzz_xxx[j] += fl_s_0_0_6 * (1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * fl1_fx * pc_xxxzz[j] + 2.0 * pa_y[j] * pc_xxxyzz[j] + 2.0 * pc_xxxyyz[j] * pa_z[j] + 3.0 * pc_xxyyzz[j] * pb_x[j]);

                t_yyzz_xxx[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_121_122(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (121,122)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_xxy = primBuffer.data(150 * idx + 121);

            // Batch of Integrals (121,122)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxy, \
                                     pb_xy, pb_y, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyyzz, \
                                     pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyy, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyzz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_xxy[j] = fl_s_0_0_0 * (0.25 * pa_y[j] * fl3_fx + 0.5 * pa_yzz[j] * fl2_fx + 0.125 * fl3_fx * pb_y[j] + 0.25 * pa_yy[j] * fl2_fx * pb_y[j] + 0.5 * pa_y[j] * fl2_fx * pb_xx[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + 0.5 * pa_yyzz[j] * fl1_fx * pb_y[j] + pa_yzz[j] * fl1_fx * pb_xx[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xxy[j] + pa_yyzz[j] * pb_xxy[j]);

                t_yyzz_xxy[j] += fl_s_0_0_1 * (-0.75 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - pa_yzz[j] * fl2_fx - pa_yz[j] * fl2_fx * pc_z[j] - 0.75 * pc_y[j] * fl2_fx * pa_zz[j] - 0.375 * fl3_fx * pb_y[j] - 0.25 * pa_yy[j] * fl2_fx * pc_y[j] - 0.5 * pa_yy[j] * fl2_fx * pb_y[j] - 0.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - pa_y[j] * fl2_fx * pb_xx[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * fl2_fx * pa_zz[j] * pb_y[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.5 * pa_yyzz[j] * fl1_fx * pc_y[j] - 0.5 * pa_yyzz[j] * fl1_fx * pb_y[j] - pa_yyz[j] * pc_z[j] * fl1_fx * pb_y[j] - pa_yzz[j] * pc_y[j] * fl1_fx * pb_y[j] - 2.0 * pa_yzz[j] * fl1_fx * pb_x[j] * pc_x[j] - 2.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_xx[j] - pa_yzz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_xx[j] - 0.5 * fl2_fx * pb_xy[j] * pc_x[j] - 0.5 * fl2_fx * pb_xxy[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_y[j] - pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xxy[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] - fl1_fx * pa_zz[j] * pb_xy[j] * pc_x[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxy[j] - pa_yyzz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_yyzz[j] * pb_xy[j] * pc_x[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_xxy[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_xxy[j]);

                t_yyzz_xxy[j] += fl_s_0_0_2 * (0.75 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 2.0 * pa_yz[j] * fl2_fx * pc_z[j] + 0.5 * pa_y[j] * fl2_fx * pc_zz[j] + 0.5 * pa_yzz[j] * fl2_fx + 1.5 * pc_y[j] * fl2_fx * pa_zz[j] + 1.5 * pc_yz[j] * fl2_fx * pa_z[j] + 0.375 * fl3_fx * pb_y[j] + 0.5 * pa_yy[j] * fl2_fx * pc_y[j] + 0.25 * pa_yy[j] * fl2_fx * pb_y[j] + 0.5 * pa_y[j] * pc_yy[j] * fl2_fx + pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.5 * pa_y[j] * fl2_fx * pc_xx[j] + 2.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.5 * pa_y[j] * fl2_fx * pb_xx[j] + 0.25 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_y[j] * fl2_fx * pb_xx[j] + fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 0.25 * fl2_fx * pc_zz[j] * pb_y[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + 0.5 * pa_yyzz[j] * fl1_fx * pc_y[j] + pa_yyz[j] * pc_yz[j] * fl1_fx + pa_yyz[j] * pc_z[j] * fl1_fx * pb_y[j] + 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_y[j] + pa_yzz[j] * pc_yy[j] * fl1_fx + pa_yzz[j] * pc_y[j] * fl1_fx * pb_y[j] + 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] + pa_yzz[j] * fl1_fx * pc_xx[j] + 4.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_x[j] + pa_y[j] * fl1_fx * pc_zz[j] * pb_xx[j] + 2.0 * pa_yzz[j] * fl1_fx * pb_x[j] * pc_x[j] + 2.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_xx[j] + 0.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_x[j] + 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xx[j] + 1.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_xx[j] + 0.25 * fl2_fx * pc_xx[j] * pb_y[j] + fl2_fx * pb_xy[j] * pc_x[j] + 0.25 * fl2_fx * pb_xxy[j] + pa_yy[j] * fl1_fx * pb_x[j] * pc_xy[j] + 0.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_y[j] + pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] + pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xx[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] + fl1_fx * pa_zz[j] * pb_xy[j] * pc_x[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] + 2.0 * pa_yyzz[j] * pb_x[j] * pc_xy[j] + pa_yyzz[j] * pc_xx[j] * pb_y[j] + 2.0 * pa_yyz[j] * pc_yz[j] * pb_xx[j] + 4.0 * pa_yyz[j] * pc_xz[j] * pb_xy[j] + pa_yy[j] * pc_zz[j] * pb_xxy[j] + 2.0 * pa_yzz[j] * pc_yy[j] * pb_xx[j] + 4.0 * pa_yzz[j] * pc_xy[j] * pb_xy[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xxy[j] + pc_yy[j] * pa_zz[j] * pb_xxy[j]);

                t_yyzz_xxy[j] += fl_s_0_0_3 * (-0.25 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - pa_y[j] * fl2_fx * pc_zz[j] - pa_yz[j] * fl2_fx * pc_z[j] - 3.0 * pc_yz[j] * fl2_fx * pa_z[j] - 0.75 * pc_yzz[j] * fl2_fx - 0.75 * pc_y[j] * fl2_fx * pa_zz[j] - 0.125 * fl3_fx * pb_y[j] - 0.25 * pa_yy[j] * fl2_fx * pc_y[j] - pa_y[j] * pc_yy[j] * fl2_fx - 0.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - pa_y[j] * fl2_fx * pc_xx[j] - pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.25 * pc_yyy[j] * fl2_fx - 0.5 * pc_yy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - pa_yyz[j] * pc_yz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_y[j] - pa_yzz[j] * pc_yy[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] - pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xxz[j] - 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_x[j] - pa_yzz[j] * fl1_fx * pc_xx[j] - 4.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_x[j] - pa_y[j] * fl1_fx * pc_zz[j] * pb_xx[j] - 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx - 0.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_y[j] - pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxy[j] * fl1_fx * pa_zz[j] - 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_x[j] - 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xx[j] - 0.5 * fl2_fx * pc_xx[j] * pb_y[j] - 0.5 * fl2_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xxy[j] - pa_yy[j] * fl1_fx * pb_x[j] * pc_xy[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] - 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] - pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] - pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] - 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] - pc_xyy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xxy[j] - fl1_fx * pa_z[j] * pc_xxz[j] * pb_y[j] - fl1_fx * pc_xzz[j] * pb_xy[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xx[j] * pb_y[j] - 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] - pa_yyzz[j] * pc_xxy[j] - 4.0 * pa_yyz[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_yyz[j] * pc_xxz[j] * pb_y[j] - pa_yy[j] * pc_yzz[j] * pb_xx[j] - 2.0 * pa_yy[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_yzz[j] * pc_xyy[j] * pb_x[j] - 2.0 * pa_yzz[j] * pc_xxy[j] * pb_y[j] - 4.0 * pa_yz[j] * pc_yyz[j] * pb_xx[j] - 8.0 * pa_yz[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xxy[j] - pc_yyy[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xyy[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xxy[j]);

                t_yyzz_xxy[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 0.5 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pc_yzz[j] * fl2_fx + 1.5 * pc_yz[j] * fl2_fx * pa_z[j] + 0.5 * pa_y[j] * pc_yy[j] * fl2_fx + 0.5 * pa_y[j] * fl2_fx * pc_xx[j] + 0.5 * pc_yyy[j] * fl2_fx + 0.25 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xxy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pc_zz[j] * pb_y[j] + 0.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 2.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + pa_y[j] * pc_yyzz[j] * fl1_fx + pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] + pa_y[j] * fl1_fx * pc_xxzz[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xxz[j] + 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_x[j] + 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx + pc_yyyz[j] * pa_z[j] * fl1_fx + pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxy[j] * fl1_fx * pa_zz[j] + 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] + 0.25 * fl2_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_yy[j] * fl1_fx * pc_xxy[j] + pa_y[j] * pc_xxyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] + pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] + pc_xyyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] + pc_xyy[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pc_xxzz[j] * pb_y[j] + fl1_fx * pa_z[j] * pc_xxz[j] * pb_y[j] + fl1_fx * pc_xzz[j] * pb_xy[j] + 2.0 * pa_yyz[j] * pc_xxyz[j] + 2.0 * pa_yy[j] * pc_xyzz[j] * pb_x[j] + pa_yy[j] * pc_xxzz[j] * pb_y[j] + 2.0 * pa_yzz[j] * pc_xxyy[j] + 8.0 * pa_yz[j] * pc_xyyz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_y[j] * pc_yyzz[j] * pb_xx[j] + 4.0 * pa_y[j] * pc_xyzz[j] * pb_xy[j] + 2.0 * pc_xyyy[j] * pa_zz[j] * pb_x[j] + pc_xxyy[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_xy[j] + pc_yyzz[j] * pb_xxy[j]);

                t_yyzz_xxy[j] += fl_s_0_0_5 * (-0.75 * pc_yzz[j] * fl2_fx - 0.25 * pc_yyy[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - pa_y[j] * pc_yyzz[j] * fl1_fx - pa_y[j] * fl1_fx * pc_xxzz[j] - pc_yyyz[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyyzz[j] * fl1_fx - 0.5 * pc_yyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - pa_y[j] * pc_xxyy[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_xxzz[j] * pb_y[j] - pa_yy[j] * pc_xxyzz[j] - 4.0 * pa_yz[j] * pc_xxyyz[j] - 4.0 * pa_y[j] * pc_xyyzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xxyzz[j] * pb_y[j] - pc_xxyyy[j] * pa_zz[j] - 4.0 * pc_xyyyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - pc_yyyzz[j] * pb_xx[j] - 2.0 * pc_xyyzz[j] * pb_xy[j]);

                t_yyzz_xxy[j] += fl_s_0_0_6 * (0.5 * pc_yyyzz[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_xxyyzz[j] + 2.0 * pc_xxyyyz[j] * pa_z[j] + 2.0 * pc_xyyyzz[j] * pb_x[j] + pc_xxyyzz[j] * pb_y[j]);

                t_yyzz_xxy[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_122_123(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (122,123)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_xxz = primBuffer.data(150 * idx + 122);

            // Batch of Integrals (122,123)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxz, \
                                     pb_xz, pb_z, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, \
                                     pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyzz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_xxz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_z[j] + 0.5 * pa_yyz[j] * fl2_fx + 0.125 * fl3_fx * pb_z[j] + 0.25 * pa_yy[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_yyzz[j] * fl1_fx * pb_z[j] + pa_yyz[j] * fl1_fx * pb_xx[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xxz[j] + pa_yyzz[j] * pb_xxz[j]);

                t_yyzz_xxz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - pa_yyz[j] * fl2_fx - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - pa_yz[j] * pc_y[j] * fl2_fx - 0.375 * fl3_fx * pb_z[j] - 0.5 * pa_yy[j] * fl2_fx * pb_z[j] - 0.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - fl2_fx * pa_z[j] * pb_xx[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_yyzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyzz[j] * fl1_fx * pb_z[j] - pa_yyz[j] * pc_z[j] * fl1_fx * pb_z[j] - 2.0 * pa_yyz[j] * fl1_fx * pb_x[j] * pc_x[j] - pa_yyz[j] * fl1_fx * pb_xx[j] - 1.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_xx[j] - pa_yzz[j] * pc_y[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xx[j] - 0.5 * fl2_fx * pb_xz[j] * pc_x[j] - 0.5 * fl2_fx * pb_xxz[j] - pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xxz[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] - fl1_fx * pa_zz[j] * pb_xz[j] * pc_x[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxz[j] - pa_yyzz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_yyzz[j] * pb_xz[j] * pc_x[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_xxz[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_xxz[j]);

                t_yyzz_xxz[j] += fl_s_0_0_2 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.5 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * pc_z[j] * fl2_fx + 2.0 * pa_yz[j] * pc_y[j] * fl2_fx + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 0.5 * pc_yy[j] * pa_z[j] * fl2_fx + 0.375 * fl3_fx * pb_z[j] + 0.25 * pa_yy[j] * fl2_fx * pb_z[j] + pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 0.25 * pc_yy[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pa_zz[j] * pc_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_xx[j] + 2.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_yyzz[j] * fl1_fx * pc_z[j] + pa_yyz[j] * pc_zz[j] * fl1_fx + pa_yyz[j] * pc_z[j] * fl1_fx * pb_z[j] + pa_yyz[j] * fl1_fx * pc_xx[j] + 2.0 * pa_yyz[j] * fl1_fx * pb_x[j] * pc_x[j] + 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_x[j] + 1.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_xx[j] + pa_yzz[j] * pc_yz[j] * fl1_fx + pa_yzz[j] * pc_y[j] * fl1_fx * pb_z[j] + 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 4.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_x[j] + 2.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xx[j] + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 0.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] + pc_yy[j] * pa_z[j] * fl1_fx * pb_xx[j] + 0.25 * fl2_fx * pc_xx[j] * pb_z[j] + fl2_fx * pb_xz[j] * pc_x[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] + pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] + 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_zz[j] * pb_x[j] * pc_xz[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xx[j] * pb_z[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] + 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] + fl1_fx * pa_zz[j] * pb_xz[j] * pc_x[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] + 2.0 * pa_yyzz[j] * pb_x[j] * pc_xz[j] + pa_yyzz[j] * pc_xx[j] * pb_z[j] + 2.0 * pa_yyz[j] * pc_zz[j] * pb_xx[j] + 4.0 * pa_yyz[j] * pc_xz[j] * pb_xz[j] + pa_yy[j] * pc_zz[j] * pb_xxz[j] + 2.0 * pa_yzz[j] * pc_yz[j] * pb_xx[j] + 4.0 * pa_yzz[j] * pc_xy[j] * pb_xz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xxz[j] + pc_yy[j] * pa_zz[j] * pb_xxz[j]);

                t_yyzz_xxz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.25 * fl3_fx * pa_z[j] - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - pa_yz[j] * pc_y[j] * fl2_fx - 3.0 * pa_y[j] * pc_yz[j] * fl2_fx - pc_yy[j] * pa_z[j] * fl2_fx - 0.75 * pc_yyz[j] * fl2_fx - 0.125 * fl3_fx * pb_z[j] - 0.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.5 * pc_yy[j] * fl2_fx * pb_z[j] - fl2_fx * pa_z[j] * pc_zz[j] - fl2_fx * pa_z[j] * pc_xx[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pc_xxz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_x[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - pa_yyz[j] * pc_zz[j] * fl1_fx - pa_yyz[j] * fl1_fx * pc_xx[j] - 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_x[j] - pa_yzz[j] * pc_yz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_xxy[j] * fl1_fx - 4.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_x[j] - pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 0.5 * pc_yyz[j] * pa_zz[j] * fl1_fx - 0.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] - pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_yy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] - 0.5 * fl2_fx * pc_xx[j] * pb_z[j] - 0.5 * fl2_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] - pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] - pc_xyy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xxz[j] - 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_x[j] - fl1_fx * pa_z[j] * pc_xxz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - fl1_fx * pc_xzz[j] * pb_xz[j] - fl1_fx * pa_zz[j] * pb_x[j] * pc_xz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xx[j] * pb_z[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] - 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxz[j] - pa_yyzz[j] * pc_xxz[j] - 4.0 * pa_yyz[j] * pc_xzz[j] * pb_x[j] - 2.0 * pa_yyz[j] * pc_xxz[j] * pb_z[j] - pa_yy[j] * pc_zzz[j] * pb_xx[j] - 2.0 * pa_yy[j] * pc_xzz[j] * pb_xz[j] - 4.0 * pa_yzz[j] * pc_xyz[j] * pb_x[j] - 2.0 * pa_yzz[j] * pc_xxy[j] * pb_z[j] - 4.0 * pa_yz[j] * pc_yzz[j] * pb_xx[j] - 8.0 * pa_yz[j] * pc_xyz[j] * pb_xz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xxz[j] - pc_yyz[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xyy[j] * pa_zz[j] * pb_xz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xxz[j]);

                t_yyzz_xxz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 0.5 * pc_yy[j] * pa_z[j] * fl2_fx + 1.5 * pc_yyz[j] * fl2_fx + 0.25 * pc_yy[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pc_xxz[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pa_z[j] * pc_xx[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_xxz[j] * fl1_fx + 2.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + 2.0 * pa_yz[j] * pc_xxy[j] * fl1_fx + pa_y[j] * pc_yzzz[j] * fl1_fx + pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_xxyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 0.5 * pc_yyz[j] * pa_zz[j] * fl1_fx + pc_yyzz[j] * pa_z[j] * fl1_fx + pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxyy[j] * pa_z[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] + 0.5 * pc_yyzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] + 0.25 * fl2_fx * pc_xx[j] * pb_z[j] + pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] + pc_xyy[j] * fl1_fx * pb_xz[j] + fl1_fx * pa_z[j] * pc_xxzz[j] + fl1_fx * pc_xzzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_xxzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xxz[j] + 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_x[j] + fl1_fx * pa_z[j] * pc_xxz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + fl1_fx * pc_xzz[j] * pb_xz[j] + 2.0 * pa_yyz[j] * pc_xxzz[j] + 2.0 * pa_yy[j] * pc_xzzz[j] * pb_x[j] + pa_yy[j] * pc_xxzz[j] * pb_z[j] + 2.0 * pa_yzz[j] * pc_xxyz[j] + 8.0 * pa_yz[j] * pc_xyzz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_xx[j] + 4.0 * pa_y[j] * pc_xyzz[j] * pb_xz[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_x[j] + pc_xxyy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_yyzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_xz[j] + pc_yyzz[j] * pb_xxz[j]);

                t_yyzz_xxz[j] += fl_s_0_0_5 * (-0.75 * pc_yyz[j] * fl2_fx - 0.25 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pc_xxz[j] - pa_y[j] * pc_yzzz[j] * fl1_fx - 3.0 * pa_y[j] * pc_xxyz[j] * fl1_fx - pc_yyzz[j] * pa_z[j] * fl1_fx - pc_xxyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyzzz[j] * fl1_fx - 0.5 * pc_yyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_xxzzz[j] - fl1_fx * pa_z[j] * pc_xxzz[j] - fl1_fx * pc_xzzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_xxzz[j] * pb_z[j] - pa_yy[j] * pc_xxzzz[j] - 4.0 * pa_yz[j] * pc_xxyzz[j] - 4.0 * pa_y[j] * pc_xyzzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xxyzz[j] * pb_z[j] - pc_xxyyz[j] * pa_zz[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - pc_yyzzz[j] * pb_xx[j] - 2.0 * pc_xyyzz[j] * pb_xz[j]);

                t_yyzz_xxz[j] += fl_s_0_0_6 * (0.5 * pc_yyzzz[j] * fl1_fx + 1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_xxzzz[j] + 2.0 * pa_y[j] * pc_xxyzzz[j] + 2.0 * pc_xxyyzz[j] * pa_z[j] + 2.0 * pc_xyyzzz[j] * pb_x[j] + pc_xxyyzz[j] * pb_z[j]);

                t_yyzz_xxz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_123_124(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (123,124)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_xyy = primBuffer.data(150 * idx + 123);

            // Batch of Integrals (123,124)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xy, pb_xyy, \
                                     pb_y, pb_yy, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyyzz, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yyzz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_xyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 0.25 * pa_yy[j] * fl2_fx * pb_x[j] + pa_y[j] * fl2_fx * pb_xy[j] + 0.5 * pa_yyzz[j] * pb_x[j] * fl1_fx + 2.0 * pa_yzz[j] * fl1_fx * pb_xy[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xyy[j] + pa_yyzz[j] * pb_xyy[j]);

                t_yyzz_xyy[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_zz[j] * pb_x[j] - 0.5 * pa_yy[j] * fl2_fx * pb_x[j] - 0.25 * pa_yy[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.0 * pa_y[j] * fl2_fx * pb_xy[j] - 1.5 * pc_y[j] * fl2_fx * pb_xy[j] - 0.5 * pa_yyzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yyzz[j] * pc_x[j] * fl1_fx - pa_yyz[j] * pc_z[j] * pb_x[j] * fl1_fx - 3.0 * pa_yzz[j] * pc_y[j] * pb_x[j] * fl1_fx - 2.0 * pa_yzz[j] * fl1_fx * pc_x[j] * pb_y[j] - 4.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_xy[j] - 2.0 * pa_yzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_y[j] * fl1_fx * pa_zz[j] * pb_xy[j] - 0.25 * fl2_fx * pc_x[j] * pb_yy[j] - 0.5 * fl2_fx * pb_xyy[j] - pa_yy[j] * fl1_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xyy[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_yy[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xyy[j] - 2.0 * pa_yyzz[j] * pb_xy[j] * pc_y[j] - pa_yyzz[j] * pc_x[j] * pb_yy[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_xyy[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_xyy[j]);

                t_yyzz_xyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * fl2_fx * pa_zz[j] * pc_x[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 0.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.25 * pa_yy[j] * fl2_fx * pb_x[j] + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 2.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + pa_y[j] * fl2_fx * pb_xy[j] + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * pc_y[j] * fl2_fx * pb_xy[j] + 0.5 * pa_yyzz[j] * pc_x[j] * fl1_fx + pa_yyz[j] * pc_z[j] * pb_x[j] * fl1_fx + pa_yyz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_y[j] * pb_x[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_xy[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_y[j] + 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xy[j] + 2.0 * pa_yzz[j] * fl1_fx * pc_x[j] * pb_y[j] + 4.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_xy[j] + 3.0 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_y[j] + 6.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_y[j] * fl1_fx * pa_zz[j] * pb_xy[j] + 0.5 * fl2_fx * pc_x[j] * pb_yy[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_yy[j] + pa_yy[j] * fl1_fx * pc_xy[j] * pb_y[j] + pa_yy[j] * fl1_fx * pb_xy[j] * pc_y[j] + 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] + 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] + pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xyy[j] + fl1_fx * pa_z[j] * pc_xz[j] * pb_yy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] + 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_yy[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] + pa_yyzz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_yyzz[j] * pc_xy[j] * pb_y[j] + 4.0 * pa_yyz[j] * pc_yz[j] * pb_xy[j] + 2.0 * pa_yyz[j] * pc_xz[j] * pb_yy[j] + pa_yy[j] * pc_zz[j] * pb_xyy[j] + 4.0 * pa_yzz[j] * pc_yy[j] * pb_xy[j] + 2.0 * pa_yzz[j] * pc_xy[j] * pb_yy[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xyy[j] + pc_yy[j] * pa_zz[j] * pb_xyy[j]);

                t_yyzz_xyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * fl2_fx * pc_xzz[j] - 3.0 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.25 * pa_yy[j] * fl2_fx * pc_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.0 * pc_yy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 1.5 * pc_y[j] * fl2_fx * pb_xy[j] - pa_yyz[j] * pc_xz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yy[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_yzz[j] * pc_xy[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 6.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] - 4.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_y[j] - 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 3.0 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx - 6.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_y[j] - 6.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xy[j] - 0.25 * fl2_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xyy[j] - 0.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_yy[j] - pa_yy[j] * fl1_fx * pc_xy[j] * pb_y[j] - pa_y[j] * pc_yyy[j] * fl1_fx * pb_x[j] - 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] - pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] - pc_yyy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pc_xzz[j] * pb_yy[j] - fl1_fx * pa_z[j] * pc_xz[j] * pb_yy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] - pa_yyzz[j] * pc_xyy[j] - 2.0 * pa_yyz[j] * pc_yyz[j] * pb_x[j] - 4.0 * pa_yyz[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_yy[j] * pc_yzz[j] * pb_xy[j] - pa_yy[j] * pc_xzz[j] * pb_yy[j] - 2.0 * pa_yzz[j] * pc_yyy[j] * pb_x[j] - 4.0 * pa_yzz[j] * pc_xyy[j] * pb_y[j] - 8.0 * pa_yz[j] * pc_yyz[j] * pb_xy[j] - 4.0 * pa_yz[j] * pc_xyz[j] * pb_yy[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xyy[j] - 2.0 * pc_yyy[j] * pa_zz[j] * pb_xy[j] - pc_xyy[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xyy[j]);

                t_yyzz_xyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * fl2_fx * pc_xzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 0.5 * pa_yy[j] * pc_xzz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] + 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx + 6.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xy[j] + 0.5 * pa_yy[j] * fl1_fx * pc_xyy[j] + pa_y[j] * pc_xyyy[j] * fl1_fx + pa_y[j] * pc_yyy[j] * fl1_fx * pb_x[j] + 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] + pc_xyyy[j] * fl1_fx * pb_y[j] + pc_yyy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pc_xzz[j] * pb_yy[j] + 2.0 * pa_yyz[j] * pc_xyyz[j] + pa_yy[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_yy[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_yzz[j] * pc_xyyy[j] + 4.0 * pa_yz[j] * pc_yyyz[j] * pb_x[j] + 8.0 * pa_yz[j] * pc_xyyz[j] * pb_y[j] + 4.0 * pa_y[j] * pc_yyzz[j] * pb_xy[j] + 2.0 * pa_y[j] * pc_xyzz[j] * pb_yy[j] + pc_yyyy[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xyyy[j] * pa_zz[j] * pb_y[j] + 4.0 * pc_yyyz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_yy[j] + pc_yyzz[j] * pb_xyy[j]);

                t_yyzz_xyy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_xzz[j] - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - pa_y[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_xyyyy[j] * fl1_fx - 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] - pc_xyyy[j] * fl1_fx * pb_y[j] - pa_yy[j] * pc_xyyzz[j] - 4.0 * pa_yz[j] * pc_xyyyz[j] - 2.0 * pa_y[j] * pc_yyyzz[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xyyzz[j] * pb_y[j] - pc_xyyyy[j] * pa_zz[j] - 2.0 * pc_yyyyz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xyyyz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_yyyzz[j] * pb_xy[j] - pc_xyyzz[j] * pb_yy[j]);

                t_yyzz_xyy[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xyyyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyyyzz[j] + 2.0 * pc_xyyyyz[j] * pa_z[j] + pc_yyyyzz[j] * pb_x[j] + 2.0 * pc_xyyyzz[j] * pb_y[j]);

                t_yyzz_xyy[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_124_125(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (124,125)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_xyz = primBuffer.data(150 * idx + 124);

            // Batch of Integrals (124,125)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xy, pb_xyz, \
                                     pb_xz, pb_y, pb_yz, pb_z, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, \
                                     pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyzz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yyzz_xyz[j] = fl_s_0_0_0 * (pa_yz[j] * fl2_fx * pb_x[j] + 0.5 * pa_y[j] * fl2_fx * pb_xz[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + pa_yyz[j] * fl1_fx * pb_xy[j] + pa_yzz[j] * fl1_fx * pb_xz[j] + 0.25 * fl2_fx * pb_xyz[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xyz[j] + pa_yyzz[j] * pb_xyz[j]);

                t_yyzz_xyz[j] += fl_s_0_0_1 * (-pa_yz[j] * fl2_fx * pc_x[j] - 2.0 * pa_yz[j] * fl2_fx * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - pa_y[j] * fl2_fx * pb_xz[j] - 0.75 * pc_y[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - fl2_fx * pa_z[j] * pb_xy[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - pa_yyz[j] * fl1_fx * pb_x[j] * pc_y[j] - pa_yyz[j] * fl1_fx * pc_x[j] * pb_y[j] - pa_yyz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_xy[j] - 2.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xy[j] - pa_yzz[j] * fl1_fx * pb_x[j] * pc_z[j] - pa_yzz[j] * fl1_fx * pc_x[j] * pb_z[j] - 2.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_xz[j] - pa_yzz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_yz[j] - 0.5 * fl2_fx * pb_xyz[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_y[j] - 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xyz[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] - 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_yz[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xyz[j] - pa_yyzz[j] * pb_xy[j] * pc_z[j] - pa_yyzz[j] * pb_xz[j] * pc_y[j] - pa_yyzz[j] * pc_x[j] * pb_yz[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_xyz[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_xyz[j]);

                t_yyzz_xyz[j] += fl_s_0_0_2 * (2.0 * pa_yz[j] * fl2_fx * pc_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] + pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pa_z[j] + 3.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.5 * pa_y[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_y[j] * fl2_fx * pb_xz[j] + fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_xy[j] + 0.5 * fl2_fx * pa_z[j] * pb_xy[j] + pa_yyz[j] * fl1_fx * pc_xy[j] + pa_yyz[j] * fl1_fx * pb_x[j] * pc_y[j] + pa_yyz[j] * fl1_fx * pc_x[j] * pb_y[j] + 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_x[j] + 1.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_xy[j] + 2.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_x[j] + 2.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 2.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xy[j] + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] + pa_yzz[j] * fl1_fx * pc_xz[j] + 2.0 * pa_yz[j] * fl1_fx * pc_zz[j] * pb_x[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_z[j] + pa_y[j] * fl1_fx * pc_zz[j] * pb_xz[j] + pa_yzz[j] * fl1_fx * pb_x[j] * pc_z[j] + pa_yzz[j] * fl1_fx * pc_x[j] * pb_z[j] + 2.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_xz[j] + pc_yy[j] * pa_z[j] * fl1_fx * pb_xy[j] + 1.5 * pc_yz[j] * fl1_fx * pa_zz[j] * pb_x[j] + 1.5 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_z[j] + 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_xz[j] + 0.5 * fl2_fx * pc_x[j] * pb_yz[j] + 0.25 * fl2_fx * pb_xyz[j] + 0.5 * pa_yy[j] * fl1_fx * pc_xy[j] * pb_z[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_y[j] + 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] + pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] + pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_y[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] + fl1_fx * pa_z[j] * pc_xz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_yz[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] + pa_yyzz[j] * pb_x[j] * pc_yz[j] + pa_yyzz[j] * pc_xz[j] * pb_y[j] + pa_yyzz[j] * pc_xy[j] * pb_z[j] + 2.0 * pa_yyz[j] * pc_zz[j] * pb_xy[j] + 2.0 * pa_yyz[j] * pc_yz[j] * pb_xz[j] + 2.0 * pa_yyz[j] * pc_xz[j] * pb_yz[j] + pa_yy[j] * pc_zz[j] * pb_xyz[j] + 2.0 * pa_yzz[j] * pc_yz[j] * pb_xy[j] + 2.0 * pa_yzz[j] * pc_yy[j] * pb_xz[j] + 2.0 * pa_yzz[j] * pc_xy[j] * pb_yz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xyz[j] + pc_yy[j] * pa_zz[j] * pb_xyz[j]);

                t_yyzz_xyz[j] += fl_s_0_0_3 * (-3.0 * pa_y[j] * fl2_fx * pc_xz[j] - pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pc_xy[j] * fl2_fx * pa_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pc_xz[j] * pb_y[j] - 0.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - pa_yyz[j] * fl1_fx * pc_xy[j] - 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_x[j] - 1.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_y[j] - 2.0 * pa_yz[j] * pc_xyy[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_x[j] - 2.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xzz[j] - pa_y[j] * fl1_fx * pc_zzz[j] * pb_x[j] - pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] - pa_yzz[j] * fl1_fx * pc_xz[j] - 2.0 * pa_yz[j] * fl1_fx * pc_zz[j] * pb_x[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_z[j] - pa_y[j] * fl1_fx * pc_zz[j] * pb_xz[j] - pc_yyy[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_yy[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pa_zz[j] - 3.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_yz[j] * fl1_fx * pa_zz[j] * pb_x[j] - 1.5 * pc_xy[j] * fl1_fx * pa_zz[j] * pb_z[j] - 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xy[j] * pb_z[j] - pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] - pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] - pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xyz[j] - fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_xzz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_y[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] - fl1_fx * pa_z[j] * pc_xz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xyz[j] - pa_yyzz[j] * pc_xyz[j] - 2.0 * pa_yyz[j] * pc_yzz[j] * pb_x[j] - 2.0 * pa_yyz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_yyz[j] * pc_xyz[j] * pb_z[j] - pa_yy[j] * pc_zzz[j] * pb_xy[j] - pa_yy[j] * pc_yzz[j] * pb_xz[j] - pa_yy[j] * pc_xzz[j] * pb_yz[j] - 2.0 * pa_yzz[j] * pc_yyz[j] * pb_x[j] - 2.0 * pa_yzz[j] * pc_xyz[j] * pb_y[j] - 2.0 * pa_yzz[j] * pc_xyy[j] * pb_z[j] - 4.0 * pa_yz[j] * pc_yzz[j] * pb_xy[j] - 4.0 * pa_yz[j] * pc_yyz[j] * pb_xz[j] - 4.0 * pa_yz[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xyz[j] - pc_yyz[j] * pa_zz[j] * pb_xy[j] - pc_yyy[j] * pa_zz[j] * pb_xz[j] - pc_xyy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xyz[j]);

                t_yyzz_xyz[j] += fl_s_0_0_4 * (1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 2.0 * pa_yz[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] + pa_y[j] * fl1_fx * pc_xzzz[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xzz[j] + pa_y[j] * fl1_fx * pc_zzz[j] * pb_x[j] + pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] + pc_xyyy[j] * pa_z[j] * fl1_fx + pc_yyy[j] * pa_z[j] * fl1_fx * pb_x[j] + pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pa_zz[j] + 3.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_xz[j] + pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_xzzz[j] * pb_y[j] + fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_xzz[j] * pb_yz[j] + 2.0 * pa_yyz[j] * pc_xyzz[j] + pa_yy[j] * pc_yzzz[j] * pb_x[j] + pa_yy[j] * pc_xzzz[j] * pb_y[j] + pa_yy[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_yzz[j] * pc_xyyz[j] + 4.0 * pa_yz[j] * pc_yyzz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xyzz[j] * pb_y[j] + 4.0 * pa_yz[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_xy[j] + 2.0 * pa_y[j] * pc_yyzz[j] * pb_xz[j] + 2.0 * pa_y[j] * pc_xyzz[j] * pb_yz[j] + pc_yyyz[j] * pa_zz[j] * pb_x[j] + pc_xyyz[j] * pa_zz[j] * pb_y[j] + pc_xyyy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_yyzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_yz[j] + pc_yyzz[j] * pb_xyz[j]);

                t_yyzz_xyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_y[j] * pc_xyyz[j] * fl1_fx - pa_y[j] * fl1_fx * pc_xzzz[j] - pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_xzzz[j] * pb_y[j] - pa_yy[j] * pc_xyzzz[j] - 4.0 * pa_yz[j] * pc_xyyzz[j] - 2.0 * pa_y[j] * pc_yyzzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xyzzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_xyyzz[j] * pb_z[j] - pc_xyyyz[j] * pa_zz[j] - 2.0 * pc_yyyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - pc_yyzzz[j] * pb_xy[j] - pc_yyyzz[j] * pb_xz[j] - pc_xyyzz[j] * pb_yz[j]);

                t_yyzz_xyz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyyzzz[j] + 2.0 * pc_xyyyzz[j] * pa_z[j] + pc_yyyzzz[j] * pb_x[j] + pc_xyyzzz[j] * pb_y[j] + pc_xyyyzz[j] * pb_z[j]);

                t_yyzz_xyz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_125_126(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (125,126)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_xzz = primBuffer.data(150 * idx + 125);

            // Batch of Integrals (125,126)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xz, pb_xzz, \
                                     pb_z, pb_zz, pc_x, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, pc_xyz, \
                                     pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yyzz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_xzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_yyzz[j] * pb_x[j] * fl1_fx + 2.0 * pa_yyz[j] * fl1_fx * pb_xz[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xzz[j] + pa_yyzz[j] * pb_xzz[j]);

                t_yyzz_xzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 1.5 * pa_yy[j] * fl2_fx * pb_x[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * fl2_fx * pa_zz[j] * pb_x[j] - 0.25 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 2.0 * fl2_fx * pa_z[j] * pb_xz[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_yyzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yyzz[j] * pc_x[j] * fl1_fx - 3.0 * pa_yyz[j] * pc_z[j] * pb_x[j] * fl1_fx - 2.0 * pa_yyz[j] * fl1_fx * pc_x[j] * pb_z[j] - 2.0 * pa_yyz[j] * fl1_fx * pb_xz[j] - 3.0 * pa_yy[j] * pc_z[j] * fl1_fx * pb_xz[j] - pa_yzz[j] * pc_y[j] * pb_x[j] * fl1_fx - 4.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_zz[j] - 0.5 * fl2_fx * pb_xzz[j] - 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xzz[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] - fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] - 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_zz[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xzz[j] - 2.0 * pa_yyzz[j] * pb_xz[j] * pc_z[j] - pa_yyzz[j] * pc_x[j] * pb_zz[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_xzz[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_xzz[j]);

                t_yyzz_xzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pa_zz[j] * pc_x[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 2.0 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * fl2_fx * pc_z[j] * pb_xz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_yyzz[j] * pc_x[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_z[j] * pb_x[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_xz[j] * fl1_fx + 2.0 * pa_yyz[j] * fl1_fx * pc_x[j] * pb_z[j] + 3.0 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_z[j] * fl1_fx * pb_xz[j] + pa_yzz[j] * pc_y[j] * pb_x[j] * fl1_fx + pa_yzz[j] * pc_xy[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_xz[j] + 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 0.5 * fl2_fx * pc_x[j] * pb_zz[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] + pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] + fl1_fx * pa_zz[j] * pc_xz[j] * pb_z[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] + fl1_fx * pa_z[j] * pc_xz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xzz[j] + fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_zz[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] + pa_yyzz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_yyzz[j] * pc_xz[j] * pb_z[j] + 4.0 * pa_yyz[j] * pc_zz[j] * pb_xz[j] + 2.0 * pa_yyz[j] * pc_xz[j] * pb_zz[j] + pa_yy[j] * pc_zz[j] * pb_xzz[j] + 4.0 * pa_yzz[j] * pc_yz[j] * pb_xz[j] + 2.0 * pa_yzz[j] * pc_xy[j] * pb_zz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xzz[j] + pc_yy[j] * pa_zz[j] * pb_xzz[j]);

                t_yyzz_xzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_yy[j] * fl2_fx * pb_x[j] - 3.0 * fl2_fx * pa_z[j] * pc_xz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_x[j] - 1.5 * fl2_fx * pc_xzz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_z[j] - 0.25 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 3.0 * pa_yyz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_yzz[j] * pc_xy[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 6.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 4.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 6.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_zz[j] - pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xzz[j] - fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] - 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] - fl1_fx * pc_zzz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_xzz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] - fl1_fx * pa_zz[j] * pc_xz[j] * pb_z[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] - fl1_fx * pa_z[j] * pc_xz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xzz[j] - pa_yyzz[j] * pc_xzz[j] - 2.0 * pa_yyz[j] * pc_zzz[j] * pb_x[j] - 4.0 * pa_yyz[j] * pc_xzz[j] * pb_z[j] - 2.0 * pa_yy[j] * pc_zzz[j] * pb_xz[j] - pa_yy[j] * pc_xzz[j] * pb_zz[j] - 2.0 * pa_yzz[j] * pc_yzz[j] * pb_x[j] - 4.0 * pa_yzz[j] * pc_xyz[j] * pb_z[j] - 8.0 * pa_yz[j] * pc_yzz[j] * pb_xz[j] - 4.0 * pa_yz[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xzz[j] - 2.0 * pc_yyz[j] * pa_zz[j] * pb_xz[j] - pc_xyy[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xzz[j]);

                t_yyzz_xzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_xzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * pa_yy[j] * pc_xzz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_z[j] * pc_xzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] + fl1_fx * pc_xzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xzz[j] + fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] + 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] + fl1_fx * pc_zzz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_xzz[j] * pb_zz[j] + 2.0 * pa_yyz[j] * pc_xzzz[j] + pa_yy[j] * pc_zzzz[j] * pb_x[j] + 2.0 * pa_yy[j] * pc_xzzz[j] * pb_z[j] + 2.0 * pa_yzz[j] * pc_xyzz[j] + 4.0 * pa_yz[j] * pc_yzzz[j] * pb_x[j] + 8.0 * pa_yz[j] * pc_xyzz[j] * pb_z[j] + 4.0 * pa_y[j] * pc_yzzz[j] * pb_xz[j] + 2.0 * pa_y[j] * pc_xyzz[j] * pb_zz[j] + pc_yyzz[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_yyzz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_zz[j] + pc_yyzz[j] * pb_xzz[j]);

                t_yyzz_xzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 1.5 * fl2_fx * pc_xzz[j] - 6.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_xzzzz[j] - fl1_fx * pa_z[j] * pc_xzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] - fl1_fx * pc_xzzz[j] * pb_z[j] - pa_yy[j] * pc_xzzzz[j] - 4.0 * pa_yz[j] * pc_xyzzz[j] - 2.0 * pa_y[j] * pc_yzzzz[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xyzzz[j] * pb_z[j] - pc_xyyzz[j] * pa_zz[j] - 2.0 * pc_yyzzz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yyzzz[j] * pb_xz[j] - pc_xyyzz[j] * pb_zz[j]);

                t_yyzz_xzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_xzzzz[j] + 2.0 * pa_y[j] * pc_xyzzzz[j] + 2.0 * pc_xyyzzz[j] * pa_z[j] + pc_yyzzzz[j] * pb_x[j] + 2.0 * pc_xyyzzz[j] * pb_z[j]);

                t_yyzz_xzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_126_127(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (126,127)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyyzz = pcDistances.data(119 * idx + 113);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_yyy = primBuffer.data(150 * idx + 126);

            // Batch of Integrals (126,127)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_y, pb_yy, pb_yyy, \
                                     pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, pc_yyyyyzz, pc_yyyyz, \
                                     pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyzz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_yyy[j] = fl_s_0_0_0 * (0.75 * pa_y[j] * fl3_fx + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_yzz[j] * fl2_fx + 2.25 * fl2_fx * pa_zz[j] * pb_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 1.5 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * pa_yyzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_yzz[j] * fl1_fx * pb_yy[j] + 0.25 * fl2_fx * pb_yyy[j] + 0.5 * pa_yy[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yyy[j] + pa_yyzz[j] * pb_yyy[j]);

                t_yyzz_yyy[j] += fl_s_0_0_1 * (-2.25 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 3.375 * fl3_fx * pb_y[j] - 3.0 * pa_yzz[j] * fl2_fx - 3.0 * pa_yz[j] * fl2_fx * pc_z[j] - 3.75 * pc_y[j] * fl2_fx * pa_zz[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 4.5 * fl2_fx * pa_zz[j] * pb_y[j] - 1.5 * pa_yy[j] * fl2_fx * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pb_yy[j] - 2.25 * pc_y[j] * fl2_fx * pb_yy[j] - 1.5 * pa_yyzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yyzz[j] * pc_y[j] * fl1_fx - 3.0 * pa_yyz[j] * pc_z[j] * pb_y[j] * fl1_fx - 9.0 * pa_yzz[j] * pc_y[j] * pb_y[j] * fl1_fx - 6.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_yy[j] - 3.0 * pa_yzz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_yy[j] - 0.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_y[j] - 0.5 * pa_yy[j] * fl1_fx * pb_yyy[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yyy[j] - 3.0 * pa_yyzz[j] * pb_yy[j] * pc_y[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_yyy[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_yyy[j]);

                t_yyzz_yyy[j] += fl_s_0_0_2 * (2.25 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 3.375 * fl3_fx * pb_y[j] + 6.0 * pa_yz[j] * fl2_fx * pc_z[j] + 1.5 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pa_yzz[j] * fl2_fx + 7.5 * pc_y[j] * fl2_fx * pa_zz[j] + 7.5 * pc_yz[j] * fl2_fx * pa_z[j] + 2.25 * fl2_fx * pc_zz[j] * pb_y[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 2.25 * fl2_fx * pa_zz[j] * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pc_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 3.0 * pa_y[j] * pc_yy[j] * fl2_fx + 1.5 * pa_y[j] * fl2_fx * pb_yy[j] + 4.5 * pc_yy[j] * fl2_fx * pb_y[j] + 4.5 * pc_y[j] * fl2_fx * pb_yy[j] + 1.5 * pa_yyzz[j] * pc_y[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_z[j] * pb_y[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 9.0 * pa_yzz[j] * pc_y[j] * pb_y[j] * fl1_fx + 6.0 * pa_yzz[j] * pc_yy[j] * fl1_fx + 18.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 6.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_yy[j] + 9.0 * pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 9.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 4.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_yy[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_yy[j] * fl1_fx * pb_y[j] * pc_yy[j] + 1.5 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_y[j] + 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_yy[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] + 3.0 * pa_yyzz[j] * pb_y[j] * pc_yy[j] + 6.0 * pa_yyz[j] * pc_yz[j] * pb_yy[j] + pa_yy[j] * pc_zz[j] * pb_yyy[j] + 6.0 * pa_yzz[j] * pc_yy[j] * pb_yy[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_yyy[j] + pc_yy[j] * pa_zz[j] * pb_yyy[j]);

                t_yyzz_yyy[j] += fl_s_0_0_3 * (-0.75 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 1.125 * fl3_fx * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pc_zz[j] - 3.0 * pa_yz[j] * fl2_fx * pc_z[j] - 15.0 * pc_yz[j] * fl2_fx * pa_z[j] - 3.75 * pc_yzz[j] * fl2_fx - 3.75 * pc_y[j] * fl2_fx * pa_zz[j] - 4.5 * fl2_fx * pc_zz[j] * pb_y[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 6.0 * pa_y[j] * pc_yy[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 9.0 * pc_yy[j] * fl2_fx * pb_y[j] - 2.5 * pc_yyy[j] * fl2_fx - 2.25 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * pa_yyz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 6.0 * pa_yzz[j] * pc_yy[j] * fl1_fx - 18.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 12.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 9.0 * pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 5.0 * pc_yyy[j] * pa_zz[j] * fl1_fx - 18.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 4.5 * pc_yzz[j] * fl1_fx * pb_yy[j] - 9.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 0.5 * pa_yy[j] * fl1_fx * pc_yyy[j] - 1.5 * pa_yy[j] * fl1_fx * pb_y[j] * pc_yy[j] - 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yyy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_yy[j] * fl1_fx * pb_yyy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] - pa_yyzz[j] * pc_yyy[j] - 6.0 * pa_yyz[j] * pc_yyz[j] * pb_y[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_yy[j] - 6.0 * pa_yzz[j] * pc_yyy[j] * pb_y[j] - 12.0 * pa_yz[j] * pc_yyz[j] * pb_yy[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_yyy[j] - 3.0 * pc_yyy[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_yyy[j]);

                t_yyzz_yyy[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 1.5 * pa_y[j] * fl2_fx * pc_zz[j] + 7.5 * pc_yzz[j] * fl2_fx + 7.5 * pc_yz[j] * fl2_fx * pa_z[j] + 2.25 * fl2_fx * pc_zz[j] * pb_y[j] + 3.0 * pa_y[j] * pc_yy[j] * fl2_fx + 5.0 * pc_yyy[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 12.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + 9.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 5.0 * pc_yyy[j] * pa_zz[j] * fl1_fx + 18.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 10.0 * pc_yyyz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yyzz[j] * pb_y[j] * fl1_fx + 4.5 * pc_yzz[j] * fl1_fx * pb_yy[j] + 0.5 * pa_yy[j] * fl1_fx * pc_yyy[j] + pa_y[j] * pc_yyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyy[j] * fl1_fx * pb_yy[j] + 2.0 * pa_yyz[j] * pc_yyyz[j] + 3.0 * pa_yy[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_yzz[j] * pc_yyyy[j] + 12.0 * pa_yz[j] * pc_yyyz[j] * pb_y[j] + 6.0 * pa_y[j] * pc_yyzz[j] * pb_yy[j] + 3.0 * pc_yyyy[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_yyyz[j] * pa_z[j] * pb_yy[j] + pc_yyzz[j] * pb_yyy[j]);

                t_yyzz_yyy[j] += fl_s_0_0_5 * (-3.75 * pc_yzz[j] * fl2_fx - 2.5 * pc_yyy[j] * fl2_fx - 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 10.0 * pc_yyyz[j] * pa_z[j] * fl1_fx - 9.0 * pc_yyzz[j] * pb_y[j] * fl1_fx - 5.0 * pc_yyyzz[j] * fl1_fx - pa_y[j] * pc_yyyy[j] * fl1_fx - 0.5 * pc_yyyyy[j] * fl1_fx - 1.5 * pc_yyyy[j] * fl1_fx * pb_y[j] - pa_yy[j] * pc_yyyzz[j] - 4.0 * pa_yz[j] * pc_yyyyz[j] - 6.0 * pa_y[j] * pc_yyyzz[j] * pb_y[j] - pc_yyyyy[j] * pa_zz[j] - 6.0 * pc_yyyyz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_yyyzz[j] * pb_yy[j]);

                t_yyzz_yyy[j] += fl_s_0_0_6 * (5.0 * pc_yyyzz[j] * fl1_fx + 0.5 * pc_yyyyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyyzz[j] + 2.0 * pc_yyyyyz[j] * pa_z[j] + 3.0 * pc_yyyyzz[j] * pb_y[j]);

                t_yyzz_yyy[j] += -fl_s_0_0_7 * pc_yyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_127_128(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (127,128)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_yyz = primBuffer.data(150 * idx + 127);

            // Batch of Integrals (127,128)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_y, pb_yy, pb_yyz, \
                                     pb_yz, pb_z, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyyzzz, pc_yyyz, \
                                     pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, \
                                     pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yyzz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_yyz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 0.375 * fl3_fx * pb_z[j] + 0.5 * pa_yyz[j] * fl2_fx + 2.0 * pa_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 0.25 * pa_yy[j] * fl2_fx * pb_z[j] + pa_y[j] * fl2_fx * pb_yz[j] + 0.5 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_yyzz[j] * fl1_fx * pb_z[j] + pa_yyz[j] * fl1_fx * pb_yy[j] + 2.0 * pa_yzz[j] * fl1_fx * pb_yz[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_yy[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yyz[j] + pa_yyzz[j] * pb_yyz[j]);

                t_yyzz_yyz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - pa_yyz[j] * fl2_fx - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 3.0 * pa_yz[j] * pc_y[j] * fl2_fx - 4.0 * pa_yz[j] * fl2_fx * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.5 * pa_yy[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 2.0 * pa_y[j] * fl2_fx * pb_yz[j] - 1.5 * pc_y[j] * fl2_fx * pb_yz[j] - fl2_fx * pa_z[j] * pb_yy[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_yyzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyzz[j] * fl1_fx * pb_z[j] - pa_yyz[j] * pc_z[j] * fl1_fx * pb_z[j] - 2.0 * pa_yyz[j] * fl1_fx * pb_y[j] * pc_y[j] - pa_yyz[j] * fl1_fx * pb_yy[j] - 1.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yy[j] - 3.0 * pa_yzz[j] * pc_y[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yy[j] - 2.0 * pa_yzz[j] * fl1_fx * pb_y[j] * pc_z[j] - 4.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_yz[j] - 2.0 * pa_yzz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_y[j] * fl1_fx * pa_zz[j] * pb_yz[j] - 0.5 * fl2_fx * pb_yyz[j] - pa_yy[j] * fl1_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_yy[j] * fl1_fx * pb_yyz[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yyz[j] - pa_yyzz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_yyzz[j] * pb_yz[j] * pc_y[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_yyz[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_yyz[j]);

                t_yyzz_yyz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 2.25 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pb_z[j] + 0.5 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * pc_z[j] * fl2_fx + 6.0 * pa_yz[j] * pc_y[j] * fl2_fx + 4.5 * pa_y[j] * pc_yz[j] * fl2_fx + 6.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] + 2.0 * pa_yz[j] * fl2_fx * pb_y[j] + 3.0 * pc_yy[j] * pa_z[j] * fl2_fx + 6.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] + 4.5 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 0.25 * pa_yy[j] * fl2_fx * pb_z[j] + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + pa_y[j] * fl2_fx * pb_yz[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 3.0 * pc_y[j] * fl2_fx * pb_yz[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.5 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_yyzz[j] * fl1_fx * pc_z[j] + pa_yyz[j] * pc_zz[j] * fl1_fx + pa_yyz[j] * pc_z[j] * fl1_fx * pb_z[j] + pa_yyz[j] * fl1_fx * pc_yy[j] + 2.0 * pa_yyz[j] * fl1_fx * pb_y[j] * pc_y[j] + 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yzz[j] * pc_yz[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_y[j] * fl1_fx * pb_z[j] + 6.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 4.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_y[j] + 2.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yy[j] + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 4.0 * pa_yz[j] * fl1_fx * pc_zz[j] * pb_y[j] + 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yz[j] + 2.0 * pa_yzz[j] * fl1_fx * pb_y[j] * pc_z[j] + 4.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_yz[j] + 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] + pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] + 3.0 * pc_yz[j] * fl1_fx * pa_zz[j] * pb_y[j] + 6.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yz[j] + 3.0 * pc_y[j] * fl1_fx * pa_zz[j] * pb_yz[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_yy[j] * fl1_fx * pc_yy[j] * pb_z[j] + pa_yy[j] * fl1_fx * pb_yz[j] * pc_y[j] + 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_yyz[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] + 2.0 * pa_yyzz[j] * pb_y[j] * pc_yz[j] + pa_yyzz[j] * pc_yy[j] * pb_z[j] + 2.0 * pa_yyz[j] * pc_zz[j] * pb_yy[j] + 4.0 * pa_yyz[j] * pc_yz[j] * pb_yz[j] + pa_yy[j] * pc_zz[j] * pb_yyz[j] + 2.0 * pa_yzz[j] * pc_yz[j] * pb_yy[j] + 4.0 * pa_yzz[j] * pc_yy[j] * pb_yz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_yyz[j] + pc_yy[j] * pa_zz[j] * pb_yyz[j]);

                t_yyzz_yyz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 3.0 * pa_yz[j] * pc_y[j] * fl2_fx - 9.0 * pa_y[j] * pc_yz[j] * fl2_fx - 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 6.0 * pc_yy[j] * pa_z[j] * fl2_fx - 4.5 * pc_yyz[j] * fl2_fx - 9.0 * pc_yz[j] * fl2_fx * pb_y[j] - 3.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_zzz[j] - 3.0 * fl2_fx * pa_z[j] * pc_zz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * pc_yy[j] * fl2_fx * pb_z[j] - 1.5 * pc_y[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - pa_yyz[j] * pc_zz[j] * fl1_fx - pa_yyz[j] * fl1_fx * pc_yy[j] - 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yzz[j] * pc_yz[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_yyy[j] * fl1_fx - 4.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 2.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_y[j] - 4.0 * pa_yz[j] * fl1_fx * pc_zz[j] * pb_y[j] - 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yz[j] - 3.0 * pc_yyz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 6.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_yy[j] - 6.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pa_zz[j] * pb_y[j] - 6.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_yy[j] * fl1_fx * pc_yy[j] * pb_z[j] - pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] - pc_yyy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyz[j] - pa_yyzz[j] * pc_yyz[j] - 4.0 * pa_yyz[j] * pc_yzz[j] * pb_y[j] - 2.0 * pa_yyz[j] * pc_yyz[j] * pb_z[j] - pa_yy[j] * pc_zzz[j] * pb_yy[j] - 2.0 * pa_yy[j] * pc_yzz[j] * pb_yz[j] - 4.0 * pa_yzz[j] * pc_yyz[j] * pb_y[j] - 2.0 * pa_yzz[j] * pc_yyy[j] * pb_z[j] - 4.0 * pa_yz[j] * pc_yzz[j] * pb_yy[j] - 8.0 * pa_yz[j] * pc_yyz[j] * pb_yz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_yyz[j] - pc_yyz[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_yyy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_yyz[j]);

                t_yyzz_yyz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 4.5 * pa_y[j] * pc_yz[j] * fl2_fx + 3.0 * pc_yy[j] * pa_z[j] * fl2_fx + 9.0 * pc_yyz[j] * fl2_fx + 4.5 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + 2.0 * pa_yz[j] * pc_yyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 2.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_y[j] + 3.0 * pc_yyz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_yyyy[j] * pa_z[j] * fl1_fx + 2.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_yzzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_yz[j] + pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] + pc_yyy[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + 2.0 * pa_yyz[j] * pc_yyzz[j] + 2.0 * pa_yy[j] * pc_yzzz[j] * pb_y[j] + pa_yy[j] * pc_yyzz[j] * pb_z[j] + 2.0 * pa_yzz[j] * pc_yyyz[j] + 8.0 * pa_yz[j] * pc_yyzz[j] * pb_y[j] + 4.0 * pa_yz[j] * pc_yyyz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_yy[j] + 4.0 * pa_y[j] * pc_yyzz[j] * pb_yz[j] + 2.0 * pc_yyyz[j] * pa_zz[j] * pb_y[j] + pc_yyyy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_yyzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_yyyz[j] * pa_z[j] * pb_yz[j] + pc_yyzz[j] * pb_yyz[j]);

                t_yyzz_yyz[j] += fl_s_0_0_5 * (-4.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 3.0 * pa_y[j] * pc_yzzz[j] * fl1_fx - 3.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - pc_yyyy[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_yyyyz[j] * fl1_fx - 3.0 * pc_yyyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_yzzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] - pa_yy[j] * pc_yyzzz[j] - 4.0 * pa_yz[j] * pc_yyyzz[j] - 4.0 * pa_y[j] * pc_yyzzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_yyyzz[j] * pb_z[j] - pc_yyyyz[j] * pa_zz[j] - 4.0 * pc_yyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_yyyyz[j] * pa_z[j] * pb_z[j] - pc_yyzzz[j] * pb_yy[j] - 2.0 * pc_yyyzz[j] * pb_yz[j]);

                t_yyzz_yyz[j] += fl_s_0_0_6 * (3.0 * pc_yyzzz[j] * fl1_fx + 1.5 * pc_yyyyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyzzz[j] + 2.0 * pc_yyyyzz[j] * pa_z[j] + 2.0 * pc_yyyzzz[j] * pb_y[j] + pc_yyyyzz[j] * pb_z[j]);

                t_yyzz_yyz[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_128_129(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (128,129)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_yzz = primBuffer.data(150 * idx + 128);

            // Batch of Integrals (128,129)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_y, pb_yz, pb_yzz, \
                                     pb_z, pb_zz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyyzzzz, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yyzz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_yzz[j] = fl_s_0_0_0 * (0.75 * pa_y[j] * fl3_fx + 0.375 * fl3_fx * pb_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 0.5 * pa_yzz[j] * fl2_fx + 2.0 * pa_yz[j] * fl2_fx * pb_z[j] + 0.5 * pa_y[j] * fl2_fx * pb_zz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_yyzz[j] * pb_y[j] * fl1_fx + 2.0 * pa_yyz[j] * fl1_fx * pb_yz[j] + pa_yzz[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_yy[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yzz[j] + pa_yyzz[j] * pb_yzz[j]);

                t_yyzz_yzz[j] += fl_s_0_0_1 * (-2.25 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 1.125 * fl3_fx * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 1.5 * pa_yy[j] * fl2_fx * pb_y[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - pa_yzz[j] * fl2_fx - 3.0 * pa_yz[j] * fl2_fx * pc_z[j] - 4.0 * pa_yz[j] * fl2_fx * pb_z[j] - 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pa_zz[j] - 3.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - pa_y[j] * fl2_fx * pb_zz[j] - 0.75 * pc_y[j] * fl2_fx * pb_zz[j] - 0.5 * fl2_fx * pa_zz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 2.0 * fl2_fx * pa_z[j] * pb_yz[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_yyzz[j] * pb_y[j] * fl1_fx - 0.5 * pa_yyzz[j] * pc_y[j] * fl1_fx - 3.0 * pa_yyz[j] * pc_z[j] * pb_y[j] * fl1_fx - 2.0 * pa_yyz[j] * fl1_fx * pc_y[j] * pb_z[j] - 2.0 * pa_yyz[j] * fl1_fx * pb_yz[j] - 3.0 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yz[j] - pa_yzz[j] * pc_y[j] * pb_y[j] * fl1_fx - 4.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yz[j] - 2.0 * pa_yzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 2.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_zz[j] - pa_yzz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_zz[j] - 0.5 * fl2_fx * pb_yzz[j] - 0.5 * pa_yy[j] * fl1_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_yy[j] * fl1_fx * pb_yzz[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] - fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yzz[j] - 2.0 * pa_yyzz[j] * pb_yz[j] * pc_z[j] - pa_yyzz[j] * pc_y[j] * pb_zz[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_yzz[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_yzz[j]);

                t_yyzz_yzz[j] += fl_s_0_0_2 * (2.25 * pa_y[j] * fl3_fx + 3.375 * pc_y[j] * fl3_fx + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pc_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 1.5 * pa_y[j] * pc_yy[j] * fl2_fx + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 6.0 * pa_yz[j] * fl2_fx * pc_z[j] + 3.0 * pa_y[j] * fl2_fx * pc_zz[j] + 6.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.5 * pa_yzz[j] * fl2_fx + 2.0 * pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pa_zz[j] + 4.5 * pc_yz[j] * fl2_fx * pa_z[j] + 6.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] + 4.5 * pc_yz[j] * fl2_fx * pb_z[j] + 0.5 * pa_y[j] * fl2_fx * pb_zz[j] + 1.5 * pc_y[j] * fl2_fx * pb_zz[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 3.0 * fl2_fx * pc_z[j] * pb_yz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_yyzz[j] * pc_y[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_z[j] * pb_y[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_yz[j] * fl1_fx + 2.0 * pa_yyz[j] * fl1_fx * pc_y[j] * pb_z[j] + 3.0 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 3.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yz[j] + pa_yzz[j] * pc_y[j] * pb_y[j] * fl1_fx + pa_yzz[j] * pc_yy[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 4.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 4.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_yz[j] + 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] + pa_yzz[j] * fl1_fx * pc_zz[j] + 4.0 * pa_yz[j] * fl1_fx * pc_zz[j] * pb_z[j] + pa_y[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 2.0 * pa_yzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 2.0 * pa_yz[j] * fl1_fx * pc_z[j] * pb_zz[j] + 0.5 * pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 3.0 * pc_yz[j] * fl1_fx * pa_zz[j] * pb_z[j] + 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_y[j] * fl1_fx * pa_zz[j] * pb_zz[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_yy[j] * fl1_fx * pc_y[j] * pb_zz[j] + pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yzz[j] + fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] + pa_yyzz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_yyzz[j] * pc_yz[j] * pb_z[j] + 4.0 * pa_yyz[j] * pc_zz[j] * pb_yz[j] + 2.0 * pa_yyz[j] * pc_yz[j] * pb_zz[j] + pa_yy[j] * pc_zz[j] * pb_yzz[j] + 4.0 * pa_yzz[j] * pc_yz[j] * pb_yz[j] + 2.0 * pa_yzz[j] * pc_yy[j] * pb_zz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_yzz[j] + pc_yy[j] * pa_zz[j] * pb_yzz[j]);

                t_yyzz_yzz[j] += fl_s_0_0_3 * (-0.75 * pa_y[j] * fl3_fx - 3.375 * pc_y[j] * fl3_fx - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 3.0 * pa_y[j] * pc_yy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 6.0 * pa_y[j] * fl2_fx * pc_zz[j] - 3.0 * pa_yz[j] * fl2_fx * pc_z[j] - 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.75 * pc_yyy[j] * fl2_fx - 1.5 * pc_yy[j] * fl2_fx * pb_y[j] - 9.0 * pc_yz[j] * fl2_fx * pa_z[j] - 4.5 * pc_yzz[j] * fl2_fx - 9.0 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pa_zz[j] - 3.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 3.0 * pa_yyz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_yzz[j] * pc_yy[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - 4.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 6.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 2.0 * pa_yz[j] * fl1_fx * pc_zzz[j] - 2.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_z[j] - pa_yzz[j] * fl1_fx * pc_zz[j] - 4.0 * pa_yz[j] * fl1_fx * pc_zz[j] * pb_z[j] - pa_y[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 0.5 * pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 2.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yzz[j] * fl1_fx * pa_zz[j] - 6.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yz[j] * fl1_fx * pa_zz[j] * pb_z[j] - 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_zz[j] - pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_yzz[j] - fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] - fl1_fx * pc_zzz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yzz[j] - pa_yyzz[j] * pc_yzz[j] - 2.0 * pa_yyz[j] * pc_zzz[j] * pb_y[j] - 4.0 * pa_yyz[j] * pc_yzz[j] * pb_z[j] - 2.0 * pa_yy[j] * pc_zzz[j] * pb_yz[j] - pa_yy[j] * pc_yzz[j] * pb_zz[j] - 2.0 * pa_yzz[j] * pc_yzz[j] * pb_y[j] - 4.0 * pa_yzz[j] * pc_yyz[j] * pb_z[j] - 8.0 * pa_yz[j] * pc_yzz[j] * pb_yz[j] - 4.0 * pa_yz[j] * pc_yyz[j] * pb_zz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_yzz[j] - 2.0 * pc_yyz[j] * pa_zz[j] * pb_yz[j] - pc_yyy[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_yzz[j]);

                t_yyzz_yzz[j] += fl_s_0_0_4 * (1.125 * pc_y[j] * fl3_fx + 1.5 * pa_y[j] * pc_yy[j] * fl2_fx + 3.0 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pc_yyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_y[j] + 9.0 * pc_yzz[j] * fl2_fx + 4.5 * pc_yz[j] * fl2_fx * pa_z[j] + 4.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + pa_y[j] * fl1_fx * pc_zzzz[j] + 2.0 * pa_yz[j] * fl1_fx * pc_zzz[j] + 2.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_yyyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyzz[j] * pb_y[j] * fl1_fx + 3.0 * pc_yyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_yzzz[j] * fl1_fx * pa_z[j] + 3.0 * pc_yzzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pa_zz[j] + 6.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_zz[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] + fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] + fl1_fx * pc_zzz[j] * pb_yz[j] + 2.0 * pa_yyz[j] * pc_yzzz[j] + pa_yy[j] * pc_zzzz[j] * pb_y[j] + 2.0 * pa_yy[j] * pc_yzzz[j] * pb_z[j] + 2.0 * pa_yzz[j] * pc_yyzz[j] + 4.0 * pa_yz[j] * pc_yzzz[j] * pb_y[j] + 8.0 * pa_yz[j] * pc_yyzz[j] * pb_z[j] + 4.0 * pa_y[j] * pc_yzzz[j] * pb_yz[j] + 2.0 * pa_y[j] * pc_yyzz[j] * pb_zz[j] + pc_yyzz[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_yyyz[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_yyzz[j] * pa_z[j] * pb_yz[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_zz[j] + pc_yyzz[j] * pb_yzz[j]);

                t_yyzz_yzz[j] += fl_s_0_0_5 * (-0.75 * pc_yyy[j] * fl2_fx - 4.5 * pc_yzz[j] * fl2_fx - 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - pa_y[j] * fl1_fx * pc_zzzz[j] - 3.0 * pc_yyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yyyzz[j] * fl1_fx - 3.0 * pc_yyyz[j] * fl1_fx * pb_z[j] - 1.5 * pc_yzzzz[j] * fl1_fx - 3.0 * pc_yzzz[j] * fl1_fx * pa_z[j] - 3.0 * pc_yzzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] - pa_yy[j] * pc_yzzzz[j] - 4.0 * pa_yz[j] * pc_yyzzz[j] - 2.0 * pa_y[j] * pc_yzzzz[j] * pb_y[j] - 4.0 * pa_y[j] * pc_yyzzz[j] * pb_z[j] - pc_yyyzz[j] * pa_zz[j] - 2.0 * pc_yyzzz[j] * pa_z[j] * pb_y[j] - 4.0 * pc_yyyzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yyzzz[j] * pb_yz[j] - pc_yyyzz[j] * pb_zz[j]);

                t_yyzz_yzz[j] += fl_s_0_0_6 * (3.0 * pc_yyyzz[j] * fl1_fx + 1.5 * pc_yzzzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyzzzz[j] + 2.0 * pc_yyyzzz[j] * pa_z[j] + pc_yyzzzz[j] * pb_y[j] + 2.0 * pc_yyyzzz[j] * pb_z[j]);

                t_yyzz_yzz[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_129_130(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (129,130)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(34 * idx + 6);

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(34 * idx + 16);

            auto pa_yzz = paDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yyzz = paDistances.data(34 * idx + 31);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyzzzzz = pcDistances.data(119 * idx + 116);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyzz_zzz = primBuffer.data(150 * idx + 129);

            // Batch of Integrals (129,130)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yyzz, pa_yz, pa_yzz, pa_z, pa_zz, pb_z, pb_zz, pb_zzz, \
                                     pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yyzzzzz, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyzz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyzz_zzz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_yyz[j] * fl2_fx + 2.25 * pa_yy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 1.5 * pa_yyzz[j] * pb_z[j] * fl1_fx + 3.0 * pa_yyz[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + 0.5 * pa_yy[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] + pa_yyzz[j] * pb_zzz[j]);

                t_yyzz_zzz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 3.375 * fl3_fx * pb_z[j] - 3.0 * pa_yyz[j] * fl2_fx - 3.75 * pa_yy[j] * pc_z[j] * fl2_fx - 4.5 * pa_yy[j] * fl2_fx * pb_z[j] - 3.0 * pa_yz[j] * pc_y[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_zz[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_yyzz[j] * pb_z[j] * fl1_fx - 1.5 * pa_yyzz[j] * pc_z[j] * fl1_fx - 9.0 * pa_yyz[j] * pc_z[j] * pb_z[j] * fl1_fx - 3.0 * pa_yyz[j] * fl1_fx * pb_zz[j] - 4.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_zz[j] - 3.0 * pa_yzz[j] * pc_y[j] * pb_z[j] * fl1_fx - 6.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] - 0.5 * fl2_fx * pb_zzz[j] - 0.5 * pa_yy[j] * fl1_fx * pb_zzz[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] - 3.0 * pa_yyzz[j] * pb_zz[j] * pc_z[j] - 2.0 * pa_yyz[j] * pc_z[j] * pb_zzz[j] - 2.0 * pa_yzz[j] * pc_y[j] * pb_zzz[j]);

                t_yyzz_zzz[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 1.5 * pa_yyz[j] * fl2_fx + 7.5 * pa_yy[j] * pc_z[j] * fl2_fx + 2.25 * pa_yy[j] * fl2_fx * pb_z[j] + 6.0 * pa_yz[j] * pc_y[j] * fl2_fx + 7.5 * pa_y[j] * pc_yz[j] * fl2_fx + 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 2.25 * pc_yy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 1.5 * pa_yyzz[j] * pc_z[j] * fl1_fx + 9.0 * pa_yyz[j] * pc_z[j] * pb_z[j] * fl1_fx + 6.0 * pa_yyz[j] * pc_zz[j] * fl1_fx + 9.0 * pa_yy[j] * pc_zz[j] * pb_z[j] * fl1_fx + 4.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_zz[j] + 3.0 * pa_yzz[j] * pc_y[j] * pb_z[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_yz[j] * fl1_fx + 18.0 * pa_yz[j] * pc_yz[j] * pb_z[j] * fl1_fx + 6.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_yy[j] * pa_zz[j] * pb_z[j] * fl1_fx + 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_zzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] + 3.0 * pa_yyzz[j] * pb_z[j] * pc_zz[j] + 6.0 * pa_yyz[j] * pc_zz[j] * pb_zz[j] + pa_yy[j] * pc_zz[j] * pb_zzz[j] + 6.0 * pa_yzz[j] * pc_yz[j] * pb_zz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_zzz[j] + pc_yy[j] * pa_zz[j] * pb_zzz[j]);

                t_yyzz_zzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pb_z[j] - 3.75 * pa_yy[j] * pc_z[j] * fl2_fx - 3.0 * pa_yz[j] * pc_y[j] * fl2_fx - 15.0 * pa_y[j] * pc_yz[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * pc_yy[j] * pa_z[j] * fl2_fx - 3.75 * pc_yyz[j] * fl2_fx - 4.5 * pc_yy[j] * fl2_fx * pb_z[j] - 6.0 * fl2_fx * pa_z[j] * pc_zz[j] - 9.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.5 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 6.0 * pa_yyz[j] * pc_zz[j] * fl1_fx - 9.0 * pa_yy[j] * pc_zz[j] * pb_z[j] * fl1_fx - 5.0 * pa_yy[j] * pc_zzz[j] * fl1_fx - 3.0 * pa_yzz[j] * pc_yz[j] * fl1_fx - 18.0 * pa_yz[j] * pc_yz[j] * pb_z[j] * fl1_fx - 12.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 18.0 * pa_y[j] * pc_yzz[j] * pb_z[j] * fl1_fx - 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yy[j] * pa_zz[j] * pb_z[j] * fl1_fx - 1.5 * pc_yyz[j] * pa_zz[j] * fl1_fx - 9.0 * pc_yyz[j] * pa_z[j] * pb_z[j] * fl1_fx - 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 4.5 * pc_yyz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_zzz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] - pa_yyzz[j] * pc_zzz[j] - 6.0 * pa_yyz[j] * pc_zzz[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_zzz[j] * pb_zz[j] - 6.0 * pa_yzz[j] * pc_yzz[j] * pb_z[j] - 12.0 * pa_yz[j] * pc_yzz[j] * pb_zz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_zzz[j] - 3.0 * pc_yyz[j] * pa_zz[j] * pb_zz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_zzz[j]);

                t_yyzz_zzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 7.5 * pa_y[j] * pc_yz[j] * fl2_fx + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 7.5 * pc_yyz[j] * fl2_fx + 2.25 * pc_yy[j] * fl2_fx * pb_z[j] + 5.0 * fl2_fx * pc_zzz[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 5.0 * pa_yy[j] * pc_zzz[j] * fl1_fx + 12.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + 18.0 * pa_y[j] * pc_yzz[j] * pb_z[j] * fl1_fx + 10.0 * pa_y[j] * pc_yzzz[j] * fl1_fx + 1.5 * pc_yyz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_yyz[j] * pa_z[j] * pb_z[j] * fl1_fx + 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yyzz[j] * pb_z[j] * fl1_fx + 4.5 * pc_yyz[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_z[j] * pc_zzzz[j] + 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] + 2.0 * pa_yyz[j] * pc_zzzz[j] + 3.0 * pa_yy[j] * pc_zzzz[j] * pb_z[j] + 2.0 * pa_yzz[j] * pc_yzzz[j] + 12.0 * pa_yz[j] * pc_yzzz[j] * pb_z[j] + 6.0 * pa_y[j] * pc_yzzz[j] * pb_zz[j] + 3.0 * pc_yyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_yyzz[j] * pa_z[j] * pb_zz[j] + pc_yyzz[j] * pb_zzz[j]);

                t_yyzz_zzz[j] += fl_s_0_0_5 * (-3.75 * pc_yyz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 10.0 * pa_y[j] * pc_yzzz[j] * fl1_fx - 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - 9.0 * pc_yyzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_yyzzz[j] * fl1_fx - 0.5 * fl1_fx * pc_zzzzz[j] - fl1_fx * pa_z[j] * pc_zzzz[j] - 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] - pa_yy[j] * pc_zzzzz[j] - 4.0 * pa_yz[j] * pc_yzzzz[j] - 6.0 * pa_y[j] * pc_yzzzz[j] * pb_z[j] - pc_yyzzz[j] * pa_zz[j] - 6.0 * pc_yyzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yyzzz[j] * pb_zz[j]);

                t_yyzz_zzz[j] += fl_s_0_0_6 * (5.0 * pc_yyzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + 2.0 * pa_y[j] * pc_yzzzzz[j] + 2.0 * pc_yyzzzz[j] * pa_z[j] + 3.0 * pc_yyzzzz[j] * pb_z[j]);

                t_yyzz_zzz[j] += -fl_s_0_0_7 * pc_yyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_130_131(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (130,131)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_xxx = primBuffer.data(150 * idx + 130);

            // Batch of Integrals (130,131)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxx, pc_x, \
                                     pc_xx, pc_xxx, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, \
                                     pc_xxxzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, \
                                     pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_z, \
                                     pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yzzz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yzzz_xxx[j] = fl_s_0_0_0 * (2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_yzzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_yz[j] * fl1_fx * pb_xxx[j] + pa_yzzz[j] * pb_xxx[j]);

                t_yzzz_xxx[j] += fl_s_0_0_1 * (-4.5 * pa_yz[j] * fl2_fx * pb_x[j] - 2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 1.5 * pa_yzzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yzzz[j] * pc_x[j] * fl1_fx - 4.5 * pa_yzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_y[j] * pa_zzz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_yzzz[j] * pb_xx[j] * pc_x[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_xxx[j] - pc_y[j] * pa_zzz[j] * pb_xxx[j]);

                t_yzzz_xxx[j] += fl_s_0_0_2 * (4.5 * pa_yz[j] * fl2_fx * pc_x[j] + 2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 4.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] + 2.25 * pa_y[j] * pc_xz[j] * fl2_fx + 4.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_yzzz[j] * pc_x[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_xz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_y[j] * pa_zzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx + 4.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 4.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 4.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_yzzz[j] * pb_x[j] * pc_xx[j] + 9.0 * pa_yzz[j] * pc_xz[j] * pb_xx[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_xxx[j] + 3.0 * pc_xy[j] * pa_zzz[j] * pb_xx[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_xxx[j]);

                t_yzzz_xxx[j] += fl_s_0_0_3 * (-2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 4.5 * pa_y[j] * pc_xz[j] * fl2_fx - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_yzz[j] * pc_xz[j] * fl1_fx - 4.5 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yz[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 4.5 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pa_yz[j] * fl1_fx * pc_xxx[j] - 4.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 4.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 4.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] - 4.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] - pa_yzzz[j] * pc_xxx[j] - 9.0 * pa_yzz[j] * pc_xxz[j] * pb_x[j] - 9.0 * pa_yz[j] * pc_xzz[j] * pb_xx[j] - pa_y[j] * pc_zzz[j] * pb_xxx[j] - 3.0 * pc_xxy[j] * pa_zzz[j] * pb_x[j] - 9.0 * pc_xyz[j] * pa_zz[j] * pb_xx[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_xxx[j]);

                t_yzzz_xxx[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * pc_xz[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 4.5 * pa_yz[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * pc_xzzz[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 4.5 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx + 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_yz[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_y[j] * pc_xxxz[j] * fl1_fx + 4.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 4.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_yzz[j] * pc_xxxz[j] + 9.0 * pa_yz[j] * pc_xxzz[j] * pb_x[j] + 3.0 * pa_y[j] * pc_xzzz[j] * pb_xx[j] + pc_xxxy[j] * pa_zzz[j] + 9.0 * pc_xxyz[j] * pa_zz[j] * pb_x[j] + 9.0 * pc_xyzz[j] * pa_z[j] * pb_xx[j] + pc_yzzz[j] * pb_xxx[j]);

                t_yzzz_xxx[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_y[j] * pc_xzzz[j] * fl1_fx - 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx - 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_xxxz[j] * fl1_fx - 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_yz[j] * pc_xxxzz[j] - 3.0 * pa_y[j] * pc_xxzzz[j] * pb_x[j] - 3.0 * pc_xxxyz[j] * pa_zz[j] - 9.0 * pc_xxyzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xyzzz[j] * pb_xx[j]);

                t_yzzz_xxx[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_y[j] * pc_xxxzzz[j] + 3.0 * pc_xxxyzz[j] * pa_z[j] + 3.0 * pc_xxyzzz[j] * pb_x[j]);

                t_yzzz_xxx[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_131_132(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (131,132)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_xxy = primBuffer.data(150 * idx + 131);

            // Batch of Integrals (131,132)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxy, pb_xy, \
                                     pb_y, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, \
                                     pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yzzz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzzz_xxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.25 * fl2_fx * pa_zzz[j] + 0.75 * pa_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_yzzz[j] * fl1_fx * pb_y[j] + 0.5 * fl1_fx * pa_zzz[j] * pb_xx[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xxy[j] + pa_yzzz[j] * pb_xxy[j]);

                t_yzzz_xxy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.5 * fl2_fx * pa_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 0.75 * pa_yz[j] * fl2_fx * pc_y[j] - 1.5 * pa_yz[j] * fl2_fx * pb_y[j] - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_xx[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_yzzz[j] * fl1_fx * pc_y[j] - 0.5 * pa_yzzz[j] * fl1_fx * pb_y[j] - 1.5 * pa_yzz[j] * pc_z[j] * fl1_fx * pb_y[j] - 0.5 * pc_y[j] * pa_zzz[j] * fl1_fx * pb_y[j] - fl1_fx * pa_zzz[j] * pb_x[j] * pc_x[j] - 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xx[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_xx[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxy[j] - pa_yzzz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_yzzz[j] * pb_xy[j] * pc_x[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_xxy[j] - pc_y[j] * pa_zzz[j] * pb_xxy[j]);

                t_yzzz_xxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 0.25 * fl2_fx * pa_zzz[j] + 1.5 * pa_yz[j] * fl2_fx * pc_y[j] + 0.75 * pa_yz[j] * fl2_fx * pb_y[j] + 0.75 * pa_y[j] * pc_yz[j] * fl2_fx + 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] + 0.75 * pc_yy[j] * pa_z[j] * fl2_fx + 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pc_xx[j] + 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_yzzz[j] * fl1_fx * pc_y[j] + 1.5 * pa_yzz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_z[j] * fl1_fx * pb_y[j] + 1.5 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yy[j] * pa_zzz[j] * fl1_fx + 0.5 * pc_y[j] * pa_zzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_y[j] + 0.5 * fl1_fx * pa_zzz[j] * pc_xx[j] + 3.0 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_x[j] + 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] + fl1_fx * pa_zzz[j] * pb_x[j] * pc_x[j] + 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xx[j] + 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xy[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_yzzz[j] * pb_x[j] * pc_xy[j] + pa_yzzz[j] * pc_xx[j] * pb_y[j] + 3.0 * pa_yzz[j] * pc_yz[j] * pb_xx[j] + 6.0 * pa_yzz[j] * pc_xz[j] * pb_xy[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_xxy[j] + pc_yy[j] * pa_zzz[j] * pb_xx[j] + 2.0 * pc_xy[j] * pa_zzz[j] * pb_xy[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_xxy[j]);

                t_yzzz_xxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_zz[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 0.75 * pa_yz[j] * fl2_fx * pc_y[j] - 1.5 * pa_y[j] * pc_yz[j] * fl2_fx - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 1.5 * pc_yy[j] * pa_z[j] * fl2_fx - 0.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 0.75 * pc_yyz[j] * fl2_fx - 1.5 * pc_yz[j] * fl2_fx * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_xx[j] - 0.75 * fl2_fx * pc_xxz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * pa_yzz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_yz[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_y[j] - 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yy[j] * pa_zzz[j] * fl1_fx - 1.5 * pc_yyz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_y[j] - 1.5 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * fl1_fx * pa_zz[j] * pc_xxz[j] - 3.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_xx[j] - 3.0 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_x[j] - 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xxy[j] - 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xy[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] - pa_yzzz[j] * pc_xxy[j] - 6.0 * pa_yzz[j] * pc_xyz[j] * pb_x[j] - 3.0 * pa_yzz[j] * pc_xxz[j] * pb_y[j] - 3.0 * pa_yz[j] * pc_yzz[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xzz[j] * pb_xy[j] - pa_y[j] * pc_zzz[j] * pb_xxy[j] - 2.0 * pc_xyy[j] * pa_zzz[j] * pb_x[j] - pc_xxy[j] * pa_zzz[j] * pb_y[j] - 3.0 * pc_yyz[j] * pa_zz[j] * pb_xx[j] - 6.0 * pc_xyz[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_xxy[j]);

                t_yzzz_xxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * pa_y[j] * pc_yz[j] * fl2_fx + 0.75 * pc_yy[j] * pa_z[j] * fl2_fx + 1.5 * pc_yyz[j] * fl2_fx + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xxz[j] + 0.75 * fl2_fx * pa_z[j] * pc_xx[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 1.5 * pa_yz[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_yzzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyz[j] * pa_zz[j] * fl1_fx + 1.5 * pc_yyzz[j] * pa_z[j] * fl1_fx + 1.5 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_yzzz[j] * fl1_fx * pb_y[j] + 1.5 * fl1_fx * pa_z[j] * pc_xxzz[j] + fl1_fx * pc_xzzz[j] * pb_x[j] + 1.5 * fl1_fx * pa_zz[j] * pc_xxz[j] + 3.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xxy[j] + 1.5 * pa_y[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 3.0 * pa_yzz[j] * pc_xxyz[j] + 6.0 * pa_yz[j] * pc_xyzz[j] * pb_x[j] + 3.0 * pa_yz[j] * pc_xxzz[j] * pb_y[j] + pa_y[j] * pc_yzzz[j] * pb_xx[j] + 2.0 * pa_y[j] * pc_xzzz[j] * pb_xy[j] + pc_xxyy[j] * pa_zzz[j] + 6.0 * pc_xyyz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xxyz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_yyzz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_xy[j] + pc_yzzz[j] * pb_xxy[j]);

                t_yzzz_xxy[j] += fl_s_0_0_5 * (-0.25 * fl2_fx * pc_zzz[j] - 0.75 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_xxz[j] - 0.5 * pa_y[j] * pc_yzzz[j] * fl1_fx - 1.5 * pc_yyzz[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyzzz[j] * fl1_fx - 0.5 * pc_yzzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_xxzzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_xxzz[j] - fl1_fx * pc_xzzz[j] * pb_x[j] - 1.5 * pa_y[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xxyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yz[j] * pc_xxyzz[j] - 2.0 * pa_y[j] * pc_xyzzz[j] * pb_x[j] - pa_y[j] * pc_xxzzz[j] * pb_y[j] - 3.0 * pc_xxyyz[j] * pa_zz[j] - 6.0 * pc_xyyzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxyzz[j] * pa_z[j] * pb_y[j] - pc_yyzzz[j] * pb_xx[j] - 2.0 * pc_xyzzz[j] * pb_xy[j]);

                t_yzzz_xxy[j] += fl_s_0_0_6 * (0.5 * pc_yyzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_xxzzz[j] + 1.5 * pc_xxyyz[j] * fl1_fx + pa_y[j] * pc_xxyzzz[j] + 3.0 * pc_xxyyzz[j] * pa_z[j] + 2.0 * pc_xyyzzz[j] * pb_x[j] + pc_xxyzzz[j] * pb_y[j]);

                t_yzzz_xxy[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_132_133(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (132,133)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_xxz = primBuffer.data(150 * idx + 132);

            // Batch of Integrals (132,133)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxz, pb_xz, \
                                     pb_z, pc_x, pc_xx, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, \
                                     pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yzzz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzzz_xxz[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 0.75 * pa_yzz[j] * fl2_fx + 0.75 * pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 0.5 * pa_yzzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_yzz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xxz[j] + pa_yzzz[j] * pb_xxz[j]);

                t_yzzz_xxz[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - 1.5 * pa_yzz[j] * fl2_fx - 2.25 * pa_yz[j] * pc_z[j] * fl2_fx - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 1.5 * pa_yz[j] * fl2_fx * pb_z[j] - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_xx[j] - 0.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * pa_yzzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_yzzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_yzz[j] * pc_z[j] * fl1_fx * pb_z[j] - 3.0 * pa_yzz[j] * fl1_fx * pb_x[j] * pc_x[j] - 1.5 * pa_yzz[j] * fl1_fx * pb_xx[j] - 4.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_xx[j] - 0.5 * pc_y[j] * pa_zzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxz[j] - pa_yzzz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_yzzz[j] * pb_xz[j] * pc_x[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_xxz[j] - pc_y[j] * pa_zzz[j] * pb_xxz[j]);

                t_yzzz_xxz[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 0.75 * pa_yzz[j] * fl2_fx + 4.5 * pa_yz[j] * pc_z[j] * fl2_fx + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 1.5 * pc_y[j] * pa_zz[j] * fl2_fx + 2.25 * pc_yz[j] * pa_z[j] * fl2_fx + 0.75 * pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_y[j] * fl2_fx * pb_xx[j] + 0.5 * pa_yzzz[j] * fl1_fx * pc_z[j] + 1.5 * pa_yzz[j] * pc_zz[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_z[j] * fl1_fx * pb_z[j] + 1.5 * pa_yzz[j] * fl1_fx * pc_xx[j] + 3.0 * pa_yzz[j] * fl1_fx * pb_x[j] * pc_x[j] + 1.5 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 9.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_x[j] + 4.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_xx[j] + 3.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_xx[j] + 0.5 * pc_yz[j] * pa_zzz[j] * fl1_fx + 0.5 * pc_y[j] * pa_zzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_x[j] + 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_xx[j] + 4.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_xx[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_yzzz[j] * pb_x[j] * pc_xz[j] + pa_yzzz[j] * pc_xx[j] * pb_z[j] + 3.0 * pa_yzz[j] * pc_zz[j] * pb_xx[j] + 6.0 * pa_yzz[j] * pc_xz[j] * pb_xz[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_xxz[j] + pc_yz[j] * pa_zzz[j] * pb_xx[j] + 2.0 * pc_xy[j] * pa_zzz[j] * pb_xz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_xxz[j]);

                t_yzzz_xxz[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 2.25 * pa_yz[j] * pc_z[j] * fl2_fx - 3.0 * pa_y[j] * pc_zz[j] * fl2_fx - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 4.5 * pc_yz[j] * pa_z[j] * fl2_fx - 1.5 * pc_yzz[j] * fl2_fx - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_xx[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 1.5 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 1.5 * pa_yzz[j] * pc_zz[j] * fl1_fx - 1.5 * pa_yzz[j] * fl1_fx * pc_xx[j] - 1.5 * pa_yz[j] * pc_zzz[j] * fl1_fx - 1.5 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 4.5 * pa_yz[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_x[j] - 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_xx[j] - 0.5 * pc_yz[j] * pa_zzz[j] * fl1_fx - 1.5 * pc_yzz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_x[j] - 1.5 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_x[j] - 4.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_xx[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xx[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 1.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] - pa_yzzz[j] * pc_xxz[j] - 6.0 * pa_yzz[j] * pc_xzz[j] * pb_x[j] - 3.0 * pa_yzz[j] * pc_xxz[j] * pb_z[j] - 3.0 * pa_yz[j] * pc_zzz[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xzz[j] * pb_xz[j] - pa_y[j] * pc_zzz[j] * pb_xxz[j] - 2.0 * pc_xyz[j] * pa_zzz[j] * pb_x[j] - pc_xxy[j] * pa_zzz[j] * pb_z[j] - 3.0 * pc_yzz[j] * pa_zz[j] * pb_xx[j] - 6.0 * pc_xyz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_xxz[j]);

                t_yzzz_xxz[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 2.25 * pc_yz[j] * pa_z[j] * fl2_fx + 3.0 * pc_yzz[j] * fl2_fx + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xxy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_yz[j] * pc_zzz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_xxzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_yzz[j] * pa_zz[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 1.5 * pc_yzzz[j] * pa_z[j] * fl1_fx + 1.5 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 4.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_x[j] + 0.5 * pc_yzzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 3.0 * pa_yzz[j] * pc_xxzz[j] + 6.0 * pa_yz[j] * pc_xzzz[j] * pb_x[j] + 3.0 * pa_yz[j] * pc_xxzz[j] * pb_z[j] + pa_y[j] * pc_zzzz[j] * pb_xx[j] + 2.0 * pa_y[j] * pc_xzzz[j] * pb_xz[j] + pc_xxyz[j] * pa_zzz[j] + 6.0 * pc_xyzz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xxyz[j] * pa_zz[j] * pb_z[j] + 3.0 * pc_yzzz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_xz[j] + pc_yzzz[j] * pb_xxz[j]);

                t_yzzz_xxz[j] += fl_s_0_0_5 * (-1.5 * pc_yzz[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx - 3.0 * pa_y[j] * pc_xxzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 0.5 * pc_yzzzz[j] * fl1_fx - 0.5 * pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yz[j] * pc_xxzzz[j] - 2.0 * pa_y[j] * pc_xzzzz[j] * pb_x[j] - pa_y[j] * pc_xxzzz[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pa_zz[j] - 6.0 * pc_xyzzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - pc_yzzzz[j] * pb_xx[j] - 2.0 * pc_xyzzz[j] * pb_xz[j]);

                t_yzzz_xxz[j] += fl_s_0_0_6 * (0.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + pa_y[j] * pc_xxzzzz[j] + 3.0 * pc_xxyzzz[j] * pa_z[j] + 2.0 * pc_xyzzzz[j] * pb_x[j] + pc_xxyzzz[j] * pb_z[j]);

                t_yzzz_xxz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_133_134(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (133,134)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_xyy = primBuffer.data(150 * idx + 133);

            // Batch of Integrals (133,134)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xy, pb_xyy, pb_y, \
                                     pb_yy, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, \
                                     pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, \
                                     pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_yzzz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yzzz_xyy[j] = fl_s_0_0_0 * (0.75 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_yzzz[j] * pb_x[j] * fl1_fx + fl1_fx * pa_zzz[j] * pb_xy[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xyy[j] + pa_yzzz[j] * pb_xyy[j]);

                t_yzzz_xyy[j] += fl_s_0_0_1 * (-1.5 * pa_yz[j] * fl2_fx * pb_x[j] - 0.75 * pa_yz[j] * fl2_fx * pc_x[j] - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 3.0 * fl2_fx * pa_z[j] * pb_xy[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_yzzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yzzz[j] * pc_x[j] * fl1_fx - 1.5 * pa_yzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_y[j] * pa_zzz[j] * pb_x[j] * fl1_fx - fl1_fx * pa_zzz[j] * pc_x[j] * pb_y[j] - 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xy[j] - fl1_fx * pa_zzz[j] * pb_xy[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_y[j] - 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_yzzz[j] * pb_xy[j] * pc_y[j] - pa_yzzz[j] * pc_x[j] * pb_yy[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_xyy[j] - pc_y[j] * pa_zzz[j] * pb_xyy[j]);

                t_yzzz_xyy[j] += fl_s_0_0_2 * (1.5 * pa_yz[j] * fl2_fx * pc_x[j] + 0.75 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] + 0.75 * pa_y[j] * pc_xz[j] * fl2_fx + 4.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 3.0 * fl2_fx * pc_z[j] * pb_xy[j] + 1.5 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_yzzz[j] * pc_x[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_y[j] * pa_zzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx + 4.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 3.0 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_y[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] + fl1_fx * pa_zzz[j] * pc_x[j] * pb_y[j] + 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xy[j] + 1.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 3.0 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_y[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_y[j] + 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] + pa_yzzz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_yzzz[j] * pc_xy[j] * pb_y[j] + 6.0 * pa_yzz[j] * pc_yz[j] * pb_xy[j] + 3.0 * pa_yzz[j] * pc_xz[j] * pb_yy[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_xyy[j] + 2.0 * pc_yy[j] * pa_zzz[j] * pb_xy[j] + pc_xy[j] * pa_zzz[j] * pb_yy[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_xyy[j]);

                t_yzzz_xyy[j] += fl_s_0_0_3 * (-0.75 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * pc_xz[j] * fl2_fx - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * fl2_fx * pc_xz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_yzz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yz[j] * pc_xzz[j] * fl1_fx - 0.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 4.5 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] - fl1_fx * pc_zzz[j] * pb_xy[j] - 3.0 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_y[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xyy[j] - 1.5 * pa_yz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 3.0 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_y[j] - 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] - pa_yzzz[j] * pc_xyy[j] - 3.0 * pa_yzz[j] * pc_yyz[j] * pb_x[j] - 6.0 * pa_yzz[j] * pc_xyz[j] * pb_y[j] - 6.0 * pa_yz[j] * pc_yzz[j] * pb_xy[j] - 3.0 * pa_yz[j] * pc_xzz[j] * pb_yy[j] - pa_y[j] * pc_zzz[j] * pb_xyy[j] - pc_yyy[j] * pa_zzz[j] * pb_x[j] - 2.0 * pc_xyy[j] * pa_zzz[j] * pb_y[j] - 6.0 * pc_yyz[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_yy[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_xyy[j]);

                t_yzzz_xyy[j] += fl_s_0_0_4 * (0.75 * pa_y[j] * pc_xz[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 1.5 * pa_yz[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_y[j] * pc_xzzz[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 4.5 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx + 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx + fl1_fx * pc_xzzz[j] * pb_y[j] + 3.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] + fl1_fx * pc_zzz[j] * pb_xy[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xyy[j] + 1.5 * pa_y[j] * pc_xyyz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yzz[j] * pc_xyyz[j] + 3.0 * pa_yz[j] * pc_yyzz[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_xy[j] + pa_y[j] * pc_xzzz[j] * pb_yy[j] + pc_xyyy[j] * pa_zzz[j] + 3.0 * pc_yyyz[j] * pa_zz[j] * pb_x[j] + 6.0 * pc_xyyz[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_yyzz[j] * pa_z[j] * pb_xy[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_yy[j] + pc_yzzz[j] * pb_xyy[j]);

                t_yzzz_xyy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_y[j] * pc_xzzz[j] * fl1_fx - 4.5 * pc_xyzz[j] * pa_z[j] * fl1_fx - 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - fl1_fx * pc_xzzz[j] * pb_y[j] - 1.5 * pa_y[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yz[j] * pc_xyyzz[j] - pa_y[j] * pc_yyzzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xyzzz[j] * pb_y[j] - 3.0 * pc_xyyyz[j] * pa_zz[j] - 3.0 * pc_yyyzz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_yyzzz[j] * pb_xy[j] - pc_xyzzz[j] * pb_yy[j]);

                t_yzzz_xyy[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + pa_y[j] * pc_xyyzzz[j] + 3.0 * pc_xyyyzz[j] * pa_z[j] + pc_yyyzzz[j] * pb_x[j] + 2.0 * pc_xyyzzz[j] * pb_y[j]);

                t_yzzz_xyy[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_134_135(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (134,135)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_xyz = primBuffer.data(150 * idx + 134);

            // Batch of Integrals (134,135)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xy, pb_xyz, pb_xz, \
                                     pb_y, pb_yz, pb_z, pc_x, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, \
                                     pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, \
                                     pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, \
                                     pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yzzz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzzz_xyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 1.5 * pa_yzz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_zzz[j] * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xyz[j] + pa_yzzz[j] * pb_xyz[j]);

                t_yzzz_xyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_zz[j] * pb_x[j] - 2.25 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pa_y[j] * fl2_fx * pb_xy[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * pa_yzz[j] * fl1_fx * pb_x[j] * pc_y[j] - 1.5 * pa_yzz[j] * fl1_fx * pc_x[j] * pb_y[j] - 1.5 * pa_yzz[j] * fl1_fx * pb_xy[j] - 4.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_xy[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_x[j] * pc_z[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_x[j] * pb_z[j] - 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xz[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_xz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xyz[j] - pa_yzzz[j] * pb_xy[j] * pc_z[j] - pa_yzzz[j] * pb_xz[j] * pc_y[j] - pa_yzzz[j] * pc_x[j] * pb_yz[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_xyz[j] - pc_y[j] * pa_zzz[j] * pb_xyz[j]);

                t_yzzz_xyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * fl2_fx * pa_zz[j] * pc_x[j] + 2.25 * fl2_fx * pa_z[j] * pc_xz[j] + 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] + 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pb_xy[j] + 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 1.5 * pa_yzz[j] * fl1_fx * pc_xy[j] + 1.5 * pa_yzz[j] * fl1_fx * pb_x[j] * pc_y[j] + 1.5 * pa_yzz[j] * fl1_fx * pc_x[j] * pb_y[j] + 4.5 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_x[j] + 4.5 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_xy[j] + 3.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] + 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_xy[j] + 4.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pa_zzz[j] * pc_xz[j] + 1.5 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_x[j] + 1.5 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_z[j] + 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] + 0.5 * fl1_fx * pa_zzz[j] * pb_x[j] * pc_z[j] + 0.5 * fl1_fx * pa_zzz[j] * pc_x[j] * pb_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_z[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xyz[j] + pa_yzzz[j] * pb_x[j] * pc_yz[j] + pa_yzzz[j] * pc_xz[j] * pb_y[j] + pa_yzzz[j] * pc_xy[j] * pb_z[j] + 3.0 * pa_yzz[j] * pc_zz[j] * pb_xy[j] + 3.0 * pa_yzz[j] * pc_yz[j] * pb_xz[j] + 3.0 * pa_yzz[j] * pc_xz[j] * pb_yz[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_xyz[j] + pc_yz[j] * pa_zzz[j] * pb_xy[j] + pc_yy[j] * pa_zzz[j] * pb_xz[j] + pc_xy[j] * pa_zzz[j] * pb_yz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_xyz[j]);

                t_yzzz_xyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 4.5 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_xzz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 2.25 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_xy[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_yy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pc_xz[j] * pb_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * pa_yzz[j] * fl1_fx * pc_xy[j] - 4.5 * pa_yz[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_x[j] - 4.5 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 1.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] - 4.5 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_x[j] - 4.5 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_xy[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xy[j] - 1.5 * fl1_fx * pa_zz[j] * pc_xzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] - 1.5 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_xz[j] - 1.5 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_x[j] - 1.5 * fl1_fx * pa_zz[j] * pc_xz[j] * pb_z[j] - 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] - 1.5 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_z[j] - 1.5 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xyz[j] - pa_yzzz[j] * pc_xyz[j] - 3.0 * pa_yzz[j] * pc_yzz[j] * pb_x[j] - 3.0 * pa_yzz[j] * pc_xzz[j] * pb_y[j] - 3.0 * pa_yzz[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_yz[j] * pc_zzz[j] * pb_xy[j] - 3.0 * pa_yz[j] * pc_yzz[j] * pb_xz[j] - 3.0 * pa_yz[j] * pc_xzz[j] * pb_yz[j] - pa_y[j] * pc_zzz[j] * pb_xyz[j] - pc_yyz[j] * pa_zzz[j] * pb_x[j] - pc_xyz[j] * pa_zzz[j] * pb_y[j] - pc_xyy[j] * pa_zzz[j] * pb_z[j] - 3.0 * pc_yzz[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_yyz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_xyz[j]);

                t_yzzz_xyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 3.0 * fl2_fx * pc_xzz[j] + 2.25 * fl2_fx * pa_z[j] * pc_xz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 4.5 * pa_yz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 3.0 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 4.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xy[j] + 1.5 * fl1_fx * pa_z[j] * pc_xzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_xzzz[j] * pb_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_xzz[j] + 1.5 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] + 1.5 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xz[j] + 1.5 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_yzz[j] * pc_xyzz[j] + 3.0 * pa_yz[j] * pc_yzzz[j] * pb_x[j] + 3.0 * pa_yz[j] * pc_xzzz[j] * pb_y[j] + 3.0 * pa_yz[j] * pc_xyzz[j] * pb_z[j] + pa_y[j] * pc_zzzz[j] * pb_xy[j] + pa_y[j] * pc_yzzz[j] * pb_xz[j] + pa_y[j] * pc_xzzz[j] * pb_yz[j] + pc_xyyz[j] * pa_zzz[j] + 3.0 * pc_yyzz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xyzz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_xyyz[j] * pa_zz[j] * pb_z[j] + 3.0 * pc_yzzz[j] * pa_z[j] * pb_xy[j] + 3.0 * pc_yyzz[j] * pa_z[j] * pb_xz[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_yz[j] + pc_yzzz[j] * pb_xyz[j]);

                t_yzzz_xyz[j] += fl_s_0_0_5 * (-1.5 * fl2_fx * pc_xzz[j] - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - 4.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_xzzzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_xzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_xzzz[j] * pb_z[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yz[j] * pc_xyzzz[j] - pa_y[j] * pc_yzzzz[j] * pb_x[j] - pa_y[j] * pc_xzzzz[j] * pb_y[j] - pa_y[j] * pc_xyzzz[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pa_zz[j] - 3.0 * pc_yyzzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xyzzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - pc_yzzzz[j] * pb_xy[j] - pc_yyzzz[j] * pb_xz[j] - pc_xyzzz[j] * pb_yz[j]);

                t_yzzz_xyz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_xzzzz[j] + pa_y[j] * pc_xyzzzz[j] + 3.0 * pc_xyyzzz[j] * pa_z[j] + pc_yyzzzz[j] * pb_x[j] + pc_xyzzzz[j] * pb_y[j] + pc_xyyzzz[j] * pb_z[j]);

                t_yzzz_xyz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_135_136(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (135,136)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_xzz = primBuffer.data(150 * idx + 135);

            // Batch of Integrals (135,136)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_x, pb_xz, pb_xzz, pb_z, \
                                     pb_zz, pc_x, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_yzzz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_yzzz_xzz[j] = fl_s_0_0_0 * (2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pb_xz[j] + 0.5 * pa_yzzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yzz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_xzz[j] + pa_yzzz[j] * pb_xzz[j]);

                t_yzzz_xzz[j] += fl_s_0_0_1 * (-2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 4.5 * pa_yz[j] * fl2_fx * pb_x[j] - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pa_y[j] * fl2_fx * pb_xz[j] - 1.5 * pc_y[j] * fl2_fx * pb_xz[j] - 0.5 * pa_yzzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yzzz[j] * pc_x[j] * fl1_fx - 4.5 * pa_yzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 3.0 * pa_yzz[j] * fl1_fx * pc_x[j] * pb_z[j] - 3.0 * pa_yzz[j] * fl1_fx * pb_xz[j] - 9.0 * pa_yz[j] * pc_z[j] * fl1_fx * pb_xz[j] - 0.5 * pc_y[j] * pa_zzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_y[j] * pa_zz[j] * fl1_fx * pb_xz[j] - 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_yzzz[j] * pb_xz[j] * pc_z[j] - pa_yzzz[j] * pc_x[j] * pb_zz[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_xzz[j] - pc_y[j] * pa_zzz[j] * pb_xzz[j]);

                t_yzzz_xzz[j] += fl_s_0_0_2 * (4.5 * pa_yz[j] * fl2_fx * pc_x[j] + 2.25 * pa_yz[j] * fl2_fx * pb_x[j] + 3.75 * pa_y[j] * pc_xz[j] * fl2_fx + 7.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pc_y[j] * fl2_fx * pb_xz[j] + 0.5 * pa_yzzz[j] * pc_x[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_xz[j] * fl1_fx + 3.0 * pa_yzz[j] * fl1_fx * pc_x[j] * pb_z[j] + 9.0 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 9.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 9.0 * pa_yz[j] * pc_z[j] * fl1_fx * pb_xz[j] + 6.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_y[j] * pa_zzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xy[j] * pa_zzz[j] * fl1_fx + 4.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_y[j] * pa_zz[j] * fl1_fx * pb_xz[j] + 9.0 * pc_yz[j] * pa_z[j] * fl1_fx * pb_xz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] + pa_yzzz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_yzzz[j] * pc_xz[j] * pb_z[j] + 6.0 * pa_yzz[j] * pc_zz[j] * pb_xz[j] + 3.0 * pa_yzz[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_xzz[j] + 2.0 * pc_yz[j] * pa_zzz[j] * pb_xz[j] + pc_xy[j] * pa_zzz[j] * pb_zz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_xzz[j]);

                t_yzzz_xzz[j] += fl_s_0_0_3 * (-2.25 * pa_yz[j] * fl2_fx * pc_x[j] - 7.5 * pa_y[j] * pc_xz[j] * fl2_fx - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 1.5 * pc_y[j] * fl2_fx * pb_xz[j] - 4.5 * pa_yzz[j] * pc_xz[j] * fl1_fx - 9.0 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 9.0 * pa_yz[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 5.0 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 6.0 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xy[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 9.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_yz[j] * pa_z[j] * fl1_fx * pb_xz[j] - 6.0 * pc_yzz[j] * fl1_fx * pb_xz[j] - 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] - pa_yzzz[j] * pc_xzz[j] - 3.0 * pa_yzz[j] * pc_zzz[j] * pb_x[j] - 6.0 * pa_yzz[j] * pc_xzz[j] * pb_z[j] - 6.0 * pa_yz[j] * pc_zzz[j] * pb_xz[j] - 3.0 * pa_yz[j] * pc_xzz[j] * pb_zz[j] - pa_y[j] * pc_zzz[j] * pb_xzz[j] - pc_yzz[j] * pa_zzz[j] * pb_x[j] - 2.0 * pc_xyz[j] * pa_zzz[j] * pb_z[j] - 6.0 * pc_yzz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_zz[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_xzz[j]);

                t_yzzz_xzz[j] += fl_s_0_0_4 * (3.75 * pa_y[j] * pc_xz[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 9.0 * pa_yz[j] * pc_xzz[j] * fl1_fx + 5.0 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 5.0 * pa_y[j] * pc_xzzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 9.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + 5.0 * pc_yzzz[j] * pb_x[j] * fl1_fx + 6.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yzz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_yzz[j] * pc_xzzz[j] + 3.0 * pa_yz[j] * pc_zzzz[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xzzz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_zzzz[j] * pb_xz[j] + pa_y[j] * pc_xzzz[j] * pb_zz[j] + pc_xyzz[j] * pa_zzz[j] + 3.0 * pc_yzzz[j] * pa_zz[j] * pb_x[j] + 6.0 * pc_xyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_yzzz[j] * pa_z[j] * pb_xz[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_zz[j] + pc_yzzz[j] * pb_xzz[j]);

                t_yzzz_xzz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_y[j] * pc_xzzz[j] * fl1_fx - 9.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_yzzz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yz[j] * pc_xzzzz[j] - pa_y[j] * pc_zzzzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xzzzz[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pa_zz[j] - 3.0 * pc_yzzzz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xyzzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yzzzz[j] * pb_xz[j] - pc_xyzzz[j] * pb_zz[j]);

                t_yzzz_xzz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + pa_y[j] * pc_xzzzzz[j] + 3.0 * pc_xyzzzz[j] * pa_z[j] + pc_yzzzzz[j] * pb_x[j] + 2.0 * pc_xyzzzz[j] * pb_z[j]);

                t_yzzz_xzz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_136_137(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (136,137)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_yyy = primBuffer.data(150 * idx + 136);

            // Batch of Integrals (136,137)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_y, pb_yy, pb_yyy, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyyzzz, pc_yyyz, pc_yyyzz, \
                                     pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yzzz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzzz_yyy[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pa_z[j] + 0.75 * fl2_fx * pa_zzz[j] + 2.25 * pa_yz[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_yzzz[j] * pb_y[j] * fl1_fx + 1.5 * fl1_fx * pa_zzz[j] * pb_yy[j] + 1.5 * pa_yz[j] * fl1_fx * pb_yyy[j] + pa_yzzz[j] * pb_yyy[j]);

                t_yzzz_yyy[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 1.5 * fl2_fx * pa_zzz[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * pa_yz[j] * fl2_fx * pb_y[j] - 2.25 * pa_yz[j] * fl2_fx * pc_y[j] - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 6.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 4.5 * fl2_fx * pa_z[j] * pb_yy[j] - 2.25 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_yzzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yzzz[j] * pc_y[j] * fl1_fx - 4.5 * pa_yzz[j] * pc_z[j] * pb_y[j] * fl1_fx - 4.5 * pc_y[j] * pa_zzz[j] * pb_y[j] * fl1_fx - 4.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yy[j] - 1.5 * fl1_fx * pa_zzz[j] * pb_yy[j] - 4.5 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_yz[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_yzzz[j] * pb_yy[j] * pc_y[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_yyy[j] - pc_y[j] * pa_zzz[j] * pb_yyy[j]);

                t_yzzz_yyy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pa_z[j] + 3.375 * fl3_fx * pc_z[j] + 4.5 * fl2_fx * pa_zz[j] * pc_z[j] + 2.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pa_zzz[j] + 4.5 * pa_yz[j] * fl2_fx * pc_y[j] + 2.25 * pa_yz[j] * fl2_fx * pb_y[j] + 4.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 13.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] + 4.5 * pc_yy[j] * pa_z[j] * fl2_fx + 6.75 * pc_yz[j] * fl2_fx * pb_y[j] + 4.5 * fl2_fx * pc_z[j] * pb_yy[j] + 2.25 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_yzzz[j] * pc_y[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_z[j] * pb_y[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_yz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 4.5 * pc_y[j] * pa_zzz[j] * pb_y[j] * fl1_fx + 3.0 * pc_yy[j] * pa_zzz[j] * fl1_fx + 13.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 4.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] + 4.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yy[j] + 4.5 * pa_yz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_y[j] + 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyy[j] + 4.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_yzzz[j] * pb_y[j] * pc_yy[j] + 9.0 * pa_yzz[j] * pc_yz[j] * pb_yy[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_yyy[j] + 3.0 * pc_yy[j] * pa_zzz[j] * pb_yy[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_yyy[j]);

                t_yzzz_yyy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pa_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_zz[j] - 0.75 * fl2_fx * pc_zzz[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 2.25 * pa_yz[j] * fl2_fx * pc_y[j] - 4.5 * pa_y[j] * pc_yz[j] * fl2_fx - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 9.0 * pc_yy[j] * pa_z[j] * fl2_fx - 6.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 13.5 * pc_yz[j] * fl2_fx * pb_y[j] - 4.5 * pc_yyz[j] * fl2_fx - 2.25 * fl2_fx * pc_z[j] * pb_yy[j] - 4.5 * pa_yzz[j] * pc_yz[j] * fl1_fx - 4.5 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 4.5 * pa_yz[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yy[j] * pa_zzz[j] * fl1_fx - 13.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 9.0 * pc_yyz[j] * pa_zz[j] * fl1_fx - 13.5 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - 4.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] - 1.5 * pa_yz[j] * fl1_fx * pc_yyy[j] - 4.5 * pa_yz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 4.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 4.5 * pc_yyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] - pa_yzzz[j] * pc_yyy[j] - 9.0 * pa_yzz[j] * pc_yyz[j] * pb_y[j] - 9.0 * pa_yz[j] * pc_yzz[j] * pb_yy[j] - pa_y[j] * pc_zzz[j] * pb_yyy[j] - 3.0 * pc_yyy[j] * pa_zzz[j] * pb_y[j] - 9.0 * pc_yyz[j] * pa_zz[j] * pb_yy[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_yyy[j]);

                t_yzzz_yyy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pc_zzz[j] + 2.25 * fl2_fx * pa_z[j] * pc_zz[j] + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 4.5 * pc_yy[j] * pa_z[j] * fl2_fx + 9.0 * pc_yyz[j] * fl2_fx + 6.75 * pc_yz[j] * fl2_fx * pb_y[j] + 4.5 * pa_yz[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_y[j] * pc_yzzz[j] * fl1_fx + 9.0 * pc_yyz[j] * pa_zz[j] * fl1_fx + 13.5 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 9.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 4.5 * pc_yzzz[j] * pb_y[j] * fl1_fx + 1.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + 1.5 * pa_yz[j] * fl1_fx * pc_yyy[j] + 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyyy[j] * pa_z[j] * fl1_fx + 4.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 4.5 * pc_yyyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_yyz[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yzz[j] * pc_yyyz[j] + 9.0 * pa_yz[j] * pc_yyzz[j] * pb_y[j] + 3.0 * pa_y[j] * pc_yzzz[j] * pb_yy[j] + pc_yyyy[j] * pa_zzz[j] + 9.0 * pc_yyyz[j] * pa_zz[j] * pb_y[j] + 9.0 * pc_yyzz[j] * pa_z[j] * pb_yy[j] + pc_yzzz[j] * pb_yyy[j]);

                t_yzzz_yyy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_zzz[j] - 4.5 * pc_yyz[j] * fl2_fx - 1.5 * pa_y[j] * pc_yzzz[j] * fl1_fx - 9.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - 4.5 * pc_yzzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yyzzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx - 1.5 * pc_yyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyyyz[j] * fl1_fx - 4.5 * pc_yyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yz[j] * pc_yyyzz[j] - 3.0 * pa_y[j] * pc_yyzzz[j] * pb_y[j] - 3.0 * pc_yyyyz[j] * pa_zz[j] - 9.0 * pc_yyyzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_yyzzz[j] * pb_yy[j]);

                t_yzzz_yyy[j] += fl_s_0_0_6 * (3.0 * pc_yyzzz[j] * fl1_fx + 1.5 * pc_yyyyz[j] * fl1_fx + pa_y[j] * pc_yyyzzz[j] + 3.0 * pc_yyyyzz[j] * pa_z[j] + 3.0 * pc_yyyzzz[j] * pb_y[j]);

                t_yzzz_yyy[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_137_138(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (137,138)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_yyz = primBuffer.data(150 * idx + 137);

            // Batch of Integrals (137,138)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_y, pb_yy, pb_yyz, pb_yz, \
                                     pb_z, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyyzzzz, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yzzz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzzz_yyz[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 0.75 * fl3_fx * pb_y[j] + 0.75 * pa_yzz[j] * fl2_fx + 1.5 * fl2_fx * pa_zz[j] * pb_y[j] + 0.75 * pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_yzzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_yzz[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_zzz[j] * pb_yz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_yyz[j] + pa_yzzz[j] * pb_yyz[j]);

                t_yzzz_yyz[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 2.25 * fl3_fx * pb_y[j] - 1.5 * pa_yzz[j] * fl2_fx - 2.25 * pa_yz[j] * pc_z[j] * fl2_fx - 2.25 * pc_y[j] * pa_zz[j] * fl2_fx - 3.0 * fl2_fx * pa_zz[j] * pb_y[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * pa_yz[j] * fl2_fx * pb_z[j] - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_y[j] * fl2_fx * pb_yy[j] - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pa_z[j] * pb_yz[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_yzzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_yzzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_yzz[j] * pc_z[j] * fl1_fx * pb_z[j] - 3.0 * pa_yzz[j] * fl1_fx * pb_y[j] * pc_y[j] - 1.5 * pa_yzz[j] * fl1_fx * pb_yy[j] - 4.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_y[j] * pa_zzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yy[j] - fl1_fx * pa_zzz[j] * pb_y[j] * pc_z[j] - 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yz[j] - fl1_fx * pa_zzz[j] * pb_yz[j] - 3.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_y[j] - 1.5 * pa_yz[j] * fl1_fx * pb_yyz[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_yyz[j] - pa_yzzz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_yzzz[j] * pb_yz[j] * pc_y[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_yyz[j] - pc_y[j] * pa_zzz[j] * pb_yyz[j]);

                t_yzzz_yyz[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 3.375 * pc_y[j] * fl3_fx + 2.25 * fl3_fx * pb_y[j] + 0.75 * pa_yzz[j] * fl2_fx + 4.5 * pa_yz[j] * pc_z[j] * fl2_fx + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 4.5 * pc_y[j] * pa_zz[j] * fl2_fx + 6.75 * pc_yz[j] * pa_z[j] * fl2_fx + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 3.0 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * fl2_fx * pa_zz[j] * pb_y[j] + 0.75 * pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pc_yy[j] + 3.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 4.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pb_yy[j] + 3.0 * fl2_fx * pc_z[j] * pb_yz[j] + 1.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_yzzz[j] * fl1_fx * pc_z[j] + 1.5 * pa_yzz[j] * pc_zz[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_z[j] * fl1_fx * pb_z[j] + 1.5 * pa_yzz[j] * fl1_fx * pc_yy[j] + 3.0 * pa_yzz[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 4.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_yy[j] + 3.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yy[j] + 1.5 * pc_yz[j] * pa_zzz[j] * fl1_fx + 1.5 * pc_y[j] * pa_zzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_y[j] + 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yy[j] + 4.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_yy[j] + 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_y[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] + fl1_fx * pa_zzz[j] * pb_y[j] * pc_z[j] + 3.0 * fl1_fx * pa_zz[j] * pc_z[j] * pb_yz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_yy[j] * pb_z[j] + 3.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_y[j] + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_yzzz[j] * pb_y[j] * pc_yz[j] + pa_yzzz[j] * pc_yy[j] * pb_z[j] + 3.0 * pa_yzz[j] * pc_zz[j] * pb_yy[j] + 6.0 * pa_yzz[j] * pc_yz[j] * pb_yz[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_yyz[j] + pc_yz[j] * pa_zzz[j] * pb_yy[j] + 2.0 * pc_yy[j] * pa_zzz[j] * pb_yz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_yyz[j]);

                t_yzzz_yyz[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 3.375 * pc_y[j] * fl3_fx - 0.75 * fl3_fx * pb_y[j] - 2.25 * pa_yz[j] * pc_z[j] * fl2_fx - 3.0 * pa_y[j] * pc_zz[j] * fl2_fx - 2.25 * pc_y[j] * pa_zz[j] * fl2_fx - 13.5 * pc_yz[j] * pa_z[j] * fl2_fx - 4.5 * pc_yzz[j] * fl2_fx - 6.0 * fl2_fx * pc_zz[j] * pb_y[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_yy[j] - 1.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_yyy[j] * fl2_fx - 3.0 * pc_yy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * pa_yzz[j] * pc_zz[j] * fl1_fx - 1.5 * pa_yzz[j] * fl1_fx * pc_yy[j] - 1.5 * pa_yz[j] * pc_zzz[j] * fl1_fx - 1.5 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 4.5 * pa_yz[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_yzz[j] * pa_zz[j] * fl1_fx - 4.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 1.5 * pc_yyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_y[j] - 4.5 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_yy[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] - fl1_fx * pc_zzz[j] * pb_yz[j] - 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_y[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] - 1.5 * pa_yz[j] * fl1_fx * pc_yy[j] * pb_z[j] - 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yyz[j] - pa_yzzz[j] * pc_yyz[j] - 6.0 * pa_yzz[j] * pc_yzz[j] * pb_y[j] - 3.0 * pa_yzz[j] * pc_yyz[j] * pb_z[j] - 3.0 * pa_yz[j] * pc_zzz[j] * pb_yy[j] - 6.0 * pa_yz[j] * pc_yzz[j] * pb_yz[j] - pa_y[j] * pc_zzz[j] * pb_yyz[j] - 2.0 * pc_yyz[j] * pa_zzz[j] * pb_y[j] - pc_yyy[j] * pa_zzz[j] * pb_z[j] - 3.0 * pc_yzz[j] * pa_zz[j] * pb_yy[j] - 6.0 * pc_yyz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_yyz[j]);

                t_yzzz_yyz[j] += fl_s_0_0_4 * (1.125 * pc_y[j] * fl3_fx + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 6.75 * pc_yz[j] * pa_z[j] * fl2_fx + 9.0 * pc_yzz[j] * fl2_fx + 3.0 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * pa_y[j] * fl2_fx * pc_yy[j] + 2.25 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_yyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pa_yz[j] * pc_zzz[j] * fl1_fx + 4.5 * pa_yz[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 4.5 * pc_yzz[j] * pa_zz[j] * fl1_fx + 1.5 * pc_yyy[j] * pa_zz[j] * fl1_fx + 4.5 * pc_yzzz[j] * pa_z[j] * fl1_fx + 4.5 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 4.5 * pc_yyyz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_yzzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_yy[j] + fl1_fx * pc_zzzz[j] * pb_y[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] + fl1_fx * pc_zzz[j] * pb_yz[j] + 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_yzz[j] * pc_yyzz[j] + 6.0 * pa_yz[j] * pc_yzzz[j] * pb_y[j] + 3.0 * pa_yz[j] * pc_yyzz[j] * pb_z[j] + pa_y[j] * pc_zzzz[j] * pb_yy[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_yz[j] + pc_yyyz[j] * pa_zzz[j] + 6.0 * pc_yyzz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_yyyz[j] * pa_zz[j] * pb_z[j] + 3.0 * pc_yzzz[j] * pa_z[j] * pb_yy[j] + 6.0 * pc_yyzz[j] * pa_z[j] * pb_yz[j] + pc_yzzz[j] * pb_yyz[j]);

                t_yzzz_yyz[j] += fl_s_0_0_5 * (-4.5 * pc_yzz[j] * fl2_fx - 0.75 * pc_yyy[j] * fl2_fx - 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx - 3.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 4.5 * pc_yzzz[j] * pa_z[j] * fl1_fx - 4.5 * pc_yyyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_yzzzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yyyzz[j] * fl1_fx - 6.0 * pc_yyzz[j] * fl1_fx * pb_y[j] - fl1_fx * pc_zzzz[j] * pb_y[j] - 1.5 * pc_yyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yz[j] * pc_yyzzz[j] - 2.0 * pa_y[j] * pc_yzzzz[j] * pb_y[j] - pa_y[j] * pc_yyzzz[j] * pb_z[j] - 3.0 * pc_yyyzz[j] * pa_zz[j] - 6.0 * pc_yyzzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_yyyzz[j] * pa_z[j] * pb_z[j] - pc_yzzzz[j] * pb_yy[j] - 2.0 * pc_yyzzz[j] * pb_yz[j]);

                t_yzzz_yyz[j] += fl_s_0_0_6 * (1.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pc_yyyzz[j] * fl1_fx + pa_y[j] * pc_yyzzzz[j] + 3.0 * pc_yyyzzz[j] * pa_z[j] + 2.0 * pc_yyzzzz[j] * pb_y[j] + pc_yyyzzz[j] * pb_z[j]);

                t_yzzz_yyz[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_138_139(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (138,139)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyzzzzz = pcDistances.data(119 * idx + 116);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_yzz = primBuffer.data(150 * idx + 138);

            // Batch of Integrals (138,139)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_y, pb_yz, pb_yzz, pb_z, \
                                     pb_zz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yyzzzzz, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yzzz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzzz_yzz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 2.25 * pa_yz[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pa_zzz[j] + 1.5 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_yzzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_yzz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_zzz[j] * pb_zz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_yzz[j] + pa_yzzz[j] * pb_yzz[j]);

                t_yzzz_yzz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 2.25 * fl3_fx * pb_z[j] - 2.25 * pa_yz[j] * fl2_fx * pc_y[j] - 4.5 * pa_yz[j] * fl2_fx * pb_y[j] - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 0.5 * fl2_fx * pa_zzz[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 3.0 * fl2_fx * pa_zz[j] * pb_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pa_y[j] * fl2_fx * pb_yz[j] - 1.5 * pc_y[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * pa_yzzz[j] * pb_y[j] * fl1_fx - 0.5 * pa_yzzz[j] * pc_y[j] * fl1_fx - 4.5 * pa_yzz[j] * pc_z[j] * pb_y[j] * fl1_fx - 3.0 * pa_yzz[j] * fl1_fx * pc_y[j] * pb_z[j] - 3.0 * pa_yzz[j] * fl1_fx * pb_yz[j] - 9.0 * pa_yz[j] * pc_z[j] * fl1_fx * pb_yz[j] - 0.5 * pc_y[j] * pa_zzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yz[j] - fl1_fx * pa_zzz[j] * pb_z[j] * pc_z[j] - 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zzz[j] * pb_zz[j] - 1.5 * pa_yz[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_yzzz[j] * pb_yz[j] * pc_z[j] - pa_yzzz[j] * pc_y[j] * pb_zz[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_yzz[j] - pc_y[j] * pa_zzz[j] * pb_yzz[j]);

                t_yzzz_yzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 2.25 * fl3_fx * pb_z[j] + 4.5 * pa_yz[j] * fl2_fx * pc_y[j] + 2.25 * pa_yz[j] * fl2_fx * pb_y[j] + 3.75 * pa_y[j] * pc_yz[j] * fl2_fx + 7.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] + 2.25 * pc_yy[j] * pa_z[j] * fl2_fx + 4.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] + 3.75 * pc_yz[j] * fl2_fx * pb_y[j] + 4.5 * fl2_fx * pa_zz[j] * pc_z[j] + 4.5 * fl2_fx * pa_z[j] * pc_zz[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 3.0 * fl2_fx * pc_zz[j] * pb_z[j] + 0.25 * fl2_fx * pa_zzz[j] + 1.5 * fl2_fx * pa_zz[j] * pb_z[j] + 3.0 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_yz[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 3.0 * pc_y[j] * fl2_fx * pb_yz[j] + 1.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_yzzz[j] * pc_y[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_z[j] * pb_y[j] * fl1_fx + 4.5 * pa_yzz[j] * pc_yz[j] * fl1_fx + 3.0 * pa_yzz[j] * fl1_fx * pc_y[j] * pb_z[j] + 9.0 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 9.0 * pa_yz[j] * pc_z[j] * fl1_fx * pb_yz[j] + 6.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yz[j] + 0.5 * pc_y[j] * pa_zzz[j] * pb_y[j] * fl1_fx + 0.5 * pc_yy[j] * pa_zzz[j] * fl1_fx + 4.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yz[j] + 9.0 * pc_yz[j] * pa_z[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_zzz[j] * pc_zz[j] + 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_z[j] + 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] + fl1_fx * pa_zzz[j] * pb_z[j] * pc_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_z[j] * pb_zz[j] + 1.5 * pa_yz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yzz[j] + pa_yzzz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_yzzz[j] * pc_yz[j] * pb_z[j] + 6.0 * pa_yzz[j] * pc_zz[j] * pb_yz[j] + 3.0 * pa_yzz[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_yzz[j] + 2.0 * pc_yz[j] * pa_zzz[j] * pb_yz[j] + pc_yy[j] * pa_zzz[j] * pb_zz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_yzz[j]);

                t_yzzz_yzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pa_z[j] - 0.75 * fl3_fx * pb_z[j] - 2.25 * pa_yz[j] * fl2_fx * pc_y[j] - 7.5 * pa_y[j] * pc_yz[j] * fl2_fx - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 4.5 * pc_yy[j] * pa_z[j] * fl2_fx - 2.25 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 3.75 * pc_yyz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pb_y[j] - 9.0 * fl2_fx * pa_z[j] * pc_zz[j] - 2.5 * fl2_fx * pc_zzz[j] - 6.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.25 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pc_yy[j] * fl2_fx * pb_z[j] - 1.5 * pc_y[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 4.5 * pa_yzz[j] * pc_yz[j] * fl1_fx - 9.0 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 9.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 5.0 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yy[j] * pa_zzz[j] * fl1_fx - 4.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 4.5 * pc_yyz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 9.0 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_yz[j] * pa_z[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yzz[j] * fl1_fx * pb_yz[j] - 1.5 * fl1_fx * pa_zz[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zzz[j] * pc_zz[j] - 3.0 * fl1_fx * pa_zz[j] * pc_zz[j] * pb_z[j] - 1.5 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] - 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yzz[j] - pa_yzzz[j] * pc_yzz[j] - 3.0 * pa_yzz[j] * pc_zzz[j] * pb_y[j] - 6.0 * pa_yzz[j] * pc_yzz[j] * pb_z[j] - 6.0 * pa_yz[j] * pc_zzz[j] * pb_yz[j] - 3.0 * pa_yz[j] * pc_yzz[j] * pb_zz[j] - pa_y[j] * pc_zzz[j] * pb_yzz[j] - pc_yzz[j] * pa_zzz[j] * pb_y[j] - 2.0 * pc_yyz[j] * pa_zzz[j] * pb_z[j] - 6.0 * pc_yzz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_yyz[j] * pa_zz[j] * pb_zz[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_yzz[j]);

                t_yzzz_yzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 3.75 * pa_y[j] * pc_yz[j] * fl2_fx + 2.25 * pc_yy[j] * pa_z[j] * fl2_fx + 7.5 * pc_yyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_y[j] + 5.0 * fl2_fx * pc_zzz[j] + 4.5 * fl2_fx * pa_z[j] * pc_zz[j] + 3.0 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 9.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + 5.0 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 5.0 * pa_y[j] * pc_yzzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_yyz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 9.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] + 5.0 * pc_yzzz[j] * pb_y[j] * fl1_fx + 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yzz[j] * fl1_fx * pb_yz[j] + 1.5 * fl1_fx * pa_z[j] * pc_zzzz[j] + fl1_fx * pc_zzzz[j] * pb_z[j] + 1.5 * fl1_fx * pa_zz[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_zz[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_yzz[j] * pc_yzzz[j] + 3.0 * pa_yz[j] * pc_zzzz[j] * pb_y[j] + 6.0 * pa_yz[j] * pc_yzzz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_zzzz[j] * pb_yz[j] + pa_y[j] * pc_yzzz[j] * pb_zz[j] + pc_yyzz[j] * pa_zzz[j] + 3.0 * pc_yzzz[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_yyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_yzzz[j] * pa_z[j] * pb_yz[j] + 3.0 * pc_yyzz[j] * pa_z[j] * pb_zz[j] + pc_yzzz[j] * pb_yzz[j]);

                t_yzzz_yzz[j] += fl_s_0_0_5 * (-3.75 * pc_yyz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 5.0 * pa_y[j] * pc_yzzz[j] * fl1_fx - 9.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_yzzz[j] * pb_y[j] * fl1_fx - 5.0 * pc_yyzzz[j] * fl1_fx - 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_zzzzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_zzzz[j] - fl1_fx * pc_zzzz[j] * pb_z[j] - 3.0 * pa_yz[j] * pc_yzzzz[j] - pa_y[j] * pc_zzzzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_yzzzz[j] * pb_z[j] - 3.0 * pc_yyzzz[j] * pa_zz[j] - 3.0 * pc_yzzzz[j] * pa_z[j] * pb_y[j] - 6.0 * pc_yyzzz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yzzzz[j] * pb_yz[j] - pc_yyzzz[j] * pb_zz[j]);

                t_yzzz_yzz[j] += fl_s_0_0_6 * (5.0 * pc_yyzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + pa_y[j] * pc_yzzzzz[j] + 3.0 * pc_yyzzzz[j] * pa_z[j] + pc_yzzzzz[j] * pb_y[j] + 2.0 * pc_yyzzzz[j] * pb_z[j]);

                t_yzzz_yzz[j] += -fl_s_0_0_7 * pc_yyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_139_140(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (139,140)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(34 * idx + 1);

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(34 * idx + 7);

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(34 * idx + 17);

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_yzzz = paDistances.data(34 * idx + 32);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yzzzzzz = pcDistances.data(119 * idx + 117);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzzz_zzz = primBuffer.data(150 * idx + 139);

            // Batch of Integrals (139,140)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_yzzz, pa_z, pa_zz, pa_zzz, pb_z, pb_zz, pb_zzz, pc_y, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_yzzzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, pc_zzzzz, pc_zzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_yzzz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzzz_zzz[j] = fl_s_0_0_0 * (1.875 * pa_y[j] * fl3_fx + 2.25 * pa_yzz[j] * fl2_fx + 6.75 * pa_yz[j] * fl2_fx * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_zz[j] + 1.5 * pa_yzzz[j] * pb_z[j] * fl1_fx + 4.5 * pa_yzz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_yz[j] * fl1_fx * pb_zzz[j] + pa_yzzz[j] * pb_zzz[j]);

                t_yzzz_zzz[j] += fl_s_0_0_1 * (-5.625 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 4.5 * pa_yzz[j] * fl2_fx - 11.25 * pa_yz[j] * pc_z[j] * fl2_fx - 13.5 * pa_yz[j] * fl2_fx * pb_z[j] - 11.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 2.25 * pc_y[j] * pa_zz[j] * fl2_fx - 6.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_zz[j] - 2.25 * pc_y[j] * fl2_fx * pb_zz[j] - 1.5 * pa_yzzz[j] * pb_z[j] * fl1_fx - 1.5 * pa_yzzz[j] * pc_z[j] * fl1_fx - 13.5 * pa_yzz[j] * pc_z[j] * pb_z[j] * fl1_fx - 4.5 * pa_yzz[j] * fl1_fx * pb_zz[j] - 13.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_y[j] * pa_zzz[j] * pb_z[j] * fl1_fx - 4.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_yz[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_yzzz[j] * pb_zz[j] * pc_z[j] - 3.0 * pa_yzz[j] * pc_z[j] * pb_zzz[j] - pc_y[j] * pa_zzz[j] * pb_zzz[j]);

                t_yzzz_zzz[j] += fl_s_0_0_2 * (5.625 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 2.25 * pa_yzz[j] * fl2_fx + 22.5 * pa_yz[j] * pc_z[j] * fl2_fx + 6.75 * pa_yz[j] * fl2_fx * pb_z[j] + 11.25 * pa_y[j] * pc_zz[j] * fl2_fx + 22.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] + 4.5 * pc_y[j] * pa_zz[j] * fl2_fx + 11.25 * pc_yz[j] * pa_z[j] * fl2_fx + 13.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] + 11.25 * pc_yz[j] * fl2_fx * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_zz[j] + 4.5 * pc_y[j] * fl2_fx * pb_zz[j] + 1.5 * pa_yzzz[j] * pc_z[j] * fl1_fx + 13.5 * pa_yzz[j] * pc_z[j] * pb_z[j] * fl1_fx + 9.0 * pa_yzz[j] * pc_zz[j] * fl1_fx + 27.0 * pa_yz[j] * pc_zz[j] * pb_z[j] * fl1_fx + 13.5 * pa_yz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 9.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_y[j] * pa_zzz[j] * pb_z[j] * fl1_fx + 1.5 * pc_yz[j] * pa_zzz[j] * fl1_fx + 13.5 * pc_yz[j] * pa_zz[j] * pb_z[j] * fl1_fx + 4.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_zz[j] + 13.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_y[j] * pa_z[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] + 3.0 * pa_yzzz[j] * pb_z[j] * pc_zz[j] + 9.0 * pa_yzz[j] * pc_zz[j] * pb_zz[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_zzz[j] + 3.0 * pc_yz[j] * pa_zzz[j] * pb_zz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_zzz[j]);

                t_yzzz_zzz[j] += fl_s_0_0_3 * (-1.875 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 11.25 * pa_yz[j] * pc_z[j] * fl2_fx - 22.5 * pa_y[j] * pc_zz[j] * fl2_fx - 11.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 2.25 * pc_y[j] * pa_zz[j] * fl2_fx - 22.5 * pc_yz[j] * pa_z[j] * fl2_fx - 6.75 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 11.25 * pc_yzz[j] * fl2_fx - 22.5 * pc_yz[j] * fl2_fx * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_zz[j] - 9.0 * pa_yzz[j] * pc_zz[j] * fl1_fx - 27.0 * pa_yz[j] * pc_zz[j] * pb_z[j] * fl1_fx - 15.0 * pa_yz[j] * pc_zzz[j] * fl1_fx - 15.0 * pa_y[j] * pc_zzz[j] * pb_z[j] * fl1_fx - 9.0 * pa_y[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yz[j] * pa_zzz[j] * fl1_fx - 13.5 * pc_yz[j] * pa_zz[j] * pb_z[j] * fl1_fx - 9.0 * pc_yzz[j] * pa_zz[j] * fl1_fx - 27.0 * pc_yzz[j] * pa_z[j] * pb_z[j] * fl1_fx - 13.5 * pc_yz[j] * pa_z[j] * fl1_fx * pb_zz[j] - 9.0 * pc_yzz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] - pa_yzzz[j] * pc_zzz[j] - 9.0 * pa_yzz[j] * pc_zzz[j] * pb_z[j] - 9.0 * pa_yz[j] * pc_zzz[j] * pb_zz[j] - pa_y[j] * pc_zzz[j] * pb_zzz[j] - 3.0 * pc_yzz[j] * pa_zzz[j] * pb_z[j] - 9.0 * pc_yzz[j] * pa_zz[j] * pb_zz[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_zzz[j]);

                t_yzzz_zzz[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 11.25 * pa_y[j] * pc_zz[j] * fl2_fx + 11.25 * pc_yz[j] * pa_z[j] * fl2_fx + 22.5 * pc_yzz[j] * fl2_fx + 11.25 * pc_yz[j] * fl2_fx * pb_z[j] + 15.0 * pa_yz[j] * pc_zzz[j] * fl1_fx + 15.0 * pa_y[j] * pc_zzz[j] * pb_z[j] * fl1_fx + 7.5 * pa_y[j] * pc_zzzz[j] * fl1_fx + 9.0 * pc_yzz[j] * pa_zz[j] * fl1_fx + 27.0 * pc_yzz[j] * pa_z[j] * pb_z[j] * fl1_fx + 15.0 * pc_yzzz[j] * pa_z[j] * fl1_fx + 15.0 * pc_yzzz[j] * pb_z[j] * fl1_fx + 9.0 * pc_yzz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_yzz[j] * pc_zzzz[j] + 9.0 * pa_yz[j] * pc_zzzz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_zzzz[j] * pb_zz[j] + pc_yzzz[j] * pa_zzz[j] + 9.0 * pc_yzzz[j] * pa_zz[j] * pb_z[j] + 9.0 * pc_yzzz[j] * pa_z[j] * pb_zz[j] + pc_yzzz[j] * pb_zzz[j]);

                t_yzzz_zzz[j] += fl_s_0_0_5 * (-11.25 * pc_yzz[j] * fl2_fx - 7.5 * pa_y[j] * pc_zzzz[j] * fl1_fx - 15.0 * pc_yzzz[j] * pa_z[j] * fl1_fx - 15.0 * pc_yzzz[j] * pb_z[j] * fl1_fx - 7.5 * pc_yzzzz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_zzzzz[j] - 3.0 * pa_y[j] * pc_zzzzz[j] * pb_z[j] - 3.0 * pc_yzzzz[j] * pa_zz[j] - 9.0 * pc_yzzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yzzzz[j] * pb_zz[j]);

                t_yzzz_zzz[j] += fl_s_0_0_6 * (7.5 * pc_yzzzz[j] * fl1_fx + pa_y[j] * pc_zzzzzz[j] + 3.0 * pc_yzzzzz[j] * pa_z[j] + 3.0 * pc_yzzzzz[j] * pb_z[j]);

                t_yzzz_zzz[j] += -fl_s_0_0_7 * pc_yzzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_140_141(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (140,141)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_xxx = primBuffer.data(150 * idx + 140);

            // Batch of Integrals (140,141)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_x, pb_xx, pb_xxx, pc_x, pc_xx, pc_xxx, \
                                     pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxxzzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, \
                                     pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_xxx: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_xxx[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_x[j] + 4.5 * pa_zz[j] * fl2_fx * pb_x[j] + 1.5 * pa_zzzz[j] * pb_x[j] * fl1_fx + 0.75 * fl2_fx * pb_xxx[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xxx[j] + pa_zzzz[j] * pb_xxx[j]);

                t_zzzz_xxx[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_x[j] - 1.125 * fl3_fx * pc_x[j] - 9.0 * pa_zz[j] * fl2_fx * pb_x[j] - 4.5 * pa_zz[j] * fl2_fx * pc_x[j] - 9.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 1.5 * pa_zzzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_zzzz[j] * pc_x[j] * fl1_fx - 6.0 * pa_zzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxx[j] - 9.0 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_x[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xxx[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_zzzz[j] * pb_xx[j] * pc_x[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_xxx[j]);

                t_zzzz_xxx[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_x[j] + 3.375 * fl3_fx * pb_x[j] + 9.0 * pa_zz[j] * fl2_fx * pc_x[j] + 4.5 * pa_zz[j] * fl2_fx * pb_x[j] + 18.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] + 9.0 * pa_z[j] * pc_xz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_x[j] + 1.5 * pa_zzzz[j] * pc_x[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_xz[j] * fl1_fx + 9.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 4.5 * fl2_fx * pb_xx[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxx[j] + 9.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 9.0 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 18.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxx[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_zzzz[j] * pb_x[j] * pc_xx[j] + 12.0 * pa_zzz[j] * pc_xz[j] * pb_xx[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xxx[j]);

                t_zzzz_xxx[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 4.5 * pa_zz[j] * fl2_fx * pc_x[j] - 18.0 * pa_z[j] * pc_xz[j] * fl2_fx - 9.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 9.0 * pc_zz[j] * fl2_fx * pb_x[j] - 4.5 * pc_xzz[j] * fl2_fx - 6.0 * pa_zzz[j] * pc_xz[j] * fl1_fx - 9.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 9.0 * pa_zz[j] * pc_xzz[j] * fl1_fx - 6.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 0.75 * fl2_fx * pc_xxx[j] - 4.5 * fl2_fx * pb_x[j] * pc_xx[j] - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xxx[j] - 9.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 18.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 18.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xzz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xxx[j] - pa_zzzz[j] * pc_xxx[j] - 12.0 * pa_zzz[j] * pc_xxz[j] * pb_x[j] - 18.0 * pa_zz[j] * pc_xzz[j] * pb_xx[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_xxx[j]);

                t_zzzz_xxx[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_x[j] + 9.0 * pa_z[j] * pc_xz[j] * fl2_fx + 9.0 * pc_xzz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_x[j] + 9.0 * pa_zz[j] * pc_xzz[j] * fl1_fx + 6.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 6.0 * pa_z[j] * pc_xzzz[j] * fl1_fx + 1.5 * pc_zzzz[j] * pb_x[j] * fl1_fx + 1.5 * fl2_fx * pc_xxx[j] + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xxx[j] + 6.0 * pa_z[j] * pc_xxxz[j] * fl1_fx + 18.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 9.0 * pc_xxzz[j] * fl1_fx * pb_x[j] + 9.0 * pc_xzz[j] * fl1_fx * pb_xx[j] + 4.0 * pa_zzz[j] * pc_xxxz[j] + 18.0 * pa_zz[j] * pc_xxzz[j] * pb_x[j] + 12.0 * pa_z[j] * pc_xzzz[j] * pb_xx[j] + pc_zzzz[j] * pb_xxx[j]);

                t_zzzz_xxx[j] += fl_s_0_0_5 * (-4.5 * pc_xzz[j] * fl2_fx - 6.0 * pa_z[j] * pc_xzzz[j] * fl1_fx - 1.5 * pc_zzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xzzzz[j] * fl1_fx - 0.75 * fl2_fx * pc_xxx[j] - 6.0 * pa_z[j] * pc_xxxz[j] * fl1_fx - 3.0 * pc_xxxzz[j] * fl1_fx - 9.0 * pc_xxzz[j] * fl1_fx * pb_x[j] - 6.0 * pa_zz[j] * pc_xxxzz[j] - 12.0 * pa_z[j] * pc_xxzzz[j] * pb_x[j] - 3.0 * pc_xzzzz[j] * pb_xx[j]);

                t_zzzz_xxx[j] += fl_s_0_0_6 * (1.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pc_xxxzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_xxxzzz[j] + 3.0 * pc_xxzzzz[j] * pb_x[j]);

                t_zzzz_xxx[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_141_142(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (141,142)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xy = pbDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_xxy = primBuffer.data(150 * idx + 141);

            // Batch of Integrals (141,142)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_x, pb_xx, pb_xxy, pb_xy, pb_y, pc_x, pc_xx, \
                                     pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, pc_xxz, pc_xxzz, pc_xxzzz, \
                                     pc_xxzzzz, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, \
                                     pc_xzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_xxy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_xxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 1.5 * pa_zz[j] * fl2_fx * pb_y[j] + 0.5 * pa_zzzz[j] * fl1_fx * pb_y[j] + 0.75 * fl2_fx * pb_xxy[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xxy[j] + pa_zzzz[j] * pb_xxy[j]);

                t_zzzz_xxy[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 1.5 * pa_zz[j] * fl2_fx * pc_y[j] - 3.0 * pa_zz[j] * fl2_fx * pb_y[j] - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 0.5 * pa_zzzz[j] * fl1_fx * pc_y[j] - 0.5 * pa_zzzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_zzz[j] * pc_z[j] * fl1_fx * pb_y[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxy[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 6.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_x[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xxy[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxy[j] - pa_zzzz[j] * pb_xx[j] * pc_y[j] - 2.0 * pa_zzzz[j] * pb_xy[j] * pc_x[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_xxy[j]);

                t_zzzz_xxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 3.0 * pa_zz[j] * fl2_fx * pc_y[j] + 1.5 * pa_zz[j] * fl2_fx * pb_y[j] + 3.0 * pa_z[j] * pc_yz[j] * fl2_fx + 6.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] + 1.5 * pc_zz[j] * fl2_fx * pb_y[j] + 0.5 * pa_zzzz[j] * fl1_fx * pc_y[j] + 2.0 * pa_zzz[j] * pc_yz[j] * fl1_fx + 2.0 * pa_zzz[j] * pc_z[j] * fl1_fx * pb_y[j] + 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_y[j] + 1.5 * fl2_fx * pb_x[j] * pc_xy[j] + 0.75 * fl2_fx * pc_xx[j] * pb_y[j] + 1.5 * fl2_fx * pb_xx[j] * pc_y[j] + 3.0 * fl2_fx * pb_xy[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxy[j] + 6.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xy[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_y[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 6.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 6.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 12.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_zzzz[j] * pb_x[j] * pc_xy[j] + pa_zzzz[j] * pc_xx[j] * pb_y[j] + 4.0 * pa_zzz[j] * pc_yz[j] * pb_xx[j] + 8.0 * pa_zzz[j] * pc_xz[j] * pb_xy[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xxy[j]);

                t_zzzz_xxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 1.5 * pa_zz[j] * fl2_fx * pc_y[j] - 6.0 * pa_z[j] * pc_yz[j] * fl2_fx - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 1.5 * pc_yzz[j] * fl2_fx - 3.0 * pc_zz[j] * fl2_fx * pb_y[j] - 2.0 * pa_zzz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_y[j] - 2.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_y[j] - 0.75 * fl2_fx * pc_xxy[j] - 3.0 * fl2_fx * pb_x[j] * pc_xy[j] - 1.5 * fl2_fx * pc_xx[j] * pb_y[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_x[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xxy[j] - 6.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xy[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 12.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 6.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 6.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 12.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xxy[j] - pa_zzzz[j] * pc_xxy[j] - 8.0 * pa_zzz[j] * pc_xyz[j] * pb_x[j] - 4.0 * pa_zzz[j] * pc_xxz[j] * pb_y[j] - 6.0 * pa_zz[j] * pc_yzz[j] * pb_xx[j] - 12.0 * pa_zz[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_xxy[j]);

                t_zzzz_xxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 3.0 * pa_z[j] * pc_yz[j] * fl2_fx + 3.0 * pc_yzz[j] * fl2_fx + 1.5 * pc_zz[j] * fl2_fx * pb_y[j] + 3.0 * pa_zz[j] * pc_yzz[j] * fl1_fx + 2.0 * pa_z[j] * pc_yzzz[j] * fl1_fx + 2.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_zzzz[j] * fl1_fx * pb_y[j] + 1.5 * fl2_fx * pc_xxy[j] + 1.5 * fl2_fx * pb_x[j] * pc_xy[j] + 0.75 * fl2_fx * pc_xx[j] * pb_y[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xxy[j] + 6.0 * pa_z[j] * pc_xxyz[j] * fl1_fx + 12.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 6.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xzz[j] * fl1_fx * pb_xy[j] + 4.0 * pa_zzz[j] * pc_xxyz[j] + 12.0 * pa_zz[j] * pc_xyzz[j] * pb_x[j] + 6.0 * pa_zz[j] * pc_xxzz[j] * pb_y[j] + 4.0 * pa_z[j] * pc_yzzz[j] * pb_xx[j] + 8.0 * pa_z[j] * pc_xzzz[j] * pb_xy[j] + pc_zzzz[j] * pb_xxy[j]);

                t_zzzz_xxy[j] += fl_s_0_0_5 * (-1.5 * pc_yzz[j] * fl2_fx - 2.0 * pa_z[j] * pc_yzzz[j] * fl1_fx - 0.5 * pc_yzzzz[j] * fl1_fx - 0.5 * pc_zzzz[j] * fl1_fx * pb_y[j] - 0.75 * fl2_fx * pc_xxy[j] - 6.0 * pa_z[j] * pc_xxyz[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 6.0 * pa_zz[j] * pc_xxyzz[j] - 8.0 * pa_z[j] * pc_xyzzz[j] * pb_x[j] - 4.0 * pa_z[j] * pc_xxzzz[j] * pb_y[j] - pc_yzzzz[j] * pb_xx[j] - 2.0 * pc_xzzzz[j] * pb_xy[j]);

                t_zzzz_xxy[j] += fl_s_0_0_6 * (0.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_xxyzzz[j] + 2.0 * pc_xyzzzz[j] * pb_x[j] + pc_xxzzzz[j] * pb_y[j]);

                t_zzzz_xxy[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_142_143(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (142,143)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(19 * idx + 3);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxz = pbDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxzzzzz = pcDistances.data(119 * idx + 103);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_xxz = primBuffer.data(150 * idx + 142);

            // Batch of Integrals (142,143)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_x, pb_xx, pb_xxz, pb_xz, pb_z, pc_x, pc_xx, \
                                     pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xxzzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, \
                                     pc_xzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_xxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_xxz[j] = fl_s_0_0_0 * (1.5 * pa_z[j] * fl3_fx + pa_zzz[j] * fl2_fx + 0.375 * fl3_fx * pb_z[j] + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 3.0 * pa_z[j] * fl2_fx * pb_xx[j] + 0.5 * pa_zzzz[j] * fl1_fx * pb_z[j] + 2.0 * pa_zzz[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pb_xxz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xxz[j] + pa_zzzz[j] * pb_xxz[j]);

                t_zzzz_xxz[j] += fl_s_0_0_1 * (-4.5 * pa_z[j] * fl3_fx - 1.875 * pc_z[j] * fl3_fx - 2.0 * pa_zzz[j] * fl2_fx - 4.5 * pa_zz[j] * pc_z[j] * fl2_fx - 1.125 * fl3_fx * pb_z[j] - 3.0 * pa_zz[j] * fl2_fx * pb_z[j] - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 6.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 6.0 * pa_z[j] * fl2_fx * pb_xx[j] - 3.75 * pc_z[j] * fl2_fx * pb_xx[j] - 0.5 * pa_zzzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_zzzz[j] * fl1_fx * pb_z[j] - 2.0 * pa_zzz[j] * pc_z[j] * fl1_fx * pb_z[j] - 4.0 * pa_zzz[j] * fl1_fx * pb_x[j] * pc_x[j] - 2.0 * pa_zzz[j] * fl1_fx * pb_xx[j] - 9.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_xx[j] - 1.5 * fl2_fx * pb_xz[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxz[j] - 6.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xxz[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxz[j] - pa_zzzz[j] * pb_xx[j] * pc_z[j] - 2.0 * pa_zzzz[j] * pb_xz[j] * pc_x[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_xxz[j]);

                t_zzzz_xxz[j] += fl_s_0_0_2 * (4.5 * pa_z[j] * fl3_fx + 5.625 * pc_z[j] * fl3_fx + pa_zzz[j] * fl2_fx + 9.0 * pa_zz[j] * pc_z[j] * fl2_fx + 6.0 * pa_z[j] * pc_zz[j] * fl2_fx + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 6.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] + 3.0 * pa_z[j] * fl2_fx * pc_xx[j] + 12.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] + 3.0 * pa_z[j] * fl2_fx * pb_xx[j] + 1.5 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_xz[j] * fl2_fx * pb_x[j] + 7.5 * pc_z[j] * fl2_fx * pb_xx[j] + 0.5 * pa_zzzz[j] * fl1_fx * pc_z[j] + 2.0 * pa_zzz[j] * pc_zz[j] * fl1_fx + 2.0 * pa_zzz[j] * pc_z[j] * fl1_fx * pb_z[j] + 2.0 * pa_zzz[j] * fl1_fx * pc_xx[j] + 4.0 * pa_zzz[j] * fl1_fx * pb_x[j] * pc_x[j] + 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 18.0 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_x[j] + 9.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_xx[j] + 12.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pc_xx[j] * pb_z[j] + 3.0 * fl2_fx * pb_xz[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxz[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 6.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 12.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_zzzz[j] * pb_x[j] * pc_xz[j] + pa_zzzz[j] * pc_xx[j] * pb_z[j] + 4.0 * pa_zzz[j] * pc_zz[j] * pb_xx[j] + 8.0 * pa_zzz[j] * pc_xz[j] * pb_xz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xxz[j]);

                t_zzzz_xxz[j] += fl_s_0_0_3 * (-1.5 * pa_z[j] * fl3_fx - 5.625 * pc_z[j] * fl3_fx - 4.5 * pa_zz[j] * pc_z[j] * fl2_fx - 12.0 * pa_z[j] * pc_zz[j] * fl2_fx - 2.5 * pc_zzz[j] * fl2_fx - 0.375 * fl3_fx * pb_z[j] - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 6.0 * pa_z[j] * fl2_fx * pc_xx[j] - 6.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 3.0 * pc_zz[j] * fl2_fx * pb_z[j] - 3.75 * pc_xxz[j] * fl2_fx - 15.0 * pc_xz[j] * fl2_fx * pb_x[j] - 3.75 * pc_z[j] * fl2_fx * pb_xx[j] - 2.0 * pa_zzz[j] * pc_zz[j] * fl1_fx - 2.0 * pa_zzz[j] * fl1_fx * pc_xx[j] - 3.0 * pa_zz[j] * pc_zzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 9.0 * pa_zz[j] * pc_xxz[j] * fl1_fx - 18.0 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_x[j] - 2.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 24.0 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 12.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_xx[j] - 5.0 * pc_zzz[j] * fl1_fx * pb_xx[j] - 1.5 * fl2_fx * pc_xx[j] * pb_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_x[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 6.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 12.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xzz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xxz[j] - pa_zzzz[j] * pc_xxz[j] - 8.0 * pa_zzz[j] * pc_xzz[j] * pb_x[j] - 4.0 * pa_zzz[j] * pc_xxz[j] * pb_z[j] - 6.0 * pa_zz[j] * pc_zzz[j] * pb_xx[j] - 12.0 * pa_zz[j] * pc_xzz[j] * pb_xz[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_xxz[j]);

                t_zzzz_xxz[j] += fl_s_0_0_4 * (1.875 * pc_z[j] * fl3_fx + 6.0 * pa_z[j] * pc_zz[j] * fl2_fx + 5.0 * pc_zzz[j] * fl2_fx + 3.0 * pa_z[j] * fl2_fx * pc_xx[j] + 1.5 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_xxz[j] * fl2_fx + 7.5 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * pa_zz[j] * pc_zzz[j] * fl1_fx + 9.0 * pa_zz[j] * pc_xxz[j] * fl1_fx + 2.0 * pa_z[j] * pc_zzzz[j] * fl1_fx + 2.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 12.0 * pa_z[j] * pc_xxzz[j] * fl1_fx + 24.0 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 0.5 * pc_zzzz[j] * fl1_fx * pb_z[j] + 10.0 * pc_xzzz[j] * fl1_fx * pb_x[j] + 5.0 * pc_zzz[j] * fl1_fx * pb_xx[j] + 0.75 * fl2_fx * pc_xx[j] * pb_z[j] + 6.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xzz[j] * fl1_fx * pb_xz[j] + 4.0 * pa_zzz[j] * pc_xxzz[j] + 12.0 * pa_zz[j] * pc_xzzz[j] * pb_x[j] + 6.0 * pa_zz[j] * pc_xxzz[j] * pb_z[j] + 4.0 * pa_z[j] * pc_zzzz[j] * pb_xx[j] + 8.0 * pa_z[j] * pc_xzzz[j] * pb_xz[j] + pc_zzzz[j] * pb_xxz[j]);

                t_zzzz_xxz[j] += fl_s_0_0_5 * (-2.5 * pc_zzz[j] * fl2_fx - 3.75 * pc_xxz[j] * fl2_fx - 2.0 * pa_z[j] * pc_zzzz[j] * fl1_fx - 12.0 * pa_z[j] * pc_xxzz[j] * fl1_fx - 0.5 * pc_zzzzz[j] * fl1_fx - 0.5 * pc_zzzz[j] * fl1_fx * pb_z[j] - 5.0 * pc_xxzzz[j] * fl1_fx - 10.0 * pc_xzzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_zz[j] * pc_xxzzz[j] - 8.0 * pa_z[j] * pc_xzzzz[j] * pb_x[j] - 4.0 * pa_z[j] * pc_xxzzz[j] * pb_z[j] - pc_zzzzz[j] * pb_xx[j] - 2.0 * pc_xzzzz[j] * pb_xz[j]);

                t_zzzz_xxz[j] += fl_s_0_0_6 * (0.5 * pc_zzzzz[j] * fl1_fx + 5.0 * pc_xxzzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_xxzzzz[j] + 2.0 * pc_xzzzzz[j] * pb_x[j] + pc_xxzzzz[j] * pb_z[j]);

                t_zzzz_xxz[j] += -fl_s_0_0_7 * pc_xxzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_143_144(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (143,144)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_xyy = primBuffer.data(150 * idx + 143);

            // Batch of Integrals (143,144)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_x, pb_xy, pb_xyy, pb_y, pb_yy, pc_x, pc_xy, \
                                     pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, pc_xyz, pc_xyzz, pc_xyzzz, \
                                     pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_xyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_xyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 1.5 * pa_zz[j] * fl2_fx * pb_x[j] + 0.5 * pa_zzzz[j] * pb_x[j] * fl1_fx + 0.75 * fl2_fx * pb_xyy[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xyy[j] + pa_zzzz[j] * pb_xyy[j]);

                t_zzzz_xyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 3.0 * pa_zz[j] * fl2_fx * pb_x[j] - 1.5 * pa_zz[j] * fl2_fx * pc_x[j] - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 0.5 * pa_zzzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_zzzz[j] * pc_x[j] * fl1_fx - 2.0 * pa_zzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 1.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 1.5 * fl2_fx * pb_xyy[j] - 6.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xyy[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_zzzz[j] * pb_xy[j] * pc_y[j] - pa_zzzz[j] * pc_x[j] * pb_yy[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_xyy[j]);

                t_zzzz_xyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 3.0 * pa_zz[j] * fl2_fx * pc_x[j] + 1.5 * pa_zz[j] * fl2_fx * pb_x[j] + 6.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] + 3.0 * pa_z[j] * pc_xz[j] * fl2_fx + 1.5 * pc_zz[j] * fl2_fx * pb_x[j] + 0.5 * pa_zzzz[j] * pc_x[j] * fl1_fx + 2.0 * pa_zzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 2.0 * pa_zzz[j] * pc_xz[j] * fl1_fx + 3.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 0.75 * fl2_fx * pb_x[j] * pc_yy[j] + 1.5 * fl2_fx * pc_xy[j] * pb_y[j] + 3.0 * fl2_fx * pb_xy[j] * pc_y[j] + 1.5 * fl2_fx * pc_x[j] * pb_yy[j] + 0.75 * fl2_fx * pb_xyy[j] + 3.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 6.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_y[j] + 6.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_y[j] + 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 12.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 6.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xyy[j] + pa_zzzz[j] * pb_x[j] * pc_yy[j] + 2.0 * pa_zzzz[j] * pc_xy[j] * pb_y[j] + 8.0 * pa_zzz[j] * pc_yz[j] * pb_xy[j] + 4.0 * pa_zzz[j] * pc_xz[j] * pb_yy[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xyy[j]);

                t_zzzz_xyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 1.5 * pa_zz[j] * fl2_fx * pc_x[j] - 6.0 * pa_z[j] * pc_xz[j] * fl2_fx - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 3.0 * pc_zz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xzz[j] * fl2_fx - 2.0 * pa_zzz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 3.0 * pa_zz[j] * pc_xzz[j] * fl1_fx - 2.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 0.75 * fl2_fx * pc_xyy[j] - 1.5 * fl2_fx * pb_x[j] * pc_yy[j] - 3.0 * fl2_fx * pc_xy[j] * pb_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xyy[j] - 3.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 6.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_y[j] - 6.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 12.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 12.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 6.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 6.0 * pc_yzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xyy[j] - pa_zzzz[j] * pc_xyy[j] - 4.0 * pa_zzz[j] * pc_yyz[j] * pb_x[j] - 8.0 * pa_zzz[j] * pc_xyz[j] * pb_y[j] - 12.0 * pa_zz[j] * pc_yzz[j] * pb_xy[j] - 6.0 * pa_zz[j] * pc_xzz[j] * pb_yy[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_xyy[j]);

                t_zzzz_xyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 3.0 * pa_z[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xzz[j] * fl2_fx + 1.5 * pc_zz[j] * fl2_fx * pb_x[j] + 3.0 * pa_zz[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 2.0 * pa_z[j] * pc_xzzz[j] * fl1_fx + 0.5 * pc_zzzz[j] * pb_x[j] * fl1_fx + 1.5 * fl2_fx * pc_xyy[j] + 0.75 * fl2_fx * pb_x[j] * pc_yy[j] + 1.5 * fl2_fx * pc_xy[j] * pb_y[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xyy[j] + 6.0 * pa_z[j] * pc_xyyz[j] * fl1_fx + 6.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 12.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_yzz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_yy[j] + 4.0 * pa_zzz[j] * pc_xyyz[j] + 6.0 * pa_zz[j] * pc_yyzz[j] * pb_x[j] + 12.0 * pa_zz[j] * pc_xyzz[j] * pb_y[j] + 8.0 * pa_z[j] * pc_yzzz[j] * pb_xy[j] + 4.0 * pa_z[j] * pc_xzzz[j] * pb_yy[j] + pc_zzzz[j] * pb_xyy[j]);

                t_zzzz_xyy[j] += fl_s_0_0_5 * (-1.5 * pc_xzz[j] * fl2_fx - 2.0 * pa_z[j] * pc_xzzz[j] * fl1_fx - 0.5 * pc_zzzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xzzzz[j] * fl1_fx - 0.75 * fl2_fx * pc_xyy[j] - 6.0 * pa_z[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] - 6.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 6.0 * pa_zz[j] * pc_xyyzz[j] - 4.0 * pa_z[j] * pc_yyzzz[j] * pb_x[j] - 8.0 * pa_z[j] * pc_xyzzz[j] * pb_y[j] - 2.0 * pc_yzzzz[j] * pb_xy[j] - pc_xzzzz[j] * pb_yy[j]);

                t_zzzz_xyy[j] += fl_s_0_0_6 * (0.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_xyyzzz[j] + pc_yyzzzz[j] * pb_x[j] + 2.0 * pc_xyzzzz[j] * pb_y[j]);

                t_zzzz_xyy[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_144_145(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (144,145)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(19 * idx + 4);

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyz = pbDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_xyz = primBuffer.data(150 * idx + 144);

            // Batch of Integrals (144,145)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_x, pb_xy, pb_xyz, pb_xz, pb_y, pb_yz, pb_z, \
                                     pc_x, pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_y, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_xyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                t_zzzz_xyz[j] = fl_s_0_0_0 * (3.0 * pa_z[j] * fl2_fx * pb_xy[j] + 2.0 * pa_zzz[j] * fl1_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xyz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xyz[j] + pa_zzzz[j] * pb_xyz[j]);

                t_zzzz_xyz[j] += fl_s_0_0_1 * (-3.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 3.0 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 6.0 * pa_z[j] * fl2_fx * pb_xy[j] - 3.75 * pc_z[j] * fl2_fx * pb_xy[j] - 2.0 * pa_zzz[j] * fl1_fx * pb_x[j] * pc_y[j] - 2.0 * pa_zzz[j] * fl1_fx * pc_x[j] * pb_y[j] - 2.0 * pa_zzz[j] * fl1_fx * pb_xy[j] - 9.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_xy[j] - 0.75 * fl2_fx * pb_xz[j] * pc_y[j] - 0.75 * fl2_fx * pc_x[j] * pb_yz[j] - 1.5 * fl2_fx * pb_xyz[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xyz[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyz[j] - pa_zzzz[j] * pb_xy[j] * pc_z[j] - pa_zzzz[j] * pb_xz[j] * pc_y[j] - pa_zzzz[j] * pc_x[j] * pb_yz[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_xyz[j]);

                t_zzzz_xyz[j] += fl_s_0_0_2 * (3.0 * pa_z[j] * fl2_fx * pc_xy[j] + 6.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] + 6.0 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] + 3.0 * pa_z[j] * fl2_fx * pb_xy[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 7.5 * pc_z[j] * fl2_fx * pb_xy[j] + 2.0 * pa_zzz[j] * fl1_fx * pc_xy[j] + 2.0 * pa_zzz[j] * fl1_fx * pb_x[j] * pc_y[j] + 2.0 * pa_zzz[j] * fl1_fx * pc_x[j] * pb_y[j] + 9.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_x[j] + 9.0 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 9.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_xy[j] + 12.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_xy[j] + 0.75 * fl2_fx * pc_xy[j] * pb_z[j] + 1.5 * fl2_fx * pb_xz[j] * pc_y[j] + 1.5 * fl2_fx * pc_x[j] * pb_yz[j] + 0.75 * fl2_fx * pb_xyz[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_z[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 6.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 6.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xyz[j] + pa_zzzz[j] * pb_x[j] * pc_yz[j] + pa_zzzz[j] * pc_xz[j] * pb_y[j] + pa_zzzz[j] * pc_xy[j] * pb_z[j] + 4.0 * pa_zzz[j] * pc_zz[j] * pb_xy[j] + 4.0 * pa_zzz[j] * pc_yz[j] * pb_xz[j] + 4.0 * pa_zzz[j] * pc_xz[j] * pb_yz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xyz[j]);

                t_zzzz_xyz[j] += fl_s_0_0_3 * (-6.0 * pa_z[j] * fl2_fx * pc_xy[j] - 3.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 3.0 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 3.75 * pc_z[j] * fl2_fx * pb_xy[j] - 2.0 * pa_zzz[j] * fl1_fx * pc_xy[j] - 9.0 * pa_zz[j] * pc_xyz[j] * fl1_fx - 9.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_x[j] - 9.0 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 12.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 12.0 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 12.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_xy[j] - 5.0 * pc_zzz[j] * fl1_fx * pb_xy[j] - 1.5 * fl2_fx * pc_xy[j] * pb_z[j] - 0.75 * fl2_fx * pb_xz[j] * pc_y[j] - 0.75 * fl2_fx * pc_x[j] * pb_yz[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_z[j] - 6.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 6.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xyz[j] - pa_zzzz[j] * pc_xyz[j] - 4.0 * pa_zzz[j] * pc_yzz[j] * pb_x[j] - 4.0 * pa_zzz[j] * pc_xzz[j] * pb_y[j] - 4.0 * pa_zzz[j] * pc_xyz[j] * pb_z[j] - 6.0 * pa_zz[j] * pc_zzz[j] * pb_xy[j] - 6.0 * pa_zz[j] * pc_yzz[j] * pb_xz[j] - 6.0 * pa_zz[j] * pc_xzz[j] * pb_yz[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_xyz[j]);

                t_zzzz_xyz[j] += fl_s_0_0_4 * (3.0 * pa_z[j] * fl2_fx * pc_xy[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 9.0 * pa_zz[j] * pc_xyz[j] * fl1_fx + 12.0 * pa_z[j] * pc_xyzz[j] * fl1_fx + 12.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 12.0 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 5.0 * pc_yzzz[j] * fl1_fx * pb_x[j] + 5.0 * pc_xzzz[j] * fl1_fx * pb_y[j] + 5.0 * pc_zzz[j] * fl1_fx * pb_xy[j] + 0.75 * fl2_fx * pc_xy[j] * pb_z[j] + 6.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_yz[j] + 4.0 * pa_zzz[j] * pc_xyzz[j] + 6.0 * pa_zz[j] * pc_yzzz[j] * pb_x[j] + 6.0 * pa_zz[j] * pc_xzzz[j] * pb_y[j] + 6.0 * pa_zz[j] * pc_xyzz[j] * pb_z[j] + 4.0 * pa_z[j] * pc_zzzz[j] * pb_xy[j] + 4.0 * pa_z[j] * pc_yzzz[j] * pb_xz[j] + 4.0 * pa_z[j] * pc_xzzz[j] * pb_yz[j] + pc_zzzz[j] * pb_xyz[j]);

                t_zzzz_xyz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 12.0 * pa_z[j] * pc_xyzz[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - 5.0 * pc_yzzz[j] * fl1_fx * pb_x[j] - 5.0 * pc_xzzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_zz[j] * pc_xyzzz[j] - 4.0 * pa_z[j] * pc_yzzzz[j] * pb_x[j] - 4.0 * pa_z[j] * pc_xzzzz[j] * pb_y[j] - 4.0 * pa_z[j] * pc_xyzzz[j] * pb_z[j] - pc_zzzzz[j] * pb_xy[j] - pc_yzzzz[j] * pb_xz[j] - pc_xzzzz[j] * pb_yz[j]);

                t_zzzz_xyz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_xyzzzz[j] + pc_yzzzzz[j] * pb_x[j] + pc_xzzzzz[j] * pb_y[j] + pc_xyzzzz[j] * pb_z[j]);

                t_zzzz_xyz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_145_146(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (145,146)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(19 * idx);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(19 * idx + 5);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xzzzzzz = pcDistances.data(119 * idx + 110);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_xzz = primBuffer.data(150 * idx + 145);

            // Batch of Integrals (145,146)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_x, pb_xz, pb_xzz, pb_z, pb_zz, pc_x, pc_xz, \
                                     pc_xzz, pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_xzzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, \
                                     pc_zzzzz, pc_zzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_zzzz_xzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_xzz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_x[j] + 4.5 * pa_zz[j] * fl2_fx * pb_x[j] + 6.0 * pa_z[j] * fl2_fx * pb_xz[j] + 0.5 * pa_zzzz[j] * pb_x[j] * fl1_fx + 4.0 * pa_zzz[j] * fl1_fx * pb_xz[j] + 0.75 * fl2_fx * pb_xzz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xzz[j] + pa_zzzz[j] * pb_xzz[j]);

                t_zzzz_xzz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_x[j] - 5.625 * fl3_fx * pb_x[j] - 4.5 * pa_zz[j] * fl2_fx * pc_x[j] - 9.0 * pa_zz[j] * fl2_fx * pb_x[j] - 15.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 6.0 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 12.0 * pa_z[j] * fl2_fx * pb_xz[j] - 7.5 * pc_z[j] * fl2_fx * pb_xz[j] - 0.5 * pa_zzzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_zzzz[j] * pc_x[j] * fl1_fx - 6.0 * pa_zzz[j] * pc_z[j] * pb_x[j] * fl1_fx - 4.0 * pa_zzz[j] * fl1_fx * pc_x[j] * pb_z[j] - 4.0 * pa_zzz[j] * fl1_fx * pb_xz[j] - 18.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_xz[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 1.5 * fl2_fx * pb_xzz[j] - 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xzz[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_zzzz[j] * pb_xz[j] * pc_z[j] - pa_zzzz[j] * pc_x[j] * pb_zz[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_xzz[j]);

                t_zzzz_xzz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_x[j] + 5.625 * fl3_fx * pb_x[j] + 9.0 * pa_zz[j] * fl2_fx * pc_x[j] + 4.5 * pa_zz[j] * fl2_fx * pb_x[j] + 15.0 * pa_z[j] * pc_xz[j] * fl2_fx + 30.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] + 11.25 * pc_zz[j] * fl2_fx * pb_x[j] + 12.0 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] + 6.0 * pa_z[j] * fl2_fx * pb_xz[j] + 7.5 * pc_xz[j] * fl2_fx * pb_z[j] + 15.0 * pc_z[j] * fl2_fx * pb_xz[j] + 0.5 * pa_zzzz[j] * pc_x[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_z[j] * pb_x[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_xz[j] * fl1_fx + 4.0 * pa_zzz[j] * fl1_fx * pc_x[j] * pb_z[j] + 18.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 18.0 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 18.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_xz[j] + 24.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_xz[j] + 1.5 * fl2_fx * pc_x[j] * pb_zz[j] + 0.75 * fl2_fx * pb_xzz[j] + 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 6.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xzz[j] + pa_zzzz[j] * pb_x[j] * pc_zz[j] + 2.0 * pa_zzzz[j] * pc_xz[j] * pb_z[j] + 8.0 * pa_zzz[j] * pc_zz[j] * pb_xz[j] + 4.0 * pa_zzz[j] * pc_xz[j] * pb_zz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xzz[j]);

                t_zzzz_xzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_x[j] - 1.875 * fl3_fx * pb_x[j] - 4.5 * pa_zz[j] * fl2_fx * pc_x[j] - 30.0 * pa_z[j] * pc_xz[j] * fl2_fx - 15.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 11.25 * pc_xzz[j] * fl2_fx - 22.5 * pc_zz[j] * fl2_fx * pb_x[j] - 6.0 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 15.0 * pc_xz[j] * fl2_fx * pb_z[j] - 7.5 * pc_z[j] * fl2_fx * pb_xz[j] - 6.0 * pa_zzz[j] * pc_xz[j] * fl1_fx - 18.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 18.0 * pa_zz[j] * pc_xzz[j] * fl1_fx - 18.0 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 20.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 24.0 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 24.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_xz[j] - 10.0 * pc_zzz[j] * fl1_fx * pb_xz[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 6.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xzz[j] - pa_zzzz[j] * pc_xzz[j] - 4.0 * pa_zzz[j] * pc_zzz[j] * pb_x[j] - 8.0 * pa_zzz[j] * pc_xzz[j] * pb_z[j] - 12.0 * pa_zz[j] * pc_zzz[j] * pb_xz[j] - 6.0 * pa_zz[j] * pc_xzz[j] * pb_zz[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_xzz[j]);

                t_zzzz_xzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_x[j] + 15.0 * pa_z[j] * pc_xz[j] * fl2_fx + 22.5 * pc_xzz[j] * fl2_fx + 11.25 * pc_zz[j] * fl2_fx * pb_x[j] + 7.5 * pc_xz[j] * fl2_fx * pb_z[j] + 18.0 * pa_zz[j] * pc_xzz[j] * fl1_fx + 20.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 20.0 * pa_z[j] * pc_xzzz[j] * fl1_fx + 24.0 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 7.5 * pc_zzzz[j] * pb_x[j] * fl1_fx + 10.0 * pc_xzzz[j] * fl1_fx * pb_z[j] + 10.0 * pc_zzz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_zzz[j] * pc_xzzz[j] + 6.0 * pa_zz[j] * pc_zzzz[j] * pb_x[j] + 12.0 * pa_zz[j] * pc_xzzz[j] * pb_z[j] + 8.0 * pa_z[j] * pc_zzzz[j] * pb_xz[j] + 4.0 * pa_z[j] * pc_xzzz[j] * pb_zz[j] + pc_zzzz[j] * pb_xzz[j]);

                t_zzzz_xzz[j] += fl_s_0_0_5 * (-11.25 * pc_xzz[j] * fl2_fx - 20.0 * pa_z[j] * pc_xzzz[j] * fl1_fx - 7.5 * pc_zzzz[j] * pb_x[j] * fl1_fx - 7.5 * pc_xzzzz[j] * fl1_fx - 10.0 * pc_xzzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_zz[j] * pc_xzzzz[j] - 4.0 * pa_z[j] * pc_zzzzz[j] * pb_x[j] - 8.0 * pa_z[j] * pc_xzzzz[j] * pb_z[j] - 2.0 * pc_zzzzz[j] * pb_xz[j] - pc_xzzzz[j] * pb_zz[j]);

                t_zzzz_xzz[j] += fl_s_0_0_6 * (7.5 * pc_xzzzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_xzzzzz[j] + pc_zzzzzz[j] * pb_x[j] + 2.0 * pc_xzzzzz[j] * pb_z[j]);

                t_zzzz_xzz[j] += -fl_s_0_0_7 * pc_xzzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_146_147(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (146,147)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyy = pbDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_yyy = primBuffer.data(150 * idx + 146);

            // Batch of Integrals (146,147)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_y, pb_yy, pb_yyy, pc_y, pc_yy, pc_yyy, \
                                     pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyyzzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_yyy: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_yyy[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_y[j] + 4.5 * pa_zz[j] * fl2_fx * pb_y[j] + 1.5 * pa_zzzz[j] * pb_y[j] * fl1_fx + 0.75 * fl2_fx * pb_yyy[j] + 3.0 * pa_zz[j] * fl1_fx * pb_yyy[j] + pa_zzzz[j] * pb_yyy[j]);

                t_zzzz_yyy[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_y[j] - 1.125 * fl3_fx * pc_y[j] - 9.0 * pa_zz[j] * fl2_fx * pb_y[j] - 4.5 * pa_zz[j] * fl2_fx * pc_y[j] - 9.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 1.5 * pa_zzzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_zzzz[j] * pc_y[j] * fl1_fx - 6.0 * pa_zzz[j] * pc_z[j] * pb_y[j] * fl1_fx - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * fl2_fx * pb_yyy[j] - 9.0 * pa_zz[j] * fl1_fx * pb_yy[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pb_yyy[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_zzzz[j] * pb_yy[j] * pc_y[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_yyy[j]);

                t_zzzz_yyy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_y[j] + 3.375 * fl3_fx * pb_y[j] + 9.0 * pa_zz[j] * fl2_fx * pc_y[j] + 4.5 * pa_zz[j] * fl2_fx * pb_y[j] + 18.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] + 9.0 * pa_z[j] * pc_yz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_y[j] + 1.5 * pa_zzzz[j] * pc_y[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_z[j] * pb_y[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_yz[j] * fl1_fx + 9.0 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 4.5 * fl2_fx * pb_yy[j] * pc_y[j] + 0.75 * fl2_fx * pb_yyy[j] + 9.0 * pa_zz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 9.0 * pa_zz[j] * fl1_fx * pb_yy[j] * pc_y[j] + 18.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyy[j] + 3.0 * pc_zz[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_zzzz[j] * pb_y[j] * pc_yy[j] + 12.0 * pa_zzz[j] * pc_yz[j] * pb_yy[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_yyy[j]);

                t_zzzz_yyy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 4.5 * pa_zz[j] * fl2_fx * pc_y[j] - 18.0 * pa_z[j] * pc_yz[j] * fl2_fx - 9.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 9.0 * pc_zz[j] * fl2_fx * pb_y[j] - 4.5 * pc_yzz[j] * fl2_fx - 6.0 * pa_zzz[j] * pc_yz[j] * fl1_fx - 9.0 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 9.0 * pa_zz[j] * pc_yzz[j] * fl1_fx - 6.0 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 0.75 * fl2_fx * pc_yyy[j] - 4.5 * fl2_fx * pb_y[j] * pc_yy[j] - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pc_yyy[j] - 9.0 * pa_zz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 18.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 18.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 9.0 * pc_yzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_zz[j] * fl1_fx * pb_yyy[j] - pa_zzzz[j] * pc_yyy[j] - 12.0 * pa_zzz[j] * pc_yyz[j] * pb_y[j] - 18.0 * pa_zz[j] * pc_yzz[j] * pb_yy[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_yyy[j]);

                t_zzzz_yyy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 9.0 * pa_z[j] * pc_yz[j] * fl2_fx + 9.0 * pc_yzz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_y[j] + 9.0 * pa_zz[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 6.0 * pa_z[j] * pc_yzzz[j] * fl1_fx + 1.5 * pc_zzzz[j] * pb_y[j] * fl1_fx + 1.5 * fl2_fx * pc_yyy[j] + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 3.0 * pa_zz[j] * fl1_fx * pc_yyy[j] + 6.0 * pa_z[j] * pc_yyyz[j] * fl1_fx + 18.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 9.0 * pc_yyzz[j] * fl1_fx * pb_y[j] + 9.0 * pc_yzz[j] * fl1_fx * pb_yy[j] + 4.0 * pa_zzz[j] * pc_yyyz[j] + 18.0 * pa_zz[j] * pc_yyzz[j] * pb_y[j] + 12.0 * pa_z[j] * pc_yzzz[j] * pb_yy[j] + pc_zzzz[j] * pb_yyy[j]);

                t_zzzz_yyy[j] += fl_s_0_0_5 * (-4.5 * pc_yzz[j] * fl2_fx - 6.0 * pa_z[j] * pc_yzzz[j] * fl1_fx - 1.5 * pc_zzzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_yzzzz[j] * fl1_fx - 0.75 * fl2_fx * pc_yyy[j] - 6.0 * pa_z[j] * pc_yyyz[j] * fl1_fx - 3.0 * pc_yyyzz[j] * fl1_fx - 9.0 * pc_yyzz[j] * fl1_fx * pb_y[j] - 6.0 * pa_zz[j] * pc_yyyzz[j] - 12.0 * pa_z[j] * pc_yyzzz[j] * pb_y[j] - 3.0 * pc_yzzzz[j] * pb_yy[j]);

                t_zzzz_yyy[j] += fl_s_0_0_6 * (1.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pc_yyyzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_yyyzzz[j] + 3.0 * pc_yyzzzz[j] * pb_y[j]);

                t_zzzz_yyy[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_147_148(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (147,148)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(19 * idx + 6);

            auto pb_yz = pbDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyzzzzz = pcDistances.data(119 * idx + 116);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_yyz = primBuffer.data(150 * idx + 147);

            // Batch of Integrals (147,148)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_y, pb_yy, pb_yyz, pb_yz, pb_z, pc_y, pc_yy, \
                                     pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yyzzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, \
                                     pc_yzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_yyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_yyz[j] = fl_s_0_0_0 * (1.5 * pa_z[j] * fl3_fx + pa_zzz[j] * fl2_fx + 0.375 * fl3_fx * pb_z[j] + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 3.0 * pa_z[j] * fl2_fx * pb_yy[j] + 0.5 * pa_zzzz[j] * fl1_fx * pb_z[j] + 2.0 * pa_zzz[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pb_yyz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_yyz[j] + pa_zzzz[j] * pb_yyz[j]);

                t_zzzz_yyz[j] += fl_s_0_0_1 * (-4.5 * pa_z[j] * fl3_fx - 1.875 * pc_z[j] * fl3_fx - 2.0 * pa_zzz[j] * fl2_fx - 4.5 * pa_zz[j] * pc_z[j] * fl2_fx - 1.125 * fl3_fx * pb_z[j] - 3.0 * pa_zz[j] * fl2_fx * pb_z[j] - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 6.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 6.0 * pa_z[j] * fl2_fx * pb_yy[j] - 3.75 * pc_z[j] * fl2_fx * pb_yy[j] - 0.5 * pa_zzzz[j] * fl1_fx * pc_z[j] - 0.5 * pa_zzzz[j] * fl1_fx * pb_z[j] - 2.0 * pa_zzz[j] * pc_z[j] * fl1_fx * pb_z[j] - 4.0 * pa_zzz[j] * fl1_fx * pb_y[j] * pc_y[j] - 2.0 * pa_zzz[j] * fl1_fx * pb_yy[j] - 9.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yy[j] - 1.5 * fl2_fx * pb_yz[j] * pc_y[j] - 1.5 * fl2_fx * pb_yyz[j] - 6.0 * pa_zz[j] * fl1_fx * pb_yz[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pb_yyz[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyz[j] - pa_zzzz[j] * pb_yy[j] * pc_z[j] - 2.0 * pa_zzzz[j] * pb_yz[j] * pc_y[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_yyz[j]);

                t_zzzz_yyz[j] += fl_s_0_0_2 * (4.5 * pa_z[j] * fl3_fx + 5.625 * pc_z[j] * fl3_fx + pa_zzz[j] * fl2_fx + 9.0 * pa_zz[j] * pc_z[j] * fl2_fx + 6.0 * pa_z[j] * pc_zz[j] * fl2_fx + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 6.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] + 3.0 * pa_z[j] * fl2_fx * pc_yy[j] + 12.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] + 3.0 * pa_z[j] * fl2_fx * pb_yy[j] + 1.5 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_yz[j] * fl2_fx * pb_y[j] + 7.5 * pc_z[j] * fl2_fx * pb_yy[j] + 0.5 * pa_zzzz[j] * fl1_fx * pc_z[j] + 2.0 * pa_zzz[j] * pc_zz[j] * fl1_fx + 2.0 * pa_zzz[j] * pc_z[j] * fl1_fx * pb_z[j] + 2.0 * pa_zzz[j] * fl1_fx * pc_yy[j] + 4.0 * pa_zzz[j] * fl1_fx * pb_y[j] * pc_y[j] + 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 18.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 9.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yy[j] + 12.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 3.0 * fl2_fx * pb_yz[j] * pc_y[j] + 0.75 * fl2_fx * pb_yyz[j] + 3.0 * pa_zz[j] * fl1_fx * pc_yy[j] * pb_z[j] + 6.0 * pa_zz[j] * fl1_fx * pb_yz[j] * pc_y[j] + 12.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_zz[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_zzzz[j] * pb_y[j] * pc_yz[j] + pa_zzzz[j] * pc_yy[j] * pb_z[j] + 4.0 * pa_zzz[j] * pc_zz[j] * pb_yy[j] + 8.0 * pa_zzz[j] * pc_yz[j] * pb_yz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_yyz[j]);

                t_zzzz_yyz[j] += fl_s_0_0_3 * (-1.5 * pa_z[j] * fl3_fx - 5.625 * pc_z[j] * fl3_fx - 4.5 * pa_zz[j] * pc_z[j] * fl2_fx - 12.0 * pa_z[j] * pc_zz[j] * fl2_fx - 2.5 * pc_zzz[j] * fl2_fx - 0.375 * fl3_fx * pb_z[j] - 3.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 6.0 * pa_z[j] * fl2_fx * pc_yy[j] - 6.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 3.0 * pc_zz[j] * fl2_fx * pb_z[j] - 3.75 * pc_yyz[j] * fl2_fx - 15.0 * pc_yz[j] * fl2_fx * pb_y[j] - 3.75 * pc_z[j] * fl2_fx * pb_yy[j] - 2.0 * pa_zzz[j] * pc_zz[j] * fl1_fx - 2.0 * pa_zzz[j] * fl1_fx * pc_yy[j] - 3.0 * pa_zz[j] * pc_zzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 9.0 * pa_zz[j] * pc_yyz[j] * fl1_fx - 18.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 2.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 24.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 12.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yy[j] - 5.0 * pc_zzz[j] * fl1_fx * pb_yy[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 1.5 * fl2_fx * pb_yz[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pc_yy[j] * pb_z[j] - 6.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 12.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yzz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_zz[j] * fl1_fx * pb_yyz[j] - pa_zzzz[j] * pc_yyz[j] - 8.0 * pa_zzz[j] * pc_yzz[j] * pb_y[j] - 4.0 * pa_zzz[j] * pc_yyz[j] * pb_z[j] - 6.0 * pa_zz[j] * pc_zzz[j] * pb_yy[j] - 12.0 * pa_zz[j] * pc_yzz[j] * pb_yz[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_yyz[j]);

                t_zzzz_yyz[j] += fl_s_0_0_4 * (1.875 * pc_z[j] * fl3_fx + 6.0 * pa_z[j] * pc_zz[j] * fl2_fx + 5.0 * pc_zzz[j] * fl2_fx + 3.0 * pa_z[j] * fl2_fx * pc_yy[j] + 1.5 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_yyz[j] * fl2_fx + 7.5 * pc_yz[j] * fl2_fx * pb_y[j] + 3.0 * pa_zz[j] * pc_zzz[j] * fl1_fx + 9.0 * pa_zz[j] * pc_yyz[j] * fl1_fx + 2.0 * pa_z[j] * pc_zzzz[j] * fl1_fx + 2.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 12.0 * pa_z[j] * pc_yyzz[j] * fl1_fx + 24.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_zzzz[j] * fl1_fx * pb_z[j] + 10.0 * pc_yzzz[j] * fl1_fx * pb_y[j] + 5.0 * pc_zzz[j] * fl1_fx * pb_yy[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 6.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yzz[j] * fl1_fx * pb_yz[j] + 4.0 * pa_zzz[j] * pc_yyzz[j] + 12.0 * pa_zz[j] * pc_yzzz[j] * pb_y[j] + 6.0 * pa_zz[j] * pc_yyzz[j] * pb_z[j] + 4.0 * pa_z[j] * pc_zzzz[j] * pb_yy[j] + 8.0 * pa_z[j] * pc_yzzz[j] * pb_yz[j] + pc_zzzz[j] * pb_yyz[j]);

                t_zzzz_yyz[j] += fl_s_0_0_5 * (-2.5 * pc_zzz[j] * fl2_fx - 3.75 * pc_yyz[j] * fl2_fx - 2.0 * pa_z[j] * pc_zzzz[j] * fl1_fx - 12.0 * pa_z[j] * pc_yyzz[j] * fl1_fx - 0.5 * pc_zzzzz[j] * fl1_fx - 0.5 * pc_zzzz[j] * fl1_fx * pb_z[j] - 5.0 * pc_yyzzz[j] * fl1_fx - 10.0 * pc_yzzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_zz[j] * pc_yyzzz[j] - 8.0 * pa_z[j] * pc_yzzzz[j] * pb_y[j] - 4.0 * pa_z[j] * pc_yyzzz[j] * pb_z[j] - pc_zzzzz[j] * pb_yy[j] - 2.0 * pc_yzzzz[j] * pb_yz[j]);

                t_zzzz_yyz[j] += fl_s_0_0_6 * (0.5 * pc_zzzzz[j] * fl1_fx + 5.0 * pc_yyzzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_yyzzzz[j] + 2.0 * pc_yzzzzz[j] * pb_y[j] + pc_yyzzzz[j] * pb_z[j]);

                t_zzzz_yyz[j] += -fl_s_0_0_7 * pc_yyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_148_149(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (148,149)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(19 * idx + 1);

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yz = pbDistances.data(19 * idx + 7);

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yzz = pbDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yzzzzzz = pcDistances.data(119 * idx + 117);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_yzz = primBuffer.data(150 * idx + 148);

            // Batch of Integrals (148,149)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_y, pb_yz, pb_yzz, pb_z, pb_zz, pc_y, pc_yz, \
                                     pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_yzzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, \
                                     pc_zzzzz, pc_zzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_zzzz_yzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_yzz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_y[j] + 4.5 * pa_zz[j] * fl2_fx * pb_y[j] + 6.0 * pa_z[j] * fl2_fx * pb_yz[j] + 0.5 * pa_zzzz[j] * pb_y[j] * fl1_fx + 4.0 * pa_zzz[j] * fl1_fx * pb_yz[j] + 0.75 * fl2_fx * pb_yzz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_yzz[j] + pa_zzzz[j] * pb_yzz[j]);

                t_zzzz_yzz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_y[j] - 5.625 * fl3_fx * pb_y[j] - 4.5 * pa_zz[j] * fl2_fx * pc_y[j] - 9.0 * pa_zz[j] * fl2_fx * pb_y[j] - 15.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 6.0 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 12.0 * pa_z[j] * fl2_fx * pb_yz[j] - 7.5 * pc_z[j] * fl2_fx * pb_yz[j] - 0.5 * pa_zzzz[j] * pb_y[j] * fl1_fx - 0.5 * pa_zzzz[j] * pc_y[j] * fl1_fx - 6.0 * pa_zzz[j] * pc_z[j] * pb_y[j] * fl1_fx - 4.0 * pa_zzz[j] * fl1_fx * pc_y[j] * pb_z[j] - 4.0 * pa_zzz[j] * fl1_fx * pb_yz[j] - 18.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yz[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * fl2_fx * pb_yzz[j] - 3.0 * pa_zz[j] * fl1_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_zz[j] * fl1_fx * pb_yzz[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_zzzz[j] * pb_yz[j] * pc_z[j] - pa_zzzz[j] * pc_y[j] * pb_zz[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_yzz[j]);

                t_zzzz_yzz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_y[j] + 5.625 * fl3_fx * pb_y[j] + 9.0 * pa_zz[j] * fl2_fx * pc_y[j] + 4.5 * pa_zz[j] * fl2_fx * pb_y[j] + 15.0 * pa_z[j] * pc_yz[j] * fl2_fx + 30.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] + 11.25 * pc_zz[j] * fl2_fx * pb_y[j] + 12.0 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] + 6.0 * pa_z[j] * fl2_fx * pb_yz[j] + 7.5 * pc_yz[j] * fl2_fx * pb_z[j] + 15.0 * pc_z[j] * fl2_fx * pb_yz[j] + 0.5 * pa_zzzz[j] * pc_y[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_z[j] * pb_y[j] * fl1_fx + 6.0 * pa_zzz[j] * pc_yz[j] * fl1_fx + 4.0 * pa_zzz[j] * fl1_fx * pc_y[j] * pb_z[j] + 18.0 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 18.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 18.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yz[j] + 24.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yz[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pb_yzz[j] + 3.0 * pa_zz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 6.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yzz[j] + 3.0 * pc_zz[j] * fl1_fx * pb_yzz[j] + pa_zzzz[j] * pb_y[j] * pc_zz[j] + 2.0 * pa_zzzz[j] * pc_yz[j] * pb_z[j] + 8.0 * pa_zzz[j] * pc_zz[j] * pb_yz[j] + 4.0 * pa_zzz[j] * pc_yz[j] * pb_zz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_yzz[j]);

                t_zzzz_yzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 1.875 * fl3_fx * pb_y[j] - 4.5 * pa_zz[j] * fl2_fx * pc_y[j] - 30.0 * pa_z[j] * pc_yz[j] * fl2_fx - 15.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 11.25 * pc_yzz[j] * fl2_fx - 22.5 * pc_zz[j] * fl2_fx * pb_y[j] - 6.0 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 15.0 * pc_yz[j] * fl2_fx * pb_z[j] - 7.5 * pc_z[j] * fl2_fx * pb_yz[j] - 6.0 * pa_zzz[j] * pc_yz[j] * fl1_fx - 18.0 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 18.0 * pa_zz[j] * pc_yzz[j] * fl1_fx - 18.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 20.0 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 24.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 24.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yz[j] - 10.0 * pc_zzz[j] * fl1_fx * pb_yz[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 6.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_zz[j] * fl1_fx * pb_yzz[j] - pa_zzzz[j] * pc_yzz[j] - 4.0 * pa_zzz[j] * pc_zzz[j] * pb_y[j] - 8.0 * pa_zzz[j] * pc_yzz[j] * pb_z[j] - 12.0 * pa_zz[j] * pc_zzz[j] * pb_yz[j] - 6.0 * pa_zz[j] * pc_yzz[j] * pb_zz[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_yzz[j]);

                t_zzzz_yzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 15.0 * pa_z[j] * pc_yz[j] * fl2_fx + 22.5 * pc_yzz[j] * fl2_fx + 11.25 * pc_zz[j] * fl2_fx * pb_y[j] + 7.5 * pc_yz[j] * fl2_fx * pb_z[j] + 18.0 * pa_zz[j] * pc_yzz[j] * fl1_fx + 20.0 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 20.0 * pa_z[j] * pc_yzzz[j] * fl1_fx + 24.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 7.5 * pc_zzzz[j] * pb_y[j] * fl1_fx + 10.0 * pc_yzzz[j] * fl1_fx * pb_z[j] + 10.0 * pc_zzz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_zzz[j] * pc_yzzz[j] + 6.0 * pa_zz[j] * pc_zzzz[j] * pb_y[j] + 12.0 * pa_zz[j] * pc_yzzz[j] * pb_z[j] + 8.0 * pa_z[j] * pc_zzzz[j] * pb_yz[j] + 4.0 * pa_z[j] * pc_yzzz[j] * pb_zz[j] + pc_zzzz[j] * pb_yzz[j]);

                t_zzzz_yzz[j] += fl_s_0_0_5 * (-11.25 * pc_yzz[j] * fl2_fx - 20.0 * pa_z[j] * pc_yzzz[j] * fl1_fx - 7.5 * pc_zzzz[j] * pb_y[j] * fl1_fx - 7.5 * pc_yzzzz[j] * fl1_fx - 10.0 * pc_yzzz[j] * fl1_fx * pb_z[j] - 6.0 * pa_zz[j] * pc_yzzzz[j] - 4.0 * pa_z[j] * pc_zzzzz[j] * pb_y[j] - 8.0 * pa_z[j] * pc_yzzzz[j] * pb_z[j] - 2.0 * pc_zzzzz[j] * pb_yz[j] - pc_yzzzz[j] * pb_zz[j]);

                t_zzzz_yzz[j] += fl_s_0_0_6 * (7.5 * pc_yzzzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_yzzzzz[j] + pc_zzzzzz[j] * pb_y[j] + 2.0 * pc_yzzzzz[j] * pb_z[j]);

                t_zzzz_yzz[j] += -fl_s_0_0_7 * pc_yzzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForGF_149_150(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (149,150)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PA)

            auto pa_zzzz = paDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_z = pbDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_zz = pbDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_zzz = pbDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_zzzzzzz = pcDistances.data(119 * idx + 118);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzzz_zzz = primBuffer.data(150 * idx + 149);

            // Batch of Integrals (149,150)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pa_zzzz, pb_z, pb_zz, pb_zzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, pc_zzzzz, pc_zzzzzz, pc_zzzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzzz_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzzz_zzz[j] = fl_s_0_0_0 * (7.5 * pa_z[j] * fl3_fx + 5.625 * fl3_fx * pb_z[j] + 3.0 * pa_zzz[j] * fl2_fx + 13.5 * pa_zz[j] * fl2_fx * pb_z[j] + 9.0 * pa_z[j] * fl2_fx * pb_zz[j] + 1.5 * pa_zzzz[j] * pb_z[j] * fl1_fx + 6.0 * pa_zzz[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_zzz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_zzz[j] + pa_zzzz[j] * pb_zzz[j]);

                t_zzzz_zzz[j] += fl_s_0_0_1 * (-22.5 * pa_z[j] * fl3_fx - 13.125 * pc_z[j] * fl3_fx - 16.875 * fl3_fx * pb_z[j] - 6.0 * pa_zzz[j] * fl2_fx - 22.5 * pa_zz[j] * pc_z[j] * fl2_fx - 27.0 * pa_zz[j] * fl2_fx * pb_z[j] - 45.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 18.0 * pa_z[j] * fl2_fx * pb_zz[j] - 11.25 * pc_z[j] * fl2_fx * pb_zz[j] - 1.5 * pa_zzzz[j] * pb_z[j] * fl1_fx - 1.5 * pa_zzzz[j] * pc_z[j] * fl1_fx - 18.0 * pa_zzz[j] * pc_z[j] * pb_z[j] * fl1_fx - 6.0 * pa_zzz[j] * fl1_fx * pb_zz[j] - 27.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 1.5 * fl2_fx * pb_zzz[j] - 3.0 * pa_zz[j] * fl1_fx * pb_zzz[j] - 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_zzzz[j] * pb_zz[j] * pc_z[j] - 4.0 * pa_zzz[j] * pc_z[j] * pb_zzz[j]);

                t_zzzz_zzz[j] += fl_s_0_0_2 * (22.5 * pa_z[j] * fl3_fx + 39.375 * pc_z[j] * fl3_fx + 16.875 * fl3_fx * pb_z[j] + 3.0 * pa_zzz[j] * fl2_fx + 45.0 * pa_zz[j] * pc_z[j] * fl2_fx + 13.5 * pa_zz[j] * fl2_fx * pb_z[j] + 45.0 * pa_z[j] * pc_zz[j] * fl2_fx + 90.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] + 33.75 * pc_zz[j] * fl2_fx * pb_z[j] + 9.0 * pa_z[j] * fl2_fx * pb_zz[j] + 22.5 * pc_z[j] * fl2_fx * pb_zz[j] + 1.5 * pa_zzzz[j] * pc_z[j] * fl1_fx + 18.0 * pa_zzz[j] * pc_z[j] * pb_z[j] * fl1_fx + 12.0 * pa_zzz[j] * pc_zz[j] * fl1_fx + 54.0 * pa_zz[j] * pc_zz[j] * pb_z[j] * fl1_fx + 27.0 * pa_zz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 36.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 0.75 * fl2_fx * pb_zzz[j] + 6.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_zz[j] * fl1_fx * pb_zzz[j] + 3.0 * pa_zzzz[j] * pb_z[j] * pc_zz[j] + 12.0 * pa_zzz[j] * pc_zz[j] * pb_zz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_zzz[j]);

                t_zzzz_zzz[j] += fl_s_0_0_3 * (-7.5 * pa_z[j] * fl3_fx - 39.375 * pc_z[j] * fl3_fx - 5.625 * fl3_fx * pb_z[j] - 22.5 * pa_zz[j] * pc_z[j] * fl2_fx - 90.0 * pa_z[j] * pc_zz[j] * fl2_fx - 45.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 26.25 * pc_zzz[j] * fl2_fx - 67.5 * pc_zz[j] * fl2_fx * pb_z[j] - 11.25 * pc_z[j] * fl2_fx * pb_zz[j] - 12.0 * pa_zzz[j] * pc_zz[j] * fl1_fx - 54.0 * pa_zz[j] * pc_zz[j] * pb_z[j] * fl1_fx - 30.0 * pa_zz[j] * pc_zzz[j] * fl1_fx - 60.0 * pa_z[j] * pc_zzz[j] * pb_z[j] * fl1_fx - 36.0 * pa_z[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 15.0 * pc_zzz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_zz[j] * fl1_fx * pb_zzz[j] - pa_zzzz[j] * pc_zzz[j] - 12.0 * pa_zzz[j] * pc_zzz[j] * pb_z[j] - 18.0 * pa_zz[j] * pc_zzz[j] * pb_zz[j] - 4.0 * pa_z[j] * pc_zzz[j] * pb_zzz[j]);

                t_zzzz_zzz[j] += fl_s_0_0_4 * (13.125 * pc_z[j] * fl3_fx + 45.0 * pa_z[j] * pc_zz[j] * fl2_fx + 52.5 * pc_zzz[j] * fl2_fx + 33.75 * pc_zz[j] * fl2_fx * pb_z[j] + 30.0 * pa_zz[j] * pc_zzz[j] * fl1_fx + 60.0 * pa_z[j] * pc_zzz[j] * pb_z[j] * fl1_fx + 30.0 * pa_z[j] * pc_zzzz[j] * fl1_fx + 22.5 * pc_zzzz[j] * pb_z[j] * fl1_fx + 15.0 * pc_zzz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_zzz[j] * pc_zzzz[j] + 18.0 * pa_zz[j] * pc_zzzz[j] * pb_z[j] + 12.0 * pa_z[j] * pc_zzzz[j] * pb_zz[j] + pc_zzzz[j] * pb_zzz[j]);

                t_zzzz_zzz[j] += fl_s_0_0_5 * (-26.25 * pc_zzz[j] * fl2_fx - 30.0 * pa_z[j] * pc_zzzz[j] * fl1_fx - 22.5 * pc_zzzz[j] * pb_z[j] * fl1_fx - 10.5 * pc_zzzzz[j] * fl1_fx - 6.0 * pa_zz[j] * pc_zzzzz[j] - 12.0 * pa_z[j] * pc_zzzzz[j] * pb_z[j] - 3.0 * pc_zzzzz[j] * pb_zz[j]);

                t_zzzz_zzz[j] += fl_s_0_0_6 * (10.5 * pc_zzzzz[j] * fl1_fx + 4.0 * pa_z[j] * pc_zzzzzz[j] + 3.0 * pc_zzzzzz[j] * pb_z[j]);

                t_zzzz_zzz[j] += -fl_s_0_0_7 * pc_zzzzzzz[j];
            }

            idx++;
        }
    }


} // npotrecfunc namespace

