//
//                             VELOXCHEM
//      ---------------------------------------------------
//                     An Electronic Structure Code
//
//  Copyright Â© 2019 by VeloxChem developers. All rights reserved.
//  Contact: Zilvinas Rinkevicius (rinkevic@kth.se), KTH, Sweden.

#include "ElectricDipoleRecFunc.hpp"

#include "MathConst.hpp"
#include "GenFunc.hpp"

namespace ediprecfunc { // ediprecfunc namespace
    
    void
    compElectricDipoleForSS(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  abDistances,
                            const CMemBlock2D<double>&  pcDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // set up pointers to primitives data on bra side
        
        auto bnorm = braGtoBlock.getNormFactors();
        
        auto spos = braGtoBlock.getStartPositions();
        
        auto epos = braGtoBlock.getEndPositions();
        
        auto bdim = epos[iContrGto] - spos[iContrGto];
        
        // set up pointers to primitives data on ket side
        
        auto knorm = ketGtoBlock.getNormFactors();
        
        auto nprim = ketGtoBlock.getNumberOfPrimGtos();
        
        // set up pointers to R(AB) distances
        
        auto abx = abDistances.data(0);
        
        auto aby = abDistances.data(1);
        
        auto abz = abDistances.data(2);
        
        // fetch up pi values
        
        auto fpi = mathconst::getPiValue();
        
        // get position of integrals in primitves buffer
        
        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});
        
        auto doff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 0});
        
        // loop over contracted GTO on bra side
        
        int32_t idx = 0;
        
        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors
            
            auto fx = osFactors.data(2 * idx);
            
            auto fz = osFactors.data(2 * idx + 1);
            
            auto fb = bnorm[i];
            
            // set up pointers to ditances R(PC)
            
            auto pcx = pcDistances.data(3 * idx);
            
            auto pcy = pcDistances.data(3 * idx + 1);
            
            auto pcz = pcDistances.data(3 * idx + 2);
            
            // set up primitives buffer data
            
            auto fovl = primBuffer.data(soff + idx);
            
            auto fdipx = primBuffer.data(doff + idx);
            
            auto fdipy = primBuffer.data(doff + bdim + idx);
            
            auto fdipz = primBuffer.data(doff + 2 * bdim + idx);
            
            #pragma omp simd aligned(fovl, fx, fz, knorm, abx, aby,\
                                     abz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                fovl[j] = fb * knorm[j] * std::pow(fpi * fx[j], 1.5)
                
                        * std::exp(-fz[j] * (abx[j] * abx[j] + aby[j] * aby[j] +
                                     
                                             abz[j] * abz[j]));
                
                fdipx[j] = pcx[j] * fovl[j];
                
                fdipy[j] = pcy[j] * fovl[j];
                
                fdipz[j] = pcz[j] * fovl[j];
            }
            
            idx++;
        }
    }
    
    void
    compElectricDipoleForSP(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {0, 1, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PB)

            auto pbx = pbDistances.data(3 * idx);

            auto pby = pbDistances.data(3 * idx + 1);

            auto pbz = pbDistances.data(3 * idx + 2);

            // set up pointers to (S|M|P) integrals

            auto dx_0_x = primBuffer.data(doff + 3 * idx);

            auto dx_0_y = primBuffer.data(doff + 3 * idx + 1);

            auto dx_0_z = primBuffer.data(doff + 3 * idx + 2);

            auto dy_0_x = primBuffer.data(doff + 3 * bdim + 3 * idx);

            auto dy_0_y = primBuffer.data(doff + 3 * bdim + 3 * idx + 1);

            auto dy_0_z = primBuffer.data(doff + 3 * bdim + 3 * idx + 2);

            auto dz_0_x = primBuffer.data(doff + 6 * bdim + 3 * idx);

            auto dz_0_y = primBuffer.data(doff + 6 * bdim + 3 * idx + 1);

            auto dz_0_z = primBuffer.data(doff + 6 * bdim + 3 * idx + 2);

            // set up pointers to (S|M|S) integrals

            auto dx_0_0 = primBuffer.data(d1off + idx);

            auto dy_0_0 = primBuffer.data(d1off + bdim + idx);

            auto dz_0_0 = primBuffer.data(d1off + 2 * bdim + idx);

            // set up pointers to (S|S) integrals

            auto s_0_0 = primBuffer.data(soff + idx);

            #pragma omp simd aligned(pbx, pby, pbz, dx_0_x, dx_0_y, dx_0_z, dy_0_x,\
                                     dy_0_y, dy_0_z, dz_0_x, dz_0_y, dz_0_z, dx_0_0,\
                                     dy_0_0, dz_0_0, s_0_0: VLX_ALIGN)
             for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j] * s_0_0[j];

                // electric dipole integrals

                // leading x component

                double fr = pbx[j];

                dx_0_x[j] = fr * dx_0_0[j] + f2t;

                dy_0_x[j] = fr * dy_0_0[j];

                dz_0_x[j] = fr * dz_0_0[j];

                // leading y component

                fr = pby[j];

                dx_0_y[j] = fr * dx_0_0[j];

                dy_0_y[j] = fr * dy_0_0[j] + f2t;

                dz_0_y[j] = fr * dz_0_0[j];

                // leading z component

                fr = pbz[j];

                dx_0_z[j] = fr * dx_0_0[j];

                dy_0_z[j] = fr * dy_0_0[j];

                dz_0_z[j] = fr * dz_0_0[j] + f2t;
            }
            
            idx++; 
        }
    }
    
    void
    compElectricDipoleForPS(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {1, 0, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (P|M|S) integrals

            auto dx_x_0 = primBuffer.data(doff + 3 * idx);

            auto dx_y_0 = primBuffer.data(doff + 3 * idx + 1);

            auto dx_z_0 = primBuffer.data(doff + 3 * idx + 2);

            auto dy_x_0 = primBuffer.data(doff + 3 * bdim + 3 * idx);

            auto dy_y_0 = primBuffer.data(doff + 3 * bdim + 3 * idx + 1);

            auto dy_z_0 = primBuffer.data(doff + 3 * bdim + 3 * idx + 2);

            auto dz_x_0 = primBuffer.data(doff + 6 * bdim + 3 * idx);

            auto dz_y_0 = primBuffer.data(doff + 6 * bdim + 3 * idx + 1);

            auto dz_z_0 = primBuffer.data(doff + 6 * bdim + 3 * idx + 2);

            // set up pointers to (S|M|S) integrals

            auto dx_0_0 = primBuffer.data(d1off + idx);

            auto dy_0_0 = primBuffer.data(d1off + bdim + idx);

            auto dz_0_0 = primBuffer.data(d1off + 2 * bdim + idx);

            // set up pointers to (S|S) integrals

            auto s_0_0 = primBuffer.data(soff + idx);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_x_0, dx_y_0, dx_z_0,\
                                     dy_x_0, dy_y_0, dy_z_0, dz_x_0, dz_y_0, dz_z_0,\
                                     dx_0_0, dy_0_0, dz_0_0, s_0_0: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j] * s_0_0[j];

                // electric dipole integrals

                // leading x component

                double fr = pax[j];

                dx_x_0[j] = fr * dx_0_0[j] + f2t;

                dy_x_0[j] = fr * dy_0_0[j];

                dz_x_0[j] = fr * dz_0_0[j];

                // leading y component

                fr = pay[j];

                dx_y_0[j] = fr * dx_0_0[j];

                dy_y_0[j] = fr * dy_0_0[j] + f2t;

                dz_y_0[j] = fr * dz_0_0[j];

                // leading z component

                fr = paz[j];

                dx_z_0[j] = fr * dx_0_0[j];

                dy_z_0[j] = fr * dy_0_0[j];

                dz_z_0[j] = fr * dz_0_0[j] + f2t;
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForPP(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {1, 1, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});
        
        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);
            
            // set up pointers to distances R(PB)
            
            auto pbx = pbDistances.data(3 * idx);
            
            auto pby = pbDistances.data(3 * idx + 1);
            
            auto pbz = pbDistances.data(3 * idx + 2);

            // set up pointers to (P|M|P) integrals

            auto dx_x_x = primBuffer.data(doff + 9 * idx);

            auto dx_x_y = primBuffer.data(doff + 9 * idx + 1);

            auto dx_x_z = primBuffer.data(doff + 9 * idx + 2);

            auto dx_y_x = primBuffer.data(doff + 9 * idx + 3);

            auto dx_y_y = primBuffer.data(doff + 9 * idx + 4);

            auto dx_y_z = primBuffer.data(doff + 9 * idx + 5);

            auto dx_z_x = primBuffer.data(doff + 9 * idx + 6);

            auto dx_z_y = primBuffer.data(doff + 9 * idx + 7);

            auto dx_z_z = primBuffer.data(doff + 9 * idx + 8);

            auto dy_x_x = primBuffer.data(doff + 9 * bdim + 9 * idx);

            auto dy_x_y = primBuffer.data(doff + 9 * bdim + 9 * idx + 1);

            auto dy_x_z = primBuffer.data(doff + 9 * bdim + 9 * idx + 2);

            auto dy_y_x = primBuffer.data(doff + 9 * bdim + 9 * idx + 3);

            auto dy_y_y = primBuffer.data(doff + 9 * bdim + 9 * idx + 4);

            auto dy_y_z = primBuffer.data(doff + 9 * bdim + 9 * idx + 5);

            auto dy_z_x = primBuffer.data(doff + 9 * bdim + 9 * idx + 6);

            auto dy_z_y = primBuffer.data(doff + 9 * bdim + 9 * idx + 7);

            auto dy_z_z = primBuffer.data(doff + 9 * bdim + 9 * idx + 8);

            auto dz_x_x = primBuffer.data(doff + 18 * bdim + 9 * idx);

            auto dz_x_y = primBuffer.data(doff + 18 * bdim + 9 * idx + 1);

            auto dz_x_z = primBuffer.data(doff + 18 * bdim + 9 * idx + 2);

            auto dz_y_x = primBuffer.data(doff + 18 * bdim + 9 * idx + 3);

            auto dz_y_y = primBuffer.data(doff + 18 * bdim + 9 * idx + 4);

            auto dz_y_z = primBuffer.data(doff + 18 * bdim + 9 * idx + 5);

            auto dz_z_x = primBuffer.data(doff + 18 * bdim + 9 * idx + 6);

            auto dz_z_y = primBuffer.data(doff + 18 * bdim + 9 * idx + 7);

            auto dz_z_z = primBuffer.data(doff + 18 * bdim + 9 * idx + 8);

            // set up pointers to (S|M|P) integrals

            auto dx_0_x = primBuffer.data(d1off + 3 * idx);

            auto dx_0_y = primBuffer.data(d1off + 3 * idx + 1);

            auto dx_0_z = primBuffer.data(d1off + 3 * idx + 2);

            auto dy_0_x = primBuffer.data(d1off + 3 * bdim + 3 * idx);

            auto dy_0_y = primBuffer.data(d1off + 3 * bdim + 3 * idx + 1);

            auto dy_0_z = primBuffer.data(d1off + 3 * bdim + 3 * idx + 2);

            auto dz_0_x = primBuffer.data(d1off + 6 * bdim + 3 * idx);

            auto dz_0_y = primBuffer.data(d1off + 6 * bdim + 3 * idx + 1);

            auto dz_0_z = primBuffer.data(d1off + 6 * bdim + 3 * idx + 2);

            // set up pointers to (S|M|S) integrals

            auto dx_0_0 = primBuffer.data(dkoff + idx);

            auto dy_0_0 = primBuffer.data(dkoff + bdim + idx);

            auto dz_0_0 = primBuffer.data(dkoff + 2 * bdim + idx);

            // set up pointers to (S|P) integrals

            auto s_0_x = primBuffer.data(soff + 3 * idx);

            auto s_0_y = primBuffer.data(soff + 3 * idx + 1);

            auto s_0_z = primBuffer.data(soff + 3 * idx + 2);
            
            // set up pointers to (S|S) integrals
            
            auto s_0_0 = primBuffer.data(s1off + idx);

            #pragma omp simd aligned(fx, pax, pay, paz, pbx, pby, pbz,\
                                     dx_x_x, dx_x_y, dx_x_z,\
                                     dx_y_x, dx_y_y, dx_y_z, dx_z_x, dx_z_y, dx_z_z,\
                                     dy_x_x, dy_x_y, dy_x_z, dy_y_x, dy_y_y, dy_y_z,\
                                     dy_z_x, dy_z_y, dy_z_z, dz_x_x, dz_x_y, dz_x_z,\
                                     dz_y_x, dz_y_y, dz_y_z, dz_z_x, dz_z_y, dz_z_z,\
                                     dx_0_x, dx_0_y, dx_0_z, dy_0_x, dy_0_y, dy_0_z,\
                                     dz_0_x, dz_0_y, dz_0_z, dx_0_0, dy_0_0, dz_0_0,\
                                     s_0_0, s_0_x, s_0_y, s_0_z: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];
                
                // overlap integrals
                
                // leading x component
                
                s_0_x[j] = pbx[j] * s_0_0[j];
                
                // leading y component
                
                s_0_y[j] = pby[j] * s_0_0[j];
                
                // leading z component
                
                s_0_z[j] = pbz[j] * s_0_0[j];

                // electric dipole integrals

                // leading x component

                double fr = pax[j];

                dx_x_x[j] = fr * dx_0_x[j] + f2t * (dx_0_0[j] + s_0_x[j]);

                dy_x_x[j] = fr * dy_0_x[j] + f2t * dy_0_0[j];

                dz_x_x[j] = fr * dz_0_x[j] + f2t * dz_0_0[j];

                dx_x_y[j] = fr * dx_0_y[j] + f2t * s_0_y[j];

                dy_x_y[j] = fr * dy_0_y[j];

                dz_x_y[j] = fr * dz_0_y[j];

                dx_x_z[j] = fr * dx_0_z[j] + f2t * s_0_z[j];

                dy_x_z[j] = fr * dy_0_z[j];

                dz_x_z[j] = fr * dz_0_z[j];

                // leading y component

                fr = pay[j];

                dx_y_x[j] = fr * dx_0_x[j];

                dy_y_x[j] = fr * dy_0_x[j] + f2t * s_0_x[j];

                dz_y_x[j] = fr * dz_0_x[j];

                dx_y_y[j] = fr * dx_0_y[j] + f2t * dx_0_0[j];

                dy_y_y[j] = fr * dy_0_y[j] + f2t * (dy_0_0[j] + s_0_y[j]);

                dz_y_y[j] = fr * dz_0_y[j] + f2t * dz_0_0[j];

                dx_y_z[j] = fr * dx_0_z[j];

                dy_y_z[j] = fr * dy_0_z[j] + f2t * s_0_z[j];

                dz_y_z[j] = fr * dz_0_z[j];

                // leading z component

                fr = paz[j];

                dx_z_x[j] = fr * dx_0_x[j];

                dy_z_x[j] = fr * dy_0_x[j];

                dz_z_x[j] = fr * dz_0_x[j] + f2t * s_0_x[j];

                dx_z_y[j] = fr * dx_0_y[j];

                dy_z_y[j] = fr * dy_0_y[j];

                dz_z_y[j] = fr * dz_0_y[j] + f2t * s_0_y[j];

                dx_z_z[j] = fr * dx_0_z[j] + f2t * dx_0_0[j];

                dy_z_z[j] = fr * dy_0_z[j] + f2t * dy_0_0[j];

                dz_z_z[j] = fr * dz_0_z[j] + f2t * (dz_0_0[j] + s_0_z[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForSD(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern
        
        if (!genfunc::isInVector(recPattern, {0, 2, 0})) return;
        
        // set up pointers to primitives data on bra side
        
        auto spos = braGtoBlock.getStartPositions();
        
        auto epos = braGtoBlock.getEndPositions();
        
        auto bdim = epos[iContrGto] - spos[iContrGto];
        
        // set up pointers to primitives data on ket side
        
        auto nprim = ketGtoBlock.getNumberOfPrimGtos();
        
        // get position of integrals in primitves buffer
        
        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 0});
        
        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 0});
        
        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 0});
        
        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});
        
        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});
        
        // loop over contracted GTO on bra side
        
        int32_t idx = 0;
        
        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors
            
            auto fx = osFactors.data(2 * idx);
            
            // set up pointers to distances R(PB)
            
            auto pbx = pbDistances.data(3 * idx);
            
            auto pby = pbDistances.data(3 * idx + 1);
            
            auto pbz = pbDistances.data(3 * idx + 2);
            
            // set up pointers to (S|M|D) integrals
            
            auto dx_0_xx = primBuffer.data(doff + 6 * idx);
            
            auto dx_0_xy = primBuffer.data(doff + 6 * idx + 1);
            
            auto dx_0_xz = primBuffer.data(doff + 6 * idx + 2);
            
            auto dx_0_yy = primBuffer.data(doff + 6 * idx + 3);
            
            auto dx_0_yz = primBuffer.data(doff + 6 * idx + 4);
            
            auto dx_0_zz = primBuffer.data(doff + 6 * idx + 5);
            
            auto dy_0_xx = primBuffer.data(doff + 6 * bdim + 6 * idx);
            
            auto dy_0_xy = primBuffer.data(doff + 6 * bdim + 6 * idx + 1);
            
            auto dy_0_xz = primBuffer.data(doff + 6 * bdim + 6 * idx + 2);
            
            auto dy_0_yy = primBuffer.data(doff + 6 * bdim + 6 * idx + 3);
            
            auto dy_0_yz = primBuffer.data(doff + 6 * bdim + 6 * idx + 4);
            
            auto dy_0_zz = primBuffer.data(doff + 6 * bdim + 6 * idx + 5);
            
            auto dz_0_xx = primBuffer.data(doff + 12 * bdim + 6 * idx);
            
            auto dz_0_xy = primBuffer.data(doff + 12 * bdim + 6 * idx + 1);
            
            auto dz_0_xz = primBuffer.data(doff + 12 * bdim + 6 * idx + 2);
            
            auto dz_0_yy = primBuffer.data(doff + 12 * bdim + 6 * idx + 3);
            
            auto dz_0_yz = primBuffer.data(doff + 12 * bdim + 6 * idx + 4);
            
            auto dz_0_zz = primBuffer.data(doff + 12 * bdim + 6 * idx + 5);
            
            // set up pointers to (S|M|P) integrals
            
            auto dx_0_x = primBuffer.data(d1off + 3 * idx);
            
            auto dx_0_y = primBuffer.data(d1off + 3 * idx + 1);
            
            auto dx_0_z = primBuffer.data(d1off + 3 * idx + 2);
            
            auto dy_0_x = primBuffer.data(d1off + 3 * bdim + 3 * idx);
            
            auto dy_0_y = primBuffer.data(d1off + 3 * bdim + 3 * idx + 1);
            
            auto dy_0_z = primBuffer.data(d1off + 3 * bdim + 3 * idx + 2);
            
            auto dz_0_x = primBuffer.data(d1off + 6 * bdim + 3 * idx);
            
            auto dz_0_y = primBuffer.data(d1off + 6 * bdim + 3 * idx + 1);
            
            auto dz_0_z = primBuffer.data(d1off + 6 * bdim + 3 * idx + 2);
            
            // set up pointers to (S|M|S) integrals
            
            auto dx_0_0 = primBuffer.data(d2off + idx);
            
            auto dy_0_0 = primBuffer.data(d2off + bdim + idx);
            
            auto dz_0_0 = primBuffer.data(d2off + 2 * bdim + idx);
            
            // set up pointers to (S|P) integrals
            
            auto s_0_x = primBuffer.data(soff + 3 * idx);
            
            auto s_0_y = primBuffer.data(soff + 3 * idx + 1);
            
            auto s_0_z = primBuffer.data(soff + 3 * idx + 2);
            
            // set up pointers to (S|S) integrals
            
            auto s_0_0 = primBuffer.data(s1off + idx);
            
            #pragma omp simd aligned(fx, pbx, pby, pbz, dx_0_xx, dx_0_xy, dx_0_xz,\
                                     dx_0_yy, dx_0_yz, dx_0_zz, dy_0_xx, dy_0_xy,\
                                     dy_0_xz, dy_0_yy, dy_0_yz, dy_0_zz, dz_0_xx,\
                                     dz_0_xy, dz_0_xz, dz_0_yy, dz_0_yz, dz_0_zz,\
                                     dx_0_x, dx_0_y, dx_0_z, dy_0_x, dy_0_y, dy_0_z,\
                                     dz_0_x, dz_0_y, dz_0_z, dx_0_0, dy_0_0, dz_0_0,\
                                     s_0_x, s_0_y, s_0_z, s_0_0: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor
                
                double f2t = 0.50 * fx[j];
                
                // overlap integrals
                
                // leading x component
                
                s_0_x[j] = pbx[j] * s_0_0[j];
                
                // leading y component
                
                s_0_y[j] = pby[j] * s_0_0[j];
                
                // leading z component
                
                s_0_z[j] = pbz[j] * s_0_0[j];
                
                // electric dipole integrals
                
                // leading x component
                
                double fr = pbx[j];
                
                dx_0_xx[j] = fr * dx_0_x[j] + f2t * (dx_0_0[j] + s_0_x[j]);
                
                dy_0_xx[j] = fr * dy_0_x[j] + f2t * dy_0_0[j];
                
                dz_0_xx[j] = fr * dz_0_x[j] + f2t * dz_0_0[j];
                
                dx_0_xy[j] = fr * dx_0_y[j] + f2t * s_0_y[j];
                
                dy_0_xy[j] = fr * dy_0_y[j];
                
                dz_0_xy[j] = fr * dz_0_y[j];
                
                dx_0_xz[j] = fr * dx_0_z[j] + f2t * s_0_z[j];
                
                dy_0_xz[j] = fr * dy_0_z[j];
                
                dz_0_xz[j] = fr * dz_0_z[j];
                
                // leading y component
                
                fr = pby[j];
                
                dx_0_yy[j] = fr * dx_0_y[j] + f2t * dx_0_0[j];
                
                dy_0_yy[j] = fr * dy_0_y[j] + f2t * (dy_0_0[j] + s_0_y[j]);
                
                dz_0_yy[j] = fr * dz_0_y[j] + f2t * dz_0_0[j];
                
                dx_0_yz[j] = fr * dx_0_z[j];
                
                dy_0_yz[j] = fr * dy_0_z[j] + f2t * s_0_z[j];
                
                dz_0_yz[j] = fr * dz_0_z[j];
                
                // leading z component
                
                fr = pbz[j];
                
                dx_0_zz[j] = fr * dx_0_z[j] + f2t * dx_0_0[j];
                
                dy_0_zz[j] = fr * dy_0_z[j] + f2t * dy_0_0[j];
                
                dz_0_zz[j] = fr * dz_0_z[j] + f2t * (dz_0_0[j] + s_0_z[j]);
            }
            
            idx++;
        }
    }
    
    void
    compElectricDipoleForDS(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {2, 0, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {2, 0, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (D|M|S) integrals

            auto dx_xx_0 = primBuffer.data(doff + 6 * idx);

            auto dx_xy_0 = primBuffer.data(doff + 6 * idx + 1);

            auto dx_xz_0 = primBuffer.data(doff + 6 * idx + 2);

            auto dx_yy_0 = primBuffer.data(doff + 6 * idx + 3);

            auto dx_yz_0 = primBuffer.data(doff + 6 * idx + 4);

            auto dx_zz_0 = primBuffer.data(doff + 6 * idx + 5);

            auto dy_xx_0 = primBuffer.data(doff + 6 * bdim + 6 * idx);

            auto dy_xy_0 = primBuffer.data(doff + 6 * bdim + 6 * idx + 1);

            auto dy_xz_0 = primBuffer.data(doff + 6 * bdim + 6 * idx + 2);

            auto dy_yy_0 = primBuffer.data(doff + 6 * bdim + 6 * idx + 3);

            auto dy_yz_0 = primBuffer.data(doff + 6 * bdim + 6 * idx + 4);

            auto dy_zz_0 = primBuffer.data(doff + 6 * bdim + 6 * idx + 5);

            auto dz_xx_0 = primBuffer.data(doff + 12 * bdim + 6 * idx);

            auto dz_xy_0 = primBuffer.data(doff + 12 * bdim + 6 * idx + 1);

            auto dz_xz_0 = primBuffer.data(doff + 12 * bdim + 6 * idx + 2);

            auto dz_yy_0 = primBuffer.data(doff + 12 * bdim + 6 * idx + 3);

            auto dz_yz_0 = primBuffer.data(doff + 12 * bdim + 6 * idx + 4);

            auto dz_zz_0 = primBuffer.data(doff + 12 * bdim + 6 * idx + 5);

            // set up pointers to (P|M|S) integrals

            auto dx_x_0 = primBuffer.data(d1off + 3 * idx);

            auto dx_y_0 = primBuffer.data(d1off + 3 * idx + 1);

            auto dx_z_0 = primBuffer.data(d1off + 3 * idx + 2);

            auto dy_x_0 = primBuffer.data(d1off + 3 * bdim + 3 * idx);

            auto dy_y_0 = primBuffer.data(d1off + 3 * bdim + 3 * idx + 1);

            auto dy_z_0 = primBuffer.data(d1off + 3 * bdim + 3 * idx + 2);

            auto dz_x_0 = primBuffer.data(d1off + 6 * bdim + 3 * idx);

            auto dz_y_0 = primBuffer.data(d1off + 6 * bdim + 3 * idx + 1);

            auto dz_z_0 = primBuffer.data(d1off + 6 * bdim + 3 * idx + 2);

            // set up pointers to (S|M|S) integrals

            auto dx_0_0 = primBuffer.data(d2off + idx);

            auto dy_0_0 = primBuffer.data(d2off + bdim + idx);

            auto dz_0_0 = primBuffer.data(d2off + 2 * bdim + idx);

            // set up pointers to (P|S) integrals

            auto s_x_0 = primBuffer.data(soff + 3 * idx);

            auto s_y_0 = primBuffer.data(soff + 3 * idx + 1);

            auto s_z_0 = primBuffer.data(soff + 3 * idx + 2);

            // set up pointers to (S|S) integrals

            auto s_0_0 = primBuffer.data(s1off + idx);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xx_0, dx_xy_0, dx_xz_0,\
                                     dx_yy_0, dx_yz_0, dx_zz_0, dy_xx_0, dy_xy_0,\
                                     dy_xz_0, dy_yy_0, dy_yz_0, dy_zz_0, dz_xx_0,\
                                     dz_xy_0, dz_xz_0, dz_yy_0, dz_yz_0, dz_zz_0,\
                                     dx_x_0, dx_y_0, dx_z_0, dy_x_0, dy_y_0, dy_z_0,\
                                     dz_x_0, dz_y_0, dz_z_0, dx_0_0, dy_0_0, dz_0_0,\
                                     s_x_0, s_y_0, s_z_0, s_0_0: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                s_x_0[j] = pax[j] * s_0_0[j];

                // leading y component

                s_y_0[j] = pay[j] * s_0_0[j];

                // leading z component

                s_z_0[j] = paz[j] * s_0_0[j];

                // electric dipole integrals

                // leading x component

                double fr = pax[j];

                dx_xx_0[j] = fr * dx_x_0[j] + f2t * (dx_0_0[j] + s_x_0[j]);

                dy_xx_0[j] = fr * dy_x_0[j] + f2t * dy_0_0[j];

                dz_xx_0[j] = fr * dz_x_0[j] + f2t * dz_0_0[j];

                dx_xy_0[j] = fr * dx_y_0[j] + f2t * s_y_0[j];

                dy_xy_0[j] = fr * dy_y_0[j];

                dz_xy_0[j] = fr * dz_y_0[j];

                dx_xz_0[j] = fr * dx_z_0[j] + f2t * s_z_0[j];

                dy_xz_0[j] = fr * dy_z_0[j];

                dz_xz_0[j] = fr * dz_z_0[j];

                // leading y component

                fr = pay[j];

                dx_yy_0[j] = fr * dx_y_0[j] + f2t * dx_0_0[j];

                dy_yy_0[j] = fr * dy_y_0[j] + f2t * (dy_0_0[j] + s_y_0[j]);

                dz_yy_0[j] = fr * dz_y_0[j] + f2t * dz_0_0[j];

                dx_yz_0[j] = fr * dx_z_0[j];

                dy_yz_0[j] = fr * dy_z_0[j] + f2t * s_z_0[j];

                dz_yz_0[j] = fr * dz_z_0[j];

                // leading z component

                fr = paz[j];

                dx_zz_0[j] = fr * dx_z_0[j] + f2t * dx_0_0[j];

                dy_zz_0[j] = fr * dy_z_0[j] + f2t * dy_0_0[j];

                dz_zz_0[j] = fr * dz_z_0[j] + f2t * (dz_0_0[j] + s_z_0[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForPD(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {1, 2, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});
        
        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});
        
        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);
            
            // set up pointers to distances R(PB)
            
            auto pbx = pbDistances.data(3 * idx);
            
            auto pby = pbDistances.data(3 * idx + 1);
            
            auto pbz = pbDistances.data(3 * idx + 2);

            // set up pointers to (P|M|D) integrals

            auto dx_x_xx = primBuffer.data(doff + 18 * idx);

            auto dx_x_xy = primBuffer.data(doff + 18 * idx + 1);

            auto dx_x_xz = primBuffer.data(doff + 18 * idx + 2);

            auto dx_x_yy = primBuffer.data(doff + 18 * idx + 3);

            auto dx_x_yz = primBuffer.data(doff + 18 * idx + 4);

            auto dx_x_zz = primBuffer.data(doff + 18 * idx + 5);

            auto dx_y_xx = primBuffer.data(doff + 18 * idx + 6);

            auto dx_y_xy = primBuffer.data(doff + 18 * idx + 7);

            auto dx_y_xz = primBuffer.data(doff + 18 * idx + 8);

            auto dx_y_yy = primBuffer.data(doff + 18 * idx + 9);

            auto dx_y_yz = primBuffer.data(doff + 18 * idx + 10);

            auto dx_y_zz = primBuffer.data(doff + 18 * idx + 11);

            auto dx_z_xx = primBuffer.data(doff + 18 * idx + 12);

            auto dx_z_xy = primBuffer.data(doff + 18 * idx + 13);

            auto dx_z_xz = primBuffer.data(doff + 18 * idx + 14);

            auto dx_z_yy = primBuffer.data(doff + 18 * idx + 15);

            auto dx_z_yz = primBuffer.data(doff + 18 * idx + 16);

            auto dx_z_zz = primBuffer.data(doff + 18 * idx + 17);

            auto dy_x_xx = primBuffer.data(doff + 18 * bdim + 18 * idx);

            auto dy_x_xy = primBuffer.data(doff + 18 * bdim + 18 * idx + 1);

            auto dy_x_xz = primBuffer.data(doff + 18 * bdim + 18 * idx + 2);

            auto dy_x_yy = primBuffer.data(doff + 18 * bdim + 18 * idx + 3);

            auto dy_x_yz = primBuffer.data(doff + 18 * bdim + 18 * idx + 4);

            auto dy_x_zz = primBuffer.data(doff + 18 * bdim + 18 * idx + 5);

            auto dy_y_xx = primBuffer.data(doff + 18 * bdim + 18 * idx + 6);

            auto dy_y_xy = primBuffer.data(doff + 18 * bdim + 18 * idx + 7);

            auto dy_y_xz = primBuffer.data(doff + 18 * bdim + 18 * idx + 8);

            auto dy_y_yy = primBuffer.data(doff + 18 * bdim + 18 * idx + 9);

            auto dy_y_yz = primBuffer.data(doff + 18 * bdim + 18 * idx + 10);

            auto dy_y_zz = primBuffer.data(doff + 18 * bdim + 18 * idx + 11);

            auto dy_z_xx = primBuffer.data(doff + 18 * bdim + 18 * idx + 12);

            auto dy_z_xy = primBuffer.data(doff + 18 * bdim + 18 * idx + 13);

            auto dy_z_xz = primBuffer.data(doff + 18 * bdim + 18 * idx + 14);

            auto dy_z_yy = primBuffer.data(doff + 18 * bdim + 18 * idx + 15);

            auto dy_z_yz = primBuffer.data(doff + 18 * bdim + 18 * idx + 16);

            auto dy_z_zz = primBuffer.data(doff + 18 * bdim + 18 * idx + 17);

            auto dz_x_xx = primBuffer.data(doff + 36 * bdim + 18 * idx);

            auto dz_x_xy = primBuffer.data(doff + 36 * bdim + 18 * idx + 1);

            auto dz_x_xz = primBuffer.data(doff + 36 * bdim + 18 * idx + 2);

            auto dz_x_yy = primBuffer.data(doff + 36 * bdim + 18 * idx + 3);

            auto dz_x_yz = primBuffer.data(doff + 36 * bdim + 18 * idx + 4);

            auto dz_x_zz = primBuffer.data(doff + 36 * bdim + 18 * idx + 5);

            auto dz_y_xx = primBuffer.data(doff + 36 * bdim + 18 * idx + 6);

            auto dz_y_xy = primBuffer.data(doff + 36 * bdim + 18 * idx + 7);

            auto dz_y_xz = primBuffer.data(doff + 36 * bdim + 18 * idx + 8);

            auto dz_y_yy = primBuffer.data(doff + 36 * bdim + 18 * idx + 9);

            auto dz_y_yz = primBuffer.data(doff + 36 * bdim + 18 * idx + 10);

            auto dz_y_zz = primBuffer.data(doff + 36 * bdim + 18 * idx + 11);

            auto dz_z_xx = primBuffer.data(doff + 36 * bdim + 18 * idx + 12);

            auto dz_z_xy = primBuffer.data(doff + 36 * bdim + 18 * idx + 13);

            auto dz_z_xz = primBuffer.data(doff + 36 * bdim + 18 * idx + 14);

            auto dz_z_yy = primBuffer.data(doff + 36 * bdim + 18 * idx + 15);

            auto dz_z_yz = primBuffer.data(doff + 36 * bdim + 18 * idx + 16);

            auto dz_z_zz = primBuffer.data(doff + 36 * bdim + 18 * idx + 17);

            // set up pointers to (S|M|D) integrals

            auto dx_0_xx = primBuffer.data(d1off + 6 * idx);

            auto dx_0_xy = primBuffer.data(d1off + 6 * idx + 1);

            auto dx_0_xz = primBuffer.data(d1off + 6 * idx + 2);

            auto dx_0_yy = primBuffer.data(d1off + 6 * idx + 3);

            auto dx_0_yz = primBuffer.data(d1off + 6 * idx + 4);

            auto dx_0_zz = primBuffer.data(d1off + 6 * idx + 5);

            auto dy_0_xx = primBuffer.data(d1off + 6 * bdim + 6 * idx);

            auto dy_0_xy = primBuffer.data(d1off + 6 * bdim + 6 * idx + 1);

            auto dy_0_xz = primBuffer.data(d1off + 6 * bdim + 6 * idx + 2);

            auto dy_0_yy = primBuffer.data(d1off + 6 * bdim + 6 * idx + 3);

            auto dy_0_yz = primBuffer.data(d1off + 6 * bdim + 6 * idx + 4);

            auto dy_0_zz = primBuffer.data(d1off + 6 * bdim + 6 * idx + 5);

            auto dz_0_xx = primBuffer.data(d1off + 12 * bdim + 6 * idx);

            auto dz_0_xy = primBuffer.data(d1off + 12 * bdim + 6 * idx + 1);

            auto dz_0_xz = primBuffer.data(d1off + 12 * bdim + 6 * idx + 2);

            auto dz_0_yy = primBuffer.data(d1off + 12 * bdim + 6 * idx + 3);

            auto dz_0_yz = primBuffer.data(d1off + 12 * bdim + 6 * idx + 4);

            auto dz_0_zz = primBuffer.data(d1off + 12 * bdim + 6 * idx + 5);

            // set up pointers to (S|M|P) integrals

            auto dx_0_x = primBuffer.data(dkoff + 3 * idx);

            auto dx_0_y = primBuffer.data(dkoff + 3 * idx + 1);

            auto dx_0_z = primBuffer.data(dkoff + 3 * idx + 2);

            auto dy_0_x = primBuffer.data(dkoff + 3 * bdim + 3 * idx);

            auto dy_0_y = primBuffer.data(dkoff + 3 * bdim + 3 * idx + 1);

            auto dy_0_z = primBuffer.data(dkoff + 3 * bdim + 3 * idx + 2);

            auto dz_0_x = primBuffer.data(dkoff + 6 * bdim + 3 * idx);

            auto dz_0_y = primBuffer.data(dkoff + 6 * bdim + 3 * idx + 1);

            auto dz_0_z = primBuffer.data(dkoff + 6 * bdim + 3 * idx + 2);

            // set up pointers to (S|D) integrals

            auto s_0_xx = primBuffer.data(soff + 6 * idx);

            auto s_0_xy = primBuffer.data(soff + 6 * idx + 1);

            auto s_0_xz = primBuffer.data(soff + 6 * idx + 2);

            auto s_0_yy = primBuffer.data(soff + 6 * idx + 3);

            auto s_0_yz = primBuffer.data(soff + 6 * idx + 4);

            auto s_0_zz = primBuffer.data(soff + 6 * idx + 5);
            
            // set up pointers to (S|P) integrals
            
            auto s_0_x = primBuffer.data(s1off + 3 * idx);
            
            auto s_0_y = primBuffer.data(s1off + 3 * idx + 1);
            
            auto s_0_z = primBuffer.data(s1off + 3 * idx + 2);
            
            // set up pointers to (S|S) integrals
            
            auto s_0_0 = primBuffer.data(s2off + idx);

            #pragma omp simd aligned(fx, pax, pay, paz, pbx, pby, pbz,\
                                     dx_x_xx, dx_x_xy, dx_x_xz,\
                                     dx_x_yy, dx_x_yz, dx_x_zz, dx_y_xx, dx_y_xy,\
                                     dx_y_xz, dx_y_yy, dx_y_yz, dx_y_zz, dx_z_xx,\
                                     dx_z_xy, dx_z_xz, dx_z_yy, dx_z_yz, dx_z_zz,\
                                     dy_x_xx, dy_x_xy, dy_x_xz, dy_x_yy, dy_x_yz,\
                                     dy_x_zz, dy_y_xx, dy_y_xy, dy_y_xz, dy_y_yy,\
                                     dy_y_yz, dy_y_zz, dy_z_xx, dy_z_xy, dy_z_xz,\
                                     dy_z_yy, dy_z_yz, dy_z_zz, dz_x_xx, dz_x_xy,\
                                     dz_x_xz, dz_x_yy, dz_x_yz, dz_x_zz, dz_y_xx,\
                                     dz_y_xy, dz_y_xz, dz_y_yy, dz_y_yz, dz_y_zz,\
                                     dz_z_xx, dz_z_xy, dz_z_xz, dz_z_yy, dz_z_yz,\
                                     dz_z_zz, dx_0_xx, dx_0_xy, dx_0_xz, dx_0_yy,\
                                     dx_0_yz, dx_0_zz, dy_0_xx, dy_0_xy, dy_0_xz,\
                                     dy_0_yy, dy_0_yz, dy_0_zz, dz_0_xx, dz_0_xy,\
                                     dz_0_xz, dz_0_yy, dz_0_yz, dz_0_zz, dx_0_x,\
                                     dx_0_y, dx_0_z, dy_0_x, dy_0_y, dy_0_z, dz_0_x,\
                                     dz_0_y, dz_0_z, s_0_xx, s_0_xy, s_0_xz, s_0_yy,\
                                     s_0_yz, s_0_zz, s_0_x, s_0_y, s_0_z, s_0_0: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];
                
                // overlap integrals
                
                // leading x component
                
                double fr = pbx[j];
                
                s_0_xx[j] = fr * s_0_x[j] + f2t * s_0_0[j];
                
                s_0_xy[j] = fr * s_0_y[j];
                
                s_0_xz[j] = fr * s_0_z[j];
                
                // leading y component
                
                fr = pby[j];
                
                s_0_yy[j] = fr * s_0_y[j] + f2t * s_0_0[j];
                
                s_0_yz[j] = fr * s_0_z[j];
                
                // leading z component
                
                s_0_zz[j] = pbz[j] * s_0_z[j] + f2t * s_0_0[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_x_xx[j] = fr * dx_0_xx[j] + f2t * (2.0 * dx_0_x[j] + s_0_xx[j]);

                dy_x_xx[j] = fr * dy_0_xx[j] + f2t * 2.0 * dy_0_x[j];

                dz_x_xx[j] = fr * dz_0_xx[j] + f2t * 2.0 * dz_0_x[j];

                dx_x_xy[j] = fr * dx_0_xy[j] + f2t * (dx_0_y[j] + s_0_xy[j]);

                dy_x_xy[j] = fr * dy_0_xy[j] + f2t * dy_0_y[j];

                dz_x_xy[j] = fr * dz_0_xy[j] + f2t * dz_0_y[j];

                dx_x_xz[j] = fr * dx_0_xz[j] + f2t * (dx_0_z[j] + s_0_xz[j]);

                dy_x_xz[j] = fr * dy_0_xz[j] + f2t * dy_0_z[j];

                dz_x_xz[j] = fr * dz_0_xz[j] + f2t * dz_0_z[j];

                dx_x_yy[j] = fr * dx_0_yy[j] + f2t * s_0_yy[j];

                dy_x_yy[j] = fr * dy_0_yy[j];

                dz_x_yy[j] = fr * dz_0_yy[j];

                dx_x_yz[j] = fr * dx_0_yz[j] + f2t * s_0_yz[j];

                dy_x_yz[j] = fr * dy_0_yz[j];

                dz_x_yz[j] = fr * dz_0_yz[j];

                dx_x_zz[j] = fr * dx_0_zz[j] + f2t * s_0_zz[j];

                dy_x_zz[j] = fr * dy_0_zz[j];

                dz_x_zz[j] = fr * dz_0_zz[j];

                // leading y component

                fr = pay[j];

                dx_y_xx[j] = fr * dx_0_xx[j];

                dy_y_xx[j] = fr * dy_0_xx[j] + f2t * s_0_xx[j];

                dz_y_xx[j] = fr * dz_0_xx[j];

                dx_y_xy[j] = fr * dx_0_xy[j] + f2t * dx_0_x[j];

                dy_y_xy[j] = fr * dy_0_xy[j] + f2t * (dy_0_x[j] + s_0_xy[j]);

                dz_y_xy[j] = fr * dz_0_xy[j] + f2t * dz_0_x[j];

                dx_y_xz[j] = fr * dx_0_xz[j];

                dy_y_xz[j] = fr * dy_0_xz[j] + f2t * s_0_xz[j];

                dz_y_xz[j] = fr * dz_0_xz[j];

                dx_y_yy[j] = fr * dx_0_yy[j] + f2t * 2.0 * dx_0_y[j];

                dy_y_yy[j] = fr * dy_0_yy[j] + f2t * (2.0 * dy_0_y[j] + s_0_yy[j]);

                dz_y_yy[j] = fr * dz_0_yy[j] + f2t * 2.0 * dz_0_y[j];

                dx_y_yz[j] = fr * dx_0_yz[j] + f2t * dx_0_z[j];

                dy_y_yz[j] = fr * dy_0_yz[j] + f2t * (dy_0_z[j] + s_0_yz[j]);

                dz_y_yz[j] = fr * dz_0_yz[j] + f2t * dz_0_z[j];

                dx_y_zz[j] = fr * dx_0_zz[j];

                dy_y_zz[j] = fr * dy_0_zz[j] + f2t * s_0_zz[j];

                dz_y_zz[j] = fr * dz_0_zz[j];

                // leading z component

                fr = paz[j];

                dx_z_xx[j] = fr * dx_0_xx[j];

                dy_z_xx[j] = fr * dy_0_xx[j];

                dz_z_xx[j] = fr * dz_0_xx[j] + f2t * s_0_xx[j];

                dx_z_xy[j] = fr * dx_0_xy[j];

                dy_z_xy[j] = fr * dy_0_xy[j];

                dz_z_xy[j] = fr * dz_0_xy[j] + f2t * s_0_xy[j];

                dx_z_xz[j] = fr * dx_0_xz[j] + f2t * dx_0_x[j];

                dy_z_xz[j] = fr * dy_0_xz[j] + f2t * dy_0_x[j];

                dz_z_xz[j] = fr * dz_0_xz[j] + f2t * (dz_0_x[j] + s_0_xz[j]);

                dx_z_yy[j] = fr * dx_0_yy[j];

                dy_z_yy[j] = fr * dy_0_yy[j];

                dz_z_yy[j] = fr * dz_0_yy[j] + f2t * s_0_yy[j];

                dx_z_yz[j] = fr * dx_0_yz[j] + f2t * dx_0_y[j];

                dy_z_yz[j] = fr * dy_0_yz[j] + f2t * dy_0_y[j];

                dz_z_yz[j] = fr * dz_0_yz[j] + f2t * (dz_0_y[j] + s_0_yz[j]);

                dx_z_zz[j] = fr * dx_0_zz[j] + f2t * 2.0 * dx_0_z[j];

                dy_z_zz[j] = fr * dy_0_zz[j] + f2t * 2.0 * dy_0_z[j];

                dz_z_zz[j] = fr * dz_0_zz[j] + f2t * (2.0 * dz_0_z[j] + s_0_zz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForDP(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {2, 1, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {2, 1, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (D|M|P) integrals

            auto dx_xx_x = primBuffer.data(doff + 18 * idx);

            auto dx_xx_y = primBuffer.data(doff + 18 * idx + 1);

            auto dx_xx_z = primBuffer.data(doff + 18 * idx + 2);

            auto dx_xy_x = primBuffer.data(doff + 18 * idx + 3);

            auto dx_xy_y = primBuffer.data(doff + 18 * idx + 4);

            auto dx_xy_z = primBuffer.data(doff + 18 * idx + 5);

            auto dx_xz_x = primBuffer.data(doff + 18 * idx + 6);

            auto dx_xz_y = primBuffer.data(doff + 18 * idx + 7);

            auto dx_xz_z = primBuffer.data(doff + 18 * idx + 8);

            auto dx_yy_x = primBuffer.data(doff + 18 * idx + 9);

            auto dx_yy_y = primBuffer.data(doff + 18 * idx + 10);

            auto dx_yy_z = primBuffer.data(doff + 18 * idx + 11);

            auto dx_yz_x = primBuffer.data(doff + 18 * idx + 12);

            auto dx_yz_y = primBuffer.data(doff + 18 * idx + 13);

            auto dx_yz_z = primBuffer.data(doff + 18 * idx + 14);

            auto dx_zz_x = primBuffer.data(doff + 18 * idx + 15);

            auto dx_zz_y = primBuffer.data(doff + 18 * idx + 16);

            auto dx_zz_z = primBuffer.data(doff + 18 * idx + 17);

            auto dy_xx_x = primBuffer.data(doff + 18 * bdim + 18 * idx);

            auto dy_xx_y = primBuffer.data(doff + 18 * bdim + 18 * idx + 1);

            auto dy_xx_z = primBuffer.data(doff + 18 * bdim + 18 * idx + 2);

            auto dy_xy_x = primBuffer.data(doff + 18 * bdim + 18 * idx + 3);

            auto dy_xy_y = primBuffer.data(doff + 18 * bdim + 18 * idx + 4);

            auto dy_xy_z = primBuffer.data(doff + 18 * bdim + 18 * idx + 5);

            auto dy_xz_x = primBuffer.data(doff + 18 * bdim + 18 * idx + 6);

            auto dy_xz_y = primBuffer.data(doff + 18 * bdim + 18 * idx + 7);

            auto dy_xz_z = primBuffer.data(doff + 18 * bdim + 18 * idx + 8);

            auto dy_yy_x = primBuffer.data(doff + 18 * bdim + 18 * idx + 9);

            auto dy_yy_y = primBuffer.data(doff + 18 * bdim + 18 * idx + 10);

            auto dy_yy_z = primBuffer.data(doff + 18 * bdim + 18 * idx + 11);

            auto dy_yz_x = primBuffer.data(doff + 18 * bdim + 18 * idx + 12);

            auto dy_yz_y = primBuffer.data(doff + 18 * bdim + 18 * idx + 13);

            auto dy_yz_z = primBuffer.data(doff + 18 * bdim + 18 * idx + 14);

            auto dy_zz_x = primBuffer.data(doff + 18 * bdim + 18 * idx + 15);

            auto dy_zz_y = primBuffer.data(doff + 18 * bdim + 18 * idx + 16);

            auto dy_zz_z = primBuffer.data(doff + 18 * bdim + 18 * idx + 17);

            auto dz_xx_x = primBuffer.data(doff + 36 * bdim + 18 * idx);

            auto dz_xx_y = primBuffer.data(doff + 36 * bdim + 18 * idx + 1);

            auto dz_xx_z = primBuffer.data(doff + 36 * bdim + 18 * idx + 2);

            auto dz_xy_x = primBuffer.data(doff + 36 * bdim + 18 * idx + 3);

            auto dz_xy_y = primBuffer.data(doff + 36 * bdim + 18 * idx + 4);

            auto dz_xy_z = primBuffer.data(doff + 36 * bdim + 18 * idx + 5);

            auto dz_xz_x = primBuffer.data(doff + 36 * bdim + 18 * idx + 6);

            auto dz_xz_y = primBuffer.data(doff + 36 * bdim + 18 * idx + 7);

            auto dz_xz_z = primBuffer.data(doff + 36 * bdim + 18 * idx + 8);

            auto dz_yy_x = primBuffer.data(doff + 36 * bdim + 18 * idx + 9);

            auto dz_yy_y = primBuffer.data(doff + 36 * bdim + 18 * idx + 10);

            auto dz_yy_z = primBuffer.data(doff + 36 * bdim + 18 * idx + 11);

            auto dz_yz_x = primBuffer.data(doff + 36 * bdim + 18 * idx + 12);

            auto dz_yz_y = primBuffer.data(doff + 36 * bdim + 18 * idx + 13);

            auto dz_yz_z = primBuffer.data(doff + 36 * bdim + 18 * idx + 14);

            auto dz_zz_x = primBuffer.data(doff + 36 * bdim + 18 * idx + 15);

            auto dz_zz_y = primBuffer.data(doff + 36 * bdim + 18 * idx + 16);

            auto dz_zz_z = primBuffer.data(doff + 36 * bdim + 18 * idx + 17);

            // set up pointers to (P|M|P) integrals

            auto dx_x_x = primBuffer.data(d1off + 9 * idx);

            auto dx_x_y = primBuffer.data(d1off + 9 * idx + 1);

            auto dx_x_z = primBuffer.data(d1off + 9 * idx + 2);

            auto dx_y_x = primBuffer.data(d1off + 9 * idx + 3);

            auto dx_y_y = primBuffer.data(d1off + 9 * idx + 4);

            auto dx_y_z = primBuffer.data(d1off + 9 * idx + 5);

            auto dx_z_x = primBuffer.data(d1off + 9 * idx + 6);

            auto dx_z_y = primBuffer.data(d1off + 9 * idx + 7);

            auto dx_z_z = primBuffer.data(d1off + 9 * idx + 8);

            auto dy_x_x = primBuffer.data(d1off + 9 * bdim + 9 * idx);

            auto dy_x_y = primBuffer.data(d1off + 9 * bdim + 9 * idx + 1);

            auto dy_x_z = primBuffer.data(d1off + 9 * bdim + 9 * idx + 2);

            auto dy_y_x = primBuffer.data(d1off + 9 * bdim + 9 * idx + 3);

            auto dy_y_y = primBuffer.data(d1off + 9 * bdim + 9 * idx + 4);

            auto dy_y_z = primBuffer.data(d1off + 9 * bdim + 9 * idx + 5);

            auto dy_z_x = primBuffer.data(d1off + 9 * bdim + 9 * idx + 6);

            auto dy_z_y = primBuffer.data(d1off + 9 * bdim + 9 * idx + 7);

            auto dy_z_z = primBuffer.data(d1off + 9 * bdim + 9 * idx + 8);

            auto dz_x_x = primBuffer.data(d1off + 18 * bdim + 9 * idx);

            auto dz_x_y = primBuffer.data(d1off + 18 * bdim + 9 * idx + 1);

            auto dz_x_z = primBuffer.data(d1off + 18 * bdim + 9 * idx + 2);

            auto dz_y_x = primBuffer.data(d1off + 18 * bdim + 9 * idx + 3);

            auto dz_y_y = primBuffer.data(d1off + 18 * bdim + 9 * idx + 4);

            auto dz_y_z = primBuffer.data(d1off + 18 * bdim + 9 * idx + 5);

            auto dz_z_x = primBuffer.data(d1off + 18 * bdim + 9 * idx + 6);

            auto dz_z_y = primBuffer.data(d1off + 18 * bdim + 9 * idx + 7);

            auto dz_z_z = primBuffer.data(d1off + 18 * bdim + 9 * idx + 8);

            // set up pointers to (S|M|P) integrals

            auto dx_0_x = primBuffer.data(d2off + 3 * idx);

            auto dx_0_y = primBuffer.data(d2off + 3 * idx + 1);

            auto dx_0_z = primBuffer.data(d2off + 3 * idx + 2);

            auto dy_0_x = primBuffer.data(d2off + 3 * bdim + 3 * idx);

            auto dy_0_y = primBuffer.data(d2off + 3 * bdim + 3 * idx + 1);

            auto dy_0_z = primBuffer.data(d2off + 3 * bdim + 3 * idx + 2);

            auto dz_0_x = primBuffer.data(d2off + 6 * bdim + 3 * idx);

            auto dz_0_y = primBuffer.data(d2off + 6 * bdim + 3 * idx + 1);

            auto dz_0_z = primBuffer.data(d2off + 6 * bdim + 3 * idx + 2);

            // set up pointers to (P|M|S) integrals

            auto dx_x_0 = primBuffer.data(dkoff + 3 * idx);

            auto dx_y_0 = primBuffer.data(dkoff + 3 * idx + 1);

            auto dx_z_0 = primBuffer.data(dkoff + 3 * idx + 2);

            auto dy_x_0 = primBuffer.data(dkoff + 3 * bdim + 3 * idx);

            auto dy_y_0 = primBuffer.data(dkoff + 3 * bdim + 3 * idx + 1);

            auto dy_z_0 = primBuffer.data(dkoff + 3 * bdim + 3 * idx + 2);

            auto dz_x_0 = primBuffer.data(dkoff + 6 * bdim + 3 * idx);

            auto dz_y_0 = primBuffer.data(dkoff + 6 * bdim + 3 * idx + 1);

            auto dz_z_0 = primBuffer.data(dkoff + 6 * bdim + 3 * idx + 2);

            // set up pointers to (P|P) integrals

            auto s_x_x = primBuffer.data(soff + 9 * idx);

            auto s_x_y = primBuffer.data(soff + 9 * idx + 1);

            auto s_x_z = primBuffer.data(soff + 9 * idx + 2);

            auto s_y_x = primBuffer.data(soff + 9 * idx + 3);

            auto s_y_y = primBuffer.data(soff + 9 * idx + 4);

            auto s_y_z = primBuffer.data(soff + 9 * idx + 5);

            auto s_z_x = primBuffer.data(soff + 9 * idx + 6);

            auto s_z_y = primBuffer.data(soff + 9 * idx + 7);

            auto s_z_z = primBuffer.data(soff + 9 * idx + 8);

            // set up pointers to (S|P) integrals

            auto s_0_x = primBuffer.data(s1off + 3 * idx);

            auto s_0_y = primBuffer.data(s1off + 3 * idx + 1);

            auto s_0_z = primBuffer.data(s1off + 3 * idx + 2);

            // set up pointers to (S|S) integrals

            auto s_0_0 = primBuffer.data(skoff + idx);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xx_x, dx_xx_y, dx_xx_z,\
                                     dx_xy_x, dx_xy_y, dx_xy_z, dx_xz_x, dx_xz_y,\
                                     dx_xz_z, dx_yy_x, dx_yy_y, dx_yy_z, dx_yz_x,\
                                     dx_yz_y, dx_yz_z, dx_zz_x, dx_zz_y, dx_zz_z,\
                                     dy_xx_x, dy_xx_y, dy_xx_z, dy_xy_x, dy_xy_y,\
                                     dy_xy_z, dy_xz_x, dy_xz_y, dy_xz_z, dy_yy_x,\
                                     dy_yy_y, dy_yy_z, dy_yz_x, dy_yz_y, dy_yz_z,\
                                     dy_zz_x, dy_zz_y, dy_zz_z, dz_xx_x, dz_xx_y,\
                                     dz_xx_z, dz_xy_x, dz_xy_y, dz_xy_z, dz_xz_x,\
                                     dz_xz_y, dz_xz_z, dz_yy_x, dz_yy_y, dz_yy_z,\
                                     dz_yz_x, dz_yz_y, dz_yz_z, dz_zz_x, dz_zz_y,\
                                     dz_zz_z, dx_x_x, dx_x_y, dx_x_z, dx_y_x, dx_y_y,\
                                     dx_y_z, dx_z_x, dx_z_y, dx_z_z, dy_x_x, dy_x_y,\
                                     dy_x_z, dy_y_x, dy_y_y, dy_y_z, dy_z_x, dy_z_y,\
                                     dy_z_z, dz_x_x, dz_x_y, dz_x_z, dz_y_x, dz_y_y,\
                                     dz_y_z, dz_z_x, dz_z_y, dz_z_z, dx_0_x, dx_0_y,\
                                     dx_0_z, dy_0_x, dy_0_y, dy_0_z, dz_0_x, dz_0_y,\
                                     dz_0_z, dx_x_0, dx_y_0, dx_z_0, dy_x_0, dy_y_0,\
                                     dy_z_0, dz_x_0, dz_y_0, dz_z_0, s_x_x, s_x_y,\
                                     s_x_z, s_y_x, s_y_y, s_y_z, s_z_x, s_z_y,\
                                     s_z_z, s_0_x, s_0_y, s_0_z, s_0_0: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_x_x[j] = fr * s_0_x[j] + f2t * s_0_0[j];

                s_x_y[j] = fr * s_0_y[j];

                s_x_z[j] = fr * s_0_z[j];

                // leading y component

                fr = pay[j];

                s_y_x[j] = fr * s_0_x[j];

                s_y_y[j] = fr * s_0_y[j] + f2t * s_0_0[j];

                s_y_z[j] = fr * s_0_z[j];

                // leading z component

                fr = paz[j];

                s_z_x[j] = fr * s_0_x[j];

                s_z_y[j] = fr * s_0_y[j];

                s_z_z[j] = fr * s_0_z[j] + f2t * s_0_0[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xx_x[j] = fr * dx_x_x[j] + f2t * (dx_0_x[j] + dx_x_0[j] + s_x_x[j]);

                dy_xx_x[j] = fr * dy_x_x[j] + f2t * (dy_0_x[j] + dy_x_0[j]);

                dz_xx_x[j] = fr * dz_x_x[j] + f2t * (dz_0_x[j] + dz_x_0[j]);

                dx_xx_y[j] = fr * dx_x_y[j] + f2t * (dx_0_y[j] + s_x_y[j]);

                dy_xx_y[j] = fr * dy_x_y[j] + f2t * dy_0_y[j];

                dz_xx_y[j] = fr * dz_x_y[j] + f2t * dz_0_y[j];

                dx_xx_z[j] = fr * dx_x_z[j] + f2t * (dx_0_z[j] + s_x_z[j]);

                dy_xx_z[j] = fr * dy_x_z[j] + f2t * dy_0_z[j];

                dz_xx_z[j] = fr * dz_x_z[j] + f2t * dz_0_z[j];

                dx_xy_x[j] = fr * dx_y_x[j] + f2t * (dx_y_0[j] + s_y_x[j]);

                dy_xy_x[j] = fr * dy_y_x[j] + f2t * dy_y_0[j];

                dz_xy_x[j] = fr * dz_y_x[j] + f2t * dz_y_0[j];

                dx_xy_y[j] = fr * dx_y_y[j] + f2t * s_y_y[j];

                dy_xy_y[j] = fr * dy_y_y[j];

                dz_xy_y[j] = fr * dz_y_y[j];

                dx_xy_z[j] = fr * dx_y_z[j] + f2t * s_y_z[j];

                dy_xy_z[j] = fr * dy_y_z[j];

                dz_xy_z[j] = fr * dz_y_z[j];

                dx_xz_x[j] = fr * dx_z_x[j] + f2t * (dx_z_0[j] + s_z_x[j]);

                dy_xz_x[j] = fr * dy_z_x[j] + f2t * dy_z_0[j];

                dz_xz_x[j] = fr * dz_z_x[j] + f2t * dz_z_0[j];

                dx_xz_y[j] = fr * dx_z_y[j] + f2t * s_z_y[j];

                dy_xz_y[j] = fr * dy_z_y[j];

                dz_xz_y[j] = fr * dz_z_y[j];

                dx_xz_z[j] = fr * dx_z_z[j] + f2t * s_z_z[j];

                dy_xz_z[j] = fr * dy_z_z[j];

                dz_xz_z[j] = fr * dz_z_z[j];

                // leading y component

                fr = pay[j];

                dx_yy_x[j] = fr * dx_y_x[j] + f2t * dx_0_x[j];

                dy_yy_x[j] = fr * dy_y_x[j] + f2t * (dy_0_x[j] + s_y_x[j]);

                dz_yy_x[j] = fr * dz_y_x[j] + f2t * dz_0_x[j];

                dx_yy_y[j] = fr * dx_y_y[j] + f2t * (dx_0_y[j] + dx_y_0[j]);

                dy_yy_y[j] = fr * dy_y_y[j] + f2t * (dy_0_y[j] + dy_y_0[j] + s_y_y[j]);

                dz_yy_y[j] = fr * dz_y_y[j] + f2t * (dz_0_y[j] + dz_y_0[j]);

                dx_yy_z[j] = fr * dx_y_z[j] + f2t * dx_0_z[j];

                dy_yy_z[j] = fr * dy_y_z[j] + f2t * (dy_0_z[j] + s_y_z[j]);

                dz_yy_z[j] = fr * dz_y_z[j] + f2t * dz_0_z[j];

                dx_yz_x[j] = fr * dx_z_x[j];

                dy_yz_x[j] = fr * dy_z_x[j] + f2t * s_z_x[j];

                dz_yz_x[j] = fr * dz_z_x[j];

                dx_yz_y[j] = fr * dx_z_y[j] + f2t * dx_z_0[j];

                dy_yz_y[j] = fr * dy_z_y[j] + f2t * (dy_z_0[j] + s_z_y[j]);

                dz_yz_y[j] = fr * dz_z_y[j] + f2t * dz_z_0[j];

                dx_yz_z[j] = fr * dx_z_z[j];

                dy_yz_z[j] = fr * dy_z_z[j] + f2t * s_z_z[j];

                dz_yz_z[j] = fr * dz_z_z[j];

                // leading z component

                fr = paz[j];

                dx_zz_x[j] = fr * dx_z_x[j] + f2t * dx_0_x[j];

                dy_zz_x[j] = fr * dy_z_x[j] + f2t * dy_0_x[j];

                dz_zz_x[j] = fr * dz_z_x[j] + f2t * (dz_0_x[j] + s_z_x[j]);

                dx_zz_y[j] = fr * dx_z_y[j] + f2t * dx_0_y[j];

                dy_zz_y[j] = fr * dy_z_y[j] + f2t * dy_0_y[j];

                dz_zz_y[j] = fr * dz_z_y[j] + f2t * (dz_0_y[j] + s_z_y[j]);

                dx_zz_z[j] = fr * dx_z_z[j] + f2t * (dx_0_z[j] + dx_z_0[j]);

                dy_zz_z[j] = fr * dy_z_z[j] + f2t * (dy_0_z[j] + dy_z_0[j]);

                dz_zz_z[j] = fr * dz_z_z[j] + f2t * (dz_0_z[j] + dz_z_0[j] + s_z_z[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForSF(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {0, 3, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PB)

            auto pbx = pbDistances.data(3 * idx);

            auto pby = pbDistances.data(3 * idx + 1);

            auto pbz = pbDistances.data(3 * idx + 2);

            // set up pointers to (S|M|F) integrals

            auto dx_0_xxx = primBuffer.data(doff + 10 * idx);

            auto dx_0_xxy = primBuffer.data(doff + 10 * idx + 1);

            auto dx_0_xxz = primBuffer.data(doff + 10 * idx + 2);

            auto dx_0_xyy = primBuffer.data(doff + 10 * idx + 3);

            auto dx_0_xyz = primBuffer.data(doff + 10 * idx + 4);

            auto dx_0_xzz = primBuffer.data(doff + 10 * idx + 5);

            auto dx_0_yyy = primBuffer.data(doff + 10 * idx + 6);

            auto dx_0_yyz = primBuffer.data(doff + 10 * idx + 7);

            auto dx_0_yzz = primBuffer.data(doff + 10 * idx + 8);

            auto dx_0_zzz = primBuffer.data(doff + 10 * idx + 9);

            auto dy_0_xxx = primBuffer.data(doff + 10 * bdim + 10 * idx);

            auto dy_0_xxy = primBuffer.data(doff + 10 * bdim + 10 * idx + 1);

            auto dy_0_xxz = primBuffer.data(doff + 10 * bdim + 10 * idx + 2);

            auto dy_0_xyy = primBuffer.data(doff + 10 * bdim + 10 * idx + 3);

            auto dy_0_xyz = primBuffer.data(doff + 10 * bdim + 10 * idx + 4);

            auto dy_0_xzz = primBuffer.data(doff + 10 * bdim + 10 * idx + 5);

            auto dy_0_yyy = primBuffer.data(doff + 10 * bdim + 10 * idx + 6);

            auto dy_0_yyz = primBuffer.data(doff + 10 * bdim + 10 * idx + 7);

            auto dy_0_yzz = primBuffer.data(doff + 10 * bdim + 10 * idx + 8);

            auto dy_0_zzz = primBuffer.data(doff + 10 * bdim + 10 * idx + 9);

            auto dz_0_xxx = primBuffer.data(doff + 20 * bdim + 10 * idx);

            auto dz_0_xxy = primBuffer.data(doff + 20 * bdim + 10 * idx + 1);

            auto dz_0_xxz = primBuffer.data(doff + 20 * bdim + 10 * idx + 2);

            auto dz_0_xyy = primBuffer.data(doff + 20 * bdim + 10 * idx + 3);

            auto dz_0_xyz = primBuffer.data(doff + 20 * bdim + 10 * idx + 4);

            auto dz_0_xzz = primBuffer.data(doff + 20 * bdim + 10 * idx + 5);

            auto dz_0_yyy = primBuffer.data(doff + 20 * bdim + 10 * idx + 6);

            auto dz_0_yyz = primBuffer.data(doff + 20 * bdim + 10 * idx + 7);

            auto dz_0_yzz = primBuffer.data(doff + 20 * bdim + 10 * idx + 8);

            auto dz_0_zzz = primBuffer.data(doff + 20 * bdim + 10 * idx + 9);

            // set up pointers to (S|M|D) integrals

            auto dx_0_xx = primBuffer.data(d1off + 6 * idx);

            auto dx_0_xy = primBuffer.data(d1off + 6 * idx + 1);

            auto dx_0_xz = primBuffer.data(d1off + 6 * idx + 2);

            auto dx_0_yy = primBuffer.data(d1off + 6 * idx + 3);

            auto dx_0_yz = primBuffer.data(d1off + 6 * idx + 4);

            auto dx_0_zz = primBuffer.data(d1off + 6 * idx + 5);

            auto dy_0_xx = primBuffer.data(d1off + 6 * bdim + 6 * idx);

            auto dy_0_xy = primBuffer.data(d1off + 6 * bdim + 6 * idx + 1);

            auto dy_0_xz = primBuffer.data(d1off + 6 * bdim + 6 * idx + 2);

            auto dy_0_yy = primBuffer.data(d1off + 6 * bdim + 6 * idx + 3);

            auto dy_0_yz = primBuffer.data(d1off + 6 * bdim + 6 * idx + 4);

            auto dy_0_zz = primBuffer.data(d1off + 6 * bdim + 6 * idx + 5);

            auto dz_0_xx = primBuffer.data(d1off + 12 * bdim + 6 * idx);

            auto dz_0_xy = primBuffer.data(d1off + 12 * bdim + 6 * idx + 1);

            auto dz_0_xz = primBuffer.data(d1off + 12 * bdim + 6 * idx + 2);

            auto dz_0_yy = primBuffer.data(d1off + 12 * bdim + 6 * idx + 3);

            auto dz_0_yz = primBuffer.data(d1off + 12 * bdim + 6 * idx + 4);

            auto dz_0_zz = primBuffer.data(d1off + 12 * bdim + 6 * idx + 5);

            // set up pointers to (S|M|P) integrals

            auto dx_0_x = primBuffer.data(d2off + 3 * idx);

            auto dx_0_y = primBuffer.data(d2off + 3 * idx + 1);

            auto dx_0_z = primBuffer.data(d2off + 3 * idx + 2);

            auto dy_0_x = primBuffer.data(d2off + 3 * bdim + 3 * idx);

            auto dy_0_y = primBuffer.data(d2off + 3 * bdim + 3 * idx + 1);

            auto dy_0_z = primBuffer.data(d2off + 3 * bdim + 3 * idx + 2);

            auto dz_0_x = primBuffer.data(d2off + 6 * bdim + 3 * idx);

            auto dz_0_y = primBuffer.data(d2off + 6 * bdim + 3 * idx + 1);

            auto dz_0_z = primBuffer.data(d2off + 6 * bdim + 3 * idx + 2);

            // set up pointers to (S|D) integrals

            auto s_0_xx = primBuffer.data(soff + 6 * idx);

            auto s_0_xy = primBuffer.data(soff + 6 * idx + 1);

            auto s_0_xz = primBuffer.data(soff + 6 * idx + 2);

            auto s_0_yy = primBuffer.data(soff + 6 * idx + 3);

            auto s_0_yz = primBuffer.data(soff + 6 * idx + 4);

            auto s_0_zz = primBuffer.data(soff + 6 * idx + 5);

            // set up pointers to (S|P) integrals

            auto s_0_x = primBuffer.data(s1off + 3 * idx);

            auto s_0_y = primBuffer.data(s1off + 3 * idx + 1);

            auto s_0_z = primBuffer.data(s1off + 3 * idx + 2);

            // set up pointers to (S|S) integrals

            auto s_0_0 = primBuffer.data(s2off + idx);

            #pragma omp simd aligned(fx, pbx, pby, pbz, dx_0_xxx, dx_0_xxy, dx_0_xxz,\
                                     dx_0_xyy, dx_0_xyz, dx_0_xzz, dx_0_yyy, dx_0_yyz,\
                                     dx_0_yzz, dx_0_zzz, dy_0_xxx, dy_0_xxy, dy_0_xxz,\
                                     dy_0_xyy, dy_0_xyz, dy_0_xzz, dy_0_yyy, dy_0_yyz,\
                                     dy_0_yzz, dy_0_zzz, dz_0_xxx, dz_0_xxy, dz_0_xxz,\
                                     dz_0_xyy, dz_0_xyz, dz_0_xzz, dz_0_yyy, dz_0_yyz,\
                                     dz_0_yzz, dz_0_zzz, dx_0_xx, dx_0_xy, dx_0_xz,\
                                     dx_0_yy, dx_0_yz, dx_0_zz, dy_0_xx, dy_0_xy,\
                                     dy_0_xz, dy_0_yy, dy_0_yz, dy_0_zz, dz_0_xx,\
                                     dz_0_xy, dz_0_xz, dz_0_yy, dz_0_yz, dz_0_zz,\
                                     dx_0_x, dx_0_y, dx_0_z, dy_0_x, dy_0_y, dy_0_z,\
                                     dz_0_x, dz_0_y, dz_0_z, s_0_xx, s_0_xy, s_0_xz,\
                                     s_0_yy, s_0_yz, s_0_zz, s_0_x, s_0_y, s_0_z,\
                                     s_0_0: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pbx[j];

                s_0_xx[j] = fr * s_0_x[j] + f2t * s_0_0[j];

                s_0_xy[j] = fr * s_0_y[j];

                s_0_xz[j] = fr * s_0_z[j];

                // leading y component

                fr = pby[j];

                s_0_yy[j] = fr * s_0_y[j] + f2t * s_0_0[j];

                s_0_yz[j] = fr * s_0_z[j];

                // leading z component

                s_0_zz[j] = pbz[j] * s_0_z[j] + f2t * s_0_0[j];

                // electric dipole integrals

                // leading x component

                fr = pbx[j];

                dx_0_xxx[j] = fr * dx_0_xx[j] + f2t * (2.0 * dx_0_x[j] + s_0_xx[j]);

                dy_0_xxx[j] = fr * dy_0_xx[j] + 2.0 * f2t * dy_0_x[j];

                dz_0_xxx[j] = fr * dz_0_xx[j] + 2.0 * f2t * dz_0_x[j];

                dx_0_xxy[j] = fr * dx_0_xy[j] + f2t * (dx_0_y[j] + s_0_xy[j]);

                dy_0_xxy[j] = fr * dy_0_xy[j] + f2t * dy_0_y[j];

                dz_0_xxy[j] = fr * dz_0_xy[j] + f2t * dz_0_y[j];

                dx_0_xxz[j] = fr * dx_0_xz[j] + f2t * (dx_0_z[j] + s_0_xz[j]);

                dy_0_xxz[j] = fr * dy_0_xz[j] + f2t * dy_0_z[j];

                dz_0_xxz[j] = fr * dz_0_xz[j] + f2t * dz_0_z[j];

                dx_0_xyy[j] = fr * dx_0_yy[j] + f2t * s_0_yy[j];

                dy_0_xyy[j] = fr * dy_0_yy[j];

                dz_0_xyy[j] = fr * dz_0_yy[j];

                dx_0_xyz[j] = fr * dx_0_yz[j] + f2t * s_0_yz[j];

                dy_0_xyz[j] = fr * dy_0_yz[j];

                dz_0_xyz[j] = fr * dz_0_yz[j];

                dx_0_xzz[j] = fr * dx_0_zz[j] + f2t * s_0_zz[j];

                dy_0_xzz[j] = fr * dy_0_zz[j];

                dz_0_xzz[j] = fr * dz_0_zz[j];

                // leading y component

                fr = pby[j];

                dx_0_yyy[j] = fr * dx_0_yy[j] + 2.0 * f2t * dx_0_y[j];

                dy_0_yyy[j] = fr * dy_0_yy[j] + f2t * (2.0 * dy_0_y[j] + s_0_yy[j]);

                dz_0_yyy[j] = fr * dz_0_yy[j] + 2.0 * f2t * dz_0_y[j];

                dx_0_yyz[j] = fr * dx_0_yz[j] + f2t * dx_0_z[j];

                dy_0_yyz[j] = fr * dy_0_yz[j] + f2t * (dy_0_z[j] + s_0_yz[j]);

                dz_0_yyz[j] = fr * dz_0_yz[j] + f2t * dz_0_z[j];

                dx_0_yzz[j] = fr * dx_0_zz[j];

                dy_0_yzz[j] = fr * dy_0_zz[j] + f2t * s_0_zz[j];

                dz_0_yzz[j] = fr * dz_0_zz[j];

                // leading z component

                fr = pbz[j];

                dx_0_zzz[j] = fr * dx_0_zz[j] + 2.0 * f2t * dx_0_z[j];

                dy_0_zzz[j] = fr * dy_0_zz[j] + 2.0 * f2t * dy_0_z[j];

                dz_0_zzz[j] = fr * dz_0_zz[j] + f2t * (2.0 * dz_0_z[j] + s_0_zz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForFS(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {3, 0, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {3, 0, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 0, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 0, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (F|M|S) integrals

            auto dx_xxx_0 = primBuffer.data(doff + 10 * idx);

            auto dx_xxy_0 = primBuffer.data(doff + 10 * idx + 1);

            auto dx_xxz_0 = primBuffer.data(doff + 10 * idx + 2);

            auto dx_xyy_0 = primBuffer.data(doff + 10 * idx + 3);

            auto dx_xyz_0 = primBuffer.data(doff + 10 * idx + 4);

            auto dx_xzz_0 = primBuffer.data(doff + 10 * idx + 5);

            auto dx_yyy_0 = primBuffer.data(doff + 10 * idx + 6);

            auto dx_yyz_0 = primBuffer.data(doff + 10 * idx + 7);

            auto dx_yzz_0 = primBuffer.data(doff + 10 * idx + 8);

            auto dx_zzz_0 = primBuffer.data(doff + 10 * idx + 9);

            auto dy_xxx_0 = primBuffer.data(doff + 10 * bdim + 10 * idx);

            auto dy_xxy_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 1);

            auto dy_xxz_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 2);

            auto dy_xyy_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 3);

            auto dy_xyz_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 4);

            auto dy_xzz_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 5);

            auto dy_yyy_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 6);

            auto dy_yyz_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 7);

            auto dy_yzz_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 8);

            auto dy_zzz_0 = primBuffer.data(doff + 10 * bdim + 10 * idx + 9);

            auto dz_xxx_0 = primBuffer.data(doff + 20 * bdim + 10 * idx);

            auto dz_xxy_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 1);

            auto dz_xxz_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 2);

            auto dz_xyy_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 3);

            auto dz_xyz_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 4);

            auto dz_xzz_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 5);

            auto dz_yyy_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 6);

            auto dz_yyz_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 7);

            auto dz_yzz_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 8);

            auto dz_zzz_0 = primBuffer.data(doff + 20 * bdim + 10 * idx + 9);

            // set up pointers to (D|M|S) integrals

            auto dx_xx_0 = primBuffer.data(d1off + 6 * idx);

            auto dx_xy_0 = primBuffer.data(d1off + 6 * idx + 1);

            auto dx_xz_0 = primBuffer.data(d1off + 6 * idx + 2);

            auto dx_yy_0 = primBuffer.data(d1off + 6 * idx + 3);

            auto dx_yz_0 = primBuffer.data(d1off + 6 * idx + 4);

            auto dx_zz_0 = primBuffer.data(d1off + 6 * idx + 5);

            auto dy_xx_0 = primBuffer.data(d1off + 6 * bdim + 6 * idx);

            auto dy_xy_0 = primBuffer.data(d1off + 6 * bdim + 6 * idx + 1);

            auto dy_xz_0 = primBuffer.data(d1off + 6 * bdim + 6 * idx + 2);

            auto dy_yy_0 = primBuffer.data(d1off + 6 * bdim + 6 * idx + 3);

            auto dy_yz_0 = primBuffer.data(d1off + 6 * bdim + 6 * idx + 4);

            auto dy_zz_0 = primBuffer.data(d1off + 6 * bdim + 6 * idx + 5);

            auto dz_xx_0 = primBuffer.data(d1off + 12 * bdim + 6 * idx);

            auto dz_xy_0 = primBuffer.data(d1off + 12 * bdim + 6 * idx + 1);

            auto dz_xz_0 = primBuffer.data(d1off + 12 * bdim + 6 * idx + 2);

            auto dz_yy_0 = primBuffer.data(d1off + 12 * bdim + 6 * idx + 3);

            auto dz_yz_0 = primBuffer.data(d1off + 12 * bdim + 6 * idx + 4);

            auto dz_zz_0 = primBuffer.data(d1off + 12 * bdim + 6 * idx + 5);

            // set up pointers to (P|M|S) integrals

            auto dx_x_0 = primBuffer.data(d2off + 3 * idx);

            auto dx_y_0 = primBuffer.data(d2off + 3 * idx + 1);

            auto dx_z_0 = primBuffer.data(d2off + 3 * idx + 2);

            auto dy_x_0 = primBuffer.data(d2off + 3 * bdim + 3 * idx);

            auto dy_y_0 = primBuffer.data(d2off + 3 * bdim + 3 * idx + 1);

            auto dy_z_0 = primBuffer.data(d2off + 3 * bdim + 3 * idx + 2);

            auto dz_x_0 = primBuffer.data(d2off + 6 * bdim + 3 * idx);

            auto dz_y_0 = primBuffer.data(d2off + 6 * bdim + 3 * idx + 1);

            auto dz_z_0 = primBuffer.data(d2off + 6 * bdim + 3 * idx + 2);

            // set up pointers to (D|S) integrals

            auto s_xx_0 = primBuffer.data(soff + 6 * idx);

            auto s_xy_0 = primBuffer.data(soff + 6 * idx + 1);

            auto s_xz_0 = primBuffer.data(soff + 6 * idx + 2);

            auto s_yy_0 = primBuffer.data(soff + 6 * idx + 3);

            auto s_yz_0 = primBuffer.data(soff + 6 * idx + 4);

            auto s_zz_0 = primBuffer.data(soff + 6 * idx + 5);

            // set up pointers to (P|S) integrals

            auto s_x_0 = primBuffer.data(s1off + 3 * idx);

            auto s_y_0 = primBuffer.data(s1off + 3 * idx + 1);

            auto s_z_0 = primBuffer.data(s1off + 3 * idx + 2);

            // set up pointers to (S|S) integrals

            auto s_0_0 = primBuffer.data(s2off + idx);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxx_0, dx_xxy_0, dx_xxz_0,\
                                     dx_xyy_0, dx_xyz_0, dx_xzz_0, dx_yyy_0, dx_yyz_0,\
                                     dx_yzz_0, dx_zzz_0, dy_xxx_0, dy_xxy_0, dy_xxz_0,\
                                     dy_xyy_0, dy_xyz_0, dy_xzz_0, dy_yyy_0, dy_yyz_0,\
                                     dy_yzz_0, dy_zzz_0, dz_xxx_0, dz_xxy_0, dz_xxz_0,\
                                     dz_xyy_0, dz_xyz_0, dz_xzz_0, dz_yyy_0, dz_yyz_0,\
                                     dz_yzz_0, dz_zzz_0, dx_xx_0, dx_xy_0, dx_xz_0,\
                                     dx_yy_0, dx_yz_0, dx_zz_0, dy_xx_0, dy_xy_0,\
                                     dy_xz_0, dy_yy_0, dy_yz_0, dy_zz_0, dz_xx_0,\
                                     dz_xy_0, dz_xz_0, dz_yy_0, dz_yz_0, dz_zz_0,\
                                     dx_x_0, dx_y_0, dx_z_0, dy_x_0, dy_y_0, dy_z_0,\
                                     dz_x_0, dz_y_0, dz_z_0, s_xx_0, s_xy_0, s_xz_0,\
                                     s_yy_0, s_yz_0, s_zz_0, s_x_0, s_y_0, s_z_0,\
                                     s_0_0: VLX_ALIGN)
             for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xx_0[j] = fr * s_x_0[j] + f2t * s_0_0[j];

                s_xy_0[j] = fr * s_y_0[j];

                s_xz_0[j] = fr * s_z_0[j];

                // leading y component

                fr = pay[j];

                s_yy_0[j] = fr * s_y_0[j] + f2t * s_0_0[j];

                s_yz_0[j] = fr * s_z_0[j];

                // leading z component

                s_zz_0[j] = paz[j] * s_z_0[j] + f2t * s_0_0[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxx_0[j] = fr * dx_xx_0[j] + f2t * (2.0 * dx_x_0[j] + s_xx_0[j]);

                dy_xxx_0[j] = fr * dy_xx_0[j] + f2t * 2.0 * dy_x_0[j];

                dz_xxx_0[j] = fr * dz_xx_0[j] + f2t * 2.0 * dz_x_0[j];

                dx_xxy_0[j] = fr * dx_xy_0[j] + f2t * (dx_y_0[j] + s_xy_0[j]);

                dy_xxy_0[j] = fr * dy_xy_0[j] + f2t * dy_y_0[j];

                dz_xxy_0[j] = fr * dz_xy_0[j] + f2t * dz_y_0[j];

                dx_xxz_0[j] = fr * dx_xz_0[j] + f2t * (dx_z_0[j] + s_xz_0[j]);

                dy_xxz_0[j] = fr * dy_xz_0[j] + f2t * dy_z_0[j];

                dz_xxz_0[j] = fr * dz_xz_0[j] + f2t * dz_z_0[j];

                dx_xyy_0[j] = fr * dx_yy_0[j] + f2t * s_yy_0[j];

                dy_xyy_0[j] = fr * dy_yy_0[j];

                dz_xyy_0[j] = fr * dz_yy_0[j];

                dx_xyz_0[j] = fr * dx_yz_0[j] + f2t * s_yz_0[j];

                dy_xyz_0[j] = fr * dy_yz_0[j];

                dz_xyz_0[j] = fr * dz_yz_0[j];

                dx_xzz_0[j] = fr * dx_zz_0[j] + f2t * s_zz_0[j];

                dy_xzz_0[j] = fr * dy_zz_0[j];

                dz_xzz_0[j] = fr * dz_zz_0[j];

                // leading y component

                fr = pay[j];

                dx_yyy_0[j] = fr * dx_yy_0[j] + f2t * 2.0 * dx_y_0[j];

                dy_yyy_0[j] = fr * dy_yy_0[j] + f2t * (2.0 * dy_y_0[j] + s_yy_0[j]);

                dz_yyy_0[j] = fr * dz_yy_0[j] + f2t * 2.0 * dz_y_0[j];

                dx_yyz_0[j] = fr * dx_yz_0[j] + f2t * dx_z_0[j];

                dy_yyz_0[j] = fr * dy_yz_0[j] + f2t * (dy_z_0[j] + s_yz_0[j]);

                dz_yyz_0[j] = fr * dz_yz_0[j] + f2t * dz_z_0[j];

                dx_yzz_0[j] = fr * dx_zz_0[j];

                dy_yzz_0[j] = fr * dy_zz_0[j] + f2t * s_zz_0[j];

                dz_yzz_0[j] = fr * dz_zz_0[j];

                // leading z component

                fr = paz[j];

                dx_zzz_0[j] = fr * dx_zz_0[j] + f2t * 2.0 * dx_z_0[j];

                dy_zzz_0[j] = fr * dy_zz_0[j] + f2t * 2.0 * dy_z_0[j];

                dz_zzz_0[j] = fr * dz_zz_0[j] + f2t * (2.0 * dz_z_0[j] + s_zz_0[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForDD(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {2, 2, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {2, 2, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (D|M|D) integrals

            auto dx_xx_xx = primBuffer.data(doff + 36 * idx);

            auto dx_xx_xy = primBuffer.data(doff + 36 * idx + 1);

            auto dx_xx_xz = primBuffer.data(doff + 36 * idx + 2);

            auto dx_xx_yy = primBuffer.data(doff + 36 * idx + 3);

            auto dx_xx_yz = primBuffer.data(doff + 36 * idx + 4);

            auto dx_xx_zz = primBuffer.data(doff + 36 * idx + 5);

            auto dx_xy_xx = primBuffer.data(doff + 36 * idx + 6);

            auto dx_xy_xy = primBuffer.data(doff + 36 * idx + 7);

            auto dx_xy_xz = primBuffer.data(doff + 36 * idx + 8);

            auto dx_xy_yy = primBuffer.data(doff + 36 * idx + 9);

            auto dx_xy_yz = primBuffer.data(doff + 36 * idx + 10);

            auto dx_xy_zz = primBuffer.data(doff + 36 * idx + 11);

            auto dx_xz_xx = primBuffer.data(doff + 36 * idx + 12);

            auto dx_xz_xy = primBuffer.data(doff + 36 * idx + 13);

            auto dx_xz_xz = primBuffer.data(doff + 36 * idx + 14);

            auto dx_xz_yy = primBuffer.data(doff + 36 * idx + 15);

            auto dx_xz_yz = primBuffer.data(doff + 36 * idx + 16);

            auto dx_xz_zz = primBuffer.data(doff + 36 * idx + 17);

            auto dx_yy_xx = primBuffer.data(doff + 36 * idx + 18);

            auto dx_yy_xy = primBuffer.data(doff + 36 * idx + 19);

            auto dx_yy_xz = primBuffer.data(doff + 36 * idx + 20);

            auto dx_yy_yy = primBuffer.data(doff + 36 * idx + 21);

            auto dx_yy_yz = primBuffer.data(doff + 36 * idx + 22);

            auto dx_yy_zz = primBuffer.data(doff + 36 * idx + 23);

            auto dx_yz_xx = primBuffer.data(doff + 36 * idx + 24);

            auto dx_yz_xy = primBuffer.data(doff + 36 * idx + 25);

            auto dx_yz_xz = primBuffer.data(doff + 36 * idx + 26);

            auto dx_yz_yy = primBuffer.data(doff + 36 * idx + 27);

            auto dx_yz_yz = primBuffer.data(doff + 36 * idx + 28);

            auto dx_yz_zz = primBuffer.data(doff + 36 * idx + 29);

            auto dx_zz_xx = primBuffer.data(doff + 36 * idx + 30);

            auto dx_zz_xy = primBuffer.data(doff + 36 * idx + 31);

            auto dx_zz_xz = primBuffer.data(doff + 36 * idx + 32);

            auto dx_zz_yy = primBuffer.data(doff + 36 * idx + 33);

            auto dx_zz_yz = primBuffer.data(doff + 36 * idx + 34);

            auto dx_zz_zz = primBuffer.data(doff + 36 * idx + 35);

            auto dy_xx_xx = primBuffer.data(doff + 36 * bdim + 36 * idx);

            auto dy_xx_xy = primBuffer.data(doff + 36 * bdim + 36 * idx + 1);

            auto dy_xx_xz = primBuffer.data(doff + 36 * bdim + 36 * idx + 2);

            auto dy_xx_yy = primBuffer.data(doff + 36 * bdim + 36 * idx + 3);

            auto dy_xx_yz = primBuffer.data(doff + 36 * bdim + 36 * idx + 4);

            auto dy_xx_zz = primBuffer.data(doff + 36 * bdim + 36 * idx + 5);

            auto dy_xy_xx = primBuffer.data(doff + 36 * bdim + 36 * idx + 6);

            auto dy_xy_xy = primBuffer.data(doff + 36 * bdim + 36 * idx + 7);

            auto dy_xy_xz = primBuffer.data(doff + 36 * bdim + 36 * idx + 8);

            auto dy_xy_yy = primBuffer.data(doff + 36 * bdim + 36 * idx + 9);

            auto dy_xy_yz = primBuffer.data(doff + 36 * bdim + 36 * idx + 10);

            auto dy_xy_zz = primBuffer.data(doff + 36 * bdim + 36 * idx + 11);

            auto dy_xz_xx = primBuffer.data(doff + 36 * bdim + 36 * idx + 12);

            auto dy_xz_xy = primBuffer.data(doff + 36 * bdim + 36 * idx + 13);

            auto dy_xz_xz = primBuffer.data(doff + 36 * bdim + 36 * idx + 14);

            auto dy_xz_yy = primBuffer.data(doff + 36 * bdim + 36 * idx + 15);

            auto dy_xz_yz = primBuffer.data(doff + 36 * bdim + 36 * idx + 16);

            auto dy_xz_zz = primBuffer.data(doff + 36 * bdim + 36 * idx + 17);

            auto dy_yy_xx = primBuffer.data(doff + 36 * bdim + 36 * idx + 18);

            auto dy_yy_xy = primBuffer.data(doff + 36 * bdim + 36 * idx + 19);

            auto dy_yy_xz = primBuffer.data(doff + 36 * bdim + 36 * idx + 20);

            auto dy_yy_yy = primBuffer.data(doff + 36 * bdim + 36 * idx + 21);

            auto dy_yy_yz = primBuffer.data(doff + 36 * bdim + 36 * idx + 22);

            auto dy_yy_zz = primBuffer.data(doff + 36 * bdim + 36 * idx + 23);

            auto dy_yz_xx = primBuffer.data(doff + 36 * bdim + 36 * idx + 24);

            auto dy_yz_xy = primBuffer.data(doff + 36 * bdim + 36 * idx + 25);

            auto dy_yz_xz = primBuffer.data(doff + 36 * bdim + 36 * idx + 26);

            auto dy_yz_yy = primBuffer.data(doff + 36 * bdim + 36 * idx + 27);

            auto dy_yz_yz = primBuffer.data(doff + 36 * bdim + 36 * idx + 28);

            auto dy_yz_zz = primBuffer.data(doff + 36 * bdim + 36 * idx + 29);

            auto dy_zz_xx = primBuffer.data(doff + 36 * bdim + 36 * idx + 30);

            auto dy_zz_xy = primBuffer.data(doff + 36 * bdim + 36 * idx + 31);

            auto dy_zz_xz = primBuffer.data(doff + 36 * bdim + 36 * idx + 32);

            auto dy_zz_yy = primBuffer.data(doff + 36 * bdim + 36 * idx + 33);

            auto dy_zz_yz = primBuffer.data(doff + 36 * bdim + 36 * idx + 34);

            auto dy_zz_zz = primBuffer.data(doff + 36 * bdim + 36 * idx + 35);

            auto dz_xx_xx = primBuffer.data(doff + 72 * bdim + 36 * idx);

            auto dz_xx_xy = primBuffer.data(doff + 72 * bdim + 36 * idx + 1);

            auto dz_xx_xz = primBuffer.data(doff + 72 * bdim + 36 * idx + 2);

            auto dz_xx_yy = primBuffer.data(doff + 72 * bdim + 36 * idx + 3);

            auto dz_xx_yz = primBuffer.data(doff + 72 * bdim + 36 * idx + 4);

            auto dz_xx_zz = primBuffer.data(doff + 72 * bdim + 36 * idx + 5);

            auto dz_xy_xx = primBuffer.data(doff + 72 * bdim + 36 * idx + 6);

            auto dz_xy_xy = primBuffer.data(doff + 72 * bdim + 36 * idx + 7);

            auto dz_xy_xz = primBuffer.data(doff + 72 * bdim + 36 * idx + 8);

            auto dz_xy_yy = primBuffer.data(doff + 72 * bdim + 36 * idx + 9);

            auto dz_xy_yz = primBuffer.data(doff + 72 * bdim + 36 * idx + 10);

            auto dz_xy_zz = primBuffer.data(doff + 72 * bdim + 36 * idx + 11);

            auto dz_xz_xx = primBuffer.data(doff + 72 * bdim + 36 * idx + 12);

            auto dz_xz_xy = primBuffer.data(doff + 72 * bdim + 36 * idx + 13);

            auto dz_xz_xz = primBuffer.data(doff + 72 * bdim + 36 * idx + 14);

            auto dz_xz_yy = primBuffer.data(doff + 72 * bdim + 36 * idx + 15);

            auto dz_xz_yz = primBuffer.data(doff + 72 * bdim + 36 * idx + 16);

            auto dz_xz_zz = primBuffer.data(doff + 72 * bdim + 36 * idx + 17);

            auto dz_yy_xx = primBuffer.data(doff + 72 * bdim + 36 * idx + 18);

            auto dz_yy_xy = primBuffer.data(doff + 72 * bdim + 36 * idx + 19);

            auto dz_yy_xz = primBuffer.data(doff + 72 * bdim + 36 * idx + 20);

            auto dz_yy_yy = primBuffer.data(doff + 72 * bdim + 36 * idx + 21);

            auto dz_yy_yz = primBuffer.data(doff + 72 * bdim + 36 * idx + 22);

            auto dz_yy_zz = primBuffer.data(doff + 72 * bdim + 36 * idx + 23);

            auto dz_yz_xx = primBuffer.data(doff + 72 * bdim + 36 * idx + 24);

            auto dz_yz_xy = primBuffer.data(doff + 72 * bdim + 36 * idx + 25);

            auto dz_yz_xz = primBuffer.data(doff + 72 * bdim + 36 * idx + 26);

            auto dz_yz_yy = primBuffer.data(doff + 72 * bdim + 36 * idx + 27);

            auto dz_yz_yz = primBuffer.data(doff + 72 * bdim + 36 * idx + 28);

            auto dz_yz_zz = primBuffer.data(doff + 72 * bdim + 36 * idx + 29);

            auto dz_zz_xx = primBuffer.data(doff + 72 * bdim + 36 * idx + 30);

            auto dz_zz_xy = primBuffer.data(doff + 72 * bdim + 36 * idx + 31);

            auto dz_zz_xz = primBuffer.data(doff + 72 * bdim + 36 * idx + 32);

            auto dz_zz_yy = primBuffer.data(doff + 72 * bdim + 36 * idx + 33);

            auto dz_zz_yz = primBuffer.data(doff + 72 * bdim + 36 * idx + 34);

            auto dz_zz_zz = primBuffer.data(doff + 72 * bdim + 36 * idx + 35);

            // set up pointers to (P|M|D) integrals

            auto dx_x_xx = primBuffer.data(d1off + 18 * idx);

            auto dx_x_xy = primBuffer.data(d1off + 18 * idx + 1);

            auto dx_x_xz = primBuffer.data(d1off + 18 * idx + 2);

            auto dx_x_yy = primBuffer.data(d1off + 18 * idx + 3);

            auto dx_x_yz = primBuffer.data(d1off + 18 * idx + 4);

            auto dx_x_zz = primBuffer.data(d1off + 18 * idx + 5);

            auto dx_y_xx = primBuffer.data(d1off + 18 * idx + 6);

            auto dx_y_xy = primBuffer.data(d1off + 18 * idx + 7);

            auto dx_y_xz = primBuffer.data(d1off + 18 * idx + 8);

            auto dx_y_yy = primBuffer.data(d1off + 18 * idx + 9);

            auto dx_y_yz = primBuffer.data(d1off + 18 * idx + 10);

            auto dx_y_zz = primBuffer.data(d1off + 18 * idx + 11);

            auto dx_z_xx = primBuffer.data(d1off + 18 * idx + 12);

            auto dx_z_xy = primBuffer.data(d1off + 18 * idx + 13);

            auto dx_z_xz = primBuffer.data(d1off + 18 * idx + 14);

            auto dx_z_yy = primBuffer.data(d1off + 18 * idx + 15);

            auto dx_z_yz = primBuffer.data(d1off + 18 * idx + 16);

            auto dx_z_zz = primBuffer.data(d1off + 18 * idx + 17);

            auto dy_x_xx = primBuffer.data(d1off + 18 * bdim + 18 * idx);

            auto dy_x_xy = primBuffer.data(d1off + 18 * bdim + 18 * idx + 1);

            auto dy_x_xz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 2);

            auto dy_x_yy = primBuffer.data(d1off + 18 * bdim + 18 * idx + 3);

            auto dy_x_yz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 4);

            auto dy_x_zz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 5);

            auto dy_y_xx = primBuffer.data(d1off + 18 * bdim + 18 * idx + 6);

            auto dy_y_xy = primBuffer.data(d1off + 18 * bdim + 18 * idx + 7);

            auto dy_y_xz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 8);

            auto dy_y_yy = primBuffer.data(d1off + 18 * bdim + 18 * idx + 9);

            auto dy_y_yz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 10);

            auto dy_y_zz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 11);

            auto dy_z_xx = primBuffer.data(d1off + 18 * bdim + 18 * idx + 12);

            auto dy_z_xy = primBuffer.data(d1off + 18 * bdim + 18 * idx + 13);

            auto dy_z_xz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 14);

            auto dy_z_yy = primBuffer.data(d1off + 18 * bdim + 18 * idx + 15);

            auto dy_z_yz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 16);

            auto dy_z_zz = primBuffer.data(d1off + 18 * bdim + 18 * idx + 17);

            auto dz_x_xx = primBuffer.data(d1off + 36 * bdim + 18 * idx);

            auto dz_x_xy = primBuffer.data(d1off + 36 * bdim + 18 * idx + 1);

            auto dz_x_xz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 2);

            auto dz_x_yy = primBuffer.data(d1off + 36 * bdim + 18 * idx + 3);

            auto dz_x_yz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 4);

            auto dz_x_zz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 5);

            auto dz_y_xx = primBuffer.data(d1off + 36 * bdim + 18 * idx + 6);

            auto dz_y_xy = primBuffer.data(d1off + 36 * bdim + 18 * idx + 7);

            auto dz_y_xz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 8);

            auto dz_y_yy = primBuffer.data(d1off + 36 * bdim + 18 * idx + 9);

            auto dz_y_yz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 10);

            auto dz_y_zz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 11);

            auto dz_z_xx = primBuffer.data(d1off + 36 * bdim + 18 * idx + 12);

            auto dz_z_xy = primBuffer.data(d1off + 36 * bdim + 18 * idx + 13);

            auto dz_z_xz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 14);

            auto dz_z_yy = primBuffer.data(d1off + 36 * bdim + 18 * idx + 15);

            auto dz_z_yz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 16);

            auto dz_z_zz = primBuffer.data(d1off + 36 * bdim + 18 * idx + 17);

            // set up pointers to (S|M|D) integrals

            auto dx_0_xx = primBuffer.data(d2off + 6 * idx);

            auto dx_0_xy = primBuffer.data(d2off + 6 * idx + 1);

            auto dx_0_xz = primBuffer.data(d2off + 6 * idx + 2);

            auto dx_0_yy = primBuffer.data(d2off + 6 * idx + 3);

            auto dx_0_yz = primBuffer.data(d2off + 6 * idx + 4);

            auto dx_0_zz = primBuffer.data(d2off + 6 * idx + 5);

            auto dy_0_xx = primBuffer.data(d2off + 6 * bdim + 6 * idx);

            auto dy_0_xy = primBuffer.data(d2off + 6 * bdim + 6 * idx + 1);

            auto dy_0_xz = primBuffer.data(d2off + 6 * bdim + 6 * idx + 2);

            auto dy_0_yy = primBuffer.data(d2off + 6 * bdim + 6 * idx + 3);

            auto dy_0_yz = primBuffer.data(d2off + 6 * bdim + 6 * idx + 4);

            auto dy_0_zz = primBuffer.data(d2off + 6 * bdim + 6 * idx + 5);

            auto dz_0_xx = primBuffer.data(d2off + 12 * bdim + 6 * idx);

            auto dz_0_xy = primBuffer.data(d2off + 12 * bdim + 6 * idx + 1);

            auto dz_0_xz = primBuffer.data(d2off + 12 * bdim + 6 * idx + 2);

            auto dz_0_yy = primBuffer.data(d2off + 12 * bdim + 6 * idx + 3);

            auto dz_0_yz = primBuffer.data(d2off + 12 * bdim + 6 * idx + 4);

            auto dz_0_zz = primBuffer.data(d2off + 12 * bdim + 6 * idx + 5);

            // set up pointers to (P|M|P) integrals

            auto dx_x_x = primBuffer.data(dkoff + 9 * idx);

            auto dx_x_y = primBuffer.data(dkoff + 9 * idx + 1);

            auto dx_x_z = primBuffer.data(dkoff + 9 * idx + 2);

            auto dx_y_x = primBuffer.data(dkoff + 9 * idx + 3);

            auto dx_y_y = primBuffer.data(dkoff + 9 * idx + 4);

            auto dx_y_z = primBuffer.data(dkoff + 9 * idx + 5);

            auto dx_z_x = primBuffer.data(dkoff + 9 * idx + 6);

            auto dx_z_y = primBuffer.data(dkoff + 9 * idx + 7);

            auto dx_z_z = primBuffer.data(dkoff + 9 * idx + 8);

            auto dy_x_x = primBuffer.data(dkoff + 9 * bdim + 9 * idx);

            auto dy_x_y = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 1);

            auto dy_x_z = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 2);

            auto dy_y_x = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 3);

            auto dy_y_y = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 4);

            auto dy_y_z = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 5);

            auto dy_z_x = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 6);

            auto dy_z_y = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 7);

            auto dy_z_z = primBuffer.data(dkoff + 9 * bdim + 9 * idx + 8);

            auto dz_x_x = primBuffer.data(dkoff + 18 * bdim + 9 * idx);

            auto dz_x_y = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 1);

            auto dz_x_z = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 2);

            auto dz_y_x = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 3);

            auto dz_y_y = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 4);

            auto dz_y_z = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 5);

            auto dz_z_x = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 6);

            auto dz_z_y = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 7);

            auto dz_z_z = primBuffer.data(dkoff + 18 * bdim + 9 * idx + 8);

            // set up pointers to (P|D) integrals

            auto s_x_xx = primBuffer.data(soff + 18 * idx);

            auto s_x_xy = primBuffer.data(soff + 18 * idx + 1);

            auto s_x_xz = primBuffer.data(soff + 18 * idx + 2);

            auto s_x_yy = primBuffer.data(soff + 18 * idx + 3);

            auto s_x_yz = primBuffer.data(soff + 18 * idx + 4);

            auto s_x_zz = primBuffer.data(soff + 18 * idx + 5);

            auto s_y_xx = primBuffer.data(soff + 18 * idx + 6);

            auto s_y_xy = primBuffer.data(soff + 18 * idx + 7);

            auto s_y_xz = primBuffer.data(soff + 18 * idx + 8);

            auto s_y_yy = primBuffer.data(soff + 18 * idx + 9);

            auto s_y_yz = primBuffer.data(soff + 18 * idx + 10);

            auto s_y_zz = primBuffer.data(soff + 18 * idx + 11);

            auto s_z_xx = primBuffer.data(soff + 18 * idx + 12);

            auto s_z_xy = primBuffer.data(soff + 18 * idx + 13);

            auto s_z_xz = primBuffer.data(soff + 18 * idx + 14);

            auto s_z_yy = primBuffer.data(soff + 18 * idx + 15);

            auto s_z_yz = primBuffer.data(soff + 18 * idx + 16);

            auto s_z_zz = primBuffer.data(soff + 18 * idx + 17);

            // set up pointers to (S|D) integrals

            auto s_0_xx = primBuffer.data(s1off + 6 * idx);

            auto s_0_xy = primBuffer.data(s1off + 6 * idx + 1);

            auto s_0_xz = primBuffer.data(s1off + 6 * idx + 2);

            auto s_0_yy = primBuffer.data(s1off + 6 * idx + 3);

            auto s_0_yz = primBuffer.data(s1off + 6 * idx + 4);

            auto s_0_zz = primBuffer.data(s1off + 6 * idx + 5);

            // set up pointers to (S|P) integrals

            auto s_0_x = primBuffer.data(skoff + 3 * idx);

            auto s_0_y = primBuffer.data(skoff + 3 * idx + 1);

            auto s_0_z = primBuffer.data(skoff + 3 * idx + 2);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xx_xx, dx_xx_xy, dx_xx_xz,\
                                     dx_xx_yy, dx_xx_yz, dx_xx_zz, dx_xy_xx, dx_xy_xy,\
                                     dx_xy_xz, dx_xy_yy, dx_xy_yz, dx_xy_zz, dx_xz_xx,\
                                     dx_xz_xy, dx_xz_xz, dx_xz_yy, dx_xz_yz, dx_xz_zz,\
                                     dx_yy_xx, dx_yy_xy, dx_yy_xz, dx_yy_yy, dx_yy_yz,\
                                     dx_yy_zz, dx_yz_xx, dx_yz_xy, dx_yz_xz, dx_yz_yy,\
                                     dx_yz_yz, dx_yz_zz, dx_zz_xx, dx_zz_xy, dx_zz_xz,\
                                     dx_zz_yy, dx_zz_yz, dx_zz_zz, dy_xx_xx, dy_xx_xy,\
                                     dy_xx_xz, dy_xx_yy, dy_xx_yz, dy_xx_zz, dy_xy_xx,\
                                     dy_xy_xy, dy_xy_xz, dy_xy_yy, dy_xy_yz, dy_xy_zz,\
                                     dy_xz_xx, dy_xz_xy, dy_xz_xz, dy_xz_yy, dy_xz_yz,\
                                     dy_xz_zz, dy_yy_xx, dy_yy_xy, dy_yy_xz, dy_yy_yy,\
                                     dy_yy_yz, dy_yy_zz, dy_yz_xx, dy_yz_xy, dy_yz_xz,\
                                     dy_yz_yy, dy_yz_yz, dy_yz_zz, dy_zz_xx, dy_zz_xy,\
                                     dy_zz_xz, dy_zz_yy, dy_zz_yz, dy_zz_zz, dz_xx_xx,\
                                     dz_xx_xy, dz_xx_xz, dz_xx_yy, dz_xx_yz, dz_xx_zz,\
                                     dz_xy_xx, dz_xy_xy, dz_xy_xz, dz_xy_yy, dz_xy_yz,\
                                     dz_xy_zz, dz_xz_xx, dz_xz_xy, dz_xz_xz, dz_xz_yy,\
                                     dz_xz_yz, dz_xz_zz, dz_yy_xx, dz_yy_xy, dz_yy_xz,\
                                     dz_yy_yy, dz_yy_yz, dz_yy_zz, dz_yz_xx, dz_yz_xy,\
                                     dz_yz_xz, dz_yz_yy, dz_yz_yz, dz_yz_zz, dz_zz_xx,\
                                     dz_zz_xy, dz_zz_xz, dz_zz_yy, dz_zz_yz, dz_zz_zz,\
                                     dx_x_xx, dx_x_xy, dx_x_xz, dx_x_yy, dx_x_yz,\
                                     dx_x_zz, dx_y_xx, dx_y_xy, dx_y_xz, dx_y_yy,\
                                     dx_y_yz, dx_y_zz, dx_z_xx, dx_z_xy, dx_z_xz,\
                                     dx_z_yy, dx_z_yz, dx_z_zz, dy_x_xx, dy_x_xy,\
                                     dy_x_xz, dy_x_yy, dy_x_yz, dy_x_zz, dy_y_xx,\
                                     dy_y_xy, dy_y_xz, dy_y_yy, dy_y_yz, dy_y_zz,\
                                     dy_z_xx, dy_z_xy, dy_z_xz, dy_z_yy, dy_z_yz,\
                                     dy_z_zz, dz_x_xx, dz_x_xy, dz_x_xz, dz_x_yy,\
                                     dz_x_yz, dz_x_zz, dz_y_xx, dz_y_xy, dz_y_xz,\
                                     dz_y_yy, dz_y_yz, dz_y_zz, dz_z_xx, dz_z_xy,\
                                     dz_z_xz, dz_z_yy, dz_z_yz, dz_z_zz, dx_0_xx,\
                                     dx_0_xy, dx_0_xz, dx_0_yy, dx_0_yz, dx_0_zz,\
                                     dy_0_xx, dy_0_xy, dy_0_xz, dy_0_yy, dy_0_yz,\
                                     dy_0_zz, dz_0_xx, dz_0_xy, dz_0_xz, dz_0_yy,\
                                     dz_0_yz, dz_0_zz, dx_x_x, dx_x_y, dx_x_z,\
                                     dx_y_x, dx_y_y, dx_y_z, dx_z_x, dx_z_y, dx_z_z,\
                                     dy_x_x, dy_x_y, dy_x_z, dy_y_x, dy_y_y, dy_y_z,\
                                     dy_z_x, dy_z_y, dy_z_z, dz_x_x, dz_x_y, dz_x_z,\
                                     dz_y_x, dz_y_y, dz_y_z, dz_z_x, dz_z_y, dz_z_z,\
                                     s_x_xx, s_x_xy, s_x_xz, s_x_yy, s_x_yz, s_x_zz,\
                                     s_y_xx, s_y_xy, s_y_xz, s_y_yy, s_y_yz, s_y_zz,\
                                     s_z_xx, s_z_xy, s_z_xz, s_z_yy, s_z_yz, s_z_zz,\
                                     s_0_xx, s_0_xy, s_0_xz, s_0_yy, s_0_yz, s_0_zz,\
                                     s_0_x, s_0_y, s_0_z: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_x_xx[j] = fr * s_0_xx[j] + f2t * 2.0 * s_0_x[j];

                s_x_xy[j] = fr * s_0_xy[j] + f2t * s_0_y[j];

                s_x_xz[j] = fr * s_0_xz[j] + f2t * s_0_z[j];

                s_x_yy[j] = fr * s_0_yy[j];

                s_x_yz[j] = fr * s_0_yz[j];

                s_x_zz[j] = fr * s_0_zz[j];

                // leading y component

                fr = pay[j];

                s_y_xx[j] = fr * s_0_xx[j];

                s_y_xy[j] = fr * s_0_xy[j] + f2t * s_0_x[j];

                s_y_xz[j] = fr * s_0_xz[j];

                s_y_yy[j] = fr * s_0_yy[j] + f2t * 2.0 * s_0_y[j];

                s_y_yz[j] = fr * s_0_yz[j] + f2t * s_0_z[j];

                s_y_zz[j] = fr * s_0_zz[j];

                // leading z component

                fr = paz[j];

                s_z_xx[j] = fr * s_0_xx[j];

                s_z_xy[j] = fr * s_0_xy[j];

                s_z_xz[j] = fr * s_0_xz[j] + f2t * s_0_x[j];

                s_z_yy[j] = fr * s_0_yy[j];

                s_z_yz[j] = fr * s_0_yz[j] + f2t * s_0_y[j];

                s_z_zz[j] = fr * s_0_zz[j] + f2t * 2.0 * s_0_z[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xx_xx[j] = fr * dx_x_xx[j] + f2t * (dx_0_xx[j] + 2.0 * dx_x_x[j] + s_x_xx[j]);

                dy_xx_xx[j] = fr * dy_x_xx[j] + f2t * (dy_0_xx[j] + 2.0 * dy_x_x[j]);

                dz_xx_xx[j] = fr * dz_x_xx[j] + f2t * (dz_0_xx[j] + 2.0 * dz_x_x[j]);

                dx_xx_xy[j] = fr * dx_x_xy[j] + f2t * (dx_0_xy[j] + dx_x_y[j] + s_x_xy[j]);

                dy_xx_xy[j] = fr * dy_x_xy[j] + f2t * (dy_0_xy[j] + dy_x_y[j]);

                dz_xx_xy[j] = fr * dz_x_xy[j] + f2t * (dz_0_xy[j] + dz_x_y[j]);

                dx_xx_xz[j] = fr * dx_x_xz[j] + f2t * (dx_0_xz[j] + dx_x_z[j] + s_x_xz[j]);

                dy_xx_xz[j] = fr * dy_x_xz[j] + f2t * (dy_0_xz[j] + dy_x_z[j]);

                dz_xx_xz[j] = fr * dz_x_xz[j] + f2t * (dz_0_xz[j] + dz_x_z[j]);

                dx_xx_yy[j] = fr * dx_x_yy[j] + f2t * (dx_0_yy[j] + s_x_yy[j]);

                dy_xx_yy[j] = fr * dy_x_yy[j] + f2t * dy_0_yy[j];

                dz_xx_yy[j] = fr * dz_x_yy[j] + f2t * dz_0_yy[j];

                dx_xx_yz[j] = fr * dx_x_yz[j] + f2t * (dx_0_yz[j] + s_x_yz[j]);

                dy_xx_yz[j] = fr * dy_x_yz[j] + f2t * dy_0_yz[j];

                dz_xx_yz[j] = fr * dz_x_yz[j] + f2t * dz_0_yz[j];

                dx_xx_zz[j] = fr * dx_x_zz[j] + f2t * (dx_0_zz[j] + s_x_zz[j]);

                dy_xx_zz[j] = fr * dy_x_zz[j] + f2t * dy_0_zz[j];

                dz_xx_zz[j] = fr * dz_x_zz[j] + f2t * dz_0_zz[j];

                dx_xy_xx[j] = fr * dx_y_xx[j] + f2t * (2.0 * dx_y_x[j] + s_y_xx[j]);

                dy_xy_xx[j] = fr * dy_y_xx[j] + f2t * 2.0 * dy_y_x[j];

                dz_xy_xx[j] = fr * dz_y_xx[j] + f2t * 2.0 * dz_y_x[j];

                dx_xy_xy[j] = fr * dx_y_xy[j] + f2t * (dx_y_y[j] + s_y_xy[j]);

                dy_xy_xy[j] = fr * dy_y_xy[j] + f2t * dy_y_y[j];

                dz_xy_xy[j] = fr * dz_y_xy[j] + f2t * dz_y_y[j];

                dx_xy_xz[j] = fr * dx_y_xz[j] + f2t * (dx_y_z[j] + s_y_xz[j]);

                dy_xy_xz[j] = fr * dy_y_xz[j] + f2t * dy_y_z[j];

                dz_xy_xz[j] = fr * dz_y_xz[j] + f2t * dz_y_z[j];

                dx_xy_yy[j] = fr * dx_y_yy[j] + f2t * s_y_yy[j];

                dy_xy_yy[j] = fr * dy_y_yy[j];

                dz_xy_yy[j] = fr * dz_y_yy[j];

                dx_xy_yz[j] = fr * dx_y_yz[j] + f2t * s_y_yz[j];

                dy_xy_yz[j] = fr * dy_y_yz[j];

                dz_xy_yz[j] = fr * dz_y_yz[j];

                dx_xy_zz[j] = fr * dx_y_zz[j] + f2t * s_y_zz[j];

                dy_xy_zz[j] = fr * dy_y_zz[j];

                dz_xy_zz[j] = fr * dz_y_zz[j];

                dx_xz_xx[j] = fr * dx_z_xx[j] + f2t * (2.0 * dx_z_x[j] + s_z_xx[j]);

                dy_xz_xx[j] = fr * dy_z_xx[j] + f2t * 2.0 * dy_z_x[j];

                dz_xz_xx[j] = fr * dz_z_xx[j] + f2t * 2.0 * dz_z_x[j];

                dx_xz_xy[j] = fr * dx_z_xy[j] + f2t * (dx_z_y[j] + s_z_xy[j]);

                dy_xz_xy[j] = fr * dy_z_xy[j] + f2t * dy_z_y[j];

                dz_xz_xy[j] = fr * dz_z_xy[j] + f2t * dz_z_y[j];

                dx_xz_xz[j] = fr * dx_z_xz[j] + f2t * (dx_z_z[j] + s_z_xz[j]);

                dy_xz_xz[j] = fr * dy_z_xz[j] + f2t * dy_z_z[j];

                dz_xz_xz[j] = fr * dz_z_xz[j] + f2t * dz_z_z[j];

                dx_xz_yy[j] = fr * dx_z_yy[j] + f2t * s_z_yy[j];

                dy_xz_yy[j] = fr * dy_z_yy[j];

                dz_xz_yy[j] = fr * dz_z_yy[j];

                dx_xz_yz[j] = fr * dx_z_yz[j] + f2t * s_z_yz[j];

                dy_xz_yz[j] = fr * dy_z_yz[j];

                dz_xz_yz[j] = fr * dz_z_yz[j];

                dx_xz_zz[j] = fr * dx_z_zz[j] + f2t * s_z_zz[j];

                dy_xz_zz[j] = fr * dy_z_zz[j];

                dz_xz_zz[j] = fr * dz_z_zz[j];

                // leading y component

                fr = pay[j];

                dx_yy_xx[j] = fr * dx_y_xx[j] + f2t * dx_0_xx[j];

                dy_yy_xx[j] = fr * dy_y_xx[j] + f2t * (dy_0_xx[j] + s_y_xx[j]);

                dz_yy_xx[j] = fr * dz_y_xx[j] + f2t * dz_0_xx[j];

                dx_yy_xy[j] = fr * dx_y_xy[j] + f2t * (dx_0_xy[j] + dx_y_x[j]);

                dy_yy_xy[j] = fr * dy_y_xy[j] + f2t * (dy_0_xy[j] + dy_y_x[j] + s_y_xy[j]);

                dz_yy_xy[j] = fr * dz_y_xy[j] + f2t * (dz_0_xy[j] + dz_y_x[j]);

                dx_yy_xz[j] = fr * dx_y_xz[j] + f2t * dx_0_xz[j];

                dy_yy_xz[j] = fr * dy_y_xz[j] + f2t * (dy_0_xz[j] + s_y_xz[j]);

                dz_yy_xz[j] = fr * dz_y_xz[j] + f2t * dz_0_xz[j];

                dx_yy_yy[j] = fr * dx_y_yy[j] + f2t * (dx_0_yy[j] + 2.0 * dx_y_y[j]);

                dy_yy_yy[j] = fr * dy_y_yy[j] + f2t * (dy_0_yy[j] + 2.0 * dy_y_y[j] + s_y_yy[j]);

                dz_yy_yy[j] = fr * dz_y_yy[j] + f2t * (dz_0_yy[j] + 2.0 * dz_y_y[j]);

                dx_yy_yz[j] = fr * dx_y_yz[j] + f2t * (dx_0_yz[j] + dx_y_z[j]);

                dy_yy_yz[j] = fr * dy_y_yz[j] + f2t * (dy_0_yz[j] + dy_y_z[j] + s_y_yz[j]);

                dz_yy_yz[j] = fr * dz_y_yz[j] + f2t * (dz_0_yz[j] + dz_y_z[j]);

                dx_yy_zz[j] = fr * dx_y_zz[j] + f2t * dx_0_zz[j];

                dy_yy_zz[j] = fr * dy_y_zz[j] + f2t * (dy_0_zz[j] + s_y_zz[j]);

                dz_yy_zz[j] = fr * dz_y_zz[j] + f2t * dz_0_zz[j];

                dx_yz_xx[j] = fr * dx_z_xx[j];

                dy_yz_xx[j] = fr * dy_z_xx[j] + f2t * s_z_xx[j];

                dz_yz_xx[j] = fr * dz_z_xx[j];

                dx_yz_xy[j] = fr * dx_z_xy[j] + f2t * dx_z_x[j];

                dy_yz_xy[j] = fr * dy_z_xy[j] + f2t * (dy_z_x[j] + s_z_xy[j]);

                dz_yz_xy[j] = fr * dz_z_xy[j] + f2t * dz_z_x[j];

                dx_yz_xz[j] = fr * dx_z_xz[j];

                dy_yz_xz[j] = fr * dy_z_xz[j] + f2t * s_z_xz[j];

                dz_yz_xz[j] = fr * dz_z_xz[j];

                dx_yz_yy[j] = fr * dx_z_yy[j] + f2t * 2.0 * dx_z_y[j];

                dy_yz_yy[j] = fr * dy_z_yy[j] + f2t * (2.0 * dy_z_y[j] + s_z_yy[j]);

                dz_yz_yy[j] = fr * dz_z_yy[j] + f2t * 2.0 * dz_z_y[j];

                dx_yz_yz[j] = fr * dx_z_yz[j] + f2t * dx_z_z[j];

                dy_yz_yz[j] = fr * dy_z_yz[j] + f2t * (dy_z_z[j] + s_z_yz[j]);

                dz_yz_yz[j] = fr * dz_z_yz[j] + f2t * dz_z_z[j];

                dx_yz_zz[j] = fr * dx_z_zz[j];

                dy_yz_zz[j] = fr * dy_z_zz[j] + f2t * s_z_zz[j];

                dz_yz_zz[j] = fr * dz_z_zz[j];

                // leading z component

                fr = paz[j];

                dx_zz_xx[j] = fr * dx_z_xx[j] + f2t * dx_0_xx[j];

                dy_zz_xx[j] = fr * dy_z_xx[j] + f2t * dy_0_xx[j];

                dz_zz_xx[j] = fr * dz_z_xx[j] + f2t * (dz_0_xx[j] + s_z_xx[j]);

                dx_zz_xy[j] = fr * dx_z_xy[j] + f2t * dx_0_xy[j];

                dy_zz_xy[j] = fr * dy_z_xy[j] + f2t * dy_0_xy[j];

                dz_zz_xy[j] = fr * dz_z_xy[j] + f2t * (dz_0_xy[j] + s_z_xy[j]);

                dx_zz_xz[j] = fr * dx_z_xz[j] + f2t * (dx_0_xz[j] + dx_z_x[j]);

                dy_zz_xz[j] = fr * dy_z_xz[j] + f2t * (dy_0_xz[j] + dy_z_x[j]);

                dz_zz_xz[j] = fr * dz_z_xz[j] + f2t * (dz_0_xz[j] + dz_z_x[j] + s_z_xz[j]);

                dx_zz_yy[j] = fr * dx_z_yy[j] + f2t * dx_0_yy[j];

                dy_zz_yy[j] = fr * dy_z_yy[j] + f2t * dy_0_yy[j];

                dz_zz_yy[j] = fr * dz_z_yy[j] + f2t * (dz_0_yy[j] + s_z_yy[j]);

                dx_zz_yz[j] = fr * dx_z_yz[j] + f2t * (dx_0_yz[j] + dx_z_y[j]);

                dy_zz_yz[j] = fr * dy_z_yz[j] + f2t * (dy_0_yz[j] + dy_z_y[j]);

                dz_zz_yz[j] = fr * dz_z_yz[j] + f2t * (dz_0_yz[j] + dz_z_y[j] + s_z_yz[j]);

                dx_zz_zz[j] = fr * dx_z_zz[j] + f2t * (dx_0_zz[j] + 2.0 * dx_z_z[j]);

                dy_zz_zz[j] = fr * dy_z_zz[j] + f2t * (dy_0_zz[j] + 2.0 * dy_z_z[j]);

                dz_zz_zz[j] = fr * dz_z_zz[j] + f2t * (dz_0_zz[j] + 2.0 * dz_z_z[j] + s_z_zz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForPF(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {1, 3, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 1});
        
        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});
        
        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);
            
            // set up pointers to distances R(PB)
            
            auto pbx = pbDistances.data(3 * idx);
            
            auto pby = pbDistances.data(3 * idx + 1);
            
            auto pbz = pbDistances.data(3 * idx + 2);

            // set up pointers to (P|M|F) integrals

            auto dx_x_xxx = primBuffer.data(doff + 30 * idx);

            auto dx_x_xxy = primBuffer.data(doff + 30 * idx + 1);

            auto dx_x_xxz = primBuffer.data(doff + 30 * idx + 2);

            auto dx_x_xyy = primBuffer.data(doff + 30 * idx + 3);

            auto dx_x_xyz = primBuffer.data(doff + 30 * idx + 4);

            auto dx_x_xzz = primBuffer.data(doff + 30 * idx + 5);

            auto dx_x_yyy = primBuffer.data(doff + 30 * idx + 6);

            auto dx_x_yyz = primBuffer.data(doff + 30 * idx + 7);

            auto dx_x_yzz = primBuffer.data(doff + 30 * idx + 8);

            auto dx_x_zzz = primBuffer.data(doff + 30 * idx + 9);

            auto dx_y_xxx = primBuffer.data(doff + 30 * idx + 10);

            auto dx_y_xxy = primBuffer.data(doff + 30 * idx + 11);

            auto dx_y_xxz = primBuffer.data(doff + 30 * idx + 12);

            auto dx_y_xyy = primBuffer.data(doff + 30 * idx + 13);

            auto dx_y_xyz = primBuffer.data(doff + 30 * idx + 14);

            auto dx_y_xzz = primBuffer.data(doff + 30 * idx + 15);

            auto dx_y_yyy = primBuffer.data(doff + 30 * idx + 16);

            auto dx_y_yyz = primBuffer.data(doff + 30 * idx + 17);

            auto dx_y_yzz = primBuffer.data(doff + 30 * idx + 18);

            auto dx_y_zzz = primBuffer.data(doff + 30 * idx + 19);

            auto dx_z_xxx = primBuffer.data(doff + 30 * idx + 20);

            auto dx_z_xxy = primBuffer.data(doff + 30 * idx + 21);

            auto dx_z_xxz = primBuffer.data(doff + 30 * idx + 22);

            auto dx_z_xyy = primBuffer.data(doff + 30 * idx + 23);

            auto dx_z_xyz = primBuffer.data(doff + 30 * idx + 24);

            auto dx_z_xzz = primBuffer.data(doff + 30 * idx + 25);

            auto dx_z_yyy = primBuffer.data(doff + 30 * idx + 26);

            auto dx_z_yyz = primBuffer.data(doff + 30 * idx + 27);

            auto dx_z_yzz = primBuffer.data(doff + 30 * idx + 28);

            auto dx_z_zzz = primBuffer.data(doff + 30 * idx + 29);

            auto dy_x_xxx = primBuffer.data(doff + 30 * bdim + 30 * idx);

            auto dy_x_xxy = primBuffer.data(doff + 30 * bdim + 30 * idx + 1);

            auto dy_x_xxz = primBuffer.data(doff + 30 * bdim + 30 * idx + 2);

            auto dy_x_xyy = primBuffer.data(doff + 30 * bdim + 30 * idx + 3);

            auto dy_x_xyz = primBuffer.data(doff + 30 * bdim + 30 * idx + 4);

            auto dy_x_xzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 5);

            auto dy_x_yyy = primBuffer.data(doff + 30 * bdim + 30 * idx + 6);

            auto dy_x_yyz = primBuffer.data(doff + 30 * bdim + 30 * idx + 7);

            auto dy_x_yzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 8);

            auto dy_x_zzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 9);

            auto dy_y_xxx = primBuffer.data(doff + 30 * bdim + 30 * idx + 10);

            auto dy_y_xxy = primBuffer.data(doff + 30 * bdim + 30 * idx + 11);

            auto dy_y_xxz = primBuffer.data(doff + 30 * bdim + 30 * idx + 12);

            auto dy_y_xyy = primBuffer.data(doff + 30 * bdim + 30 * idx + 13);

            auto dy_y_xyz = primBuffer.data(doff + 30 * bdim + 30 * idx + 14);

            auto dy_y_xzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 15);

            auto dy_y_yyy = primBuffer.data(doff + 30 * bdim + 30 * idx + 16);

            auto dy_y_yyz = primBuffer.data(doff + 30 * bdim + 30 * idx + 17);

            auto dy_y_yzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 18);

            auto dy_y_zzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 19);

            auto dy_z_xxx = primBuffer.data(doff + 30 * bdim + 30 * idx + 20);

            auto dy_z_xxy = primBuffer.data(doff + 30 * bdim + 30 * idx + 21);

            auto dy_z_xxz = primBuffer.data(doff + 30 * bdim + 30 * idx + 22);

            auto dy_z_xyy = primBuffer.data(doff + 30 * bdim + 30 * idx + 23);

            auto dy_z_xyz = primBuffer.data(doff + 30 * bdim + 30 * idx + 24);

            auto dy_z_xzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 25);

            auto dy_z_yyy = primBuffer.data(doff + 30 * bdim + 30 * idx + 26);

            auto dy_z_yyz = primBuffer.data(doff + 30 * bdim + 30 * idx + 27);

            auto dy_z_yzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 28);

            auto dy_z_zzz = primBuffer.data(doff + 30 * bdim + 30 * idx + 29);

            auto dz_x_xxx = primBuffer.data(doff + 60 * bdim + 30 * idx);

            auto dz_x_xxy = primBuffer.data(doff + 60 * bdim + 30 * idx + 1);

            auto dz_x_xxz = primBuffer.data(doff + 60 * bdim + 30 * idx + 2);

            auto dz_x_xyy = primBuffer.data(doff + 60 * bdim + 30 * idx + 3);

            auto dz_x_xyz = primBuffer.data(doff + 60 * bdim + 30 * idx + 4);

            auto dz_x_xzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 5);

            auto dz_x_yyy = primBuffer.data(doff + 60 * bdim + 30 * idx + 6);

            auto dz_x_yyz = primBuffer.data(doff + 60 * bdim + 30 * idx + 7);

            auto dz_x_yzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 8);

            auto dz_x_zzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 9);

            auto dz_y_xxx = primBuffer.data(doff + 60 * bdim + 30 * idx + 10);

            auto dz_y_xxy = primBuffer.data(doff + 60 * bdim + 30 * idx + 11);

            auto dz_y_xxz = primBuffer.data(doff + 60 * bdim + 30 * idx + 12);

            auto dz_y_xyy = primBuffer.data(doff + 60 * bdim + 30 * idx + 13);

            auto dz_y_xyz = primBuffer.data(doff + 60 * bdim + 30 * idx + 14);

            auto dz_y_xzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 15);

            auto dz_y_yyy = primBuffer.data(doff + 60 * bdim + 30 * idx + 16);

            auto dz_y_yyz = primBuffer.data(doff + 60 * bdim + 30 * idx + 17);

            auto dz_y_yzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 18);

            auto dz_y_zzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 19);

            auto dz_z_xxx = primBuffer.data(doff + 60 * bdim + 30 * idx + 20);

            auto dz_z_xxy = primBuffer.data(doff + 60 * bdim + 30 * idx + 21);

            auto dz_z_xxz = primBuffer.data(doff + 60 * bdim + 30 * idx + 22);

            auto dz_z_xyy = primBuffer.data(doff + 60 * bdim + 30 * idx + 23);

            auto dz_z_xyz = primBuffer.data(doff + 60 * bdim + 30 * idx + 24);

            auto dz_z_xzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 25);

            auto dz_z_yyy = primBuffer.data(doff + 60 * bdim + 30 * idx + 26);

            auto dz_z_yyz = primBuffer.data(doff + 60 * bdim + 30 * idx + 27);

            auto dz_z_yzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 28);

            auto dz_z_zzz = primBuffer.data(doff + 60 * bdim + 30 * idx + 29);

            // set up pointers to (S|M|F) integrals

            auto dx_0_xxx = primBuffer.data(d1off + 10 * idx);

            auto dx_0_xxy = primBuffer.data(d1off + 10 * idx + 1);

            auto dx_0_xxz = primBuffer.data(d1off + 10 * idx + 2);

            auto dx_0_xyy = primBuffer.data(d1off + 10 * idx + 3);

            auto dx_0_xyz = primBuffer.data(d1off + 10 * idx + 4);

            auto dx_0_xzz = primBuffer.data(d1off + 10 * idx + 5);

            auto dx_0_yyy = primBuffer.data(d1off + 10 * idx + 6);

            auto dx_0_yyz = primBuffer.data(d1off + 10 * idx + 7);

            auto dx_0_yzz = primBuffer.data(d1off + 10 * idx + 8);

            auto dx_0_zzz = primBuffer.data(d1off + 10 * idx + 9);

            auto dy_0_xxx = primBuffer.data(d1off + 10 * bdim + 10 * idx);

            auto dy_0_xxy = primBuffer.data(d1off + 10 * bdim + 10 * idx + 1);

            auto dy_0_xxz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 2);

            auto dy_0_xyy = primBuffer.data(d1off + 10 * bdim + 10 * idx + 3);

            auto dy_0_xyz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 4);

            auto dy_0_xzz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 5);

            auto dy_0_yyy = primBuffer.data(d1off + 10 * bdim + 10 * idx + 6);

            auto dy_0_yyz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 7);

            auto dy_0_yzz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 8);

            auto dy_0_zzz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 9);

            auto dz_0_xxx = primBuffer.data(d1off + 20 * bdim + 10 * idx);

            auto dz_0_xxy = primBuffer.data(d1off + 20 * bdim + 10 * idx + 1);

            auto dz_0_xxz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 2);

            auto dz_0_xyy = primBuffer.data(d1off + 20 * bdim + 10 * idx + 3);

            auto dz_0_xyz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 4);

            auto dz_0_xzz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 5);

            auto dz_0_yyy = primBuffer.data(d1off + 20 * bdim + 10 * idx + 6);

            auto dz_0_yyz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 7);

            auto dz_0_yzz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 8);

            auto dz_0_zzz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 9);

            // set up pointers to (S|M|D) integrals

            auto dx_0_xx = primBuffer.data(dkoff + 6 * idx);

            auto dx_0_xy = primBuffer.data(dkoff + 6 * idx + 1);

            auto dx_0_xz = primBuffer.data(dkoff + 6 * idx + 2);

            auto dx_0_yy = primBuffer.data(dkoff + 6 * idx + 3);

            auto dx_0_yz = primBuffer.data(dkoff + 6 * idx + 4);

            auto dx_0_zz = primBuffer.data(dkoff + 6 * idx + 5);

            auto dy_0_xx = primBuffer.data(dkoff + 6 * bdim + 6 * idx);

            auto dy_0_xy = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 1);

            auto dy_0_xz = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 2);

            auto dy_0_yy = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 3);

            auto dy_0_yz = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 4);

            auto dy_0_zz = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 5);

            auto dz_0_xx = primBuffer.data(dkoff + 12 * bdim + 6 * idx);

            auto dz_0_xy = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 1);

            auto dz_0_xz = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 2);

            auto dz_0_yy = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 3);

            auto dz_0_yz = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 4);

            auto dz_0_zz = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 5);

            // set up pointers to (S|F) integrals

            auto s_0_xxx = primBuffer.data(soff + 10 * idx);

            auto s_0_xxy = primBuffer.data(soff + 10 * idx + 1);

            auto s_0_xxz = primBuffer.data(soff + 10 * idx + 2);

            auto s_0_xyy = primBuffer.data(soff + 10 * idx + 3);

            auto s_0_xyz = primBuffer.data(soff + 10 * idx + 4);

            auto s_0_xzz = primBuffer.data(soff + 10 * idx + 5);

            auto s_0_yyy = primBuffer.data(soff + 10 * idx + 6);

            auto s_0_yyz = primBuffer.data(soff + 10 * idx + 7);

            auto s_0_yzz = primBuffer.data(soff + 10 * idx + 8);

            auto s_0_zzz = primBuffer.data(soff + 10 * idx + 9);
            
            // set up pointers to (S|D) integrals
            
            auto s_0_xx = primBuffer.data(s1off + 6 * idx);
            
            auto s_0_xy = primBuffer.data(s1off + 6 * idx + 1);
            
            auto s_0_xz = primBuffer.data(s1off + 6 * idx + 2);
            
            auto s_0_yy = primBuffer.data(s1off + 6 * idx + 3);
            
            auto s_0_yz = primBuffer.data(s1off + 6 * idx + 4);
            
            auto s_0_zz = primBuffer.data(s1off + 6 * idx + 5);
            
            // set up pointers to (S|P) integrals
            
            auto s_0_x = primBuffer.data(s2off + 3 * idx);
            
            auto s_0_y = primBuffer.data(s2off + 3 * idx + 1);
            
            auto s_0_z = primBuffer.data(s2off + 3 * idx + 2);

            #pragma omp simd aligned(fx, pax, pay, paz, pbx, pby, pbz,\
                                     dx_x_xxx, dx_x_xxy, dx_x_xxz,\
                                     dx_x_xyy, dx_x_xyz, dx_x_xzz, dx_x_yyy, dx_x_yyz,\
                                     dx_x_yzz, dx_x_zzz, dx_y_xxx, dx_y_xxy, dx_y_xxz,\
                                     dx_y_xyy, dx_y_xyz, dx_y_xzz, dx_y_yyy, dx_y_yyz,\
                                     dx_y_yzz, dx_y_zzz, dx_z_xxx, dx_z_xxy, dx_z_xxz,\
                                     dx_z_xyy, dx_z_xyz, dx_z_xzz, dx_z_yyy, dx_z_yyz,\
                                     dx_z_yzz, dx_z_zzz, dy_x_xxx, dy_x_xxy, dy_x_xxz,\
                                     dy_x_xyy, dy_x_xyz, dy_x_xzz, dy_x_yyy, dy_x_yyz,\
                                     dy_x_yzz, dy_x_zzz, dy_y_xxx, dy_y_xxy, dy_y_xxz,\
                                     dy_y_xyy, dy_y_xyz, dy_y_xzz, dy_y_yyy, dy_y_yyz,\
                                     dy_y_yzz, dy_y_zzz, dy_z_xxx, dy_z_xxy, dy_z_xxz,\
                                     dy_z_xyy, dy_z_xyz, dy_z_xzz, dy_z_yyy, dy_z_yyz,\
                                     dy_z_yzz, dy_z_zzz, dz_x_xxx, dz_x_xxy, dz_x_xxz,\
                                     dz_x_xyy, dz_x_xyz, dz_x_xzz, dz_x_yyy, dz_x_yyz,\
                                     dz_x_yzz, dz_x_zzz, dz_y_xxx, dz_y_xxy, dz_y_xxz,\
                                     dz_y_xyy, dz_y_xyz, dz_y_xzz, dz_y_yyy, dz_y_yyz,\
                                     dz_y_yzz, dz_y_zzz, dz_z_xxx, dz_z_xxy, dz_z_xxz,\
                                     dz_z_xyy, dz_z_xyz, dz_z_xzz, dz_z_yyy, dz_z_yyz,\
                                     dz_z_yzz, dz_z_zzz, dx_0_xxx, dx_0_xxy, dx_0_xxz,\
                                     dx_0_xyy, dx_0_xyz, dx_0_xzz, dx_0_yyy, dx_0_yyz,\
                                     dx_0_yzz, dx_0_zzz, dy_0_xxx, dy_0_xxy, dy_0_xxz,\
                                     dy_0_xyy, dy_0_xyz, dy_0_xzz, dy_0_yyy, dy_0_yyz,\
                                     dy_0_yzz, dy_0_zzz, dz_0_xxx, dz_0_xxy, dz_0_xxz,\
                                     dz_0_xyy, dz_0_xyz, dz_0_xzz, dz_0_yyy, dz_0_yyz,\
                                     dz_0_yzz, dz_0_zzz, dx_0_xx, dx_0_xy, dx_0_xz,\
                                     dx_0_yy, dx_0_yz, dx_0_zz, dy_0_xx, dy_0_xy,\
                                     dy_0_xz, dy_0_yy, dy_0_yz, dy_0_zz, dz_0_xx,\
                                     dz_0_xy, dz_0_xz, dz_0_yy, dz_0_yz, dz_0_zz,\
                                     s_0_xxx, s_0_xxy, s_0_xxz, s_0_xyy, s_0_xyz,\
                                     s_0_xzz, s_0_yyy, s_0_yyz, s_0_yzz, s_0_zzz,\
                                     s_0_xx, s_0_xy, s_0_xz, s_0_yy, s_0_yz,\
                                     s_0_zz, s_0_x, s_0_y, s_0_z: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];
                
                // overlap integrals
                
                // leading x component
                
                double fr = pbx[j];
                
                s_0_xxx[j] = fr * s_0_xx[j] + 2.0 * f2t * s_0_x[j];
                
                s_0_xxy[j] = fr * s_0_xy[j] + f2t * s_0_y[j];
                
                s_0_xxz[j] = fr * s_0_xz[j] + f2t * s_0_z[j];
                
                s_0_xyy[j] = fr * s_0_yy[j];
                
                s_0_xyz[j] = fr * s_0_yz[j];
                
                s_0_xzz[j] = fr * s_0_zz[j];
                
                // leading y component
                
                fr = pby[j];
                
                s_0_yyy[j] = fr * s_0_yy[j] + 2.0 * f2t * s_0_y[j];
                
                s_0_yyz[j] = fr * s_0_yz[j] + f2t * s_0_z[j];
                
                s_0_yzz[j] = fr * s_0_zz[j];
                
                // leading z component
                
                s_0_zzz[j] = pbz[j] * s_0_zz[j] + 2.0 * f2t * s_0_z[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_x_xxx[j] = fr * dx_0_xxx[j] + f2t * (3.0 * dx_0_xx[j] + s_0_xxx[j]);

                dy_x_xxx[j] = fr * dy_0_xxx[j] + f2t * 3.0 * dy_0_xx[j];

                dz_x_xxx[j] = fr * dz_0_xxx[j] + f2t * 3.0 * dz_0_xx[j];

                dx_x_xxy[j] = fr * dx_0_xxy[j] + f2t * (2.0 * dx_0_xy[j] + s_0_xxy[j]);

                dy_x_xxy[j] = fr * dy_0_xxy[j] + f2t * 2.0 * dy_0_xy[j];

                dz_x_xxy[j] = fr * dz_0_xxy[j] + f2t * 2.0 * dz_0_xy[j];

                dx_x_xxz[j] = fr * dx_0_xxz[j] + f2t * (2.0 * dx_0_xz[j] + s_0_xxz[j]);

                dy_x_xxz[j] = fr * dy_0_xxz[j] + f2t * 2.0 * dy_0_xz[j];

                dz_x_xxz[j] = fr * dz_0_xxz[j] + f2t * 2.0 * dz_0_xz[j];

                dx_x_xyy[j] = fr * dx_0_xyy[j] + f2t * (dx_0_yy[j] + s_0_xyy[j]);

                dy_x_xyy[j] = fr * dy_0_xyy[j] + f2t * dy_0_yy[j];

                dz_x_xyy[j] = fr * dz_0_xyy[j] + f2t * dz_0_yy[j];

                dx_x_xyz[j] = fr * dx_0_xyz[j] + f2t * (dx_0_yz[j] + s_0_xyz[j]);

                dy_x_xyz[j] = fr * dy_0_xyz[j] + f2t * dy_0_yz[j];

                dz_x_xyz[j] = fr * dz_0_xyz[j] + f2t * dz_0_yz[j];

                dx_x_xzz[j] = fr * dx_0_xzz[j] + f2t * (dx_0_zz[j] + s_0_xzz[j]);

                dy_x_xzz[j] = fr * dy_0_xzz[j] + f2t * dy_0_zz[j];

                dz_x_xzz[j] = fr * dz_0_xzz[j] + f2t * dz_0_zz[j];

                dx_x_yyy[j] = fr * dx_0_yyy[j] + f2t * s_0_yyy[j];

                dy_x_yyy[j] = fr * dy_0_yyy[j];

                dz_x_yyy[j] = fr * dz_0_yyy[j];

                dx_x_yyz[j] = fr * dx_0_yyz[j] + f2t * s_0_yyz[j];

                dy_x_yyz[j] = fr * dy_0_yyz[j];

                dz_x_yyz[j] = fr * dz_0_yyz[j];

                dx_x_yzz[j] = fr * dx_0_yzz[j] + f2t * s_0_yzz[j];

                dy_x_yzz[j] = fr * dy_0_yzz[j];

                dz_x_yzz[j] = fr * dz_0_yzz[j];

                dx_x_zzz[j] = fr * dx_0_zzz[j] + f2t * s_0_zzz[j];

                dy_x_zzz[j] = fr * dy_0_zzz[j];

                dz_x_zzz[j] = fr * dz_0_zzz[j];

                // leading y component

                fr = pay[j];

                dx_y_xxx[j] = fr * dx_0_xxx[j];

                dy_y_xxx[j] = fr * dy_0_xxx[j] + f2t * s_0_xxx[j];

                dz_y_xxx[j] = fr * dz_0_xxx[j];

                dx_y_xxy[j] = fr * dx_0_xxy[j] + f2t * dx_0_xx[j];

                dy_y_xxy[j] = fr * dy_0_xxy[j] + f2t * (dy_0_xx[j] + s_0_xxy[j]);

                dz_y_xxy[j] = fr * dz_0_xxy[j] + f2t * dz_0_xx[j];

                dx_y_xxz[j] = fr * dx_0_xxz[j];

                dy_y_xxz[j] = fr * dy_0_xxz[j] + f2t * s_0_xxz[j];

                dz_y_xxz[j] = fr * dz_0_xxz[j];

                dx_y_xyy[j] = fr * dx_0_xyy[j] + f2t * 2.0 * dx_0_xy[j];

                dy_y_xyy[j] = fr * dy_0_xyy[j] + f2t * (2.0 * dy_0_xy[j] + s_0_xyy[j]);

                dz_y_xyy[j] = fr * dz_0_xyy[j] + f2t * 2.0 * dz_0_xy[j];

                dx_y_xyz[j] = fr * dx_0_xyz[j] + f2t * dx_0_xz[j];

                dy_y_xyz[j] = fr * dy_0_xyz[j] + f2t * (dy_0_xz[j] + s_0_xyz[j]);

                dz_y_xyz[j] = fr * dz_0_xyz[j] + f2t * dz_0_xz[j];

                dx_y_xzz[j] = fr * dx_0_xzz[j];

                dy_y_xzz[j] = fr * dy_0_xzz[j] + f2t * s_0_xzz[j];

                dz_y_xzz[j] = fr * dz_0_xzz[j];

                dx_y_yyy[j] = fr * dx_0_yyy[j] + f2t * 3.0 * dx_0_yy[j];

                dy_y_yyy[j] = fr * dy_0_yyy[j] + f2t * (3.0 * dy_0_yy[j] + s_0_yyy[j]);

                dz_y_yyy[j] = fr * dz_0_yyy[j] + f2t * 3.0 * dz_0_yy[j];

                dx_y_yyz[j] = fr * dx_0_yyz[j] + f2t * 2.0 * dx_0_yz[j];

                dy_y_yyz[j] = fr * dy_0_yyz[j] + f2t * (2.0 * dy_0_yz[j] + s_0_yyz[j]);

                dz_y_yyz[j] = fr * dz_0_yyz[j] + f2t * 2.0 * dz_0_yz[j];

                dx_y_yzz[j] = fr * dx_0_yzz[j] + f2t * dx_0_zz[j];

                dy_y_yzz[j] = fr * dy_0_yzz[j] + f2t * (dy_0_zz[j] + s_0_yzz[j]);

                dz_y_yzz[j] = fr * dz_0_yzz[j] + f2t * dz_0_zz[j];

                dx_y_zzz[j] = fr * dx_0_zzz[j];

                dy_y_zzz[j] = fr * dy_0_zzz[j] + f2t * s_0_zzz[j];

                dz_y_zzz[j] = fr * dz_0_zzz[j];

                // leading z component

                fr = paz[j];

                dx_z_xxx[j] = fr * dx_0_xxx[j];

                dy_z_xxx[j] = fr * dy_0_xxx[j];

                dz_z_xxx[j] = fr * dz_0_xxx[j] + f2t * s_0_xxx[j];

                dx_z_xxy[j] = fr * dx_0_xxy[j];

                dy_z_xxy[j] = fr * dy_0_xxy[j];

                dz_z_xxy[j] = fr * dz_0_xxy[j] + f2t * s_0_xxy[j];

                dx_z_xxz[j] = fr * dx_0_xxz[j] + f2t * dx_0_xx[j];

                dy_z_xxz[j] = fr * dy_0_xxz[j] + f2t * dy_0_xx[j];

                dz_z_xxz[j] = fr * dz_0_xxz[j] + f2t * (dz_0_xx[j] + s_0_xxz[j]);

                dx_z_xyy[j] = fr * dx_0_xyy[j];

                dy_z_xyy[j] = fr * dy_0_xyy[j];

                dz_z_xyy[j] = fr * dz_0_xyy[j] + f2t * s_0_xyy[j];

                dx_z_xyz[j] = fr * dx_0_xyz[j] + f2t * dx_0_xy[j];

                dy_z_xyz[j] = fr * dy_0_xyz[j] + f2t * dy_0_xy[j];

                dz_z_xyz[j] = fr * dz_0_xyz[j] + f2t * (dz_0_xy[j] + s_0_xyz[j]);

                dx_z_xzz[j] = fr * dx_0_xzz[j] + f2t * 2.0 * dx_0_xz[j];

                dy_z_xzz[j] = fr * dy_0_xzz[j] + f2t * 2.0 * dy_0_xz[j];

                dz_z_xzz[j] = fr * dz_0_xzz[j] + f2t * (2.0 * dz_0_xz[j] + s_0_xzz[j]);

                dx_z_yyy[j] = fr * dx_0_yyy[j];

                dy_z_yyy[j] = fr * dy_0_yyy[j];

                dz_z_yyy[j] = fr * dz_0_yyy[j] + f2t * s_0_yyy[j];

                dx_z_yyz[j] = fr * dx_0_yyz[j] + f2t * dx_0_yy[j];

                dy_z_yyz[j] = fr * dy_0_yyz[j] + f2t * dy_0_yy[j];

                dz_z_yyz[j] = fr * dz_0_yyz[j] + f2t * (dz_0_yy[j] + s_0_yyz[j]);

                dx_z_yzz[j] = fr * dx_0_yzz[j] + f2t * 2.0 * dx_0_yz[j];

                dy_z_yzz[j] = fr * dy_0_yzz[j] + f2t * 2.0 * dy_0_yz[j];

                dz_z_yzz[j] = fr * dz_0_yzz[j] + f2t * (2.0 * dz_0_yz[j] + s_0_yzz[j]);

                dx_z_zzz[j] = fr * dx_0_zzz[j] + f2t * 3.0 * dx_0_zz[j];

                dy_z_zzz[j] = fr * dy_0_zzz[j] + f2t * 3.0 * dy_0_zz[j];

                dz_z_zzz[j] = fr * dz_0_zzz[j] + f2t * (3.0 * dz_0_zz[j] + s_0_zzz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForFP(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {3, 1, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {3, 1, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 1, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 1, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (F|M|P) integrals

            auto dx_xxx_x = primBuffer.data(doff + 30 * idx);

            auto dx_xxx_y = primBuffer.data(doff + 30 * idx + 1);

            auto dx_xxx_z = primBuffer.data(doff + 30 * idx + 2);

            auto dx_xxy_x = primBuffer.data(doff + 30 * idx + 3);

            auto dx_xxy_y = primBuffer.data(doff + 30 * idx + 4);

            auto dx_xxy_z = primBuffer.data(doff + 30 * idx + 5);

            auto dx_xxz_x = primBuffer.data(doff + 30 * idx + 6);

            auto dx_xxz_y = primBuffer.data(doff + 30 * idx + 7);

            auto dx_xxz_z = primBuffer.data(doff + 30 * idx + 8);

            auto dx_xyy_x = primBuffer.data(doff + 30 * idx + 9);

            auto dx_xyy_y = primBuffer.data(doff + 30 * idx + 10);

            auto dx_xyy_z = primBuffer.data(doff + 30 * idx + 11);

            auto dx_xyz_x = primBuffer.data(doff + 30 * idx + 12);

            auto dx_xyz_y = primBuffer.data(doff + 30 * idx + 13);

            auto dx_xyz_z = primBuffer.data(doff + 30 * idx + 14);

            auto dx_xzz_x = primBuffer.data(doff + 30 * idx + 15);

            auto dx_xzz_y = primBuffer.data(doff + 30 * idx + 16);

            auto dx_xzz_z = primBuffer.data(doff + 30 * idx + 17);

            auto dx_yyy_x = primBuffer.data(doff + 30 * idx + 18);

            auto dx_yyy_y = primBuffer.data(doff + 30 * idx + 19);

            auto dx_yyy_z = primBuffer.data(doff + 30 * idx + 20);

            auto dx_yyz_x = primBuffer.data(doff + 30 * idx + 21);

            auto dx_yyz_y = primBuffer.data(doff + 30 * idx + 22);

            auto dx_yyz_z = primBuffer.data(doff + 30 * idx + 23);

            auto dx_yzz_x = primBuffer.data(doff + 30 * idx + 24);

            auto dx_yzz_y = primBuffer.data(doff + 30 * idx + 25);

            auto dx_yzz_z = primBuffer.data(doff + 30 * idx + 26);

            auto dx_zzz_x = primBuffer.data(doff + 30 * idx + 27);

            auto dx_zzz_y = primBuffer.data(doff + 30 * idx + 28);

            auto dx_zzz_z = primBuffer.data(doff + 30 * idx + 29);

            auto dy_xxx_x = primBuffer.data(doff + 30 * bdim + 30 * idx);

            auto dy_xxx_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 1);

            auto dy_xxx_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 2);

            auto dy_xxy_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 3);

            auto dy_xxy_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 4);

            auto dy_xxy_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 5);

            auto dy_xxz_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 6);

            auto dy_xxz_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 7);

            auto dy_xxz_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 8);

            auto dy_xyy_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 9);

            auto dy_xyy_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 10);

            auto dy_xyy_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 11);

            auto dy_xyz_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 12);

            auto dy_xyz_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 13);

            auto dy_xyz_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 14);

            auto dy_xzz_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 15);

            auto dy_xzz_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 16);

            auto dy_xzz_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 17);

            auto dy_yyy_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 18);

            auto dy_yyy_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 19);

            auto dy_yyy_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 20);

            auto dy_yyz_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 21);

            auto dy_yyz_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 22);

            auto dy_yyz_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 23);

            auto dy_yzz_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 24);

            auto dy_yzz_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 25);

            auto dy_yzz_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 26);

            auto dy_zzz_x = primBuffer.data(doff + 30 * bdim + 30 * idx + 27);

            auto dy_zzz_y = primBuffer.data(doff + 30 * bdim + 30 * idx + 28);

            auto dy_zzz_z = primBuffer.data(doff + 30 * bdim + 30 * idx + 29);

            auto dz_xxx_x = primBuffer.data(doff + 60 * bdim + 30 * idx);

            auto dz_xxx_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 1);

            auto dz_xxx_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 2);

            auto dz_xxy_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 3);

            auto dz_xxy_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 4);

            auto dz_xxy_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 5);

            auto dz_xxz_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 6);

            auto dz_xxz_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 7);

            auto dz_xxz_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 8);

            auto dz_xyy_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 9);

            auto dz_xyy_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 10);

            auto dz_xyy_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 11);

            auto dz_xyz_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 12);

            auto dz_xyz_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 13);

            auto dz_xyz_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 14);

            auto dz_xzz_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 15);

            auto dz_xzz_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 16);

            auto dz_xzz_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 17);

            auto dz_yyy_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 18);

            auto dz_yyy_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 19);

            auto dz_yyy_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 20);

            auto dz_yyz_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 21);

            auto dz_yyz_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 22);

            auto dz_yyz_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 23);

            auto dz_yzz_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 24);

            auto dz_yzz_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 25);

            auto dz_yzz_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 26);

            auto dz_zzz_x = primBuffer.data(doff + 60 * bdim + 30 * idx + 27);

            auto dz_zzz_y = primBuffer.data(doff + 60 * bdim + 30 * idx + 28);

            auto dz_zzz_z = primBuffer.data(doff + 60 * bdim + 30 * idx + 29);

            // set up pointers to (D|M|P) integrals

            auto dx_xx_x = primBuffer.data(d1off + 18 * idx);

            auto dx_xx_y = primBuffer.data(d1off + 18 * idx + 1);

            auto dx_xx_z = primBuffer.data(d1off + 18 * idx + 2);

            auto dx_xy_x = primBuffer.data(d1off + 18 * idx + 3);

            auto dx_xy_y = primBuffer.data(d1off + 18 * idx + 4);

            auto dx_xy_z = primBuffer.data(d1off + 18 * idx + 5);

            auto dx_xz_x = primBuffer.data(d1off + 18 * idx + 6);

            auto dx_xz_y = primBuffer.data(d1off + 18 * idx + 7);

            auto dx_xz_z = primBuffer.data(d1off + 18 * idx + 8);

            auto dx_yy_x = primBuffer.data(d1off + 18 * idx + 9);

            auto dx_yy_y = primBuffer.data(d1off + 18 * idx + 10);

            auto dx_yy_z = primBuffer.data(d1off + 18 * idx + 11);

            auto dx_yz_x = primBuffer.data(d1off + 18 * idx + 12);

            auto dx_yz_y = primBuffer.data(d1off + 18 * idx + 13);

            auto dx_yz_z = primBuffer.data(d1off + 18 * idx + 14);

            auto dx_zz_x = primBuffer.data(d1off + 18 * idx + 15);

            auto dx_zz_y = primBuffer.data(d1off + 18 * idx + 16);

            auto dx_zz_z = primBuffer.data(d1off + 18 * idx + 17);

            auto dy_xx_x = primBuffer.data(d1off + 18 * bdim + 18 * idx);

            auto dy_xx_y = primBuffer.data(d1off + 18 * bdim + 18 * idx + 1);

            auto dy_xx_z = primBuffer.data(d1off + 18 * bdim + 18 * idx + 2);

            auto dy_xy_x = primBuffer.data(d1off + 18 * bdim + 18 * idx + 3);

            auto dy_xy_y = primBuffer.data(d1off + 18 * bdim + 18 * idx + 4);

            auto dy_xy_z = primBuffer.data(d1off + 18 * bdim + 18 * idx + 5);

            auto dy_xz_x = primBuffer.data(d1off + 18 * bdim + 18 * idx + 6);

            auto dy_xz_y = primBuffer.data(d1off + 18 * bdim + 18 * idx + 7);

            auto dy_xz_z = primBuffer.data(d1off + 18 * bdim + 18 * idx + 8);

            auto dy_yy_x = primBuffer.data(d1off + 18 * bdim + 18 * idx + 9);

            auto dy_yy_y = primBuffer.data(d1off + 18 * bdim + 18 * idx + 10);

            auto dy_yy_z = primBuffer.data(d1off + 18 * bdim + 18 * idx + 11);

            auto dy_yz_x = primBuffer.data(d1off + 18 * bdim + 18 * idx + 12);

            auto dy_yz_y = primBuffer.data(d1off + 18 * bdim + 18 * idx + 13);

            auto dy_yz_z = primBuffer.data(d1off + 18 * bdim + 18 * idx + 14);

            auto dy_zz_x = primBuffer.data(d1off + 18 * bdim + 18 * idx + 15);

            auto dy_zz_y = primBuffer.data(d1off + 18 * bdim + 18 * idx + 16);

            auto dy_zz_z = primBuffer.data(d1off + 18 * bdim + 18 * idx + 17);

            auto dz_xx_x = primBuffer.data(d1off + 36 * bdim + 18 * idx);

            auto dz_xx_y = primBuffer.data(d1off + 36 * bdim + 18 * idx + 1);

            auto dz_xx_z = primBuffer.data(d1off + 36 * bdim + 18 * idx + 2);

            auto dz_xy_x = primBuffer.data(d1off + 36 * bdim + 18 * idx + 3);

            auto dz_xy_y = primBuffer.data(d1off + 36 * bdim + 18 * idx + 4);

            auto dz_xy_z = primBuffer.data(d1off + 36 * bdim + 18 * idx + 5);

            auto dz_xz_x = primBuffer.data(d1off + 36 * bdim + 18 * idx + 6);

            auto dz_xz_y = primBuffer.data(d1off + 36 * bdim + 18 * idx + 7);

            auto dz_xz_z = primBuffer.data(d1off + 36 * bdim + 18 * idx + 8);

            auto dz_yy_x = primBuffer.data(d1off + 36 * bdim + 18 * idx + 9);

            auto dz_yy_y = primBuffer.data(d1off + 36 * bdim + 18 * idx + 10);

            auto dz_yy_z = primBuffer.data(d1off + 36 * bdim + 18 * idx + 11);

            auto dz_yz_x = primBuffer.data(d1off + 36 * bdim + 18 * idx + 12);

            auto dz_yz_y = primBuffer.data(d1off + 36 * bdim + 18 * idx + 13);

            auto dz_yz_z = primBuffer.data(d1off + 36 * bdim + 18 * idx + 14);

            auto dz_zz_x = primBuffer.data(d1off + 36 * bdim + 18 * idx + 15);

            auto dz_zz_y = primBuffer.data(d1off + 36 * bdim + 18 * idx + 16);

            auto dz_zz_z = primBuffer.data(d1off + 36 * bdim + 18 * idx + 17);

            // set up pointers to (P|M|P) integrals

            auto dx_x_x = primBuffer.data(d2off + 9 * idx);

            auto dx_x_y = primBuffer.data(d2off + 9 * idx + 1);

            auto dx_x_z = primBuffer.data(d2off + 9 * idx + 2);

            auto dx_y_x = primBuffer.data(d2off + 9 * idx + 3);

            auto dx_y_y = primBuffer.data(d2off + 9 * idx + 4);

            auto dx_y_z = primBuffer.data(d2off + 9 * idx + 5);

            auto dx_z_x = primBuffer.data(d2off + 9 * idx + 6);

            auto dx_z_y = primBuffer.data(d2off + 9 * idx + 7);

            auto dx_z_z = primBuffer.data(d2off + 9 * idx + 8);

            auto dy_x_x = primBuffer.data(d2off + 9 * bdim + 9 * idx);

            auto dy_x_y = primBuffer.data(d2off + 9 * bdim + 9 * idx + 1);

            auto dy_x_z = primBuffer.data(d2off + 9 * bdim + 9 * idx + 2);

            auto dy_y_x = primBuffer.data(d2off + 9 * bdim + 9 * idx + 3);

            auto dy_y_y = primBuffer.data(d2off + 9 * bdim + 9 * idx + 4);

            auto dy_y_z = primBuffer.data(d2off + 9 * bdim + 9 * idx + 5);

            auto dy_z_x = primBuffer.data(d2off + 9 * bdim + 9 * idx + 6);

            auto dy_z_y = primBuffer.data(d2off + 9 * bdim + 9 * idx + 7);

            auto dy_z_z = primBuffer.data(d2off + 9 * bdim + 9 * idx + 8);

            auto dz_x_x = primBuffer.data(d2off + 18 * bdim + 9 * idx);

            auto dz_x_y = primBuffer.data(d2off + 18 * bdim + 9 * idx + 1);

            auto dz_x_z = primBuffer.data(d2off + 18 * bdim + 9 * idx + 2);

            auto dz_y_x = primBuffer.data(d2off + 18 * bdim + 9 * idx + 3);

            auto dz_y_y = primBuffer.data(d2off + 18 * bdim + 9 * idx + 4);

            auto dz_y_z = primBuffer.data(d2off + 18 * bdim + 9 * idx + 5);

            auto dz_z_x = primBuffer.data(d2off + 18 * bdim + 9 * idx + 6);

            auto dz_z_y = primBuffer.data(d2off + 18 * bdim + 9 * idx + 7);

            auto dz_z_z = primBuffer.data(d2off + 18 * bdim + 9 * idx + 8);

            // set up pointers to (D|M|S) integrals

            auto dx_xx_0 = primBuffer.data(dkoff + 6 * idx);

            auto dx_xy_0 = primBuffer.data(dkoff + 6 * idx + 1);

            auto dx_xz_0 = primBuffer.data(dkoff + 6 * idx + 2);

            auto dx_yy_0 = primBuffer.data(dkoff + 6 * idx + 3);

            auto dx_yz_0 = primBuffer.data(dkoff + 6 * idx + 4);

            auto dx_zz_0 = primBuffer.data(dkoff + 6 * idx + 5);

            auto dy_xx_0 = primBuffer.data(dkoff + 6 * bdim + 6 * idx);

            auto dy_xy_0 = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 1);

            auto dy_xz_0 = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 2);

            auto dy_yy_0 = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 3);

            auto dy_yz_0 = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 4);

            auto dy_zz_0 = primBuffer.data(dkoff + 6 * bdim + 6 * idx + 5);

            auto dz_xx_0 = primBuffer.data(dkoff + 12 * bdim + 6 * idx);

            auto dz_xy_0 = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 1);

            auto dz_xz_0 = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 2);

            auto dz_yy_0 = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 3);

            auto dz_yz_0 = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 4);

            auto dz_zz_0 = primBuffer.data(dkoff + 12 * bdim + 6 * idx + 5);

            // set up pointers to (D|P) integrals

            auto s_xx_x = primBuffer.data(soff + 18 * idx);

            auto s_xx_y = primBuffer.data(soff + 18 * idx + 1);

            auto s_xx_z = primBuffer.data(soff + 18 * idx + 2);

            auto s_xy_x = primBuffer.data(soff + 18 * idx + 3);

            auto s_xy_y = primBuffer.data(soff + 18 * idx + 4);

            auto s_xy_z = primBuffer.data(soff + 18 * idx + 5);

            auto s_xz_x = primBuffer.data(soff + 18 * idx + 6);

            auto s_xz_y = primBuffer.data(soff + 18 * idx + 7);

            auto s_xz_z = primBuffer.data(soff + 18 * idx + 8);

            auto s_yy_x = primBuffer.data(soff + 18 * idx + 9);

            auto s_yy_y = primBuffer.data(soff + 18 * idx + 10);

            auto s_yy_z = primBuffer.data(soff + 18 * idx + 11);

            auto s_yz_x = primBuffer.data(soff + 18 * idx + 12);

            auto s_yz_y = primBuffer.data(soff + 18 * idx + 13);

            auto s_yz_z = primBuffer.data(soff + 18 * idx + 14);

            auto s_zz_x = primBuffer.data(soff + 18 * idx + 15);

            auto s_zz_y = primBuffer.data(soff + 18 * idx + 16);

            auto s_zz_z = primBuffer.data(soff + 18 * idx + 17);

            // set up pointers to (P|P) integrals

            auto s_x_x = primBuffer.data(s1off + 9 * idx);

            auto s_x_y = primBuffer.data(s1off + 9 * idx + 1);

            auto s_x_z = primBuffer.data(s1off + 9 * idx + 2);

            auto s_y_x = primBuffer.data(s1off + 9 * idx + 3);

            auto s_y_y = primBuffer.data(s1off + 9 * idx + 4);

            auto s_y_z = primBuffer.data(s1off + 9 * idx + 5);

            auto s_z_x = primBuffer.data(s1off + 9 * idx + 6);

            auto s_z_y = primBuffer.data(s1off + 9 * idx + 7);

            auto s_z_z = primBuffer.data(s1off + 9 * idx + 8);

            // set up pointers to (S|P) integrals

            auto s_0_x = primBuffer.data(s2off + 3 * idx);

            auto s_0_y = primBuffer.data(s2off + 3 * idx + 1);

            auto s_0_z = primBuffer.data(s2off + 3 * idx + 2);

            // set up pointers to (P|S) integrals

            auto s_x_0 = primBuffer.data(skoff + 3 * idx);

            auto s_y_0 = primBuffer.data(skoff + 3 * idx + 1);

            auto s_z_0 = primBuffer.data(skoff + 3 * idx + 2);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxx_x, dx_xxx_y, dx_xxx_z,\
                                     dx_xxy_x, dx_xxy_y, dx_xxy_z, dx_xxz_x, dx_xxz_y,\
                                     dx_xxz_z, dx_xyy_x, dx_xyy_y, dx_xyy_z, dx_xyz_x,\
                                     dx_xyz_y, dx_xyz_z, dx_xzz_x, dx_xzz_y, dx_xzz_z,\
                                     dx_yyy_x, dx_yyy_y, dx_yyy_z, dx_yyz_x, dx_yyz_y,\
                                     dx_yyz_z, dx_yzz_x, dx_yzz_y, dx_yzz_z, dx_zzz_x,\
                                     dx_zzz_y, dx_zzz_z, dy_xxx_x, dy_xxx_y, dy_xxx_z,\
                                     dy_xxy_x, dy_xxy_y, dy_xxy_z, dy_xxz_x, dy_xxz_y,\
                                     dy_xxz_z, dy_xyy_x, dy_xyy_y, dy_xyy_z, dy_xyz_x,\
                                     dy_xyz_y, dy_xyz_z, dy_xzz_x, dy_xzz_y, dy_xzz_z,\
                                     dy_yyy_x, dy_yyy_y, dy_yyy_z, dy_yyz_x, dy_yyz_y,\
                                     dy_yyz_z, dy_yzz_x, dy_yzz_y, dy_yzz_z, dy_zzz_x,\
                                     dy_zzz_y, dy_zzz_z, dz_xxx_x, dz_xxx_y, dz_xxx_z,\
                                     dz_xxy_x, dz_xxy_y, dz_xxy_z, dz_xxz_x, dz_xxz_y,\
                                     dz_xxz_z, dz_xyy_x, dz_xyy_y, dz_xyy_z, dz_xyz_x,\
                                     dz_xyz_y, dz_xyz_z, dz_xzz_x, dz_xzz_y, dz_xzz_z,\
                                     dz_yyy_x, dz_yyy_y, dz_yyy_z, dz_yyz_x, dz_yyz_y,\
                                     dz_yyz_z, dz_yzz_x, dz_yzz_y, dz_yzz_z, dz_zzz_x,\
                                     dz_zzz_y, dz_zzz_z, dx_xx_x, dx_xx_y, dx_xx_z,\
                                     dx_xy_x, dx_xy_y, dx_xy_z, dx_xz_x, dx_xz_y,\
                                     dx_xz_z, dx_yy_x, dx_yy_y, dx_yy_z, dx_yz_x,\
                                     dx_yz_y, dx_yz_z, dx_zz_x, dx_zz_y, dx_zz_z,\
                                     dy_xx_x, dy_xx_y, dy_xx_z, dy_xy_x, dy_xy_y,\
                                     dy_xy_z, dy_xz_x, dy_xz_y, dy_xz_z, dy_yy_x,\
                                     dy_yy_y, dy_yy_z, dy_yz_x, dy_yz_y, dy_yz_z,\
                                     dy_zz_x, dy_zz_y, dy_zz_z, dz_xx_x, dz_xx_y,\
                                     dz_xx_z, dz_xy_x, dz_xy_y, dz_xy_z, dz_xz_x,\
                                     dz_xz_y, dz_xz_z, dz_yy_x, dz_yy_y, dz_yy_z,\
                                     dz_yz_x, dz_yz_y, dz_yz_z, dz_zz_x, dz_zz_y,\
                                     dz_zz_z, dx_x_x, dx_x_y, dx_x_z, dx_y_x, dx_y_y,\
                                     dx_y_z, dx_z_x, dx_z_y, dx_z_z, dy_x_x, dy_x_y,\
                                     dy_x_z, dy_y_x, dy_y_y, dy_y_z, dy_z_x, dy_z_y,\
                                     dy_z_z, dz_x_x, dz_x_y, dz_x_z, dz_y_x, dz_y_y,\
                                     dz_y_z, dz_z_x, dz_z_y, dz_z_z, dx_xx_0, dx_xy_0,\
                                     dx_xz_0, dx_yy_0, dx_yz_0, dx_zz_0, dy_xx_0,\
                                     dy_xy_0, dy_xz_0, dy_yy_0, dy_yz_0, dy_zz_0,\
                                     dz_xx_0, dz_xy_0, dz_xz_0, dz_yy_0, dz_yz_0,\
                                     dz_zz_0, s_xx_x, s_xx_y, s_xx_z, s_xy_x, s_xy_y,\
                                     s_xy_z, s_xz_x, s_xz_y, s_xz_z, s_yy_x, s_yy_y,\
                                     s_yy_z, s_yz_x, s_yz_y, s_yz_z, s_zz_x, s_zz_y,\
                                     s_zz_z, s_x_x, s_x_y, s_x_z, s_y_x, s_y_y,\
                                     s_y_z, s_z_x, s_z_y, s_z_z, s_0_x, s_0_y,\
                                     s_0_z, s_x_0, s_y_0, s_z_0: VLX_ALIGN)
             for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xx_x[j] = fr * s_x_x[j] + f2t * (s_0_x[j] + s_x_0[j]);

                s_xx_y[j] = fr * s_x_y[j] + f2t * s_0_y[j];

                s_xx_z[j] = fr * s_x_z[j] + f2t * s_0_z[j];

                s_xy_x[j] = fr * s_y_x[j] + f2t * s_y_0[j];

                s_xy_y[j] = fr * s_y_y[j];

                s_xy_z[j] = fr * s_y_z[j];

                s_xz_x[j] = fr * s_z_x[j] + f2t * s_z_0[j];

                s_xz_y[j] = fr * s_z_y[j];

                s_xz_z[j] = fr * s_z_z[j];

                // leading y component

                fr = pay[j];

                s_yy_x[j] = fr * s_y_x[j] + f2t * s_0_x[j];

                s_yy_y[j] = fr * s_y_y[j] + f2t * (s_0_y[j] + s_y_0[j]);

                s_yy_z[j] = fr * s_y_z[j] + f2t * s_0_z[j];

                s_yz_x[j] = fr * s_z_x[j];

                s_yz_y[j] = fr * s_z_y[j] + f2t * s_z_0[j];

                s_yz_z[j] = fr * s_z_z[j];

                // leading z component

                fr = paz[j];

                s_zz_x[j] = fr * s_z_x[j] + f2t * s_0_x[j];

                s_zz_y[j] = fr * s_z_y[j] + f2t * s_0_y[j];

                s_zz_z[j] = fr * s_z_z[j] + f2t * (s_0_z[j] + s_z_0[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxx_x[j] = fr * dx_xx_x[j] + f2t * (2.0 * dx_x_x[j] + dx_xx_0[j] + s_xx_x[j]);

                dy_xxx_x[j] = fr * dy_xx_x[j] + f2t * (2.0 * dy_x_x[j] + dy_xx_0[j]);

                dz_xxx_x[j] = fr * dz_xx_x[j] + f2t * (2.0 * dz_x_x[j] + dz_xx_0[j]);

                dx_xxx_y[j] = fr * dx_xx_y[j] + f2t * (2.0 * dx_x_y[j] + s_xx_y[j]);

                dy_xxx_y[j] = fr * dy_xx_y[j] + f2t * 2.0 * dy_x_y[j];

                dz_xxx_y[j] = fr * dz_xx_y[j] + f2t * 2.0 * dz_x_y[j];

                dx_xxx_z[j] = fr * dx_xx_z[j] + f2t * (2.0 * dx_x_z[j] + s_xx_z[j]);

                dy_xxx_z[j] = fr * dy_xx_z[j] + f2t * 2.0 * dy_x_z[j];

                dz_xxx_z[j] = fr * dz_xx_z[j] + f2t * 2.0 * dz_x_z[j];

                dx_xxy_x[j] = fr * dx_xy_x[j] + f2t * (dx_y_x[j] + dx_xy_0[j] + s_xy_x[j]);

                dy_xxy_x[j] = fr * dy_xy_x[j] + f2t * (dy_y_x[j] + dy_xy_0[j]);

                dz_xxy_x[j] = fr * dz_xy_x[j] + f2t * (dz_y_x[j] + dz_xy_0[j]);

                dx_xxy_y[j] = fr * dx_xy_y[j] + f2t * (dx_y_y[j] + s_xy_y[j]);

                dy_xxy_y[j] = fr * dy_xy_y[j] + f2t * dy_y_y[j];

                dz_xxy_y[j] = fr * dz_xy_y[j] + f2t * dz_y_y[j];

                dx_xxy_z[j] = fr * dx_xy_z[j] + f2t * (dx_y_z[j] + s_xy_z[j]);

                dy_xxy_z[j] = fr * dy_xy_z[j] + f2t * dy_y_z[j];

                dz_xxy_z[j] = fr * dz_xy_z[j] + f2t * dz_y_z[j];

                dx_xxz_x[j] = fr * dx_xz_x[j] + f2t * (dx_z_x[j] + dx_xz_0[j] + s_xz_x[j]);

                dy_xxz_x[j] = fr * dy_xz_x[j] + f2t * (dy_z_x[j] + dy_xz_0[j]);

                dz_xxz_x[j] = fr * dz_xz_x[j] + f2t * (dz_z_x[j] + dz_xz_0[j]);

                dx_xxz_y[j] = fr * dx_xz_y[j] + f2t * (dx_z_y[j] + s_xz_y[j]);

                dy_xxz_y[j] = fr * dy_xz_y[j] + f2t * dy_z_y[j];

                dz_xxz_y[j] = fr * dz_xz_y[j] + f2t * dz_z_y[j];

                dx_xxz_z[j] = fr * dx_xz_z[j] + f2t * (dx_z_z[j] + s_xz_z[j]);

                dy_xxz_z[j] = fr * dy_xz_z[j] + f2t * dy_z_z[j];

                dz_xxz_z[j] = fr * dz_xz_z[j] + f2t * dz_z_z[j];

                dx_xyy_x[j] = fr * dx_yy_x[j] + f2t * (dx_yy_0[j] + s_yy_x[j]);

                dy_xyy_x[j] = fr * dy_yy_x[j] + f2t * dy_yy_0[j];

                dz_xyy_x[j] = fr * dz_yy_x[j] + f2t * dz_yy_0[j];

                dx_xyy_y[j] = fr * dx_yy_y[j] + f2t * s_yy_y[j];

                dy_xyy_y[j] = fr * dy_yy_y[j];

                dz_xyy_y[j] = fr * dz_yy_y[j];

                dx_xyy_z[j] = fr * dx_yy_z[j] + f2t * s_yy_z[j];

                dy_xyy_z[j] = fr * dy_yy_z[j];

                dz_xyy_z[j] = fr * dz_yy_z[j];

                dx_xyz_x[j] = fr * dx_yz_x[j] + f2t * (dx_yz_0[j] + s_yz_x[j]);

                dy_xyz_x[j] = fr * dy_yz_x[j] + f2t * dy_yz_0[j];

                dz_xyz_x[j] = fr * dz_yz_x[j] + f2t * dz_yz_0[j];

                dx_xyz_y[j] = fr * dx_yz_y[j] + f2t * s_yz_y[j];

                dy_xyz_y[j] = fr * dy_yz_y[j];

                dz_xyz_y[j] = fr * dz_yz_y[j];

                dx_xyz_z[j] = fr * dx_yz_z[j] + f2t * s_yz_z[j];

                dy_xyz_z[j] = fr * dy_yz_z[j];

                dz_xyz_z[j] = fr * dz_yz_z[j];

                dx_xzz_x[j] = fr * dx_zz_x[j] + f2t * (dx_zz_0[j] + s_zz_x[j]);

                dy_xzz_x[j] = fr * dy_zz_x[j] + f2t * dy_zz_0[j];

                dz_xzz_x[j] = fr * dz_zz_x[j] + f2t * dz_zz_0[j];

                dx_xzz_y[j] = fr * dx_zz_y[j] + f2t * s_zz_y[j];

                dy_xzz_y[j] = fr * dy_zz_y[j];

                dz_xzz_y[j] = fr * dz_zz_y[j];

                dx_xzz_z[j] = fr * dx_zz_z[j] + f2t * s_zz_z[j];

                dy_xzz_z[j] = fr * dy_zz_z[j];

                dz_xzz_z[j] = fr * dz_zz_z[j];

                // leading y component

                fr = pay[j];

                dx_yyy_x[j] = fr * dx_yy_x[j] + f2t * 2.0 * dx_y_x[j];

                dy_yyy_x[j] = fr * dy_yy_x[j] + f2t * (2.0 * dy_y_x[j] + s_yy_x[j]);

                dz_yyy_x[j] = fr * dz_yy_x[j] + f2t * 2.0 * dz_y_x[j];

                dx_yyy_y[j] = fr * dx_yy_y[j] + f2t * (2.0 * dx_y_y[j] + dx_yy_0[j]);

                dy_yyy_y[j] = fr * dy_yy_y[j] + f2t * (2.0 * dy_y_y[j] + dy_yy_0[j] + s_yy_y[j]);

                dz_yyy_y[j] = fr * dz_yy_y[j] + f2t * (2.0 * dz_y_y[j] + dz_yy_0[j]);

                dx_yyy_z[j] = fr * dx_yy_z[j] + f2t * 2.0 * dx_y_z[j];

                dy_yyy_z[j] = fr * dy_yy_z[j] + f2t * (2.0 * dy_y_z[j] + s_yy_z[j]);

                dz_yyy_z[j] = fr * dz_yy_z[j] + f2t * 2.0 * dz_y_z[j];

                dx_yyz_x[j] = fr * dx_yz_x[j] + f2t * dx_z_x[j];

                dy_yyz_x[j] = fr * dy_yz_x[j] + f2t * (dy_z_x[j] + s_yz_x[j]);

                dz_yyz_x[j] = fr * dz_yz_x[j] + f2t * dz_z_x[j];

                dx_yyz_y[j] = fr * dx_yz_y[j] + f2t * (dx_z_y[j] + dx_yz_0[j]);

                dy_yyz_y[j] = fr * dy_yz_y[j] + f2t * (dy_z_y[j] + dy_yz_0[j] + s_yz_y[j]);

                dz_yyz_y[j] = fr * dz_yz_y[j] + f2t * (dz_z_y[j] + dz_yz_0[j]);

                dx_yyz_z[j] = fr * dx_yz_z[j] + f2t * dx_z_z[j];

                dy_yyz_z[j] = fr * dy_yz_z[j] + f2t * (dy_z_z[j] + s_yz_z[j]);

                dz_yyz_z[j] = fr * dz_yz_z[j] + f2t * dz_z_z[j];

                dx_yzz_x[j] = fr * dx_zz_x[j];

                dy_yzz_x[j] = fr * dy_zz_x[j] + f2t * s_zz_x[j];

                dz_yzz_x[j] = fr * dz_zz_x[j];

                dx_yzz_y[j] = fr * dx_zz_y[j] + f2t * dx_zz_0[j];

                dy_yzz_y[j] = fr * dy_zz_y[j] + f2t * (dy_zz_0[j] + s_zz_y[j]);

                dz_yzz_y[j] = fr * dz_zz_y[j] + f2t * dz_zz_0[j];

                dx_yzz_z[j] = fr * dx_zz_z[j];

                dy_yzz_z[j] = fr * dy_zz_z[j] + f2t * s_zz_z[j];

                dz_yzz_z[j] = fr * dz_zz_z[j];

                // leading z component

                fr = paz[j];

                dx_zzz_x[j] = fr * dx_zz_x[j] + f2t * 2.0 * dx_z_x[j];

                dy_zzz_x[j] = fr * dy_zz_x[j] + f2t * 2.0 * dy_z_x[j];

                dz_zzz_x[j] = fr * dz_zz_x[j] + f2t * (2.0 * dz_z_x[j] + s_zz_x[j]);

                dx_zzz_y[j] = fr * dx_zz_y[j] + f2t * 2.0 * dx_z_y[j];

                dy_zzz_y[j] = fr * dy_zz_y[j] + f2t * 2.0 * dy_z_y[j];

                dz_zzz_y[j] = fr * dz_zz_y[j] + f2t * (2.0 * dz_z_y[j] + s_zz_y[j]);

                dx_zzz_z[j] = fr * dx_zz_z[j] + f2t * (2.0 * dx_z_z[j] + dx_zz_0[j]);

                dy_zzz_z[j] = fr * dy_zz_z[j] + f2t * (2.0 * dy_z_z[j] + dy_zz_0[j]);

                dz_zzz_z[j] = fr * dz_zz_z[j] + f2t * (2.0 * dz_z_z[j] + dz_zz_0[j] + s_zz_z[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForSG(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {0, 4, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {0, 4, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 1, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PB)

            auto pbx = pbDistances.data(3 * idx);

            auto pby = pbDistances.data(3 * idx + 1);

            auto pbz = pbDistances.data(3 * idx + 2);

            // set up pointers to (S|M|G) integrals

            auto dx_0_xxxx = primBuffer.data(doff + 15 * idx);

            auto dx_0_xxxy = primBuffer.data(doff + 15 * idx + 1);

            auto dx_0_xxxz = primBuffer.data(doff + 15 * idx + 2);

            auto dx_0_xxyy = primBuffer.data(doff + 15 * idx + 3);

            auto dx_0_xxyz = primBuffer.data(doff + 15 * idx + 4);

            auto dx_0_xxzz = primBuffer.data(doff + 15 * idx + 5);

            auto dx_0_xyyy = primBuffer.data(doff + 15 * idx + 6);

            auto dx_0_xyyz = primBuffer.data(doff + 15 * idx + 7);

            auto dx_0_xyzz = primBuffer.data(doff + 15 * idx + 8);

            auto dx_0_xzzz = primBuffer.data(doff + 15 * idx + 9);

            auto dx_0_yyyy = primBuffer.data(doff + 15 * idx + 10);

            auto dx_0_yyyz = primBuffer.data(doff + 15 * idx + 11);

            auto dx_0_yyzz = primBuffer.data(doff + 15 * idx + 12);

            auto dx_0_yzzz = primBuffer.data(doff + 15 * idx + 13);

            auto dx_0_zzzz = primBuffer.data(doff + 15 * idx + 14);

            auto dy_0_xxxx = primBuffer.data(doff + 15 * bdim + 15 * idx);

            auto dy_0_xxxy = primBuffer.data(doff + 15 * bdim + 15 * idx + 1);

            auto dy_0_xxxz = primBuffer.data(doff + 15 * bdim + 15 * idx + 2);

            auto dy_0_xxyy = primBuffer.data(doff + 15 * bdim + 15 * idx + 3);

            auto dy_0_xxyz = primBuffer.data(doff + 15 * bdim + 15 * idx + 4);

            auto dy_0_xxzz = primBuffer.data(doff + 15 * bdim + 15 * idx + 5);

            auto dy_0_xyyy = primBuffer.data(doff + 15 * bdim + 15 * idx + 6);

            auto dy_0_xyyz = primBuffer.data(doff + 15 * bdim + 15 * idx + 7);

            auto dy_0_xyzz = primBuffer.data(doff + 15 * bdim + 15 * idx + 8);

            auto dy_0_xzzz = primBuffer.data(doff + 15 * bdim + 15 * idx + 9);

            auto dy_0_yyyy = primBuffer.data(doff + 15 * bdim + 15 * idx + 10);

            auto dy_0_yyyz = primBuffer.data(doff + 15 * bdim + 15 * idx + 11);

            auto dy_0_yyzz = primBuffer.data(doff + 15 * bdim + 15 * idx + 12);

            auto dy_0_yzzz = primBuffer.data(doff + 15 * bdim + 15 * idx + 13);

            auto dy_0_zzzz = primBuffer.data(doff + 15 * bdim + 15 * idx + 14);

            auto dz_0_xxxx = primBuffer.data(doff + 30 * bdim + 15 * idx);

            auto dz_0_xxxy = primBuffer.data(doff + 30 * bdim + 15 * idx + 1);

            auto dz_0_xxxz = primBuffer.data(doff + 30 * bdim + 15 * idx + 2);

            auto dz_0_xxyy = primBuffer.data(doff + 30 * bdim + 15 * idx + 3);

            auto dz_0_xxyz = primBuffer.data(doff + 30 * bdim + 15 * idx + 4);

            auto dz_0_xxzz = primBuffer.data(doff + 30 * bdim + 15 * idx + 5);

            auto dz_0_xyyy = primBuffer.data(doff + 30 * bdim + 15 * idx + 6);

            auto dz_0_xyyz = primBuffer.data(doff + 30 * bdim + 15 * idx + 7);

            auto dz_0_xyzz = primBuffer.data(doff + 30 * bdim + 15 * idx + 8);

            auto dz_0_xzzz = primBuffer.data(doff + 30 * bdim + 15 * idx + 9);

            auto dz_0_yyyy = primBuffer.data(doff + 30 * bdim + 15 * idx + 10);

            auto dz_0_yyyz = primBuffer.data(doff + 30 * bdim + 15 * idx + 11);

            auto dz_0_yyzz = primBuffer.data(doff + 30 * bdim + 15 * idx + 12);

            auto dz_0_yzzz = primBuffer.data(doff + 30 * bdim + 15 * idx + 13);

            auto dz_0_zzzz = primBuffer.data(doff + 30 * bdim + 15 * idx + 14);

            // set up pointers to (S|M|F) integrals

            auto dx_0_xxx = primBuffer.data(d1off + 10 * idx);

            auto dx_0_xxy = primBuffer.data(d1off + 10 * idx + 1);

            auto dx_0_xxz = primBuffer.data(d1off + 10 * idx + 2);

            auto dx_0_xyy = primBuffer.data(d1off + 10 * idx + 3);

            auto dx_0_xyz = primBuffer.data(d1off + 10 * idx + 4);

            auto dx_0_xzz = primBuffer.data(d1off + 10 * idx + 5);

            auto dx_0_yyy = primBuffer.data(d1off + 10 * idx + 6);

            auto dx_0_yyz = primBuffer.data(d1off + 10 * idx + 7);

            auto dx_0_yzz = primBuffer.data(d1off + 10 * idx + 8);

            auto dx_0_zzz = primBuffer.data(d1off + 10 * idx + 9);

            auto dy_0_xxx = primBuffer.data(d1off + 10 * bdim + 10 * idx);

            auto dy_0_xxy = primBuffer.data(d1off + 10 * bdim + 10 * idx + 1);

            auto dy_0_xxz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 2);

            auto dy_0_xyy = primBuffer.data(d1off + 10 * bdim + 10 * idx + 3);

            auto dy_0_xyz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 4);

            auto dy_0_xzz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 5);

            auto dy_0_yyy = primBuffer.data(d1off + 10 * bdim + 10 * idx + 6);

            auto dy_0_yyz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 7);

            auto dy_0_yzz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 8);

            auto dy_0_zzz = primBuffer.data(d1off + 10 * bdim + 10 * idx + 9);

            auto dz_0_xxx = primBuffer.data(d1off + 20 * bdim + 10 * idx);

            auto dz_0_xxy = primBuffer.data(d1off + 20 * bdim + 10 * idx + 1);

            auto dz_0_xxz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 2);

            auto dz_0_xyy = primBuffer.data(d1off + 20 * bdim + 10 * idx + 3);

            auto dz_0_xyz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 4);

            auto dz_0_xzz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 5);

            auto dz_0_yyy = primBuffer.data(d1off + 20 * bdim + 10 * idx + 6);

            auto dz_0_yyz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 7);

            auto dz_0_yzz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 8);

            auto dz_0_zzz = primBuffer.data(d1off + 20 * bdim + 10 * idx + 9);

            // set up pointers to (S|M|D) integrals

            auto dx_0_xx = primBuffer.data(d2off + 6 * idx);

            auto dx_0_xy = primBuffer.data(d2off + 6 * idx + 1);

            auto dx_0_xz = primBuffer.data(d2off + 6 * idx + 2);

            auto dx_0_yy = primBuffer.data(d2off + 6 * idx + 3);

            auto dx_0_yz = primBuffer.data(d2off + 6 * idx + 4);

            auto dx_0_zz = primBuffer.data(d2off + 6 * idx + 5);

            auto dy_0_xx = primBuffer.data(d2off + 6 * bdim + 6 * idx);

            auto dy_0_xy = primBuffer.data(d2off + 6 * bdim + 6 * idx + 1);

            auto dy_0_xz = primBuffer.data(d2off + 6 * bdim + 6 * idx + 2);

            auto dy_0_yy = primBuffer.data(d2off + 6 * bdim + 6 * idx + 3);

            auto dy_0_yz = primBuffer.data(d2off + 6 * bdim + 6 * idx + 4);

            auto dy_0_zz = primBuffer.data(d2off + 6 * bdim + 6 * idx + 5);

            auto dz_0_xx = primBuffer.data(d2off + 12 * bdim + 6 * idx);

            auto dz_0_xy = primBuffer.data(d2off + 12 * bdim + 6 * idx + 1);

            auto dz_0_xz = primBuffer.data(d2off + 12 * bdim + 6 * idx + 2);

            auto dz_0_yy = primBuffer.data(d2off + 12 * bdim + 6 * idx + 3);

            auto dz_0_yz = primBuffer.data(d2off + 12 * bdim + 6 * idx + 4);

            auto dz_0_zz = primBuffer.data(d2off + 12 * bdim + 6 * idx + 5);

            // set up pointers to (S|F) integrals

            auto s_0_xxx = primBuffer.data(soff + 10 * idx);

            auto s_0_xxy = primBuffer.data(soff + 10 * idx + 1);

            auto s_0_xxz = primBuffer.data(soff + 10 * idx + 2);

            auto s_0_xyy = primBuffer.data(soff + 10 * idx + 3);

            auto s_0_xyz = primBuffer.data(soff + 10 * idx + 4);

            auto s_0_xzz = primBuffer.data(soff + 10 * idx + 5);

            auto s_0_yyy = primBuffer.data(soff + 10 * idx + 6);

            auto s_0_yyz = primBuffer.data(soff + 10 * idx + 7);

            auto s_0_yzz = primBuffer.data(soff + 10 * idx + 8);

            auto s_0_zzz = primBuffer.data(soff + 10 * idx + 9);

            // set up pointers to (S|D) integrals

            auto s_0_xx = primBuffer.data(s1off + 6 * idx);

            auto s_0_xy = primBuffer.data(s1off + 6 * idx + 1);

            auto s_0_xz = primBuffer.data(s1off + 6 * idx + 2);

            auto s_0_yy = primBuffer.data(s1off + 6 * idx + 3);

            auto s_0_yz = primBuffer.data(s1off + 6 * idx + 4);

            auto s_0_zz = primBuffer.data(s1off + 6 * idx + 5);

            // set up pointers to (S|P) integrals

            auto s_0_x = primBuffer.data(s2off + 3 * idx);

            auto s_0_y = primBuffer.data(s2off + 3 * idx + 1);

            auto s_0_z = primBuffer.data(s2off + 3 * idx + 2);

            #pragma omp simd aligned(fx, pbx, pby, pbz, dx_0_xxxx, dx_0_xxxy, dx_0_xxxz,\
                                     dx_0_xxyy, dx_0_xxyz, dx_0_xxzz, dx_0_xyyy,\
                                     dx_0_xyyz, dx_0_xyzz, dx_0_xzzz, dx_0_yyyy,\
                                     dx_0_yyyz, dx_0_yyzz, dx_0_yzzz, dx_0_zzzz,\
                                     dy_0_xxxx, dy_0_xxxy, dy_0_xxxz, dy_0_xxyy,\
                                     dy_0_xxyz, dy_0_xxzz, dy_0_xyyy, dy_0_xyyz,\
                                     dy_0_xyzz, dy_0_xzzz, dy_0_yyyy, dy_0_yyyz,\
                                     dy_0_yyzz, dy_0_yzzz, dy_0_zzzz, dz_0_xxxx,\
                                     dz_0_xxxy, dz_0_xxxz, dz_0_xxyy, dz_0_xxyz,\
                                     dz_0_xxzz, dz_0_xyyy, dz_0_xyyz, dz_0_xyzz,\
                                     dz_0_xzzz, dz_0_yyyy, dz_0_yyyz, dz_0_yyzz,\
                                     dz_0_yzzz, dz_0_zzzz, dx_0_xxx, dx_0_xxy,\
                                     dx_0_xxz, dx_0_xyy, dx_0_xyz, dx_0_xzz, dx_0_yyy,\
                                     dx_0_yyz, dx_0_yzz, dx_0_zzz, dy_0_xxx, dy_0_xxy,\
                                     dy_0_xxz, dy_0_xyy, dy_0_xyz, dy_0_xzz, dy_0_yyy,\
                                     dy_0_yyz, dy_0_yzz, dy_0_zzz, dz_0_xxx, dz_0_xxy,\
                                     dz_0_xxz, dz_0_xyy, dz_0_xyz, dz_0_xzz, dz_0_yyy,\
                                     dz_0_yyz, dz_0_yzz, dz_0_zzz, dx_0_xx, dx_0_xy,\
                                     dx_0_xz, dx_0_yy, dx_0_yz, dx_0_zz, dy_0_xx,\
                                     dy_0_xy, dy_0_xz, dy_0_yy, dy_0_yz, dy_0_zz,\
                                     dz_0_xx, dz_0_xy, dz_0_xz, dz_0_yy, dz_0_yz,\
                                     dz_0_zz, s_0_xxx, s_0_xxy, s_0_xxz, s_0_xyy,\
                                     s_0_xyz, s_0_xzz, s_0_yyy, s_0_yyz, s_0_yzz,\
                                     s_0_zzz, s_0_xx, s_0_xy, s_0_xz, s_0_yy, s_0_yz,\
                                     s_0_zz, s_0_x, s_0_y, s_0_z: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pbx[j];

                s_0_xxx[j] = fr * s_0_xx[j] + 2.0 * f2t * s_0_x[j];

                s_0_xxy[j] = fr * s_0_xy[j] + f2t * s_0_y[j];

                s_0_xxz[j] = fr * s_0_xz[j] + f2t * s_0_z[j];

                s_0_xyy[j] = fr * s_0_yy[j];

                s_0_xyz[j] = fr * s_0_yz[j];

                s_0_xzz[j] = fr * s_0_zz[j];

                // leading y component

                fr = pby[j];

                s_0_yyy[j] = fr * s_0_yy[j] + 2.0 * f2t * s_0_y[j];

                s_0_yyz[j] = fr * s_0_yz[j] + f2t * s_0_z[j];

                s_0_yzz[j] = fr * s_0_zz[j];

                // leading z component

                s_0_zzz[j] = pbz[j] * s_0_zz[j] + 2.0 * f2t * s_0_z[j];

                // electric dipole integrals

                // leading x component

                fr = pbx[j];

                dx_0_xxxx[j] = fr * dx_0_xxx[j] + f2t * (3.0 * dx_0_xx[j] + s_0_xxx[j]);

                dy_0_xxxx[j] = fr * dy_0_xxx[j] + 3.0 * f2t * dy_0_xx[j];

                dz_0_xxxx[j] = fr * dz_0_xxx[j] + 3.0 * f2t * dz_0_xx[j];

                dx_0_xxxy[j] = fr * dx_0_xxy[j] + f2t * (2.0 * dx_0_xy[j] + s_0_xxy[j]);

                dy_0_xxxy[j] = fr * dy_0_xxy[j] + 2.0 * f2t * dy_0_xy[j];

                dz_0_xxxy[j] = fr * dz_0_xxy[j] + 2.0 * f2t * dz_0_xy[j];

                dx_0_xxxz[j] = fr * dx_0_xxz[j] + f2t * (2.0 * dx_0_xz[j] + s_0_xxz[j]);

                dy_0_xxxz[j] = fr * dy_0_xxz[j] + 2.0 * f2t * dy_0_xz[j];

                dz_0_xxxz[j] = fr * dz_0_xxz[j] + 2.0 * f2t * dz_0_xz[j];

                dx_0_xxyy[j] = fr * dx_0_xyy[j] + f2t * (dx_0_yy[j] + s_0_xyy[j]);

                dy_0_xxyy[j] = fr * dy_0_xyy[j] + f2t * dy_0_yy[j];

                dz_0_xxyy[j] = fr * dz_0_xyy[j] + f2t * dz_0_yy[j];

                dx_0_xxyz[j] = fr * dx_0_xyz[j] + f2t * (dx_0_yz[j] + s_0_xyz[j]);

                dy_0_xxyz[j] = fr * dy_0_xyz[j] + f2t * dy_0_yz[j];

                dz_0_xxyz[j] = fr * dz_0_xyz[j] + f2t * dz_0_yz[j];

                dx_0_xxzz[j] = fr * dx_0_xzz[j] + f2t * (dx_0_zz[j] + s_0_xzz[j]);

                dy_0_xxzz[j] = fr * dy_0_xzz[j] + f2t * dy_0_zz[j];

                dz_0_xxzz[j] = fr * dz_0_xzz[j] + f2t * dz_0_zz[j];

                dx_0_xyyy[j] = fr * dx_0_yyy[j] + f2t * s_0_yyy[j];

                dy_0_xyyy[j] = fr * dy_0_yyy[j];

                dz_0_xyyy[j] = fr * dz_0_yyy[j];

                dx_0_xyyz[j] = fr * dx_0_yyz[j] + f2t * s_0_yyz[j];

                dy_0_xyyz[j] = fr * dy_0_yyz[j];

                dz_0_xyyz[j] = fr * dz_0_yyz[j];

                dx_0_xyzz[j] = fr * dx_0_yzz[j] + f2t * s_0_yzz[j];

                dy_0_xyzz[j] = fr * dy_0_yzz[j];

                dz_0_xyzz[j] = fr * dz_0_yzz[j];

                dx_0_xzzz[j] = fr * dx_0_zzz[j] + f2t * s_0_zzz[j];

                dy_0_xzzz[j] = fr * dy_0_zzz[j];

                dz_0_xzzz[j] = fr * dz_0_zzz[j];

                // leading y component

                fr = pby[j];

                dx_0_yyyy[j] = fr * dx_0_yyy[j] + 3.0 * f2t * dx_0_yy[j];

                dy_0_yyyy[j] = fr * dy_0_yyy[j] + f2t * (3.0 * dy_0_yy[j] + s_0_yyy[j]);

                dz_0_yyyy[j] = fr * dz_0_yyy[j] + 3.0 * f2t * dz_0_yy[j];

                dx_0_yyyz[j] = fr * dx_0_yyz[j] + 2.0 * f2t * dx_0_yz[j];

                dy_0_yyyz[j] = fr * dy_0_yyz[j] + f2t * (2.0 * dy_0_yz[j] + s_0_yyz[j]);

                dz_0_yyyz[j] = fr * dz_0_yyz[j] + 2.0 * f2t * dz_0_yz[j];

                dx_0_yyzz[j] = fr * dx_0_yzz[j] + f2t * dx_0_zz[j];

                dy_0_yyzz[j] = fr * dy_0_yzz[j] + f2t * (dy_0_zz[j] + s_0_yzz[j]);

                dz_0_yyzz[j] = fr * dz_0_yzz[j] + f2t * dz_0_zz[j];

                dx_0_yzzz[j] = fr * dx_0_zzz[j];

                dy_0_yzzz[j] = fr * dy_0_zzz[j] + f2t * s_0_zzz[j];

                dz_0_yzzz[j] = fr * dz_0_zzz[j];

                // leading z component

                fr = pbz[j];

                dx_0_zzzz[j] = fr * dx_0_zzz[j] + 3.0 * f2t * dx_0_zz[j];

                dy_0_zzzz[j] = fr * dy_0_zzz[j] + 3.0 * f2t * dy_0_zz[j];

                dz_0_zzzz[j] = fr * dz_0_zzz[j] + f2t * (3.0 * dz_0_zz[j] + s_0_zzz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForGS(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {4, 0, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {4, 0, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {3, 0, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 0, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 0, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (G|M|S) integrals

            auto dx_xxxx_0 = primBuffer.data(doff + 15 * idx);

            auto dx_xxxy_0 = primBuffer.data(doff + 15 * idx + 1);

            auto dx_xxxz_0 = primBuffer.data(doff + 15 * idx + 2);

            auto dx_xxyy_0 = primBuffer.data(doff + 15 * idx + 3);

            auto dx_xxyz_0 = primBuffer.data(doff + 15 * idx + 4);

            auto dx_xxzz_0 = primBuffer.data(doff + 15 * idx + 5);

            auto dx_xyyy_0 = primBuffer.data(doff + 15 * idx + 6);

            auto dx_xyyz_0 = primBuffer.data(doff + 15 * idx + 7);

            auto dx_xyzz_0 = primBuffer.data(doff + 15 * idx + 8);

            auto dx_xzzz_0 = primBuffer.data(doff + 15 * idx + 9);

            auto dx_yyyy_0 = primBuffer.data(doff + 15 * idx + 10);

            auto dx_yyyz_0 = primBuffer.data(doff + 15 * idx + 11);

            auto dx_yyzz_0 = primBuffer.data(doff + 15 * idx + 12);

            auto dx_yzzz_0 = primBuffer.data(doff + 15 * idx + 13);

            auto dx_zzzz_0 = primBuffer.data(doff + 15 * idx + 14);

            auto dy_xxxx_0 = primBuffer.data(doff + 15 * bdim + 15 * idx);

            auto dy_xxxy_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 1);

            auto dy_xxxz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 2);

            auto dy_xxyy_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 3);

            auto dy_xxyz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 4);

            auto dy_xxzz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 5);

            auto dy_xyyy_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 6);

            auto dy_xyyz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 7);

            auto dy_xyzz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 8);

            auto dy_xzzz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 9);

            auto dy_yyyy_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 10);

            auto dy_yyyz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 11);

            auto dy_yyzz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 12);

            auto dy_yzzz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 13);

            auto dy_zzzz_0 = primBuffer.data(doff + 15 * bdim + 15 * idx + 14);

            auto dz_xxxx_0 = primBuffer.data(doff + 30 * bdim + 15 * idx);

            auto dz_xxxy_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 1);

            auto dz_xxxz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 2);

            auto dz_xxyy_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 3);

            auto dz_xxyz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 4);

            auto dz_xxzz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 5);

            auto dz_xyyy_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 6);

            auto dz_xyyz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 7);

            auto dz_xyzz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 8);

            auto dz_xzzz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 9);

            auto dz_yyyy_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 10);

            auto dz_yyyz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 11);

            auto dz_yyzz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 12);

            auto dz_yzzz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 13);

            auto dz_zzzz_0 = primBuffer.data(doff + 30 * bdim + 15 * idx + 14);

            // set up pointers to (F|M|S) integrals

            auto dx_xxx_0 = primBuffer.data(d1off + 10 * idx);

            auto dx_xxy_0 = primBuffer.data(d1off + 10 * idx + 1);

            auto dx_xxz_0 = primBuffer.data(d1off + 10 * idx + 2);

            auto dx_xyy_0 = primBuffer.data(d1off + 10 * idx + 3);

            auto dx_xyz_0 = primBuffer.data(d1off + 10 * idx + 4);

            auto dx_xzz_0 = primBuffer.data(d1off + 10 * idx + 5);

            auto dx_yyy_0 = primBuffer.data(d1off + 10 * idx + 6);

            auto dx_yyz_0 = primBuffer.data(d1off + 10 * idx + 7);

            auto dx_yzz_0 = primBuffer.data(d1off + 10 * idx + 8);

            auto dx_zzz_0 = primBuffer.data(d1off + 10 * idx + 9);

            auto dy_xxx_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx);

            auto dy_xxy_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 1);

            auto dy_xxz_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 2);

            auto dy_xyy_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 3);

            auto dy_xyz_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 4);

            auto dy_xzz_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 5);

            auto dy_yyy_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 6);

            auto dy_yyz_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 7);

            auto dy_yzz_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 8);

            auto dy_zzz_0 = primBuffer.data(d1off + 10 * bdim + 10 * idx + 9);

            auto dz_xxx_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx);

            auto dz_xxy_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 1);

            auto dz_xxz_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 2);

            auto dz_xyy_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 3);

            auto dz_xyz_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 4);

            auto dz_xzz_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 5);

            auto dz_yyy_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 6);

            auto dz_yyz_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 7);

            auto dz_yzz_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 8);

            auto dz_zzz_0 = primBuffer.data(d1off + 20 * bdim + 10 * idx + 9);

            // set up pointers to (D|M|S) integrals

            auto dx_xx_0 = primBuffer.data(d2off + 6 * idx);

            auto dx_xy_0 = primBuffer.data(d2off + 6 * idx + 1);

            auto dx_xz_0 = primBuffer.data(d2off + 6 * idx + 2);

            auto dx_yy_0 = primBuffer.data(d2off + 6 * idx + 3);

            auto dx_yz_0 = primBuffer.data(d2off + 6 * idx + 4);

            auto dx_zz_0 = primBuffer.data(d2off + 6 * idx + 5);

            auto dy_xx_0 = primBuffer.data(d2off + 6 * bdim + 6 * idx);

            auto dy_xy_0 = primBuffer.data(d2off + 6 * bdim + 6 * idx + 1);

            auto dy_xz_0 = primBuffer.data(d2off + 6 * bdim + 6 * idx + 2);

            auto dy_yy_0 = primBuffer.data(d2off + 6 * bdim + 6 * idx + 3);

            auto dy_yz_0 = primBuffer.data(d2off + 6 * bdim + 6 * idx + 4);

            auto dy_zz_0 = primBuffer.data(d2off + 6 * bdim + 6 * idx + 5);

            auto dz_xx_0 = primBuffer.data(d2off + 12 * bdim + 6 * idx);

            auto dz_xy_0 = primBuffer.data(d2off + 12 * bdim + 6 * idx + 1);

            auto dz_xz_0 = primBuffer.data(d2off + 12 * bdim + 6 * idx + 2);

            auto dz_yy_0 = primBuffer.data(d2off + 12 * bdim + 6 * idx + 3);

            auto dz_yz_0 = primBuffer.data(d2off + 12 * bdim + 6 * idx + 4);

            auto dz_zz_0 = primBuffer.data(d2off + 12 * bdim + 6 * idx + 5);

            // set up pointers to (F|S) integrals

            auto s_xxx_0 = primBuffer.data(soff + 10 * idx);

            auto s_xxy_0 = primBuffer.data(soff + 10 * idx + 1);

            auto s_xxz_0 = primBuffer.data(soff + 10 * idx + 2);

            auto s_xyy_0 = primBuffer.data(soff + 10 * idx + 3);

            auto s_xyz_0 = primBuffer.data(soff + 10 * idx + 4);

            auto s_xzz_0 = primBuffer.data(soff + 10 * idx + 5);

            auto s_yyy_0 = primBuffer.data(soff + 10 * idx + 6);

            auto s_yyz_0 = primBuffer.data(soff + 10 * idx + 7);

            auto s_yzz_0 = primBuffer.data(soff + 10 * idx + 8);

            auto s_zzz_0 = primBuffer.data(soff + 10 * idx + 9);

            // set up pointers to (D|S) integrals

            auto s_xx_0 = primBuffer.data(s1off + 6 * idx);

            auto s_xy_0 = primBuffer.data(s1off + 6 * idx + 1);

            auto s_xz_0 = primBuffer.data(s1off + 6 * idx + 2);

            auto s_yy_0 = primBuffer.data(s1off + 6 * idx + 3);

            auto s_yz_0 = primBuffer.data(s1off + 6 * idx + 4);

            auto s_zz_0 = primBuffer.data(s1off + 6 * idx + 5);

            // set up pointers to (P|S) integrals

            auto s_x_0 = primBuffer.data(s2off + 3 * idx);

            auto s_y_0 = primBuffer.data(s2off + 3 * idx + 1);

            auto s_z_0 = primBuffer.data(s2off + 3 * idx + 2);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxxx_0, dx_xxxy_0, dx_xxxz_0,\
                                     dx_xxyy_0, dx_xxyz_0, dx_xxzz_0, dx_xyyy_0,\
                                     dx_xyyz_0, dx_xyzz_0, dx_xzzz_0, dx_yyyy_0,\
                                     dx_yyyz_0, dx_yyzz_0, dx_yzzz_0, dx_zzzz_0,\
                                     dy_xxxx_0, dy_xxxy_0, dy_xxxz_0, dy_xxyy_0,\
                                     dy_xxyz_0, dy_xxzz_0, dy_xyyy_0, dy_xyyz_0,\
                                     dy_xyzz_0, dy_xzzz_0, dy_yyyy_0, dy_yyyz_0,\
                                     dy_yyzz_0, dy_yzzz_0, dy_zzzz_0, dz_xxxx_0,\
                                     dz_xxxy_0, dz_xxxz_0, dz_xxyy_0, dz_xxyz_0,\
                                     dz_xxzz_0, dz_xyyy_0, dz_xyyz_0, dz_xyzz_0,\
                                     dz_xzzz_0, dz_yyyy_0, dz_yyyz_0, dz_yyzz_0,\
                                     dz_yzzz_0, dz_zzzz_0, dx_xxx_0, dx_xxy_0,\
                                     dx_xxz_0, dx_xyy_0, dx_xyz_0, dx_xzz_0, dx_yyy_0,\
                                     dx_yyz_0, dx_yzz_0, dx_zzz_0, dy_xxx_0, dy_xxy_0,\
                                     dy_xxz_0, dy_xyy_0, dy_xyz_0, dy_xzz_0, dy_yyy_0,\
                                     dy_yyz_0, dy_yzz_0, dy_zzz_0, dz_xxx_0, dz_xxy_0,\
                                     dz_xxz_0, dz_xyy_0, dz_xyz_0, dz_xzz_0, dz_yyy_0,\
                                     dz_yyz_0, dz_yzz_0, dz_zzz_0, dx_xx_0, dx_xy_0,\
                                     dx_xz_0, dx_yy_0, dx_yz_0, dx_zz_0, dy_xx_0,\
                                     dy_xy_0, dy_xz_0, dy_yy_0, dy_yz_0, dy_zz_0,\
                                     dz_xx_0, dz_xy_0, dz_xz_0, dz_yy_0, dz_yz_0,\
                                     dz_zz_0, s_xxx_0, s_xxy_0, s_xxz_0, s_xyy_0,\
                                     s_xyz_0, s_xzz_0, s_yyy_0, s_yyz_0, s_yzz_0,\
                                     s_zzz_0, s_xx_0, s_xy_0, s_xz_0, s_yy_0, s_yz_0,\
                                     s_zz_0, s_x_0, s_y_0, s_z_0: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xxx_0[j] = fr * s_xx_0[j] + f2t * 2.0 * s_x_0[j];

                s_xxy_0[j] = fr * s_xy_0[j] + f2t * s_y_0[j];

                s_xxz_0[j] = fr * s_xz_0[j] + f2t * s_z_0[j];

                s_xyy_0[j] = fr * s_yy_0[j];

                s_xyz_0[j] = fr * s_yz_0[j];

                s_xzz_0[j] = fr * s_zz_0[j];

                // leading y component

                fr = pay[j];

                s_yyy_0[j] = fr * s_yy_0[j] + f2t * 2.0 * s_y_0[j];

                s_yyz_0[j] = fr * s_yz_0[j] + f2t * s_z_0[j];

                s_yzz_0[j] = fr * s_zz_0[j];

                // leading z component

                s_zzz_0[j] = paz[j] * s_zz_0[j] + f2t * 2.0 * s_z_0[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxxx_0[j] = fr * dx_xxx_0[j] + f2t * (3.0 * dx_xx_0[j] + s_xxx_0[j]);

                dy_xxxx_0[j] = fr * dy_xxx_0[j] + f2t * 3.0 * dy_xx_0[j];

                dz_xxxx_0[j] = fr * dz_xxx_0[j] + f2t * 3.0 * dz_xx_0[j];

                dx_xxxy_0[j] = fr * dx_xxy_0[j] + f2t * (2.0 * dx_xy_0[j] + s_xxy_0[j]);

                dy_xxxy_0[j] = fr * dy_xxy_0[j] + f2t * 2.0 * dy_xy_0[j];

                dz_xxxy_0[j] = fr * dz_xxy_0[j] + f2t * 2.0 * dz_xy_0[j];

                dx_xxxz_0[j] = fr * dx_xxz_0[j] + f2t * (2.0 * dx_xz_0[j] + s_xxz_0[j]);

                dy_xxxz_0[j] = fr * dy_xxz_0[j] + f2t * 2.0 * dy_xz_0[j];

                dz_xxxz_0[j] = fr * dz_xxz_0[j] + f2t * 2.0 * dz_xz_0[j];

                dx_xxyy_0[j] = fr * dx_xyy_0[j] + f2t * (dx_yy_0[j] + s_xyy_0[j]);

                dy_xxyy_0[j] = fr * dy_xyy_0[j] + f2t * dy_yy_0[j];

                dz_xxyy_0[j] = fr * dz_xyy_0[j] + f2t * dz_yy_0[j];

                dx_xxyz_0[j] = fr * dx_xyz_0[j] + f2t * (dx_yz_0[j] + s_xyz_0[j]);

                dy_xxyz_0[j] = fr * dy_xyz_0[j] + f2t * dy_yz_0[j];

                dz_xxyz_0[j] = fr * dz_xyz_0[j] + f2t * dz_yz_0[j];

                dx_xxzz_0[j] = fr * dx_xzz_0[j] + f2t * (dx_zz_0[j] + s_xzz_0[j]);

                dy_xxzz_0[j] = fr * dy_xzz_0[j] + f2t * dy_zz_0[j];

                dz_xxzz_0[j] = fr * dz_xzz_0[j] + f2t * dz_zz_0[j];

                dx_xyyy_0[j] = fr * dx_yyy_0[j] + f2t * s_yyy_0[j];

                dy_xyyy_0[j] = fr * dy_yyy_0[j];

                dz_xyyy_0[j] = fr * dz_yyy_0[j];

                dx_xyyz_0[j] = fr * dx_yyz_0[j] + f2t * s_yyz_0[j];

                dy_xyyz_0[j] = fr * dy_yyz_0[j];

                dz_xyyz_0[j] = fr * dz_yyz_0[j];

                dx_xyzz_0[j] = fr * dx_yzz_0[j] + f2t * s_yzz_0[j];

                dy_xyzz_0[j] = fr * dy_yzz_0[j];

                dz_xyzz_0[j] = fr * dz_yzz_0[j];

                dx_xzzz_0[j] = fr * dx_zzz_0[j] + f2t * s_zzz_0[j];

                dy_xzzz_0[j] = fr * dy_zzz_0[j];

                dz_xzzz_0[j] = fr * dz_zzz_0[j];

                // leading y component

                fr = pay[j];

                dx_yyyy_0[j] = fr * dx_yyy_0[j] + f2t * 3.0 * dx_yy_0[j];

                dy_yyyy_0[j] = fr * dy_yyy_0[j] + f2t * (3.0 * dy_yy_0[j] + s_yyy_0[j]);

                dz_yyyy_0[j] = fr * dz_yyy_0[j] + f2t * 3.0 * dz_yy_0[j];

                dx_yyyz_0[j] = fr * dx_yyz_0[j] + f2t * 2.0 * dx_yz_0[j];

                dy_yyyz_0[j] = fr * dy_yyz_0[j] + f2t * (2.0 * dy_yz_0[j] + s_yyz_0[j]);

                dz_yyyz_0[j] = fr * dz_yyz_0[j] + f2t * 2.0 * dz_yz_0[j];

                dx_yyzz_0[j] = fr * dx_yzz_0[j] + f2t * dx_zz_0[j];

                dy_yyzz_0[j] = fr * dy_yzz_0[j] + f2t * (dy_zz_0[j] + s_yzz_0[j]);

                dz_yyzz_0[j] = fr * dz_yzz_0[j] + f2t * dz_zz_0[j];

                dx_yzzz_0[j] = fr * dx_zzz_0[j];

                dy_yzzz_0[j] = fr * dy_zzz_0[j] + f2t * s_zzz_0[j];

                dz_yzzz_0[j] = fr * dz_zzz_0[j];

                // leading z component

                fr = paz[j];

                dx_zzzz_0[j] = fr * dx_zzz_0[j] + f2t * 3.0 * dx_zz_0[j];

                dy_zzzz_0[j] = fr * dy_zzz_0[j] + f2t * 3.0 * dy_zz_0[j];

                dz_zzzz_0[j] = fr * dz_zzz_0[j] + f2t * (3.0 * dz_zz_0[j] + s_zzz_0[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForDF(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {2, 3, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {2, 3, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (D|M|F) integrals

            auto dx_xx_xxx = primBuffer.data(doff + 60 * idx);

            auto dx_xx_xxy = primBuffer.data(doff + 60 * idx + 1);

            auto dx_xx_xxz = primBuffer.data(doff + 60 * idx + 2);

            auto dx_xx_xyy = primBuffer.data(doff + 60 * idx + 3);

            auto dx_xx_xyz = primBuffer.data(doff + 60 * idx + 4);

            auto dx_xx_xzz = primBuffer.data(doff + 60 * idx + 5);

            auto dx_xx_yyy = primBuffer.data(doff + 60 * idx + 6);

            auto dx_xx_yyz = primBuffer.data(doff + 60 * idx + 7);

            auto dx_xx_yzz = primBuffer.data(doff + 60 * idx + 8);

            auto dx_xx_zzz = primBuffer.data(doff + 60 * idx + 9);

            auto dx_xy_xxx = primBuffer.data(doff + 60 * idx + 10);

            auto dx_xy_xxy = primBuffer.data(doff + 60 * idx + 11);

            auto dx_xy_xxz = primBuffer.data(doff + 60 * idx + 12);

            auto dx_xy_xyy = primBuffer.data(doff + 60 * idx + 13);

            auto dx_xy_xyz = primBuffer.data(doff + 60 * idx + 14);

            auto dx_xy_xzz = primBuffer.data(doff + 60 * idx + 15);

            auto dx_xy_yyy = primBuffer.data(doff + 60 * idx + 16);

            auto dx_xy_yyz = primBuffer.data(doff + 60 * idx + 17);

            auto dx_xy_yzz = primBuffer.data(doff + 60 * idx + 18);

            auto dx_xy_zzz = primBuffer.data(doff + 60 * idx + 19);

            auto dx_xz_xxx = primBuffer.data(doff + 60 * idx + 20);

            auto dx_xz_xxy = primBuffer.data(doff + 60 * idx + 21);

            auto dx_xz_xxz = primBuffer.data(doff + 60 * idx + 22);

            auto dx_xz_xyy = primBuffer.data(doff + 60 * idx + 23);

            auto dx_xz_xyz = primBuffer.data(doff + 60 * idx + 24);

            auto dx_xz_xzz = primBuffer.data(doff + 60 * idx + 25);

            auto dx_xz_yyy = primBuffer.data(doff + 60 * idx + 26);

            auto dx_xz_yyz = primBuffer.data(doff + 60 * idx + 27);

            auto dx_xz_yzz = primBuffer.data(doff + 60 * idx + 28);

            auto dx_xz_zzz = primBuffer.data(doff + 60 * idx + 29);

            auto dx_yy_xxx = primBuffer.data(doff + 60 * idx + 30);

            auto dx_yy_xxy = primBuffer.data(doff + 60 * idx + 31);

            auto dx_yy_xxz = primBuffer.data(doff + 60 * idx + 32);

            auto dx_yy_xyy = primBuffer.data(doff + 60 * idx + 33);

            auto dx_yy_xyz = primBuffer.data(doff + 60 * idx + 34);

            auto dx_yy_xzz = primBuffer.data(doff + 60 * idx + 35);

            auto dx_yy_yyy = primBuffer.data(doff + 60 * idx + 36);

            auto dx_yy_yyz = primBuffer.data(doff + 60 * idx + 37);

            auto dx_yy_yzz = primBuffer.data(doff + 60 * idx + 38);

            auto dx_yy_zzz = primBuffer.data(doff + 60 * idx + 39);

            auto dx_yz_xxx = primBuffer.data(doff + 60 * idx + 40);

            auto dx_yz_xxy = primBuffer.data(doff + 60 * idx + 41);

            auto dx_yz_xxz = primBuffer.data(doff + 60 * idx + 42);

            auto dx_yz_xyy = primBuffer.data(doff + 60 * idx + 43);

            auto dx_yz_xyz = primBuffer.data(doff + 60 * idx + 44);

            auto dx_yz_xzz = primBuffer.data(doff + 60 * idx + 45);

            auto dx_yz_yyy = primBuffer.data(doff + 60 * idx + 46);

            auto dx_yz_yyz = primBuffer.data(doff + 60 * idx + 47);

            auto dx_yz_yzz = primBuffer.data(doff + 60 * idx + 48);

            auto dx_yz_zzz = primBuffer.data(doff + 60 * idx + 49);

            auto dx_zz_xxx = primBuffer.data(doff + 60 * idx + 50);

            auto dx_zz_xxy = primBuffer.data(doff + 60 * idx + 51);

            auto dx_zz_xxz = primBuffer.data(doff + 60 * idx + 52);

            auto dx_zz_xyy = primBuffer.data(doff + 60 * idx + 53);

            auto dx_zz_xyz = primBuffer.data(doff + 60 * idx + 54);

            auto dx_zz_xzz = primBuffer.data(doff + 60 * idx + 55);

            auto dx_zz_yyy = primBuffer.data(doff + 60 * idx + 56);

            auto dx_zz_yyz = primBuffer.data(doff + 60 * idx + 57);

            auto dx_zz_yzz = primBuffer.data(doff + 60 * idx + 58);

            auto dx_zz_zzz = primBuffer.data(doff + 60 * idx + 59);

            auto dy_xx_xxx = primBuffer.data(doff + 60 * bdim + 60 * idx);

            auto dy_xx_xxy = primBuffer.data(doff + 60 * bdim + 60 * idx + 1);

            auto dy_xx_xxz = primBuffer.data(doff + 60 * bdim + 60 * idx + 2);

            auto dy_xx_xyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 3);

            auto dy_xx_xyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 4);

            auto dy_xx_xzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 5);

            auto dy_xx_yyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 6);

            auto dy_xx_yyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 7);

            auto dy_xx_yzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 8);

            auto dy_xx_zzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 9);

            auto dy_xy_xxx = primBuffer.data(doff + 60 * bdim + 60 * idx + 10);

            auto dy_xy_xxy = primBuffer.data(doff + 60 * bdim + 60 * idx + 11);

            auto dy_xy_xxz = primBuffer.data(doff + 60 * bdim + 60 * idx + 12);

            auto dy_xy_xyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 13);

            auto dy_xy_xyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 14);

            auto dy_xy_xzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 15);

            auto dy_xy_yyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 16);

            auto dy_xy_yyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 17);

            auto dy_xy_yzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 18);

            auto dy_xy_zzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 19);

            auto dy_xz_xxx = primBuffer.data(doff + 60 * bdim + 60 * idx + 20);

            auto dy_xz_xxy = primBuffer.data(doff + 60 * bdim + 60 * idx + 21);

            auto dy_xz_xxz = primBuffer.data(doff + 60 * bdim + 60 * idx + 22);

            auto dy_xz_xyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 23);

            auto dy_xz_xyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 24);

            auto dy_xz_xzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 25);

            auto dy_xz_yyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 26);

            auto dy_xz_yyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 27);

            auto dy_xz_yzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 28);

            auto dy_xz_zzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 29);

            auto dy_yy_xxx = primBuffer.data(doff + 60 * bdim + 60 * idx + 30);

            auto dy_yy_xxy = primBuffer.data(doff + 60 * bdim + 60 * idx + 31);

            auto dy_yy_xxz = primBuffer.data(doff + 60 * bdim + 60 * idx + 32);

            auto dy_yy_xyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 33);

            auto dy_yy_xyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 34);

            auto dy_yy_xzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 35);

            auto dy_yy_yyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 36);

            auto dy_yy_yyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 37);

            auto dy_yy_yzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 38);

            auto dy_yy_zzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 39);

            auto dy_yz_xxx = primBuffer.data(doff + 60 * bdim + 60 * idx + 40);

            auto dy_yz_xxy = primBuffer.data(doff + 60 * bdim + 60 * idx + 41);

            auto dy_yz_xxz = primBuffer.data(doff + 60 * bdim + 60 * idx + 42);

            auto dy_yz_xyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 43);

            auto dy_yz_xyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 44);

            auto dy_yz_xzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 45);

            auto dy_yz_yyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 46);

            auto dy_yz_yyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 47);

            auto dy_yz_yzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 48);

            auto dy_yz_zzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 49);

            auto dy_zz_xxx = primBuffer.data(doff + 60 * bdim + 60 * idx + 50);

            auto dy_zz_xxy = primBuffer.data(doff + 60 * bdim + 60 * idx + 51);

            auto dy_zz_xxz = primBuffer.data(doff + 60 * bdim + 60 * idx + 52);

            auto dy_zz_xyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 53);

            auto dy_zz_xyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 54);

            auto dy_zz_xzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 55);

            auto dy_zz_yyy = primBuffer.data(doff + 60 * bdim + 60 * idx + 56);

            auto dy_zz_yyz = primBuffer.data(doff + 60 * bdim + 60 * idx + 57);

            auto dy_zz_yzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 58);

            auto dy_zz_zzz = primBuffer.data(doff + 60 * bdim + 60 * idx + 59);

            auto dz_xx_xxx = primBuffer.data(doff + 120 * bdim + 60 * idx);

            auto dz_xx_xxy = primBuffer.data(doff + 120 * bdim + 60 * idx + 1);

            auto dz_xx_xxz = primBuffer.data(doff + 120 * bdim + 60 * idx + 2);

            auto dz_xx_xyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 3);

            auto dz_xx_xyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 4);

            auto dz_xx_xzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 5);

            auto dz_xx_yyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 6);

            auto dz_xx_yyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 7);

            auto dz_xx_yzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 8);

            auto dz_xx_zzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 9);

            auto dz_xy_xxx = primBuffer.data(doff + 120 * bdim + 60 * idx + 10);

            auto dz_xy_xxy = primBuffer.data(doff + 120 * bdim + 60 * idx + 11);

            auto dz_xy_xxz = primBuffer.data(doff + 120 * bdim + 60 * idx + 12);

            auto dz_xy_xyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 13);

            auto dz_xy_xyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 14);

            auto dz_xy_xzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 15);

            auto dz_xy_yyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 16);

            auto dz_xy_yyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 17);

            auto dz_xy_yzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 18);

            auto dz_xy_zzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 19);

            auto dz_xz_xxx = primBuffer.data(doff + 120 * bdim + 60 * idx + 20);

            auto dz_xz_xxy = primBuffer.data(doff + 120 * bdim + 60 * idx + 21);

            auto dz_xz_xxz = primBuffer.data(doff + 120 * bdim + 60 * idx + 22);

            auto dz_xz_xyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 23);

            auto dz_xz_xyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 24);

            auto dz_xz_xzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 25);

            auto dz_xz_yyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 26);

            auto dz_xz_yyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 27);

            auto dz_xz_yzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 28);

            auto dz_xz_zzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 29);

            auto dz_yy_xxx = primBuffer.data(doff + 120 * bdim + 60 * idx + 30);

            auto dz_yy_xxy = primBuffer.data(doff + 120 * bdim + 60 * idx + 31);

            auto dz_yy_xxz = primBuffer.data(doff + 120 * bdim + 60 * idx + 32);

            auto dz_yy_xyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 33);

            auto dz_yy_xyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 34);

            auto dz_yy_xzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 35);

            auto dz_yy_yyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 36);

            auto dz_yy_yyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 37);

            auto dz_yy_yzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 38);

            auto dz_yy_zzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 39);

            auto dz_yz_xxx = primBuffer.data(doff + 120 * bdim + 60 * idx + 40);

            auto dz_yz_xxy = primBuffer.data(doff + 120 * bdim + 60 * idx + 41);

            auto dz_yz_xxz = primBuffer.data(doff + 120 * bdim + 60 * idx + 42);

            auto dz_yz_xyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 43);

            auto dz_yz_xyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 44);

            auto dz_yz_xzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 45);

            auto dz_yz_yyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 46);

            auto dz_yz_yyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 47);

            auto dz_yz_yzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 48);

            auto dz_yz_zzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 49);

            auto dz_zz_xxx = primBuffer.data(doff + 120 * bdim + 60 * idx + 50);

            auto dz_zz_xxy = primBuffer.data(doff + 120 * bdim + 60 * idx + 51);

            auto dz_zz_xxz = primBuffer.data(doff + 120 * bdim + 60 * idx + 52);

            auto dz_zz_xyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 53);

            auto dz_zz_xyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 54);

            auto dz_zz_xzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 55);

            auto dz_zz_yyy = primBuffer.data(doff + 120 * bdim + 60 * idx + 56);

            auto dz_zz_yyz = primBuffer.data(doff + 120 * bdim + 60 * idx + 57);

            auto dz_zz_yzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 58);

            auto dz_zz_zzz = primBuffer.data(doff + 120 * bdim + 60 * idx + 59);

            // set up pointers to (P|M|F) integrals

            auto dx_x_xxx = primBuffer.data(d1off + 30 * idx);

            auto dx_x_xxy = primBuffer.data(d1off + 30 * idx + 1);

            auto dx_x_xxz = primBuffer.data(d1off + 30 * idx + 2);

            auto dx_x_xyy = primBuffer.data(d1off + 30 * idx + 3);

            auto dx_x_xyz = primBuffer.data(d1off + 30 * idx + 4);

            auto dx_x_xzz = primBuffer.data(d1off + 30 * idx + 5);

            auto dx_x_yyy = primBuffer.data(d1off + 30 * idx + 6);

            auto dx_x_yyz = primBuffer.data(d1off + 30 * idx + 7);

            auto dx_x_yzz = primBuffer.data(d1off + 30 * idx + 8);

            auto dx_x_zzz = primBuffer.data(d1off + 30 * idx + 9);

            auto dx_y_xxx = primBuffer.data(d1off + 30 * idx + 10);

            auto dx_y_xxy = primBuffer.data(d1off + 30 * idx + 11);

            auto dx_y_xxz = primBuffer.data(d1off + 30 * idx + 12);

            auto dx_y_xyy = primBuffer.data(d1off + 30 * idx + 13);

            auto dx_y_xyz = primBuffer.data(d1off + 30 * idx + 14);

            auto dx_y_xzz = primBuffer.data(d1off + 30 * idx + 15);

            auto dx_y_yyy = primBuffer.data(d1off + 30 * idx + 16);

            auto dx_y_yyz = primBuffer.data(d1off + 30 * idx + 17);

            auto dx_y_yzz = primBuffer.data(d1off + 30 * idx + 18);

            auto dx_y_zzz = primBuffer.data(d1off + 30 * idx + 19);

            auto dx_z_xxx = primBuffer.data(d1off + 30 * idx + 20);

            auto dx_z_xxy = primBuffer.data(d1off + 30 * idx + 21);

            auto dx_z_xxz = primBuffer.data(d1off + 30 * idx + 22);

            auto dx_z_xyy = primBuffer.data(d1off + 30 * idx + 23);

            auto dx_z_xyz = primBuffer.data(d1off + 30 * idx + 24);

            auto dx_z_xzz = primBuffer.data(d1off + 30 * idx + 25);

            auto dx_z_yyy = primBuffer.data(d1off + 30 * idx + 26);

            auto dx_z_yyz = primBuffer.data(d1off + 30 * idx + 27);

            auto dx_z_yzz = primBuffer.data(d1off + 30 * idx + 28);

            auto dx_z_zzz = primBuffer.data(d1off + 30 * idx + 29);

            auto dy_x_xxx = primBuffer.data(d1off + 30 * bdim + 30 * idx);

            auto dy_x_xxy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 1);

            auto dy_x_xxz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 2);

            auto dy_x_xyy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 3);

            auto dy_x_xyz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 4);

            auto dy_x_xzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 5);

            auto dy_x_yyy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 6);

            auto dy_x_yyz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 7);

            auto dy_x_yzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 8);

            auto dy_x_zzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 9);

            auto dy_y_xxx = primBuffer.data(d1off + 30 * bdim + 30 * idx + 10);

            auto dy_y_xxy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 11);

            auto dy_y_xxz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 12);

            auto dy_y_xyy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 13);

            auto dy_y_xyz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 14);

            auto dy_y_xzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 15);

            auto dy_y_yyy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 16);

            auto dy_y_yyz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 17);

            auto dy_y_yzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 18);

            auto dy_y_zzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 19);

            auto dy_z_xxx = primBuffer.data(d1off + 30 * bdim + 30 * idx + 20);

            auto dy_z_xxy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 21);

            auto dy_z_xxz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 22);

            auto dy_z_xyy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 23);

            auto dy_z_xyz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 24);

            auto dy_z_xzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 25);

            auto dy_z_yyy = primBuffer.data(d1off + 30 * bdim + 30 * idx + 26);

            auto dy_z_yyz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 27);

            auto dy_z_yzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 28);

            auto dy_z_zzz = primBuffer.data(d1off + 30 * bdim + 30 * idx + 29);

            auto dz_x_xxx = primBuffer.data(d1off + 60 * bdim + 30 * idx);

            auto dz_x_xxy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 1);

            auto dz_x_xxz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 2);

            auto dz_x_xyy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 3);

            auto dz_x_xyz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 4);

            auto dz_x_xzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 5);

            auto dz_x_yyy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 6);

            auto dz_x_yyz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 7);

            auto dz_x_yzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 8);

            auto dz_x_zzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 9);

            auto dz_y_xxx = primBuffer.data(d1off + 60 * bdim + 30 * idx + 10);

            auto dz_y_xxy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 11);

            auto dz_y_xxz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 12);

            auto dz_y_xyy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 13);

            auto dz_y_xyz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 14);

            auto dz_y_xzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 15);

            auto dz_y_yyy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 16);

            auto dz_y_yyz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 17);

            auto dz_y_yzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 18);

            auto dz_y_zzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 19);

            auto dz_z_xxx = primBuffer.data(d1off + 60 * bdim + 30 * idx + 20);

            auto dz_z_xxy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 21);

            auto dz_z_xxz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 22);

            auto dz_z_xyy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 23);

            auto dz_z_xyz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 24);

            auto dz_z_xzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 25);

            auto dz_z_yyy = primBuffer.data(d1off + 60 * bdim + 30 * idx + 26);

            auto dz_z_yyz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 27);

            auto dz_z_yzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 28);

            auto dz_z_zzz = primBuffer.data(d1off + 60 * bdim + 30 * idx + 29);

            // set up pointers to (S|M|F) integrals

            auto dx_0_xxx = primBuffer.data(d2off + 10 * idx);

            auto dx_0_xxy = primBuffer.data(d2off + 10 * idx + 1);

            auto dx_0_xxz = primBuffer.data(d2off + 10 * idx + 2);

            auto dx_0_xyy = primBuffer.data(d2off + 10 * idx + 3);

            auto dx_0_xyz = primBuffer.data(d2off + 10 * idx + 4);

            auto dx_0_xzz = primBuffer.data(d2off + 10 * idx + 5);

            auto dx_0_yyy = primBuffer.data(d2off + 10 * idx + 6);

            auto dx_0_yyz = primBuffer.data(d2off + 10 * idx + 7);

            auto dx_0_yzz = primBuffer.data(d2off + 10 * idx + 8);

            auto dx_0_zzz = primBuffer.data(d2off + 10 * idx + 9);

            auto dy_0_xxx = primBuffer.data(d2off + 10 * bdim + 10 * idx);

            auto dy_0_xxy = primBuffer.data(d2off + 10 * bdim + 10 * idx + 1);

            auto dy_0_xxz = primBuffer.data(d2off + 10 * bdim + 10 * idx + 2);

            auto dy_0_xyy = primBuffer.data(d2off + 10 * bdim + 10 * idx + 3);

            auto dy_0_xyz = primBuffer.data(d2off + 10 * bdim + 10 * idx + 4);

            auto dy_0_xzz = primBuffer.data(d2off + 10 * bdim + 10 * idx + 5);

            auto dy_0_yyy = primBuffer.data(d2off + 10 * bdim + 10 * idx + 6);

            auto dy_0_yyz = primBuffer.data(d2off + 10 * bdim + 10 * idx + 7);

            auto dy_0_yzz = primBuffer.data(d2off + 10 * bdim + 10 * idx + 8);

            auto dy_0_zzz = primBuffer.data(d2off + 10 * bdim + 10 * idx + 9);

            auto dz_0_xxx = primBuffer.data(d2off + 20 * bdim + 10 * idx);

            auto dz_0_xxy = primBuffer.data(d2off + 20 * bdim + 10 * idx + 1);

            auto dz_0_xxz = primBuffer.data(d2off + 20 * bdim + 10 * idx + 2);

            auto dz_0_xyy = primBuffer.data(d2off + 20 * bdim + 10 * idx + 3);

            auto dz_0_xyz = primBuffer.data(d2off + 20 * bdim + 10 * idx + 4);

            auto dz_0_xzz = primBuffer.data(d2off + 20 * bdim + 10 * idx + 5);

            auto dz_0_yyy = primBuffer.data(d2off + 20 * bdim + 10 * idx + 6);

            auto dz_0_yyz = primBuffer.data(d2off + 20 * bdim + 10 * idx + 7);

            auto dz_0_yzz = primBuffer.data(d2off + 20 * bdim + 10 * idx + 8);

            auto dz_0_zzz = primBuffer.data(d2off + 20 * bdim + 10 * idx + 9);

            // set up pointers to (P|M|D) integrals

            auto dx_x_xx = primBuffer.data(dkoff + 18 * idx);

            auto dx_x_xy = primBuffer.data(dkoff + 18 * idx + 1);

            auto dx_x_xz = primBuffer.data(dkoff + 18 * idx + 2);

            auto dx_x_yy = primBuffer.data(dkoff + 18 * idx + 3);

            auto dx_x_yz = primBuffer.data(dkoff + 18 * idx + 4);

            auto dx_x_zz = primBuffer.data(dkoff + 18 * idx + 5);

            auto dx_y_xx = primBuffer.data(dkoff + 18 * idx + 6);

            auto dx_y_xy = primBuffer.data(dkoff + 18 * idx + 7);

            auto dx_y_xz = primBuffer.data(dkoff + 18 * idx + 8);

            auto dx_y_yy = primBuffer.data(dkoff + 18 * idx + 9);

            auto dx_y_yz = primBuffer.data(dkoff + 18 * idx + 10);

            auto dx_y_zz = primBuffer.data(dkoff + 18 * idx + 11);

            auto dx_z_xx = primBuffer.data(dkoff + 18 * idx + 12);

            auto dx_z_xy = primBuffer.data(dkoff + 18 * idx + 13);

            auto dx_z_xz = primBuffer.data(dkoff + 18 * idx + 14);

            auto dx_z_yy = primBuffer.data(dkoff + 18 * idx + 15);

            auto dx_z_yz = primBuffer.data(dkoff + 18 * idx + 16);

            auto dx_z_zz = primBuffer.data(dkoff + 18 * idx + 17);

            auto dy_x_xx = primBuffer.data(dkoff + 18 * bdim + 18 * idx);

            auto dy_x_xy = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 1);

            auto dy_x_xz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 2);

            auto dy_x_yy = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 3);

            auto dy_x_yz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 4);

            auto dy_x_zz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 5);

            auto dy_y_xx = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 6);

            auto dy_y_xy = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 7);

            auto dy_y_xz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 8);

            auto dy_y_yy = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 9);

            auto dy_y_yz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 10);

            auto dy_y_zz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 11);

            auto dy_z_xx = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 12);

            auto dy_z_xy = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 13);

            auto dy_z_xz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 14);

            auto dy_z_yy = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 15);

            auto dy_z_yz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 16);

            auto dy_z_zz = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 17);

            auto dz_x_xx = primBuffer.data(dkoff + 36 * bdim + 18 * idx);

            auto dz_x_xy = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 1);

            auto dz_x_xz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 2);

            auto dz_x_yy = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 3);

            auto dz_x_yz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 4);

            auto dz_x_zz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 5);

            auto dz_y_xx = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 6);

            auto dz_y_xy = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 7);

            auto dz_y_xz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 8);

            auto dz_y_yy = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 9);

            auto dz_y_yz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 10);

            auto dz_y_zz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 11);

            auto dz_z_xx = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 12);

            auto dz_z_xy = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 13);

            auto dz_z_xz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 14);

            auto dz_z_yy = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 15);

            auto dz_z_yz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 16);

            auto dz_z_zz = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 17);

            // set up pointers to (P|F) integrals

            auto s_x_xxx = primBuffer.data(soff + 30 * idx);

            auto s_x_xxy = primBuffer.data(soff + 30 * idx + 1);

            auto s_x_xxz = primBuffer.data(soff + 30 * idx + 2);

            auto s_x_xyy = primBuffer.data(soff + 30 * idx + 3);

            auto s_x_xyz = primBuffer.data(soff + 30 * idx + 4);

            auto s_x_xzz = primBuffer.data(soff + 30 * idx + 5);

            auto s_x_yyy = primBuffer.data(soff + 30 * idx + 6);

            auto s_x_yyz = primBuffer.data(soff + 30 * idx + 7);

            auto s_x_yzz = primBuffer.data(soff + 30 * idx + 8);

            auto s_x_zzz = primBuffer.data(soff + 30 * idx + 9);

            auto s_y_xxx = primBuffer.data(soff + 30 * idx + 10);

            auto s_y_xxy = primBuffer.data(soff + 30 * idx + 11);

            auto s_y_xxz = primBuffer.data(soff + 30 * idx + 12);

            auto s_y_xyy = primBuffer.data(soff + 30 * idx + 13);

            auto s_y_xyz = primBuffer.data(soff + 30 * idx + 14);

            auto s_y_xzz = primBuffer.data(soff + 30 * idx + 15);

            auto s_y_yyy = primBuffer.data(soff + 30 * idx + 16);

            auto s_y_yyz = primBuffer.data(soff + 30 * idx + 17);

            auto s_y_yzz = primBuffer.data(soff + 30 * idx + 18);

            auto s_y_zzz = primBuffer.data(soff + 30 * idx + 19);

            auto s_z_xxx = primBuffer.data(soff + 30 * idx + 20);

            auto s_z_xxy = primBuffer.data(soff + 30 * idx + 21);

            auto s_z_xxz = primBuffer.data(soff + 30 * idx + 22);

            auto s_z_xyy = primBuffer.data(soff + 30 * idx + 23);

            auto s_z_xyz = primBuffer.data(soff + 30 * idx + 24);

            auto s_z_xzz = primBuffer.data(soff + 30 * idx + 25);

            auto s_z_yyy = primBuffer.data(soff + 30 * idx + 26);

            auto s_z_yyz = primBuffer.data(soff + 30 * idx + 27);

            auto s_z_yzz = primBuffer.data(soff + 30 * idx + 28);

            auto s_z_zzz = primBuffer.data(soff + 30 * idx + 29);

            // set up pointers to (S|F) integrals

            auto s_0_xxx = primBuffer.data(s1off + 10 * idx);

            auto s_0_xxy = primBuffer.data(s1off + 10 * idx + 1);

            auto s_0_xxz = primBuffer.data(s1off + 10 * idx + 2);

            auto s_0_xyy = primBuffer.data(s1off + 10 * idx + 3);

            auto s_0_xyz = primBuffer.data(s1off + 10 * idx + 4);

            auto s_0_xzz = primBuffer.data(s1off + 10 * idx + 5);

            auto s_0_yyy = primBuffer.data(s1off + 10 * idx + 6);

            auto s_0_yyz = primBuffer.data(s1off + 10 * idx + 7);

            auto s_0_yzz = primBuffer.data(s1off + 10 * idx + 8);

            auto s_0_zzz = primBuffer.data(s1off + 10 * idx + 9);

            // set up pointers to (S|D) integrals

            auto s_0_xx = primBuffer.data(skoff + 6 * idx);

            auto s_0_xy = primBuffer.data(skoff + 6 * idx + 1);

            auto s_0_xz = primBuffer.data(skoff + 6 * idx + 2);

            auto s_0_yy = primBuffer.data(skoff + 6 * idx + 3);

            auto s_0_yz = primBuffer.data(skoff + 6 * idx + 4);

            auto s_0_zz = primBuffer.data(skoff + 6 * idx + 5);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xx_xxx, dx_xx_xxy, dx_xx_xxz,\
                                     dx_xx_xyy, dx_xx_xyz, dx_xx_xzz, dx_xx_yyy,\
                                     dx_xx_yyz, dx_xx_yzz, dx_xx_zzz, dx_xy_xxx,\
                                     dx_xy_xxy, dx_xy_xxz, dx_xy_xyy, dx_xy_xyz,\
                                     dx_xy_xzz, dx_xy_yyy, dx_xy_yyz, dx_xy_yzz,\
                                     dx_xy_zzz, dx_xz_xxx, dx_xz_xxy, dx_xz_xxz,\
                                     dx_xz_xyy, dx_xz_xyz, dx_xz_xzz, dx_xz_yyy,\
                                     dx_xz_yyz, dx_xz_yzz, dx_xz_zzz, dx_yy_xxx,\
                                     dx_yy_xxy, dx_yy_xxz, dx_yy_xyy, dx_yy_xyz,\
                                     dx_yy_xzz, dx_yy_yyy, dx_yy_yyz, dx_yy_yzz,\
                                     dx_yy_zzz, dx_yz_xxx, dx_yz_xxy, dx_yz_xxz,\
                                     dx_yz_xyy, dx_yz_xyz, dx_yz_xzz, dx_yz_yyy,\
                                     dx_yz_yyz, dx_yz_yzz, dx_yz_zzz, dx_zz_xxx,\
                                     dx_zz_xxy, dx_zz_xxz, dx_zz_xyy, dx_zz_xyz,\
                                     dx_zz_xzz, dx_zz_yyy, dx_zz_yyz, dx_zz_yzz,\
                                     dx_zz_zzz, dy_xx_xxx, dy_xx_xxy, dy_xx_xxz,\
                                     dy_xx_xyy, dy_xx_xyz, dy_xx_xzz, dy_xx_yyy,\
                                     dy_xx_yyz, dy_xx_yzz, dy_xx_zzz, dy_xy_xxx,\
                                     dy_xy_xxy, dy_xy_xxz, dy_xy_xyy, dy_xy_xyz,\
                                     dy_xy_xzz, dy_xy_yyy, dy_xy_yyz, dy_xy_yzz,\
                                     dy_xy_zzz, dy_xz_xxx, dy_xz_xxy, dy_xz_xxz,\
                                     dy_xz_xyy, dy_xz_xyz, dy_xz_xzz, dy_xz_yyy,\
                                     dy_xz_yyz, dy_xz_yzz, dy_xz_zzz, dy_yy_xxx,\
                                     dy_yy_xxy, dy_yy_xxz, dy_yy_xyy, dy_yy_xyz,\
                                     dy_yy_xzz, dy_yy_yyy, dy_yy_yyz, dy_yy_yzz,\
                                     dy_yy_zzz, dy_yz_xxx, dy_yz_xxy, dy_yz_xxz,\
                                     dy_yz_xyy, dy_yz_xyz, dy_yz_xzz, dy_yz_yyy,\
                                     dy_yz_yyz, dy_yz_yzz, dy_yz_zzz, dy_zz_xxx,\
                                     dy_zz_xxy, dy_zz_xxz, dy_zz_xyy, dy_zz_xyz,\
                                     dy_zz_xzz, dy_zz_yyy, dy_zz_yyz, dy_zz_yzz,\
                                     dy_zz_zzz, dz_xx_xxx, dz_xx_xxy, dz_xx_xxz,\
                                     dz_xx_xyy, dz_xx_xyz, dz_xx_xzz, dz_xx_yyy,\
                                     dz_xx_yyz, dz_xx_yzz, dz_xx_zzz, dz_xy_xxx,\
                                     dz_xy_xxy, dz_xy_xxz, dz_xy_xyy, dz_xy_xyz,\
                                     dz_xy_xzz, dz_xy_yyy, dz_xy_yyz, dz_xy_yzz,\
                                     dz_xy_zzz, dz_xz_xxx, dz_xz_xxy, dz_xz_xxz,\
                                     dz_xz_xyy, dz_xz_xyz, dz_xz_xzz, dz_xz_yyy,\
                                     dz_xz_yyz, dz_xz_yzz, dz_xz_zzz, dz_yy_xxx,\
                                     dz_yy_xxy, dz_yy_xxz, dz_yy_xyy, dz_yy_xyz,\
                                     dz_yy_xzz, dz_yy_yyy, dz_yy_yyz, dz_yy_yzz,\
                                     dz_yy_zzz, dz_yz_xxx, dz_yz_xxy, dz_yz_xxz,\
                                     dz_yz_xyy, dz_yz_xyz, dz_yz_xzz, dz_yz_yyy,\
                                     dz_yz_yyz, dz_yz_yzz, dz_yz_zzz, dz_zz_xxx,\
                                     dz_zz_xxy, dz_zz_xxz, dz_zz_xyy, dz_zz_xyz,\
                                     dz_zz_xzz, dz_zz_yyy, dz_zz_yyz, dz_zz_yzz,\
                                     dz_zz_zzz, dx_x_xxx, dx_x_xxy, dx_x_xxz, dx_x_xyy,\
                                     dx_x_xyz, dx_x_xzz, dx_x_yyy, dx_x_yyz, dx_x_yzz,\
                                     dx_x_zzz, dx_y_xxx, dx_y_xxy, dx_y_xxz, dx_y_xyy,\
                                     dx_y_xyz, dx_y_xzz, dx_y_yyy, dx_y_yyz, dx_y_yzz,\
                                     dx_y_zzz, dx_z_xxx, dx_z_xxy, dx_z_xxz, dx_z_xyy,\
                                     dx_z_xyz, dx_z_xzz, dx_z_yyy, dx_z_yyz, dx_z_yzz,\
                                     dx_z_zzz, dy_x_xxx, dy_x_xxy, dy_x_xxz, dy_x_xyy,\
                                     dy_x_xyz, dy_x_xzz, dy_x_yyy, dy_x_yyz, dy_x_yzz,\
                                     dy_x_zzz, dy_y_xxx, dy_y_xxy, dy_y_xxz, dy_y_xyy,\
                                     dy_y_xyz, dy_y_xzz, dy_y_yyy, dy_y_yyz, dy_y_yzz,\
                                     dy_y_zzz, dy_z_xxx, dy_z_xxy, dy_z_xxz, dy_z_xyy,\
                                     dy_z_xyz, dy_z_xzz, dy_z_yyy, dy_z_yyz, dy_z_yzz,\
                                     dy_z_zzz, dz_x_xxx, dz_x_xxy, dz_x_xxz, dz_x_xyy,\
                                     dz_x_xyz, dz_x_xzz, dz_x_yyy, dz_x_yyz, dz_x_yzz,\
                                     dz_x_zzz, dz_y_xxx, dz_y_xxy, dz_y_xxz, dz_y_xyy,\
                                     dz_y_xyz, dz_y_xzz, dz_y_yyy, dz_y_yyz, dz_y_yzz,\
                                     dz_y_zzz, dz_z_xxx, dz_z_xxy, dz_z_xxz, dz_z_xyy,\
                                     dz_z_xyz, dz_z_xzz, dz_z_yyy, dz_z_yyz, dz_z_yzz,\
                                     dz_z_zzz, dx_0_xxx, dx_0_xxy, dx_0_xxz, dx_0_xyy,\
                                     dx_0_xyz, dx_0_xzz, dx_0_yyy, dx_0_yyz, dx_0_yzz,\
                                     dx_0_zzz, dy_0_xxx, dy_0_xxy, dy_0_xxz, dy_0_xyy,\
                                     dy_0_xyz, dy_0_xzz, dy_0_yyy, dy_0_yyz, dy_0_yzz,\
                                     dy_0_zzz, dz_0_xxx, dz_0_xxy, dz_0_xxz, dz_0_xyy,\
                                     dz_0_xyz, dz_0_xzz, dz_0_yyy, dz_0_yyz, dz_0_yzz,\
                                     dz_0_zzz, dx_x_xx, dx_x_xy, dx_x_xz, dx_x_yy,\
                                     dx_x_yz, dx_x_zz, dx_y_xx, dx_y_xy, dx_y_xz,\
                                     dx_y_yy, dx_y_yz, dx_y_zz, dx_z_xx, dx_z_xy,\
                                     dx_z_xz, dx_z_yy, dx_z_yz, dx_z_zz, dy_x_xx,\
                                     dy_x_xy, dy_x_xz, dy_x_yy, dy_x_yz, dy_x_zz,\
                                     dy_y_xx, dy_y_xy, dy_y_xz, dy_y_yy, dy_y_yz,\
                                     dy_y_zz, dy_z_xx, dy_z_xy, dy_z_xz, dy_z_yy,\
                                     dy_z_yz, dy_z_zz, dz_x_xx, dz_x_xy, dz_x_xz,\
                                     dz_x_yy, dz_x_yz, dz_x_zz, dz_y_xx, dz_y_xy,\
                                     dz_y_xz, dz_y_yy, dz_y_yz, dz_y_zz, dz_z_xx,\
                                     dz_z_xy, dz_z_xz, dz_z_yy, dz_z_yz, dz_z_zz,\
                                     s_x_xxx, s_x_xxy, s_x_xxz, s_x_xyy, s_x_xyz,\
                                     s_x_xzz, s_x_yyy, s_x_yyz, s_x_yzz, s_x_zzz,\
                                     s_y_xxx, s_y_xxy, s_y_xxz, s_y_xyy, s_y_xyz,\
                                     s_y_xzz, s_y_yyy, s_y_yyz, s_y_yzz, s_y_zzz,\
                                     s_z_xxx, s_z_xxy, s_z_xxz, s_z_xyy, s_z_xyz,\
                                     s_z_xzz, s_z_yyy, s_z_yyz, s_z_yzz, s_z_zzz,\
                                     s_0_xxx, s_0_xxy, s_0_xxz, s_0_xyy, s_0_xyz,\
                                     s_0_xzz, s_0_yyy, s_0_yyz, s_0_yzz, s_0_zzz,\
                                     s_0_xx, s_0_xy, s_0_xz, s_0_yy, s_0_yz, s_0_zz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_x_xxx[j] = fr * s_0_xxx[j] + f2t * 3.0 * s_0_xx[j];

                s_x_xxy[j] = fr * s_0_xxy[j] + f2t * 2.0 * s_0_xy[j];

                s_x_xxz[j] = fr * s_0_xxz[j] + f2t * 2.0 * s_0_xz[j];

                s_x_xyy[j] = fr * s_0_xyy[j] + f2t * s_0_yy[j];

                s_x_xyz[j] = fr * s_0_xyz[j] + f2t * s_0_yz[j];

                s_x_xzz[j] = fr * s_0_xzz[j] + f2t * s_0_zz[j];

                s_x_yyy[j] = fr * s_0_yyy[j];

                s_x_yyz[j] = fr * s_0_yyz[j];

                s_x_yzz[j] = fr * s_0_yzz[j];

                s_x_zzz[j] = fr * s_0_zzz[j];

                // leading y component

                fr = pay[j];

                s_y_xxx[j] = fr * s_0_xxx[j];

                s_y_xxy[j] = fr * s_0_xxy[j] + f2t * s_0_xx[j];

                s_y_xxz[j] = fr * s_0_xxz[j];

                s_y_xyy[j] = fr * s_0_xyy[j] + f2t * 2.0 * s_0_xy[j];

                s_y_xyz[j] = fr * s_0_xyz[j] + f2t * s_0_xz[j];

                s_y_xzz[j] = fr * s_0_xzz[j];

                s_y_yyy[j] = fr * s_0_yyy[j] + f2t * 3.0 * s_0_yy[j];

                s_y_yyz[j] = fr * s_0_yyz[j] + f2t * 2.0 * s_0_yz[j];

                s_y_yzz[j] = fr * s_0_yzz[j] + f2t * s_0_zz[j];

                s_y_zzz[j] = fr * s_0_zzz[j];

                // leading z component

                fr = paz[j];

                s_z_xxx[j] = fr * s_0_xxx[j];

                s_z_xxy[j] = fr * s_0_xxy[j];

                s_z_xxz[j] = fr * s_0_xxz[j] + f2t * s_0_xx[j];

                s_z_xyy[j] = fr * s_0_xyy[j];

                s_z_xyz[j] = fr * s_0_xyz[j] + f2t * s_0_xy[j];

                s_z_xzz[j] = fr * s_0_xzz[j] + f2t * 2.0 * s_0_xz[j];

                s_z_yyy[j] = fr * s_0_yyy[j];

                s_z_yyz[j] = fr * s_0_yyz[j] + f2t * s_0_yy[j];

                s_z_yzz[j] = fr * s_0_yzz[j] + f2t * 2.0 * s_0_yz[j];

                s_z_zzz[j] = fr * s_0_zzz[j] + f2t * 3.0 * s_0_zz[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xx_xxx[j] = fr * dx_x_xxx[j] + f2t * (dx_0_xxx[j] + 3.0 * dx_x_xx[j] + s_x_xxx[j]);

                dy_xx_xxx[j] = fr * dy_x_xxx[j] + f2t * (dy_0_xxx[j] + 3.0 * dy_x_xx[j]);

                dz_xx_xxx[j] = fr * dz_x_xxx[j] + f2t * (dz_0_xxx[j] + 3.0 * dz_x_xx[j]);

                dx_xx_xxy[j] = fr * dx_x_xxy[j] + f2t * (dx_0_xxy[j] + 2.0 * dx_x_xy[j] + s_x_xxy[j]);

                dy_xx_xxy[j] = fr * dy_x_xxy[j] + f2t * (dy_0_xxy[j] + 2.0 * dy_x_xy[j]);

                dz_xx_xxy[j] = fr * dz_x_xxy[j] + f2t * (dz_0_xxy[j] + 2.0 * dz_x_xy[j]);

                dx_xx_xxz[j] = fr * dx_x_xxz[j] + f2t * (dx_0_xxz[j] + 2.0 * dx_x_xz[j] + s_x_xxz[j]);

                dy_xx_xxz[j] = fr * dy_x_xxz[j] + f2t * (dy_0_xxz[j] + 2.0 * dy_x_xz[j]);

                dz_xx_xxz[j] = fr * dz_x_xxz[j] + f2t * (dz_0_xxz[j] + 2.0 * dz_x_xz[j]);

                dx_xx_xyy[j] = fr * dx_x_xyy[j] + f2t * (dx_0_xyy[j] + dx_x_yy[j] + s_x_xyy[j]);

                dy_xx_xyy[j] = fr * dy_x_xyy[j] + f2t * (dy_0_xyy[j] + dy_x_yy[j]);

                dz_xx_xyy[j] = fr * dz_x_xyy[j] + f2t * (dz_0_xyy[j] + dz_x_yy[j]);

                dx_xx_xyz[j] = fr * dx_x_xyz[j] + f2t * (dx_0_xyz[j] + dx_x_yz[j] + s_x_xyz[j]);

                dy_xx_xyz[j] = fr * dy_x_xyz[j] + f2t * (dy_0_xyz[j] + dy_x_yz[j]);

                dz_xx_xyz[j] = fr * dz_x_xyz[j] + f2t * (dz_0_xyz[j] + dz_x_yz[j]);

                dx_xx_xzz[j] = fr * dx_x_xzz[j] + f2t * (dx_0_xzz[j] + dx_x_zz[j] + s_x_xzz[j]);

                dy_xx_xzz[j] = fr * dy_x_xzz[j] + f2t * (dy_0_xzz[j] + dy_x_zz[j]);

                dz_xx_xzz[j] = fr * dz_x_xzz[j] + f2t * (dz_0_xzz[j] + dz_x_zz[j]);

                dx_xx_yyy[j] = fr * dx_x_yyy[j] + f2t * (dx_0_yyy[j] + s_x_yyy[j]);

                dy_xx_yyy[j] = fr * dy_x_yyy[j] + f2t * dy_0_yyy[j];

                dz_xx_yyy[j] = fr * dz_x_yyy[j] + f2t * dz_0_yyy[j];

                dx_xx_yyz[j] = fr * dx_x_yyz[j] + f2t * (dx_0_yyz[j] + s_x_yyz[j]);

                dy_xx_yyz[j] = fr * dy_x_yyz[j] + f2t * dy_0_yyz[j];

                dz_xx_yyz[j] = fr * dz_x_yyz[j] + f2t * dz_0_yyz[j];

                dx_xx_yzz[j] = fr * dx_x_yzz[j] + f2t * (dx_0_yzz[j] + s_x_yzz[j]);

                dy_xx_yzz[j] = fr * dy_x_yzz[j] + f2t * dy_0_yzz[j];

                dz_xx_yzz[j] = fr * dz_x_yzz[j] + f2t * dz_0_yzz[j];

                dx_xx_zzz[j] = fr * dx_x_zzz[j] + f2t * (dx_0_zzz[j] + s_x_zzz[j]);

                dy_xx_zzz[j] = fr * dy_x_zzz[j] + f2t * dy_0_zzz[j];

                dz_xx_zzz[j] = fr * dz_x_zzz[j] + f2t * dz_0_zzz[j];

                dx_xy_xxx[j] = fr * dx_y_xxx[j] + f2t * (3.0 * dx_y_xx[j] + s_y_xxx[j]);

                dy_xy_xxx[j] = fr * dy_y_xxx[j] + f2t * 3.0 * dy_y_xx[j];

                dz_xy_xxx[j] = fr * dz_y_xxx[j] + f2t * 3.0 * dz_y_xx[j];

                dx_xy_xxy[j] = fr * dx_y_xxy[j] + f2t * (2.0 * dx_y_xy[j] + s_y_xxy[j]);

                dy_xy_xxy[j] = fr * dy_y_xxy[j] + f2t * 2.0 * dy_y_xy[j];

                dz_xy_xxy[j] = fr * dz_y_xxy[j] + f2t * 2.0 * dz_y_xy[j];

                dx_xy_xxz[j] = fr * dx_y_xxz[j] + f2t * (2.0 * dx_y_xz[j] + s_y_xxz[j]);

                dy_xy_xxz[j] = fr * dy_y_xxz[j] + f2t * 2.0 * dy_y_xz[j];

                dz_xy_xxz[j] = fr * dz_y_xxz[j] + f2t * 2.0 * dz_y_xz[j];

                dx_xy_xyy[j] = fr * dx_y_xyy[j] + f2t * (dx_y_yy[j] + s_y_xyy[j]);

                dy_xy_xyy[j] = fr * dy_y_xyy[j] + f2t * dy_y_yy[j];

                dz_xy_xyy[j] = fr * dz_y_xyy[j] + f2t * dz_y_yy[j];

                dx_xy_xyz[j] = fr * dx_y_xyz[j] + f2t * (dx_y_yz[j] + s_y_xyz[j]);

                dy_xy_xyz[j] = fr * dy_y_xyz[j] + f2t * dy_y_yz[j];

                dz_xy_xyz[j] = fr * dz_y_xyz[j] + f2t * dz_y_yz[j];

                dx_xy_xzz[j] = fr * dx_y_xzz[j] + f2t * (dx_y_zz[j] + s_y_xzz[j]);

                dy_xy_xzz[j] = fr * dy_y_xzz[j] + f2t * dy_y_zz[j];

                dz_xy_xzz[j] = fr * dz_y_xzz[j] + f2t * dz_y_zz[j];

                dx_xy_yyy[j] = fr * dx_y_yyy[j] + f2t * s_y_yyy[j];

                dy_xy_yyy[j] = fr * dy_y_yyy[j];

                dz_xy_yyy[j] = fr * dz_y_yyy[j];

                dx_xy_yyz[j] = fr * dx_y_yyz[j] + f2t * s_y_yyz[j];

                dy_xy_yyz[j] = fr * dy_y_yyz[j];

                dz_xy_yyz[j] = fr * dz_y_yyz[j];

                dx_xy_yzz[j] = fr * dx_y_yzz[j] + f2t * s_y_yzz[j];

                dy_xy_yzz[j] = fr * dy_y_yzz[j];

                dz_xy_yzz[j] = fr * dz_y_yzz[j];

                dx_xy_zzz[j] = fr * dx_y_zzz[j] + f2t * s_y_zzz[j];

                dy_xy_zzz[j] = fr * dy_y_zzz[j];

                dz_xy_zzz[j] = fr * dz_y_zzz[j];

                dx_xz_xxx[j] = fr * dx_z_xxx[j] + f2t * (3.0 * dx_z_xx[j] + s_z_xxx[j]);

                dy_xz_xxx[j] = fr * dy_z_xxx[j] + f2t * 3.0 * dy_z_xx[j];

                dz_xz_xxx[j] = fr * dz_z_xxx[j] + f2t * 3.0 * dz_z_xx[j];

                dx_xz_xxy[j] = fr * dx_z_xxy[j] + f2t * (2.0 * dx_z_xy[j] + s_z_xxy[j]);

                dy_xz_xxy[j] = fr * dy_z_xxy[j] + f2t * 2.0 * dy_z_xy[j];

                dz_xz_xxy[j] = fr * dz_z_xxy[j] + f2t * 2.0 * dz_z_xy[j];

                dx_xz_xxz[j] = fr * dx_z_xxz[j] + f2t * (2.0 * dx_z_xz[j] + s_z_xxz[j]);

                dy_xz_xxz[j] = fr * dy_z_xxz[j] + f2t * 2.0 * dy_z_xz[j];

                dz_xz_xxz[j] = fr * dz_z_xxz[j] + f2t * 2.0 * dz_z_xz[j];

                dx_xz_xyy[j] = fr * dx_z_xyy[j] + f2t * (dx_z_yy[j] + s_z_xyy[j]);

                dy_xz_xyy[j] = fr * dy_z_xyy[j] + f2t * dy_z_yy[j];

                dz_xz_xyy[j] = fr * dz_z_xyy[j] + f2t * dz_z_yy[j];

                dx_xz_xyz[j] = fr * dx_z_xyz[j] + f2t * (dx_z_yz[j] + s_z_xyz[j]);

                dy_xz_xyz[j] = fr * dy_z_xyz[j] + f2t * dy_z_yz[j];

                dz_xz_xyz[j] = fr * dz_z_xyz[j] + f2t * dz_z_yz[j];

                dx_xz_xzz[j] = fr * dx_z_xzz[j] + f2t * (dx_z_zz[j] + s_z_xzz[j]);

                dy_xz_xzz[j] = fr * dy_z_xzz[j] + f2t * dy_z_zz[j];

                dz_xz_xzz[j] = fr * dz_z_xzz[j] + f2t * dz_z_zz[j];

                dx_xz_yyy[j] = fr * dx_z_yyy[j] + f2t * s_z_yyy[j];

                dy_xz_yyy[j] = fr * dy_z_yyy[j];

                dz_xz_yyy[j] = fr * dz_z_yyy[j];

                dx_xz_yyz[j] = fr * dx_z_yyz[j] + f2t * s_z_yyz[j];

                dy_xz_yyz[j] = fr * dy_z_yyz[j];

                dz_xz_yyz[j] = fr * dz_z_yyz[j];

                dx_xz_yzz[j] = fr * dx_z_yzz[j] + f2t * s_z_yzz[j];

                dy_xz_yzz[j] = fr * dy_z_yzz[j];

                dz_xz_yzz[j] = fr * dz_z_yzz[j];

                dx_xz_zzz[j] = fr * dx_z_zzz[j] + f2t * s_z_zzz[j];

                dy_xz_zzz[j] = fr * dy_z_zzz[j];

                dz_xz_zzz[j] = fr * dz_z_zzz[j];

                // leading y component

                fr = pay[j];

                dx_yy_xxx[j] = fr * dx_y_xxx[j] + f2t * dx_0_xxx[j];

                dy_yy_xxx[j] = fr * dy_y_xxx[j] + f2t * (dy_0_xxx[j] + s_y_xxx[j]);

                dz_yy_xxx[j] = fr * dz_y_xxx[j] + f2t * dz_0_xxx[j];

                dx_yy_xxy[j] = fr * dx_y_xxy[j] + f2t * (dx_0_xxy[j] + dx_y_xx[j]);

                dy_yy_xxy[j] = fr * dy_y_xxy[j] + f2t * (dy_0_xxy[j] + dy_y_xx[j] + s_y_xxy[j]);

                dz_yy_xxy[j] = fr * dz_y_xxy[j] + f2t * (dz_0_xxy[j] + dz_y_xx[j]);

                dx_yy_xxz[j] = fr * dx_y_xxz[j] + f2t * dx_0_xxz[j];

                dy_yy_xxz[j] = fr * dy_y_xxz[j] + f2t * (dy_0_xxz[j] + s_y_xxz[j]);

                dz_yy_xxz[j] = fr * dz_y_xxz[j] + f2t * dz_0_xxz[j];

                dx_yy_xyy[j] = fr * dx_y_xyy[j] + f2t * (dx_0_xyy[j] + 2.0 * dx_y_xy[j]);

                dy_yy_xyy[j] = fr * dy_y_xyy[j] + f2t * (dy_0_xyy[j] + 2.0 * dy_y_xy[j] + s_y_xyy[j]);

                dz_yy_xyy[j] = fr * dz_y_xyy[j] + f2t * (dz_0_xyy[j] + 2.0 * dz_y_xy[j]);

                dx_yy_xyz[j] = fr * dx_y_xyz[j] + f2t * (dx_0_xyz[j] + dx_y_xz[j]);

                dy_yy_xyz[j] = fr * dy_y_xyz[j] + f2t * (dy_0_xyz[j] + dy_y_xz[j] + s_y_xyz[j]);

                dz_yy_xyz[j] = fr * dz_y_xyz[j] + f2t * (dz_0_xyz[j] + dz_y_xz[j]);

                dx_yy_xzz[j] = fr * dx_y_xzz[j] + f2t * dx_0_xzz[j];

                dy_yy_xzz[j] = fr * dy_y_xzz[j] + f2t * (dy_0_xzz[j] + s_y_xzz[j]);

                dz_yy_xzz[j] = fr * dz_y_xzz[j] + f2t * dz_0_xzz[j];

                dx_yy_yyy[j] = fr * dx_y_yyy[j] + f2t * (dx_0_yyy[j] + 3.0 * dx_y_yy[j]);

                dy_yy_yyy[j] = fr * dy_y_yyy[j] + f2t * (dy_0_yyy[j] + 3.0 * dy_y_yy[j] + s_y_yyy[j]);

                dz_yy_yyy[j] = fr * dz_y_yyy[j] + f2t * (dz_0_yyy[j] + 3.0 * dz_y_yy[j]);

                dx_yy_yyz[j] = fr * dx_y_yyz[j] + f2t * (dx_0_yyz[j] + 2.0 * dx_y_yz[j]);

                dy_yy_yyz[j] = fr * dy_y_yyz[j] + f2t * (dy_0_yyz[j] + 2.0 * dy_y_yz[j] + s_y_yyz[j]);

                dz_yy_yyz[j] = fr * dz_y_yyz[j] + f2t * (dz_0_yyz[j] + 2.0 * dz_y_yz[j]);

                dx_yy_yzz[j] = fr * dx_y_yzz[j] + f2t * (dx_0_yzz[j] + dx_y_zz[j]);

                dy_yy_yzz[j] = fr * dy_y_yzz[j] + f2t * (dy_0_yzz[j] + dy_y_zz[j] + s_y_yzz[j]);

                dz_yy_yzz[j] = fr * dz_y_yzz[j] + f2t * (dz_0_yzz[j] + dz_y_zz[j]);

                dx_yy_zzz[j] = fr * dx_y_zzz[j] + f2t * dx_0_zzz[j];

                dy_yy_zzz[j] = fr * dy_y_zzz[j] + f2t * (dy_0_zzz[j] + s_y_zzz[j]);

                dz_yy_zzz[j] = fr * dz_y_zzz[j] + f2t * dz_0_zzz[j];

                dx_yz_xxx[j] = fr * dx_z_xxx[j];

                dy_yz_xxx[j] = fr * dy_z_xxx[j] + f2t * s_z_xxx[j];

                dz_yz_xxx[j] = fr * dz_z_xxx[j];

                dx_yz_xxy[j] = fr * dx_z_xxy[j] + f2t * dx_z_xx[j];

                dy_yz_xxy[j] = fr * dy_z_xxy[j] + f2t * (dy_z_xx[j] + s_z_xxy[j]);

                dz_yz_xxy[j] = fr * dz_z_xxy[j] + f2t * dz_z_xx[j];

                dx_yz_xxz[j] = fr * dx_z_xxz[j];

                dy_yz_xxz[j] = fr * dy_z_xxz[j] + f2t * s_z_xxz[j];

                dz_yz_xxz[j] = fr * dz_z_xxz[j];

                dx_yz_xyy[j] = fr * dx_z_xyy[j] + f2t * 2.0 * dx_z_xy[j];

                dy_yz_xyy[j] = fr * dy_z_xyy[j] + f2t * (2.0 * dy_z_xy[j] + s_z_xyy[j]);

                dz_yz_xyy[j] = fr * dz_z_xyy[j] + f2t * 2.0 * dz_z_xy[j];

                dx_yz_xyz[j] = fr * dx_z_xyz[j] + f2t * dx_z_xz[j];

                dy_yz_xyz[j] = fr * dy_z_xyz[j] + f2t * (dy_z_xz[j] + s_z_xyz[j]);

                dz_yz_xyz[j] = fr * dz_z_xyz[j] + f2t * dz_z_xz[j];

                dx_yz_xzz[j] = fr * dx_z_xzz[j];

                dy_yz_xzz[j] = fr * dy_z_xzz[j] + f2t * s_z_xzz[j];

                dz_yz_xzz[j] = fr * dz_z_xzz[j];

                dx_yz_yyy[j] = fr * dx_z_yyy[j] + f2t * 3.0 * dx_z_yy[j];

                dy_yz_yyy[j] = fr * dy_z_yyy[j] + f2t * (3.0 * dy_z_yy[j] + s_z_yyy[j]);

                dz_yz_yyy[j] = fr * dz_z_yyy[j] + f2t * 3.0 * dz_z_yy[j];

                dx_yz_yyz[j] = fr * dx_z_yyz[j] + f2t * 2.0 * dx_z_yz[j];

                dy_yz_yyz[j] = fr * dy_z_yyz[j] + f2t * (2.0 * dy_z_yz[j] + s_z_yyz[j]);

                dz_yz_yyz[j] = fr * dz_z_yyz[j] + f2t * 2.0 * dz_z_yz[j];

                dx_yz_yzz[j] = fr * dx_z_yzz[j] + f2t * dx_z_zz[j];

                dy_yz_yzz[j] = fr * dy_z_yzz[j] + f2t * (dy_z_zz[j] + s_z_yzz[j]);

                dz_yz_yzz[j] = fr * dz_z_yzz[j] + f2t * dz_z_zz[j];

                dx_yz_zzz[j] = fr * dx_z_zzz[j];

                dy_yz_zzz[j] = fr * dy_z_zzz[j] + f2t * s_z_zzz[j];

                dz_yz_zzz[j] = fr * dz_z_zzz[j];

                // leading z component

                fr = paz[j];

                dx_zz_xxx[j] = fr * dx_z_xxx[j] + f2t * dx_0_xxx[j];

                dy_zz_xxx[j] = fr * dy_z_xxx[j] + f2t * dy_0_xxx[j];

                dz_zz_xxx[j] = fr * dz_z_xxx[j] + f2t * (dz_0_xxx[j] + s_z_xxx[j]);

                dx_zz_xxy[j] = fr * dx_z_xxy[j] + f2t * dx_0_xxy[j];

                dy_zz_xxy[j] = fr * dy_z_xxy[j] + f2t * dy_0_xxy[j];

                dz_zz_xxy[j] = fr * dz_z_xxy[j] + f2t * (dz_0_xxy[j] + s_z_xxy[j]);

                dx_zz_xxz[j] = fr * dx_z_xxz[j] + f2t * (dx_0_xxz[j] + dx_z_xx[j]);

                dy_zz_xxz[j] = fr * dy_z_xxz[j] + f2t * (dy_0_xxz[j] + dy_z_xx[j]);

                dz_zz_xxz[j] = fr * dz_z_xxz[j] + f2t * (dz_0_xxz[j] + dz_z_xx[j] + s_z_xxz[j]);

                dx_zz_xyy[j] = fr * dx_z_xyy[j] + f2t * dx_0_xyy[j];

                dy_zz_xyy[j] = fr * dy_z_xyy[j] + f2t * dy_0_xyy[j];

                dz_zz_xyy[j] = fr * dz_z_xyy[j] + f2t * (dz_0_xyy[j] + s_z_xyy[j]);

                dx_zz_xyz[j] = fr * dx_z_xyz[j] + f2t * (dx_0_xyz[j] + dx_z_xy[j]);

                dy_zz_xyz[j] = fr * dy_z_xyz[j] + f2t * (dy_0_xyz[j] + dy_z_xy[j]);

                dz_zz_xyz[j] = fr * dz_z_xyz[j] + f2t * (dz_0_xyz[j] + dz_z_xy[j] + s_z_xyz[j]);

                dx_zz_xzz[j] = fr * dx_z_xzz[j] + f2t * (dx_0_xzz[j] + 2.0 * dx_z_xz[j]);

                dy_zz_xzz[j] = fr * dy_z_xzz[j] + f2t * (dy_0_xzz[j] + 2.0 * dy_z_xz[j]);

                dz_zz_xzz[j] = fr * dz_z_xzz[j] + f2t * (dz_0_xzz[j] + 2.0 * dz_z_xz[j] + s_z_xzz[j]);

                dx_zz_yyy[j] = fr * dx_z_yyy[j] + f2t * dx_0_yyy[j];

                dy_zz_yyy[j] = fr * dy_z_yyy[j] + f2t * dy_0_yyy[j];

                dz_zz_yyy[j] = fr * dz_z_yyy[j] + f2t * (dz_0_yyy[j] + s_z_yyy[j]);

                dx_zz_yyz[j] = fr * dx_z_yyz[j] + f2t * (dx_0_yyz[j] + dx_z_yy[j]);

                dy_zz_yyz[j] = fr * dy_z_yyz[j] + f2t * (dy_0_yyz[j] + dy_z_yy[j]);

                dz_zz_yyz[j] = fr * dz_z_yyz[j] + f2t * (dz_0_yyz[j] + dz_z_yy[j] + s_z_yyz[j]);

                dx_zz_yzz[j] = fr * dx_z_yzz[j] + f2t * (dx_0_yzz[j] + 2.0 * dx_z_yz[j]);

                dy_zz_yzz[j] = fr * dy_z_yzz[j] + f2t * (dy_0_yzz[j] + 2.0 * dy_z_yz[j]);

                dz_zz_yzz[j] = fr * dz_z_yzz[j] + f2t * (dz_0_yzz[j] + 2.0 * dz_z_yz[j] + s_z_yzz[j]);

                dx_zz_zzz[j] = fr * dx_z_zzz[j] + f2t * (dx_0_zzz[j] + 3.0 * dx_z_zz[j]);

                dy_zz_zzz[j] = fr * dy_z_zzz[j] + f2t * (dy_0_zzz[j] + 3.0 * dy_z_zz[j]);

                dz_zz_zzz[j] = fr * dz_z_zzz[j] + f2t * (dz_0_zzz[j] + 3.0 * dz_z_zz[j] + s_z_zzz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForFD(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {3, 2, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {3, 2, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 2, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 1, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 2, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (F|M|D) integrals

            auto dx_xxx_xx = primBuffer.data(doff + 60 * idx);

            auto dx_xxx_xy = primBuffer.data(doff + 60 * idx + 1);

            auto dx_xxx_xz = primBuffer.data(doff + 60 * idx + 2);

            auto dx_xxx_yy = primBuffer.data(doff + 60 * idx + 3);

            auto dx_xxx_yz = primBuffer.data(doff + 60 * idx + 4);

            auto dx_xxx_zz = primBuffer.data(doff + 60 * idx + 5);

            auto dx_xxy_xx = primBuffer.data(doff + 60 * idx + 6);

            auto dx_xxy_xy = primBuffer.data(doff + 60 * idx + 7);

            auto dx_xxy_xz = primBuffer.data(doff + 60 * idx + 8);

            auto dx_xxy_yy = primBuffer.data(doff + 60 * idx + 9);

            auto dx_xxy_yz = primBuffer.data(doff + 60 * idx + 10);

            auto dx_xxy_zz = primBuffer.data(doff + 60 * idx + 11);

            auto dx_xxz_xx = primBuffer.data(doff + 60 * idx + 12);

            auto dx_xxz_xy = primBuffer.data(doff + 60 * idx + 13);

            auto dx_xxz_xz = primBuffer.data(doff + 60 * idx + 14);

            auto dx_xxz_yy = primBuffer.data(doff + 60 * idx + 15);

            auto dx_xxz_yz = primBuffer.data(doff + 60 * idx + 16);

            auto dx_xxz_zz = primBuffer.data(doff + 60 * idx + 17);

            auto dx_xyy_xx = primBuffer.data(doff + 60 * idx + 18);

            auto dx_xyy_xy = primBuffer.data(doff + 60 * idx + 19);

            auto dx_xyy_xz = primBuffer.data(doff + 60 * idx + 20);

            auto dx_xyy_yy = primBuffer.data(doff + 60 * idx + 21);

            auto dx_xyy_yz = primBuffer.data(doff + 60 * idx + 22);

            auto dx_xyy_zz = primBuffer.data(doff + 60 * idx + 23);

            auto dx_xyz_xx = primBuffer.data(doff + 60 * idx + 24);

            auto dx_xyz_xy = primBuffer.data(doff + 60 * idx + 25);

            auto dx_xyz_xz = primBuffer.data(doff + 60 * idx + 26);

            auto dx_xyz_yy = primBuffer.data(doff + 60 * idx + 27);

            auto dx_xyz_yz = primBuffer.data(doff + 60 * idx + 28);

            auto dx_xyz_zz = primBuffer.data(doff + 60 * idx + 29);

            auto dx_xzz_xx = primBuffer.data(doff + 60 * idx + 30);

            auto dx_xzz_xy = primBuffer.data(doff + 60 * idx + 31);

            auto dx_xzz_xz = primBuffer.data(doff + 60 * idx + 32);

            auto dx_xzz_yy = primBuffer.data(doff + 60 * idx + 33);

            auto dx_xzz_yz = primBuffer.data(doff + 60 * idx + 34);

            auto dx_xzz_zz = primBuffer.data(doff + 60 * idx + 35);

            auto dx_yyy_xx = primBuffer.data(doff + 60 * idx + 36);

            auto dx_yyy_xy = primBuffer.data(doff + 60 * idx + 37);

            auto dx_yyy_xz = primBuffer.data(doff + 60 * idx + 38);

            auto dx_yyy_yy = primBuffer.data(doff + 60 * idx + 39);

            auto dx_yyy_yz = primBuffer.data(doff + 60 * idx + 40);

            auto dx_yyy_zz = primBuffer.data(doff + 60 * idx + 41);

            auto dx_yyz_xx = primBuffer.data(doff + 60 * idx + 42);

            auto dx_yyz_xy = primBuffer.data(doff + 60 * idx + 43);

            auto dx_yyz_xz = primBuffer.data(doff + 60 * idx + 44);

            auto dx_yyz_yy = primBuffer.data(doff + 60 * idx + 45);

            auto dx_yyz_yz = primBuffer.data(doff + 60 * idx + 46);

            auto dx_yyz_zz = primBuffer.data(doff + 60 * idx + 47);

            auto dx_yzz_xx = primBuffer.data(doff + 60 * idx + 48);

            auto dx_yzz_xy = primBuffer.data(doff + 60 * idx + 49);

            auto dx_yzz_xz = primBuffer.data(doff + 60 * idx + 50);

            auto dx_yzz_yy = primBuffer.data(doff + 60 * idx + 51);

            auto dx_yzz_yz = primBuffer.data(doff + 60 * idx + 52);

            auto dx_yzz_zz = primBuffer.data(doff + 60 * idx + 53);

            auto dx_zzz_xx = primBuffer.data(doff + 60 * idx + 54);

            auto dx_zzz_xy = primBuffer.data(doff + 60 * idx + 55);

            auto dx_zzz_xz = primBuffer.data(doff + 60 * idx + 56);

            auto dx_zzz_yy = primBuffer.data(doff + 60 * idx + 57);

            auto dx_zzz_yz = primBuffer.data(doff + 60 * idx + 58);

            auto dx_zzz_zz = primBuffer.data(doff + 60 * idx + 59);

            auto dy_xxx_xx = primBuffer.data(doff + 60 * bdim + 60 * idx);

            auto dy_xxx_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 1);

            auto dy_xxx_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 2);

            auto dy_xxx_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 3);

            auto dy_xxx_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 4);

            auto dy_xxx_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 5);

            auto dy_xxy_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 6);

            auto dy_xxy_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 7);

            auto dy_xxy_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 8);

            auto dy_xxy_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 9);

            auto dy_xxy_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 10);

            auto dy_xxy_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 11);

            auto dy_xxz_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 12);

            auto dy_xxz_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 13);

            auto dy_xxz_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 14);

            auto dy_xxz_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 15);

            auto dy_xxz_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 16);

            auto dy_xxz_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 17);

            auto dy_xyy_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 18);

            auto dy_xyy_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 19);

            auto dy_xyy_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 20);

            auto dy_xyy_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 21);

            auto dy_xyy_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 22);

            auto dy_xyy_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 23);

            auto dy_xyz_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 24);

            auto dy_xyz_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 25);

            auto dy_xyz_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 26);

            auto dy_xyz_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 27);

            auto dy_xyz_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 28);

            auto dy_xyz_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 29);

            auto dy_xzz_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 30);

            auto dy_xzz_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 31);

            auto dy_xzz_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 32);

            auto dy_xzz_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 33);

            auto dy_xzz_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 34);

            auto dy_xzz_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 35);

            auto dy_yyy_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 36);

            auto dy_yyy_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 37);

            auto dy_yyy_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 38);

            auto dy_yyy_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 39);

            auto dy_yyy_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 40);

            auto dy_yyy_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 41);

            auto dy_yyz_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 42);

            auto dy_yyz_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 43);

            auto dy_yyz_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 44);

            auto dy_yyz_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 45);

            auto dy_yyz_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 46);

            auto dy_yyz_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 47);

            auto dy_yzz_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 48);

            auto dy_yzz_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 49);

            auto dy_yzz_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 50);

            auto dy_yzz_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 51);

            auto dy_yzz_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 52);

            auto dy_yzz_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 53);

            auto dy_zzz_xx = primBuffer.data(doff + 60 * bdim + 60 * idx + 54);

            auto dy_zzz_xy = primBuffer.data(doff + 60 * bdim + 60 * idx + 55);

            auto dy_zzz_xz = primBuffer.data(doff + 60 * bdim + 60 * idx + 56);

            auto dy_zzz_yy = primBuffer.data(doff + 60 * bdim + 60 * idx + 57);

            auto dy_zzz_yz = primBuffer.data(doff + 60 * bdim + 60 * idx + 58);

            auto dy_zzz_zz = primBuffer.data(doff + 60 * bdim + 60 * idx + 59);

            auto dz_xxx_xx = primBuffer.data(doff + 120 * bdim + 60 * idx);

            auto dz_xxx_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 1);

            auto dz_xxx_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 2);

            auto dz_xxx_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 3);

            auto dz_xxx_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 4);

            auto dz_xxx_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 5);

            auto dz_xxy_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 6);

            auto dz_xxy_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 7);

            auto dz_xxy_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 8);

            auto dz_xxy_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 9);

            auto dz_xxy_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 10);

            auto dz_xxy_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 11);

            auto dz_xxz_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 12);

            auto dz_xxz_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 13);

            auto dz_xxz_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 14);

            auto dz_xxz_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 15);

            auto dz_xxz_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 16);

            auto dz_xxz_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 17);

            auto dz_xyy_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 18);

            auto dz_xyy_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 19);

            auto dz_xyy_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 20);

            auto dz_xyy_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 21);

            auto dz_xyy_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 22);

            auto dz_xyy_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 23);

            auto dz_xyz_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 24);

            auto dz_xyz_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 25);

            auto dz_xyz_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 26);

            auto dz_xyz_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 27);

            auto dz_xyz_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 28);

            auto dz_xyz_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 29);

            auto dz_xzz_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 30);

            auto dz_xzz_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 31);

            auto dz_xzz_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 32);

            auto dz_xzz_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 33);

            auto dz_xzz_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 34);

            auto dz_xzz_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 35);

            auto dz_yyy_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 36);

            auto dz_yyy_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 37);

            auto dz_yyy_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 38);

            auto dz_yyy_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 39);

            auto dz_yyy_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 40);

            auto dz_yyy_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 41);

            auto dz_yyz_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 42);

            auto dz_yyz_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 43);

            auto dz_yyz_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 44);

            auto dz_yyz_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 45);

            auto dz_yyz_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 46);

            auto dz_yyz_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 47);

            auto dz_yzz_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 48);

            auto dz_yzz_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 49);

            auto dz_yzz_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 50);

            auto dz_yzz_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 51);

            auto dz_yzz_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 52);

            auto dz_yzz_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 53);

            auto dz_zzz_xx = primBuffer.data(doff + 120 * bdim + 60 * idx + 54);

            auto dz_zzz_xy = primBuffer.data(doff + 120 * bdim + 60 * idx + 55);

            auto dz_zzz_xz = primBuffer.data(doff + 120 * bdim + 60 * idx + 56);

            auto dz_zzz_yy = primBuffer.data(doff + 120 * bdim + 60 * idx + 57);

            auto dz_zzz_yz = primBuffer.data(doff + 120 * bdim + 60 * idx + 58);

            auto dz_zzz_zz = primBuffer.data(doff + 120 * bdim + 60 * idx + 59);

            // set up pointers to (D|M|D) integrals

            auto dx_xx_xx = primBuffer.data(d1off + 36 * idx);

            auto dx_xx_xy = primBuffer.data(d1off + 36 * idx + 1);

            auto dx_xx_xz = primBuffer.data(d1off + 36 * idx + 2);

            auto dx_xx_yy = primBuffer.data(d1off + 36 * idx + 3);

            auto dx_xx_yz = primBuffer.data(d1off + 36 * idx + 4);

            auto dx_xx_zz = primBuffer.data(d1off + 36 * idx + 5);

            auto dx_xy_xx = primBuffer.data(d1off + 36 * idx + 6);

            auto dx_xy_xy = primBuffer.data(d1off + 36 * idx + 7);

            auto dx_xy_xz = primBuffer.data(d1off + 36 * idx + 8);

            auto dx_xy_yy = primBuffer.data(d1off + 36 * idx + 9);

            auto dx_xy_yz = primBuffer.data(d1off + 36 * idx + 10);

            auto dx_xy_zz = primBuffer.data(d1off + 36 * idx + 11);

            auto dx_xz_xx = primBuffer.data(d1off + 36 * idx + 12);

            auto dx_xz_xy = primBuffer.data(d1off + 36 * idx + 13);

            auto dx_xz_xz = primBuffer.data(d1off + 36 * idx + 14);

            auto dx_xz_yy = primBuffer.data(d1off + 36 * idx + 15);

            auto dx_xz_yz = primBuffer.data(d1off + 36 * idx + 16);

            auto dx_xz_zz = primBuffer.data(d1off + 36 * idx + 17);

            auto dx_yy_xx = primBuffer.data(d1off + 36 * idx + 18);

            auto dx_yy_xy = primBuffer.data(d1off + 36 * idx + 19);

            auto dx_yy_xz = primBuffer.data(d1off + 36 * idx + 20);

            auto dx_yy_yy = primBuffer.data(d1off + 36 * idx + 21);

            auto dx_yy_yz = primBuffer.data(d1off + 36 * idx + 22);

            auto dx_yy_zz = primBuffer.data(d1off + 36 * idx + 23);

            auto dx_yz_xx = primBuffer.data(d1off + 36 * idx + 24);

            auto dx_yz_xy = primBuffer.data(d1off + 36 * idx + 25);

            auto dx_yz_xz = primBuffer.data(d1off + 36 * idx + 26);

            auto dx_yz_yy = primBuffer.data(d1off + 36 * idx + 27);

            auto dx_yz_yz = primBuffer.data(d1off + 36 * idx + 28);

            auto dx_yz_zz = primBuffer.data(d1off + 36 * idx + 29);

            auto dx_zz_xx = primBuffer.data(d1off + 36 * idx + 30);

            auto dx_zz_xy = primBuffer.data(d1off + 36 * idx + 31);

            auto dx_zz_xz = primBuffer.data(d1off + 36 * idx + 32);

            auto dx_zz_yy = primBuffer.data(d1off + 36 * idx + 33);

            auto dx_zz_yz = primBuffer.data(d1off + 36 * idx + 34);

            auto dx_zz_zz = primBuffer.data(d1off + 36 * idx + 35);

            auto dy_xx_xx = primBuffer.data(d1off + 36 * bdim + 36 * idx);

            auto dy_xx_xy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 1);

            auto dy_xx_xz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 2);

            auto dy_xx_yy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 3);

            auto dy_xx_yz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 4);

            auto dy_xx_zz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 5);

            auto dy_xy_xx = primBuffer.data(d1off + 36 * bdim + 36 * idx + 6);

            auto dy_xy_xy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 7);

            auto dy_xy_xz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 8);

            auto dy_xy_yy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 9);

            auto dy_xy_yz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 10);

            auto dy_xy_zz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 11);

            auto dy_xz_xx = primBuffer.data(d1off + 36 * bdim + 36 * idx + 12);

            auto dy_xz_xy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 13);

            auto dy_xz_xz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 14);

            auto dy_xz_yy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 15);

            auto dy_xz_yz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 16);

            auto dy_xz_zz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 17);

            auto dy_yy_xx = primBuffer.data(d1off + 36 * bdim + 36 * idx + 18);

            auto dy_yy_xy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 19);

            auto dy_yy_xz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 20);

            auto dy_yy_yy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 21);

            auto dy_yy_yz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 22);

            auto dy_yy_zz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 23);

            auto dy_yz_xx = primBuffer.data(d1off + 36 * bdim + 36 * idx + 24);

            auto dy_yz_xy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 25);

            auto dy_yz_xz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 26);

            auto dy_yz_yy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 27);

            auto dy_yz_yz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 28);

            auto dy_yz_zz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 29);

            auto dy_zz_xx = primBuffer.data(d1off + 36 * bdim + 36 * idx + 30);

            auto dy_zz_xy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 31);

            auto dy_zz_xz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 32);

            auto dy_zz_yy = primBuffer.data(d1off + 36 * bdim + 36 * idx + 33);

            auto dy_zz_yz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 34);

            auto dy_zz_zz = primBuffer.data(d1off + 36 * bdim + 36 * idx + 35);

            auto dz_xx_xx = primBuffer.data(d1off + 72 * bdim + 36 * idx);

            auto dz_xx_xy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 1);

            auto dz_xx_xz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 2);

            auto dz_xx_yy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 3);

            auto dz_xx_yz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 4);

            auto dz_xx_zz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 5);

            auto dz_xy_xx = primBuffer.data(d1off + 72 * bdim + 36 * idx + 6);

            auto dz_xy_xy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 7);

            auto dz_xy_xz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 8);

            auto dz_xy_yy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 9);

            auto dz_xy_yz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 10);

            auto dz_xy_zz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 11);

            auto dz_xz_xx = primBuffer.data(d1off + 72 * bdim + 36 * idx + 12);

            auto dz_xz_xy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 13);

            auto dz_xz_xz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 14);

            auto dz_xz_yy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 15);

            auto dz_xz_yz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 16);

            auto dz_xz_zz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 17);

            auto dz_yy_xx = primBuffer.data(d1off + 72 * bdim + 36 * idx + 18);

            auto dz_yy_xy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 19);

            auto dz_yy_xz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 20);

            auto dz_yy_yy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 21);

            auto dz_yy_yz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 22);

            auto dz_yy_zz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 23);

            auto dz_yz_xx = primBuffer.data(d1off + 72 * bdim + 36 * idx + 24);

            auto dz_yz_xy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 25);

            auto dz_yz_xz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 26);

            auto dz_yz_yy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 27);

            auto dz_yz_yz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 28);

            auto dz_yz_zz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 29);

            auto dz_zz_xx = primBuffer.data(d1off + 72 * bdim + 36 * idx + 30);

            auto dz_zz_xy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 31);

            auto dz_zz_xz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 32);

            auto dz_zz_yy = primBuffer.data(d1off + 72 * bdim + 36 * idx + 33);

            auto dz_zz_yz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 34);

            auto dz_zz_zz = primBuffer.data(d1off + 72 * bdim + 36 * idx + 35);

            // set up pointers to (P|M|D) integrals

            auto dx_x_xx = primBuffer.data(d2off + 18 * idx);

            auto dx_x_xy = primBuffer.data(d2off + 18 * idx + 1);

            auto dx_x_xz = primBuffer.data(d2off + 18 * idx + 2);

            auto dx_x_yy = primBuffer.data(d2off + 18 * idx + 3);

            auto dx_x_yz = primBuffer.data(d2off + 18 * idx + 4);

            auto dx_x_zz = primBuffer.data(d2off + 18 * idx + 5);

            auto dx_y_xx = primBuffer.data(d2off + 18 * idx + 6);

            auto dx_y_xy = primBuffer.data(d2off + 18 * idx + 7);

            auto dx_y_xz = primBuffer.data(d2off + 18 * idx + 8);

            auto dx_y_yy = primBuffer.data(d2off + 18 * idx + 9);

            auto dx_y_yz = primBuffer.data(d2off + 18 * idx + 10);

            auto dx_y_zz = primBuffer.data(d2off + 18 * idx + 11);

            auto dx_z_xx = primBuffer.data(d2off + 18 * idx + 12);

            auto dx_z_xy = primBuffer.data(d2off + 18 * idx + 13);

            auto dx_z_xz = primBuffer.data(d2off + 18 * idx + 14);

            auto dx_z_yy = primBuffer.data(d2off + 18 * idx + 15);

            auto dx_z_yz = primBuffer.data(d2off + 18 * idx + 16);

            auto dx_z_zz = primBuffer.data(d2off + 18 * idx + 17);

            auto dy_x_xx = primBuffer.data(d2off + 18 * bdim + 18 * idx);

            auto dy_x_xy = primBuffer.data(d2off + 18 * bdim + 18 * idx + 1);

            auto dy_x_xz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 2);

            auto dy_x_yy = primBuffer.data(d2off + 18 * bdim + 18 * idx + 3);

            auto dy_x_yz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 4);

            auto dy_x_zz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 5);

            auto dy_y_xx = primBuffer.data(d2off + 18 * bdim + 18 * idx + 6);

            auto dy_y_xy = primBuffer.data(d2off + 18 * bdim + 18 * idx + 7);

            auto dy_y_xz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 8);

            auto dy_y_yy = primBuffer.data(d2off + 18 * bdim + 18 * idx + 9);

            auto dy_y_yz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 10);

            auto dy_y_zz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 11);

            auto dy_z_xx = primBuffer.data(d2off + 18 * bdim + 18 * idx + 12);

            auto dy_z_xy = primBuffer.data(d2off + 18 * bdim + 18 * idx + 13);

            auto dy_z_xz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 14);

            auto dy_z_yy = primBuffer.data(d2off + 18 * bdim + 18 * idx + 15);

            auto dy_z_yz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 16);

            auto dy_z_zz = primBuffer.data(d2off + 18 * bdim + 18 * idx + 17);

            auto dz_x_xx = primBuffer.data(d2off + 36 * bdim + 18 * idx);

            auto dz_x_xy = primBuffer.data(d2off + 36 * bdim + 18 * idx + 1);

            auto dz_x_xz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 2);

            auto dz_x_yy = primBuffer.data(d2off + 36 * bdim + 18 * idx + 3);

            auto dz_x_yz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 4);

            auto dz_x_zz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 5);

            auto dz_y_xx = primBuffer.data(d2off + 36 * bdim + 18 * idx + 6);

            auto dz_y_xy = primBuffer.data(d2off + 36 * bdim + 18 * idx + 7);

            auto dz_y_xz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 8);

            auto dz_y_yy = primBuffer.data(d2off + 36 * bdim + 18 * idx + 9);

            auto dz_y_yz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 10);

            auto dz_y_zz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 11);

            auto dz_z_xx = primBuffer.data(d2off + 36 * bdim + 18 * idx + 12);

            auto dz_z_xy = primBuffer.data(d2off + 36 * bdim + 18 * idx + 13);

            auto dz_z_xz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 14);

            auto dz_z_yy = primBuffer.data(d2off + 36 * bdim + 18 * idx + 15);

            auto dz_z_yz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 16);

            auto dz_z_zz = primBuffer.data(d2off + 36 * bdim + 18 * idx + 17);

            // set up pointers to (D|M|P) integrals

            auto dx_xx_x = primBuffer.data(dkoff + 18 * idx);

            auto dx_xx_y = primBuffer.data(dkoff + 18 * idx + 1);

            auto dx_xx_z = primBuffer.data(dkoff + 18 * idx + 2);

            auto dx_xy_x = primBuffer.data(dkoff + 18 * idx + 3);

            auto dx_xy_y = primBuffer.data(dkoff + 18 * idx + 4);

            auto dx_xy_z = primBuffer.data(dkoff + 18 * idx + 5);

            auto dx_xz_x = primBuffer.data(dkoff + 18 * idx + 6);

            auto dx_xz_y = primBuffer.data(dkoff + 18 * idx + 7);

            auto dx_xz_z = primBuffer.data(dkoff + 18 * idx + 8);

            auto dx_yy_x = primBuffer.data(dkoff + 18 * idx + 9);

            auto dx_yy_y = primBuffer.data(dkoff + 18 * idx + 10);

            auto dx_yy_z = primBuffer.data(dkoff + 18 * idx + 11);

            auto dx_yz_x = primBuffer.data(dkoff + 18 * idx + 12);

            auto dx_yz_y = primBuffer.data(dkoff + 18 * idx + 13);

            auto dx_yz_z = primBuffer.data(dkoff + 18 * idx + 14);

            auto dx_zz_x = primBuffer.data(dkoff + 18 * idx + 15);

            auto dx_zz_y = primBuffer.data(dkoff + 18 * idx + 16);

            auto dx_zz_z = primBuffer.data(dkoff + 18 * idx + 17);

            auto dy_xx_x = primBuffer.data(dkoff + 18 * bdim + 18 * idx);

            auto dy_xx_y = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 1);

            auto dy_xx_z = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 2);

            auto dy_xy_x = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 3);

            auto dy_xy_y = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 4);

            auto dy_xy_z = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 5);

            auto dy_xz_x = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 6);

            auto dy_xz_y = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 7);

            auto dy_xz_z = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 8);

            auto dy_yy_x = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 9);

            auto dy_yy_y = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 10);

            auto dy_yy_z = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 11);

            auto dy_yz_x = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 12);

            auto dy_yz_y = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 13);

            auto dy_yz_z = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 14);

            auto dy_zz_x = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 15);

            auto dy_zz_y = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 16);

            auto dy_zz_z = primBuffer.data(dkoff + 18 * bdim + 18 * idx + 17);

            auto dz_xx_x = primBuffer.data(dkoff + 36 * bdim + 18 * idx);

            auto dz_xx_y = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 1);

            auto dz_xx_z = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 2);

            auto dz_xy_x = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 3);

            auto dz_xy_y = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 4);

            auto dz_xy_z = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 5);

            auto dz_xz_x = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 6);

            auto dz_xz_y = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 7);

            auto dz_xz_z = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 8);

            auto dz_yy_x = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 9);

            auto dz_yy_y = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 10);

            auto dz_yy_z = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 11);

            auto dz_yz_x = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 12);

            auto dz_yz_y = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 13);

            auto dz_yz_z = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 14);

            auto dz_zz_x = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 15);

            auto dz_zz_y = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 16);

            auto dz_zz_z = primBuffer.data(dkoff + 36 * bdim + 18 * idx + 17);

            // set up pointers to (D|D) integrals

            auto s_xx_xx = primBuffer.data(soff + 36 * idx);

            auto s_xx_xy = primBuffer.data(soff + 36 * idx + 1);

            auto s_xx_xz = primBuffer.data(soff + 36 * idx + 2);

            auto s_xx_yy = primBuffer.data(soff + 36 * idx + 3);

            auto s_xx_yz = primBuffer.data(soff + 36 * idx + 4);

            auto s_xx_zz = primBuffer.data(soff + 36 * idx + 5);

            auto s_xy_xx = primBuffer.data(soff + 36 * idx + 6);

            auto s_xy_xy = primBuffer.data(soff + 36 * idx + 7);

            auto s_xy_xz = primBuffer.data(soff + 36 * idx + 8);

            auto s_xy_yy = primBuffer.data(soff + 36 * idx + 9);

            auto s_xy_yz = primBuffer.data(soff + 36 * idx + 10);

            auto s_xy_zz = primBuffer.data(soff + 36 * idx + 11);

            auto s_xz_xx = primBuffer.data(soff + 36 * idx + 12);

            auto s_xz_xy = primBuffer.data(soff + 36 * idx + 13);

            auto s_xz_xz = primBuffer.data(soff + 36 * idx + 14);

            auto s_xz_yy = primBuffer.data(soff + 36 * idx + 15);

            auto s_xz_yz = primBuffer.data(soff + 36 * idx + 16);

            auto s_xz_zz = primBuffer.data(soff + 36 * idx + 17);

            auto s_yy_xx = primBuffer.data(soff + 36 * idx + 18);

            auto s_yy_xy = primBuffer.data(soff + 36 * idx + 19);

            auto s_yy_xz = primBuffer.data(soff + 36 * idx + 20);

            auto s_yy_yy = primBuffer.data(soff + 36 * idx + 21);

            auto s_yy_yz = primBuffer.data(soff + 36 * idx + 22);

            auto s_yy_zz = primBuffer.data(soff + 36 * idx + 23);

            auto s_yz_xx = primBuffer.data(soff + 36 * idx + 24);

            auto s_yz_xy = primBuffer.data(soff + 36 * idx + 25);

            auto s_yz_xz = primBuffer.data(soff + 36 * idx + 26);

            auto s_yz_yy = primBuffer.data(soff + 36 * idx + 27);

            auto s_yz_yz = primBuffer.data(soff + 36 * idx + 28);

            auto s_yz_zz = primBuffer.data(soff + 36 * idx + 29);

            auto s_zz_xx = primBuffer.data(soff + 36 * idx + 30);

            auto s_zz_xy = primBuffer.data(soff + 36 * idx + 31);

            auto s_zz_xz = primBuffer.data(soff + 36 * idx + 32);

            auto s_zz_yy = primBuffer.data(soff + 36 * idx + 33);

            auto s_zz_yz = primBuffer.data(soff + 36 * idx + 34);

            auto s_zz_zz = primBuffer.data(soff + 36 * idx + 35);

            // set up pointers to (P|D) integrals

            auto s_x_xx = primBuffer.data(s1off + 18 * idx);

            auto s_x_xy = primBuffer.data(s1off + 18 * idx + 1);

            auto s_x_xz = primBuffer.data(s1off + 18 * idx + 2);

            auto s_x_yy = primBuffer.data(s1off + 18 * idx + 3);

            auto s_x_yz = primBuffer.data(s1off + 18 * idx + 4);

            auto s_x_zz = primBuffer.data(s1off + 18 * idx + 5);

            auto s_y_xx = primBuffer.data(s1off + 18 * idx + 6);

            auto s_y_xy = primBuffer.data(s1off + 18 * idx + 7);

            auto s_y_xz = primBuffer.data(s1off + 18 * idx + 8);

            auto s_y_yy = primBuffer.data(s1off + 18 * idx + 9);

            auto s_y_yz = primBuffer.data(s1off + 18 * idx + 10);

            auto s_y_zz = primBuffer.data(s1off + 18 * idx + 11);

            auto s_z_xx = primBuffer.data(s1off + 18 * idx + 12);

            auto s_z_xy = primBuffer.data(s1off + 18 * idx + 13);

            auto s_z_xz = primBuffer.data(s1off + 18 * idx + 14);

            auto s_z_yy = primBuffer.data(s1off + 18 * idx + 15);

            auto s_z_yz = primBuffer.data(s1off + 18 * idx + 16);

            auto s_z_zz = primBuffer.data(s1off + 18 * idx + 17);

            // set up pointers to (S|D) integrals

            auto s_0_xx = primBuffer.data(s2off + 6 * idx);

            auto s_0_xy = primBuffer.data(s2off + 6 * idx + 1);

            auto s_0_xz = primBuffer.data(s2off + 6 * idx + 2);

            auto s_0_yy = primBuffer.data(s2off + 6 * idx + 3);

            auto s_0_yz = primBuffer.data(s2off + 6 * idx + 4);

            auto s_0_zz = primBuffer.data(s2off + 6 * idx + 5);

            // set up pointers to (P|P) integrals

            auto s_x_x = primBuffer.data(skoff + 9 * idx);

            auto s_x_y = primBuffer.data(skoff + 9 * idx + 1);

            auto s_x_z = primBuffer.data(skoff + 9 * idx + 2);

            auto s_y_x = primBuffer.data(skoff + 9 * idx + 3);

            auto s_y_y = primBuffer.data(skoff + 9 * idx + 4);

            auto s_y_z = primBuffer.data(skoff + 9 * idx + 5);

            auto s_z_x = primBuffer.data(skoff + 9 * idx + 6);

            auto s_z_y = primBuffer.data(skoff + 9 * idx + 7);

            auto s_z_z = primBuffer.data(skoff + 9 * idx + 8);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxx_xx, dx_xxx_xy, dx_xxx_xz,\
                                     dx_xxx_yy, dx_xxx_yz, dx_xxx_zz, dx_xxy_xx,\
                                     dx_xxy_xy, dx_xxy_xz, dx_xxy_yy, dx_xxy_yz,\
                                     dx_xxy_zz, dx_xxz_xx, dx_xxz_xy, dx_xxz_xz,\
                                     dx_xxz_yy, dx_xxz_yz, dx_xxz_zz, dx_xyy_xx,\
                                     dx_xyy_xy, dx_xyy_xz, dx_xyy_yy, dx_xyy_yz,\
                                     dx_xyy_zz, dx_xyz_xx, dx_xyz_xy, dx_xyz_xz,\
                                     dx_xyz_yy, dx_xyz_yz, dx_xyz_zz, dx_xzz_xx,\
                                     dx_xzz_xy, dx_xzz_xz, dx_xzz_yy, dx_xzz_yz,\
                                     dx_xzz_zz, dx_yyy_xx, dx_yyy_xy, dx_yyy_xz,\
                                     dx_yyy_yy, dx_yyy_yz, dx_yyy_zz, dx_yyz_xx,\
                                     dx_yyz_xy, dx_yyz_xz, dx_yyz_yy, dx_yyz_yz,\
                                     dx_yyz_zz, dx_yzz_xx, dx_yzz_xy, dx_yzz_xz,\
                                     dx_yzz_yy, dx_yzz_yz, dx_yzz_zz, dx_zzz_xx,\
                                     dx_zzz_xy, dx_zzz_xz, dx_zzz_yy, dx_zzz_yz,\
                                     dx_zzz_zz, dy_xxx_xx, dy_xxx_xy, dy_xxx_xz,\
                                     dy_xxx_yy, dy_xxx_yz, dy_xxx_zz, dy_xxy_xx,\
                                     dy_xxy_xy, dy_xxy_xz, dy_xxy_yy, dy_xxy_yz,\
                                     dy_xxy_zz, dy_xxz_xx, dy_xxz_xy, dy_xxz_xz,\
                                     dy_xxz_yy, dy_xxz_yz, dy_xxz_zz, dy_xyy_xx,\
                                     dy_xyy_xy, dy_xyy_xz, dy_xyy_yy, dy_xyy_yz,\
                                     dy_xyy_zz, dy_xyz_xx, dy_xyz_xy, dy_xyz_xz,\
                                     dy_xyz_yy, dy_xyz_yz, dy_xyz_zz, dy_xzz_xx,\
                                     dy_xzz_xy, dy_xzz_xz, dy_xzz_yy, dy_xzz_yz,\
                                     dy_xzz_zz, dy_yyy_xx, dy_yyy_xy, dy_yyy_xz,\
                                     dy_yyy_yy, dy_yyy_yz, dy_yyy_zz, dy_yyz_xx,\
                                     dy_yyz_xy, dy_yyz_xz, dy_yyz_yy, dy_yyz_yz,\
                                     dy_yyz_zz, dy_yzz_xx, dy_yzz_xy, dy_yzz_xz,\
                                     dy_yzz_yy, dy_yzz_yz, dy_yzz_zz, dy_zzz_xx,\
                                     dy_zzz_xy, dy_zzz_xz, dy_zzz_yy, dy_zzz_yz,\
                                     dy_zzz_zz, dz_xxx_xx, dz_xxx_xy, dz_xxx_xz,\
                                     dz_xxx_yy, dz_xxx_yz, dz_xxx_zz, dz_xxy_xx,\
                                     dz_xxy_xy, dz_xxy_xz, dz_xxy_yy, dz_xxy_yz,\
                                     dz_xxy_zz, dz_xxz_xx, dz_xxz_xy, dz_xxz_xz,\
                                     dz_xxz_yy, dz_xxz_yz, dz_xxz_zz, dz_xyy_xx,\
                                     dz_xyy_xy, dz_xyy_xz, dz_xyy_yy, dz_xyy_yz,\
                                     dz_xyy_zz, dz_xyz_xx, dz_xyz_xy, dz_xyz_xz,\
                                     dz_xyz_yy, dz_xyz_yz, dz_xyz_zz, dz_xzz_xx,\
                                     dz_xzz_xy, dz_xzz_xz, dz_xzz_yy, dz_xzz_yz,\
                                     dz_xzz_zz, dz_yyy_xx, dz_yyy_xy, dz_yyy_xz,\
                                     dz_yyy_yy, dz_yyy_yz, dz_yyy_zz, dz_yyz_xx,\
                                     dz_yyz_xy, dz_yyz_xz, dz_yyz_yy, dz_yyz_yz,\
                                     dz_yyz_zz, dz_yzz_xx, dz_yzz_xy, dz_yzz_xz,\
                                     dz_yzz_yy, dz_yzz_yz, dz_yzz_zz, dz_zzz_xx,\
                                     dz_zzz_xy, dz_zzz_xz, dz_zzz_yy, dz_zzz_yz,\
                                     dz_zzz_zz, dx_xx_xx, dx_xx_xy, dx_xx_xz, dx_xx_yy,\
                                     dx_xx_yz, dx_xx_zz, dx_xy_xx, dx_xy_xy, dx_xy_xz,\
                                     dx_xy_yy, dx_xy_yz, dx_xy_zz, dx_xz_xx, dx_xz_xy,\
                                     dx_xz_xz, dx_xz_yy, dx_xz_yz, dx_xz_zz, dx_yy_xx,\
                                     dx_yy_xy, dx_yy_xz, dx_yy_yy, dx_yy_yz, dx_yy_zz,\
                                     dx_yz_xx, dx_yz_xy, dx_yz_xz, dx_yz_yy, dx_yz_yz,\
                                     dx_yz_zz, dx_zz_xx, dx_zz_xy, dx_zz_xz, dx_zz_yy,\
                                     dx_zz_yz, dx_zz_zz, dy_xx_xx, dy_xx_xy, dy_xx_xz,\
                                     dy_xx_yy, dy_xx_yz, dy_xx_zz, dy_xy_xx, dy_xy_xy,\
                                     dy_xy_xz, dy_xy_yy, dy_xy_yz, dy_xy_zz, dy_xz_xx,\
                                     dy_xz_xy, dy_xz_xz, dy_xz_yy, dy_xz_yz, dy_xz_zz,\
                                     dy_yy_xx, dy_yy_xy, dy_yy_xz, dy_yy_yy, dy_yy_yz,\
                                     dy_yy_zz, dy_yz_xx, dy_yz_xy, dy_yz_xz, dy_yz_yy,\
                                     dy_yz_yz, dy_yz_zz, dy_zz_xx, dy_zz_xy, dy_zz_xz,\
                                     dy_zz_yy, dy_zz_yz, dy_zz_zz, dz_xx_xx, dz_xx_xy,\
                                     dz_xx_xz, dz_xx_yy, dz_xx_yz, dz_xx_zz, dz_xy_xx,\
                                     dz_xy_xy, dz_xy_xz, dz_xy_yy, dz_xy_yz, dz_xy_zz,\
                                     dz_xz_xx, dz_xz_xy, dz_xz_xz, dz_xz_yy, dz_xz_yz,\
                                     dz_xz_zz, dz_yy_xx, dz_yy_xy, dz_yy_xz, dz_yy_yy,\
                                     dz_yy_yz, dz_yy_zz, dz_yz_xx, dz_yz_xy, dz_yz_xz,\
                                     dz_yz_yy, dz_yz_yz, dz_yz_zz, dz_zz_xx, dz_zz_xy,\
                                     dz_zz_xz, dz_zz_yy, dz_zz_yz, dz_zz_zz, dx_x_xx,\
                                     dx_x_xy, dx_x_xz, dx_x_yy, dx_x_yz, dx_x_zz,\
                                     dx_y_xx, dx_y_xy, dx_y_xz, dx_y_yy, dx_y_yz,\
                                     dx_y_zz, dx_z_xx, dx_z_xy, dx_z_xz, dx_z_yy,\
                                     dx_z_yz, dx_z_zz, dy_x_xx, dy_x_xy, dy_x_xz,\
                                     dy_x_yy, dy_x_yz, dy_x_zz, dy_y_xx, dy_y_xy,\
                                     dy_y_xz, dy_y_yy, dy_y_yz, dy_y_zz, dy_z_xx,\
                                     dy_z_xy, dy_z_xz, dy_z_yy, dy_z_yz, dy_z_zz,\
                                     dz_x_xx, dz_x_xy, dz_x_xz, dz_x_yy, dz_x_yz,\
                                     dz_x_zz, dz_y_xx, dz_y_xy, dz_y_xz, dz_y_yy,\
                                     dz_y_yz, dz_y_zz, dz_z_xx, dz_z_xy, dz_z_xz,\
                                     dz_z_yy, dz_z_yz, dz_z_zz, dx_xx_x, dx_xx_y,\
                                     dx_xx_z, dx_xy_x, dx_xy_y, dx_xy_z, dx_xz_x,\
                                     dx_xz_y, dx_xz_z, dx_yy_x, dx_yy_y, dx_yy_z,\
                                     dx_yz_x, dx_yz_y, dx_yz_z, dx_zz_x, dx_zz_y,\
                                     dx_zz_z, dy_xx_x, dy_xx_y, dy_xx_z, dy_xy_x,\
                                     dy_xy_y, dy_xy_z, dy_xz_x, dy_xz_y, dy_xz_z,\
                                     dy_yy_x, dy_yy_y, dy_yy_z, dy_yz_x, dy_yz_y,\
                                     dy_yz_z, dy_zz_x, dy_zz_y, dy_zz_z, dz_xx_x,\
                                     dz_xx_y, dz_xx_z, dz_xy_x, dz_xy_y, dz_xy_z,\
                                     dz_xz_x, dz_xz_y, dz_xz_z, dz_yy_x, dz_yy_y,\
                                     dz_yy_z, dz_yz_x, dz_yz_y, dz_yz_z, dz_zz_x,\
                                     dz_zz_y, dz_zz_z, s_xx_xx, s_xx_xy, s_xx_xz,\
                                     s_xx_yy, s_xx_yz, s_xx_zz, s_xy_xx, s_xy_xy,\
                                     s_xy_xz, s_xy_yy, s_xy_yz, s_xy_zz, s_xz_xx,\
                                     s_xz_xy, s_xz_xz, s_xz_yy, s_xz_yz, s_xz_zz,\
                                     s_yy_xx, s_yy_xy, s_yy_xz, s_yy_yy, s_yy_yz,\
                                     s_yy_zz, s_yz_xx, s_yz_xy, s_yz_xz, s_yz_yy,\
                                     s_yz_yz, s_yz_zz, s_zz_xx, s_zz_xy, s_zz_xz,\
                                     s_zz_yy, s_zz_yz, s_zz_zz, s_x_xx, s_x_xy,\
                                     s_x_xz, s_x_yy, s_x_yz, s_x_zz, s_y_xx, s_y_xy,\
                                     s_y_xz, s_y_yy, s_y_yz, s_y_zz, s_z_xx, s_z_xy,\
                                     s_z_xz, s_z_yy, s_z_yz, s_z_zz, s_0_xx, s_0_xy,\
                                     s_0_xz, s_0_yy, s_0_yz, s_0_zz, s_x_x, s_x_y,\
                                     s_x_z, s_y_x, s_y_y, s_y_z, s_z_x, s_z_y,\
                                     s_z_z: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xx_xx[j] = fr * s_x_xx[j] + f2t * (s_0_xx[j] + 2.0 * s_x_x[j]);

                s_xx_xy[j] = fr * s_x_xy[j] + f2t * (s_0_xy[j] + s_x_y[j]);

                s_xx_xz[j] = fr * s_x_xz[j] + f2t * (s_0_xz[j] + s_x_z[j]);

                s_xx_yy[j] = fr * s_x_yy[j] + f2t * s_0_yy[j];

                s_xx_yz[j] = fr * s_x_yz[j] + f2t * s_0_yz[j];

                s_xx_zz[j] = fr * s_x_zz[j] + f2t * s_0_zz[j];

                s_xy_xx[j] = fr * s_y_xx[j] + f2t * 2.0 * s_y_x[j];

                s_xy_xy[j] = fr * s_y_xy[j] + f2t * s_y_y[j];

                s_xy_xz[j] = fr * s_y_xz[j] + f2t * s_y_z[j];

                s_xy_yy[j] = fr * s_y_yy[j];

                s_xy_yz[j] = fr * s_y_yz[j];

                s_xy_zz[j] = fr * s_y_zz[j];

                s_xz_xx[j] = fr * s_z_xx[j] + f2t * 2.0 * s_z_x[j];

                s_xz_xy[j] = fr * s_z_xy[j] + f2t * s_z_y[j];

                s_xz_xz[j] = fr * s_z_xz[j] + f2t * s_z_z[j];

                s_xz_yy[j] = fr * s_z_yy[j];

                s_xz_yz[j] = fr * s_z_yz[j];

                s_xz_zz[j] = fr * s_z_zz[j];

                // leading y component

                fr = pay[j];

                s_yy_xx[j] = fr * s_y_xx[j] + f2t * s_0_xx[j];

                s_yy_xy[j] = fr * s_y_xy[j] + f2t * (s_0_xy[j] + s_y_x[j]);

                s_yy_xz[j] = fr * s_y_xz[j] + f2t * s_0_xz[j];

                s_yy_yy[j] = fr * s_y_yy[j] + f2t * (s_0_yy[j] + 2.0 * s_y_y[j]);

                s_yy_yz[j] = fr * s_y_yz[j] + f2t * (s_0_yz[j] + s_y_z[j]);

                s_yy_zz[j] = fr * s_y_zz[j] + f2t * s_0_zz[j];

                s_yz_xx[j] = fr * s_z_xx[j];

                s_yz_xy[j] = fr * s_z_xy[j] + f2t * s_z_x[j];

                s_yz_xz[j] = fr * s_z_xz[j];

                s_yz_yy[j] = fr * s_z_yy[j] + f2t * 2.0 * s_z_y[j];

                s_yz_yz[j] = fr * s_z_yz[j] + f2t * s_z_z[j];

                s_yz_zz[j] = fr * s_z_zz[j];

                // leading z component

                fr = paz[j];

                s_zz_xx[j] = fr * s_z_xx[j] + f2t * s_0_xx[j];

                s_zz_xy[j] = fr * s_z_xy[j] + f2t * s_0_xy[j];

                s_zz_xz[j] = fr * s_z_xz[j] + f2t * (s_0_xz[j] + s_z_x[j]);

                s_zz_yy[j] = fr * s_z_yy[j] + f2t * s_0_yy[j];

                s_zz_yz[j] = fr * s_z_yz[j] + f2t * (s_0_yz[j] + s_z_y[j]);

                s_zz_zz[j] = fr * s_z_zz[j] + f2t * (s_0_zz[j] + 2.0 * s_z_z[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxx_xx[j] = fr * dx_xx_xx[j] + f2t * (2.0 * dx_x_xx[j] + 2.0 * dx_xx_x[j] + s_xx_xx[j]);

                dy_xxx_xx[j] = fr * dy_xx_xx[j] + f2t * (2.0 * dy_x_xx[j] + 2.0 * dy_xx_x[j]);

                dz_xxx_xx[j] = fr * dz_xx_xx[j] + f2t * (2.0 * dz_x_xx[j] + 2.0 * dz_xx_x[j]);

                dx_xxx_xy[j] = fr * dx_xx_xy[j] + f2t * (2.0 * dx_x_xy[j] + dx_xx_y[j] + s_xx_xy[j]);

                dy_xxx_xy[j] = fr * dy_xx_xy[j] + f2t * (2.0 * dy_x_xy[j] + dy_xx_y[j]);

                dz_xxx_xy[j] = fr * dz_xx_xy[j] + f2t * (2.0 * dz_x_xy[j] + dz_xx_y[j]);

                dx_xxx_xz[j] = fr * dx_xx_xz[j] + f2t * (2.0 * dx_x_xz[j] + dx_xx_z[j] + s_xx_xz[j]);

                dy_xxx_xz[j] = fr * dy_xx_xz[j] + f2t * (2.0 * dy_x_xz[j] + dy_xx_z[j]);

                dz_xxx_xz[j] = fr * dz_xx_xz[j] + f2t * (2.0 * dz_x_xz[j] + dz_xx_z[j]);

                dx_xxx_yy[j] = fr * dx_xx_yy[j] + f2t * (2.0 * dx_x_yy[j] + s_xx_yy[j]);

                dy_xxx_yy[j] = fr * dy_xx_yy[j] + f2t * 2.0 * dy_x_yy[j];

                dz_xxx_yy[j] = fr * dz_xx_yy[j] + f2t * 2.0 * dz_x_yy[j];

                dx_xxx_yz[j] = fr * dx_xx_yz[j] + f2t * (2.0 * dx_x_yz[j] + s_xx_yz[j]);

                dy_xxx_yz[j] = fr * dy_xx_yz[j] + f2t * 2.0 * dy_x_yz[j];

                dz_xxx_yz[j] = fr * dz_xx_yz[j] + f2t * 2.0 * dz_x_yz[j];

                dx_xxx_zz[j] = fr * dx_xx_zz[j] + f2t * (2.0 * dx_x_zz[j] + s_xx_zz[j]);

                dy_xxx_zz[j] = fr * dy_xx_zz[j] + f2t * 2.0 * dy_x_zz[j];

                dz_xxx_zz[j] = fr * dz_xx_zz[j] + f2t * 2.0 * dz_x_zz[j];

                dx_xxy_xx[j] = fr * dx_xy_xx[j] + f2t * (dx_y_xx[j] + 2.0 * dx_xy_x[j] + s_xy_xx[j]);

                dy_xxy_xx[j] = fr * dy_xy_xx[j] + f2t * (dy_y_xx[j] + 2.0 * dy_xy_x[j]);

                dz_xxy_xx[j] = fr * dz_xy_xx[j] + f2t * (dz_y_xx[j] + 2.0 * dz_xy_x[j]);

                dx_xxy_xy[j] = fr * dx_xy_xy[j] + f2t * (dx_y_xy[j] + dx_xy_y[j] + s_xy_xy[j]);

                dy_xxy_xy[j] = fr * dy_xy_xy[j] + f2t * (dy_y_xy[j] + dy_xy_y[j]);

                dz_xxy_xy[j] = fr * dz_xy_xy[j] + f2t * (dz_y_xy[j] + dz_xy_y[j]);

                dx_xxy_xz[j] = fr * dx_xy_xz[j] + f2t * (dx_y_xz[j] + dx_xy_z[j] + s_xy_xz[j]);

                dy_xxy_xz[j] = fr * dy_xy_xz[j] + f2t * (dy_y_xz[j] + dy_xy_z[j]);

                dz_xxy_xz[j] = fr * dz_xy_xz[j] + f2t * (dz_y_xz[j] + dz_xy_z[j]);

                dx_xxy_yy[j] = fr * dx_xy_yy[j] + f2t * (dx_y_yy[j] + s_xy_yy[j]);

                dy_xxy_yy[j] = fr * dy_xy_yy[j] + f2t * dy_y_yy[j];

                dz_xxy_yy[j] = fr * dz_xy_yy[j] + f2t * dz_y_yy[j];

                dx_xxy_yz[j] = fr * dx_xy_yz[j] + f2t * (dx_y_yz[j] + s_xy_yz[j]);

                dy_xxy_yz[j] = fr * dy_xy_yz[j] + f2t * dy_y_yz[j];

                dz_xxy_yz[j] = fr * dz_xy_yz[j] + f2t * dz_y_yz[j];

                dx_xxy_zz[j] = fr * dx_xy_zz[j] + f2t * (dx_y_zz[j] + s_xy_zz[j]);

                dy_xxy_zz[j] = fr * dy_xy_zz[j] + f2t * dy_y_zz[j];

                dz_xxy_zz[j] = fr * dz_xy_zz[j] + f2t * dz_y_zz[j];

                dx_xxz_xx[j] = fr * dx_xz_xx[j] + f2t * (dx_z_xx[j] + 2.0 * dx_xz_x[j] + s_xz_xx[j]);

                dy_xxz_xx[j] = fr * dy_xz_xx[j] + f2t * (dy_z_xx[j] + 2.0 * dy_xz_x[j]);

                dz_xxz_xx[j] = fr * dz_xz_xx[j] + f2t * (dz_z_xx[j] + 2.0 * dz_xz_x[j]);

                dx_xxz_xy[j] = fr * dx_xz_xy[j] + f2t * (dx_z_xy[j] + dx_xz_y[j] + s_xz_xy[j]);

                dy_xxz_xy[j] = fr * dy_xz_xy[j] + f2t * (dy_z_xy[j] + dy_xz_y[j]);

                dz_xxz_xy[j] = fr * dz_xz_xy[j] + f2t * (dz_z_xy[j] + dz_xz_y[j]);

                dx_xxz_xz[j] = fr * dx_xz_xz[j] + f2t * (dx_z_xz[j] + dx_xz_z[j] + s_xz_xz[j]);

                dy_xxz_xz[j] = fr * dy_xz_xz[j] + f2t * (dy_z_xz[j] + dy_xz_z[j]);

                dz_xxz_xz[j] = fr * dz_xz_xz[j] + f2t * (dz_z_xz[j] + dz_xz_z[j]);

                dx_xxz_yy[j] = fr * dx_xz_yy[j] + f2t * (dx_z_yy[j] + s_xz_yy[j]);

                dy_xxz_yy[j] = fr * dy_xz_yy[j] + f2t * dy_z_yy[j];

                dz_xxz_yy[j] = fr * dz_xz_yy[j] + f2t * dz_z_yy[j];

                dx_xxz_yz[j] = fr * dx_xz_yz[j] + f2t * (dx_z_yz[j] + s_xz_yz[j]);

                dy_xxz_yz[j] = fr * dy_xz_yz[j] + f2t * dy_z_yz[j];

                dz_xxz_yz[j] = fr * dz_xz_yz[j] + f2t * dz_z_yz[j];

                dx_xxz_zz[j] = fr * dx_xz_zz[j] + f2t * (dx_z_zz[j] + s_xz_zz[j]);

                dy_xxz_zz[j] = fr * dy_xz_zz[j] + f2t * dy_z_zz[j];

                dz_xxz_zz[j] = fr * dz_xz_zz[j] + f2t * dz_z_zz[j];

                dx_xyy_xx[j] = fr * dx_yy_xx[j] + f2t * (2.0 * dx_yy_x[j] + s_yy_xx[j]);

                dy_xyy_xx[j] = fr * dy_yy_xx[j] + f2t * 2.0 * dy_yy_x[j];

                dz_xyy_xx[j] = fr * dz_yy_xx[j] + f2t * 2.0 * dz_yy_x[j];

                dx_xyy_xy[j] = fr * dx_yy_xy[j] + f2t * (dx_yy_y[j] + s_yy_xy[j]);

                dy_xyy_xy[j] = fr * dy_yy_xy[j] + f2t * dy_yy_y[j];

                dz_xyy_xy[j] = fr * dz_yy_xy[j] + f2t * dz_yy_y[j];

                dx_xyy_xz[j] = fr * dx_yy_xz[j] + f2t * (dx_yy_z[j] + s_yy_xz[j]);

                dy_xyy_xz[j] = fr * dy_yy_xz[j] + f2t * dy_yy_z[j];

                dz_xyy_xz[j] = fr * dz_yy_xz[j] + f2t * dz_yy_z[j];

                dx_xyy_yy[j] = fr * dx_yy_yy[j] + f2t * s_yy_yy[j];

                dy_xyy_yy[j] = fr * dy_yy_yy[j];

                dz_xyy_yy[j] = fr * dz_yy_yy[j];

                dx_xyy_yz[j] = fr * dx_yy_yz[j] + f2t * s_yy_yz[j];

                dy_xyy_yz[j] = fr * dy_yy_yz[j];

                dz_xyy_yz[j] = fr * dz_yy_yz[j];

                dx_xyy_zz[j] = fr * dx_yy_zz[j] + f2t * s_yy_zz[j];

                dy_xyy_zz[j] = fr * dy_yy_zz[j];

                dz_xyy_zz[j] = fr * dz_yy_zz[j];

                dx_xyz_xx[j] = fr * dx_yz_xx[j] + f2t * (2.0 * dx_yz_x[j] + s_yz_xx[j]);

                dy_xyz_xx[j] = fr * dy_yz_xx[j] + f2t * 2.0 * dy_yz_x[j];

                dz_xyz_xx[j] = fr * dz_yz_xx[j] + f2t * 2.0 * dz_yz_x[j];

                dx_xyz_xy[j] = fr * dx_yz_xy[j] + f2t * (dx_yz_y[j] + s_yz_xy[j]);

                dy_xyz_xy[j] = fr * dy_yz_xy[j] + f2t * dy_yz_y[j];

                dz_xyz_xy[j] = fr * dz_yz_xy[j] + f2t * dz_yz_y[j];

                dx_xyz_xz[j] = fr * dx_yz_xz[j] + f2t * (dx_yz_z[j] + s_yz_xz[j]);

                dy_xyz_xz[j] = fr * dy_yz_xz[j] + f2t * dy_yz_z[j];

                dz_xyz_xz[j] = fr * dz_yz_xz[j] + f2t * dz_yz_z[j];

                dx_xyz_yy[j] = fr * dx_yz_yy[j] + f2t * s_yz_yy[j];

                dy_xyz_yy[j] = fr * dy_yz_yy[j];

                dz_xyz_yy[j] = fr * dz_yz_yy[j];

                dx_xyz_yz[j] = fr * dx_yz_yz[j] + f2t * s_yz_yz[j];

                dy_xyz_yz[j] = fr * dy_yz_yz[j];

                dz_xyz_yz[j] = fr * dz_yz_yz[j];

                dx_xyz_zz[j] = fr * dx_yz_zz[j] + f2t * s_yz_zz[j];

                dy_xyz_zz[j] = fr * dy_yz_zz[j];

                dz_xyz_zz[j] = fr * dz_yz_zz[j];

                dx_xzz_xx[j] = fr * dx_zz_xx[j] + f2t * (2.0 * dx_zz_x[j] + s_zz_xx[j]);

                dy_xzz_xx[j] = fr * dy_zz_xx[j] + f2t * 2.0 * dy_zz_x[j];

                dz_xzz_xx[j] = fr * dz_zz_xx[j] + f2t * 2.0 * dz_zz_x[j];

                dx_xzz_xy[j] = fr * dx_zz_xy[j] + f2t * (dx_zz_y[j] + s_zz_xy[j]);

                dy_xzz_xy[j] = fr * dy_zz_xy[j] + f2t * dy_zz_y[j];

                dz_xzz_xy[j] = fr * dz_zz_xy[j] + f2t * dz_zz_y[j];

                dx_xzz_xz[j] = fr * dx_zz_xz[j] + f2t * (dx_zz_z[j] + s_zz_xz[j]);

                dy_xzz_xz[j] = fr * dy_zz_xz[j] + f2t * dy_zz_z[j];

                dz_xzz_xz[j] = fr * dz_zz_xz[j] + f2t * dz_zz_z[j];

                dx_xzz_yy[j] = fr * dx_zz_yy[j] + f2t * s_zz_yy[j];

                dy_xzz_yy[j] = fr * dy_zz_yy[j];

                dz_xzz_yy[j] = fr * dz_zz_yy[j];

                dx_xzz_yz[j] = fr * dx_zz_yz[j] + f2t * s_zz_yz[j];

                dy_xzz_yz[j] = fr * dy_zz_yz[j];

                dz_xzz_yz[j] = fr * dz_zz_yz[j];

                dx_xzz_zz[j] = fr * dx_zz_zz[j] + f2t * s_zz_zz[j];

                dy_xzz_zz[j] = fr * dy_zz_zz[j];

                dz_xzz_zz[j] = fr * dz_zz_zz[j];

                // leading y component

                fr = pay[j];

                dx_yyy_xx[j] = fr * dx_yy_xx[j] + f2t * 2.0 * dx_y_xx[j];

                dy_yyy_xx[j] = fr * dy_yy_xx[j] + f2t * (2.0 * dy_y_xx[j] + s_yy_xx[j]);

                dz_yyy_xx[j] = fr * dz_yy_xx[j] + f2t * 2.0 * dz_y_xx[j];

                dx_yyy_xy[j] = fr * dx_yy_xy[j] + f2t * (2.0 * dx_y_xy[j] + dx_yy_x[j]);

                dy_yyy_xy[j] = fr * dy_yy_xy[j] + f2t * (2.0 * dy_y_xy[j] + dy_yy_x[j] + s_yy_xy[j]);

                dz_yyy_xy[j] = fr * dz_yy_xy[j] + f2t * (2.0 * dz_y_xy[j] + dz_yy_x[j]);

                dx_yyy_xz[j] = fr * dx_yy_xz[j] + f2t * 2.0 * dx_y_xz[j];

                dy_yyy_xz[j] = fr * dy_yy_xz[j] + f2t * (2.0 * dy_y_xz[j] + s_yy_xz[j]);

                dz_yyy_xz[j] = fr * dz_yy_xz[j] + f2t * 2.0 * dz_y_xz[j];

                dx_yyy_yy[j] = fr * dx_yy_yy[j] + f2t * (2.0 * dx_y_yy[j] + 2.0 * dx_yy_y[j]);

                dy_yyy_yy[j] = fr * dy_yy_yy[j] + f2t * (2.0 * dy_y_yy[j] + 2.0 * dy_yy_y[j] + s_yy_yy[j]);

                dz_yyy_yy[j] = fr * dz_yy_yy[j] + f2t * (2.0 * dz_y_yy[j] + 2.0 * dz_yy_y[j]);

                dx_yyy_yz[j] = fr * dx_yy_yz[j] + f2t * (2.0 * dx_y_yz[j] + dx_yy_z[j]);

                dy_yyy_yz[j] = fr * dy_yy_yz[j] + f2t * (2.0 * dy_y_yz[j] + dy_yy_z[j] + s_yy_yz[j]);

                dz_yyy_yz[j] = fr * dz_yy_yz[j] + f2t * (2.0 * dz_y_yz[j] + dz_yy_z[j]);

                dx_yyy_zz[j] = fr * dx_yy_zz[j] + f2t * 2.0 * dx_y_zz[j];

                dy_yyy_zz[j] = fr * dy_yy_zz[j] + f2t * (2.0 * dy_y_zz[j] + s_yy_zz[j]);

                dz_yyy_zz[j] = fr * dz_yy_zz[j] + f2t * 2.0 * dz_y_zz[j];

                dx_yyz_xx[j] = fr * dx_yz_xx[j] + f2t * dx_z_xx[j];

                dy_yyz_xx[j] = fr * dy_yz_xx[j] + f2t * (dy_z_xx[j] + s_yz_xx[j]);

                dz_yyz_xx[j] = fr * dz_yz_xx[j] + f2t * dz_z_xx[j];

                dx_yyz_xy[j] = fr * dx_yz_xy[j] + f2t * (dx_z_xy[j] + dx_yz_x[j]);

                dy_yyz_xy[j] = fr * dy_yz_xy[j] + f2t * (dy_z_xy[j] + dy_yz_x[j] + s_yz_xy[j]);

                dz_yyz_xy[j] = fr * dz_yz_xy[j] + f2t * (dz_z_xy[j] + dz_yz_x[j]);

                dx_yyz_xz[j] = fr * dx_yz_xz[j] + f2t * dx_z_xz[j];

                dy_yyz_xz[j] = fr * dy_yz_xz[j] + f2t * (dy_z_xz[j] + s_yz_xz[j]);

                dz_yyz_xz[j] = fr * dz_yz_xz[j] + f2t * dz_z_xz[j];

                dx_yyz_yy[j] = fr * dx_yz_yy[j] + f2t * (dx_z_yy[j] + 2.0 * dx_yz_y[j]);

                dy_yyz_yy[j] = fr * dy_yz_yy[j] + f2t * (dy_z_yy[j] + 2.0 * dy_yz_y[j] + s_yz_yy[j]);

                dz_yyz_yy[j] = fr * dz_yz_yy[j] + f2t * (dz_z_yy[j] + 2.0 * dz_yz_y[j]);

                dx_yyz_yz[j] = fr * dx_yz_yz[j] + f2t * (dx_z_yz[j] + dx_yz_z[j]);

                dy_yyz_yz[j] = fr * dy_yz_yz[j] + f2t * (dy_z_yz[j] + dy_yz_z[j] + s_yz_yz[j]);

                dz_yyz_yz[j] = fr * dz_yz_yz[j] + f2t * (dz_z_yz[j] + dz_yz_z[j]);

                dx_yyz_zz[j] = fr * dx_yz_zz[j] + f2t * dx_z_zz[j];

                dy_yyz_zz[j] = fr * dy_yz_zz[j] + f2t * (dy_z_zz[j] + s_yz_zz[j]);

                dz_yyz_zz[j] = fr * dz_yz_zz[j] + f2t * dz_z_zz[j];

                dx_yzz_xx[j] = fr * dx_zz_xx[j];

                dy_yzz_xx[j] = fr * dy_zz_xx[j] + f2t * s_zz_xx[j];

                dz_yzz_xx[j] = fr * dz_zz_xx[j];

                dx_yzz_xy[j] = fr * dx_zz_xy[j] + f2t * dx_zz_x[j];

                dy_yzz_xy[j] = fr * dy_zz_xy[j] + f2t * (dy_zz_x[j] + s_zz_xy[j]);

                dz_yzz_xy[j] = fr * dz_zz_xy[j] + f2t * dz_zz_x[j];

                dx_yzz_xz[j] = fr * dx_zz_xz[j];

                dy_yzz_xz[j] = fr * dy_zz_xz[j] + f2t * s_zz_xz[j];

                dz_yzz_xz[j] = fr * dz_zz_xz[j];

                dx_yzz_yy[j] = fr * dx_zz_yy[j] + f2t * 2.0 * dx_zz_y[j];

                dy_yzz_yy[j] = fr * dy_zz_yy[j] + f2t * (2.0 * dy_zz_y[j] + s_zz_yy[j]);

                dz_yzz_yy[j] = fr * dz_zz_yy[j] + f2t * 2.0 * dz_zz_y[j];

                dx_yzz_yz[j] = fr * dx_zz_yz[j] + f2t * dx_zz_z[j];

                dy_yzz_yz[j] = fr * dy_zz_yz[j] + f2t * (dy_zz_z[j] + s_zz_yz[j]);

                dz_yzz_yz[j] = fr * dz_zz_yz[j] + f2t * dz_zz_z[j];

                dx_yzz_zz[j] = fr * dx_zz_zz[j];

                dy_yzz_zz[j] = fr * dy_zz_zz[j] + f2t * s_zz_zz[j];

                dz_yzz_zz[j] = fr * dz_zz_zz[j];

                // leading z component

                fr = paz[j];

                dx_zzz_xx[j] = fr * dx_zz_xx[j] + f2t * 2.0 * dx_z_xx[j];

                dy_zzz_xx[j] = fr * dy_zz_xx[j] + f2t * 2.0 * dy_z_xx[j];

                dz_zzz_xx[j] = fr * dz_zz_xx[j] + f2t * (2.0 * dz_z_xx[j] + s_zz_xx[j]);

                dx_zzz_xy[j] = fr * dx_zz_xy[j] + f2t * 2.0 * dx_z_xy[j];

                dy_zzz_xy[j] = fr * dy_zz_xy[j] + f2t * 2.0 * dy_z_xy[j];

                dz_zzz_xy[j] = fr * dz_zz_xy[j] + f2t * (2.0 * dz_z_xy[j] + s_zz_xy[j]);

                dx_zzz_xz[j] = fr * dx_zz_xz[j] + f2t * (2.0 * dx_z_xz[j] + dx_zz_x[j]);

                dy_zzz_xz[j] = fr * dy_zz_xz[j] + f2t * (2.0 * dy_z_xz[j] + dy_zz_x[j]);

                dz_zzz_xz[j] = fr * dz_zz_xz[j] + f2t * (2.0 * dz_z_xz[j] + dz_zz_x[j] + s_zz_xz[j]);

                dx_zzz_yy[j] = fr * dx_zz_yy[j] + f2t * 2.0 * dx_z_yy[j];

                dy_zzz_yy[j] = fr * dy_zz_yy[j] + f2t * 2.0 * dy_z_yy[j];

                dz_zzz_yy[j] = fr * dz_zz_yy[j] + f2t * (2.0 * dz_z_yy[j] + s_zz_yy[j]);

                dx_zzz_yz[j] = fr * dx_zz_yz[j] + f2t * (2.0 * dx_z_yz[j] + dx_zz_y[j]);

                dy_zzz_yz[j] = fr * dy_zz_yz[j] + f2t * (2.0 * dy_z_yz[j] + dy_zz_y[j]);

                dz_zzz_yz[j] = fr * dz_zz_yz[j] + f2t * (2.0 * dz_z_yz[j] + dz_zz_y[j] + s_zz_yz[j]);

                dx_zzz_zz[j] = fr * dx_zz_zz[j] + f2t * (2.0 * dx_z_zz[j] + 2.0 * dx_zz_z[j]);

                dy_zzz_zz[j] = fr * dy_zz_zz[j] + f2t * (2.0 * dy_z_zz[j] + 2.0 * dy_zz_z[j]);

                dz_zzz_zz[j] = fr * dz_zz_zz[j] + f2t * (2.0 * dz_z_zz[j] + 2.0 * dz_zz_z[j] + s_zz_zz[j]);
            }

            idx++;
        }
    }
    
        void
    compElectricDipoleForFF(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {3, 3, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {3, 3, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 3, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 2, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 3, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (F|M|F) integrals

            auto dx_xxx_xxx = primBuffer.data(doff + 100 * idx);

            auto dx_xxx_xxy = primBuffer.data(doff + 100 * idx + 1);

            auto dx_xxx_xxz = primBuffer.data(doff + 100 * idx + 2);

            auto dx_xxx_xyy = primBuffer.data(doff + 100 * idx + 3);

            auto dx_xxx_xyz = primBuffer.data(doff + 100 * idx + 4);

            auto dx_xxx_xzz = primBuffer.data(doff + 100 * idx + 5);

            auto dx_xxx_yyy = primBuffer.data(doff + 100 * idx + 6);

            auto dx_xxx_yyz = primBuffer.data(doff + 100 * idx + 7);

            auto dx_xxx_yzz = primBuffer.data(doff + 100 * idx + 8);

            auto dx_xxx_zzz = primBuffer.data(doff + 100 * idx + 9);

            auto dx_xxy_xxx = primBuffer.data(doff + 100 * idx + 10);

            auto dx_xxy_xxy = primBuffer.data(doff + 100 * idx + 11);

            auto dx_xxy_xxz = primBuffer.data(doff + 100 * idx + 12);

            auto dx_xxy_xyy = primBuffer.data(doff + 100 * idx + 13);

            auto dx_xxy_xyz = primBuffer.data(doff + 100 * idx + 14);

            auto dx_xxy_xzz = primBuffer.data(doff + 100 * idx + 15);

            auto dx_xxy_yyy = primBuffer.data(doff + 100 * idx + 16);

            auto dx_xxy_yyz = primBuffer.data(doff + 100 * idx + 17);

            auto dx_xxy_yzz = primBuffer.data(doff + 100 * idx + 18);

            auto dx_xxy_zzz = primBuffer.data(doff + 100 * idx + 19);

            auto dx_xxz_xxx = primBuffer.data(doff + 100 * idx + 20);

            auto dx_xxz_xxy = primBuffer.data(doff + 100 * idx + 21);

            auto dx_xxz_xxz = primBuffer.data(doff + 100 * idx + 22);

            auto dx_xxz_xyy = primBuffer.data(doff + 100 * idx + 23);

            auto dx_xxz_xyz = primBuffer.data(doff + 100 * idx + 24);

            auto dx_xxz_xzz = primBuffer.data(doff + 100 * idx + 25);

            auto dx_xxz_yyy = primBuffer.data(doff + 100 * idx + 26);

            auto dx_xxz_yyz = primBuffer.data(doff + 100 * idx + 27);

            auto dx_xxz_yzz = primBuffer.data(doff + 100 * idx + 28);

            auto dx_xxz_zzz = primBuffer.data(doff + 100 * idx + 29);

            auto dx_xyy_xxx = primBuffer.data(doff + 100 * idx + 30);

            auto dx_xyy_xxy = primBuffer.data(doff + 100 * idx + 31);

            auto dx_xyy_xxz = primBuffer.data(doff + 100 * idx + 32);

            auto dx_xyy_xyy = primBuffer.data(doff + 100 * idx + 33);

            auto dx_xyy_xyz = primBuffer.data(doff + 100 * idx + 34);

            auto dx_xyy_xzz = primBuffer.data(doff + 100 * idx + 35);

            auto dx_xyy_yyy = primBuffer.data(doff + 100 * idx + 36);

            auto dx_xyy_yyz = primBuffer.data(doff + 100 * idx + 37);

            auto dx_xyy_yzz = primBuffer.data(doff + 100 * idx + 38);

            auto dx_xyy_zzz = primBuffer.data(doff + 100 * idx + 39);

            auto dx_xyz_xxx = primBuffer.data(doff + 100 * idx + 40);

            auto dx_xyz_xxy = primBuffer.data(doff + 100 * idx + 41);

            auto dx_xyz_xxz = primBuffer.data(doff + 100 * idx + 42);

            auto dx_xyz_xyy = primBuffer.data(doff + 100 * idx + 43);

            auto dx_xyz_xyz = primBuffer.data(doff + 100 * idx + 44);

            auto dx_xyz_xzz = primBuffer.data(doff + 100 * idx + 45);

            auto dx_xyz_yyy = primBuffer.data(doff + 100 * idx + 46);

            auto dx_xyz_yyz = primBuffer.data(doff + 100 * idx + 47);

            auto dx_xyz_yzz = primBuffer.data(doff + 100 * idx + 48);

            auto dx_xyz_zzz = primBuffer.data(doff + 100 * idx + 49);

            auto dx_xzz_xxx = primBuffer.data(doff + 100 * idx + 50);

            auto dx_xzz_xxy = primBuffer.data(doff + 100 * idx + 51);

            auto dx_xzz_xxz = primBuffer.data(doff + 100 * idx + 52);

            auto dx_xzz_xyy = primBuffer.data(doff + 100 * idx + 53);

            auto dx_xzz_xyz = primBuffer.data(doff + 100 * idx + 54);

            auto dx_xzz_xzz = primBuffer.data(doff + 100 * idx + 55);

            auto dx_xzz_yyy = primBuffer.data(doff + 100 * idx + 56);

            auto dx_xzz_yyz = primBuffer.data(doff + 100 * idx + 57);

            auto dx_xzz_yzz = primBuffer.data(doff + 100 * idx + 58);

            auto dx_xzz_zzz = primBuffer.data(doff + 100 * idx + 59);

            auto dx_yyy_xxx = primBuffer.data(doff + 100 * idx + 60);

            auto dx_yyy_xxy = primBuffer.data(doff + 100 * idx + 61);

            auto dx_yyy_xxz = primBuffer.data(doff + 100 * idx + 62);

            auto dx_yyy_xyy = primBuffer.data(doff + 100 * idx + 63);

            auto dx_yyy_xyz = primBuffer.data(doff + 100 * idx + 64);

            auto dx_yyy_xzz = primBuffer.data(doff + 100 * idx + 65);

            auto dx_yyy_yyy = primBuffer.data(doff + 100 * idx + 66);

            auto dx_yyy_yyz = primBuffer.data(doff + 100 * idx + 67);

            auto dx_yyy_yzz = primBuffer.data(doff + 100 * idx + 68);

            auto dx_yyy_zzz = primBuffer.data(doff + 100 * idx + 69);

            auto dx_yyz_xxx = primBuffer.data(doff + 100 * idx + 70);

            auto dx_yyz_xxy = primBuffer.data(doff + 100 * idx + 71);

            auto dx_yyz_xxz = primBuffer.data(doff + 100 * idx + 72);

            auto dx_yyz_xyy = primBuffer.data(doff + 100 * idx + 73);

            auto dx_yyz_xyz = primBuffer.data(doff + 100 * idx + 74);

            auto dx_yyz_xzz = primBuffer.data(doff + 100 * idx + 75);

            auto dx_yyz_yyy = primBuffer.data(doff + 100 * idx + 76);

            auto dx_yyz_yyz = primBuffer.data(doff + 100 * idx + 77);

            auto dx_yyz_yzz = primBuffer.data(doff + 100 * idx + 78);

            auto dx_yyz_zzz = primBuffer.data(doff + 100 * idx + 79);

            auto dx_yzz_xxx = primBuffer.data(doff + 100 * idx + 80);

            auto dx_yzz_xxy = primBuffer.data(doff + 100 * idx + 81);

            auto dx_yzz_xxz = primBuffer.data(doff + 100 * idx + 82);

            auto dx_yzz_xyy = primBuffer.data(doff + 100 * idx + 83);

            auto dx_yzz_xyz = primBuffer.data(doff + 100 * idx + 84);

            auto dx_yzz_xzz = primBuffer.data(doff + 100 * idx + 85);

            auto dx_yzz_yyy = primBuffer.data(doff + 100 * idx + 86);

            auto dx_yzz_yyz = primBuffer.data(doff + 100 * idx + 87);

            auto dx_yzz_yzz = primBuffer.data(doff + 100 * idx + 88);

            auto dx_yzz_zzz = primBuffer.data(doff + 100 * idx + 89);

            auto dx_zzz_xxx = primBuffer.data(doff + 100 * idx + 90);

            auto dx_zzz_xxy = primBuffer.data(doff + 100 * idx + 91);

            auto dx_zzz_xxz = primBuffer.data(doff + 100 * idx + 92);

            auto dx_zzz_xyy = primBuffer.data(doff + 100 * idx + 93);

            auto dx_zzz_xyz = primBuffer.data(doff + 100 * idx + 94);

            auto dx_zzz_xzz = primBuffer.data(doff + 100 * idx + 95);

            auto dx_zzz_yyy = primBuffer.data(doff + 100 * idx + 96);

            auto dx_zzz_yyz = primBuffer.data(doff + 100 * idx + 97);

            auto dx_zzz_yzz = primBuffer.data(doff + 100 * idx + 98);

            auto dx_zzz_zzz = primBuffer.data(doff + 100 * idx + 99);

            auto dy_xxx_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx);

            auto dy_xxx_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 1);

            auto dy_xxx_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 2);

            auto dy_xxx_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 3);

            auto dy_xxx_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 4);

            auto dy_xxx_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 5);

            auto dy_xxx_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 6);

            auto dy_xxx_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 7);

            auto dy_xxx_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 8);

            auto dy_xxx_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 9);

            auto dy_xxy_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 10);

            auto dy_xxy_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 11);

            auto dy_xxy_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 12);

            auto dy_xxy_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 13);

            auto dy_xxy_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 14);

            auto dy_xxy_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 15);

            auto dy_xxy_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 16);

            auto dy_xxy_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 17);

            auto dy_xxy_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 18);

            auto dy_xxy_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 19);

            auto dy_xxz_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 20);

            auto dy_xxz_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 21);

            auto dy_xxz_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 22);

            auto dy_xxz_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 23);

            auto dy_xxz_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 24);

            auto dy_xxz_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 25);

            auto dy_xxz_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 26);

            auto dy_xxz_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 27);

            auto dy_xxz_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 28);

            auto dy_xxz_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 29);

            auto dy_xyy_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 30);

            auto dy_xyy_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 31);

            auto dy_xyy_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 32);

            auto dy_xyy_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 33);

            auto dy_xyy_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 34);

            auto dy_xyy_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 35);

            auto dy_xyy_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 36);

            auto dy_xyy_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 37);

            auto dy_xyy_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 38);

            auto dy_xyy_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 39);

            auto dy_xyz_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 40);

            auto dy_xyz_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 41);

            auto dy_xyz_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 42);

            auto dy_xyz_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 43);

            auto dy_xyz_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 44);

            auto dy_xyz_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 45);

            auto dy_xyz_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 46);

            auto dy_xyz_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 47);

            auto dy_xyz_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 48);

            auto dy_xyz_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 49);

            auto dy_xzz_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 50);

            auto dy_xzz_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 51);

            auto dy_xzz_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 52);

            auto dy_xzz_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 53);

            auto dy_xzz_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 54);

            auto dy_xzz_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 55);

            auto dy_xzz_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 56);

            auto dy_xzz_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 57);

            auto dy_xzz_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 58);

            auto dy_xzz_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 59);

            auto dy_yyy_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 60);

            auto dy_yyy_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 61);

            auto dy_yyy_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 62);

            auto dy_yyy_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 63);

            auto dy_yyy_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 64);

            auto dy_yyy_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 65);

            auto dy_yyy_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 66);

            auto dy_yyy_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 67);

            auto dy_yyy_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 68);

            auto dy_yyy_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 69);

            auto dy_yyz_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 70);

            auto dy_yyz_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 71);

            auto dy_yyz_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 72);

            auto dy_yyz_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 73);

            auto dy_yyz_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 74);

            auto dy_yyz_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 75);

            auto dy_yyz_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 76);

            auto dy_yyz_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 77);

            auto dy_yyz_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 78);

            auto dy_yyz_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 79);

            auto dy_yzz_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 80);

            auto dy_yzz_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 81);

            auto dy_yzz_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 82);

            auto dy_yzz_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 83);

            auto dy_yzz_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 84);

            auto dy_yzz_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 85);

            auto dy_yzz_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 86);

            auto dy_yzz_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 87);

            auto dy_yzz_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 88);

            auto dy_yzz_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 89);

            auto dy_zzz_xxx = primBuffer.data(doff + 100 * bdim + 100 * idx + 90);

            auto dy_zzz_xxy = primBuffer.data(doff + 100 * bdim + 100 * idx + 91);

            auto dy_zzz_xxz = primBuffer.data(doff + 100 * bdim + 100 * idx + 92);

            auto dy_zzz_xyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 93);

            auto dy_zzz_xyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 94);

            auto dy_zzz_xzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 95);

            auto dy_zzz_yyy = primBuffer.data(doff + 100 * bdim + 100 * idx + 96);

            auto dy_zzz_yyz = primBuffer.data(doff + 100 * bdim + 100 * idx + 97);

            auto dy_zzz_yzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 98);

            auto dy_zzz_zzz = primBuffer.data(doff + 100 * bdim + 100 * idx + 99);

            auto dz_xxx_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx);

            auto dz_xxx_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 1);

            auto dz_xxx_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 2);

            auto dz_xxx_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 3);

            auto dz_xxx_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 4);

            auto dz_xxx_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 5);

            auto dz_xxx_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 6);

            auto dz_xxx_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 7);

            auto dz_xxx_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 8);

            auto dz_xxx_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 9);

            auto dz_xxy_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 10);

            auto dz_xxy_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 11);

            auto dz_xxy_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 12);

            auto dz_xxy_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 13);

            auto dz_xxy_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 14);

            auto dz_xxy_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 15);

            auto dz_xxy_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 16);

            auto dz_xxy_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 17);

            auto dz_xxy_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 18);

            auto dz_xxy_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 19);

            auto dz_xxz_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 20);

            auto dz_xxz_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 21);

            auto dz_xxz_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 22);

            auto dz_xxz_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 23);

            auto dz_xxz_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 24);

            auto dz_xxz_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 25);

            auto dz_xxz_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 26);

            auto dz_xxz_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 27);

            auto dz_xxz_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 28);

            auto dz_xxz_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 29);

            auto dz_xyy_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 30);

            auto dz_xyy_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 31);

            auto dz_xyy_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 32);

            auto dz_xyy_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 33);

            auto dz_xyy_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 34);

            auto dz_xyy_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 35);

            auto dz_xyy_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 36);

            auto dz_xyy_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 37);

            auto dz_xyy_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 38);

            auto dz_xyy_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 39);

            auto dz_xyz_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 40);

            auto dz_xyz_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 41);

            auto dz_xyz_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 42);

            auto dz_xyz_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 43);

            auto dz_xyz_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 44);

            auto dz_xyz_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 45);

            auto dz_xyz_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 46);

            auto dz_xyz_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 47);

            auto dz_xyz_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 48);

            auto dz_xyz_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 49);

            auto dz_xzz_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 50);

            auto dz_xzz_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 51);

            auto dz_xzz_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 52);

            auto dz_xzz_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 53);

            auto dz_xzz_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 54);

            auto dz_xzz_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 55);

            auto dz_xzz_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 56);

            auto dz_xzz_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 57);

            auto dz_xzz_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 58);

            auto dz_xzz_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 59);

            auto dz_yyy_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 60);

            auto dz_yyy_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 61);

            auto dz_yyy_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 62);

            auto dz_yyy_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 63);

            auto dz_yyy_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 64);

            auto dz_yyy_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 65);

            auto dz_yyy_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 66);

            auto dz_yyy_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 67);

            auto dz_yyy_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 68);

            auto dz_yyy_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 69);

            auto dz_yyz_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 70);

            auto dz_yyz_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 71);

            auto dz_yyz_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 72);

            auto dz_yyz_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 73);

            auto dz_yyz_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 74);

            auto dz_yyz_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 75);

            auto dz_yyz_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 76);

            auto dz_yyz_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 77);

            auto dz_yyz_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 78);

            auto dz_yyz_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 79);

            auto dz_yzz_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 80);

            auto dz_yzz_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 81);

            auto dz_yzz_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 82);

            auto dz_yzz_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 83);

            auto dz_yzz_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 84);

            auto dz_yzz_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 85);

            auto dz_yzz_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 86);

            auto dz_yzz_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 87);

            auto dz_yzz_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 88);

            auto dz_yzz_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 89);

            auto dz_zzz_xxx = primBuffer.data(doff + 200 * bdim + 100 * idx + 90);

            auto dz_zzz_xxy = primBuffer.data(doff + 200 * bdim + 100 * idx + 91);

            auto dz_zzz_xxz = primBuffer.data(doff + 200 * bdim + 100 * idx + 92);

            auto dz_zzz_xyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 93);

            auto dz_zzz_xyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 94);

            auto dz_zzz_xzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 95);

            auto dz_zzz_yyy = primBuffer.data(doff + 200 * bdim + 100 * idx + 96);

            auto dz_zzz_yyz = primBuffer.data(doff + 200 * bdim + 100 * idx + 97);

            auto dz_zzz_yzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 98);

            auto dz_zzz_zzz = primBuffer.data(doff + 200 * bdim + 100 * idx + 99);

            // set up pointers to (D|M|F) integrals

            auto dx_xx_xxx = primBuffer.data(d1off + 60 * idx);

            auto dx_xx_xxy = primBuffer.data(d1off + 60 * idx + 1);

            auto dx_xx_xxz = primBuffer.data(d1off + 60 * idx + 2);

            auto dx_xx_xyy = primBuffer.data(d1off + 60 * idx + 3);

            auto dx_xx_xyz = primBuffer.data(d1off + 60 * idx + 4);

            auto dx_xx_xzz = primBuffer.data(d1off + 60 * idx + 5);

            auto dx_xx_yyy = primBuffer.data(d1off + 60 * idx + 6);

            auto dx_xx_yyz = primBuffer.data(d1off + 60 * idx + 7);

            auto dx_xx_yzz = primBuffer.data(d1off + 60 * idx + 8);

            auto dx_xx_zzz = primBuffer.data(d1off + 60 * idx + 9);

            auto dx_xy_xxx = primBuffer.data(d1off + 60 * idx + 10);

            auto dx_xy_xxy = primBuffer.data(d1off + 60 * idx + 11);

            auto dx_xy_xxz = primBuffer.data(d1off + 60 * idx + 12);

            auto dx_xy_xyy = primBuffer.data(d1off + 60 * idx + 13);

            auto dx_xy_xyz = primBuffer.data(d1off + 60 * idx + 14);

            auto dx_xy_xzz = primBuffer.data(d1off + 60 * idx + 15);

            auto dx_xy_yyy = primBuffer.data(d1off + 60 * idx + 16);

            auto dx_xy_yyz = primBuffer.data(d1off + 60 * idx + 17);

            auto dx_xy_yzz = primBuffer.data(d1off + 60 * idx + 18);

            auto dx_xy_zzz = primBuffer.data(d1off + 60 * idx + 19);

            auto dx_xz_xxx = primBuffer.data(d1off + 60 * idx + 20);

            auto dx_xz_xxy = primBuffer.data(d1off + 60 * idx + 21);

            auto dx_xz_xxz = primBuffer.data(d1off + 60 * idx + 22);

            auto dx_xz_xyy = primBuffer.data(d1off + 60 * idx + 23);

            auto dx_xz_xyz = primBuffer.data(d1off + 60 * idx + 24);

            auto dx_xz_xzz = primBuffer.data(d1off + 60 * idx + 25);

            auto dx_xz_yyy = primBuffer.data(d1off + 60 * idx + 26);

            auto dx_xz_yyz = primBuffer.data(d1off + 60 * idx + 27);

            auto dx_xz_yzz = primBuffer.data(d1off + 60 * idx + 28);

            auto dx_xz_zzz = primBuffer.data(d1off + 60 * idx + 29);

            auto dx_yy_xxx = primBuffer.data(d1off + 60 * idx + 30);

            auto dx_yy_xxy = primBuffer.data(d1off + 60 * idx + 31);

            auto dx_yy_xxz = primBuffer.data(d1off + 60 * idx + 32);

            auto dx_yy_xyy = primBuffer.data(d1off + 60 * idx + 33);

            auto dx_yy_xyz = primBuffer.data(d1off + 60 * idx + 34);

            auto dx_yy_xzz = primBuffer.data(d1off + 60 * idx + 35);

            auto dx_yy_yyy = primBuffer.data(d1off + 60 * idx + 36);

            auto dx_yy_yyz = primBuffer.data(d1off + 60 * idx + 37);

            auto dx_yy_yzz = primBuffer.data(d1off + 60 * idx + 38);

            auto dx_yy_zzz = primBuffer.data(d1off + 60 * idx + 39);

            auto dx_yz_xxx = primBuffer.data(d1off + 60 * idx + 40);

            auto dx_yz_xxy = primBuffer.data(d1off + 60 * idx + 41);

            auto dx_yz_xxz = primBuffer.data(d1off + 60 * idx + 42);

            auto dx_yz_xyy = primBuffer.data(d1off + 60 * idx + 43);

            auto dx_yz_xyz = primBuffer.data(d1off + 60 * idx + 44);

            auto dx_yz_xzz = primBuffer.data(d1off + 60 * idx + 45);

            auto dx_yz_yyy = primBuffer.data(d1off + 60 * idx + 46);

            auto dx_yz_yyz = primBuffer.data(d1off + 60 * idx + 47);

            auto dx_yz_yzz = primBuffer.data(d1off + 60 * idx + 48);

            auto dx_yz_zzz = primBuffer.data(d1off + 60 * idx + 49);

            auto dx_zz_xxx = primBuffer.data(d1off + 60 * idx + 50);

            auto dx_zz_xxy = primBuffer.data(d1off + 60 * idx + 51);

            auto dx_zz_xxz = primBuffer.data(d1off + 60 * idx + 52);

            auto dx_zz_xyy = primBuffer.data(d1off + 60 * idx + 53);

            auto dx_zz_xyz = primBuffer.data(d1off + 60 * idx + 54);

            auto dx_zz_xzz = primBuffer.data(d1off + 60 * idx + 55);

            auto dx_zz_yyy = primBuffer.data(d1off + 60 * idx + 56);

            auto dx_zz_yyz = primBuffer.data(d1off + 60 * idx + 57);

            auto dx_zz_yzz = primBuffer.data(d1off + 60 * idx + 58);

            auto dx_zz_zzz = primBuffer.data(d1off + 60 * idx + 59);

            auto dy_xx_xxx = primBuffer.data(d1off + 60 * bdim + 60 * idx);

            auto dy_xx_xxy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 1);

            auto dy_xx_xxz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 2);

            auto dy_xx_xyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 3);

            auto dy_xx_xyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 4);

            auto dy_xx_xzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 5);

            auto dy_xx_yyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 6);

            auto dy_xx_yyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 7);

            auto dy_xx_yzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 8);

            auto dy_xx_zzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 9);

            auto dy_xy_xxx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 10);

            auto dy_xy_xxy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 11);

            auto dy_xy_xxz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 12);

            auto dy_xy_xyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 13);

            auto dy_xy_xyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 14);

            auto dy_xy_xzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 15);

            auto dy_xy_yyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 16);

            auto dy_xy_yyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 17);

            auto dy_xy_yzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 18);

            auto dy_xy_zzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 19);

            auto dy_xz_xxx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 20);

            auto dy_xz_xxy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 21);

            auto dy_xz_xxz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 22);

            auto dy_xz_xyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 23);

            auto dy_xz_xyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 24);

            auto dy_xz_xzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 25);

            auto dy_xz_yyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 26);

            auto dy_xz_yyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 27);

            auto dy_xz_yzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 28);

            auto dy_xz_zzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 29);

            auto dy_yy_xxx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 30);

            auto dy_yy_xxy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 31);

            auto dy_yy_xxz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 32);

            auto dy_yy_xyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 33);

            auto dy_yy_xyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 34);

            auto dy_yy_xzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 35);

            auto dy_yy_yyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 36);

            auto dy_yy_yyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 37);

            auto dy_yy_yzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 38);

            auto dy_yy_zzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 39);

            auto dy_yz_xxx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 40);

            auto dy_yz_xxy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 41);

            auto dy_yz_xxz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 42);

            auto dy_yz_xyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 43);

            auto dy_yz_xyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 44);

            auto dy_yz_xzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 45);

            auto dy_yz_yyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 46);

            auto dy_yz_yyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 47);

            auto dy_yz_yzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 48);

            auto dy_yz_zzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 49);

            auto dy_zz_xxx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 50);

            auto dy_zz_xxy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 51);

            auto dy_zz_xxz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 52);

            auto dy_zz_xyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 53);

            auto dy_zz_xyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 54);

            auto dy_zz_xzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 55);

            auto dy_zz_yyy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 56);

            auto dy_zz_yyz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 57);

            auto dy_zz_yzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 58);

            auto dy_zz_zzz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 59);

            auto dz_xx_xxx = primBuffer.data(d1off + 120 * bdim + 60 * idx);

            auto dz_xx_xxy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 1);

            auto dz_xx_xxz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 2);

            auto dz_xx_xyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 3);

            auto dz_xx_xyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 4);

            auto dz_xx_xzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 5);

            auto dz_xx_yyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 6);

            auto dz_xx_yyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 7);

            auto dz_xx_yzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 8);

            auto dz_xx_zzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 9);

            auto dz_xy_xxx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 10);

            auto dz_xy_xxy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 11);

            auto dz_xy_xxz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 12);

            auto dz_xy_xyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 13);

            auto dz_xy_xyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 14);

            auto dz_xy_xzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 15);

            auto dz_xy_yyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 16);

            auto dz_xy_yyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 17);

            auto dz_xy_yzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 18);

            auto dz_xy_zzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 19);

            auto dz_xz_xxx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 20);

            auto dz_xz_xxy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 21);

            auto dz_xz_xxz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 22);

            auto dz_xz_xyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 23);

            auto dz_xz_xyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 24);

            auto dz_xz_xzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 25);

            auto dz_xz_yyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 26);

            auto dz_xz_yyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 27);

            auto dz_xz_yzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 28);

            auto dz_xz_zzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 29);

            auto dz_yy_xxx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 30);

            auto dz_yy_xxy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 31);

            auto dz_yy_xxz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 32);

            auto dz_yy_xyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 33);

            auto dz_yy_xyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 34);

            auto dz_yy_xzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 35);

            auto dz_yy_yyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 36);

            auto dz_yy_yyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 37);

            auto dz_yy_yzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 38);

            auto dz_yy_zzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 39);

            auto dz_yz_xxx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 40);

            auto dz_yz_xxy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 41);

            auto dz_yz_xxz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 42);

            auto dz_yz_xyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 43);

            auto dz_yz_xyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 44);

            auto dz_yz_xzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 45);

            auto dz_yz_yyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 46);

            auto dz_yz_yyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 47);

            auto dz_yz_yzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 48);

            auto dz_yz_zzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 49);

            auto dz_zz_xxx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 50);

            auto dz_zz_xxy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 51);

            auto dz_zz_xxz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 52);

            auto dz_zz_xyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 53);

            auto dz_zz_xyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 54);

            auto dz_zz_xzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 55);

            auto dz_zz_yyy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 56);

            auto dz_zz_yyz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 57);

            auto dz_zz_yzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 58);

            auto dz_zz_zzz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 59);

            // set up pointers to (P|M|F) integrals

            auto dx_x_xxx = primBuffer.data(d2off + 30 * idx);

            auto dx_x_xxy = primBuffer.data(d2off + 30 * idx + 1);

            auto dx_x_xxz = primBuffer.data(d2off + 30 * idx + 2);

            auto dx_x_xyy = primBuffer.data(d2off + 30 * idx + 3);

            auto dx_x_xyz = primBuffer.data(d2off + 30 * idx + 4);

            auto dx_x_xzz = primBuffer.data(d2off + 30 * idx + 5);

            auto dx_x_yyy = primBuffer.data(d2off + 30 * idx + 6);

            auto dx_x_yyz = primBuffer.data(d2off + 30 * idx + 7);

            auto dx_x_yzz = primBuffer.data(d2off + 30 * idx + 8);

            auto dx_x_zzz = primBuffer.data(d2off + 30 * idx + 9);

            auto dx_y_xxx = primBuffer.data(d2off + 30 * idx + 10);

            auto dx_y_xxy = primBuffer.data(d2off + 30 * idx + 11);

            auto dx_y_xxz = primBuffer.data(d2off + 30 * idx + 12);

            auto dx_y_xyy = primBuffer.data(d2off + 30 * idx + 13);

            auto dx_y_xyz = primBuffer.data(d2off + 30 * idx + 14);

            auto dx_y_xzz = primBuffer.data(d2off + 30 * idx + 15);

            auto dx_y_yyy = primBuffer.data(d2off + 30 * idx + 16);

            auto dx_y_yyz = primBuffer.data(d2off + 30 * idx + 17);

            auto dx_y_yzz = primBuffer.data(d2off + 30 * idx + 18);

            auto dx_y_zzz = primBuffer.data(d2off + 30 * idx + 19);

            auto dx_z_xxx = primBuffer.data(d2off + 30 * idx + 20);

            auto dx_z_xxy = primBuffer.data(d2off + 30 * idx + 21);

            auto dx_z_xxz = primBuffer.data(d2off + 30 * idx + 22);

            auto dx_z_xyy = primBuffer.data(d2off + 30 * idx + 23);

            auto dx_z_xyz = primBuffer.data(d2off + 30 * idx + 24);

            auto dx_z_xzz = primBuffer.data(d2off + 30 * idx + 25);

            auto dx_z_yyy = primBuffer.data(d2off + 30 * idx + 26);

            auto dx_z_yyz = primBuffer.data(d2off + 30 * idx + 27);

            auto dx_z_yzz = primBuffer.data(d2off + 30 * idx + 28);

            auto dx_z_zzz = primBuffer.data(d2off + 30 * idx + 29);

            auto dy_x_xxx = primBuffer.data(d2off + 30 * bdim + 30 * idx);

            auto dy_x_xxy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 1);

            auto dy_x_xxz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 2);

            auto dy_x_xyy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 3);

            auto dy_x_xyz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 4);

            auto dy_x_xzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 5);

            auto dy_x_yyy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 6);

            auto dy_x_yyz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 7);

            auto dy_x_yzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 8);

            auto dy_x_zzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 9);

            auto dy_y_xxx = primBuffer.data(d2off + 30 * bdim + 30 * idx + 10);

            auto dy_y_xxy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 11);

            auto dy_y_xxz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 12);

            auto dy_y_xyy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 13);

            auto dy_y_xyz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 14);

            auto dy_y_xzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 15);

            auto dy_y_yyy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 16);

            auto dy_y_yyz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 17);

            auto dy_y_yzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 18);

            auto dy_y_zzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 19);

            auto dy_z_xxx = primBuffer.data(d2off + 30 * bdim + 30 * idx + 20);

            auto dy_z_xxy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 21);

            auto dy_z_xxz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 22);

            auto dy_z_xyy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 23);

            auto dy_z_xyz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 24);

            auto dy_z_xzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 25);

            auto dy_z_yyy = primBuffer.data(d2off + 30 * bdim + 30 * idx + 26);

            auto dy_z_yyz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 27);

            auto dy_z_yzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 28);

            auto dy_z_zzz = primBuffer.data(d2off + 30 * bdim + 30 * idx + 29);

            auto dz_x_xxx = primBuffer.data(d2off + 60 * bdim + 30 * idx);

            auto dz_x_xxy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 1);

            auto dz_x_xxz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 2);

            auto dz_x_xyy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 3);

            auto dz_x_xyz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 4);

            auto dz_x_xzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 5);

            auto dz_x_yyy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 6);

            auto dz_x_yyz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 7);

            auto dz_x_yzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 8);

            auto dz_x_zzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 9);

            auto dz_y_xxx = primBuffer.data(d2off + 60 * bdim + 30 * idx + 10);

            auto dz_y_xxy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 11);

            auto dz_y_xxz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 12);

            auto dz_y_xyy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 13);

            auto dz_y_xyz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 14);

            auto dz_y_xzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 15);

            auto dz_y_yyy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 16);

            auto dz_y_yyz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 17);

            auto dz_y_yzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 18);

            auto dz_y_zzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 19);

            auto dz_z_xxx = primBuffer.data(d2off + 60 * bdim + 30 * idx + 20);

            auto dz_z_xxy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 21);

            auto dz_z_xxz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 22);

            auto dz_z_xyy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 23);

            auto dz_z_xyz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 24);

            auto dz_z_xzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 25);

            auto dz_z_yyy = primBuffer.data(d2off + 60 * bdim + 30 * idx + 26);

            auto dz_z_yyz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 27);

            auto dz_z_yzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 28);

            auto dz_z_zzz = primBuffer.data(d2off + 60 * bdim + 30 * idx + 29);

            // set up pointers to (D|M|D) integrals

            auto dx_xx_xx = primBuffer.data(dkoff + 36 * idx);

            auto dx_xx_xy = primBuffer.data(dkoff + 36 * idx + 1);

            auto dx_xx_xz = primBuffer.data(dkoff + 36 * idx + 2);

            auto dx_xx_yy = primBuffer.data(dkoff + 36 * idx + 3);

            auto dx_xx_yz = primBuffer.data(dkoff + 36 * idx + 4);

            auto dx_xx_zz = primBuffer.data(dkoff + 36 * idx + 5);

            auto dx_xy_xx = primBuffer.data(dkoff + 36 * idx + 6);

            auto dx_xy_xy = primBuffer.data(dkoff + 36 * idx + 7);

            auto dx_xy_xz = primBuffer.data(dkoff + 36 * idx + 8);

            auto dx_xy_yy = primBuffer.data(dkoff + 36 * idx + 9);

            auto dx_xy_yz = primBuffer.data(dkoff + 36 * idx + 10);

            auto dx_xy_zz = primBuffer.data(dkoff + 36 * idx + 11);

            auto dx_xz_xx = primBuffer.data(dkoff + 36 * idx + 12);

            auto dx_xz_xy = primBuffer.data(dkoff + 36 * idx + 13);

            auto dx_xz_xz = primBuffer.data(dkoff + 36 * idx + 14);

            auto dx_xz_yy = primBuffer.data(dkoff + 36 * idx + 15);

            auto dx_xz_yz = primBuffer.data(dkoff + 36 * idx + 16);

            auto dx_xz_zz = primBuffer.data(dkoff + 36 * idx + 17);

            auto dx_yy_xx = primBuffer.data(dkoff + 36 * idx + 18);

            auto dx_yy_xy = primBuffer.data(dkoff + 36 * idx + 19);

            auto dx_yy_xz = primBuffer.data(dkoff + 36 * idx + 20);

            auto dx_yy_yy = primBuffer.data(dkoff + 36 * idx + 21);

            auto dx_yy_yz = primBuffer.data(dkoff + 36 * idx + 22);

            auto dx_yy_zz = primBuffer.data(dkoff + 36 * idx + 23);

            auto dx_yz_xx = primBuffer.data(dkoff + 36 * idx + 24);

            auto dx_yz_xy = primBuffer.data(dkoff + 36 * idx + 25);

            auto dx_yz_xz = primBuffer.data(dkoff + 36 * idx + 26);

            auto dx_yz_yy = primBuffer.data(dkoff + 36 * idx + 27);

            auto dx_yz_yz = primBuffer.data(dkoff + 36 * idx + 28);

            auto dx_yz_zz = primBuffer.data(dkoff + 36 * idx + 29);

            auto dx_zz_xx = primBuffer.data(dkoff + 36 * idx + 30);

            auto dx_zz_xy = primBuffer.data(dkoff + 36 * idx + 31);

            auto dx_zz_xz = primBuffer.data(dkoff + 36 * idx + 32);

            auto dx_zz_yy = primBuffer.data(dkoff + 36 * idx + 33);

            auto dx_zz_yz = primBuffer.data(dkoff + 36 * idx + 34);

            auto dx_zz_zz = primBuffer.data(dkoff + 36 * idx + 35);

            auto dy_xx_xx = primBuffer.data(dkoff + 36 * bdim + 36 * idx);

            auto dy_xx_xy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 1);

            auto dy_xx_xz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 2);

            auto dy_xx_yy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 3);

            auto dy_xx_yz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 4);

            auto dy_xx_zz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 5);

            auto dy_xy_xx = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 6);

            auto dy_xy_xy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 7);

            auto dy_xy_xz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 8);

            auto dy_xy_yy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 9);

            auto dy_xy_yz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 10);

            auto dy_xy_zz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 11);

            auto dy_xz_xx = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 12);

            auto dy_xz_xy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 13);

            auto dy_xz_xz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 14);

            auto dy_xz_yy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 15);

            auto dy_xz_yz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 16);

            auto dy_xz_zz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 17);

            auto dy_yy_xx = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 18);

            auto dy_yy_xy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 19);

            auto dy_yy_xz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 20);

            auto dy_yy_yy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 21);

            auto dy_yy_yz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 22);

            auto dy_yy_zz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 23);

            auto dy_yz_xx = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 24);

            auto dy_yz_xy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 25);

            auto dy_yz_xz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 26);

            auto dy_yz_yy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 27);

            auto dy_yz_yz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 28);

            auto dy_yz_zz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 29);

            auto dy_zz_xx = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 30);

            auto dy_zz_xy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 31);

            auto dy_zz_xz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 32);

            auto dy_zz_yy = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 33);

            auto dy_zz_yz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 34);

            auto dy_zz_zz = primBuffer.data(dkoff + 36 * bdim + 36 * idx + 35);

            auto dz_xx_xx = primBuffer.data(dkoff + 72 * bdim + 36 * idx);

            auto dz_xx_xy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 1);

            auto dz_xx_xz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 2);

            auto dz_xx_yy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 3);

            auto dz_xx_yz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 4);

            auto dz_xx_zz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 5);

            auto dz_xy_xx = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 6);

            auto dz_xy_xy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 7);

            auto dz_xy_xz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 8);

            auto dz_xy_yy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 9);

            auto dz_xy_yz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 10);

            auto dz_xy_zz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 11);

            auto dz_xz_xx = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 12);

            auto dz_xz_xy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 13);

            auto dz_xz_xz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 14);

            auto dz_xz_yy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 15);

            auto dz_xz_yz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 16);

            auto dz_xz_zz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 17);

            auto dz_yy_xx = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 18);

            auto dz_yy_xy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 19);

            auto dz_yy_xz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 20);

            auto dz_yy_yy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 21);

            auto dz_yy_yz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 22);

            auto dz_yy_zz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 23);

            auto dz_yz_xx = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 24);

            auto dz_yz_xy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 25);

            auto dz_yz_xz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 26);

            auto dz_yz_yy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 27);

            auto dz_yz_yz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 28);

            auto dz_yz_zz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 29);

            auto dz_zz_xx = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 30);

            auto dz_zz_xy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 31);

            auto dz_zz_xz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 32);

            auto dz_zz_yy = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 33);

            auto dz_zz_yz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 34);

            auto dz_zz_zz = primBuffer.data(dkoff + 72 * bdim + 36 * idx + 35);

            // set up pointers to (D|F) integrals

            auto s_xx_xxx = primBuffer.data(soff + 60 * idx);

            auto s_xx_xxy = primBuffer.data(soff + 60 * idx + 1);

            auto s_xx_xxz = primBuffer.data(soff + 60 * idx + 2);

            auto s_xx_xyy = primBuffer.data(soff + 60 * idx + 3);

            auto s_xx_xyz = primBuffer.data(soff + 60 * idx + 4);

            auto s_xx_xzz = primBuffer.data(soff + 60 * idx + 5);

            auto s_xx_yyy = primBuffer.data(soff + 60 * idx + 6);

            auto s_xx_yyz = primBuffer.data(soff + 60 * idx + 7);

            auto s_xx_yzz = primBuffer.data(soff + 60 * idx + 8);

            auto s_xx_zzz = primBuffer.data(soff + 60 * idx + 9);

            auto s_xy_xxx = primBuffer.data(soff + 60 * idx + 10);

            auto s_xy_xxy = primBuffer.data(soff + 60 * idx + 11);

            auto s_xy_xxz = primBuffer.data(soff + 60 * idx + 12);

            auto s_xy_xyy = primBuffer.data(soff + 60 * idx + 13);

            auto s_xy_xyz = primBuffer.data(soff + 60 * idx + 14);

            auto s_xy_xzz = primBuffer.data(soff + 60 * idx + 15);

            auto s_xy_yyy = primBuffer.data(soff + 60 * idx + 16);

            auto s_xy_yyz = primBuffer.data(soff + 60 * idx + 17);

            auto s_xy_yzz = primBuffer.data(soff + 60 * idx + 18);

            auto s_xy_zzz = primBuffer.data(soff + 60 * idx + 19);

            auto s_xz_xxx = primBuffer.data(soff + 60 * idx + 20);

            auto s_xz_xxy = primBuffer.data(soff + 60 * idx + 21);

            auto s_xz_xxz = primBuffer.data(soff + 60 * idx + 22);

            auto s_xz_xyy = primBuffer.data(soff + 60 * idx + 23);

            auto s_xz_xyz = primBuffer.data(soff + 60 * idx + 24);

            auto s_xz_xzz = primBuffer.data(soff + 60 * idx + 25);

            auto s_xz_yyy = primBuffer.data(soff + 60 * idx + 26);

            auto s_xz_yyz = primBuffer.data(soff + 60 * idx + 27);

            auto s_xz_yzz = primBuffer.data(soff + 60 * idx + 28);

            auto s_xz_zzz = primBuffer.data(soff + 60 * idx + 29);

            auto s_yy_xxx = primBuffer.data(soff + 60 * idx + 30);

            auto s_yy_xxy = primBuffer.data(soff + 60 * idx + 31);

            auto s_yy_xxz = primBuffer.data(soff + 60 * idx + 32);

            auto s_yy_xyy = primBuffer.data(soff + 60 * idx + 33);

            auto s_yy_xyz = primBuffer.data(soff + 60 * idx + 34);

            auto s_yy_xzz = primBuffer.data(soff + 60 * idx + 35);

            auto s_yy_yyy = primBuffer.data(soff + 60 * idx + 36);

            auto s_yy_yyz = primBuffer.data(soff + 60 * idx + 37);

            auto s_yy_yzz = primBuffer.data(soff + 60 * idx + 38);

            auto s_yy_zzz = primBuffer.data(soff + 60 * idx + 39);

            auto s_yz_xxx = primBuffer.data(soff + 60 * idx + 40);

            auto s_yz_xxy = primBuffer.data(soff + 60 * idx + 41);

            auto s_yz_xxz = primBuffer.data(soff + 60 * idx + 42);

            auto s_yz_xyy = primBuffer.data(soff + 60 * idx + 43);

            auto s_yz_xyz = primBuffer.data(soff + 60 * idx + 44);

            auto s_yz_xzz = primBuffer.data(soff + 60 * idx + 45);

            auto s_yz_yyy = primBuffer.data(soff + 60 * idx + 46);

            auto s_yz_yyz = primBuffer.data(soff + 60 * idx + 47);

            auto s_yz_yzz = primBuffer.data(soff + 60 * idx + 48);

            auto s_yz_zzz = primBuffer.data(soff + 60 * idx + 49);

            auto s_zz_xxx = primBuffer.data(soff + 60 * idx + 50);

            auto s_zz_xxy = primBuffer.data(soff + 60 * idx + 51);

            auto s_zz_xxz = primBuffer.data(soff + 60 * idx + 52);

            auto s_zz_xyy = primBuffer.data(soff + 60 * idx + 53);

            auto s_zz_xyz = primBuffer.data(soff + 60 * idx + 54);

            auto s_zz_xzz = primBuffer.data(soff + 60 * idx + 55);

            auto s_zz_yyy = primBuffer.data(soff + 60 * idx + 56);

            auto s_zz_yyz = primBuffer.data(soff + 60 * idx + 57);

            auto s_zz_yzz = primBuffer.data(soff + 60 * idx + 58);

            auto s_zz_zzz = primBuffer.data(soff + 60 * idx + 59);

            // set up pointers to (P|F) integrals

            auto s_x_xxx = primBuffer.data(s1off + 30 * idx);

            auto s_x_xxy = primBuffer.data(s1off + 30 * idx + 1);

            auto s_x_xxz = primBuffer.data(s1off + 30 * idx + 2);

            auto s_x_xyy = primBuffer.data(s1off + 30 * idx + 3);

            auto s_x_xyz = primBuffer.data(s1off + 30 * idx + 4);

            auto s_x_xzz = primBuffer.data(s1off + 30 * idx + 5);

            auto s_x_yyy = primBuffer.data(s1off + 30 * idx + 6);

            auto s_x_yyz = primBuffer.data(s1off + 30 * idx + 7);

            auto s_x_yzz = primBuffer.data(s1off + 30 * idx + 8);

            auto s_x_zzz = primBuffer.data(s1off + 30 * idx + 9);

            auto s_y_xxx = primBuffer.data(s1off + 30 * idx + 10);

            auto s_y_xxy = primBuffer.data(s1off + 30 * idx + 11);

            auto s_y_xxz = primBuffer.data(s1off + 30 * idx + 12);

            auto s_y_xyy = primBuffer.data(s1off + 30 * idx + 13);

            auto s_y_xyz = primBuffer.data(s1off + 30 * idx + 14);

            auto s_y_xzz = primBuffer.data(s1off + 30 * idx + 15);

            auto s_y_yyy = primBuffer.data(s1off + 30 * idx + 16);

            auto s_y_yyz = primBuffer.data(s1off + 30 * idx + 17);

            auto s_y_yzz = primBuffer.data(s1off + 30 * idx + 18);

            auto s_y_zzz = primBuffer.data(s1off + 30 * idx + 19);

            auto s_z_xxx = primBuffer.data(s1off + 30 * idx + 20);

            auto s_z_xxy = primBuffer.data(s1off + 30 * idx + 21);

            auto s_z_xxz = primBuffer.data(s1off + 30 * idx + 22);

            auto s_z_xyy = primBuffer.data(s1off + 30 * idx + 23);

            auto s_z_xyz = primBuffer.data(s1off + 30 * idx + 24);

            auto s_z_xzz = primBuffer.data(s1off + 30 * idx + 25);

            auto s_z_yyy = primBuffer.data(s1off + 30 * idx + 26);

            auto s_z_yyz = primBuffer.data(s1off + 30 * idx + 27);

            auto s_z_yzz = primBuffer.data(s1off + 30 * idx + 28);

            auto s_z_zzz = primBuffer.data(s1off + 30 * idx + 29);

            // set up pointers to (S|F) integrals

            auto s_0_xxx = primBuffer.data(s2off + 10 * idx);

            auto s_0_xxy = primBuffer.data(s2off + 10 * idx + 1);

            auto s_0_xxz = primBuffer.data(s2off + 10 * idx + 2);

            auto s_0_xyy = primBuffer.data(s2off + 10 * idx + 3);

            auto s_0_xyz = primBuffer.data(s2off + 10 * idx + 4);

            auto s_0_xzz = primBuffer.data(s2off + 10 * idx + 5);

            auto s_0_yyy = primBuffer.data(s2off + 10 * idx + 6);

            auto s_0_yyz = primBuffer.data(s2off + 10 * idx + 7);

            auto s_0_yzz = primBuffer.data(s2off + 10 * idx + 8);

            auto s_0_zzz = primBuffer.data(s2off + 10 * idx + 9);

            // set up pointers to (P|D) integrals

            auto s_x_xx = primBuffer.data(skoff + 18 * idx);

            auto s_x_xy = primBuffer.data(skoff + 18 * idx + 1);

            auto s_x_xz = primBuffer.data(skoff + 18 * idx + 2);

            auto s_x_yy = primBuffer.data(skoff + 18 * idx + 3);

            auto s_x_yz = primBuffer.data(skoff + 18 * idx + 4);

            auto s_x_zz = primBuffer.data(skoff + 18 * idx + 5);

            auto s_y_xx = primBuffer.data(skoff + 18 * idx + 6);

            auto s_y_xy = primBuffer.data(skoff + 18 * idx + 7);

            auto s_y_xz = primBuffer.data(skoff + 18 * idx + 8);

            auto s_y_yy = primBuffer.data(skoff + 18 * idx + 9);

            auto s_y_yz = primBuffer.data(skoff + 18 * idx + 10);

            auto s_y_zz = primBuffer.data(skoff + 18 * idx + 11);

            auto s_z_xx = primBuffer.data(skoff + 18 * idx + 12);

            auto s_z_xy = primBuffer.data(skoff + 18 * idx + 13);

            auto s_z_xz = primBuffer.data(skoff + 18 * idx + 14);

            auto s_z_yy = primBuffer.data(skoff + 18 * idx + 15);

            auto s_z_yz = primBuffer.data(skoff + 18 * idx + 16);

            auto s_z_zz = primBuffer.data(skoff + 18 * idx + 17);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxx_xxx, dx_xxx_xxy,\
                                     dx_xxx_xxz, dx_xxx_xyy, dx_xxx_xyz, dx_xxx_xzz,\
                                     dx_xxx_yyy, dx_xxx_yyz, dx_xxx_yzz, dx_xxx_zzz,\
                                     dx_xxy_xxx, dx_xxy_xxy, dx_xxy_xxz, dx_xxy_xyy,\
                                     dx_xxy_xyz, dx_xxy_xzz, dx_xxy_yyy, dx_xxy_yyz,\
                                     dx_xxy_yzz, dx_xxy_zzz, dx_xxz_xxx, dx_xxz_xxy,\
                                     dx_xxz_xxz, dx_xxz_xyy, dx_xxz_xyz, dx_xxz_xzz,\
                                     dx_xxz_yyy, dx_xxz_yyz, dx_xxz_yzz, dx_xxz_zzz,\
                                     dx_xyy_xxx, dx_xyy_xxy, dx_xyy_xxz, dx_xyy_xyy,\
                                     dx_xyy_xyz, dx_xyy_xzz, dx_xyy_yyy, dx_xyy_yyz,\
                                     dx_xyy_yzz, dx_xyy_zzz, dx_xyz_xxx, dx_xyz_xxy,\
                                     dx_xyz_xxz, dx_xyz_xyy, dx_xyz_xyz, dx_xyz_xzz,\
                                     dx_xyz_yyy, dx_xyz_yyz, dx_xyz_yzz, dx_xyz_zzz,\
                                     dx_xzz_xxx, dx_xzz_xxy, dx_xzz_xxz, dx_xzz_xyy,\
                                     dx_xzz_xyz, dx_xzz_xzz, dx_xzz_yyy, dx_xzz_yyz,\
                                     dx_xzz_yzz, dx_xzz_zzz, dx_yyy_xxx, dx_yyy_xxy,\
                                     dx_yyy_xxz, dx_yyy_xyy, dx_yyy_xyz, dx_yyy_xzz,\
                                     dx_yyy_yyy, dx_yyy_yyz, dx_yyy_yzz, dx_yyy_zzz,\
                                     dx_yyz_xxx, dx_yyz_xxy, dx_yyz_xxz, dx_yyz_xyy,\
                                     dx_yyz_xyz, dx_yyz_xzz, dx_yyz_yyy, dx_yyz_yyz,\
                                     dx_yyz_yzz, dx_yyz_zzz, dx_yzz_xxx, dx_yzz_xxy,\
                                     dx_yzz_xxz, dx_yzz_xyy, dx_yzz_xyz, dx_yzz_xzz,\
                                     dx_yzz_yyy, dx_yzz_yyz, dx_yzz_yzz, dx_yzz_zzz,\
                                     dx_zzz_xxx, dx_zzz_xxy, dx_zzz_xxz, dx_zzz_xyy,\
                                     dx_zzz_xyz, dx_zzz_xzz, dx_zzz_yyy, dx_zzz_yyz,\
                                     dx_zzz_yzz, dx_zzz_zzz, dy_xxx_xxx, dy_xxx_xxy,\
                                     dy_xxx_xxz, dy_xxx_xyy, dy_xxx_xyz, dy_xxx_xzz,\
                                     dy_xxx_yyy, dy_xxx_yyz, dy_xxx_yzz, dy_xxx_zzz,\
                                     dy_xxy_xxx, dy_xxy_xxy, dy_xxy_xxz, dy_xxy_xyy,\
                                     dy_xxy_xyz, dy_xxy_xzz, dy_xxy_yyy, dy_xxy_yyz,\
                                     dy_xxy_yzz, dy_xxy_zzz, dy_xxz_xxx, dy_xxz_xxy,\
                                     dy_xxz_xxz, dy_xxz_xyy, dy_xxz_xyz, dy_xxz_xzz,\
                                     dy_xxz_yyy, dy_xxz_yyz, dy_xxz_yzz, dy_xxz_zzz,\
                                     dy_xyy_xxx, dy_xyy_xxy, dy_xyy_xxz, dy_xyy_xyy,\
                                     dy_xyy_xyz, dy_xyy_xzz, dy_xyy_yyy, dy_xyy_yyz,\
                                     dy_xyy_yzz, dy_xyy_zzz, dy_xyz_xxx, dy_xyz_xxy,\
                                     dy_xyz_xxz, dy_xyz_xyy, dy_xyz_xyz, dy_xyz_xzz,\
                                     dy_xyz_yyy, dy_xyz_yyz, dy_xyz_yzz, dy_xyz_zzz,\
                                     dy_xzz_xxx, dy_xzz_xxy, dy_xzz_xxz, dy_xzz_xyy,\
                                     dy_xzz_xyz, dy_xzz_xzz, dy_xzz_yyy, dy_xzz_yyz,\
                                     dy_xzz_yzz, dy_xzz_zzz, dy_yyy_xxx, dy_yyy_xxy,\
                                     dy_yyy_xxz, dy_yyy_xyy, dy_yyy_xyz, dy_yyy_xzz,\
                                     dy_yyy_yyy, dy_yyy_yyz, dy_yyy_yzz, dy_yyy_zzz,\
                                     dy_yyz_xxx, dy_yyz_xxy, dy_yyz_xxz, dy_yyz_xyy,\
                                     dy_yyz_xyz, dy_yyz_xzz, dy_yyz_yyy, dy_yyz_yyz,\
                                     dy_yyz_yzz, dy_yyz_zzz, dy_yzz_xxx, dy_yzz_xxy,\
                                     dy_yzz_xxz, dy_yzz_xyy, dy_yzz_xyz, dy_yzz_xzz,\
                                     dy_yzz_yyy, dy_yzz_yyz, dy_yzz_yzz, dy_yzz_zzz,\
                                     dy_zzz_xxx, dy_zzz_xxy, dy_zzz_xxz, dy_zzz_xyy,\
                                     dy_zzz_xyz, dy_zzz_xzz, dy_zzz_yyy, dy_zzz_yyz,\
                                     dy_zzz_yzz, dy_zzz_zzz, dz_xxx_xxx, dz_xxx_xxy,\
                                     dz_xxx_xxz, dz_xxx_xyy, dz_xxx_xyz, dz_xxx_xzz,\
                                     dz_xxx_yyy, dz_xxx_yyz, dz_xxx_yzz, dz_xxx_zzz,\
                                     dz_xxy_xxx, dz_xxy_xxy, dz_xxy_xxz, dz_xxy_xyy,\
                                     dz_xxy_xyz, dz_xxy_xzz, dz_xxy_yyy, dz_xxy_yyz,\
                                     dz_xxy_yzz, dz_xxy_zzz, dz_xxz_xxx, dz_xxz_xxy,\
                                     dz_xxz_xxz, dz_xxz_xyy, dz_xxz_xyz, dz_xxz_xzz,\
                                     dz_xxz_yyy, dz_xxz_yyz, dz_xxz_yzz, dz_xxz_zzz,\
                                     dz_xyy_xxx, dz_xyy_xxy, dz_xyy_xxz, dz_xyy_xyy,\
                                     dz_xyy_xyz, dz_xyy_xzz, dz_xyy_yyy, dz_xyy_yyz,\
                                     dz_xyy_yzz, dz_xyy_zzz, dz_xyz_xxx, dz_xyz_xxy,\
                                     dz_xyz_xxz, dz_xyz_xyy, dz_xyz_xyz, dz_xyz_xzz,\
                                     dz_xyz_yyy, dz_xyz_yyz, dz_xyz_yzz, dz_xyz_zzz,\
                                     dz_xzz_xxx, dz_xzz_xxy, dz_xzz_xxz, dz_xzz_xyy,\
                                     dz_xzz_xyz, dz_xzz_xzz, dz_xzz_yyy, dz_xzz_yyz,\
                                     dz_xzz_yzz, dz_xzz_zzz, dz_yyy_xxx, dz_yyy_xxy,\
                                     dz_yyy_xxz, dz_yyy_xyy, dz_yyy_xyz, dz_yyy_xzz,\
                                     dz_yyy_yyy, dz_yyy_yyz, dz_yyy_yzz, dz_yyy_zzz,\
                                     dz_yyz_xxx, dz_yyz_xxy, dz_yyz_xxz, dz_yyz_xyy,\
                                     dz_yyz_xyz, dz_yyz_xzz, dz_yyz_yyy, dz_yyz_yyz,\
                                     dz_yyz_yzz, dz_yyz_zzz, dz_yzz_xxx, dz_yzz_xxy,\
                                     dz_yzz_xxz, dz_yzz_xyy, dz_yzz_xyz, dz_yzz_xzz,\
                                     dz_yzz_yyy, dz_yzz_yyz, dz_yzz_yzz, dz_yzz_zzz,\
                                     dz_zzz_xxx, dz_zzz_xxy, dz_zzz_xxz, dz_zzz_xyy,\
                                     dz_zzz_xyz, dz_zzz_xzz, dz_zzz_yyy, dz_zzz_yyz,\
                                     dz_zzz_yzz, dz_zzz_zzz, dx_xx_xxx, dx_xx_xxy,\
                                     dx_xx_xxz, dx_xx_xyy, dx_xx_xyz, dx_xx_xzz,\
                                     dx_xx_yyy, dx_xx_yyz, dx_xx_yzz, dx_xx_zzz,\
                                     dx_xy_xxx, dx_xy_xxy, dx_xy_xxz, dx_xy_xyy,\
                                     dx_xy_xyz, dx_xy_xzz, dx_xy_yyy, dx_xy_yyz,\
                                     dx_xy_yzz, dx_xy_zzz, dx_xz_xxx, dx_xz_xxy,\
                                     dx_xz_xxz, dx_xz_xyy, dx_xz_xyz, dx_xz_xzz,\
                                     dx_xz_yyy, dx_xz_yyz, dx_xz_yzz, dx_xz_zzz,\
                                     dx_yy_xxx, dx_yy_xxy, dx_yy_xxz, dx_yy_xyy,\
                                     dx_yy_xyz, dx_yy_xzz, dx_yy_yyy, dx_yy_yyz,\
                                     dx_yy_yzz, dx_yy_zzz, dx_yz_xxx, dx_yz_xxy,\
                                     dx_yz_xxz, dx_yz_xyy, dx_yz_xyz, dx_yz_xzz,\
                                     dx_yz_yyy, dx_yz_yyz, dx_yz_yzz, dx_yz_zzz,\
                                     dx_zz_xxx, dx_zz_xxy, dx_zz_xxz, dx_zz_xyy,\
                                     dx_zz_xyz, dx_zz_xzz, dx_zz_yyy, dx_zz_yyz,\
                                     dx_zz_yzz, dx_zz_zzz, dy_xx_xxx, dy_xx_xxy,\
                                     dy_xx_xxz, dy_xx_xyy, dy_xx_xyz, dy_xx_xzz,\
                                     dy_xx_yyy, dy_xx_yyz, dy_xx_yzz, dy_xx_zzz,\
                                     dy_xy_xxx, dy_xy_xxy, dy_xy_xxz, dy_xy_xyy,\
                                     dy_xy_xyz, dy_xy_xzz, dy_xy_yyy, dy_xy_yyz,\
                                     dy_xy_yzz, dy_xy_zzz, dy_xz_xxx, dy_xz_xxy,\
                                     dy_xz_xxz, dy_xz_xyy, dy_xz_xyz, dy_xz_xzz,\
                                     dy_xz_yyy, dy_xz_yyz, dy_xz_yzz, dy_xz_zzz,\
                                     dy_yy_xxx, dy_yy_xxy, dy_yy_xxz, dy_yy_xyy,\
                                     dy_yy_xyz, dy_yy_xzz, dy_yy_yyy, dy_yy_yyz,\
                                     dy_yy_yzz, dy_yy_zzz, dy_yz_xxx, dy_yz_xxy,\
                                     dy_yz_xxz, dy_yz_xyy, dy_yz_xyz, dy_yz_xzz,\
                                     dy_yz_yyy, dy_yz_yyz, dy_yz_yzz, dy_yz_zzz,\
                                     dy_zz_xxx, dy_zz_xxy, dy_zz_xxz, dy_zz_xyy,\
                                     dy_zz_xyz, dy_zz_xzz, dy_zz_yyy, dy_zz_yyz,\
                                     dy_zz_yzz, dy_zz_zzz, dz_xx_xxx, dz_xx_xxy,\
                                     dz_xx_xxz, dz_xx_xyy, dz_xx_xyz, dz_xx_xzz,\
                                     dz_xx_yyy, dz_xx_yyz, dz_xx_yzz, dz_xx_zzz,\
                                     dz_xy_xxx, dz_xy_xxy, dz_xy_xxz, dz_xy_xyy,\
                                     dz_xy_xyz, dz_xy_xzz, dz_xy_yyy, dz_xy_yyz,\
                                     dz_xy_yzz, dz_xy_zzz, dz_xz_xxx, dz_xz_xxy,\
                                     dz_xz_xxz, dz_xz_xyy, dz_xz_xyz, dz_xz_xzz,\
                                     dz_xz_yyy, dz_xz_yyz, dz_xz_yzz, dz_xz_zzz,\
                                     dz_yy_xxx, dz_yy_xxy, dz_yy_xxz, dz_yy_xyy,\
                                     dz_yy_xyz, dz_yy_xzz, dz_yy_yyy, dz_yy_yyz,\
                                     dz_yy_yzz, dz_yy_zzz, dz_yz_xxx, dz_yz_xxy,\
                                     dz_yz_xxz, dz_yz_xyy, dz_yz_xyz, dz_yz_xzz,\
                                     dz_yz_yyy, dz_yz_yyz, dz_yz_yzz, dz_yz_zzz,\
                                     dz_zz_xxx, dz_zz_xxy, dz_zz_xxz, dz_zz_xyy,\
                                     dz_zz_xyz, dz_zz_xzz, dz_zz_yyy, dz_zz_yyz,\
                                     dz_zz_yzz, dz_zz_zzz, dx_x_xxx, dx_x_xxy,\
                                     dx_x_xxz, dx_x_xyy, dx_x_xyz, dx_x_xzz, dx_x_yyy,\
                                     dx_x_yyz, dx_x_yzz, dx_x_zzz, dx_y_xxx, dx_y_xxy,\
                                     dx_y_xxz, dx_y_xyy, dx_y_xyz, dx_y_xzz, dx_y_yyy,\
                                     dx_y_yyz, dx_y_yzz, dx_y_zzz, dx_z_xxx, dx_z_xxy,\
                                     dx_z_xxz, dx_z_xyy, dx_z_xyz, dx_z_xzz, dx_z_yyy,\
                                     dx_z_yyz, dx_z_yzz, dx_z_zzz, dy_x_xxx, dy_x_xxy,\
                                     dy_x_xxz, dy_x_xyy, dy_x_xyz, dy_x_xzz, dy_x_yyy,\
                                     dy_x_yyz, dy_x_yzz, dy_x_zzz, dy_y_xxx, dy_y_xxy,\
                                     dy_y_xxz, dy_y_xyy, dy_y_xyz, dy_y_xzz, dy_y_yyy,\
                                     dy_y_yyz, dy_y_yzz, dy_y_zzz, dy_z_xxx, dy_z_xxy,\
                                     dy_z_xxz, dy_z_xyy, dy_z_xyz, dy_z_xzz, dy_z_yyy,\
                                     dy_z_yyz, dy_z_yzz, dy_z_zzz, dz_x_xxx, dz_x_xxy,\
                                     dz_x_xxz, dz_x_xyy, dz_x_xyz, dz_x_xzz, dz_x_yyy,\
                                     dz_x_yyz, dz_x_yzz, dz_x_zzz, dz_y_xxx, dz_y_xxy,\
                                     dz_y_xxz, dz_y_xyy, dz_y_xyz, dz_y_xzz, dz_y_yyy,\
                                     dz_y_yyz, dz_y_yzz, dz_y_zzz, dz_z_xxx, dz_z_xxy,\
                                     dz_z_xxz, dz_z_xyy, dz_z_xyz, dz_z_xzz, dz_z_yyy,\
                                     dz_z_yyz, dz_z_yzz, dz_z_zzz, dx_xx_xx, dx_xx_xy,\
                                     dx_xx_xz, dx_xx_yy, dx_xx_yz, dx_xx_zz, dx_xy_xx,\
                                     dx_xy_xy, dx_xy_xz, dx_xy_yy, dx_xy_yz, dx_xy_zz,\
                                     dx_xz_xx, dx_xz_xy, dx_xz_xz, dx_xz_yy, dx_xz_yz,\
                                     dx_xz_zz, dx_yy_xx, dx_yy_xy, dx_yy_xz, dx_yy_yy,\
                                     dx_yy_yz, dx_yy_zz, dx_yz_xx, dx_yz_xy, dx_yz_xz,\
                                     dx_yz_yy, dx_yz_yz, dx_yz_zz, dx_zz_xx, dx_zz_xy,\
                                     dx_zz_xz, dx_zz_yy, dx_zz_yz, dx_zz_zz, dy_xx_xx,\
                                     dy_xx_xy, dy_xx_xz, dy_xx_yy, dy_xx_yz, dy_xx_zz,\
                                     dy_xy_xx, dy_xy_xy, dy_xy_xz, dy_xy_yy, dy_xy_yz,\
                                     dy_xy_zz, dy_xz_xx, dy_xz_xy, dy_xz_xz, dy_xz_yy,\
                                     dy_xz_yz, dy_xz_zz, dy_yy_xx, dy_yy_xy, dy_yy_xz,\
                                     dy_yy_yy, dy_yy_yz, dy_yy_zz, dy_yz_xx, dy_yz_xy,\
                                     dy_yz_xz, dy_yz_yy, dy_yz_yz, dy_yz_zz, dy_zz_xx,\
                                     dy_zz_xy, dy_zz_xz, dy_zz_yy, dy_zz_yz, dy_zz_zz,\
                                     dz_xx_xx, dz_xx_xy, dz_xx_xz, dz_xx_yy, dz_xx_yz,\
                                     dz_xx_zz, dz_xy_xx, dz_xy_xy, dz_xy_xz, dz_xy_yy,\
                                     dz_xy_yz, dz_xy_zz, dz_xz_xx, dz_xz_xy, dz_xz_xz,\
                                     dz_xz_yy, dz_xz_yz, dz_xz_zz, dz_yy_xx, dz_yy_xy,\
                                     dz_yy_xz, dz_yy_yy, dz_yy_yz, dz_yy_zz, dz_yz_xx,\
                                     dz_yz_xy, dz_yz_xz, dz_yz_yy, dz_yz_yz, dz_yz_zz,\
                                     dz_zz_xx, dz_zz_xy, dz_zz_xz, dz_zz_yy, dz_zz_yz,\
                                     dz_zz_zz, s_xx_xxx, s_xx_xxy, s_xx_xxz, s_xx_xyy,\
                                     s_xx_xyz, s_xx_xzz, s_xx_yyy, s_xx_yyz, s_xx_yzz,\
                                     s_xx_zzz, s_xy_xxx, s_xy_xxy, s_xy_xxz, s_xy_xyy,\
                                     s_xy_xyz, s_xy_xzz, s_xy_yyy, s_xy_yyz, s_xy_yzz,\
                                     s_xy_zzz, s_xz_xxx, s_xz_xxy, s_xz_xxz, s_xz_xyy,\
                                     s_xz_xyz, s_xz_xzz, s_xz_yyy, s_xz_yyz, s_xz_yzz,\
                                     s_xz_zzz, s_yy_xxx, s_yy_xxy, s_yy_xxz, s_yy_xyy,\
                                     s_yy_xyz, s_yy_xzz, s_yy_yyy, s_yy_yyz, s_yy_yzz,\
                                     s_yy_zzz, s_yz_xxx, s_yz_xxy, s_yz_xxz, s_yz_xyy,\
                                     s_yz_xyz, s_yz_xzz, s_yz_yyy, s_yz_yyz, s_yz_yzz,\
                                     s_yz_zzz, s_zz_xxx, s_zz_xxy, s_zz_xxz, s_zz_xyy,\
                                     s_zz_xyz, s_zz_xzz, s_zz_yyy, s_zz_yyz, s_zz_yzz,\
                                     s_zz_zzz, s_x_xxx, s_x_xxy, s_x_xxz, s_x_xyy,\
                                     s_x_xyz, s_x_xzz, s_x_yyy, s_x_yyz, s_x_yzz,\
                                     s_x_zzz, s_y_xxx, s_y_xxy, s_y_xxz, s_y_xyy,\
                                     s_y_xyz, s_y_xzz, s_y_yyy, s_y_yyz, s_y_yzz,\
                                     s_y_zzz, s_z_xxx, s_z_xxy, s_z_xxz, s_z_xyy,\
                                     s_z_xyz, s_z_xzz, s_z_yyy, s_z_yyz, s_z_yzz,\
                                     s_z_zzz, s_0_xxx, s_0_xxy, s_0_xxz, s_0_xyy,\
                                     s_0_xyz, s_0_xzz, s_0_yyy, s_0_yyz, s_0_yzz,\
                                     s_0_zzz, s_x_xx, s_x_xy, s_x_xz, s_x_yy, s_x_yz,\
                                     s_x_zz, s_y_xx, s_y_xy, s_y_xz, s_y_yy, s_y_yz,\
                                     s_y_zz, s_z_xx, s_z_xy, s_z_xz, s_z_yy, s_z_yz,\
                                     s_z_zz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xx_xxx[j] = fr * s_x_xxx[j] + f2t * (s_0_xxx[j] + 3.0 * s_x_xx[j]);

                s_xx_xxy[j] = fr * s_x_xxy[j] + f2t * (s_0_xxy[j] + 2.0 * s_x_xy[j]);

                s_xx_xxz[j] = fr * s_x_xxz[j] + f2t * (s_0_xxz[j] + 2.0 * s_x_xz[j]);

                s_xx_xyy[j] = fr * s_x_xyy[j] + f2t * (s_0_xyy[j] + s_x_yy[j]);

                s_xx_xyz[j] = fr * s_x_xyz[j] + f2t * (s_0_xyz[j] + s_x_yz[j]);

                s_xx_xzz[j] = fr * s_x_xzz[j] + f2t * (s_0_xzz[j] + s_x_zz[j]);

                s_xx_yyy[j] = fr * s_x_yyy[j] + f2t * s_0_yyy[j];

                s_xx_yyz[j] = fr * s_x_yyz[j] + f2t * s_0_yyz[j];

                s_xx_yzz[j] = fr * s_x_yzz[j] + f2t * s_0_yzz[j];

                s_xx_zzz[j] = fr * s_x_zzz[j] + f2t * s_0_zzz[j];

                s_xy_xxx[j] = fr * s_y_xxx[j] + f2t * 3.0 * s_y_xx[j];

                s_xy_xxy[j] = fr * s_y_xxy[j] + f2t * 2.0 * s_y_xy[j];

                s_xy_xxz[j] = fr * s_y_xxz[j] + f2t * 2.0 * s_y_xz[j];

                s_xy_xyy[j] = fr * s_y_xyy[j] + f2t * s_y_yy[j];

                s_xy_xyz[j] = fr * s_y_xyz[j] + f2t * s_y_yz[j];

                s_xy_xzz[j] = fr * s_y_xzz[j] + f2t * s_y_zz[j];

                s_xy_yyy[j] = fr * s_y_yyy[j];

                s_xy_yyz[j] = fr * s_y_yyz[j];

                s_xy_yzz[j] = fr * s_y_yzz[j];

                s_xy_zzz[j] = fr * s_y_zzz[j];

                s_xz_xxx[j] = fr * s_z_xxx[j] + f2t * 3.0 * s_z_xx[j];

                s_xz_xxy[j] = fr * s_z_xxy[j] + f2t * 2.0 * s_z_xy[j];

                s_xz_xxz[j] = fr * s_z_xxz[j] + f2t * 2.0 * s_z_xz[j];

                s_xz_xyy[j] = fr * s_z_xyy[j] + f2t * s_z_yy[j];

                s_xz_xyz[j] = fr * s_z_xyz[j] + f2t * s_z_yz[j];

                s_xz_xzz[j] = fr * s_z_xzz[j] + f2t * s_z_zz[j];

                s_xz_yyy[j] = fr * s_z_yyy[j];

                s_xz_yyz[j] = fr * s_z_yyz[j];

                s_xz_yzz[j] = fr * s_z_yzz[j];

                s_xz_zzz[j] = fr * s_z_zzz[j];

                // leading y component

                fr = pay[j];

                s_yy_xxx[j] = fr * s_y_xxx[j] + f2t * s_0_xxx[j];

                s_yy_xxy[j] = fr * s_y_xxy[j] + f2t * (s_0_xxy[j] + s_y_xx[j]);

                s_yy_xxz[j] = fr * s_y_xxz[j] + f2t * s_0_xxz[j];

                s_yy_xyy[j] = fr * s_y_xyy[j] + f2t * (s_0_xyy[j] + 2.0 * s_y_xy[j]);

                s_yy_xyz[j] = fr * s_y_xyz[j] + f2t * (s_0_xyz[j] + s_y_xz[j]);

                s_yy_xzz[j] = fr * s_y_xzz[j] + f2t * s_0_xzz[j];

                s_yy_yyy[j] = fr * s_y_yyy[j] + f2t * (s_0_yyy[j] + 3.0 * s_y_yy[j]);

                s_yy_yyz[j] = fr * s_y_yyz[j] + f2t * (s_0_yyz[j] + 2.0 * s_y_yz[j]);

                s_yy_yzz[j] = fr * s_y_yzz[j] + f2t * (s_0_yzz[j] + s_y_zz[j]);

                s_yy_zzz[j] = fr * s_y_zzz[j] + f2t * s_0_zzz[j];

                s_yz_xxx[j] = fr * s_z_xxx[j];

                s_yz_xxy[j] = fr * s_z_xxy[j] + f2t * s_z_xx[j];

                s_yz_xxz[j] = fr * s_z_xxz[j];

                s_yz_xyy[j] = fr * s_z_xyy[j] + f2t * 2.0 * s_z_xy[j];

                s_yz_xyz[j] = fr * s_z_xyz[j] + f2t * s_z_xz[j];

                s_yz_xzz[j] = fr * s_z_xzz[j];

                s_yz_yyy[j] = fr * s_z_yyy[j] + f2t * 3.0 * s_z_yy[j];

                s_yz_yyz[j] = fr * s_z_yyz[j] + f2t * 2.0 * s_z_yz[j];

                s_yz_yzz[j] = fr * s_z_yzz[j] + f2t * s_z_zz[j];

                s_yz_zzz[j] = fr * s_z_zzz[j];

                // leading z component

                fr = paz[j];

                s_zz_xxx[j] = fr * s_z_xxx[j] + f2t * s_0_xxx[j];

                s_zz_xxy[j] = fr * s_z_xxy[j] + f2t * s_0_xxy[j];

                s_zz_xxz[j] = fr * s_z_xxz[j] + f2t * (s_0_xxz[j] + s_z_xx[j]);

                s_zz_xyy[j] = fr * s_z_xyy[j] + f2t * s_0_xyy[j];

                s_zz_xyz[j] = fr * s_z_xyz[j] + f2t * (s_0_xyz[j] + s_z_xy[j]);

                s_zz_xzz[j] = fr * s_z_xzz[j] + f2t * (s_0_xzz[j] + 2.0 * s_z_xz[j]);

                s_zz_yyy[j] = fr * s_z_yyy[j] + f2t * s_0_yyy[j];

                s_zz_yyz[j] = fr * s_z_yyz[j] + f2t * (s_0_yyz[j] + s_z_yy[j]);

                s_zz_yzz[j] = fr * s_z_yzz[j] + f2t * (s_0_yzz[j] + 2.0 * s_z_yz[j]);

                s_zz_zzz[j] = fr * s_z_zzz[j] + f2t * (s_0_zzz[j] + 3.0 * s_z_zz[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxx_xxx[j] = fr * dx_xx_xxx[j] + f2t * (2.0 * dx_x_xxx[j] + 3.0 * dx_xx_xx[j] + s_xx_xxx[j]);

                dy_xxx_xxx[j] = fr * dy_xx_xxx[j] + f2t * (2.0 * dy_x_xxx[j] + 3.0 * dy_xx_xx[j]);

                dz_xxx_xxx[j] = fr * dz_xx_xxx[j] + f2t * (2.0 * dz_x_xxx[j] + 3.0 * dz_xx_xx[j]);

                dx_xxx_xxy[j] = fr * dx_xx_xxy[j] + f2t * (2.0 * dx_x_xxy[j] + 2.0 * dx_xx_xy[j] + s_xx_xxy[j]);

                dy_xxx_xxy[j] = fr * dy_xx_xxy[j] + f2t * (2.0 * dy_x_xxy[j] + 2.0 * dy_xx_xy[j]);

                dz_xxx_xxy[j] = fr * dz_xx_xxy[j] + f2t * (2.0 * dz_x_xxy[j] + 2.0 * dz_xx_xy[j]);

                dx_xxx_xxz[j] = fr * dx_xx_xxz[j] + f2t * (2.0 * dx_x_xxz[j] + 2.0 * dx_xx_xz[j] + s_xx_xxz[j]);

                dy_xxx_xxz[j] = fr * dy_xx_xxz[j] + f2t * (2.0 * dy_x_xxz[j] + 2.0 * dy_xx_xz[j]);

                dz_xxx_xxz[j] = fr * dz_xx_xxz[j] + f2t * (2.0 * dz_x_xxz[j] + 2.0 * dz_xx_xz[j]);

                dx_xxx_xyy[j] = fr * dx_xx_xyy[j] + f2t * (2.0 * dx_x_xyy[j] + dx_xx_yy[j] + s_xx_xyy[j]);

                dy_xxx_xyy[j] = fr * dy_xx_xyy[j] + f2t * (2.0 * dy_x_xyy[j] + dy_xx_yy[j]);

                dz_xxx_xyy[j] = fr * dz_xx_xyy[j] + f2t * (2.0 * dz_x_xyy[j] + dz_xx_yy[j]);

                dx_xxx_xyz[j] = fr * dx_xx_xyz[j] + f2t * (2.0 * dx_x_xyz[j] + dx_xx_yz[j] + s_xx_xyz[j]);

                dy_xxx_xyz[j] = fr * dy_xx_xyz[j] + f2t * (2.0 * dy_x_xyz[j] + dy_xx_yz[j]);

                dz_xxx_xyz[j] = fr * dz_xx_xyz[j] + f2t * (2.0 * dz_x_xyz[j] + dz_xx_yz[j]);

                dx_xxx_xzz[j] = fr * dx_xx_xzz[j] + f2t * (2.0 * dx_x_xzz[j] + dx_xx_zz[j] + s_xx_xzz[j]);

                dy_xxx_xzz[j] = fr * dy_xx_xzz[j] + f2t * (2.0 * dy_x_xzz[j] + dy_xx_zz[j]);

                dz_xxx_xzz[j] = fr * dz_xx_xzz[j] + f2t * (2.0 * dz_x_xzz[j] + dz_xx_zz[j]);

                dx_xxx_yyy[j] = fr * dx_xx_yyy[j] + f2t * (2.0 * dx_x_yyy[j] + s_xx_yyy[j]);

                dy_xxx_yyy[j] = fr * dy_xx_yyy[j] + f2t * 2.0 * dy_x_yyy[j];

                dz_xxx_yyy[j] = fr * dz_xx_yyy[j] + f2t * 2.0 * dz_x_yyy[j];

                dx_xxx_yyz[j] = fr * dx_xx_yyz[j] + f2t * (2.0 * dx_x_yyz[j] + s_xx_yyz[j]);

                dy_xxx_yyz[j] = fr * dy_xx_yyz[j] + f2t * 2.0 * dy_x_yyz[j];

                dz_xxx_yyz[j] = fr * dz_xx_yyz[j] + f2t * 2.0 * dz_x_yyz[j];

                dx_xxx_yzz[j] = fr * dx_xx_yzz[j] + f2t * (2.0 * dx_x_yzz[j] + s_xx_yzz[j]);

                dy_xxx_yzz[j] = fr * dy_xx_yzz[j] + f2t * 2.0 * dy_x_yzz[j];

                dz_xxx_yzz[j] = fr * dz_xx_yzz[j] + f2t * 2.0 * dz_x_yzz[j];

                dx_xxx_zzz[j] = fr * dx_xx_zzz[j] + f2t * (2.0 * dx_x_zzz[j] + s_xx_zzz[j]);

                dy_xxx_zzz[j] = fr * dy_xx_zzz[j] + f2t * 2.0 * dy_x_zzz[j];

                dz_xxx_zzz[j] = fr * dz_xx_zzz[j] + f2t * 2.0 * dz_x_zzz[j];

                dx_xxy_xxx[j] = fr * dx_xy_xxx[j] + f2t * (dx_y_xxx[j] + 3.0 * dx_xy_xx[j] + s_xy_xxx[j]);

                dy_xxy_xxx[j] = fr * dy_xy_xxx[j] + f2t * (dy_y_xxx[j] + 3.0 * dy_xy_xx[j]);

                dz_xxy_xxx[j] = fr * dz_xy_xxx[j] + f2t * (dz_y_xxx[j] + 3.0 * dz_xy_xx[j]);

                dx_xxy_xxy[j] = fr * dx_xy_xxy[j] + f2t * (dx_y_xxy[j] + 2.0 * dx_xy_xy[j] + s_xy_xxy[j]);

                dy_xxy_xxy[j] = fr * dy_xy_xxy[j] + f2t * (dy_y_xxy[j] + 2.0 * dy_xy_xy[j]);

                dz_xxy_xxy[j] = fr * dz_xy_xxy[j] + f2t * (dz_y_xxy[j] + 2.0 * dz_xy_xy[j]);

                dx_xxy_xxz[j] = fr * dx_xy_xxz[j] + f2t * (dx_y_xxz[j] + 2.0 * dx_xy_xz[j] + s_xy_xxz[j]);

                dy_xxy_xxz[j] = fr * dy_xy_xxz[j] + f2t * (dy_y_xxz[j] + 2.0 * dy_xy_xz[j]);

                dz_xxy_xxz[j] = fr * dz_xy_xxz[j] + f2t * (dz_y_xxz[j] + 2.0 * dz_xy_xz[j]);

                dx_xxy_xyy[j] = fr * dx_xy_xyy[j] + f2t * (dx_y_xyy[j] + dx_xy_yy[j] + s_xy_xyy[j]);

                dy_xxy_xyy[j] = fr * dy_xy_xyy[j] + f2t * (dy_y_xyy[j] + dy_xy_yy[j]);

                dz_xxy_xyy[j] = fr * dz_xy_xyy[j] + f2t * (dz_y_xyy[j] + dz_xy_yy[j]);

                dx_xxy_xyz[j] = fr * dx_xy_xyz[j] + f2t * (dx_y_xyz[j] + dx_xy_yz[j] + s_xy_xyz[j]);

                dy_xxy_xyz[j] = fr * dy_xy_xyz[j] + f2t * (dy_y_xyz[j] + dy_xy_yz[j]);

                dz_xxy_xyz[j] = fr * dz_xy_xyz[j] + f2t * (dz_y_xyz[j] + dz_xy_yz[j]);

                dx_xxy_xzz[j] = fr * dx_xy_xzz[j] + f2t * (dx_y_xzz[j] + dx_xy_zz[j] + s_xy_xzz[j]);

                dy_xxy_xzz[j] = fr * dy_xy_xzz[j] + f2t * (dy_y_xzz[j] + dy_xy_zz[j]);

                dz_xxy_xzz[j] = fr * dz_xy_xzz[j] + f2t * (dz_y_xzz[j] + dz_xy_zz[j]);

                dx_xxy_yyy[j] = fr * dx_xy_yyy[j] + f2t * (dx_y_yyy[j] + s_xy_yyy[j]);

                dy_xxy_yyy[j] = fr * dy_xy_yyy[j] + f2t * dy_y_yyy[j];

                dz_xxy_yyy[j] = fr * dz_xy_yyy[j] + f2t * dz_y_yyy[j];

                dx_xxy_yyz[j] = fr * dx_xy_yyz[j] + f2t * (dx_y_yyz[j] + s_xy_yyz[j]);

                dy_xxy_yyz[j] = fr * dy_xy_yyz[j] + f2t * dy_y_yyz[j];

                dz_xxy_yyz[j] = fr * dz_xy_yyz[j] + f2t * dz_y_yyz[j];

                dx_xxy_yzz[j] = fr * dx_xy_yzz[j] + f2t * (dx_y_yzz[j] + s_xy_yzz[j]);

                dy_xxy_yzz[j] = fr * dy_xy_yzz[j] + f2t * dy_y_yzz[j];

                dz_xxy_yzz[j] = fr * dz_xy_yzz[j] + f2t * dz_y_yzz[j];

                dx_xxy_zzz[j] = fr * dx_xy_zzz[j] + f2t * (dx_y_zzz[j] + s_xy_zzz[j]);

                dy_xxy_zzz[j] = fr * dy_xy_zzz[j] + f2t * dy_y_zzz[j];

                dz_xxy_zzz[j] = fr * dz_xy_zzz[j] + f2t * dz_y_zzz[j];

                dx_xxz_xxx[j] = fr * dx_xz_xxx[j] + f2t * (dx_z_xxx[j] + 3.0 * dx_xz_xx[j] + s_xz_xxx[j]);

                dy_xxz_xxx[j] = fr * dy_xz_xxx[j] + f2t * (dy_z_xxx[j] + 3.0 * dy_xz_xx[j]);

                dz_xxz_xxx[j] = fr * dz_xz_xxx[j] + f2t * (dz_z_xxx[j] + 3.0 * dz_xz_xx[j]);

                dx_xxz_xxy[j] = fr * dx_xz_xxy[j] + f2t * (dx_z_xxy[j] + 2.0 * dx_xz_xy[j] + s_xz_xxy[j]);

                dy_xxz_xxy[j] = fr * dy_xz_xxy[j] + f2t * (dy_z_xxy[j] + 2.0 * dy_xz_xy[j]);

                dz_xxz_xxy[j] = fr * dz_xz_xxy[j] + f2t * (dz_z_xxy[j] + 2.0 * dz_xz_xy[j]);

                dx_xxz_xxz[j] = fr * dx_xz_xxz[j] + f2t * (dx_z_xxz[j] + 2.0 * dx_xz_xz[j] + s_xz_xxz[j]);

                dy_xxz_xxz[j] = fr * dy_xz_xxz[j] + f2t * (dy_z_xxz[j] + 2.0 * dy_xz_xz[j]);

                dz_xxz_xxz[j] = fr * dz_xz_xxz[j] + f2t * (dz_z_xxz[j] + 2.0 * dz_xz_xz[j]);

                dx_xxz_xyy[j] = fr * dx_xz_xyy[j] + f2t * (dx_z_xyy[j] + dx_xz_yy[j] + s_xz_xyy[j]);

                dy_xxz_xyy[j] = fr * dy_xz_xyy[j] + f2t * (dy_z_xyy[j] + dy_xz_yy[j]);

                dz_xxz_xyy[j] = fr * dz_xz_xyy[j] + f2t * (dz_z_xyy[j] + dz_xz_yy[j]);

                dx_xxz_xyz[j] = fr * dx_xz_xyz[j] + f2t * (dx_z_xyz[j] + dx_xz_yz[j] + s_xz_xyz[j]);

                dy_xxz_xyz[j] = fr * dy_xz_xyz[j] + f2t * (dy_z_xyz[j] + dy_xz_yz[j]);

                dz_xxz_xyz[j] = fr * dz_xz_xyz[j] + f2t * (dz_z_xyz[j] + dz_xz_yz[j]);

                dx_xxz_xzz[j] = fr * dx_xz_xzz[j] + f2t * (dx_z_xzz[j] + dx_xz_zz[j] + s_xz_xzz[j]);

                dy_xxz_xzz[j] = fr * dy_xz_xzz[j] + f2t * (dy_z_xzz[j] + dy_xz_zz[j]);

                dz_xxz_xzz[j] = fr * dz_xz_xzz[j] + f2t * (dz_z_xzz[j] + dz_xz_zz[j]);

                dx_xxz_yyy[j] = fr * dx_xz_yyy[j] + f2t * (dx_z_yyy[j] + s_xz_yyy[j]);

                dy_xxz_yyy[j] = fr * dy_xz_yyy[j] + f2t * dy_z_yyy[j];

                dz_xxz_yyy[j] = fr * dz_xz_yyy[j] + f2t * dz_z_yyy[j];

                dx_xxz_yyz[j] = fr * dx_xz_yyz[j] + f2t * (dx_z_yyz[j] + s_xz_yyz[j]);

                dy_xxz_yyz[j] = fr * dy_xz_yyz[j] + f2t * dy_z_yyz[j];

                dz_xxz_yyz[j] = fr * dz_xz_yyz[j] + f2t * dz_z_yyz[j];

                dx_xxz_yzz[j] = fr * dx_xz_yzz[j] + f2t * (dx_z_yzz[j] + s_xz_yzz[j]);

                dy_xxz_yzz[j] = fr * dy_xz_yzz[j] + f2t * dy_z_yzz[j];

                dz_xxz_yzz[j] = fr * dz_xz_yzz[j] + f2t * dz_z_yzz[j];

                dx_xxz_zzz[j] = fr * dx_xz_zzz[j] + f2t * (dx_z_zzz[j] + s_xz_zzz[j]);

                dy_xxz_zzz[j] = fr * dy_xz_zzz[j] + f2t * dy_z_zzz[j];

                dz_xxz_zzz[j] = fr * dz_xz_zzz[j] + f2t * dz_z_zzz[j];

                dx_xyy_xxx[j] = fr * dx_yy_xxx[j] + f2t * (3.0 * dx_yy_xx[j] + s_yy_xxx[j]);

                dy_xyy_xxx[j] = fr * dy_yy_xxx[j] + f2t * 3.0 * dy_yy_xx[j];

                dz_xyy_xxx[j] = fr * dz_yy_xxx[j] + f2t * 3.0 * dz_yy_xx[j];

                dx_xyy_xxy[j] = fr * dx_yy_xxy[j] + f2t * (2.0 * dx_yy_xy[j] + s_yy_xxy[j]);

                dy_xyy_xxy[j] = fr * dy_yy_xxy[j] + f2t * 2.0 * dy_yy_xy[j];

                dz_xyy_xxy[j] = fr * dz_yy_xxy[j] + f2t * 2.0 * dz_yy_xy[j];

                dx_xyy_xxz[j] = fr * dx_yy_xxz[j] + f2t * (2.0 * dx_yy_xz[j] + s_yy_xxz[j]);

                dy_xyy_xxz[j] = fr * dy_yy_xxz[j] + f2t * 2.0 * dy_yy_xz[j];

                dz_xyy_xxz[j] = fr * dz_yy_xxz[j] + f2t * 2.0 * dz_yy_xz[j];

                dx_xyy_xyy[j] = fr * dx_yy_xyy[j] + f2t * (dx_yy_yy[j] + s_yy_xyy[j]);

                dy_xyy_xyy[j] = fr * dy_yy_xyy[j] + f2t * dy_yy_yy[j];

                dz_xyy_xyy[j] = fr * dz_yy_xyy[j] + f2t * dz_yy_yy[j];

                dx_xyy_xyz[j] = fr * dx_yy_xyz[j] + f2t * (dx_yy_yz[j] + s_yy_xyz[j]);

                dy_xyy_xyz[j] = fr * dy_yy_xyz[j] + f2t * dy_yy_yz[j];

                dz_xyy_xyz[j] = fr * dz_yy_xyz[j] + f2t * dz_yy_yz[j];

                dx_xyy_xzz[j] = fr * dx_yy_xzz[j] + f2t * (dx_yy_zz[j] + s_yy_xzz[j]);

                dy_xyy_xzz[j] = fr * dy_yy_xzz[j] + f2t * dy_yy_zz[j];

                dz_xyy_xzz[j] = fr * dz_yy_xzz[j] + f2t * dz_yy_zz[j];

                dx_xyy_yyy[j] = fr * dx_yy_yyy[j] + f2t * s_yy_yyy[j];

                dy_xyy_yyy[j] = fr * dy_yy_yyy[j];

                dz_xyy_yyy[j] = fr * dz_yy_yyy[j];

                dx_xyy_yyz[j] = fr * dx_yy_yyz[j] + f2t * s_yy_yyz[j];

                dy_xyy_yyz[j] = fr * dy_yy_yyz[j];

                dz_xyy_yyz[j] = fr * dz_yy_yyz[j];

                dx_xyy_yzz[j] = fr * dx_yy_yzz[j] + f2t * s_yy_yzz[j];

                dy_xyy_yzz[j] = fr * dy_yy_yzz[j];

                dz_xyy_yzz[j] = fr * dz_yy_yzz[j];

                dx_xyy_zzz[j] = fr * dx_yy_zzz[j] + f2t * s_yy_zzz[j];

                dy_xyy_zzz[j] = fr * dy_yy_zzz[j];

                dz_xyy_zzz[j] = fr * dz_yy_zzz[j];

                dx_xyz_xxx[j] = fr * dx_yz_xxx[j] + f2t * (3.0 * dx_yz_xx[j] + s_yz_xxx[j]);

                dy_xyz_xxx[j] = fr * dy_yz_xxx[j] + f2t * 3.0 * dy_yz_xx[j];

                dz_xyz_xxx[j] = fr * dz_yz_xxx[j] + f2t * 3.0 * dz_yz_xx[j];

                dx_xyz_xxy[j] = fr * dx_yz_xxy[j] + f2t * (2.0 * dx_yz_xy[j] + s_yz_xxy[j]);

                dy_xyz_xxy[j] = fr * dy_yz_xxy[j] + f2t * 2.0 * dy_yz_xy[j];

                dz_xyz_xxy[j] = fr * dz_yz_xxy[j] + f2t * 2.0 * dz_yz_xy[j];

                dx_xyz_xxz[j] = fr * dx_yz_xxz[j] + f2t * (2.0 * dx_yz_xz[j] + s_yz_xxz[j]);

                dy_xyz_xxz[j] = fr * dy_yz_xxz[j] + f2t * 2.0 * dy_yz_xz[j];

                dz_xyz_xxz[j] = fr * dz_yz_xxz[j] + f2t * 2.0 * dz_yz_xz[j];

                dx_xyz_xyy[j] = fr * dx_yz_xyy[j] + f2t * (dx_yz_yy[j] + s_yz_xyy[j]);

                dy_xyz_xyy[j] = fr * dy_yz_xyy[j] + f2t * dy_yz_yy[j];

                dz_xyz_xyy[j] = fr * dz_yz_xyy[j] + f2t * dz_yz_yy[j];

                dx_xyz_xyz[j] = fr * dx_yz_xyz[j] + f2t * (dx_yz_yz[j] + s_yz_xyz[j]);

                dy_xyz_xyz[j] = fr * dy_yz_xyz[j] + f2t * dy_yz_yz[j];

                dz_xyz_xyz[j] = fr * dz_yz_xyz[j] + f2t * dz_yz_yz[j];

                dx_xyz_xzz[j] = fr * dx_yz_xzz[j] + f2t * (dx_yz_zz[j] + s_yz_xzz[j]);

                dy_xyz_xzz[j] = fr * dy_yz_xzz[j] + f2t * dy_yz_zz[j];

                dz_xyz_xzz[j] = fr * dz_yz_xzz[j] + f2t * dz_yz_zz[j];

                dx_xyz_yyy[j] = fr * dx_yz_yyy[j] + f2t * s_yz_yyy[j];

                dy_xyz_yyy[j] = fr * dy_yz_yyy[j];

                dz_xyz_yyy[j] = fr * dz_yz_yyy[j];

                dx_xyz_yyz[j] = fr * dx_yz_yyz[j] + f2t * s_yz_yyz[j];

                dy_xyz_yyz[j] = fr * dy_yz_yyz[j];

                dz_xyz_yyz[j] = fr * dz_yz_yyz[j];

                dx_xyz_yzz[j] = fr * dx_yz_yzz[j] + f2t * s_yz_yzz[j];

                dy_xyz_yzz[j] = fr * dy_yz_yzz[j];

                dz_xyz_yzz[j] = fr * dz_yz_yzz[j];

                dx_xyz_zzz[j] = fr * dx_yz_zzz[j] + f2t * s_yz_zzz[j];

                dy_xyz_zzz[j] = fr * dy_yz_zzz[j];

                dz_xyz_zzz[j] = fr * dz_yz_zzz[j];

                dx_xzz_xxx[j] = fr * dx_zz_xxx[j] + f2t * (3.0 * dx_zz_xx[j] + s_zz_xxx[j]);

                dy_xzz_xxx[j] = fr * dy_zz_xxx[j] + f2t * 3.0 * dy_zz_xx[j];

                dz_xzz_xxx[j] = fr * dz_zz_xxx[j] + f2t * 3.0 * dz_zz_xx[j];

                dx_xzz_xxy[j] = fr * dx_zz_xxy[j] + f2t * (2.0 * dx_zz_xy[j] + s_zz_xxy[j]);

                dy_xzz_xxy[j] = fr * dy_zz_xxy[j] + f2t * 2.0 * dy_zz_xy[j];

                dz_xzz_xxy[j] = fr * dz_zz_xxy[j] + f2t * 2.0 * dz_zz_xy[j];

                dx_xzz_xxz[j] = fr * dx_zz_xxz[j] + f2t * (2.0 * dx_zz_xz[j] + s_zz_xxz[j]);

                dy_xzz_xxz[j] = fr * dy_zz_xxz[j] + f2t * 2.0 * dy_zz_xz[j];

                dz_xzz_xxz[j] = fr * dz_zz_xxz[j] + f2t * 2.0 * dz_zz_xz[j];

                dx_xzz_xyy[j] = fr * dx_zz_xyy[j] + f2t * (dx_zz_yy[j] + s_zz_xyy[j]);

                dy_xzz_xyy[j] = fr * dy_zz_xyy[j] + f2t * dy_zz_yy[j];

                dz_xzz_xyy[j] = fr * dz_zz_xyy[j] + f2t * dz_zz_yy[j];

                dx_xzz_xyz[j] = fr * dx_zz_xyz[j] + f2t * (dx_zz_yz[j] + s_zz_xyz[j]);

                dy_xzz_xyz[j] = fr * dy_zz_xyz[j] + f2t * dy_zz_yz[j];

                dz_xzz_xyz[j] = fr * dz_zz_xyz[j] + f2t * dz_zz_yz[j];

                dx_xzz_xzz[j] = fr * dx_zz_xzz[j] + f2t * (dx_zz_zz[j] + s_zz_xzz[j]);

                dy_xzz_xzz[j] = fr * dy_zz_xzz[j] + f2t * dy_zz_zz[j];

                dz_xzz_xzz[j] = fr * dz_zz_xzz[j] + f2t * dz_zz_zz[j];

                dx_xzz_yyy[j] = fr * dx_zz_yyy[j] + f2t * s_zz_yyy[j];

                dy_xzz_yyy[j] = fr * dy_zz_yyy[j];

                dz_xzz_yyy[j] = fr * dz_zz_yyy[j];

                dx_xzz_yyz[j] = fr * dx_zz_yyz[j] + f2t * s_zz_yyz[j];

                dy_xzz_yyz[j] = fr * dy_zz_yyz[j];

                dz_xzz_yyz[j] = fr * dz_zz_yyz[j];

                dx_xzz_yzz[j] = fr * dx_zz_yzz[j] + f2t * s_zz_yzz[j];

                dy_xzz_yzz[j] = fr * dy_zz_yzz[j];

                dz_xzz_yzz[j] = fr * dz_zz_yzz[j];

                dx_xzz_zzz[j] = fr * dx_zz_zzz[j] + f2t * s_zz_zzz[j];

                dy_xzz_zzz[j] = fr * dy_zz_zzz[j];

                dz_xzz_zzz[j] = fr * dz_zz_zzz[j];

                // leading y component

                fr = pay[j];

                dx_yyy_xxx[j] = fr * dx_yy_xxx[j] + f2t * 2.0 * dx_y_xxx[j];

                dy_yyy_xxx[j] = fr * dy_yy_xxx[j] + f2t * (2.0 * dy_y_xxx[j] + s_yy_xxx[j]);

                dz_yyy_xxx[j] = fr * dz_yy_xxx[j] + f2t * 2.0 * dz_y_xxx[j];

                dx_yyy_xxy[j] = fr * dx_yy_xxy[j] + f2t * (2.0 * dx_y_xxy[j] + dx_yy_xx[j]);

                dy_yyy_xxy[j] = fr * dy_yy_xxy[j] + f2t * (2.0 * dy_y_xxy[j] + dy_yy_xx[j] + s_yy_xxy[j]);

                dz_yyy_xxy[j] = fr * dz_yy_xxy[j] + f2t * (2.0 * dz_y_xxy[j] + dz_yy_xx[j]);

                dx_yyy_xxz[j] = fr * dx_yy_xxz[j] + f2t * 2.0 * dx_y_xxz[j];

                dy_yyy_xxz[j] = fr * dy_yy_xxz[j] + f2t * (2.0 * dy_y_xxz[j] + s_yy_xxz[j]);

                dz_yyy_xxz[j] = fr * dz_yy_xxz[j] + f2t * 2.0 * dz_y_xxz[j];

                dx_yyy_xyy[j] = fr * dx_yy_xyy[j] + f2t * (2.0 * dx_y_xyy[j] + 2.0 * dx_yy_xy[j]);

                dy_yyy_xyy[j] = fr * dy_yy_xyy[j] + f2t * (2.0 * dy_y_xyy[j] + 2.0 * dy_yy_xy[j] + s_yy_xyy[j]);

                dz_yyy_xyy[j] = fr * dz_yy_xyy[j] + f2t * (2.0 * dz_y_xyy[j] + 2.0 * dz_yy_xy[j]);

                dx_yyy_xyz[j] = fr * dx_yy_xyz[j] + f2t * (2.0 * dx_y_xyz[j] + dx_yy_xz[j]);

                dy_yyy_xyz[j] = fr * dy_yy_xyz[j] + f2t * (2.0 * dy_y_xyz[j] + dy_yy_xz[j] + s_yy_xyz[j]);

                dz_yyy_xyz[j] = fr * dz_yy_xyz[j] + f2t * (2.0 * dz_y_xyz[j] + dz_yy_xz[j]);

                dx_yyy_xzz[j] = fr * dx_yy_xzz[j] + f2t * 2.0 * dx_y_xzz[j];

                dy_yyy_xzz[j] = fr * dy_yy_xzz[j] + f2t * (2.0 * dy_y_xzz[j] + s_yy_xzz[j]);

                dz_yyy_xzz[j] = fr * dz_yy_xzz[j] + f2t * 2.0 * dz_y_xzz[j];

                dx_yyy_yyy[j] = fr * dx_yy_yyy[j] + f2t * (2.0 * dx_y_yyy[j] + 3.0 * dx_yy_yy[j]);

                dy_yyy_yyy[j] = fr * dy_yy_yyy[j] + f2t * (2.0 * dy_y_yyy[j] + 3.0 * dy_yy_yy[j] + s_yy_yyy[j]);

                dz_yyy_yyy[j] = fr * dz_yy_yyy[j] + f2t * (2.0 * dz_y_yyy[j] + 3.0 * dz_yy_yy[j]);

                dx_yyy_yyz[j] = fr * dx_yy_yyz[j] + f2t * (2.0 * dx_y_yyz[j] + 2.0 * dx_yy_yz[j]);

                dy_yyy_yyz[j] = fr * dy_yy_yyz[j] + f2t * (2.0 * dy_y_yyz[j] + 2.0 * dy_yy_yz[j] + s_yy_yyz[j]);

                dz_yyy_yyz[j] = fr * dz_yy_yyz[j] + f2t * (2.0 * dz_y_yyz[j] + 2.0 * dz_yy_yz[j]);

                dx_yyy_yzz[j] = fr * dx_yy_yzz[j] + f2t * (2.0 * dx_y_yzz[j] + dx_yy_zz[j]);

                dy_yyy_yzz[j] = fr * dy_yy_yzz[j] + f2t * (2.0 * dy_y_yzz[j] + dy_yy_zz[j] + s_yy_yzz[j]);

                dz_yyy_yzz[j] = fr * dz_yy_yzz[j] + f2t * (2.0 * dz_y_yzz[j] + dz_yy_zz[j]);

                dx_yyy_zzz[j] = fr * dx_yy_zzz[j] + f2t * 2.0 * dx_y_zzz[j];

                dy_yyy_zzz[j] = fr * dy_yy_zzz[j] + f2t * (2.0 * dy_y_zzz[j] + s_yy_zzz[j]);

                dz_yyy_zzz[j] = fr * dz_yy_zzz[j] + f2t * 2.0 * dz_y_zzz[j];

                dx_yyz_xxx[j] = fr * dx_yz_xxx[j] + f2t * dx_z_xxx[j];

                dy_yyz_xxx[j] = fr * dy_yz_xxx[j] + f2t * (dy_z_xxx[j] + s_yz_xxx[j]);

                dz_yyz_xxx[j] = fr * dz_yz_xxx[j] + f2t * dz_z_xxx[j];

                dx_yyz_xxy[j] = fr * dx_yz_xxy[j] + f2t * (dx_z_xxy[j] + dx_yz_xx[j]);

                dy_yyz_xxy[j] = fr * dy_yz_xxy[j] + f2t * (dy_z_xxy[j] + dy_yz_xx[j] + s_yz_xxy[j]);

                dz_yyz_xxy[j] = fr * dz_yz_xxy[j] + f2t * (dz_z_xxy[j] + dz_yz_xx[j]);

                dx_yyz_xxz[j] = fr * dx_yz_xxz[j] + f2t * dx_z_xxz[j];

                dy_yyz_xxz[j] = fr * dy_yz_xxz[j] + f2t * (dy_z_xxz[j] + s_yz_xxz[j]);

                dz_yyz_xxz[j] = fr * dz_yz_xxz[j] + f2t * dz_z_xxz[j];

                dx_yyz_xyy[j] = fr * dx_yz_xyy[j] + f2t * (dx_z_xyy[j] + 2.0 * dx_yz_xy[j]);

                dy_yyz_xyy[j] = fr * dy_yz_xyy[j] + f2t * (dy_z_xyy[j] + 2.0 * dy_yz_xy[j] + s_yz_xyy[j]);

                dz_yyz_xyy[j] = fr * dz_yz_xyy[j] + f2t * (dz_z_xyy[j] + 2.0 * dz_yz_xy[j]);

                dx_yyz_xyz[j] = fr * dx_yz_xyz[j] + f2t * (dx_z_xyz[j] + dx_yz_xz[j]);

                dy_yyz_xyz[j] = fr * dy_yz_xyz[j] + f2t * (dy_z_xyz[j] + dy_yz_xz[j] + s_yz_xyz[j]);

                dz_yyz_xyz[j] = fr * dz_yz_xyz[j] + f2t * (dz_z_xyz[j] + dz_yz_xz[j]);

                dx_yyz_xzz[j] = fr * dx_yz_xzz[j] + f2t * dx_z_xzz[j];

                dy_yyz_xzz[j] = fr * dy_yz_xzz[j] + f2t * (dy_z_xzz[j] + s_yz_xzz[j]);

                dz_yyz_xzz[j] = fr * dz_yz_xzz[j] + f2t * dz_z_xzz[j];

                dx_yyz_yyy[j] = fr * dx_yz_yyy[j] + f2t * (dx_z_yyy[j] + 3.0 * dx_yz_yy[j]);

                dy_yyz_yyy[j] = fr * dy_yz_yyy[j] + f2t * (dy_z_yyy[j] + 3.0 * dy_yz_yy[j] + s_yz_yyy[j]);

                dz_yyz_yyy[j] = fr * dz_yz_yyy[j] + f2t * (dz_z_yyy[j] + 3.0 * dz_yz_yy[j]);

                dx_yyz_yyz[j] = fr * dx_yz_yyz[j] + f2t * (dx_z_yyz[j] + 2.0 * dx_yz_yz[j]);

                dy_yyz_yyz[j] = fr * dy_yz_yyz[j] + f2t * (dy_z_yyz[j] + 2.0 * dy_yz_yz[j] + s_yz_yyz[j]);

                dz_yyz_yyz[j] = fr * dz_yz_yyz[j] + f2t * (dz_z_yyz[j] + 2.0 * dz_yz_yz[j]);

                dx_yyz_yzz[j] = fr * dx_yz_yzz[j] + f2t * (dx_z_yzz[j] + dx_yz_zz[j]);

                dy_yyz_yzz[j] = fr * dy_yz_yzz[j] + f2t * (dy_z_yzz[j] + dy_yz_zz[j] + s_yz_yzz[j]);

                dz_yyz_yzz[j] = fr * dz_yz_yzz[j] + f2t * (dz_z_yzz[j] + dz_yz_zz[j]);

                dx_yyz_zzz[j] = fr * dx_yz_zzz[j] + f2t * dx_z_zzz[j];

                dy_yyz_zzz[j] = fr * dy_yz_zzz[j] + f2t * (dy_z_zzz[j] + s_yz_zzz[j]);

                dz_yyz_zzz[j] = fr * dz_yz_zzz[j] + f2t * dz_z_zzz[j];

                dx_yzz_xxx[j] = fr * dx_zz_xxx[j];

                dy_yzz_xxx[j] = fr * dy_zz_xxx[j] + f2t * s_zz_xxx[j];

                dz_yzz_xxx[j] = fr * dz_zz_xxx[j];

                dx_yzz_xxy[j] = fr * dx_zz_xxy[j] + f2t * dx_zz_xx[j];

                dy_yzz_xxy[j] = fr * dy_zz_xxy[j] + f2t * (dy_zz_xx[j] + s_zz_xxy[j]);

                dz_yzz_xxy[j] = fr * dz_zz_xxy[j] + f2t * dz_zz_xx[j];

                dx_yzz_xxz[j] = fr * dx_zz_xxz[j];

                dy_yzz_xxz[j] = fr * dy_zz_xxz[j] + f2t * s_zz_xxz[j];

                dz_yzz_xxz[j] = fr * dz_zz_xxz[j];

                dx_yzz_xyy[j] = fr * dx_zz_xyy[j] + f2t * 2.0 * dx_zz_xy[j];

                dy_yzz_xyy[j] = fr * dy_zz_xyy[j] + f2t * (2.0 * dy_zz_xy[j] + s_zz_xyy[j]);

                dz_yzz_xyy[j] = fr * dz_zz_xyy[j] + f2t * 2.0 * dz_zz_xy[j];

                dx_yzz_xyz[j] = fr * dx_zz_xyz[j] + f2t * dx_zz_xz[j];

                dy_yzz_xyz[j] = fr * dy_zz_xyz[j] + f2t * (dy_zz_xz[j] + s_zz_xyz[j]);

                dz_yzz_xyz[j] = fr * dz_zz_xyz[j] + f2t * dz_zz_xz[j];

                dx_yzz_xzz[j] = fr * dx_zz_xzz[j];

                dy_yzz_xzz[j] = fr * dy_zz_xzz[j] + f2t * s_zz_xzz[j];

                dz_yzz_xzz[j] = fr * dz_zz_xzz[j];

                dx_yzz_yyy[j] = fr * dx_zz_yyy[j] + f2t * 3.0 * dx_zz_yy[j];

                dy_yzz_yyy[j] = fr * dy_zz_yyy[j] + f2t * (3.0 * dy_zz_yy[j] + s_zz_yyy[j]);

                dz_yzz_yyy[j] = fr * dz_zz_yyy[j] + f2t * 3.0 * dz_zz_yy[j];

                dx_yzz_yyz[j] = fr * dx_zz_yyz[j] + f2t * 2.0 * dx_zz_yz[j];

                dy_yzz_yyz[j] = fr * dy_zz_yyz[j] + f2t * (2.0 * dy_zz_yz[j] + s_zz_yyz[j]);

                dz_yzz_yyz[j] = fr * dz_zz_yyz[j] + f2t * 2.0 * dz_zz_yz[j];

                dx_yzz_yzz[j] = fr * dx_zz_yzz[j] + f2t * dx_zz_zz[j];

                dy_yzz_yzz[j] = fr * dy_zz_yzz[j] + f2t * (dy_zz_zz[j] + s_zz_yzz[j]);

                dz_yzz_yzz[j] = fr * dz_zz_yzz[j] + f2t * dz_zz_zz[j];

                dx_yzz_zzz[j] = fr * dx_zz_zzz[j];

                dy_yzz_zzz[j] = fr * dy_zz_zzz[j] + f2t * s_zz_zzz[j];

                dz_yzz_zzz[j] = fr * dz_zz_zzz[j];

                // leading z component

                fr = paz[j];

                dx_zzz_xxx[j] = fr * dx_zz_xxx[j] + f2t * 2.0 * dx_z_xxx[j];

                dy_zzz_xxx[j] = fr * dy_zz_xxx[j] + f2t * 2.0 * dy_z_xxx[j];

                dz_zzz_xxx[j] = fr * dz_zz_xxx[j] + f2t * (2.0 * dz_z_xxx[j] + s_zz_xxx[j]);

                dx_zzz_xxy[j] = fr * dx_zz_xxy[j] + f2t * 2.0 * dx_z_xxy[j];

                dy_zzz_xxy[j] = fr * dy_zz_xxy[j] + f2t * 2.0 * dy_z_xxy[j];

                dz_zzz_xxy[j] = fr * dz_zz_xxy[j] + f2t * (2.0 * dz_z_xxy[j] + s_zz_xxy[j]);

                dx_zzz_xxz[j] = fr * dx_zz_xxz[j] + f2t * (2.0 * dx_z_xxz[j] + dx_zz_xx[j]);

                dy_zzz_xxz[j] = fr * dy_zz_xxz[j] + f2t * (2.0 * dy_z_xxz[j] + dy_zz_xx[j]);

                dz_zzz_xxz[j] = fr * dz_zz_xxz[j] + f2t * (2.0 * dz_z_xxz[j] + dz_zz_xx[j] + s_zz_xxz[j]);

                dx_zzz_xyy[j] = fr * dx_zz_xyy[j] + f2t * 2.0 * dx_z_xyy[j];

                dy_zzz_xyy[j] = fr * dy_zz_xyy[j] + f2t * 2.0 * dy_z_xyy[j];

                dz_zzz_xyy[j] = fr * dz_zz_xyy[j] + f2t * (2.0 * dz_z_xyy[j] + s_zz_xyy[j]);

                dx_zzz_xyz[j] = fr * dx_zz_xyz[j] + f2t * (2.0 * dx_z_xyz[j] + dx_zz_xy[j]);

                dy_zzz_xyz[j] = fr * dy_zz_xyz[j] + f2t * (2.0 * dy_z_xyz[j] + dy_zz_xy[j]);

                dz_zzz_xyz[j] = fr * dz_zz_xyz[j] + f2t * (2.0 * dz_z_xyz[j] + dz_zz_xy[j] + s_zz_xyz[j]);

                dx_zzz_xzz[j] = fr * dx_zz_xzz[j] + f2t * (2.0 * dx_z_xzz[j] + 2.0 * dx_zz_xz[j]);

                dy_zzz_xzz[j] = fr * dy_zz_xzz[j] + f2t * (2.0 * dy_z_xzz[j] + 2.0 * dy_zz_xz[j]);

                dz_zzz_xzz[j] = fr * dz_zz_xzz[j] + f2t * (2.0 * dz_z_xzz[j] + 2.0 * dz_zz_xz[j] + s_zz_xzz[j]);

                dx_zzz_yyy[j] = fr * dx_zz_yyy[j] + f2t * 2.0 * dx_z_yyy[j];

                dy_zzz_yyy[j] = fr * dy_zz_yyy[j] + f2t * 2.0 * dy_z_yyy[j];

                dz_zzz_yyy[j] = fr * dz_zz_yyy[j] + f2t * (2.0 * dz_z_yyy[j] + s_zz_yyy[j]);

                dx_zzz_yyz[j] = fr * dx_zz_yyz[j] + f2t * (2.0 * dx_z_yyz[j] + dx_zz_yy[j]);

                dy_zzz_yyz[j] = fr * dy_zz_yyz[j] + f2t * (2.0 * dy_z_yyz[j] + dy_zz_yy[j]);

                dz_zzz_yyz[j] = fr * dz_zz_yyz[j] + f2t * (2.0 * dz_z_yyz[j] + dz_zz_yy[j] + s_zz_yyz[j]);

                dx_zzz_yzz[j] = fr * dx_zz_yzz[j] + f2t * (2.0 * dx_z_yzz[j] + 2.0 * dx_zz_yz[j]);

                dy_zzz_yzz[j] = fr * dy_zz_yzz[j] + f2t * (2.0 * dy_z_yzz[j] + 2.0 * dy_zz_yz[j]);

                dz_zzz_yzz[j] = fr * dz_zz_yzz[j] + f2t * (2.0 * dz_z_yzz[j] + 2.0 * dz_zz_yz[j] + s_zz_yzz[j]);

                dx_zzz_zzz[j] = fr * dx_zz_zzz[j] + f2t * (2.0 * dx_z_zzz[j] + 3.0 * dx_zz_zz[j]);

                dy_zzz_zzz[j] = fr * dy_zz_zzz[j] + f2t * (2.0 * dy_z_zzz[j] + 3.0 * dy_zz_zz[j]);

                dz_zzz_zzz[j] = fr * dz_zz_zzz[j] + f2t * (2.0 * dz_z_zzz[j] + 3.0 * dz_zz_zz[j] + s_zz_zzz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForPG(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CMemBlock2D<double>&  pbDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {1, 4, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {1, 4, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 4, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 4, 1});
        
        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 1});
        
        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 2, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);
            
            // set up pointers to distances R(PB)
            
            auto pbx = pbDistances.data(3 * idx);
            
            auto pby = pbDistances.data(3 * idx + 1);
            
            auto pbz = pbDistances.data(3 * idx + 2);

            // set up pointers to (P|M|G) integrals

            auto dx_x_xxxx = primBuffer.data(doff + 45 * idx);

            auto dx_x_xxxy = primBuffer.data(doff + 45 * idx + 1);

            auto dx_x_xxxz = primBuffer.data(doff + 45 * idx + 2);

            auto dx_x_xxyy = primBuffer.data(doff + 45 * idx + 3);

            auto dx_x_xxyz = primBuffer.data(doff + 45 * idx + 4);

            auto dx_x_xxzz = primBuffer.data(doff + 45 * idx + 5);

            auto dx_x_xyyy = primBuffer.data(doff + 45 * idx + 6);

            auto dx_x_xyyz = primBuffer.data(doff + 45 * idx + 7);

            auto dx_x_xyzz = primBuffer.data(doff + 45 * idx + 8);

            auto dx_x_xzzz = primBuffer.data(doff + 45 * idx + 9);

            auto dx_x_yyyy = primBuffer.data(doff + 45 * idx + 10);

            auto dx_x_yyyz = primBuffer.data(doff + 45 * idx + 11);

            auto dx_x_yyzz = primBuffer.data(doff + 45 * idx + 12);

            auto dx_x_yzzz = primBuffer.data(doff + 45 * idx + 13);

            auto dx_x_zzzz = primBuffer.data(doff + 45 * idx + 14);

            auto dx_y_xxxx = primBuffer.data(doff + 45 * idx + 15);

            auto dx_y_xxxy = primBuffer.data(doff + 45 * idx + 16);

            auto dx_y_xxxz = primBuffer.data(doff + 45 * idx + 17);

            auto dx_y_xxyy = primBuffer.data(doff + 45 * idx + 18);

            auto dx_y_xxyz = primBuffer.data(doff + 45 * idx + 19);

            auto dx_y_xxzz = primBuffer.data(doff + 45 * idx + 20);

            auto dx_y_xyyy = primBuffer.data(doff + 45 * idx + 21);

            auto dx_y_xyyz = primBuffer.data(doff + 45 * idx + 22);

            auto dx_y_xyzz = primBuffer.data(doff + 45 * idx + 23);

            auto dx_y_xzzz = primBuffer.data(doff + 45 * idx + 24);

            auto dx_y_yyyy = primBuffer.data(doff + 45 * idx + 25);

            auto dx_y_yyyz = primBuffer.data(doff + 45 * idx + 26);

            auto dx_y_yyzz = primBuffer.data(doff + 45 * idx + 27);

            auto dx_y_yzzz = primBuffer.data(doff + 45 * idx + 28);

            auto dx_y_zzzz = primBuffer.data(doff + 45 * idx + 29);

            auto dx_z_xxxx = primBuffer.data(doff + 45 * idx + 30);

            auto dx_z_xxxy = primBuffer.data(doff + 45 * idx + 31);

            auto dx_z_xxxz = primBuffer.data(doff + 45 * idx + 32);

            auto dx_z_xxyy = primBuffer.data(doff + 45 * idx + 33);

            auto dx_z_xxyz = primBuffer.data(doff + 45 * idx + 34);

            auto dx_z_xxzz = primBuffer.data(doff + 45 * idx + 35);

            auto dx_z_xyyy = primBuffer.data(doff + 45 * idx + 36);

            auto dx_z_xyyz = primBuffer.data(doff + 45 * idx + 37);

            auto dx_z_xyzz = primBuffer.data(doff + 45 * idx + 38);

            auto dx_z_xzzz = primBuffer.data(doff + 45 * idx + 39);

            auto dx_z_yyyy = primBuffer.data(doff + 45 * idx + 40);

            auto dx_z_yyyz = primBuffer.data(doff + 45 * idx + 41);

            auto dx_z_yyzz = primBuffer.data(doff + 45 * idx + 42);

            auto dx_z_yzzz = primBuffer.data(doff + 45 * idx + 43);

            auto dx_z_zzzz = primBuffer.data(doff + 45 * idx + 44);

            auto dy_x_xxxx = primBuffer.data(doff + 45 * bdim + 45 * idx);

            auto dy_x_xxxy = primBuffer.data(doff + 45 * bdim + 45 * idx + 1);

            auto dy_x_xxxz = primBuffer.data(doff + 45 * bdim + 45 * idx + 2);

            auto dy_x_xxyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 3);

            auto dy_x_xxyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 4);

            auto dy_x_xxzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 5);

            auto dy_x_xyyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 6);

            auto dy_x_xyyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 7);

            auto dy_x_xyzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 8);

            auto dy_x_xzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 9);

            auto dy_x_yyyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 10);

            auto dy_x_yyyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 11);

            auto dy_x_yyzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 12);

            auto dy_x_yzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 13);

            auto dy_x_zzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 14);

            auto dy_y_xxxx = primBuffer.data(doff + 45 * bdim + 45 * idx + 15);

            auto dy_y_xxxy = primBuffer.data(doff + 45 * bdim + 45 * idx + 16);

            auto dy_y_xxxz = primBuffer.data(doff + 45 * bdim + 45 * idx + 17);

            auto dy_y_xxyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 18);

            auto dy_y_xxyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 19);

            auto dy_y_xxzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 20);

            auto dy_y_xyyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 21);

            auto dy_y_xyyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 22);

            auto dy_y_xyzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 23);

            auto dy_y_xzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 24);

            auto dy_y_yyyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 25);

            auto dy_y_yyyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 26);

            auto dy_y_yyzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 27);

            auto dy_y_yzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 28);

            auto dy_y_zzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 29);

            auto dy_z_xxxx = primBuffer.data(doff + 45 * bdim + 45 * idx + 30);

            auto dy_z_xxxy = primBuffer.data(doff + 45 * bdim + 45 * idx + 31);

            auto dy_z_xxxz = primBuffer.data(doff + 45 * bdim + 45 * idx + 32);

            auto dy_z_xxyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 33);

            auto dy_z_xxyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 34);

            auto dy_z_xxzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 35);

            auto dy_z_xyyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 36);

            auto dy_z_xyyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 37);

            auto dy_z_xyzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 38);

            auto dy_z_xzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 39);

            auto dy_z_yyyy = primBuffer.data(doff + 45 * bdim + 45 * idx + 40);

            auto dy_z_yyyz = primBuffer.data(doff + 45 * bdim + 45 * idx + 41);

            auto dy_z_yyzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 42);

            auto dy_z_yzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 43);

            auto dy_z_zzzz = primBuffer.data(doff + 45 * bdim + 45 * idx + 44);

            auto dz_x_xxxx = primBuffer.data(doff + 90 * bdim + 45 * idx);

            auto dz_x_xxxy = primBuffer.data(doff + 90 * bdim + 45 * idx + 1);

            auto dz_x_xxxz = primBuffer.data(doff + 90 * bdim + 45 * idx + 2);

            auto dz_x_xxyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 3);

            auto dz_x_xxyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 4);

            auto dz_x_xxzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 5);

            auto dz_x_xyyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 6);

            auto dz_x_xyyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 7);

            auto dz_x_xyzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 8);

            auto dz_x_xzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 9);

            auto dz_x_yyyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 10);

            auto dz_x_yyyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 11);

            auto dz_x_yyzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 12);

            auto dz_x_yzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 13);

            auto dz_x_zzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 14);

            auto dz_y_xxxx = primBuffer.data(doff + 90 * bdim + 45 * idx + 15);

            auto dz_y_xxxy = primBuffer.data(doff + 90 * bdim + 45 * idx + 16);

            auto dz_y_xxxz = primBuffer.data(doff + 90 * bdim + 45 * idx + 17);

            auto dz_y_xxyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 18);

            auto dz_y_xxyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 19);

            auto dz_y_xxzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 20);

            auto dz_y_xyyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 21);

            auto dz_y_xyyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 22);

            auto dz_y_xyzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 23);

            auto dz_y_xzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 24);

            auto dz_y_yyyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 25);

            auto dz_y_yyyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 26);

            auto dz_y_yyzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 27);

            auto dz_y_yzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 28);

            auto dz_y_zzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 29);

            auto dz_z_xxxx = primBuffer.data(doff + 90 * bdim + 45 * idx + 30);

            auto dz_z_xxxy = primBuffer.data(doff + 90 * bdim + 45 * idx + 31);

            auto dz_z_xxxz = primBuffer.data(doff + 90 * bdim + 45 * idx + 32);

            auto dz_z_xxyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 33);

            auto dz_z_xxyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 34);

            auto dz_z_xxzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 35);

            auto dz_z_xyyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 36);

            auto dz_z_xyyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 37);

            auto dz_z_xyzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 38);

            auto dz_z_xzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 39);

            auto dz_z_yyyy = primBuffer.data(doff + 90 * bdim + 45 * idx + 40);

            auto dz_z_yyyz = primBuffer.data(doff + 90 * bdim + 45 * idx + 41);

            auto dz_z_yyzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 42);

            auto dz_z_yzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 43);

            auto dz_z_zzzz = primBuffer.data(doff + 90 * bdim + 45 * idx + 44);

            // set up pointers to (S|M|G) integrals

            auto dx_0_xxxx = primBuffer.data(d1off + 15 * idx);

            auto dx_0_xxxy = primBuffer.data(d1off + 15 * idx + 1);

            auto dx_0_xxxz = primBuffer.data(d1off + 15 * idx + 2);

            auto dx_0_xxyy = primBuffer.data(d1off + 15 * idx + 3);

            auto dx_0_xxyz = primBuffer.data(d1off + 15 * idx + 4);

            auto dx_0_xxzz = primBuffer.data(d1off + 15 * idx + 5);

            auto dx_0_xyyy = primBuffer.data(d1off + 15 * idx + 6);

            auto dx_0_xyyz = primBuffer.data(d1off + 15 * idx + 7);

            auto dx_0_xyzz = primBuffer.data(d1off + 15 * idx + 8);

            auto dx_0_xzzz = primBuffer.data(d1off + 15 * idx + 9);

            auto dx_0_yyyy = primBuffer.data(d1off + 15 * idx + 10);

            auto dx_0_yyyz = primBuffer.data(d1off + 15 * idx + 11);

            auto dx_0_yyzz = primBuffer.data(d1off + 15 * idx + 12);

            auto dx_0_yzzz = primBuffer.data(d1off + 15 * idx + 13);

            auto dx_0_zzzz = primBuffer.data(d1off + 15 * idx + 14);

            auto dy_0_xxxx = primBuffer.data(d1off + 15 * bdim + 15 * idx);

            auto dy_0_xxxy = primBuffer.data(d1off + 15 * bdim + 15 * idx + 1);

            auto dy_0_xxxz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 2);

            auto dy_0_xxyy = primBuffer.data(d1off + 15 * bdim + 15 * idx + 3);

            auto dy_0_xxyz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 4);

            auto dy_0_xxzz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 5);

            auto dy_0_xyyy = primBuffer.data(d1off + 15 * bdim + 15 * idx + 6);

            auto dy_0_xyyz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 7);

            auto dy_0_xyzz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 8);

            auto dy_0_xzzz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 9);

            auto dy_0_yyyy = primBuffer.data(d1off + 15 * bdim + 15 * idx + 10);

            auto dy_0_yyyz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 11);

            auto dy_0_yyzz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 12);

            auto dy_0_yzzz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 13);

            auto dy_0_zzzz = primBuffer.data(d1off + 15 * bdim + 15 * idx + 14);

            auto dz_0_xxxx = primBuffer.data(d1off + 30 * bdim + 15 * idx);

            auto dz_0_xxxy = primBuffer.data(d1off + 30 * bdim + 15 * idx + 1);

            auto dz_0_xxxz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 2);

            auto dz_0_xxyy = primBuffer.data(d1off + 30 * bdim + 15 * idx + 3);

            auto dz_0_xxyz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 4);

            auto dz_0_xxzz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 5);

            auto dz_0_xyyy = primBuffer.data(d1off + 30 * bdim + 15 * idx + 6);

            auto dz_0_xyyz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 7);

            auto dz_0_xyzz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 8);

            auto dz_0_xzzz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 9);

            auto dz_0_yyyy = primBuffer.data(d1off + 30 * bdim + 15 * idx + 10);

            auto dz_0_yyyz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 11);

            auto dz_0_yyzz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 12);

            auto dz_0_yzzz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 13);

            auto dz_0_zzzz = primBuffer.data(d1off + 30 * bdim + 15 * idx + 14);

            // set up pointers to (S|M|F) integrals

            auto dx_0_xxx = primBuffer.data(dkoff + 10 * idx);

            auto dx_0_xxy = primBuffer.data(dkoff + 10 * idx + 1);

            auto dx_0_xxz = primBuffer.data(dkoff + 10 * idx + 2);

            auto dx_0_xyy = primBuffer.data(dkoff + 10 * idx + 3);

            auto dx_0_xyz = primBuffer.data(dkoff + 10 * idx + 4);

            auto dx_0_xzz = primBuffer.data(dkoff + 10 * idx + 5);

            auto dx_0_yyy = primBuffer.data(dkoff + 10 * idx + 6);

            auto dx_0_yyz = primBuffer.data(dkoff + 10 * idx + 7);

            auto dx_0_yzz = primBuffer.data(dkoff + 10 * idx + 8);

            auto dx_0_zzz = primBuffer.data(dkoff + 10 * idx + 9);

            auto dy_0_xxx = primBuffer.data(dkoff + 10 * bdim + 10 * idx);

            auto dy_0_xxy = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 1);

            auto dy_0_xxz = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 2);

            auto dy_0_xyy = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 3);

            auto dy_0_xyz = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 4);

            auto dy_0_xzz = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 5);

            auto dy_0_yyy = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 6);

            auto dy_0_yyz = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 7);

            auto dy_0_yzz = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 8);

            auto dy_0_zzz = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 9);

            auto dz_0_xxx = primBuffer.data(dkoff + 20 * bdim + 10 * idx);

            auto dz_0_xxy = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 1);

            auto dz_0_xxz = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 2);

            auto dz_0_xyy = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 3);

            auto dz_0_xyz = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 4);

            auto dz_0_xzz = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 5);

            auto dz_0_yyy = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 6);

            auto dz_0_yyz = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 7);

            auto dz_0_yzz = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 8);

            auto dz_0_zzz = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 9);

            // set up pointers to (S|G) integrals

            auto s_0_xxxx = primBuffer.data(soff + 15 * idx);

            auto s_0_xxxy = primBuffer.data(soff + 15 * idx + 1);

            auto s_0_xxxz = primBuffer.data(soff + 15 * idx + 2);

            auto s_0_xxyy = primBuffer.data(soff + 15 * idx + 3);

            auto s_0_xxyz = primBuffer.data(soff + 15 * idx + 4);

            auto s_0_xxzz = primBuffer.data(soff + 15 * idx + 5);

            auto s_0_xyyy = primBuffer.data(soff + 15 * idx + 6);

            auto s_0_xyyz = primBuffer.data(soff + 15 * idx + 7);

            auto s_0_xyzz = primBuffer.data(soff + 15 * idx + 8);

            auto s_0_xzzz = primBuffer.data(soff + 15 * idx + 9);

            auto s_0_yyyy = primBuffer.data(soff + 15 * idx + 10);

            auto s_0_yyyz = primBuffer.data(soff + 15 * idx + 11);

            auto s_0_yyzz = primBuffer.data(soff + 15 * idx + 12);

            auto s_0_yzzz = primBuffer.data(soff + 15 * idx + 13);

            auto s_0_zzzz = primBuffer.data(soff + 15 * idx + 14);
            
            // set up pointers to (S|F) integrals
            
            auto s_0_xxx = primBuffer.data(s1off + 10 * idx);
            
            auto s_0_xxy = primBuffer.data(s1off + 10 * idx + 1);
            
            auto s_0_xxz = primBuffer.data(s1off + 10 * idx + 2);
            
            auto s_0_xyy = primBuffer.data(s1off + 10 * idx + 3);
            
            auto s_0_xyz = primBuffer.data(s1off + 10 * idx + 4);
            
            auto s_0_xzz = primBuffer.data(s1off + 10 * idx + 5);
            
            auto s_0_yyy = primBuffer.data(s1off + 10 * idx + 6);
            
            auto s_0_yyz = primBuffer.data(s1off + 10 * idx + 7);
            
            auto s_0_yzz = primBuffer.data(s1off + 10 * idx + 8);
            
            auto s_0_zzz = primBuffer.data(s1off + 10 * idx + 9);
            
            // set up pointers to (S|D) integrals
            
            auto s_0_xx = primBuffer.data(s2off + 6 * idx);
            
            auto s_0_xy = primBuffer.data(s2off + 6 * idx + 1);
            
            auto s_0_xz = primBuffer.data(s2off + 6 * idx + 2);
            
            auto s_0_yy = primBuffer.data(s2off + 6 * idx + 3);
            
            auto s_0_yz = primBuffer.data(s2off + 6 * idx + 4);
            
            auto s_0_zz = primBuffer.data(s2off + 6 * idx + 5);

            #pragma omp simd aligned(fx, pax, pay, paz, pbx, pby, pbz,\
                                     dx_x_xxxx, dx_x_xxxy, dx_x_xxxz,\
                                     dx_x_xxyy, dx_x_xxyz, dx_x_xxzz, dx_x_xyyy,\
                                     dx_x_xyyz, dx_x_xyzz, dx_x_xzzz, dx_x_yyyy,\
                                     dx_x_yyyz, dx_x_yyzz, dx_x_yzzz, dx_x_zzzz,\
                                     dx_y_xxxx, dx_y_xxxy, dx_y_xxxz, dx_y_xxyy,\
                                     dx_y_xxyz, dx_y_xxzz, dx_y_xyyy, dx_y_xyyz,\
                                     dx_y_xyzz, dx_y_xzzz, dx_y_yyyy, dx_y_yyyz,\
                                     dx_y_yyzz, dx_y_yzzz, dx_y_zzzz, dx_z_xxxx,\
                                     dx_z_xxxy, dx_z_xxxz, dx_z_xxyy, dx_z_xxyz,\
                                     dx_z_xxzz, dx_z_xyyy, dx_z_xyyz, dx_z_xyzz,\
                                     dx_z_xzzz, dx_z_yyyy, dx_z_yyyz, dx_z_yyzz,\
                                     dx_z_yzzz, dx_z_zzzz, dy_x_xxxx, dy_x_xxxy,\
                                     dy_x_xxxz, dy_x_xxyy, dy_x_xxyz, dy_x_xxzz,\
                                     dy_x_xyyy, dy_x_xyyz, dy_x_xyzz, dy_x_xzzz,\
                                     dy_x_yyyy, dy_x_yyyz, dy_x_yyzz, dy_x_yzzz,\
                                     dy_x_zzzz, dy_y_xxxx, dy_y_xxxy, dy_y_xxxz,\
                                     dy_y_xxyy, dy_y_xxyz, dy_y_xxzz, dy_y_xyyy,\
                                     dy_y_xyyz, dy_y_xyzz, dy_y_xzzz, dy_y_yyyy,\
                                     dy_y_yyyz, dy_y_yyzz, dy_y_yzzz, dy_y_zzzz,\
                                     dy_z_xxxx, dy_z_xxxy, dy_z_xxxz, dy_z_xxyy,\
                                     dy_z_xxyz, dy_z_xxzz, dy_z_xyyy, dy_z_xyyz,\
                                     dy_z_xyzz, dy_z_xzzz, dy_z_yyyy, dy_z_yyyz,\
                                     dy_z_yyzz, dy_z_yzzz, dy_z_zzzz, dz_x_xxxx,\
                                     dz_x_xxxy, dz_x_xxxz, dz_x_xxyy, dz_x_xxyz,\
                                     dz_x_xxzz, dz_x_xyyy, dz_x_xyyz, dz_x_xyzz,\
                                     dz_x_xzzz, dz_x_yyyy, dz_x_yyyz, dz_x_yyzz,\
                                     dz_x_yzzz, dz_x_zzzz, dz_y_xxxx, dz_y_xxxy,\
                                     dz_y_xxxz, dz_y_xxyy, dz_y_xxyz, dz_y_xxzz,\
                                     dz_y_xyyy, dz_y_xyyz, dz_y_xyzz, dz_y_xzzz,\
                                     dz_y_yyyy, dz_y_yyyz, dz_y_yyzz, dz_y_yzzz,\
                                     dz_y_zzzz, dz_z_xxxx, dz_z_xxxy, dz_z_xxxz,\
                                     dz_z_xxyy, dz_z_xxyz, dz_z_xxzz, dz_z_xyyy,\
                                     dz_z_xyyz, dz_z_xyzz, dz_z_xzzz, dz_z_yyyy,\
                                     dz_z_yyyz, dz_z_yyzz, dz_z_yzzz, dz_z_zzzz,\
                                     dx_0_xxxx, dx_0_xxxy, dx_0_xxxz, dx_0_xxyy,\
                                     dx_0_xxyz, dx_0_xxzz, dx_0_xyyy, dx_0_xyyz,\
                                     dx_0_xyzz, dx_0_xzzz, dx_0_yyyy, dx_0_yyyz,\
                                     dx_0_yyzz, dx_0_yzzz, dx_0_zzzz, dy_0_xxxx,\
                                     dy_0_xxxy, dy_0_xxxz, dy_0_xxyy, dy_0_xxyz,\
                                     dy_0_xxzz, dy_0_xyyy, dy_0_xyyz, dy_0_xyzz,\
                                     dy_0_xzzz, dy_0_yyyy, dy_0_yyyz, dy_0_yyzz,\
                                     dy_0_yzzz, dy_0_zzzz, dz_0_xxxx, dz_0_xxxy,\
                                     dz_0_xxxz, dz_0_xxyy, dz_0_xxyz, dz_0_xxzz,\
                                     dz_0_xyyy, dz_0_xyyz, dz_0_xyzz, dz_0_xzzz,\
                                     dz_0_yyyy, dz_0_yyyz, dz_0_yyzz, dz_0_yzzz,\
                                     dz_0_zzzz, dx_0_xxx, dx_0_xxy, dx_0_xxz, dx_0_xyy,\
                                     dx_0_xyz, dx_0_xzz, dx_0_yyy, dx_0_yyz, dx_0_yzz,\
                                     dx_0_zzz, dy_0_xxx, dy_0_xxy, dy_0_xxz, dy_0_xyy,\
                                     dy_0_xyz, dy_0_xzz, dy_0_yyy, dy_0_yyz, dy_0_yzz,\
                                     dy_0_zzz, dz_0_xxx, dz_0_xxy, dz_0_xxz, dz_0_xyy,\
                                     dz_0_xyz, dz_0_xzz, dz_0_yyy, dz_0_yyz, dz_0_yzz,\
                                     dz_0_zzz, s_0_xxxx, s_0_xxxy, s_0_xxxz, s_0_xxyy,\
                                     s_0_xxyz, s_0_xxzz, s_0_xyyy, s_0_xyyz, s_0_xyzz,\
                                     s_0_xzzz, s_0_yyyy, s_0_yyyz, s_0_yyzz, s_0_yzzz,\
                                     s_0_zzzz,  s_0_xx, s_0_xy, s_0_xz,\
                                     s_0_yy, s_0_yz, s_0_zz, s_0_xxx, s_0_xxy,\
                                     s_0_xxz, s_0_xyy, s_0_xyz, s_0_xzz, s_0_yyy,\
                                     s_0_yyz, s_0_yzz, s_0_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];
                
                // leading x component
                
                double fr = pbx[j];
                
                s_0_xxxx[j] = fr * s_0_xxx[j] + 3.0 * f2t * s_0_xx[j];
                
                s_0_xxxy[j] = fr * s_0_xxy[j] + 2.0 * f2t * s_0_xy[j];
                
                s_0_xxxz[j] = fr * s_0_xxz[j] + 2.0 * f2t * s_0_xz[j];
                
                s_0_xxyy[j] = fr * s_0_xyy[j] + f2t * s_0_yy[j];
                
                s_0_xxyz[j] = fr * s_0_xyz[j] + f2t * s_0_yz[j];
                
                s_0_xxzz[j] = fr * s_0_xzz[j] + f2t * s_0_zz[j];
                
                s_0_xyyy[j] = fr * s_0_yyy[j];
                
                s_0_xyyz[j] = fr * s_0_yyz[j];
                
                s_0_xyzz[j] = fr * s_0_yzz[j];
                
                s_0_xzzz[j] = fr * s_0_zzz[j];
                
                // leading y component
                
                fr = pby[j];
                
                s_0_yyyy[j] = fr * s_0_yyy[j] + 3.0 * f2t * s_0_yy[j];
                
                s_0_yyyz[j] = fr * s_0_yyz[j] + 2.0 * f2t * s_0_yz[j];
                
                s_0_yyzz[j] = fr * s_0_yzz[j] + f2t * s_0_zz[j];
                
                s_0_yzzz[j] = fr * s_0_zzz[j];
                
                // leading z component
                
                s_0_zzzz[j] = pbz[j] * s_0_zzz[j] + 3.0 * f2t * s_0_zz[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_x_xxxx[j] = fr * dx_0_xxxx[j] + f2t * (4.0 * dx_0_xxx[j] + s_0_xxxx[j]);

                dy_x_xxxx[j] = fr * dy_0_xxxx[j] + f2t * 4.0 * dy_0_xxx[j];

                dz_x_xxxx[j] = fr * dz_0_xxxx[j] + f2t * 4.0 * dz_0_xxx[j];

                dx_x_xxxy[j] = fr * dx_0_xxxy[j] + f2t * (3.0 * dx_0_xxy[j] + s_0_xxxy[j]);

                dy_x_xxxy[j] = fr * dy_0_xxxy[j] + f2t * 3.0 * dy_0_xxy[j];

                dz_x_xxxy[j] = fr * dz_0_xxxy[j] + f2t * 3.0 * dz_0_xxy[j];

                dx_x_xxxz[j] = fr * dx_0_xxxz[j] + f2t * (3.0 * dx_0_xxz[j] + s_0_xxxz[j]);

                dy_x_xxxz[j] = fr * dy_0_xxxz[j] + f2t * 3.0 * dy_0_xxz[j];

                dz_x_xxxz[j] = fr * dz_0_xxxz[j] + f2t * 3.0 * dz_0_xxz[j];

                dx_x_xxyy[j] = fr * dx_0_xxyy[j] + f2t * (2.0 * dx_0_xyy[j] + s_0_xxyy[j]);

                dy_x_xxyy[j] = fr * dy_0_xxyy[j] + f2t * 2.0 * dy_0_xyy[j];

                dz_x_xxyy[j] = fr * dz_0_xxyy[j] + f2t * 2.0 * dz_0_xyy[j];

                dx_x_xxyz[j] = fr * dx_0_xxyz[j] + f2t * (2.0 * dx_0_xyz[j] + s_0_xxyz[j]);

                dy_x_xxyz[j] = fr * dy_0_xxyz[j] + f2t * 2.0 * dy_0_xyz[j];

                dz_x_xxyz[j] = fr * dz_0_xxyz[j] + f2t * 2.0 * dz_0_xyz[j];

                dx_x_xxzz[j] = fr * dx_0_xxzz[j] + f2t * (2.0 * dx_0_xzz[j] + s_0_xxzz[j]);

                dy_x_xxzz[j] = fr * dy_0_xxzz[j] + f2t * 2.0 * dy_0_xzz[j];

                dz_x_xxzz[j] = fr * dz_0_xxzz[j] + f2t * 2.0 * dz_0_xzz[j];

                dx_x_xyyy[j] = fr * dx_0_xyyy[j] + f2t * (dx_0_yyy[j] + s_0_xyyy[j]);

                dy_x_xyyy[j] = fr * dy_0_xyyy[j] + f2t * dy_0_yyy[j];

                dz_x_xyyy[j] = fr * dz_0_xyyy[j] + f2t * dz_0_yyy[j];

                dx_x_xyyz[j] = fr * dx_0_xyyz[j] + f2t * (dx_0_yyz[j] + s_0_xyyz[j]);

                dy_x_xyyz[j] = fr * dy_0_xyyz[j] + f2t * dy_0_yyz[j];

                dz_x_xyyz[j] = fr * dz_0_xyyz[j] + f2t * dz_0_yyz[j];

                dx_x_xyzz[j] = fr * dx_0_xyzz[j] + f2t * (dx_0_yzz[j] + s_0_xyzz[j]);

                dy_x_xyzz[j] = fr * dy_0_xyzz[j] + f2t * dy_0_yzz[j];

                dz_x_xyzz[j] = fr * dz_0_xyzz[j] + f2t * dz_0_yzz[j];

                dx_x_xzzz[j] = fr * dx_0_xzzz[j] + f2t * (dx_0_zzz[j] + s_0_xzzz[j]);

                dy_x_xzzz[j] = fr * dy_0_xzzz[j] + f2t * dy_0_zzz[j];

                dz_x_xzzz[j] = fr * dz_0_xzzz[j] + f2t * dz_0_zzz[j];

                dx_x_yyyy[j] = fr * dx_0_yyyy[j] + f2t * s_0_yyyy[j];

                dy_x_yyyy[j] = fr * dy_0_yyyy[j];

                dz_x_yyyy[j] = fr * dz_0_yyyy[j];

                dx_x_yyyz[j] = fr * dx_0_yyyz[j] + f2t * s_0_yyyz[j];

                dy_x_yyyz[j] = fr * dy_0_yyyz[j];

                dz_x_yyyz[j] = fr * dz_0_yyyz[j];

                dx_x_yyzz[j] = fr * dx_0_yyzz[j] + f2t * s_0_yyzz[j];

                dy_x_yyzz[j] = fr * dy_0_yyzz[j];

                dz_x_yyzz[j] = fr * dz_0_yyzz[j];

                dx_x_yzzz[j] = fr * dx_0_yzzz[j] + f2t * s_0_yzzz[j];

                dy_x_yzzz[j] = fr * dy_0_yzzz[j];

                dz_x_yzzz[j] = fr * dz_0_yzzz[j];

                dx_x_zzzz[j] = fr * dx_0_zzzz[j] + f2t * s_0_zzzz[j];

                dy_x_zzzz[j] = fr * dy_0_zzzz[j];

                dz_x_zzzz[j] = fr * dz_0_zzzz[j];

                // leading y component

                fr = pay[j];

                dx_y_xxxx[j] = fr * dx_0_xxxx[j];

                dy_y_xxxx[j] = fr * dy_0_xxxx[j] + f2t * s_0_xxxx[j];

                dz_y_xxxx[j] = fr * dz_0_xxxx[j];

                dx_y_xxxy[j] = fr * dx_0_xxxy[j] + f2t * dx_0_xxx[j];

                dy_y_xxxy[j] = fr * dy_0_xxxy[j] + f2t * (dy_0_xxx[j] + s_0_xxxy[j]);

                dz_y_xxxy[j] = fr * dz_0_xxxy[j] + f2t * dz_0_xxx[j];

                dx_y_xxxz[j] = fr * dx_0_xxxz[j];

                dy_y_xxxz[j] = fr * dy_0_xxxz[j] + f2t * s_0_xxxz[j];

                dz_y_xxxz[j] = fr * dz_0_xxxz[j];

                dx_y_xxyy[j] = fr * dx_0_xxyy[j] + f2t * 2.0 * dx_0_xxy[j];

                dy_y_xxyy[j] = fr * dy_0_xxyy[j] + f2t * (2.0 * dy_0_xxy[j] + s_0_xxyy[j]);

                dz_y_xxyy[j] = fr * dz_0_xxyy[j] + f2t * 2.0 * dz_0_xxy[j];

                dx_y_xxyz[j] = fr * dx_0_xxyz[j] + f2t * dx_0_xxz[j];

                dy_y_xxyz[j] = fr * dy_0_xxyz[j] + f2t * (dy_0_xxz[j] + s_0_xxyz[j]);

                dz_y_xxyz[j] = fr * dz_0_xxyz[j] + f2t * dz_0_xxz[j];

                dx_y_xxzz[j] = fr * dx_0_xxzz[j];

                dy_y_xxzz[j] = fr * dy_0_xxzz[j] + f2t * s_0_xxzz[j];

                dz_y_xxzz[j] = fr * dz_0_xxzz[j];

                dx_y_xyyy[j] = fr * dx_0_xyyy[j] + f2t * 3.0 * dx_0_xyy[j];

                dy_y_xyyy[j] = fr * dy_0_xyyy[j] + f2t * (3.0 * dy_0_xyy[j] + s_0_xyyy[j]);

                dz_y_xyyy[j] = fr * dz_0_xyyy[j] + f2t * 3.0 * dz_0_xyy[j];

                dx_y_xyyz[j] = fr * dx_0_xyyz[j] + f2t * 2.0 * dx_0_xyz[j];

                dy_y_xyyz[j] = fr * dy_0_xyyz[j] + f2t * (2.0 * dy_0_xyz[j] + s_0_xyyz[j]);

                dz_y_xyyz[j] = fr * dz_0_xyyz[j] + f2t * 2.0 * dz_0_xyz[j];

                dx_y_xyzz[j] = fr * dx_0_xyzz[j] + f2t * dx_0_xzz[j];

                dy_y_xyzz[j] = fr * dy_0_xyzz[j] + f2t * (dy_0_xzz[j] + s_0_xyzz[j]);

                dz_y_xyzz[j] = fr * dz_0_xyzz[j] + f2t * dz_0_xzz[j];

                dx_y_xzzz[j] = fr * dx_0_xzzz[j];

                dy_y_xzzz[j] = fr * dy_0_xzzz[j] + f2t * s_0_xzzz[j];

                dz_y_xzzz[j] = fr * dz_0_xzzz[j];

                dx_y_yyyy[j] = fr * dx_0_yyyy[j] + f2t * 4.0 * dx_0_yyy[j];

                dy_y_yyyy[j] = fr * dy_0_yyyy[j] + f2t * (4.0 * dy_0_yyy[j] + s_0_yyyy[j]);

                dz_y_yyyy[j] = fr * dz_0_yyyy[j] + f2t * 4.0 * dz_0_yyy[j];

                dx_y_yyyz[j] = fr * dx_0_yyyz[j] + f2t * 3.0 * dx_0_yyz[j];

                dy_y_yyyz[j] = fr * dy_0_yyyz[j] + f2t * (3.0 * dy_0_yyz[j] + s_0_yyyz[j]);

                dz_y_yyyz[j] = fr * dz_0_yyyz[j] + f2t * 3.0 * dz_0_yyz[j];

                dx_y_yyzz[j] = fr * dx_0_yyzz[j] + f2t * 2.0 * dx_0_yzz[j];

                dy_y_yyzz[j] = fr * dy_0_yyzz[j] + f2t * (2.0 * dy_0_yzz[j] + s_0_yyzz[j]);

                dz_y_yyzz[j] = fr * dz_0_yyzz[j] + f2t * 2.0 * dz_0_yzz[j];

                dx_y_yzzz[j] = fr * dx_0_yzzz[j] + f2t * dx_0_zzz[j];

                dy_y_yzzz[j] = fr * dy_0_yzzz[j] + f2t * (dy_0_zzz[j] + s_0_yzzz[j]);

                dz_y_yzzz[j] = fr * dz_0_yzzz[j] + f2t * dz_0_zzz[j];

                dx_y_zzzz[j] = fr * dx_0_zzzz[j];

                dy_y_zzzz[j] = fr * dy_0_zzzz[j] + f2t * s_0_zzzz[j];

                dz_y_zzzz[j] = fr * dz_0_zzzz[j];

                // leading z component

                fr = paz[j];

                dx_z_xxxx[j] = fr * dx_0_xxxx[j];

                dy_z_xxxx[j] = fr * dy_0_xxxx[j];

                dz_z_xxxx[j] = fr * dz_0_xxxx[j] + f2t * s_0_xxxx[j];

                dx_z_xxxy[j] = fr * dx_0_xxxy[j];

                dy_z_xxxy[j] = fr * dy_0_xxxy[j];

                dz_z_xxxy[j] = fr * dz_0_xxxy[j] + f2t * s_0_xxxy[j];

                dx_z_xxxz[j] = fr * dx_0_xxxz[j] + f2t * dx_0_xxx[j];

                dy_z_xxxz[j] = fr * dy_0_xxxz[j] + f2t * dy_0_xxx[j];

                dz_z_xxxz[j] = fr * dz_0_xxxz[j] + f2t * (dz_0_xxx[j] + s_0_xxxz[j]);

                dx_z_xxyy[j] = fr * dx_0_xxyy[j];

                dy_z_xxyy[j] = fr * dy_0_xxyy[j];

                dz_z_xxyy[j] = fr * dz_0_xxyy[j] + f2t * s_0_xxyy[j];

                dx_z_xxyz[j] = fr * dx_0_xxyz[j] + f2t * dx_0_xxy[j];

                dy_z_xxyz[j] = fr * dy_0_xxyz[j] + f2t * dy_0_xxy[j];

                dz_z_xxyz[j] = fr * dz_0_xxyz[j] + f2t * (dz_0_xxy[j] + s_0_xxyz[j]);

                dx_z_xxzz[j] = fr * dx_0_xxzz[j] + f2t * 2.0 * dx_0_xxz[j];

                dy_z_xxzz[j] = fr * dy_0_xxzz[j] + f2t * 2.0 * dy_0_xxz[j];

                dz_z_xxzz[j] = fr * dz_0_xxzz[j] + f2t * (2.0 * dz_0_xxz[j] + s_0_xxzz[j]);

                dx_z_xyyy[j] = fr * dx_0_xyyy[j];

                dy_z_xyyy[j] = fr * dy_0_xyyy[j];

                dz_z_xyyy[j] = fr * dz_0_xyyy[j] + f2t * s_0_xyyy[j];

                dx_z_xyyz[j] = fr * dx_0_xyyz[j] + f2t * dx_0_xyy[j];

                dy_z_xyyz[j] = fr * dy_0_xyyz[j] + f2t * dy_0_xyy[j];

                dz_z_xyyz[j] = fr * dz_0_xyyz[j] + f2t * (dz_0_xyy[j] + s_0_xyyz[j]);

                dx_z_xyzz[j] = fr * dx_0_xyzz[j] + f2t * 2.0 * dx_0_xyz[j];

                dy_z_xyzz[j] = fr * dy_0_xyzz[j] + f2t * 2.0 * dy_0_xyz[j];

                dz_z_xyzz[j] = fr * dz_0_xyzz[j] + f2t * (2.0 * dz_0_xyz[j] + s_0_xyzz[j]);

                dx_z_xzzz[j] = fr * dx_0_xzzz[j] + f2t * 3.0 * dx_0_xzz[j];

                dy_z_xzzz[j] = fr * dy_0_xzzz[j] + f2t * 3.0 * dy_0_xzz[j];

                dz_z_xzzz[j] = fr * dz_0_xzzz[j] + f2t * (3.0 * dz_0_xzz[j] + s_0_xzzz[j]);

                dx_z_yyyy[j] = fr * dx_0_yyyy[j];

                dy_z_yyyy[j] = fr * dy_0_yyyy[j];

                dz_z_yyyy[j] = fr * dz_0_yyyy[j] + f2t * s_0_yyyy[j];

                dx_z_yyyz[j] = fr * dx_0_yyyz[j] + f2t * dx_0_yyy[j];

                dy_z_yyyz[j] = fr * dy_0_yyyz[j] + f2t * dy_0_yyy[j];

                dz_z_yyyz[j] = fr * dz_0_yyyz[j] + f2t * (dz_0_yyy[j] + s_0_yyyz[j]);

                dx_z_yyzz[j] = fr * dx_0_yyzz[j] + f2t * 2.0 * dx_0_yyz[j];

                dy_z_yyzz[j] = fr * dy_0_yyzz[j] + f2t * 2.0 * dy_0_yyz[j];

                dz_z_yyzz[j] = fr * dz_0_yyzz[j] + f2t * (2.0 * dz_0_yyz[j] + s_0_yyzz[j]);

                dx_z_yzzz[j] = fr * dx_0_yzzz[j] + f2t * 3.0 * dx_0_yzz[j];

                dy_z_yzzz[j] = fr * dy_0_yzzz[j] + f2t * 3.0 * dy_0_yzz[j];

                dz_z_yzzz[j] = fr * dz_0_yzzz[j] + f2t * (3.0 * dz_0_yzz[j] + s_0_yzzz[j]);

                dx_z_zzzz[j] = fr * dx_0_zzzz[j] + f2t * 4.0 * dx_0_zzz[j];

                dy_z_zzzz[j] = fr * dy_0_zzzz[j] + f2t * 4.0 * dy_0_zzz[j];

                dz_z_zzzz[j] = fr * dz_0_zzzz[j] + f2t * (4.0 * dz_0_zzz[j] + s_0_zzzz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForGP(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {4, 1, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {4, 1, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {3, 1, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 1, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 0, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 1, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 1, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 1, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 0, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (G|M|P) integrals

            auto dx_xxxx_x = primBuffer.data(doff + 45 * idx);

            auto dx_xxxx_y = primBuffer.data(doff + 45 * idx + 1);

            auto dx_xxxx_z = primBuffer.data(doff + 45 * idx + 2);

            auto dx_xxxy_x = primBuffer.data(doff + 45 * idx + 3);

            auto dx_xxxy_y = primBuffer.data(doff + 45 * idx + 4);

            auto dx_xxxy_z = primBuffer.data(doff + 45 * idx + 5);

            auto dx_xxxz_x = primBuffer.data(doff + 45 * idx + 6);

            auto dx_xxxz_y = primBuffer.data(doff + 45 * idx + 7);

            auto dx_xxxz_z = primBuffer.data(doff + 45 * idx + 8);

            auto dx_xxyy_x = primBuffer.data(doff + 45 * idx + 9);

            auto dx_xxyy_y = primBuffer.data(doff + 45 * idx + 10);

            auto dx_xxyy_z = primBuffer.data(doff + 45 * idx + 11);

            auto dx_xxyz_x = primBuffer.data(doff + 45 * idx + 12);

            auto dx_xxyz_y = primBuffer.data(doff + 45 * idx + 13);

            auto dx_xxyz_z = primBuffer.data(doff + 45 * idx + 14);

            auto dx_xxzz_x = primBuffer.data(doff + 45 * idx + 15);

            auto dx_xxzz_y = primBuffer.data(doff + 45 * idx + 16);

            auto dx_xxzz_z = primBuffer.data(doff + 45 * idx + 17);

            auto dx_xyyy_x = primBuffer.data(doff + 45 * idx + 18);

            auto dx_xyyy_y = primBuffer.data(doff + 45 * idx + 19);

            auto dx_xyyy_z = primBuffer.data(doff + 45 * idx + 20);

            auto dx_xyyz_x = primBuffer.data(doff + 45 * idx + 21);

            auto dx_xyyz_y = primBuffer.data(doff + 45 * idx + 22);

            auto dx_xyyz_z = primBuffer.data(doff + 45 * idx + 23);

            auto dx_xyzz_x = primBuffer.data(doff + 45 * idx + 24);

            auto dx_xyzz_y = primBuffer.data(doff + 45 * idx + 25);

            auto dx_xyzz_z = primBuffer.data(doff + 45 * idx + 26);

            auto dx_xzzz_x = primBuffer.data(doff + 45 * idx + 27);

            auto dx_xzzz_y = primBuffer.data(doff + 45 * idx + 28);

            auto dx_xzzz_z = primBuffer.data(doff + 45 * idx + 29);

            auto dx_yyyy_x = primBuffer.data(doff + 45 * idx + 30);

            auto dx_yyyy_y = primBuffer.data(doff + 45 * idx + 31);

            auto dx_yyyy_z = primBuffer.data(doff + 45 * idx + 32);

            auto dx_yyyz_x = primBuffer.data(doff + 45 * idx + 33);

            auto dx_yyyz_y = primBuffer.data(doff + 45 * idx + 34);

            auto dx_yyyz_z = primBuffer.data(doff + 45 * idx + 35);

            auto dx_yyzz_x = primBuffer.data(doff + 45 * idx + 36);

            auto dx_yyzz_y = primBuffer.data(doff + 45 * idx + 37);

            auto dx_yyzz_z = primBuffer.data(doff + 45 * idx + 38);

            auto dx_yzzz_x = primBuffer.data(doff + 45 * idx + 39);

            auto dx_yzzz_y = primBuffer.data(doff + 45 * idx + 40);

            auto dx_yzzz_z = primBuffer.data(doff + 45 * idx + 41);

            auto dx_zzzz_x = primBuffer.data(doff + 45 * idx + 42);

            auto dx_zzzz_y = primBuffer.data(doff + 45 * idx + 43);

            auto dx_zzzz_z = primBuffer.data(doff + 45 * idx + 44);

            auto dy_xxxx_x = primBuffer.data(doff + 45 * bdim + 45 * idx);

            auto dy_xxxx_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 1);

            auto dy_xxxx_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 2);

            auto dy_xxxy_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 3);

            auto dy_xxxy_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 4);

            auto dy_xxxy_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 5);

            auto dy_xxxz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 6);

            auto dy_xxxz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 7);

            auto dy_xxxz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 8);

            auto dy_xxyy_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 9);

            auto dy_xxyy_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 10);

            auto dy_xxyy_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 11);

            auto dy_xxyz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 12);

            auto dy_xxyz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 13);

            auto dy_xxyz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 14);

            auto dy_xxzz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 15);

            auto dy_xxzz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 16);

            auto dy_xxzz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 17);

            auto dy_xyyy_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 18);

            auto dy_xyyy_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 19);

            auto dy_xyyy_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 20);

            auto dy_xyyz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 21);

            auto dy_xyyz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 22);

            auto dy_xyyz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 23);

            auto dy_xyzz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 24);

            auto dy_xyzz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 25);

            auto dy_xyzz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 26);

            auto dy_xzzz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 27);

            auto dy_xzzz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 28);

            auto dy_xzzz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 29);

            auto dy_yyyy_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 30);

            auto dy_yyyy_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 31);

            auto dy_yyyy_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 32);

            auto dy_yyyz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 33);

            auto dy_yyyz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 34);

            auto dy_yyyz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 35);

            auto dy_yyzz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 36);

            auto dy_yyzz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 37);

            auto dy_yyzz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 38);

            auto dy_yzzz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 39);

            auto dy_yzzz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 40);

            auto dy_yzzz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 41);

            auto dy_zzzz_x = primBuffer.data(doff + 45 * bdim + 45 * idx + 42);

            auto dy_zzzz_y = primBuffer.data(doff + 45 * bdim + 45 * idx + 43);

            auto dy_zzzz_z = primBuffer.data(doff + 45 * bdim + 45 * idx + 44);

            auto dz_xxxx_x = primBuffer.data(doff + 90 * bdim + 45 * idx);

            auto dz_xxxx_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 1);

            auto dz_xxxx_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 2);

            auto dz_xxxy_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 3);

            auto dz_xxxy_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 4);

            auto dz_xxxy_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 5);

            auto dz_xxxz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 6);

            auto dz_xxxz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 7);

            auto dz_xxxz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 8);

            auto dz_xxyy_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 9);

            auto dz_xxyy_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 10);

            auto dz_xxyy_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 11);

            auto dz_xxyz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 12);

            auto dz_xxyz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 13);

            auto dz_xxyz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 14);

            auto dz_xxzz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 15);

            auto dz_xxzz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 16);

            auto dz_xxzz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 17);

            auto dz_xyyy_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 18);

            auto dz_xyyy_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 19);

            auto dz_xyyy_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 20);

            auto dz_xyyz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 21);

            auto dz_xyyz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 22);

            auto dz_xyyz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 23);

            auto dz_xyzz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 24);

            auto dz_xyzz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 25);

            auto dz_xyzz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 26);

            auto dz_xzzz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 27);

            auto dz_xzzz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 28);

            auto dz_xzzz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 29);

            auto dz_yyyy_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 30);

            auto dz_yyyy_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 31);

            auto dz_yyyy_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 32);

            auto dz_yyyz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 33);

            auto dz_yyyz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 34);

            auto dz_yyyz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 35);

            auto dz_yyzz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 36);

            auto dz_yyzz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 37);

            auto dz_yyzz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 38);

            auto dz_yzzz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 39);

            auto dz_yzzz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 40);

            auto dz_yzzz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 41);

            auto dz_zzzz_x = primBuffer.data(doff + 90 * bdim + 45 * idx + 42);

            auto dz_zzzz_y = primBuffer.data(doff + 90 * bdim + 45 * idx + 43);

            auto dz_zzzz_z = primBuffer.data(doff + 90 * bdim + 45 * idx + 44);

            // set up pointers to (F|M|P) integrals

            auto dx_xxx_x = primBuffer.data(d1off + 30 * idx);

            auto dx_xxx_y = primBuffer.data(d1off + 30 * idx + 1);

            auto dx_xxx_z = primBuffer.data(d1off + 30 * idx + 2);

            auto dx_xxy_x = primBuffer.data(d1off + 30 * idx + 3);

            auto dx_xxy_y = primBuffer.data(d1off + 30 * idx + 4);

            auto dx_xxy_z = primBuffer.data(d1off + 30 * idx + 5);

            auto dx_xxz_x = primBuffer.data(d1off + 30 * idx + 6);

            auto dx_xxz_y = primBuffer.data(d1off + 30 * idx + 7);

            auto dx_xxz_z = primBuffer.data(d1off + 30 * idx + 8);

            auto dx_xyy_x = primBuffer.data(d1off + 30 * idx + 9);

            auto dx_xyy_y = primBuffer.data(d1off + 30 * idx + 10);

            auto dx_xyy_z = primBuffer.data(d1off + 30 * idx + 11);

            auto dx_xyz_x = primBuffer.data(d1off + 30 * idx + 12);

            auto dx_xyz_y = primBuffer.data(d1off + 30 * idx + 13);

            auto dx_xyz_z = primBuffer.data(d1off + 30 * idx + 14);

            auto dx_xzz_x = primBuffer.data(d1off + 30 * idx + 15);

            auto dx_xzz_y = primBuffer.data(d1off + 30 * idx + 16);

            auto dx_xzz_z = primBuffer.data(d1off + 30 * idx + 17);

            auto dx_yyy_x = primBuffer.data(d1off + 30 * idx + 18);

            auto dx_yyy_y = primBuffer.data(d1off + 30 * idx + 19);

            auto dx_yyy_z = primBuffer.data(d1off + 30 * idx + 20);

            auto dx_yyz_x = primBuffer.data(d1off + 30 * idx + 21);

            auto dx_yyz_y = primBuffer.data(d1off + 30 * idx + 22);

            auto dx_yyz_z = primBuffer.data(d1off + 30 * idx + 23);

            auto dx_yzz_x = primBuffer.data(d1off + 30 * idx + 24);

            auto dx_yzz_y = primBuffer.data(d1off + 30 * idx + 25);

            auto dx_yzz_z = primBuffer.data(d1off + 30 * idx + 26);

            auto dx_zzz_x = primBuffer.data(d1off + 30 * idx + 27);

            auto dx_zzz_y = primBuffer.data(d1off + 30 * idx + 28);

            auto dx_zzz_z = primBuffer.data(d1off + 30 * idx + 29);

            auto dy_xxx_x = primBuffer.data(d1off + 30 * bdim + 30 * idx);

            auto dy_xxx_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 1);

            auto dy_xxx_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 2);

            auto dy_xxy_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 3);

            auto dy_xxy_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 4);

            auto dy_xxy_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 5);

            auto dy_xxz_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 6);

            auto dy_xxz_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 7);

            auto dy_xxz_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 8);

            auto dy_xyy_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 9);

            auto dy_xyy_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 10);

            auto dy_xyy_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 11);

            auto dy_xyz_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 12);

            auto dy_xyz_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 13);

            auto dy_xyz_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 14);

            auto dy_xzz_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 15);

            auto dy_xzz_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 16);

            auto dy_xzz_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 17);

            auto dy_yyy_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 18);

            auto dy_yyy_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 19);

            auto dy_yyy_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 20);

            auto dy_yyz_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 21);

            auto dy_yyz_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 22);

            auto dy_yyz_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 23);

            auto dy_yzz_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 24);

            auto dy_yzz_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 25);

            auto dy_yzz_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 26);

            auto dy_zzz_x = primBuffer.data(d1off + 30 * bdim + 30 * idx + 27);

            auto dy_zzz_y = primBuffer.data(d1off + 30 * bdim + 30 * idx + 28);

            auto dy_zzz_z = primBuffer.data(d1off + 30 * bdim + 30 * idx + 29);

            auto dz_xxx_x = primBuffer.data(d1off + 60 * bdim + 30 * idx);

            auto dz_xxx_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 1);

            auto dz_xxx_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 2);

            auto dz_xxy_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 3);

            auto dz_xxy_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 4);

            auto dz_xxy_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 5);

            auto dz_xxz_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 6);

            auto dz_xxz_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 7);

            auto dz_xxz_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 8);

            auto dz_xyy_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 9);

            auto dz_xyy_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 10);

            auto dz_xyy_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 11);

            auto dz_xyz_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 12);

            auto dz_xyz_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 13);

            auto dz_xyz_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 14);

            auto dz_xzz_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 15);

            auto dz_xzz_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 16);

            auto dz_xzz_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 17);

            auto dz_yyy_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 18);

            auto dz_yyy_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 19);

            auto dz_yyy_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 20);

            auto dz_yyz_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 21);

            auto dz_yyz_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 22);

            auto dz_yyz_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 23);

            auto dz_yzz_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 24);

            auto dz_yzz_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 25);

            auto dz_yzz_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 26);

            auto dz_zzz_x = primBuffer.data(d1off + 60 * bdim + 30 * idx + 27);

            auto dz_zzz_y = primBuffer.data(d1off + 60 * bdim + 30 * idx + 28);

            auto dz_zzz_z = primBuffer.data(d1off + 60 * bdim + 30 * idx + 29);

            // set up pointers to (D|M|P) integrals

            auto dx_xx_x = primBuffer.data(d2off + 18 * idx);

            auto dx_xx_y = primBuffer.data(d2off + 18 * idx + 1);

            auto dx_xx_z = primBuffer.data(d2off + 18 * idx + 2);

            auto dx_xy_x = primBuffer.data(d2off + 18 * idx + 3);

            auto dx_xy_y = primBuffer.data(d2off + 18 * idx + 4);

            auto dx_xy_z = primBuffer.data(d2off + 18 * idx + 5);

            auto dx_xz_x = primBuffer.data(d2off + 18 * idx + 6);

            auto dx_xz_y = primBuffer.data(d2off + 18 * idx + 7);

            auto dx_xz_z = primBuffer.data(d2off + 18 * idx + 8);

            auto dx_yy_x = primBuffer.data(d2off + 18 * idx + 9);

            auto dx_yy_y = primBuffer.data(d2off + 18 * idx + 10);

            auto dx_yy_z = primBuffer.data(d2off + 18 * idx + 11);

            auto dx_yz_x = primBuffer.data(d2off + 18 * idx + 12);

            auto dx_yz_y = primBuffer.data(d2off + 18 * idx + 13);

            auto dx_yz_z = primBuffer.data(d2off + 18 * idx + 14);

            auto dx_zz_x = primBuffer.data(d2off + 18 * idx + 15);

            auto dx_zz_y = primBuffer.data(d2off + 18 * idx + 16);

            auto dx_zz_z = primBuffer.data(d2off + 18 * idx + 17);

            auto dy_xx_x = primBuffer.data(d2off + 18 * bdim + 18 * idx);

            auto dy_xx_y = primBuffer.data(d2off + 18 * bdim + 18 * idx + 1);

            auto dy_xx_z = primBuffer.data(d2off + 18 * bdim + 18 * idx + 2);

            auto dy_xy_x = primBuffer.data(d2off + 18 * bdim + 18 * idx + 3);

            auto dy_xy_y = primBuffer.data(d2off + 18 * bdim + 18 * idx + 4);

            auto dy_xy_z = primBuffer.data(d2off + 18 * bdim + 18 * idx + 5);

            auto dy_xz_x = primBuffer.data(d2off + 18 * bdim + 18 * idx + 6);

            auto dy_xz_y = primBuffer.data(d2off + 18 * bdim + 18 * idx + 7);

            auto dy_xz_z = primBuffer.data(d2off + 18 * bdim + 18 * idx + 8);

            auto dy_yy_x = primBuffer.data(d2off + 18 * bdim + 18 * idx + 9);

            auto dy_yy_y = primBuffer.data(d2off + 18 * bdim + 18 * idx + 10);

            auto dy_yy_z = primBuffer.data(d2off + 18 * bdim + 18 * idx + 11);

            auto dy_yz_x = primBuffer.data(d2off + 18 * bdim + 18 * idx + 12);

            auto dy_yz_y = primBuffer.data(d2off + 18 * bdim + 18 * idx + 13);

            auto dy_yz_z = primBuffer.data(d2off + 18 * bdim + 18 * idx + 14);

            auto dy_zz_x = primBuffer.data(d2off + 18 * bdim + 18 * idx + 15);

            auto dy_zz_y = primBuffer.data(d2off + 18 * bdim + 18 * idx + 16);

            auto dy_zz_z = primBuffer.data(d2off + 18 * bdim + 18 * idx + 17);

            auto dz_xx_x = primBuffer.data(d2off + 36 * bdim + 18 * idx);

            auto dz_xx_y = primBuffer.data(d2off + 36 * bdim + 18 * idx + 1);

            auto dz_xx_z = primBuffer.data(d2off + 36 * bdim + 18 * idx + 2);

            auto dz_xy_x = primBuffer.data(d2off + 36 * bdim + 18 * idx + 3);

            auto dz_xy_y = primBuffer.data(d2off + 36 * bdim + 18 * idx + 4);

            auto dz_xy_z = primBuffer.data(d2off + 36 * bdim + 18 * idx + 5);

            auto dz_xz_x = primBuffer.data(d2off + 36 * bdim + 18 * idx + 6);

            auto dz_xz_y = primBuffer.data(d2off + 36 * bdim + 18 * idx + 7);

            auto dz_xz_z = primBuffer.data(d2off + 36 * bdim + 18 * idx + 8);

            auto dz_yy_x = primBuffer.data(d2off + 36 * bdim + 18 * idx + 9);

            auto dz_yy_y = primBuffer.data(d2off + 36 * bdim + 18 * idx + 10);

            auto dz_yy_z = primBuffer.data(d2off + 36 * bdim + 18 * idx + 11);

            auto dz_yz_x = primBuffer.data(d2off + 36 * bdim + 18 * idx + 12);

            auto dz_yz_y = primBuffer.data(d2off + 36 * bdim + 18 * idx + 13);

            auto dz_yz_z = primBuffer.data(d2off + 36 * bdim + 18 * idx + 14);

            auto dz_zz_x = primBuffer.data(d2off + 36 * bdim + 18 * idx + 15);

            auto dz_zz_y = primBuffer.data(d2off + 36 * bdim + 18 * idx + 16);

            auto dz_zz_z = primBuffer.data(d2off + 36 * bdim + 18 * idx + 17);

            // set up pointers to (F|M|S) integrals

            auto dx_xxx_0 = primBuffer.data(dkoff + 10 * idx);

            auto dx_xxy_0 = primBuffer.data(dkoff + 10 * idx + 1);

            auto dx_xxz_0 = primBuffer.data(dkoff + 10 * idx + 2);

            auto dx_xyy_0 = primBuffer.data(dkoff + 10 * idx + 3);

            auto dx_xyz_0 = primBuffer.data(dkoff + 10 * idx + 4);

            auto dx_xzz_0 = primBuffer.data(dkoff + 10 * idx + 5);

            auto dx_yyy_0 = primBuffer.data(dkoff + 10 * idx + 6);

            auto dx_yyz_0 = primBuffer.data(dkoff + 10 * idx + 7);

            auto dx_yzz_0 = primBuffer.data(dkoff + 10 * idx + 8);

            auto dx_zzz_0 = primBuffer.data(dkoff + 10 * idx + 9);

            auto dy_xxx_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx);

            auto dy_xxy_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 1);

            auto dy_xxz_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 2);

            auto dy_xyy_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 3);

            auto dy_xyz_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 4);

            auto dy_xzz_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 5);

            auto dy_yyy_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 6);

            auto dy_yyz_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 7);

            auto dy_yzz_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 8);

            auto dy_zzz_0 = primBuffer.data(dkoff + 10 * bdim + 10 * idx + 9);

            auto dz_xxx_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx);

            auto dz_xxy_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 1);

            auto dz_xxz_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 2);

            auto dz_xyy_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 3);

            auto dz_xyz_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 4);

            auto dz_xzz_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 5);

            auto dz_yyy_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 6);

            auto dz_yyz_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 7);

            auto dz_yzz_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 8);

            auto dz_zzz_0 = primBuffer.data(dkoff + 20 * bdim + 10 * idx + 9);

            // set up pointers to (F|P) integrals

            auto s_xxx_x = primBuffer.data(soff + 30 * idx);

            auto s_xxx_y = primBuffer.data(soff + 30 * idx + 1);

            auto s_xxx_z = primBuffer.data(soff + 30 * idx + 2);

            auto s_xxy_x = primBuffer.data(soff + 30 * idx + 3);

            auto s_xxy_y = primBuffer.data(soff + 30 * idx + 4);

            auto s_xxy_z = primBuffer.data(soff + 30 * idx + 5);

            auto s_xxz_x = primBuffer.data(soff + 30 * idx + 6);

            auto s_xxz_y = primBuffer.data(soff + 30 * idx + 7);

            auto s_xxz_z = primBuffer.data(soff + 30 * idx + 8);

            auto s_xyy_x = primBuffer.data(soff + 30 * idx + 9);

            auto s_xyy_y = primBuffer.data(soff + 30 * idx + 10);

            auto s_xyy_z = primBuffer.data(soff + 30 * idx + 11);

            auto s_xyz_x = primBuffer.data(soff + 30 * idx + 12);

            auto s_xyz_y = primBuffer.data(soff + 30 * idx + 13);

            auto s_xyz_z = primBuffer.data(soff + 30 * idx + 14);

            auto s_xzz_x = primBuffer.data(soff + 30 * idx + 15);

            auto s_xzz_y = primBuffer.data(soff + 30 * idx + 16);

            auto s_xzz_z = primBuffer.data(soff + 30 * idx + 17);

            auto s_yyy_x = primBuffer.data(soff + 30 * idx + 18);

            auto s_yyy_y = primBuffer.data(soff + 30 * idx + 19);

            auto s_yyy_z = primBuffer.data(soff + 30 * idx + 20);

            auto s_yyz_x = primBuffer.data(soff + 30 * idx + 21);

            auto s_yyz_y = primBuffer.data(soff + 30 * idx + 22);

            auto s_yyz_z = primBuffer.data(soff + 30 * idx + 23);

            auto s_yzz_x = primBuffer.data(soff + 30 * idx + 24);

            auto s_yzz_y = primBuffer.data(soff + 30 * idx + 25);

            auto s_yzz_z = primBuffer.data(soff + 30 * idx + 26);

            auto s_zzz_x = primBuffer.data(soff + 30 * idx + 27);

            auto s_zzz_y = primBuffer.data(soff + 30 * idx + 28);

            auto s_zzz_z = primBuffer.data(soff + 30 * idx + 29);

            // set up pointers to (D|P) integrals

            auto s_xx_x = primBuffer.data(s1off + 18 * idx);

            auto s_xx_y = primBuffer.data(s1off + 18 * idx + 1);

            auto s_xx_z = primBuffer.data(s1off + 18 * idx + 2);

            auto s_xy_x = primBuffer.data(s1off + 18 * idx + 3);

            auto s_xy_y = primBuffer.data(s1off + 18 * idx + 4);

            auto s_xy_z = primBuffer.data(s1off + 18 * idx + 5);

            auto s_xz_x = primBuffer.data(s1off + 18 * idx + 6);

            auto s_xz_y = primBuffer.data(s1off + 18 * idx + 7);

            auto s_xz_z = primBuffer.data(s1off + 18 * idx + 8);

            auto s_yy_x = primBuffer.data(s1off + 18 * idx + 9);

            auto s_yy_y = primBuffer.data(s1off + 18 * idx + 10);

            auto s_yy_z = primBuffer.data(s1off + 18 * idx + 11);

            auto s_yz_x = primBuffer.data(s1off + 18 * idx + 12);

            auto s_yz_y = primBuffer.data(s1off + 18 * idx + 13);

            auto s_yz_z = primBuffer.data(s1off + 18 * idx + 14);

            auto s_zz_x = primBuffer.data(s1off + 18 * idx + 15);

            auto s_zz_y = primBuffer.data(s1off + 18 * idx + 16);

            auto s_zz_z = primBuffer.data(s1off + 18 * idx + 17);

            // set up pointers to (P|P) integrals

            auto s_x_x = primBuffer.data(s2off + 9 * idx);

            auto s_x_y = primBuffer.data(s2off + 9 * idx + 1);

            auto s_x_z = primBuffer.data(s2off + 9 * idx + 2);

            auto s_y_x = primBuffer.data(s2off + 9 * idx + 3);

            auto s_y_y = primBuffer.data(s2off + 9 * idx + 4);

            auto s_y_z = primBuffer.data(s2off + 9 * idx + 5);

            auto s_z_x = primBuffer.data(s2off + 9 * idx + 6);

            auto s_z_y = primBuffer.data(s2off + 9 * idx + 7);

            auto s_z_z = primBuffer.data(s2off + 9 * idx + 8);

            // set up pointers to (D|S) integrals

            auto s_xx_0 = primBuffer.data(skoff + 6 * idx);

            auto s_xy_0 = primBuffer.data(skoff + 6 * idx + 1);

            auto s_xz_0 = primBuffer.data(skoff + 6 * idx + 2);

            auto s_yy_0 = primBuffer.data(skoff + 6 * idx + 3);

            auto s_yz_0 = primBuffer.data(skoff + 6 * idx + 4);

            auto s_zz_0 = primBuffer.data(skoff + 6 * idx + 5);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxxx_x, dx_xxxx_y, dx_xxxx_z,\
                                     dx_xxxy_x, dx_xxxy_y, dx_xxxy_z, dx_xxxz_x,\
                                     dx_xxxz_y, dx_xxxz_z, dx_xxyy_x, dx_xxyy_y,\
                                     dx_xxyy_z, dx_xxyz_x, dx_xxyz_y, dx_xxyz_z,\
                                     dx_xxzz_x, dx_xxzz_y, dx_xxzz_z, dx_xyyy_x,\
                                     dx_xyyy_y, dx_xyyy_z, dx_xyyz_x, dx_xyyz_y,\
                                     dx_xyyz_z, dx_xyzz_x, dx_xyzz_y, dx_xyzz_z,\
                                     dx_xzzz_x, dx_xzzz_y, dx_xzzz_z, dx_yyyy_x,\
                                     dx_yyyy_y, dx_yyyy_z, dx_yyyz_x, dx_yyyz_y,\
                                     dx_yyyz_z, dx_yyzz_x, dx_yyzz_y, dx_yyzz_z,\
                                     dx_yzzz_x, dx_yzzz_y, dx_yzzz_z, dx_zzzz_x,\
                                     dx_zzzz_y, dx_zzzz_z, dy_xxxx_x, dy_xxxx_y,\
                                     dy_xxxx_z, dy_xxxy_x, dy_xxxy_y, dy_xxxy_z,\
                                     dy_xxxz_x, dy_xxxz_y, dy_xxxz_z, dy_xxyy_x,\
                                     dy_xxyy_y, dy_xxyy_z, dy_xxyz_x, dy_xxyz_y,\
                                     dy_xxyz_z, dy_xxzz_x, dy_xxzz_y, dy_xxzz_z,\
                                     dy_xyyy_x, dy_xyyy_y, dy_xyyy_z, dy_xyyz_x,\
                                     dy_xyyz_y, dy_xyyz_z, dy_xyzz_x, dy_xyzz_y,\
                                     dy_xyzz_z, dy_xzzz_x, dy_xzzz_y, dy_xzzz_z,\
                                     dy_yyyy_x, dy_yyyy_y, dy_yyyy_z, dy_yyyz_x,\
                                     dy_yyyz_y, dy_yyyz_z, dy_yyzz_x, dy_yyzz_y,\
                                     dy_yyzz_z, dy_yzzz_x, dy_yzzz_y, dy_yzzz_z,\
                                     dy_zzzz_x, dy_zzzz_y, dy_zzzz_z, dz_xxxx_x,\
                                     dz_xxxx_y, dz_xxxx_z, dz_xxxy_x, dz_xxxy_y,\
                                     dz_xxxy_z, dz_xxxz_x, dz_xxxz_y, dz_xxxz_z,\
                                     dz_xxyy_x, dz_xxyy_y, dz_xxyy_z, dz_xxyz_x,\
                                     dz_xxyz_y, dz_xxyz_z, dz_xxzz_x, dz_xxzz_y,\
                                     dz_xxzz_z, dz_xyyy_x, dz_xyyy_y, dz_xyyy_z,\
                                     dz_xyyz_x, dz_xyyz_y, dz_xyyz_z, dz_xyzz_x,\
                                     dz_xyzz_y, dz_xyzz_z, dz_xzzz_x, dz_xzzz_y,\
                                     dz_xzzz_z, dz_yyyy_x, dz_yyyy_y, dz_yyyy_z,\
                                     dz_yyyz_x, dz_yyyz_y, dz_yyyz_z, dz_yyzz_x,\
                                     dz_yyzz_y, dz_yyzz_z, dz_yzzz_x, dz_yzzz_y,\
                                     dz_yzzz_z, dz_zzzz_x, dz_zzzz_y, dz_zzzz_z,\
                                     dx_xxx_x, dx_xxx_y, dx_xxx_z, dx_xxy_x, dx_xxy_y,\
                                     dx_xxy_z, dx_xxz_x, dx_xxz_y, dx_xxz_z, dx_xyy_x,\
                                     dx_xyy_y, dx_xyy_z, dx_xyz_x, dx_xyz_y, dx_xyz_z,\
                                     dx_xzz_x, dx_xzz_y, dx_xzz_z, dx_yyy_x, dx_yyy_y,\
                                     dx_yyy_z, dx_yyz_x, dx_yyz_y, dx_yyz_z, dx_yzz_x,\
                                     dx_yzz_y, dx_yzz_z, dx_zzz_x, dx_zzz_y, dx_zzz_z,\
                                     dy_xxx_x, dy_xxx_y, dy_xxx_z, dy_xxy_x, dy_xxy_y,\
                                     dy_xxy_z, dy_xxz_x, dy_xxz_y, dy_xxz_z, dy_xyy_x,\
                                     dy_xyy_y, dy_xyy_z, dy_xyz_x, dy_xyz_y, dy_xyz_z,\
                                     dy_xzz_x, dy_xzz_y, dy_xzz_z, dy_yyy_x, dy_yyy_y,\
                                     dy_yyy_z, dy_yyz_x, dy_yyz_y, dy_yyz_z, dy_yzz_x,\
                                     dy_yzz_y, dy_yzz_z, dy_zzz_x, dy_zzz_y, dy_zzz_z,\
                                     dz_xxx_x, dz_xxx_y, dz_xxx_z, dz_xxy_x, dz_xxy_y,\
                                     dz_xxy_z, dz_xxz_x, dz_xxz_y, dz_xxz_z, dz_xyy_x,\
                                     dz_xyy_y, dz_xyy_z, dz_xyz_x, dz_xyz_y, dz_xyz_z,\
                                     dz_xzz_x, dz_xzz_y, dz_xzz_z, dz_yyy_x, dz_yyy_y,\
                                     dz_yyy_z, dz_yyz_x, dz_yyz_y, dz_yyz_z, dz_yzz_x,\
                                     dz_yzz_y, dz_yzz_z, dz_zzz_x, dz_zzz_y, dz_zzz_z,\
                                     dx_xx_x, dx_xx_y, dx_xx_z, dx_xy_x, dx_xy_y,\
                                     dx_xy_z, dx_xz_x, dx_xz_y, dx_xz_z, dx_yy_x,\
                                     dx_yy_y, dx_yy_z, dx_yz_x, dx_yz_y, dx_yz_z,\
                                     dx_zz_x, dx_zz_y, dx_zz_z, dy_xx_x, dy_xx_y,\
                                     dy_xx_z, dy_xy_x, dy_xy_y, dy_xy_z, dy_xz_x,\
                                     dy_xz_y, dy_xz_z, dy_yy_x, dy_yy_y, dy_yy_z,\
                                     dy_yz_x, dy_yz_y, dy_yz_z, dy_zz_x, dy_zz_y,\
                                     dy_zz_z, dz_xx_x, dz_xx_y, dz_xx_z, dz_xy_x,\
                                     dz_xy_y, dz_xy_z, dz_xz_x, dz_xz_y, dz_xz_z,\
                                     dz_yy_x, dz_yy_y, dz_yy_z, dz_yz_x, dz_yz_y,\
                                     dz_yz_z, dz_zz_x, dz_zz_y, dz_zz_z, dx_xxx_0,\
                                     dx_xxy_0, dx_xxz_0, dx_xyy_0, dx_xyz_0, dx_xzz_0,\
                                     dx_yyy_0, dx_yyz_0, dx_yzz_0, dx_zzz_0, dy_xxx_0,\
                                     dy_xxy_0, dy_xxz_0, dy_xyy_0, dy_xyz_0, dy_xzz_0,\
                                     dy_yyy_0, dy_yyz_0, dy_yzz_0, dy_zzz_0, dz_xxx_0,\
                                     dz_xxy_0, dz_xxz_0, dz_xyy_0, dz_xyz_0, dz_xzz_0,\
                                     dz_yyy_0, dz_yyz_0, dz_yzz_0, dz_zzz_0, s_xxx_x,\
                                     s_xxx_y, s_xxx_z, s_xxy_x, s_xxy_y, s_xxy_z,\
                                     s_xxz_x, s_xxz_y, s_xxz_z, s_xyy_x, s_xyy_y,\
                                     s_xyy_z, s_xyz_x, s_xyz_y, s_xyz_z, s_xzz_x,\
                                     s_xzz_y, s_xzz_z, s_yyy_x, s_yyy_y, s_yyy_z,\
                                     s_yyz_x, s_yyz_y, s_yyz_z, s_yzz_x, s_yzz_y,\
                                     s_yzz_z, s_zzz_x, s_zzz_y, s_zzz_z, s_xx_x,\
                                     s_xx_y, s_xx_z, s_xy_x, s_xy_y, s_xy_z, s_xz_x,\
                                     s_xz_y, s_xz_z, s_yy_x, s_yy_y, s_yy_z, s_yz_x,\
                                     s_yz_y, s_yz_z, s_zz_x, s_zz_y, s_zz_z, s_x_x,\
                                     s_x_y, s_x_z, s_y_x, s_y_y, s_y_z, s_z_x,\
                                     s_z_y, s_z_z, s_xx_0, s_xy_0, s_xz_0, s_yy_0,\
                                     s_yz_0, s_zz_0: VLX_ALIGN)
             for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xxx_x[j] = fr * s_xx_x[j] + f2t * (2.0 * s_x_x[j] + s_xx_0[j]);

                s_xxx_y[j] = fr * s_xx_y[j] + f2t * 2.0 * s_x_y[j];

                s_xxx_z[j] = fr * s_xx_z[j] + f2t * 2.0 * s_x_z[j];

                s_xxy_x[j] = fr * s_xy_x[j] + f2t * (s_y_x[j] + s_xy_0[j]);

                s_xxy_y[j] = fr * s_xy_y[j] + f2t * s_y_y[j];

                s_xxy_z[j] = fr * s_xy_z[j] + f2t * s_y_z[j];

                s_xxz_x[j] = fr * s_xz_x[j] + f2t * (s_z_x[j] + s_xz_0[j]);

                s_xxz_y[j] = fr * s_xz_y[j] + f2t * s_z_y[j];

                s_xxz_z[j] = fr * s_xz_z[j] + f2t * s_z_z[j];

                s_xyy_x[j] = fr * s_yy_x[j] + f2t * s_yy_0[j];

                s_xyy_y[j] = fr * s_yy_y[j];

                s_xyy_z[j] = fr * s_yy_z[j];

                s_xyz_x[j] = fr * s_yz_x[j] + f2t * s_yz_0[j];

                s_xyz_y[j] = fr * s_yz_y[j];

                s_xyz_z[j] = fr * s_yz_z[j];

                s_xzz_x[j] = fr * s_zz_x[j] + f2t * s_zz_0[j];

                s_xzz_y[j] = fr * s_zz_y[j];

                s_xzz_z[j] = fr * s_zz_z[j];

                // leading y component

                fr = pay[j];

                s_yyy_x[j] = fr * s_yy_x[j] + f2t * 2.0 * s_y_x[j];

                s_yyy_y[j] = fr * s_yy_y[j] + f2t * (2.0 * s_y_y[j] + s_yy_0[j]);

                s_yyy_z[j] = fr * s_yy_z[j] + f2t * 2.0 * s_y_z[j];

                s_yyz_x[j] = fr * s_yz_x[j] + f2t * s_z_x[j];

                s_yyz_y[j] = fr * s_yz_y[j] + f2t * (s_z_y[j] + s_yz_0[j]);

                s_yyz_z[j] = fr * s_yz_z[j] + f2t * s_z_z[j];

                s_yzz_x[j] = fr * s_zz_x[j];

                s_yzz_y[j] = fr * s_zz_y[j] + f2t * s_zz_0[j];

                s_yzz_z[j] = fr * s_zz_z[j];

                // leading z component

                fr = paz[j];

                s_zzz_x[j] = fr * s_zz_x[j] + f2t * 2.0 * s_z_x[j];

                s_zzz_y[j] = fr * s_zz_y[j] + f2t * 2.0 * s_z_y[j];

                s_zzz_z[j] = fr * s_zz_z[j] + f2t * (2.0 * s_z_z[j] + s_zz_0[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxxx_x[j] = fr * dx_xxx_x[j] + f2t * (3.0 * dx_xx_x[j] + dx_xxx_0[j] + s_xxx_x[j]);

                dy_xxxx_x[j] = fr * dy_xxx_x[j] + f2t * (3.0 * dy_xx_x[j] + dy_xxx_0[j]);

                dz_xxxx_x[j] = fr * dz_xxx_x[j] + f2t * (3.0 * dz_xx_x[j] + dz_xxx_0[j]);

                dx_xxxx_y[j] = fr * dx_xxx_y[j] + f2t * (3.0 * dx_xx_y[j] + s_xxx_y[j]);

                dy_xxxx_y[j] = fr * dy_xxx_y[j] + f2t * 3.0 * dy_xx_y[j];

                dz_xxxx_y[j] = fr * dz_xxx_y[j] + f2t * 3.0 * dz_xx_y[j];

                dx_xxxx_z[j] = fr * dx_xxx_z[j] + f2t * (3.0 * dx_xx_z[j] + s_xxx_z[j]);

                dy_xxxx_z[j] = fr * dy_xxx_z[j] + f2t * 3.0 * dy_xx_z[j];

                dz_xxxx_z[j] = fr * dz_xxx_z[j] + f2t * 3.0 * dz_xx_z[j];

                dx_xxxy_x[j] = fr * dx_xxy_x[j] + f2t * (2.0 * dx_xy_x[j] + dx_xxy_0[j] + s_xxy_x[j]);

                dy_xxxy_x[j] = fr * dy_xxy_x[j] + f2t * (2.0 * dy_xy_x[j] + dy_xxy_0[j]);

                dz_xxxy_x[j] = fr * dz_xxy_x[j] + f2t * (2.0 * dz_xy_x[j] + dz_xxy_0[j]);

                dx_xxxy_y[j] = fr * dx_xxy_y[j] + f2t * (2.0 * dx_xy_y[j] + s_xxy_y[j]);

                dy_xxxy_y[j] = fr * dy_xxy_y[j] + f2t * 2.0 * dy_xy_y[j];

                dz_xxxy_y[j] = fr * dz_xxy_y[j] + f2t * 2.0 * dz_xy_y[j];

                dx_xxxy_z[j] = fr * dx_xxy_z[j] + f2t * (2.0 * dx_xy_z[j] + s_xxy_z[j]);

                dy_xxxy_z[j] = fr * dy_xxy_z[j] + f2t * 2.0 * dy_xy_z[j];

                dz_xxxy_z[j] = fr * dz_xxy_z[j] + f2t * 2.0 * dz_xy_z[j];

                dx_xxxz_x[j] = fr * dx_xxz_x[j] + f2t * (2.0 * dx_xz_x[j] + dx_xxz_0[j] + s_xxz_x[j]);

                dy_xxxz_x[j] = fr * dy_xxz_x[j] + f2t * (2.0 * dy_xz_x[j] + dy_xxz_0[j]);

                dz_xxxz_x[j] = fr * dz_xxz_x[j] + f2t * (2.0 * dz_xz_x[j] + dz_xxz_0[j]);

                dx_xxxz_y[j] = fr * dx_xxz_y[j] + f2t * (2.0 * dx_xz_y[j] + s_xxz_y[j]);

                dy_xxxz_y[j] = fr * dy_xxz_y[j] + f2t * 2.0 * dy_xz_y[j];

                dz_xxxz_y[j] = fr * dz_xxz_y[j] + f2t * 2.0 * dz_xz_y[j];

                dx_xxxz_z[j] = fr * dx_xxz_z[j] + f2t * (2.0 * dx_xz_z[j] + s_xxz_z[j]);

                dy_xxxz_z[j] = fr * dy_xxz_z[j] + f2t * 2.0 * dy_xz_z[j];

                dz_xxxz_z[j] = fr * dz_xxz_z[j] + f2t * 2.0 * dz_xz_z[j];

                dx_xxyy_x[j] = fr * dx_xyy_x[j] + f2t * (dx_yy_x[j] + dx_xyy_0[j] + s_xyy_x[j]);

                dy_xxyy_x[j] = fr * dy_xyy_x[j] + f2t * (dy_yy_x[j] + dy_xyy_0[j]);

                dz_xxyy_x[j] = fr * dz_xyy_x[j] + f2t * (dz_yy_x[j] + dz_xyy_0[j]);

                dx_xxyy_y[j] = fr * dx_xyy_y[j] + f2t * (dx_yy_y[j] + s_xyy_y[j]);

                dy_xxyy_y[j] = fr * dy_xyy_y[j] + f2t * dy_yy_y[j];

                dz_xxyy_y[j] = fr * dz_xyy_y[j] + f2t * dz_yy_y[j];

                dx_xxyy_z[j] = fr * dx_xyy_z[j] + f2t * (dx_yy_z[j] + s_xyy_z[j]);

                dy_xxyy_z[j] = fr * dy_xyy_z[j] + f2t * dy_yy_z[j];

                dz_xxyy_z[j] = fr * dz_xyy_z[j] + f2t * dz_yy_z[j];

                dx_xxyz_x[j] = fr * dx_xyz_x[j] + f2t * (dx_yz_x[j] + dx_xyz_0[j] + s_xyz_x[j]);

                dy_xxyz_x[j] = fr * dy_xyz_x[j] + f2t * (dy_yz_x[j] + dy_xyz_0[j]);

                dz_xxyz_x[j] = fr * dz_xyz_x[j] + f2t * (dz_yz_x[j] + dz_xyz_0[j]);

                dx_xxyz_y[j] = fr * dx_xyz_y[j] + f2t * (dx_yz_y[j] + s_xyz_y[j]);

                dy_xxyz_y[j] = fr * dy_xyz_y[j] + f2t * dy_yz_y[j];

                dz_xxyz_y[j] = fr * dz_xyz_y[j] + f2t * dz_yz_y[j];

                dx_xxyz_z[j] = fr * dx_xyz_z[j] + f2t * (dx_yz_z[j] + s_xyz_z[j]);

                dy_xxyz_z[j] = fr * dy_xyz_z[j] + f2t * dy_yz_z[j];

                dz_xxyz_z[j] = fr * dz_xyz_z[j] + f2t * dz_yz_z[j];

                dx_xxzz_x[j] = fr * dx_xzz_x[j] + f2t * (dx_zz_x[j] + dx_xzz_0[j] + s_xzz_x[j]);

                dy_xxzz_x[j] = fr * dy_xzz_x[j] + f2t * (dy_zz_x[j] + dy_xzz_0[j]);

                dz_xxzz_x[j] = fr * dz_xzz_x[j] + f2t * (dz_zz_x[j] + dz_xzz_0[j]);

                dx_xxzz_y[j] = fr * dx_xzz_y[j] + f2t * (dx_zz_y[j] + s_xzz_y[j]);

                dy_xxzz_y[j] = fr * dy_xzz_y[j] + f2t * dy_zz_y[j];

                dz_xxzz_y[j] = fr * dz_xzz_y[j] + f2t * dz_zz_y[j];

                dx_xxzz_z[j] = fr * dx_xzz_z[j] + f2t * (dx_zz_z[j] + s_xzz_z[j]);

                dy_xxzz_z[j] = fr * dy_xzz_z[j] + f2t * dy_zz_z[j];

                dz_xxzz_z[j] = fr * dz_xzz_z[j] + f2t * dz_zz_z[j];

                dx_xyyy_x[j] = fr * dx_yyy_x[j] + f2t * (dx_yyy_0[j] + s_yyy_x[j]);

                dy_xyyy_x[j] = fr * dy_yyy_x[j] + f2t * dy_yyy_0[j];

                dz_xyyy_x[j] = fr * dz_yyy_x[j] + f2t * dz_yyy_0[j];

                dx_xyyy_y[j] = fr * dx_yyy_y[j] + f2t * s_yyy_y[j];

                dy_xyyy_y[j] = fr * dy_yyy_y[j];

                dz_xyyy_y[j] = fr * dz_yyy_y[j];

                dx_xyyy_z[j] = fr * dx_yyy_z[j] + f2t * s_yyy_z[j];

                dy_xyyy_z[j] = fr * dy_yyy_z[j];

                dz_xyyy_z[j] = fr * dz_yyy_z[j];

                dx_xyyz_x[j] = fr * dx_yyz_x[j] + f2t * (dx_yyz_0[j] + s_yyz_x[j]);

                dy_xyyz_x[j] = fr * dy_yyz_x[j] + f2t * dy_yyz_0[j];

                dz_xyyz_x[j] = fr * dz_yyz_x[j] + f2t * dz_yyz_0[j];

                dx_xyyz_y[j] = fr * dx_yyz_y[j] + f2t * s_yyz_y[j];

                dy_xyyz_y[j] = fr * dy_yyz_y[j];

                dz_xyyz_y[j] = fr * dz_yyz_y[j];

                dx_xyyz_z[j] = fr * dx_yyz_z[j] + f2t * s_yyz_z[j];

                dy_xyyz_z[j] = fr * dy_yyz_z[j];

                dz_xyyz_z[j] = fr * dz_yyz_z[j];

                dx_xyzz_x[j] = fr * dx_yzz_x[j] + f2t * (dx_yzz_0[j] + s_yzz_x[j]);

                dy_xyzz_x[j] = fr * dy_yzz_x[j] + f2t * dy_yzz_0[j];

                dz_xyzz_x[j] = fr * dz_yzz_x[j] + f2t * dz_yzz_0[j];

                dx_xyzz_y[j] = fr * dx_yzz_y[j] + f2t * s_yzz_y[j];

                dy_xyzz_y[j] = fr * dy_yzz_y[j];

                dz_xyzz_y[j] = fr * dz_yzz_y[j];

                dx_xyzz_z[j] = fr * dx_yzz_z[j] + f2t * s_yzz_z[j];

                dy_xyzz_z[j] = fr * dy_yzz_z[j];

                dz_xyzz_z[j] = fr * dz_yzz_z[j];

                dx_xzzz_x[j] = fr * dx_zzz_x[j] + f2t * (dx_zzz_0[j] + s_zzz_x[j]);

                dy_xzzz_x[j] = fr * dy_zzz_x[j] + f2t * dy_zzz_0[j];

                dz_xzzz_x[j] = fr * dz_zzz_x[j] + f2t * dz_zzz_0[j];

                dx_xzzz_y[j] = fr * dx_zzz_y[j] + f2t * s_zzz_y[j];

                dy_xzzz_y[j] = fr * dy_zzz_y[j];

                dz_xzzz_y[j] = fr * dz_zzz_y[j];

                dx_xzzz_z[j] = fr * dx_zzz_z[j] + f2t * s_zzz_z[j];

                dy_xzzz_z[j] = fr * dy_zzz_z[j];

                dz_xzzz_z[j] = fr * dz_zzz_z[j];

                // leading y component

                fr = pay[j];

                dx_yyyy_x[j] = fr * dx_yyy_x[j] + f2t * 3.0 * dx_yy_x[j];

                dy_yyyy_x[j] = fr * dy_yyy_x[j] + f2t * (3.0 * dy_yy_x[j] + s_yyy_x[j]);

                dz_yyyy_x[j] = fr * dz_yyy_x[j] + f2t * 3.0 * dz_yy_x[j];

                dx_yyyy_y[j] = fr * dx_yyy_y[j] + f2t * (3.0 * dx_yy_y[j] + dx_yyy_0[j]);

                dy_yyyy_y[j] = fr * dy_yyy_y[j] + f2t * (3.0 * dy_yy_y[j] + dy_yyy_0[j] + s_yyy_y[j]);

                dz_yyyy_y[j] = fr * dz_yyy_y[j] + f2t * (3.0 * dz_yy_y[j] + dz_yyy_0[j]);

                dx_yyyy_z[j] = fr * dx_yyy_z[j] + f2t * 3.0 * dx_yy_z[j];

                dy_yyyy_z[j] = fr * dy_yyy_z[j] + f2t * (3.0 * dy_yy_z[j] + s_yyy_z[j]);

                dz_yyyy_z[j] = fr * dz_yyy_z[j] + f2t * 3.0 * dz_yy_z[j];

                dx_yyyz_x[j] = fr * dx_yyz_x[j] + f2t * 2.0 * dx_yz_x[j];

                dy_yyyz_x[j] = fr * dy_yyz_x[j] + f2t * (2.0 * dy_yz_x[j] + s_yyz_x[j]);

                dz_yyyz_x[j] = fr * dz_yyz_x[j] + f2t * 2.0 * dz_yz_x[j];

                dx_yyyz_y[j] = fr * dx_yyz_y[j] + f2t * (2.0 * dx_yz_y[j] + dx_yyz_0[j]);

                dy_yyyz_y[j] = fr * dy_yyz_y[j] + f2t * (2.0 * dy_yz_y[j] + dy_yyz_0[j] + s_yyz_y[j]);

                dz_yyyz_y[j] = fr * dz_yyz_y[j] + f2t * (2.0 * dz_yz_y[j] + dz_yyz_0[j]);

                dx_yyyz_z[j] = fr * dx_yyz_z[j] + f2t * 2.0 * dx_yz_z[j];

                dy_yyyz_z[j] = fr * dy_yyz_z[j] + f2t * (2.0 * dy_yz_z[j] + s_yyz_z[j]);

                dz_yyyz_z[j] = fr * dz_yyz_z[j] + f2t * 2.0 * dz_yz_z[j];

                dx_yyzz_x[j] = fr * dx_yzz_x[j] + f2t * dx_zz_x[j];

                dy_yyzz_x[j] = fr * dy_yzz_x[j] + f2t * (dy_zz_x[j] + s_yzz_x[j]);

                dz_yyzz_x[j] = fr * dz_yzz_x[j] + f2t * dz_zz_x[j];

                dx_yyzz_y[j] = fr * dx_yzz_y[j] + f2t * (dx_zz_y[j] + dx_yzz_0[j]);

                dy_yyzz_y[j] = fr * dy_yzz_y[j] + f2t * (dy_zz_y[j] + dy_yzz_0[j] + s_yzz_y[j]);

                dz_yyzz_y[j] = fr * dz_yzz_y[j] + f2t * (dz_zz_y[j] + dz_yzz_0[j]);

                dx_yyzz_z[j] = fr * dx_yzz_z[j] + f2t * dx_zz_z[j];

                dy_yyzz_z[j] = fr * dy_yzz_z[j] + f2t * (dy_zz_z[j] + s_yzz_z[j]);

                dz_yyzz_z[j] = fr * dz_yzz_z[j] + f2t * dz_zz_z[j];

                dx_yzzz_x[j] = fr * dx_zzz_x[j];

                dy_yzzz_x[j] = fr * dy_zzz_x[j] + f2t * s_zzz_x[j];

                dz_yzzz_x[j] = fr * dz_zzz_x[j];

                dx_yzzz_y[j] = fr * dx_zzz_y[j] + f2t * dx_zzz_0[j];

                dy_yzzz_y[j] = fr * dy_zzz_y[j] + f2t * (dy_zzz_0[j] + s_zzz_y[j]);

                dz_yzzz_y[j] = fr * dz_zzz_y[j] + f2t * dz_zzz_0[j];

                dx_yzzz_z[j] = fr * dx_zzz_z[j];

                dy_yzzz_z[j] = fr * dy_zzz_z[j] + f2t * s_zzz_z[j];

                dz_yzzz_z[j] = fr * dz_zzz_z[j];

                // leading z component

                fr = paz[j];

                dx_zzzz_x[j] = fr * dx_zzz_x[j] + f2t * 3.0 * dx_zz_x[j];

                dy_zzzz_x[j] = fr * dy_zzz_x[j] + f2t * 3.0 * dy_zz_x[j];

                dz_zzzz_x[j] = fr * dz_zzz_x[j] + f2t * (3.0 * dz_zz_x[j] + s_zzz_x[j]);

                dx_zzzz_y[j] = fr * dx_zzz_y[j] + f2t * 3.0 * dx_zz_y[j];

                dy_zzzz_y[j] = fr * dy_zzz_y[j] + f2t * 3.0 * dy_zz_y[j];

                dz_zzzz_y[j] = fr * dz_zzz_y[j] + f2t * (3.0 * dz_zz_y[j] + s_zzz_y[j]);

                dx_zzzz_z[j] = fr * dx_zzz_z[j] + f2t * (3.0 * dx_zz_z[j] + dx_zzz_0[j]);

                dy_zzzz_z[j] = fr * dy_zzz_z[j] + f2t * (3.0 * dy_zz_z[j] + dy_zzz_0[j]);

                dz_zzzz_z[j] = fr * dz_zzz_z[j] + f2t * (3.0 * dz_zz_z[j] + dz_zzz_0[j] + s_zzz_z[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForDG(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {2, 4, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {2, 4, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 4, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 4, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 4, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 4, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {0, 3, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (D|M|G) integrals

            auto dx_xx_xxxx = primBuffer.data(doff + 90 * idx);

            auto dx_xx_xxxy = primBuffer.data(doff + 90 * idx + 1);

            auto dx_xx_xxxz = primBuffer.data(doff + 90 * idx + 2);

            auto dx_xx_xxyy = primBuffer.data(doff + 90 * idx + 3);

            auto dx_xx_xxyz = primBuffer.data(doff + 90 * idx + 4);

            auto dx_xx_xxzz = primBuffer.data(doff + 90 * idx + 5);

            auto dx_xx_xyyy = primBuffer.data(doff + 90 * idx + 6);

            auto dx_xx_xyyz = primBuffer.data(doff + 90 * idx + 7);

            auto dx_xx_xyzz = primBuffer.data(doff + 90 * idx + 8);

            auto dx_xx_xzzz = primBuffer.data(doff + 90 * idx + 9);

            auto dx_xx_yyyy = primBuffer.data(doff + 90 * idx + 10);

            auto dx_xx_yyyz = primBuffer.data(doff + 90 * idx + 11);

            auto dx_xx_yyzz = primBuffer.data(doff + 90 * idx + 12);

            auto dx_xx_yzzz = primBuffer.data(doff + 90 * idx + 13);

            auto dx_xx_zzzz = primBuffer.data(doff + 90 * idx + 14);

            auto dx_xy_xxxx = primBuffer.data(doff + 90 * idx + 15);

            auto dx_xy_xxxy = primBuffer.data(doff + 90 * idx + 16);

            auto dx_xy_xxxz = primBuffer.data(doff + 90 * idx + 17);

            auto dx_xy_xxyy = primBuffer.data(doff + 90 * idx + 18);

            auto dx_xy_xxyz = primBuffer.data(doff + 90 * idx + 19);

            auto dx_xy_xxzz = primBuffer.data(doff + 90 * idx + 20);

            auto dx_xy_xyyy = primBuffer.data(doff + 90 * idx + 21);

            auto dx_xy_xyyz = primBuffer.data(doff + 90 * idx + 22);

            auto dx_xy_xyzz = primBuffer.data(doff + 90 * idx + 23);

            auto dx_xy_xzzz = primBuffer.data(doff + 90 * idx + 24);

            auto dx_xy_yyyy = primBuffer.data(doff + 90 * idx + 25);

            auto dx_xy_yyyz = primBuffer.data(doff + 90 * idx + 26);

            auto dx_xy_yyzz = primBuffer.data(doff + 90 * idx + 27);

            auto dx_xy_yzzz = primBuffer.data(doff + 90 * idx + 28);

            auto dx_xy_zzzz = primBuffer.data(doff + 90 * idx + 29);

            auto dx_xz_xxxx = primBuffer.data(doff + 90 * idx + 30);

            auto dx_xz_xxxy = primBuffer.data(doff + 90 * idx + 31);

            auto dx_xz_xxxz = primBuffer.data(doff + 90 * idx + 32);

            auto dx_xz_xxyy = primBuffer.data(doff + 90 * idx + 33);

            auto dx_xz_xxyz = primBuffer.data(doff + 90 * idx + 34);

            auto dx_xz_xxzz = primBuffer.data(doff + 90 * idx + 35);

            auto dx_xz_xyyy = primBuffer.data(doff + 90 * idx + 36);

            auto dx_xz_xyyz = primBuffer.data(doff + 90 * idx + 37);

            auto dx_xz_xyzz = primBuffer.data(doff + 90 * idx + 38);

            auto dx_xz_xzzz = primBuffer.data(doff + 90 * idx + 39);

            auto dx_xz_yyyy = primBuffer.data(doff + 90 * idx + 40);

            auto dx_xz_yyyz = primBuffer.data(doff + 90 * idx + 41);

            auto dx_xz_yyzz = primBuffer.data(doff + 90 * idx + 42);

            auto dx_xz_yzzz = primBuffer.data(doff + 90 * idx + 43);

            auto dx_xz_zzzz = primBuffer.data(doff + 90 * idx + 44);

            auto dx_yy_xxxx = primBuffer.data(doff + 90 * idx + 45);

            auto dx_yy_xxxy = primBuffer.data(doff + 90 * idx + 46);

            auto dx_yy_xxxz = primBuffer.data(doff + 90 * idx + 47);

            auto dx_yy_xxyy = primBuffer.data(doff + 90 * idx + 48);

            auto dx_yy_xxyz = primBuffer.data(doff + 90 * idx + 49);

            auto dx_yy_xxzz = primBuffer.data(doff + 90 * idx + 50);

            auto dx_yy_xyyy = primBuffer.data(doff + 90 * idx + 51);

            auto dx_yy_xyyz = primBuffer.data(doff + 90 * idx + 52);

            auto dx_yy_xyzz = primBuffer.data(doff + 90 * idx + 53);

            auto dx_yy_xzzz = primBuffer.data(doff + 90 * idx + 54);

            auto dx_yy_yyyy = primBuffer.data(doff + 90 * idx + 55);

            auto dx_yy_yyyz = primBuffer.data(doff + 90 * idx + 56);

            auto dx_yy_yyzz = primBuffer.data(doff + 90 * idx + 57);

            auto dx_yy_yzzz = primBuffer.data(doff + 90 * idx + 58);

            auto dx_yy_zzzz = primBuffer.data(doff + 90 * idx + 59);

            auto dx_yz_xxxx = primBuffer.data(doff + 90 * idx + 60);

            auto dx_yz_xxxy = primBuffer.data(doff + 90 * idx + 61);

            auto dx_yz_xxxz = primBuffer.data(doff + 90 * idx + 62);

            auto dx_yz_xxyy = primBuffer.data(doff + 90 * idx + 63);

            auto dx_yz_xxyz = primBuffer.data(doff + 90 * idx + 64);

            auto dx_yz_xxzz = primBuffer.data(doff + 90 * idx + 65);

            auto dx_yz_xyyy = primBuffer.data(doff + 90 * idx + 66);

            auto dx_yz_xyyz = primBuffer.data(doff + 90 * idx + 67);

            auto dx_yz_xyzz = primBuffer.data(doff + 90 * idx + 68);

            auto dx_yz_xzzz = primBuffer.data(doff + 90 * idx + 69);

            auto dx_yz_yyyy = primBuffer.data(doff + 90 * idx + 70);

            auto dx_yz_yyyz = primBuffer.data(doff + 90 * idx + 71);

            auto dx_yz_yyzz = primBuffer.data(doff + 90 * idx + 72);

            auto dx_yz_yzzz = primBuffer.data(doff + 90 * idx + 73);

            auto dx_yz_zzzz = primBuffer.data(doff + 90 * idx + 74);

            auto dx_zz_xxxx = primBuffer.data(doff + 90 * idx + 75);

            auto dx_zz_xxxy = primBuffer.data(doff + 90 * idx + 76);

            auto dx_zz_xxxz = primBuffer.data(doff + 90 * idx + 77);

            auto dx_zz_xxyy = primBuffer.data(doff + 90 * idx + 78);

            auto dx_zz_xxyz = primBuffer.data(doff + 90 * idx + 79);

            auto dx_zz_xxzz = primBuffer.data(doff + 90 * idx + 80);

            auto dx_zz_xyyy = primBuffer.data(doff + 90 * idx + 81);

            auto dx_zz_xyyz = primBuffer.data(doff + 90 * idx + 82);

            auto dx_zz_xyzz = primBuffer.data(doff + 90 * idx + 83);

            auto dx_zz_xzzz = primBuffer.data(doff + 90 * idx + 84);

            auto dx_zz_yyyy = primBuffer.data(doff + 90 * idx + 85);

            auto dx_zz_yyyz = primBuffer.data(doff + 90 * idx + 86);

            auto dx_zz_yyzz = primBuffer.data(doff + 90 * idx + 87);

            auto dx_zz_yzzz = primBuffer.data(doff + 90 * idx + 88);

            auto dx_zz_zzzz = primBuffer.data(doff + 90 * idx + 89);

            auto dy_xx_xxxx = primBuffer.data(doff + 90 * bdim + 90 * idx);

            auto dy_xx_xxxy = primBuffer.data(doff + 90 * bdim + 90 * idx + 1);

            auto dy_xx_xxxz = primBuffer.data(doff + 90 * bdim + 90 * idx + 2);

            auto dy_xx_xxyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 3);

            auto dy_xx_xxyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 4);

            auto dy_xx_xxzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 5);

            auto dy_xx_xyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 6);

            auto dy_xx_xyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 7);

            auto dy_xx_xyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 8);

            auto dy_xx_xzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 9);

            auto dy_xx_yyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 10);

            auto dy_xx_yyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 11);

            auto dy_xx_yyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 12);

            auto dy_xx_yzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 13);

            auto dy_xx_zzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 14);

            auto dy_xy_xxxx = primBuffer.data(doff + 90 * bdim + 90 * idx + 15);

            auto dy_xy_xxxy = primBuffer.data(doff + 90 * bdim + 90 * idx + 16);

            auto dy_xy_xxxz = primBuffer.data(doff + 90 * bdim + 90 * idx + 17);

            auto dy_xy_xxyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 18);

            auto dy_xy_xxyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 19);

            auto dy_xy_xxzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 20);

            auto dy_xy_xyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 21);

            auto dy_xy_xyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 22);

            auto dy_xy_xyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 23);

            auto dy_xy_xzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 24);

            auto dy_xy_yyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 25);

            auto dy_xy_yyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 26);

            auto dy_xy_yyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 27);

            auto dy_xy_yzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 28);

            auto dy_xy_zzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 29);

            auto dy_xz_xxxx = primBuffer.data(doff + 90 * bdim + 90 * idx + 30);

            auto dy_xz_xxxy = primBuffer.data(doff + 90 * bdim + 90 * idx + 31);

            auto dy_xz_xxxz = primBuffer.data(doff + 90 * bdim + 90 * idx + 32);

            auto dy_xz_xxyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 33);

            auto dy_xz_xxyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 34);

            auto dy_xz_xxzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 35);

            auto dy_xz_xyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 36);

            auto dy_xz_xyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 37);

            auto dy_xz_xyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 38);

            auto dy_xz_xzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 39);

            auto dy_xz_yyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 40);

            auto dy_xz_yyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 41);

            auto dy_xz_yyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 42);

            auto dy_xz_yzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 43);

            auto dy_xz_zzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 44);

            auto dy_yy_xxxx = primBuffer.data(doff + 90 * bdim + 90 * idx + 45);

            auto dy_yy_xxxy = primBuffer.data(doff + 90 * bdim + 90 * idx + 46);

            auto dy_yy_xxxz = primBuffer.data(doff + 90 * bdim + 90 * idx + 47);

            auto dy_yy_xxyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 48);

            auto dy_yy_xxyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 49);

            auto dy_yy_xxzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 50);

            auto dy_yy_xyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 51);

            auto dy_yy_xyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 52);

            auto dy_yy_xyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 53);

            auto dy_yy_xzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 54);

            auto dy_yy_yyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 55);

            auto dy_yy_yyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 56);

            auto dy_yy_yyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 57);

            auto dy_yy_yzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 58);

            auto dy_yy_zzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 59);

            auto dy_yz_xxxx = primBuffer.data(doff + 90 * bdim + 90 * idx + 60);

            auto dy_yz_xxxy = primBuffer.data(doff + 90 * bdim + 90 * idx + 61);

            auto dy_yz_xxxz = primBuffer.data(doff + 90 * bdim + 90 * idx + 62);

            auto dy_yz_xxyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 63);

            auto dy_yz_xxyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 64);

            auto dy_yz_xxzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 65);

            auto dy_yz_xyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 66);

            auto dy_yz_xyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 67);

            auto dy_yz_xyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 68);

            auto dy_yz_xzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 69);

            auto dy_yz_yyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 70);

            auto dy_yz_yyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 71);

            auto dy_yz_yyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 72);

            auto dy_yz_yzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 73);

            auto dy_yz_zzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 74);

            auto dy_zz_xxxx = primBuffer.data(doff + 90 * bdim + 90 * idx + 75);

            auto dy_zz_xxxy = primBuffer.data(doff + 90 * bdim + 90 * idx + 76);

            auto dy_zz_xxxz = primBuffer.data(doff + 90 * bdim + 90 * idx + 77);

            auto dy_zz_xxyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 78);

            auto dy_zz_xxyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 79);

            auto dy_zz_xxzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 80);

            auto dy_zz_xyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 81);

            auto dy_zz_xyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 82);

            auto dy_zz_xyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 83);

            auto dy_zz_xzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 84);

            auto dy_zz_yyyy = primBuffer.data(doff + 90 * bdim + 90 * idx + 85);

            auto dy_zz_yyyz = primBuffer.data(doff + 90 * bdim + 90 * idx + 86);

            auto dy_zz_yyzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 87);

            auto dy_zz_yzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 88);

            auto dy_zz_zzzz = primBuffer.data(doff + 90 * bdim + 90 * idx + 89);

            auto dz_xx_xxxx = primBuffer.data(doff + 180 * bdim + 90 * idx);

            auto dz_xx_xxxy = primBuffer.data(doff + 180 * bdim + 90 * idx + 1);

            auto dz_xx_xxxz = primBuffer.data(doff + 180 * bdim + 90 * idx + 2);

            auto dz_xx_xxyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 3);

            auto dz_xx_xxyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 4);

            auto dz_xx_xxzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 5);

            auto dz_xx_xyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 6);

            auto dz_xx_xyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 7);

            auto dz_xx_xyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 8);

            auto dz_xx_xzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 9);

            auto dz_xx_yyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 10);

            auto dz_xx_yyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 11);

            auto dz_xx_yyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 12);

            auto dz_xx_yzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 13);

            auto dz_xx_zzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 14);

            auto dz_xy_xxxx = primBuffer.data(doff + 180 * bdim + 90 * idx + 15);

            auto dz_xy_xxxy = primBuffer.data(doff + 180 * bdim + 90 * idx + 16);

            auto dz_xy_xxxz = primBuffer.data(doff + 180 * bdim + 90 * idx + 17);

            auto dz_xy_xxyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 18);

            auto dz_xy_xxyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 19);

            auto dz_xy_xxzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 20);

            auto dz_xy_xyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 21);

            auto dz_xy_xyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 22);

            auto dz_xy_xyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 23);

            auto dz_xy_xzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 24);

            auto dz_xy_yyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 25);

            auto dz_xy_yyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 26);

            auto dz_xy_yyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 27);

            auto dz_xy_yzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 28);

            auto dz_xy_zzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 29);

            auto dz_xz_xxxx = primBuffer.data(doff + 180 * bdim + 90 * idx + 30);

            auto dz_xz_xxxy = primBuffer.data(doff + 180 * bdim + 90 * idx + 31);

            auto dz_xz_xxxz = primBuffer.data(doff + 180 * bdim + 90 * idx + 32);

            auto dz_xz_xxyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 33);

            auto dz_xz_xxyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 34);

            auto dz_xz_xxzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 35);

            auto dz_xz_xyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 36);

            auto dz_xz_xyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 37);

            auto dz_xz_xyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 38);

            auto dz_xz_xzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 39);

            auto dz_xz_yyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 40);

            auto dz_xz_yyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 41);

            auto dz_xz_yyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 42);

            auto dz_xz_yzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 43);

            auto dz_xz_zzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 44);

            auto dz_yy_xxxx = primBuffer.data(doff + 180 * bdim + 90 * idx + 45);

            auto dz_yy_xxxy = primBuffer.data(doff + 180 * bdim + 90 * idx + 46);

            auto dz_yy_xxxz = primBuffer.data(doff + 180 * bdim + 90 * idx + 47);

            auto dz_yy_xxyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 48);

            auto dz_yy_xxyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 49);

            auto dz_yy_xxzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 50);

            auto dz_yy_xyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 51);

            auto dz_yy_xyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 52);

            auto dz_yy_xyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 53);

            auto dz_yy_xzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 54);

            auto dz_yy_yyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 55);

            auto dz_yy_yyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 56);

            auto dz_yy_yyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 57);

            auto dz_yy_yzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 58);

            auto dz_yy_zzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 59);

            auto dz_yz_xxxx = primBuffer.data(doff + 180 * bdim + 90 * idx + 60);

            auto dz_yz_xxxy = primBuffer.data(doff + 180 * bdim + 90 * idx + 61);

            auto dz_yz_xxxz = primBuffer.data(doff + 180 * bdim + 90 * idx + 62);

            auto dz_yz_xxyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 63);

            auto dz_yz_xxyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 64);

            auto dz_yz_xxzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 65);

            auto dz_yz_xyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 66);

            auto dz_yz_xyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 67);

            auto dz_yz_xyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 68);

            auto dz_yz_xzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 69);

            auto dz_yz_yyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 70);

            auto dz_yz_yyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 71);

            auto dz_yz_yyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 72);

            auto dz_yz_yzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 73);

            auto dz_yz_zzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 74);

            auto dz_zz_xxxx = primBuffer.data(doff + 180 * bdim + 90 * idx + 75);

            auto dz_zz_xxxy = primBuffer.data(doff + 180 * bdim + 90 * idx + 76);

            auto dz_zz_xxxz = primBuffer.data(doff + 180 * bdim + 90 * idx + 77);

            auto dz_zz_xxyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 78);

            auto dz_zz_xxyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 79);

            auto dz_zz_xxzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 80);

            auto dz_zz_xyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 81);

            auto dz_zz_xyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 82);

            auto dz_zz_xyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 83);

            auto dz_zz_xzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 84);

            auto dz_zz_yyyy = primBuffer.data(doff + 180 * bdim + 90 * idx + 85);

            auto dz_zz_yyyz = primBuffer.data(doff + 180 * bdim + 90 * idx + 86);

            auto dz_zz_yyzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 87);

            auto dz_zz_yzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 88);

            auto dz_zz_zzzz = primBuffer.data(doff + 180 * bdim + 90 * idx + 89);

            // set up pointers to (P|M|G) integrals

            auto dx_x_xxxx = primBuffer.data(d1off + 45 * idx);

            auto dx_x_xxxy = primBuffer.data(d1off + 45 * idx + 1);

            auto dx_x_xxxz = primBuffer.data(d1off + 45 * idx + 2);

            auto dx_x_xxyy = primBuffer.data(d1off + 45 * idx + 3);

            auto dx_x_xxyz = primBuffer.data(d1off + 45 * idx + 4);

            auto dx_x_xxzz = primBuffer.data(d1off + 45 * idx + 5);

            auto dx_x_xyyy = primBuffer.data(d1off + 45 * idx + 6);

            auto dx_x_xyyz = primBuffer.data(d1off + 45 * idx + 7);

            auto dx_x_xyzz = primBuffer.data(d1off + 45 * idx + 8);

            auto dx_x_xzzz = primBuffer.data(d1off + 45 * idx + 9);

            auto dx_x_yyyy = primBuffer.data(d1off + 45 * idx + 10);

            auto dx_x_yyyz = primBuffer.data(d1off + 45 * idx + 11);

            auto dx_x_yyzz = primBuffer.data(d1off + 45 * idx + 12);

            auto dx_x_yzzz = primBuffer.data(d1off + 45 * idx + 13);

            auto dx_x_zzzz = primBuffer.data(d1off + 45 * idx + 14);

            auto dx_y_xxxx = primBuffer.data(d1off + 45 * idx + 15);

            auto dx_y_xxxy = primBuffer.data(d1off + 45 * idx + 16);

            auto dx_y_xxxz = primBuffer.data(d1off + 45 * idx + 17);

            auto dx_y_xxyy = primBuffer.data(d1off + 45 * idx + 18);

            auto dx_y_xxyz = primBuffer.data(d1off + 45 * idx + 19);

            auto dx_y_xxzz = primBuffer.data(d1off + 45 * idx + 20);

            auto dx_y_xyyy = primBuffer.data(d1off + 45 * idx + 21);

            auto dx_y_xyyz = primBuffer.data(d1off + 45 * idx + 22);

            auto dx_y_xyzz = primBuffer.data(d1off + 45 * idx + 23);

            auto dx_y_xzzz = primBuffer.data(d1off + 45 * idx + 24);

            auto dx_y_yyyy = primBuffer.data(d1off + 45 * idx + 25);

            auto dx_y_yyyz = primBuffer.data(d1off + 45 * idx + 26);

            auto dx_y_yyzz = primBuffer.data(d1off + 45 * idx + 27);

            auto dx_y_yzzz = primBuffer.data(d1off + 45 * idx + 28);

            auto dx_y_zzzz = primBuffer.data(d1off + 45 * idx + 29);

            auto dx_z_xxxx = primBuffer.data(d1off + 45 * idx + 30);

            auto dx_z_xxxy = primBuffer.data(d1off + 45 * idx + 31);

            auto dx_z_xxxz = primBuffer.data(d1off + 45 * idx + 32);

            auto dx_z_xxyy = primBuffer.data(d1off + 45 * idx + 33);

            auto dx_z_xxyz = primBuffer.data(d1off + 45 * idx + 34);

            auto dx_z_xxzz = primBuffer.data(d1off + 45 * idx + 35);

            auto dx_z_xyyy = primBuffer.data(d1off + 45 * idx + 36);

            auto dx_z_xyyz = primBuffer.data(d1off + 45 * idx + 37);

            auto dx_z_xyzz = primBuffer.data(d1off + 45 * idx + 38);

            auto dx_z_xzzz = primBuffer.data(d1off + 45 * idx + 39);

            auto dx_z_yyyy = primBuffer.data(d1off + 45 * idx + 40);

            auto dx_z_yyyz = primBuffer.data(d1off + 45 * idx + 41);

            auto dx_z_yyzz = primBuffer.data(d1off + 45 * idx + 42);

            auto dx_z_yzzz = primBuffer.data(d1off + 45 * idx + 43);

            auto dx_z_zzzz = primBuffer.data(d1off + 45 * idx + 44);

            auto dy_x_xxxx = primBuffer.data(d1off + 45 * bdim + 45 * idx);

            auto dy_x_xxxy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 1);

            auto dy_x_xxxz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 2);

            auto dy_x_xxyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 3);

            auto dy_x_xxyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 4);

            auto dy_x_xxzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 5);

            auto dy_x_xyyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 6);

            auto dy_x_xyyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 7);

            auto dy_x_xyzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 8);

            auto dy_x_xzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 9);

            auto dy_x_yyyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 10);

            auto dy_x_yyyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 11);

            auto dy_x_yyzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 12);

            auto dy_x_yzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 13);

            auto dy_x_zzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 14);

            auto dy_y_xxxx = primBuffer.data(d1off + 45 * bdim + 45 * idx + 15);

            auto dy_y_xxxy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 16);

            auto dy_y_xxxz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 17);

            auto dy_y_xxyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 18);

            auto dy_y_xxyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 19);

            auto dy_y_xxzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 20);

            auto dy_y_xyyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 21);

            auto dy_y_xyyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 22);

            auto dy_y_xyzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 23);

            auto dy_y_xzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 24);

            auto dy_y_yyyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 25);

            auto dy_y_yyyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 26);

            auto dy_y_yyzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 27);

            auto dy_y_yzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 28);

            auto dy_y_zzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 29);

            auto dy_z_xxxx = primBuffer.data(d1off + 45 * bdim + 45 * idx + 30);

            auto dy_z_xxxy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 31);

            auto dy_z_xxxz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 32);

            auto dy_z_xxyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 33);

            auto dy_z_xxyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 34);

            auto dy_z_xxzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 35);

            auto dy_z_xyyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 36);

            auto dy_z_xyyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 37);

            auto dy_z_xyzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 38);

            auto dy_z_xzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 39);

            auto dy_z_yyyy = primBuffer.data(d1off + 45 * bdim + 45 * idx + 40);

            auto dy_z_yyyz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 41);

            auto dy_z_yyzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 42);

            auto dy_z_yzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 43);

            auto dy_z_zzzz = primBuffer.data(d1off + 45 * bdim + 45 * idx + 44);

            auto dz_x_xxxx = primBuffer.data(d1off + 90 * bdim + 45 * idx);

            auto dz_x_xxxy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 1);

            auto dz_x_xxxz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 2);

            auto dz_x_xxyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 3);

            auto dz_x_xxyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 4);

            auto dz_x_xxzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 5);

            auto dz_x_xyyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 6);

            auto dz_x_xyyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 7);

            auto dz_x_xyzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 8);

            auto dz_x_xzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 9);

            auto dz_x_yyyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 10);

            auto dz_x_yyyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 11);

            auto dz_x_yyzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 12);

            auto dz_x_yzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 13);

            auto dz_x_zzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 14);

            auto dz_y_xxxx = primBuffer.data(d1off + 90 * bdim + 45 * idx + 15);

            auto dz_y_xxxy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 16);

            auto dz_y_xxxz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 17);

            auto dz_y_xxyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 18);

            auto dz_y_xxyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 19);

            auto dz_y_xxzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 20);

            auto dz_y_xyyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 21);

            auto dz_y_xyyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 22);

            auto dz_y_xyzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 23);

            auto dz_y_xzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 24);

            auto dz_y_yyyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 25);

            auto dz_y_yyyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 26);

            auto dz_y_yyzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 27);

            auto dz_y_yzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 28);

            auto dz_y_zzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 29);

            auto dz_z_xxxx = primBuffer.data(d1off + 90 * bdim + 45 * idx + 30);

            auto dz_z_xxxy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 31);

            auto dz_z_xxxz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 32);

            auto dz_z_xxyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 33);

            auto dz_z_xxyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 34);

            auto dz_z_xxzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 35);

            auto dz_z_xyyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 36);

            auto dz_z_xyyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 37);

            auto dz_z_xyzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 38);

            auto dz_z_xzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 39);

            auto dz_z_yyyy = primBuffer.data(d1off + 90 * bdim + 45 * idx + 40);

            auto dz_z_yyyz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 41);

            auto dz_z_yyzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 42);

            auto dz_z_yzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 43);

            auto dz_z_zzzz = primBuffer.data(d1off + 90 * bdim + 45 * idx + 44);

            // set up pointers to (S|M|G) integrals

            auto dx_0_xxxx = primBuffer.data(d2off + 15 * idx);

            auto dx_0_xxxy = primBuffer.data(d2off + 15 * idx + 1);

            auto dx_0_xxxz = primBuffer.data(d2off + 15 * idx + 2);

            auto dx_0_xxyy = primBuffer.data(d2off + 15 * idx + 3);

            auto dx_0_xxyz = primBuffer.data(d2off + 15 * idx + 4);

            auto dx_0_xxzz = primBuffer.data(d2off + 15 * idx + 5);

            auto dx_0_xyyy = primBuffer.data(d2off + 15 * idx + 6);

            auto dx_0_xyyz = primBuffer.data(d2off + 15 * idx + 7);

            auto dx_0_xyzz = primBuffer.data(d2off + 15 * idx + 8);

            auto dx_0_xzzz = primBuffer.data(d2off + 15 * idx + 9);

            auto dx_0_yyyy = primBuffer.data(d2off + 15 * idx + 10);

            auto dx_0_yyyz = primBuffer.data(d2off + 15 * idx + 11);

            auto dx_0_yyzz = primBuffer.data(d2off + 15 * idx + 12);

            auto dx_0_yzzz = primBuffer.data(d2off + 15 * idx + 13);

            auto dx_0_zzzz = primBuffer.data(d2off + 15 * idx + 14);

            auto dy_0_xxxx = primBuffer.data(d2off + 15 * bdim + 15 * idx);

            auto dy_0_xxxy = primBuffer.data(d2off + 15 * bdim + 15 * idx + 1);

            auto dy_0_xxxz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 2);

            auto dy_0_xxyy = primBuffer.data(d2off + 15 * bdim + 15 * idx + 3);

            auto dy_0_xxyz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 4);

            auto dy_0_xxzz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 5);

            auto dy_0_xyyy = primBuffer.data(d2off + 15 * bdim + 15 * idx + 6);

            auto dy_0_xyyz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 7);

            auto dy_0_xyzz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 8);

            auto dy_0_xzzz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 9);

            auto dy_0_yyyy = primBuffer.data(d2off + 15 * bdim + 15 * idx + 10);

            auto dy_0_yyyz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 11);

            auto dy_0_yyzz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 12);

            auto dy_0_yzzz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 13);

            auto dy_0_zzzz = primBuffer.data(d2off + 15 * bdim + 15 * idx + 14);

            auto dz_0_xxxx = primBuffer.data(d2off + 30 * bdim + 15 * idx);

            auto dz_0_xxxy = primBuffer.data(d2off + 30 * bdim + 15 * idx + 1);

            auto dz_0_xxxz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 2);

            auto dz_0_xxyy = primBuffer.data(d2off + 30 * bdim + 15 * idx + 3);

            auto dz_0_xxyz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 4);

            auto dz_0_xxzz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 5);

            auto dz_0_xyyy = primBuffer.data(d2off + 30 * bdim + 15 * idx + 6);

            auto dz_0_xyyz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 7);

            auto dz_0_xyzz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 8);

            auto dz_0_xzzz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 9);

            auto dz_0_yyyy = primBuffer.data(d2off + 30 * bdim + 15 * idx + 10);

            auto dz_0_yyyz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 11);

            auto dz_0_yyzz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 12);

            auto dz_0_yzzz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 13);

            auto dz_0_zzzz = primBuffer.data(d2off + 30 * bdim + 15 * idx + 14);

            // set up pointers to (P|M|F) integrals

            auto dx_x_xxx = primBuffer.data(dkoff + 30 * idx);

            auto dx_x_xxy = primBuffer.data(dkoff + 30 * idx + 1);

            auto dx_x_xxz = primBuffer.data(dkoff + 30 * idx + 2);

            auto dx_x_xyy = primBuffer.data(dkoff + 30 * idx + 3);

            auto dx_x_xyz = primBuffer.data(dkoff + 30 * idx + 4);

            auto dx_x_xzz = primBuffer.data(dkoff + 30 * idx + 5);

            auto dx_x_yyy = primBuffer.data(dkoff + 30 * idx + 6);

            auto dx_x_yyz = primBuffer.data(dkoff + 30 * idx + 7);

            auto dx_x_yzz = primBuffer.data(dkoff + 30 * idx + 8);

            auto dx_x_zzz = primBuffer.data(dkoff + 30 * idx + 9);

            auto dx_y_xxx = primBuffer.data(dkoff + 30 * idx + 10);

            auto dx_y_xxy = primBuffer.data(dkoff + 30 * idx + 11);

            auto dx_y_xxz = primBuffer.data(dkoff + 30 * idx + 12);

            auto dx_y_xyy = primBuffer.data(dkoff + 30 * idx + 13);

            auto dx_y_xyz = primBuffer.data(dkoff + 30 * idx + 14);

            auto dx_y_xzz = primBuffer.data(dkoff + 30 * idx + 15);

            auto dx_y_yyy = primBuffer.data(dkoff + 30 * idx + 16);

            auto dx_y_yyz = primBuffer.data(dkoff + 30 * idx + 17);

            auto dx_y_yzz = primBuffer.data(dkoff + 30 * idx + 18);

            auto dx_y_zzz = primBuffer.data(dkoff + 30 * idx + 19);

            auto dx_z_xxx = primBuffer.data(dkoff + 30 * idx + 20);

            auto dx_z_xxy = primBuffer.data(dkoff + 30 * idx + 21);

            auto dx_z_xxz = primBuffer.data(dkoff + 30 * idx + 22);

            auto dx_z_xyy = primBuffer.data(dkoff + 30 * idx + 23);

            auto dx_z_xyz = primBuffer.data(dkoff + 30 * idx + 24);

            auto dx_z_xzz = primBuffer.data(dkoff + 30 * idx + 25);

            auto dx_z_yyy = primBuffer.data(dkoff + 30 * idx + 26);

            auto dx_z_yyz = primBuffer.data(dkoff + 30 * idx + 27);

            auto dx_z_yzz = primBuffer.data(dkoff + 30 * idx + 28);

            auto dx_z_zzz = primBuffer.data(dkoff + 30 * idx + 29);

            auto dy_x_xxx = primBuffer.data(dkoff + 30 * bdim + 30 * idx);

            auto dy_x_xxy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 1);

            auto dy_x_xxz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 2);

            auto dy_x_xyy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 3);

            auto dy_x_xyz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 4);

            auto dy_x_xzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 5);

            auto dy_x_yyy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 6);

            auto dy_x_yyz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 7);

            auto dy_x_yzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 8);

            auto dy_x_zzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 9);

            auto dy_y_xxx = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 10);

            auto dy_y_xxy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 11);

            auto dy_y_xxz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 12);

            auto dy_y_xyy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 13);

            auto dy_y_xyz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 14);

            auto dy_y_xzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 15);

            auto dy_y_yyy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 16);

            auto dy_y_yyz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 17);

            auto dy_y_yzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 18);

            auto dy_y_zzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 19);

            auto dy_z_xxx = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 20);

            auto dy_z_xxy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 21);

            auto dy_z_xxz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 22);

            auto dy_z_xyy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 23);

            auto dy_z_xyz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 24);

            auto dy_z_xzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 25);

            auto dy_z_yyy = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 26);

            auto dy_z_yyz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 27);

            auto dy_z_yzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 28);

            auto dy_z_zzz = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 29);

            auto dz_x_xxx = primBuffer.data(dkoff + 60 * bdim + 30 * idx);

            auto dz_x_xxy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 1);

            auto dz_x_xxz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 2);

            auto dz_x_xyy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 3);

            auto dz_x_xyz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 4);

            auto dz_x_xzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 5);

            auto dz_x_yyy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 6);

            auto dz_x_yyz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 7);

            auto dz_x_yzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 8);

            auto dz_x_zzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 9);

            auto dz_y_xxx = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 10);

            auto dz_y_xxy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 11);

            auto dz_y_xxz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 12);

            auto dz_y_xyy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 13);

            auto dz_y_xyz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 14);

            auto dz_y_xzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 15);

            auto dz_y_yyy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 16);

            auto dz_y_yyz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 17);

            auto dz_y_yzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 18);

            auto dz_y_zzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 19);

            auto dz_z_xxx = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 20);

            auto dz_z_xxy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 21);

            auto dz_z_xxz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 22);

            auto dz_z_xyy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 23);

            auto dz_z_xyz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 24);

            auto dz_z_xzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 25);

            auto dz_z_yyy = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 26);

            auto dz_z_yyz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 27);

            auto dz_z_yzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 28);

            auto dz_z_zzz = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 29);

            // set up pointers to (P|G) integrals

            auto s_x_xxxx = primBuffer.data(soff + 45 * idx);

            auto s_x_xxxy = primBuffer.data(soff + 45 * idx + 1);

            auto s_x_xxxz = primBuffer.data(soff + 45 * idx + 2);

            auto s_x_xxyy = primBuffer.data(soff + 45 * idx + 3);

            auto s_x_xxyz = primBuffer.data(soff + 45 * idx + 4);

            auto s_x_xxzz = primBuffer.data(soff + 45 * idx + 5);

            auto s_x_xyyy = primBuffer.data(soff + 45 * idx + 6);

            auto s_x_xyyz = primBuffer.data(soff + 45 * idx + 7);

            auto s_x_xyzz = primBuffer.data(soff + 45 * idx + 8);

            auto s_x_xzzz = primBuffer.data(soff + 45 * idx + 9);

            auto s_x_yyyy = primBuffer.data(soff + 45 * idx + 10);

            auto s_x_yyyz = primBuffer.data(soff + 45 * idx + 11);

            auto s_x_yyzz = primBuffer.data(soff + 45 * idx + 12);

            auto s_x_yzzz = primBuffer.data(soff + 45 * idx + 13);

            auto s_x_zzzz = primBuffer.data(soff + 45 * idx + 14);

            auto s_y_xxxx = primBuffer.data(soff + 45 * idx + 15);

            auto s_y_xxxy = primBuffer.data(soff + 45 * idx + 16);

            auto s_y_xxxz = primBuffer.data(soff + 45 * idx + 17);

            auto s_y_xxyy = primBuffer.data(soff + 45 * idx + 18);

            auto s_y_xxyz = primBuffer.data(soff + 45 * idx + 19);

            auto s_y_xxzz = primBuffer.data(soff + 45 * idx + 20);

            auto s_y_xyyy = primBuffer.data(soff + 45 * idx + 21);

            auto s_y_xyyz = primBuffer.data(soff + 45 * idx + 22);

            auto s_y_xyzz = primBuffer.data(soff + 45 * idx + 23);

            auto s_y_xzzz = primBuffer.data(soff + 45 * idx + 24);

            auto s_y_yyyy = primBuffer.data(soff + 45 * idx + 25);

            auto s_y_yyyz = primBuffer.data(soff + 45 * idx + 26);

            auto s_y_yyzz = primBuffer.data(soff + 45 * idx + 27);

            auto s_y_yzzz = primBuffer.data(soff + 45 * idx + 28);

            auto s_y_zzzz = primBuffer.data(soff + 45 * idx + 29);

            auto s_z_xxxx = primBuffer.data(soff + 45 * idx + 30);

            auto s_z_xxxy = primBuffer.data(soff + 45 * idx + 31);

            auto s_z_xxxz = primBuffer.data(soff + 45 * idx + 32);

            auto s_z_xxyy = primBuffer.data(soff + 45 * idx + 33);

            auto s_z_xxyz = primBuffer.data(soff + 45 * idx + 34);

            auto s_z_xxzz = primBuffer.data(soff + 45 * idx + 35);

            auto s_z_xyyy = primBuffer.data(soff + 45 * idx + 36);

            auto s_z_xyyz = primBuffer.data(soff + 45 * idx + 37);

            auto s_z_xyzz = primBuffer.data(soff + 45 * idx + 38);

            auto s_z_xzzz = primBuffer.data(soff + 45 * idx + 39);

            auto s_z_yyyy = primBuffer.data(soff + 45 * idx + 40);

            auto s_z_yyyz = primBuffer.data(soff + 45 * idx + 41);

            auto s_z_yyzz = primBuffer.data(soff + 45 * idx + 42);

            auto s_z_yzzz = primBuffer.data(soff + 45 * idx + 43);

            auto s_z_zzzz = primBuffer.data(soff + 45 * idx + 44);

            // set up pointers to (S|G) integrals

            auto s_0_xxxx = primBuffer.data(s1off + 15 * idx);

            auto s_0_xxxy = primBuffer.data(s1off + 15 * idx + 1);

            auto s_0_xxxz = primBuffer.data(s1off + 15 * idx + 2);

            auto s_0_xxyy = primBuffer.data(s1off + 15 * idx + 3);

            auto s_0_xxyz = primBuffer.data(s1off + 15 * idx + 4);

            auto s_0_xxzz = primBuffer.data(s1off + 15 * idx + 5);

            auto s_0_xyyy = primBuffer.data(s1off + 15 * idx + 6);

            auto s_0_xyyz = primBuffer.data(s1off + 15 * idx + 7);

            auto s_0_xyzz = primBuffer.data(s1off + 15 * idx + 8);

            auto s_0_xzzz = primBuffer.data(s1off + 15 * idx + 9);

            auto s_0_yyyy = primBuffer.data(s1off + 15 * idx + 10);

            auto s_0_yyyz = primBuffer.data(s1off + 15 * idx + 11);

            auto s_0_yyzz = primBuffer.data(s1off + 15 * idx + 12);

            auto s_0_yzzz = primBuffer.data(s1off + 15 * idx + 13);

            auto s_0_zzzz = primBuffer.data(s1off + 15 * idx + 14);

            // set up pointers to (S|F) integrals

            auto s_0_xxx = primBuffer.data(skoff + 10 * idx);

            auto s_0_xxy = primBuffer.data(skoff + 10 * idx + 1);

            auto s_0_xxz = primBuffer.data(skoff + 10 * idx + 2);

            auto s_0_xyy = primBuffer.data(skoff + 10 * idx + 3);

            auto s_0_xyz = primBuffer.data(skoff + 10 * idx + 4);

            auto s_0_xzz = primBuffer.data(skoff + 10 * idx + 5);

            auto s_0_yyy = primBuffer.data(skoff + 10 * idx + 6);

            auto s_0_yyz = primBuffer.data(skoff + 10 * idx + 7);

            auto s_0_yzz = primBuffer.data(skoff + 10 * idx + 8);

            auto s_0_zzz = primBuffer.data(skoff + 10 * idx + 9);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xx_xxxx, dx_xx_xxxy,\
                                     dx_xx_xxxz, dx_xx_xxyy, dx_xx_xxyz, dx_xx_xxzz,\
                                     dx_xx_xyyy, dx_xx_xyyz, dx_xx_xyzz, dx_xx_xzzz,\
                                     dx_xx_yyyy, dx_xx_yyyz, dx_xx_yyzz, dx_xx_yzzz,\
                                     dx_xx_zzzz, dx_xy_xxxx, dx_xy_xxxy, dx_xy_xxxz,\
                                     dx_xy_xxyy, dx_xy_xxyz, dx_xy_xxzz, dx_xy_xyyy,\
                                     dx_xy_xyyz, dx_xy_xyzz, dx_xy_xzzz, dx_xy_yyyy,\
                                     dx_xy_yyyz, dx_xy_yyzz, dx_xy_yzzz, dx_xy_zzzz,\
                                     dx_xz_xxxx, dx_xz_xxxy, dx_xz_xxxz, dx_xz_xxyy,\
                                     dx_xz_xxyz, dx_xz_xxzz, dx_xz_xyyy, dx_xz_xyyz,\
                                     dx_xz_xyzz, dx_xz_xzzz, dx_xz_yyyy, dx_xz_yyyz,\
                                     dx_xz_yyzz, dx_xz_yzzz, dx_xz_zzzz, dx_yy_xxxx,\
                                     dx_yy_xxxy, dx_yy_xxxz, dx_yy_xxyy, dx_yy_xxyz,\
                                     dx_yy_xxzz, dx_yy_xyyy, dx_yy_xyyz, dx_yy_xyzz,\
                                     dx_yy_xzzz, dx_yy_yyyy, dx_yy_yyyz, dx_yy_yyzz,\
                                     dx_yy_yzzz, dx_yy_zzzz, dx_yz_xxxx, dx_yz_xxxy,\
                                     dx_yz_xxxz, dx_yz_xxyy, dx_yz_xxyz, dx_yz_xxzz,\
                                     dx_yz_xyyy, dx_yz_xyyz, dx_yz_xyzz, dx_yz_xzzz,\
                                     dx_yz_yyyy, dx_yz_yyyz, dx_yz_yyzz, dx_yz_yzzz,\
                                     dx_yz_zzzz, dx_zz_xxxx, dx_zz_xxxy, dx_zz_xxxz,\
                                     dx_zz_xxyy, dx_zz_xxyz, dx_zz_xxzz, dx_zz_xyyy,\
                                     dx_zz_xyyz, dx_zz_xyzz, dx_zz_xzzz, dx_zz_yyyy,\
                                     dx_zz_yyyz, dx_zz_yyzz, dx_zz_yzzz, dx_zz_zzzz,\
                                     dy_xx_xxxx, dy_xx_xxxy, dy_xx_xxxz, dy_xx_xxyy,\
                                     dy_xx_xxyz, dy_xx_xxzz, dy_xx_xyyy, dy_xx_xyyz,\
                                     dy_xx_xyzz, dy_xx_xzzz, dy_xx_yyyy, dy_xx_yyyz,\
                                     dy_xx_yyzz, dy_xx_yzzz, dy_xx_zzzz, dy_xy_xxxx,\
                                     dy_xy_xxxy, dy_xy_xxxz, dy_xy_xxyy, dy_xy_xxyz,\
                                     dy_xy_xxzz, dy_xy_xyyy, dy_xy_xyyz, dy_xy_xyzz,\
                                     dy_xy_xzzz, dy_xy_yyyy, dy_xy_yyyz, dy_xy_yyzz,\
                                     dy_xy_yzzz, dy_xy_zzzz, dy_xz_xxxx, dy_xz_xxxy,\
                                     dy_xz_xxxz, dy_xz_xxyy, dy_xz_xxyz, dy_xz_xxzz,\
                                     dy_xz_xyyy, dy_xz_xyyz, dy_xz_xyzz, dy_xz_xzzz,\
                                     dy_xz_yyyy, dy_xz_yyyz, dy_xz_yyzz, dy_xz_yzzz,\
                                     dy_xz_zzzz, dy_yy_xxxx, dy_yy_xxxy, dy_yy_xxxz,\
                                     dy_yy_xxyy, dy_yy_xxyz, dy_yy_xxzz, dy_yy_xyyy,\
                                     dy_yy_xyyz, dy_yy_xyzz, dy_yy_xzzz, dy_yy_yyyy,\
                                     dy_yy_yyyz, dy_yy_yyzz, dy_yy_yzzz, dy_yy_zzzz,\
                                     dy_yz_xxxx, dy_yz_xxxy, dy_yz_xxxz, dy_yz_xxyy,\
                                     dy_yz_xxyz, dy_yz_xxzz, dy_yz_xyyy, dy_yz_xyyz,\
                                     dy_yz_xyzz, dy_yz_xzzz, dy_yz_yyyy, dy_yz_yyyz,\
                                     dy_yz_yyzz, dy_yz_yzzz, dy_yz_zzzz, dy_zz_xxxx,\
                                     dy_zz_xxxy, dy_zz_xxxz, dy_zz_xxyy, dy_zz_xxyz,\
                                     dy_zz_xxzz, dy_zz_xyyy, dy_zz_xyyz, dy_zz_xyzz,\
                                     dy_zz_xzzz, dy_zz_yyyy, dy_zz_yyyz, dy_zz_yyzz,\
                                     dy_zz_yzzz, dy_zz_zzzz, dz_xx_xxxx, dz_xx_xxxy,\
                                     dz_xx_xxxz, dz_xx_xxyy, dz_xx_xxyz, dz_xx_xxzz,\
                                     dz_xx_xyyy, dz_xx_xyyz, dz_xx_xyzz, dz_xx_xzzz,\
                                     dz_xx_yyyy, dz_xx_yyyz, dz_xx_yyzz, dz_xx_yzzz,\
                                     dz_xx_zzzz, dz_xy_xxxx, dz_xy_xxxy, dz_xy_xxxz,\
                                     dz_xy_xxyy, dz_xy_xxyz, dz_xy_xxzz, dz_xy_xyyy,\
                                     dz_xy_xyyz, dz_xy_xyzz, dz_xy_xzzz, dz_xy_yyyy,\
                                     dz_xy_yyyz, dz_xy_yyzz, dz_xy_yzzz, dz_xy_zzzz,\
                                     dz_xz_xxxx, dz_xz_xxxy, dz_xz_xxxz, dz_xz_xxyy,\
                                     dz_xz_xxyz, dz_xz_xxzz, dz_xz_xyyy, dz_xz_xyyz,\
                                     dz_xz_xyzz, dz_xz_xzzz, dz_xz_yyyy, dz_xz_yyyz,\
                                     dz_xz_yyzz, dz_xz_yzzz, dz_xz_zzzz, dz_yy_xxxx,\
                                     dz_yy_xxxy, dz_yy_xxxz, dz_yy_xxyy, dz_yy_xxyz,\
                                     dz_yy_xxzz, dz_yy_xyyy, dz_yy_xyyz, dz_yy_xyzz,\
                                     dz_yy_xzzz, dz_yy_yyyy, dz_yy_yyyz, dz_yy_yyzz,\
                                     dz_yy_yzzz, dz_yy_zzzz, dz_yz_xxxx, dz_yz_xxxy,\
                                     dz_yz_xxxz, dz_yz_xxyy, dz_yz_xxyz, dz_yz_xxzz,\
                                     dz_yz_xyyy, dz_yz_xyyz, dz_yz_xyzz, dz_yz_xzzz,\
                                     dz_yz_yyyy, dz_yz_yyyz, dz_yz_yyzz, dz_yz_yzzz,\
                                     dz_yz_zzzz, dz_zz_xxxx, dz_zz_xxxy, dz_zz_xxxz,\
                                     dz_zz_xxyy, dz_zz_xxyz, dz_zz_xxzz, dz_zz_xyyy,\
                                     dz_zz_xyyz, dz_zz_xyzz, dz_zz_xzzz, dz_zz_yyyy,\
                                     dz_zz_yyyz, dz_zz_yyzz, dz_zz_yzzz, dz_zz_zzzz,\
                                     dx_x_xxxx, dx_x_xxxy, dx_x_xxxz, dx_x_xxyy,\
                                     dx_x_xxyz, dx_x_xxzz, dx_x_xyyy, dx_x_xyyz,\
                                     dx_x_xyzz, dx_x_xzzz, dx_x_yyyy, dx_x_yyyz,\
                                     dx_x_yyzz, dx_x_yzzz, dx_x_zzzz, dx_y_xxxx,\
                                     dx_y_xxxy, dx_y_xxxz, dx_y_xxyy, dx_y_xxyz,\
                                     dx_y_xxzz, dx_y_xyyy, dx_y_xyyz, dx_y_xyzz,\
                                     dx_y_xzzz, dx_y_yyyy, dx_y_yyyz, dx_y_yyzz,\
                                     dx_y_yzzz, dx_y_zzzz, dx_z_xxxx, dx_z_xxxy,\
                                     dx_z_xxxz, dx_z_xxyy, dx_z_xxyz, dx_z_xxzz,\
                                     dx_z_xyyy, dx_z_xyyz, dx_z_xyzz, dx_z_xzzz,\
                                     dx_z_yyyy, dx_z_yyyz, dx_z_yyzz, dx_z_yzzz,\
                                     dx_z_zzzz, dy_x_xxxx, dy_x_xxxy, dy_x_xxxz,\
                                     dy_x_xxyy, dy_x_xxyz, dy_x_xxzz, dy_x_xyyy,\
                                     dy_x_xyyz, dy_x_xyzz, dy_x_xzzz, dy_x_yyyy,\
                                     dy_x_yyyz, dy_x_yyzz, dy_x_yzzz, dy_x_zzzz,\
                                     dy_y_xxxx, dy_y_xxxy, dy_y_xxxz, dy_y_xxyy,\
                                     dy_y_xxyz, dy_y_xxzz, dy_y_xyyy, dy_y_xyyz,\
                                     dy_y_xyzz, dy_y_xzzz, dy_y_yyyy, dy_y_yyyz,\
                                     dy_y_yyzz, dy_y_yzzz, dy_y_zzzz, dy_z_xxxx,\
                                     dy_z_xxxy, dy_z_xxxz, dy_z_xxyy, dy_z_xxyz,\
                                     dy_z_xxzz, dy_z_xyyy, dy_z_xyyz, dy_z_xyzz,\
                                     dy_z_xzzz, dy_z_yyyy, dy_z_yyyz, dy_z_yyzz,\
                                     dy_z_yzzz, dy_z_zzzz, dz_x_xxxx, dz_x_xxxy,\
                                     dz_x_xxxz, dz_x_xxyy, dz_x_xxyz, dz_x_xxzz,\
                                     dz_x_xyyy, dz_x_xyyz, dz_x_xyzz, dz_x_xzzz,\
                                     dz_x_yyyy, dz_x_yyyz, dz_x_yyzz, dz_x_yzzz,\
                                     dz_x_zzzz, dz_y_xxxx, dz_y_xxxy, dz_y_xxxz,\
                                     dz_y_xxyy, dz_y_xxyz, dz_y_xxzz, dz_y_xyyy,\
                                     dz_y_xyyz, dz_y_xyzz, dz_y_xzzz, dz_y_yyyy,\
                                     dz_y_yyyz, dz_y_yyzz, dz_y_yzzz, dz_y_zzzz,\
                                     dz_z_xxxx, dz_z_xxxy, dz_z_xxxz, dz_z_xxyy,\
                                     dz_z_xxyz, dz_z_xxzz, dz_z_xyyy, dz_z_xyyz,\
                                     dz_z_xyzz, dz_z_xzzz, dz_z_yyyy, dz_z_yyyz,\
                                     dz_z_yyzz, dz_z_yzzz, dz_z_zzzz, dx_0_xxxx,\
                                     dx_0_xxxy, dx_0_xxxz, dx_0_xxyy, dx_0_xxyz,\
                                     dx_0_xxzz, dx_0_xyyy, dx_0_xyyz, dx_0_xyzz,\
                                     dx_0_xzzz, dx_0_yyyy, dx_0_yyyz, dx_0_yyzz,\
                                     dx_0_yzzz, dx_0_zzzz, dy_0_xxxx, dy_0_xxxy,\
                                     dy_0_xxxz, dy_0_xxyy, dy_0_xxyz, dy_0_xxzz,\
                                     dy_0_xyyy, dy_0_xyyz, dy_0_xyzz, dy_0_xzzz,\
                                     dy_0_yyyy, dy_0_yyyz, dy_0_yyzz, dy_0_yzzz,\
                                     dy_0_zzzz, dz_0_xxxx, dz_0_xxxy, dz_0_xxxz,\
                                     dz_0_xxyy, dz_0_xxyz, dz_0_xxzz, dz_0_xyyy,\
                                     dz_0_xyyz, dz_0_xyzz, dz_0_xzzz, dz_0_yyyy,\
                                     dz_0_yyyz, dz_0_yyzz, dz_0_yzzz, dz_0_zzzz,\
                                     dx_x_xxx, dx_x_xxy, dx_x_xxz, dx_x_xyy, dx_x_xyz,\
                                     dx_x_xzz, dx_x_yyy, dx_x_yyz, dx_x_yzz, dx_x_zzz,\
                                     dx_y_xxx, dx_y_xxy, dx_y_xxz, dx_y_xyy, dx_y_xyz,\
                                     dx_y_xzz, dx_y_yyy, dx_y_yyz, dx_y_yzz, dx_y_zzz,\
                                     dx_z_xxx, dx_z_xxy, dx_z_xxz, dx_z_xyy, dx_z_xyz,\
                                     dx_z_xzz, dx_z_yyy, dx_z_yyz, dx_z_yzz, dx_z_zzz,\
                                     dy_x_xxx, dy_x_xxy, dy_x_xxz, dy_x_xyy, dy_x_xyz,\
                                     dy_x_xzz, dy_x_yyy, dy_x_yyz, dy_x_yzz, dy_x_zzz,\
                                     dy_y_xxx, dy_y_xxy, dy_y_xxz, dy_y_xyy, dy_y_xyz,\
                                     dy_y_xzz, dy_y_yyy, dy_y_yyz, dy_y_yzz, dy_y_zzz,\
                                     dy_z_xxx, dy_z_xxy, dy_z_xxz, dy_z_xyy, dy_z_xyz,\
                                     dy_z_xzz, dy_z_yyy, dy_z_yyz, dy_z_yzz, dy_z_zzz,\
                                     dz_x_xxx, dz_x_xxy, dz_x_xxz, dz_x_xyy, dz_x_xyz,\
                                     dz_x_xzz, dz_x_yyy, dz_x_yyz, dz_x_yzz, dz_x_zzz,\
                                     dz_y_xxx, dz_y_xxy, dz_y_xxz, dz_y_xyy, dz_y_xyz,\
                                     dz_y_xzz, dz_y_yyy, dz_y_yyz, dz_y_yzz, dz_y_zzz,\
                                     dz_z_xxx, dz_z_xxy, dz_z_xxz, dz_z_xyy, dz_z_xyz,\
                                     dz_z_xzz, dz_z_yyy, dz_z_yyz, dz_z_yzz, dz_z_zzz,\
                                     s_x_xxxx, s_x_xxxy, s_x_xxxz, s_x_xxyy, s_x_xxyz,\
                                     s_x_xxzz, s_x_xyyy, s_x_xyyz, s_x_xyzz, s_x_xzzz,\
                                     s_x_yyyy, s_x_yyyz, s_x_yyzz, s_x_yzzz, s_x_zzzz,\
                                     s_y_xxxx, s_y_xxxy, s_y_xxxz, s_y_xxyy, s_y_xxyz,\
                                     s_y_xxzz, s_y_xyyy, s_y_xyyz, s_y_xyzz, s_y_xzzz,\
                                     s_y_yyyy, s_y_yyyz, s_y_yyzz, s_y_yzzz, s_y_zzzz,\
                                     s_z_xxxx, s_z_xxxy, s_z_xxxz, s_z_xxyy, s_z_xxyz,\
                                     s_z_xxzz, s_z_xyyy, s_z_xyyz, s_z_xyzz, s_z_xzzz,\
                                     s_z_yyyy, s_z_yyyz, s_z_yyzz, s_z_yzzz, s_z_zzzz,\
                                     s_0_xxxx, s_0_xxxy, s_0_xxxz, s_0_xxyy, s_0_xxyz,\
                                     s_0_xxzz, s_0_xyyy, s_0_xyyz, s_0_xyzz, s_0_xzzz,\
                                     s_0_yyyy, s_0_yyyz, s_0_yyzz, s_0_yzzz, s_0_zzzz,\
                                     s_0_xxx, s_0_xxy, s_0_xxz, s_0_xyy, s_0_xyz,\
                                     s_0_xzz, s_0_yyy, s_0_yyz, s_0_yzz, s_0_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_x_xxxx[j] = fr * s_0_xxxx[j] + f2t * 4.0 * s_0_xxx[j];

                s_x_xxxy[j] = fr * s_0_xxxy[j] + f2t * 3.0 * s_0_xxy[j];

                s_x_xxxz[j] = fr * s_0_xxxz[j] + f2t * 3.0 * s_0_xxz[j];

                s_x_xxyy[j] = fr * s_0_xxyy[j] + f2t * 2.0 * s_0_xyy[j];

                s_x_xxyz[j] = fr * s_0_xxyz[j] + f2t * 2.0 * s_0_xyz[j];

                s_x_xxzz[j] = fr * s_0_xxzz[j] + f2t * 2.0 * s_0_xzz[j];

                s_x_xyyy[j] = fr * s_0_xyyy[j] + f2t * s_0_yyy[j];

                s_x_xyyz[j] = fr * s_0_xyyz[j] + f2t * s_0_yyz[j];

                s_x_xyzz[j] = fr * s_0_xyzz[j] + f2t * s_0_yzz[j];

                s_x_xzzz[j] = fr * s_0_xzzz[j] + f2t * s_0_zzz[j];

                s_x_yyyy[j] = fr * s_0_yyyy[j];

                s_x_yyyz[j] = fr * s_0_yyyz[j];

                s_x_yyzz[j] = fr * s_0_yyzz[j];

                s_x_yzzz[j] = fr * s_0_yzzz[j];

                s_x_zzzz[j] = fr * s_0_zzzz[j];

                // leading y component

                fr = pay[j];

                s_y_xxxx[j] = fr * s_0_xxxx[j];

                s_y_xxxy[j] = fr * s_0_xxxy[j] + f2t * s_0_xxx[j];

                s_y_xxxz[j] = fr * s_0_xxxz[j];

                s_y_xxyy[j] = fr * s_0_xxyy[j] + f2t * 2.0 * s_0_xxy[j];

                s_y_xxyz[j] = fr * s_0_xxyz[j] + f2t * s_0_xxz[j];

                s_y_xxzz[j] = fr * s_0_xxzz[j];

                s_y_xyyy[j] = fr * s_0_xyyy[j] + f2t * 3.0 * s_0_xyy[j];

                s_y_xyyz[j] = fr * s_0_xyyz[j] + f2t * 2.0 * s_0_xyz[j];

                s_y_xyzz[j] = fr * s_0_xyzz[j] + f2t * s_0_xzz[j];

                s_y_xzzz[j] = fr * s_0_xzzz[j];

                s_y_yyyy[j] = fr * s_0_yyyy[j] + f2t * 4.0 * s_0_yyy[j];

                s_y_yyyz[j] = fr * s_0_yyyz[j] + f2t * 3.0 * s_0_yyz[j];

                s_y_yyzz[j] = fr * s_0_yyzz[j] + f2t * 2.0 * s_0_yzz[j];

                s_y_yzzz[j] = fr * s_0_yzzz[j] + f2t * s_0_zzz[j];

                s_y_zzzz[j] = fr * s_0_zzzz[j];

                // leading z component

                fr = paz[j];

                s_z_xxxx[j] = fr * s_0_xxxx[j];

                s_z_xxxy[j] = fr * s_0_xxxy[j];

                s_z_xxxz[j] = fr * s_0_xxxz[j] + f2t * s_0_xxx[j];

                s_z_xxyy[j] = fr * s_0_xxyy[j];

                s_z_xxyz[j] = fr * s_0_xxyz[j] + f2t * s_0_xxy[j];

                s_z_xxzz[j] = fr * s_0_xxzz[j] + f2t * 2.0 * s_0_xxz[j];

                s_z_xyyy[j] = fr * s_0_xyyy[j];

                s_z_xyyz[j] = fr * s_0_xyyz[j] + f2t * s_0_xyy[j];

                s_z_xyzz[j] = fr * s_0_xyzz[j] + f2t * 2.0 * s_0_xyz[j];

                s_z_xzzz[j] = fr * s_0_xzzz[j] + f2t * 3.0 * s_0_xzz[j];

                s_z_yyyy[j] = fr * s_0_yyyy[j];

                s_z_yyyz[j] = fr * s_0_yyyz[j] + f2t * s_0_yyy[j];

                s_z_yyzz[j] = fr * s_0_yyzz[j] + f2t * 2.0 * s_0_yyz[j];

                s_z_yzzz[j] = fr * s_0_yzzz[j] + f2t * 3.0 * s_0_yzz[j];

                s_z_zzzz[j] = fr * s_0_zzzz[j] + f2t * 4.0 * s_0_zzz[j];

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xx_xxxx[j] = fr * dx_x_xxxx[j] + f2t * (dx_0_xxxx[j] + 4.0 * dx_x_xxx[j] + s_x_xxxx[j]);

                dy_xx_xxxx[j] = fr * dy_x_xxxx[j] + f2t * (dy_0_xxxx[j] + 4.0 * dy_x_xxx[j]);

                dz_xx_xxxx[j] = fr * dz_x_xxxx[j] + f2t * (dz_0_xxxx[j] + 4.0 * dz_x_xxx[j]);

                dx_xx_xxxy[j] = fr * dx_x_xxxy[j] + f2t * (dx_0_xxxy[j] + 3.0 * dx_x_xxy[j] + s_x_xxxy[j]);

                dy_xx_xxxy[j] = fr * dy_x_xxxy[j] + f2t * (dy_0_xxxy[j] + 3.0 * dy_x_xxy[j]);

                dz_xx_xxxy[j] = fr * dz_x_xxxy[j] + f2t * (dz_0_xxxy[j] + 3.0 * dz_x_xxy[j]);

                dx_xx_xxxz[j] = fr * dx_x_xxxz[j] + f2t * (dx_0_xxxz[j] + 3.0 * dx_x_xxz[j] + s_x_xxxz[j]);

                dy_xx_xxxz[j] = fr * dy_x_xxxz[j] + f2t * (dy_0_xxxz[j] + 3.0 * dy_x_xxz[j]);

                dz_xx_xxxz[j] = fr * dz_x_xxxz[j] + f2t * (dz_0_xxxz[j] + 3.0 * dz_x_xxz[j]);

                dx_xx_xxyy[j] = fr * dx_x_xxyy[j] + f2t * (dx_0_xxyy[j] + 2.0 * dx_x_xyy[j] + s_x_xxyy[j]);

                dy_xx_xxyy[j] = fr * dy_x_xxyy[j] + f2t * (dy_0_xxyy[j] + 2.0 * dy_x_xyy[j]);

                dz_xx_xxyy[j] = fr * dz_x_xxyy[j] + f2t * (dz_0_xxyy[j] + 2.0 * dz_x_xyy[j]);

                dx_xx_xxyz[j] = fr * dx_x_xxyz[j] + f2t * (dx_0_xxyz[j] + 2.0 * dx_x_xyz[j] + s_x_xxyz[j]);

                dy_xx_xxyz[j] = fr * dy_x_xxyz[j] + f2t * (dy_0_xxyz[j] + 2.0 * dy_x_xyz[j]);

                dz_xx_xxyz[j] = fr * dz_x_xxyz[j] + f2t * (dz_0_xxyz[j] + 2.0 * dz_x_xyz[j]);

                dx_xx_xxzz[j] = fr * dx_x_xxzz[j] + f2t * (dx_0_xxzz[j] + 2.0 * dx_x_xzz[j] + s_x_xxzz[j]);

                dy_xx_xxzz[j] = fr * dy_x_xxzz[j] + f2t * (dy_0_xxzz[j] + 2.0 * dy_x_xzz[j]);

                dz_xx_xxzz[j] = fr * dz_x_xxzz[j] + f2t * (dz_0_xxzz[j] + 2.0 * dz_x_xzz[j]);

                dx_xx_xyyy[j] = fr * dx_x_xyyy[j] + f2t * (dx_0_xyyy[j] + dx_x_yyy[j] + s_x_xyyy[j]);

                dy_xx_xyyy[j] = fr * dy_x_xyyy[j] + f2t * (dy_0_xyyy[j] + dy_x_yyy[j]);

                dz_xx_xyyy[j] = fr * dz_x_xyyy[j] + f2t * (dz_0_xyyy[j] + dz_x_yyy[j]);

                dx_xx_xyyz[j] = fr * dx_x_xyyz[j] + f2t * (dx_0_xyyz[j] + dx_x_yyz[j] + s_x_xyyz[j]);

                dy_xx_xyyz[j] = fr * dy_x_xyyz[j] + f2t * (dy_0_xyyz[j] + dy_x_yyz[j]);

                dz_xx_xyyz[j] = fr * dz_x_xyyz[j] + f2t * (dz_0_xyyz[j] + dz_x_yyz[j]);

                dx_xx_xyzz[j] = fr * dx_x_xyzz[j] + f2t * (dx_0_xyzz[j] + dx_x_yzz[j] + s_x_xyzz[j]);

                dy_xx_xyzz[j] = fr * dy_x_xyzz[j] + f2t * (dy_0_xyzz[j] + dy_x_yzz[j]);

                dz_xx_xyzz[j] = fr * dz_x_xyzz[j] + f2t * (dz_0_xyzz[j] + dz_x_yzz[j]);

                dx_xx_xzzz[j] = fr * dx_x_xzzz[j] + f2t * (dx_0_xzzz[j] + dx_x_zzz[j] + s_x_xzzz[j]);

                dy_xx_xzzz[j] = fr * dy_x_xzzz[j] + f2t * (dy_0_xzzz[j] + dy_x_zzz[j]);

                dz_xx_xzzz[j] = fr * dz_x_xzzz[j] + f2t * (dz_0_xzzz[j] + dz_x_zzz[j]);

                dx_xx_yyyy[j] = fr * dx_x_yyyy[j] + f2t * (dx_0_yyyy[j] + s_x_yyyy[j]);

                dy_xx_yyyy[j] = fr * dy_x_yyyy[j] + f2t * dy_0_yyyy[j];

                dz_xx_yyyy[j] = fr * dz_x_yyyy[j] + f2t * dz_0_yyyy[j];

                dx_xx_yyyz[j] = fr * dx_x_yyyz[j] + f2t * (dx_0_yyyz[j] + s_x_yyyz[j]);

                dy_xx_yyyz[j] = fr * dy_x_yyyz[j] + f2t * dy_0_yyyz[j];

                dz_xx_yyyz[j] = fr * dz_x_yyyz[j] + f2t * dz_0_yyyz[j];

                dx_xx_yyzz[j] = fr * dx_x_yyzz[j] + f2t * (dx_0_yyzz[j] + s_x_yyzz[j]);

                dy_xx_yyzz[j] = fr * dy_x_yyzz[j] + f2t * dy_0_yyzz[j];

                dz_xx_yyzz[j] = fr * dz_x_yyzz[j] + f2t * dz_0_yyzz[j];

                dx_xx_yzzz[j] = fr * dx_x_yzzz[j] + f2t * (dx_0_yzzz[j] + s_x_yzzz[j]);

                dy_xx_yzzz[j] = fr * dy_x_yzzz[j] + f2t * dy_0_yzzz[j];

                dz_xx_yzzz[j] = fr * dz_x_yzzz[j] + f2t * dz_0_yzzz[j];

                dx_xx_zzzz[j] = fr * dx_x_zzzz[j] + f2t * (dx_0_zzzz[j] + s_x_zzzz[j]);

                dy_xx_zzzz[j] = fr * dy_x_zzzz[j] + f2t * dy_0_zzzz[j];

                dz_xx_zzzz[j] = fr * dz_x_zzzz[j] + f2t * dz_0_zzzz[j];

                dx_xy_xxxx[j] = fr * dx_y_xxxx[j] + f2t * (4.0 * dx_y_xxx[j] + s_y_xxxx[j]);

                dy_xy_xxxx[j] = fr * dy_y_xxxx[j] + f2t * 4.0 * dy_y_xxx[j];

                dz_xy_xxxx[j] = fr * dz_y_xxxx[j] + f2t * 4.0 * dz_y_xxx[j];

                dx_xy_xxxy[j] = fr * dx_y_xxxy[j] + f2t * (3.0 * dx_y_xxy[j] + s_y_xxxy[j]);

                dy_xy_xxxy[j] = fr * dy_y_xxxy[j] + f2t * 3.0 * dy_y_xxy[j];

                dz_xy_xxxy[j] = fr * dz_y_xxxy[j] + f2t * 3.0 * dz_y_xxy[j];

                dx_xy_xxxz[j] = fr * dx_y_xxxz[j] + f2t * (3.0 * dx_y_xxz[j] + s_y_xxxz[j]);

                dy_xy_xxxz[j] = fr * dy_y_xxxz[j] + f2t * 3.0 * dy_y_xxz[j];

                dz_xy_xxxz[j] = fr * dz_y_xxxz[j] + f2t * 3.0 * dz_y_xxz[j];

                dx_xy_xxyy[j] = fr * dx_y_xxyy[j] + f2t * (2.0 * dx_y_xyy[j] + s_y_xxyy[j]);

                dy_xy_xxyy[j] = fr * dy_y_xxyy[j] + f2t * 2.0 * dy_y_xyy[j];

                dz_xy_xxyy[j] = fr * dz_y_xxyy[j] + f2t * 2.0 * dz_y_xyy[j];

                dx_xy_xxyz[j] = fr * dx_y_xxyz[j] + f2t * (2.0 * dx_y_xyz[j] + s_y_xxyz[j]);

                dy_xy_xxyz[j] = fr * dy_y_xxyz[j] + f2t * 2.0 * dy_y_xyz[j];

                dz_xy_xxyz[j] = fr * dz_y_xxyz[j] + f2t * 2.0 * dz_y_xyz[j];

                dx_xy_xxzz[j] = fr * dx_y_xxzz[j] + f2t * (2.0 * dx_y_xzz[j] + s_y_xxzz[j]);

                dy_xy_xxzz[j] = fr * dy_y_xxzz[j] + f2t * 2.0 * dy_y_xzz[j];

                dz_xy_xxzz[j] = fr * dz_y_xxzz[j] + f2t * 2.0 * dz_y_xzz[j];

                dx_xy_xyyy[j] = fr * dx_y_xyyy[j] + f2t * (dx_y_yyy[j] + s_y_xyyy[j]);

                dy_xy_xyyy[j] = fr * dy_y_xyyy[j] + f2t * dy_y_yyy[j];

                dz_xy_xyyy[j] = fr * dz_y_xyyy[j] + f2t * dz_y_yyy[j];

                dx_xy_xyyz[j] = fr * dx_y_xyyz[j] + f2t * (dx_y_yyz[j] + s_y_xyyz[j]);

                dy_xy_xyyz[j] = fr * dy_y_xyyz[j] + f2t * dy_y_yyz[j];

                dz_xy_xyyz[j] = fr * dz_y_xyyz[j] + f2t * dz_y_yyz[j];

                dx_xy_xyzz[j] = fr * dx_y_xyzz[j] + f2t * (dx_y_yzz[j] + s_y_xyzz[j]);

                dy_xy_xyzz[j] = fr * dy_y_xyzz[j] + f2t * dy_y_yzz[j];

                dz_xy_xyzz[j] = fr * dz_y_xyzz[j] + f2t * dz_y_yzz[j];

                dx_xy_xzzz[j] = fr * dx_y_xzzz[j] + f2t * (dx_y_zzz[j] + s_y_xzzz[j]);

                dy_xy_xzzz[j] = fr * dy_y_xzzz[j] + f2t * dy_y_zzz[j];

                dz_xy_xzzz[j] = fr * dz_y_xzzz[j] + f2t * dz_y_zzz[j];

                dx_xy_yyyy[j] = fr * dx_y_yyyy[j] + f2t * s_y_yyyy[j];

                dy_xy_yyyy[j] = fr * dy_y_yyyy[j];

                dz_xy_yyyy[j] = fr * dz_y_yyyy[j];

                dx_xy_yyyz[j] = fr * dx_y_yyyz[j] + f2t * s_y_yyyz[j];

                dy_xy_yyyz[j] = fr * dy_y_yyyz[j];

                dz_xy_yyyz[j] = fr * dz_y_yyyz[j];

                dx_xy_yyzz[j] = fr * dx_y_yyzz[j] + f2t * s_y_yyzz[j];

                dy_xy_yyzz[j] = fr * dy_y_yyzz[j];

                dz_xy_yyzz[j] = fr * dz_y_yyzz[j];

                dx_xy_yzzz[j] = fr * dx_y_yzzz[j] + f2t * s_y_yzzz[j];

                dy_xy_yzzz[j] = fr * dy_y_yzzz[j];

                dz_xy_yzzz[j] = fr * dz_y_yzzz[j];

                dx_xy_zzzz[j] = fr * dx_y_zzzz[j] + f2t * s_y_zzzz[j];

                dy_xy_zzzz[j] = fr * dy_y_zzzz[j];

                dz_xy_zzzz[j] = fr * dz_y_zzzz[j];

                dx_xz_xxxx[j] = fr * dx_z_xxxx[j] + f2t * (4.0 * dx_z_xxx[j] + s_z_xxxx[j]);

                dy_xz_xxxx[j] = fr * dy_z_xxxx[j] + f2t * 4.0 * dy_z_xxx[j];

                dz_xz_xxxx[j] = fr * dz_z_xxxx[j] + f2t * 4.0 * dz_z_xxx[j];

                dx_xz_xxxy[j] = fr * dx_z_xxxy[j] + f2t * (3.0 * dx_z_xxy[j] + s_z_xxxy[j]);

                dy_xz_xxxy[j] = fr * dy_z_xxxy[j] + f2t * 3.0 * dy_z_xxy[j];

                dz_xz_xxxy[j] = fr * dz_z_xxxy[j] + f2t * 3.0 * dz_z_xxy[j];

                dx_xz_xxxz[j] = fr * dx_z_xxxz[j] + f2t * (3.0 * dx_z_xxz[j] + s_z_xxxz[j]);

                dy_xz_xxxz[j] = fr * dy_z_xxxz[j] + f2t * 3.0 * dy_z_xxz[j];

                dz_xz_xxxz[j] = fr * dz_z_xxxz[j] + f2t * 3.0 * dz_z_xxz[j];

                dx_xz_xxyy[j] = fr * dx_z_xxyy[j] + f2t * (2.0 * dx_z_xyy[j] + s_z_xxyy[j]);

                dy_xz_xxyy[j] = fr * dy_z_xxyy[j] + f2t * 2.0 * dy_z_xyy[j];

                dz_xz_xxyy[j] = fr * dz_z_xxyy[j] + f2t * 2.0 * dz_z_xyy[j];

                dx_xz_xxyz[j] = fr * dx_z_xxyz[j] + f2t * (2.0 * dx_z_xyz[j] + s_z_xxyz[j]);

                dy_xz_xxyz[j] = fr * dy_z_xxyz[j] + f2t * 2.0 * dy_z_xyz[j];

                dz_xz_xxyz[j] = fr * dz_z_xxyz[j] + f2t * 2.0 * dz_z_xyz[j];

                dx_xz_xxzz[j] = fr * dx_z_xxzz[j] + f2t * (2.0 * dx_z_xzz[j] + s_z_xxzz[j]);

                dy_xz_xxzz[j] = fr * dy_z_xxzz[j] + f2t * 2.0 * dy_z_xzz[j];

                dz_xz_xxzz[j] = fr * dz_z_xxzz[j] + f2t * 2.0 * dz_z_xzz[j];

                dx_xz_xyyy[j] = fr * dx_z_xyyy[j] + f2t * (dx_z_yyy[j] + s_z_xyyy[j]);

                dy_xz_xyyy[j] = fr * dy_z_xyyy[j] + f2t * dy_z_yyy[j];

                dz_xz_xyyy[j] = fr * dz_z_xyyy[j] + f2t * dz_z_yyy[j];

                dx_xz_xyyz[j] = fr * dx_z_xyyz[j] + f2t * (dx_z_yyz[j] + s_z_xyyz[j]);

                dy_xz_xyyz[j] = fr * dy_z_xyyz[j] + f2t * dy_z_yyz[j];

                dz_xz_xyyz[j] = fr * dz_z_xyyz[j] + f2t * dz_z_yyz[j];

                dx_xz_xyzz[j] = fr * dx_z_xyzz[j] + f2t * (dx_z_yzz[j] + s_z_xyzz[j]);

                dy_xz_xyzz[j] = fr * dy_z_xyzz[j] + f2t * dy_z_yzz[j];

                dz_xz_xyzz[j] = fr * dz_z_xyzz[j] + f2t * dz_z_yzz[j];

                dx_xz_xzzz[j] = fr * dx_z_xzzz[j] + f2t * (dx_z_zzz[j] + s_z_xzzz[j]);

                dy_xz_xzzz[j] = fr * dy_z_xzzz[j] + f2t * dy_z_zzz[j];

                dz_xz_xzzz[j] = fr * dz_z_xzzz[j] + f2t * dz_z_zzz[j];

                dx_xz_yyyy[j] = fr * dx_z_yyyy[j] + f2t * s_z_yyyy[j];

                dy_xz_yyyy[j] = fr * dy_z_yyyy[j];

                dz_xz_yyyy[j] = fr * dz_z_yyyy[j];

                dx_xz_yyyz[j] = fr * dx_z_yyyz[j] + f2t * s_z_yyyz[j];

                dy_xz_yyyz[j] = fr * dy_z_yyyz[j];

                dz_xz_yyyz[j] = fr * dz_z_yyyz[j];

                dx_xz_yyzz[j] = fr * dx_z_yyzz[j] + f2t * s_z_yyzz[j];

                dy_xz_yyzz[j] = fr * dy_z_yyzz[j];

                dz_xz_yyzz[j] = fr * dz_z_yyzz[j];

                dx_xz_yzzz[j] = fr * dx_z_yzzz[j] + f2t * s_z_yzzz[j];

                dy_xz_yzzz[j] = fr * dy_z_yzzz[j];

                dz_xz_yzzz[j] = fr * dz_z_yzzz[j];

                dx_xz_zzzz[j] = fr * dx_z_zzzz[j] + f2t * s_z_zzzz[j];

                dy_xz_zzzz[j] = fr * dy_z_zzzz[j];

                dz_xz_zzzz[j] = fr * dz_z_zzzz[j];

                // leading y component

                fr = pay[j];

                dx_yy_xxxx[j] = fr * dx_y_xxxx[j] + f2t * dx_0_xxxx[j];

                dy_yy_xxxx[j] = fr * dy_y_xxxx[j] + f2t * (dy_0_xxxx[j] + s_y_xxxx[j]);

                dz_yy_xxxx[j] = fr * dz_y_xxxx[j] + f2t * dz_0_xxxx[j];

                dx_yy_xxxy[j] = fr * dx_y_xxxy[j] + f2t * (dx_0_xxxy[j] + dx_y_xxx[j]);

                dy_yy_xxxy[j] = fr * dy_y_xxxy[j] + f2t * (dy_0_xxxy[j] + dy_y_xxx[j] + s_y_xxxy[j]);

                dz_yy_xxxy[j] = fr * dz_y_xxxy[j] + f2t * (dz_0_xxxy[j] + dz_y_xxx[j]);

                dx_yy_xxxz[j] = fr * dx_y_xxxz[j] + f2t * dx_0_xxxz[j];

                dy_yy_xxxz[j] = fr * dy_y_xxxz[j] + f2t * (dy_0_xxxz[j] + s_y_xxxz[j]);

                dz_yy_xxxz[j] = fr * dz_y_xxxz[j] + f2t * dz_0_xxxz[j];

                dx_yy_xxyy[j] = fr * dx_y_xxyy[j] + f2t * (dx_0_xxyy[j] + 2.0 * dx_y_xxy[j]);

                dy_yy_xxyy[j] = fr * dy_y_xxyy[j] + f2t * (dy_0_xxyy[j] + 2.0 * dy_y_xxy[j] + s_y_xxyy[j]);

                dz_yy_xxyy[j] = fr * dz_y_xxyy[j] + f2t * (dz_0_xxyy[j] + 2.0 * dz_y_xxy[j]);

                dx_yy_xxyz[j] = fr * dx_y_xxyz[j] + f2t * (dx_0_xxyz[j] + dx_y_xxz[j]);

                dy_yy_xxyz[j] = fr * dy_y_xxyz[j] + f2t * (dy_0_xxyz[j] + dy_y_xxz[j] + s_y_xxyz[j]);

                dz_yy_xxyz[j] = fr * dz_y_xxyz[j] + f2t * (dz_0_xxyz[j] + dz_y_xxz[j]);

                dx_yy_xxzz[j] = fr * dx_y_xxzz[j] + f2t * dx_0_xxzz[j];

                dy_yy_xxzz[j] = fr * dy_y_xxzz[j] + f2t * (dy_0_xxzz[j] + s_y_xxzz[j]);

                dz_yy_xxzz[j] = fr * dz_y_xxzz[j] + f2t * dz_0_xxzz[j];

                dx_yy_xyyy[j] = fr * dx_y_xyyy[j] + f2t * (dx_0_xyyy[j] + 3.0 * dx_y_xyy[j]);

                dy_yy_xyyy[j] = fr * dy_y_xyyy[j] + f2t * (dy_0_xyyy[j] + 3.0 * dy_y_xyy[j] + s_y_xyyy[j]);

                dz_yy_xyyy[j] = fr * dz_y_xyyy[j] + f2t * (dz_0_xyyy[j] + 3.0 * dz_y_xyy[j]);

                dx_yy_xyyz[j] = fr * dx_y_xyyz[j] + f2t * (dx_0_xyyz[j] + 2.0 * dx_y_xyz[j]);

                dy_yy_xyyz[j] = fr * dy_y_xyyz[j] + f2t * (dy_0_xyyz[j] + 2.0 * dy_y_xyz[j] + s_y_xyyz[j]);

                dz_yy_xyyz[j] = fr * dz_y_xyyz[j] + f2t * (dz_0_xyyz[j] + 2.0 * dz_y_xyz[j]);

                dx_yy_xyzz[j] = fr * dx_y_xyzz[j] + f2t * (dx_0_xyzz[j] + dx_y_xzz[j]);

                dy_yy_xyzz[j] = fr * dy_y_xyzz[j] + f2t * (dy_0_xyzz[j] + dy_y_xzz[j] + s_y_xyzz[j]);

                dz_yy_xyzz[j] = fr * dz_y_xyzz[j] + f2t * (dz_0_xyzz[j] + dz_y_xzz[j]);

                dx_yy_xzzz[j] = fr * dx_y_xzzz[j] + f2t * dx_0_xzzz[j];

                dy_yy_xzzz[j] = fr * dy_y_xzzz[j] + f2t * (dy_0_xzzz[j] + s_y_xzzz[j]);

                dz_yy_xzzz[j] = fr * dz_y_xzzz[j] + f2t * dz_0_xzzz[j];

                dx_yy_yyyy[j] = fr * dx_y_yyyy[j] + f2t * (dx_0_yyyy[j] + 4.0 * dx_y_yyy[j]);

                dy_yy_yyyy[j] = fr * dy_y_yyyy[j] + f2t * (dy_0_yyyy[j] + 4.0 * dy_y_yyy[j] + s_y_yyyy[j]);

                dz_yy_yyyy[j] = fr * dz_y_yyyy[j] + f2t * (dz_0_yyyy[j] + 4.0 * dz_y_yyy[j]);

                dx_yy_yyyz[j] = fr * dx_y_yyyz[j] + f2t * (dx_0_yyyz[j] + 3.0 * dx_y_yyz[j]);

                dy_yy_yyyz[j] = fr * dy_y_yyyz[j] + f2t * (dy_0_yyyz[j] + 3.0 * dy_y_yyz[j] + s_y_yyyz[j]);

                dz_yy_yyyz[j] = fr * dz_y_yyyz[j] + f2t * (dz_0_yyyz[j] + 3.0 * dz_y_yyz[j]);

                dx_yy_yyzz[j] = fr * dx_y_yyzz[j] + f2t * (dx_0_yyzz[j] + 2.0 * dx_y_yzz[j]);

                dy_yy_yyzz[j] = fr * dy_y_yyzz[j] + f2t * (dy_0_yyzz[j] + 2.0 * dy_y_yzz[j] + s_y_yyzz[j]);

                dz_yy_yyzz[j] = fr * dz_y_yyzz[j] + f2t * (dz_0_yyzz[j] + 2.0 * dz_y_yzz[j]);

                dx_yy_yzzz[j] = fr * dx_y_yzzz[j] + f2t * (dx_0_yzzz[j] + dx_y_zzz[j]);

                dy_yy_yzzz[j] = fr * dy_y_yzzz[j] + f2t * (dy_0_yzzz[j] + dy_y_zzz[j] + s_y_yzzz[j]);

                dz_yy_yzzz[j] = fr * dz_y_yzzz[j] + f2t * (dz_0_yzzz[j] + dz_y_zzz[j]);

                dx_yy_zzzz[j] = fr * dx_y_zzzz[j] + f2t * dx_0_zzzz[j];

                dy_yy_zzzz[j] = fr * dy_y_zzzz[j] + f2t * (dy_0_zzzz[j] + s_y_zzzz[j]);

                dz_yy_zzzz[j] = fr * dz_y_zzzz[j] + f2t * dz_0_zzzz[j];

                dx_yz_xxxx[j] = fr * dx_z_xxxx[j];

                dy_yz_xxxx[j] = fr * dy_z_xxxx[j] + f2t * s_z_xxxx[j];

                dz_yz_xxxx[j] = fr * dz_z_xxxx[j];

                dx_yz_xxxy[j] = fr * dx_z_xxxy[j] + f2t * dx_z_xxx[j];

                dy_yz_xxxy[j] = fr * dy_z_xxxy[j] + f2t * (dy_z_xxx[j] + s_z_xxxy[j]);

                dz_yz_xxxy[j] = fr * dz_z_xxxy[j] + f2t * dz_z_xxx[j];

                dx_yz_xxxz[j] = fr * dx_z_xxxz[j];

                dy_yz_xxxz[j] = fr * dy_z_xxxz[j] + f2t * s_z_xxxz[j];

                dz_yz_xxxz[j] = fr * dz_z_xxxz[j];

                dx_yz_xxyy[j] = fr * dx_z_xxyy[j] + f2t * 2.0 * dx_z_xxy[j];

                dy_yz_xxyy[j] = fr * dy_z_xxyy[j] + f2t * (2.0 * dy_z_xxy[j] + s_z_xxyy[j]);

                dz_yz_xxyy[j] = fr * dz_z_xxyy[j] + f2t * 2.0 * dz_z_xxy[j];

                dx_yz_xxyz[j] = fr * dx_z_xxyz[j] + f2t * dx_z_xxz[j];

                dy_yz_xxyz[j] = fr * dy_z_xxyz[j] + f2t * (dy_z_xxz[j] + s_z_xxyz[j]);

                dz_yz_xxyz[j] = fr * dz_z_xxyz[j] + f2t * dz_z_xxz[j];

                dx_yz_xxzz[j] = fr * dx_z_xxzz[j];

                dy_yz_xxzz[j] = fr * dy_z_xxzz[j] + f2t * s_z_xxzz[j];

                dz_yz_xxzz[j] = fr * dz_z_xxzz[j];

                dx_yz_xyyy[j] = fr * dx_z_xyyy[j] + f2t * 3.0 * dx_z_xyy[j];

                dy_yz_xyyy[j] = fr * dy_z_xyyy[j] + f2t * (3.0 * dy_z_xyy[j] + s_z_xyyy[j]);

                dz_yz_xyyy[j] = fr * dz_z_xyyy[j] + f2t * 3.0 * dz_z_xyy[j];

                dx_yz_xyyz[j] = fr * dx_z_xyyz[j] + f2t * 2.0 * dx_z_xyz[j];

                dy_yz_xyyz[j] = fr * dy_z_xyyz[j] + f2t * (2.0 * dy_z_xyz[j] + s_z_xyyz[j]);

                dz_yz_xyyz[j] = fr * dz_z_xyyz[j] + f2t * 2.0 * dz_z_xyz[j];

                dx_yz_xyzz[j] = fr * dx_z_xyzz[j] + f2t * dx_z_xzz[j];

                dy_yz_xyzz[j] = fr * dy_z_xyzz[j] + f2t * (dy_z_xzz[j] + s_z_xyzz[j]);

                dz_yz_xyzz[j] = fr * dz_z_xyzz[j] + f2t * dz_z_xzz[j];

                dx_yz_xzzz[j] = fr * dx_z_xzzz[j];

                dy_yz_xzzz[j] = fr * dy_z_xzzz[j] + f2t * s_z_xzzz[j];

                dz_yz_xzzz[j] = fr * dz_z_xzzz[j];

                dx_yz_yyyy[j] = fr * dx_z_yyyy[j] + f2t * 4.0 * dx_z_yyy[j];

                dy_yz_yyyy[j] = fr * dy_z_yyyy[j] + f2t * (4.0 * dy_z_yyy[j] + s_z_yyyy[j]);

                dz_yz_yyyy[j] = fr * dz_z_yyyy[j] + f2t * 4.0 * dz_z_yyy[j];

                dx_yz_yyyz[j] = fr * dx_z_yyyz[j] + f2t * 3.0 * dx_z_yyz[j];

                dy_yz_yyyz[j] = fr * dy_z_yyyz[j] + f2t * (3.0 * dy_z_yyz[j] + s_z_yyyz[j]);

                dz_yz_yyyz[j] = fr * dz_z_yyyz[j] + f2t * 3.0 * dz_z_yyz[j];

                dx_yz_yyzz[j] = fr * dx_z_yyzz[j] + f2t * 2.0 * dx_z_yzz[j];

                dy_yz_yyzz[j] = fr * dy_z_yyzz[j] + f2t * (2.0 * dy_z_yzz[j] + s_z_yyzz[j]);

                dz_yz_yyzz[j] = fr * dz_z_yyzz[j] + f2t * 2.0 * dz_z_yzz[j];

                dx_yz_yzzz[j] = fr * dx_z_yzzz[j] + f2t * dx_z_zzz[j];

                dy_yz_yzzz[j] = fr * dy_z_yzzz[j] + f2t * (dy_z_zzz[j] + s_z_yzzz[j]);

                dz_yz_yzzz[j] = fr * dz_z_yzzz[j] + f2t * dz_z_zzz[j];

                dx_yz_zzzz[j] = fr * dx_z_zzzz[j];

                dy_yz_zzzz[j] = fr * dy_z_zzzz[j] + f2t * s_z_zzzz[j];

                dz_yz_zzzz[j] = fr * dz_z_zzzz[j];

                // leading z component

                fr = paz[j];

                dx_zz_xxxx[j] = fr * dx_z_xxxx[j] + f2t * dx_0_xxxx[j];

                dy_zz_xxxx[j] = fr * dy_z_xxxx[j] + f2t * dy_0_xxxx[j];

                dz_zz_xxxx[j] = fr * dz_z_xxxx[j] + f2t * (dz_0_xxxx[j] + s_z_xxxx[j]);

                dx_zz_xxxy[j] = fr * dx_z_xxxy[j] + f2t * dx_0_xxxy[j];

                dy_zz_xxxy[j] = fr * dy_z_xxxy[j] + f2t * dy_0_xxxy[j];

                dz_zz_xxxy[j] = fr * dz_z_xxxy[j] + f2t * (dz_0_xxxy[j] + s_z_xxxy[j]);

                dx_zz_xxxz[j] = fr * dx_z_xxxz[j] + f2t * (dx_0_xxxz[j] + dx_z_xxx[j]);

                dy_zz_xxxz[j] = fr * dy_z_xxxz[j] + f2t * (dy_0_xxxz[j] + dy_z_xxx[j]);

                dz_zz_xxxz[j] = fr * dz_z_xxxz[j] + f2t * (dz_0_xxxz[j] + dz_z_xxx[j] + s_z_xxxz[j]);

                dx_zz_xxyy[j] = fr * dx_z_xxyy[j] + f2t * dx_0_xxyy[j];

                dy_zz_xxyy[j] = fr * dy_z_xxyy[j] + f2t * dy_0_xxyy[j];

                dz_zz_xxyy[j] = fr * dz_z_xxyy[j] + f2t * (dz_0_xxyy[j] + s_z_xxyy[j]);

                dx_zz_xxyz[j] = fr * dx_z_xxyz[j] + f2t * (dx_0_xxyz[j] + dx_z_xxy[j]);

                dy_zz_xxyz[j] = fr * dy_z_xxyz[j] + f2t * (dy_0_xxyz[j] + dy_z_xxy[j]);

                dz_zz_xxyz[j] = fr * dz_z_xxyz[j] + f2t * (dz_0_xxyz[j] + dz_z_xxy[j] + s_z_xxyz[j]);

                dx_zz_xxzz[j] = fr * dx_z_xxzz[j] + f2t * (dx_0_xxzz[j] + 2.0 * dx_z_xxz[j]);

                dy_zz_xxzz[j] = fr * dy_z_xxzz[j] + f2t * (dy_0_xxzz[j] + 2.0 * dy_z_xxz[j]);

                dz_zz_xxzz[j] = fr * dz_z_xxzz[j] + f2t * (dz_0_xxzz[j] + 2.0 * dz_z_xxz[j] + s_z_xxzz[j]);

                dx_zz_xyyy[j] = fr * dx_z_xyyy[j] + f2t * dx_0_xyyy[j];

                dy_zz_xyyy[j] = fr * dy_z_xyyy[j] + f2t * dy_0_xyyy[j];

                dz_zz_xyyy[j] = fr * dz_z_xyyy[j] + f2t * (dz_0_xyyy[j] + s_z_xyyy[j]);

                dx_zz_xyyz[j] = fr * dx_z_xyyz[j] + f2t * (dx_0_xyyz[j] + dx_z_xyy[j]);

                dy_zz_xyyz[j] = fr * dy_z_xyyz[j] + f2t * (dy_0_xyyz[j] + dy_z_xyy[j]);

                dz_zz_xyyz[j] = fr * dz_z_xyyz[j] + f2t * (dz_0_xyyz[j] + dz_z_xyy[j] + s_z_xyyz[j]);

                dx_zz_xyzz[j] = fr * dx_z_xyzz[j] + f2t * (dx_0_xyzz[j] + 2.0 * dx_z_xyz[j]);

                dy_zz_xyzz[j] = fr * dy_z_xyzz[j] + f2t * (dy_0_xyzz[j] + 2.0 * dy_z_xyz[j]);

                dz_zz_xyzz[j] = fr * dz_z_xyzz[j] + f2t * (dz_0_xyzz[j] + 2.0 * dz_z_xyz[j] + s_z_xyzz[j]);

                dx_zz_xzzz[j] = fr * dx_z_xzzz[j] + f2t * (dx_0_xzzz[j] + 3.0 * dx_z_xzz[j]);

                dy_zz_xzzz[j] = fr * dy_z_xzzz[j] + f2t * (dy_0_xzzz[j] + 3.0 * dy_z_xzz[j]);

                dz_zz_xzzz[j] = fr * dz_z_xzzz[j] + f2t * (dz_0_xzzz[j] + 3.0 * dz_z_xzz[j] + s_z_xzzz[j]);

                dx_zz_yyyy[j] = fr * dx_z_yyyy[j] + f2t * dx_0_yyyy[j];

                dy_zz_yyyy[j] = fr * dy_z_yyyy[j] + f2t * dy_0_yyyy[j];

                dz_zz_yyyy[j] = fr * dz_z_yyyy[j] + f2t * (dz_0_yyyy[j] + s_z_yyyy[j]);

                dx_zz_yyyz[j] = fr * dx_z_yyyz[j] + f2t * (dx_0_yyyz[j] + dx_z_yyy[j]);

                dy_zz_yyyz[j] = fr * dy_z_yyyz[j] + f2t * (dy_0_yyyz[j] + dy_z_yyy[j]);

                dz_zz_yyyz[j] = fr * dz_z_yyyz[j] + f2t * (dz_0_yyyz[j] + dz_z_yyy[j] + s_z_yyyz[j]);

                dx_zz_yyzz[j] = fr * dx_z_yyzz[j] + f2t * (dx_0_yyzz[j] + 2.0 * dx_z_yyz[j]);

                dy_zz_yyzz[j] = fr * dy_z_yyzz[j] + f2t * (dy_0_yyzz[j] + 2.0 * dy_z_yyz[j]);

                dz_zz_yyzz[j] = fr * dz_z_yyzz[j] + f2t * (dz_0_yyzz[j] + 2.0 * dz_z_yyz[j] + s_z_yyzz[j]);

                dx_zz_yzzz[j] = fr * dx_z_yzzz[j] + f2t * (dx_0_yzzz[j] + 3.0 * dx_z_yzz[j]);

                dy_zz_yzzz[j] = fr * dy_z_yzzz[j] + f2t * (dy_0_yzzz[j] + 3.0 * dy_z_yzz[j]);

                dz_zz_yzzz[j] = fr * dz_z_yzzz[j] + f2t * (dz_0_yzzz[j] + 3.0 * dz_z_yzz[j] + s_z_yzzz[j]);

                dx_zz_zzzz[j] = fr * dx_z_zzzz[j] + f2t * (dx_0_zzzz[j] + 4.0 * dx_z_zzz[j]);

                dy_zz_zzzz[j] = fr * dy_z_zzzz[j] + f2t * (dy_0_zzzz[j] + 4.0 * dy_z_zzz[j]);

                dz_zz_zzzz[j] = fr * dz_z_zzzz[j] + f2t * (dz_0_zzzz[j] + 4.0 * dz_z_zzz[j] + s_z_zzzz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForGD(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {4, 2, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {4, 2, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {3, 2, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 2, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 1, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 2, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 2, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 2, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 1, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (G|M|D) integrals

            auto dx_xxxx_xx = primBuffer.data(doff + 90 * idx);

            auto dx_xxxx_xy = primBuffer.data(doff + 90 * idx + 1);

            auto dx_xxxx_xz = primBuffer.data(doff + 90 * idx + 2);

            auto dx_xxxx_yy = primBuffer.data(doff + 90 * idx + 3);

            auto dx_xxxx_yz = primBuffer.data(doff + 90 * idx + 4);

            auto dx_xxxx_zz = primBuffer.data(doff + 90 * idx + 5);

            auto dx_xxxy_xx = primBuffer.data(doff + 90 * idx + 6);

            auto dx_xxxy_xy = primBuffer.data(doff + 90 * idx + 7);

            auto dx_xxxy_xz = primBuffer.data(doff + 90 * idx + 8);

            auto dx_xxxy_yy = primBuffer.data(doff + 90 * idx + 9);

            auto dx_xxxy_yz = primBuffer.data(doff + 90 * idx + 10);

            auto dx_xxxy_zz = primBuffer.data(doff + 90 * idx + 11);

            auto dx_xxxz_xx = primBuffer.data(doff + 90 * idx + 12);

            auto dx_xxxz_xy = primBuffer.data(doff + 90 * idx + 13);

            auto dx_xxxz_xz = primBuffer.data(doff + 90 * idx + 14);

            auto dx_xxxz_yy = primBuffer.data(doff + 90 * idx + 15);

            auto dx_xxxz_yz = primBuffer.data(doff + 90 * idx + 16);

            auto dx_xxxz_zz = primBuffer.data(doff + 90 * idx + 17);

            auto dx_xxyy_xx = primBuffer.data(doff + 90 * idx + 18);

            auto dx_xxyy_xy = primBuffer.data(doff + 90 * idx + 19);

            auto dx_xxyy_xz = primBuffer.data(doff + 90 * idx + 20);

            auto dx_xxyy_yy = primBuffer.data(doff + 90 * idx + 21);

            auto dx_xxyy_yz = primBuffer.data(doff + 90 * idx + 22);

            auto dx_xxyy_zz = primBuffer.data(doff + 90 * idx + 23);

            auto dx_xxyz_xx = primBuffer.data(doff + 90 * idx + 24);

            auto dx_xxyz_xy = primBuffer.data(doff + 90 * idx + 25);

            auto dx_xxyz_xz = primBuffer.data(doff + 90 * idx + 26);

            auto dx_xxyz_yy = primBuffer.data(doff + 90 * idx + 27);

            auto dx_xxyz_yz = primBuffer.data(doff + 90 * idx + 28);

            auto dx_xxyz_zz = primBuffer.data(doff + 90 * idx + 29);

            auto dx_xxzz_xx = primBuffer.data(doff + 90 * idx + 30);

            auto dx_xxzz_xy = primBuffer.data(doff + 90 * idx + 31);

            auto dx_xxzz_xz = primBuffer.data(doff + 90 * idx + 32);

            auto dx_xxzz_yy = primBuffer.data(doff + 90 * idx + 33);

            auto dx_xxzz_yz = primBuffer.data(doff + 90 * idx + 34);

            auto dx_xxzz_zz = primBuffer.data(doff + 90 * idx + 35);

            auto dx_xyyy_xx = primBuffer.data(doff + 90 * idx + 36);

            auto dx_xyyy_xy = primBuffer.data(doff + 90 * idx + 37);

            auto dx_xyyy_xz = primBuffer.data(doff + 90 * idx + 38);

            auto dx_xyyy_yy = primBuffer.data(doff + 90 * idx + 39);

            auto dx_xyyy_yz = primBuffer.data(doff + 90 * idx + 40);

            auto dx_xyyy_zz = primBuffer.data(doff + 90 * idx + 41);

            auto dx_xyyz_xx = primBuffer.data(doff + 90 * idx + 42);

            auto dx_xyyz_xy = primBuffer.data(doff + 90 * idx + 43);

            auto dx_xyyz_xz = primBuffer.data(doff + 90 * idx + 44);

            auto dx_xyyz_yy = primBuffer.data(doff + 90 * idx + 45);

            auto dx_xyyz_yz = primBuffer.data(doff + 90 * idx + 46);

            auto dx_xyyz_zz = primBuffer.data(doff + 90 * idx + 47);

            auto dx_xyzz_xx = primBuffer.data(doff + 90 * idx + 48);

            auto dx_xyzz_xy = primBuffer.data(doff + 90 * idx + 49);

            auto dx_xyzz_xz = primBuffer.data(doff + 90 * idx + 50);

            auto dx_xyzz_yy = primBuffer.data(doff + 90 * idx + 51);

            auto dx_xyzz_yz = primBuffer.data(doff + 90 * idx + 52);

            auto dx_xyzz_zz = primBuffer.data(doff + 90 * idx + 53);

            auto dx_xzzz_xx = primBuffer.data(doff + 90 * idx + 54);

            auto dx_xzzz_xy = primBuffer.data(doff + 90 * idx + 55);

            auto dx_xzzz_xz = primBuffer.data(doff + 90 * idx + 56);

            auto dx_xzzz_yy = primBuffer.data(doff + 90 * idx + 57);

            auto dx_xzzz_yz = primBuffer.data(doff + 90 * idx + 58);

            auto dx_xzzz_zz = primBuffer.data(doff + 90 * idx + 59);

            auto dx_yyyy_xx = primBuffer.data(doff + 90 * idx + 60);

            auto dx_yyyy_xy = primBuffer.data(doff + 90 * idx + 61);

            auto dx_yyyy_xz = primBuffer.data(doff + 90 * idx + 62);

            auto dx_yyyy_yy = primBuffer.data(doff + 90 * idx + 63);

            auto dx_yyyy_yz = primBuffer.data(doff + 90 * idx + 64);

            auto dx_yyyy_zz = primBuffer.data(doff + 90 * idx + 65);

            auto dx_yyyz_xx = primBuffer.data(doff + 90 * idx + 66);

            auto dx_yyyz_xy = primBuffer.data(doff + 90 * idx + 67);

            auto dx_yyyz_xz = primBuffer.data(doff + 90 * idx + 68);

            auto dx_yyyz_yy = primBuffer.data(doff + 90 * idx + 69);

            auto dx_yyyz_yz = primBuffer.data(doff + 90 * idx + 70);

            auto dx_yyyz_zz = primBuffer.data(doff + 90 * idx + 71);

            auto dx_yyzz_xx = primBuffer.data(doff + 90 * idx + 72);

            auto dx_yyzz_xy = primBuffer.data(doff + 90 * idx + 73);

            auto dx_yyzz_xz = primBuffer.data(doff + 90 * idx + 74);

            auto dx_yyzz_yy = primBuffer.data(doff + 90 * idx + 75);

            auto dx_yyzz_yz = primBuffer.data(doff + 90 * idx + 76);

            auto dx_yyzz_zz = primBuffer.data(doff + 90 * idx + 77);

            auto dx_yzzz_xx = primBuffer.data(doff + 90 * idx + 78);

            auto dx_yzzz_xy = primBuffer.data(doff + 90 * idx + 79);

            auto dx_yzzz_xz = primBuffer.data(doff + 90 * idx + 80);

            auto dx_yzzz_yy = primBuffer.data(doff + 90 * idx + 81);

            auto dx_yzzz_yz = primBuffer.data(doff + 90 * idx + 82);

            auto dx_yzzz_zz = primBuffer.data(doff + 90 * idx + 83);

            auto dx_zzzz_xx = primBuffer.data(doff + 90 * idx + 84);

            auto dx_zzzz_xy = primBuffer.data(doff + 90 * idx + 85);

            auto dx_zzzz_xz = primBuffer.data(doff + 90 * idx + 86);

            auto dx_zzzz_yy = primBuffer.data(doff + 90 * idx + 87);

            auto dx_zzzz_yz = primBuffer.data(doff + 90 * idx + 88);

            auto dx_zzzz_zz = primBuffer.data(doff + 90 * idx + 89);

            auto dy_xxxx_xx = primBuffer.data(doff + 90 * bdim + 90 * idx);

            auto dy_xxxx_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 1);

            auto dy_xxxx_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 2);

            auto dy_xxxx_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 3);

            auto dy_xxxx_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 4);

            auto dy_xxxx_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 5);

            auto dy_xxxy_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 6);

            auto dy_xxxy_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 7);

            auto dy_xxxy_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 8);

            auto dy_xxxy_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 9);

            auto dy_xxxy_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 10);

            auto dy_xxxy_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 11);

            auto dy_xxxz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 12);

            auto dy_xxxz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 13);

            auto dy_xxxz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 14);

            auto dy_xxxz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 15);

            auto dy_xxxz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 16);

            auto dy_xxxz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 17);

            auto dy_xxyy_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 18);

            auto dy_xxyy_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 19);

            auto dy_xxyy_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 20);

            auto dy_xxyy_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 21);

            auto dy_xxyy_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 22);

            auto dy_xxyy_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 23);

            auto dy_xxyz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 24);

            auto dy_xxyz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 25);

            auto dy_xxyz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 26);

            auto dy_xxyz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 27);

            auto dy_xxyz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 28);

            auto dy_xxyz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 29);

            auto dy_xxzz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 30);

            auto dy_xxzz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 31);

            auto dy_xxzz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 32);

            auto dy_xxzz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 33);

            auto dy_xxzz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 34);

            auto dy_xxzz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 35);

            auto dy_xyyy_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 36);

            auto dy_xyyy_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 37);

            auto dy_xyyy_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 38);

            auto dy_xyyy_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 39);

            auto dy_xyyy_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 40);

            auto dy_xyyy_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 41);

            auto dy_xyyz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 42);

            auto dy_xyyz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 43);

            auto dy_xyyz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 44);

            auto dy_xyyz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 45);

            auto dy_xyyz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 46);

            auto dy_xyyz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 47);

            auto dy_xyzz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 48);

            auto dy_xyzz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 49);

            auto dy_xyzz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 50);

            auto dy_xyzz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 51);

            auto dy_xyzz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 52);

            auto dy_xyzz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 53);

            auto dy_xzzz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 54);

            auto dy_xzzz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 55);

            auto dy_xzzz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 56);

            auto dy_xzzz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 57);

            auto dy_xzzz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 58);

            auto dy_xzzz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 59);

            auto dy_yyyy_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 60);

            auto dy_yyyy_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 61);

            auto dy_yyyy_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 62);

            auto dy_yyyy_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 63);

            auto dy_yyyy_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 64);

            auto dy_yyyy_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 65);

            auto dy_yyyz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 66);

            auto dy_yyyz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 67);

            auto dy_yyyz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 68);

            auto dy_yyyz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 69);

            auto dy_yyyz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 70);

            auto dy_yyyz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 71);

            auto dy_yyzz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 72);

            auto dy_yyzz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 73);

            auto dy_yyzz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 74);

            auto dy_yyzz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 75);

            auto dy_yyzz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 76);

            auto dy_yyzz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 77);

            auto dy_yzzz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 78);

            auto dy_yzzz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 79);

            auto dy_yzzz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 80);

            auto dy_yzzz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 81);

            auto dy_yzzz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 82);

            auto dy_yzzz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 83);

            auto dy_zzzz_xx = primBuffer.data(doff + 90 * bdim + 90 * idx + 84);

            auto dy_zzzz_xy = primBuffer.data(doff + 90 * bdim + 90 * idx + 85);

            auto dy_zzzz_xz = primBuffer.data(doff + 90 * bdim + 90 * idx + 86);

            auto dy_zzzz_yy = primBuffer.data(doff + 90 * bdim + 90 * idx + 87);

            auto dy_zzzz_yz = primBuffer.data(doff + 90 * bdim + 90 * idx + 88);

            auto dy_zzzz_zz = primBuffer.data(doff + 90 * bdim + 90 * idx + 89);

            auto dz_xxxx_xx = primBuffer.data(doff + 180 * bdim + 90 * idx);

            auto dz_xxxx_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 1);

            auto dz_xxxx_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 2);

            auto dz_xxxx_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 3);

            auto dz_xxxx_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 4);

            auto dz_xxxx_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 5);

            auto dz_xxxy_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 6);

            auto dz_xxxy_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 7);

            auto dz_xxxy_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 8);

            auto dz_xxxy_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 9);

            auto dz_xxxy_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 10);

            auto dz_xxxy_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 11);

            auto dz_xxxz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 12);

            auto dz_xxxz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 13);

            auto dz_xxxz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 14);

            auto dz_xxxz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 15);

            auto dz_xxxz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 16);

            auto dz_xxxz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 17);

            auto dz_xxyy_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 18);

            auto dz_xxyy_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 19);

            auto dz_xxyy_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 20);

            auto dz_xxyy_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 21);

            auto dz_xxyy_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 22);

            auto dz_xxyy_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 23);

            auto dz_xxyz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 24);

            auto dz_xxyz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 25);

            auto dz_xxyz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 26);

            auto dz_xxyz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 27);

            auto dz_xxyz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 28);

            auto dz_xxyz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 29);

            auto dz_xxzz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 30);

            auto dz_xxzz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 31);

            auto dz_xxzz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 32);

            auto dz_xxzz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 33);

            auto dz_xxzz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 34);

            auto dz_xxzz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 35);

            auto dz_xyyy_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 36);

            auto dz_xyyy_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 37);

            auto dz_xyyy_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 38);

            auto dz_xyyy_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 39);

            auto dz_xyyy_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 40);

            auto dz_xyyy_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 41);

            auto dz_xyyz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 42);

            auto dz_xyyz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 43);

            auto dz_xyyz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 44);

            auto dz_xyyz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 45);

            auto dz_xyyz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 46);

            auto dz_xyyz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 47);

            auto dz_xyzz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 48);

            auto dz_xyzz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 49);

            auto dz_xyzz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 50);

            auto dz_xyzz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 51);

            auto dz_xyzz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 52);

            auto dz_xyzz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 53);

            auto dz_xzzz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 54);

            auto dz_xzzz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 55);

            auto dz_xzzz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 56);

            auto dz_xzzz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 57);

            auto dz_xzzz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 58);

            auto dz_xzzz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 59);

            auto dz_yyyy_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 60);

            auto dz_yyyy_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 61);

            auto dz_yyyy_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 62);

            auto dz_yyyy_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 63);

            auto dz_yyyy_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 64);

            auto dz_yyyy_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 65);

            auto dz_yyyz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 66);

            auto dz_yyyz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 67);

            auto dz_yyyz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 68);

            auto dz_yyyz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 69);

            auto dz_yyyz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 70);

            auto dz_yyyz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 71);

            auto dz_yyzz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 72);

            auto dz_yyzz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 73);

            auto dz_yyzz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 74);

            auto dz_yyzz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 75);

            auto dz_yyzz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 76);

            auto dz_yyzz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 77);

            auto dz_yzzz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 78);

            auto dz_yzzz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 79);

            auto dz_yzzz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 80);

            auto dz_yzzz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 81);

            auto dz_yzzz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 82);

            auto dz_yzzz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 83);

            auto dz_zzzz_xx = primBuffer.data(doff + 180 * bdim + 90 * idx + 84);

            auto dz_zzzz_xy = primBuffer.data(doff + 180 * bdim + 90 * idx + 85);

            auto dz_zzzz_xz = primBuffer.data(doff + 180 * bdim + 90 * idx + 86);

            auto dz_zzzz_yy = primBuffer.data(doff + 180 * bdim + 90 * idx + 87);

            auto dz_zzzz_yz = primBuffer.data(doff + 180 * bdim + 90 * idx + 88);

            auto dz_zzzz_zz = primBuffer.data(doff + 180 * bdim + 90 * idx + 89);

            // set up pointers to (F|M|D) integrals

            auto dx_xxx_xx = primBuffer.data(d1off + 60 * idx);

            auto dx_xxx_xy = primBuffer.data(d1off + 60 * idx + 1);

            auto dx_xxx_xz = primBuffer.data(d1off + 60 * idx + 2);

            auto dx_xxx_yy = primBuffer.data(d1off + 60 * idx + 3);

            auto dx_xxx_yz = primBuffer.data(d1off + 60 * idx + 4);

            auto dx_xxx_zz = primBuffer.data(d1off + 60 * idx + 5);

            auto dx_xxy_xx = primBuffer.data(d1off + 60 * idx + 6);

            auto dx_xxy_xy = primBuffer.data(d1off + 60 * idx + 7);

            auto dx_xxy_xz = primBuffer.data(d1off + 60 * idx + 8);

            auto dx_xxy_yy = primBuffer.data(d1off + 60 * idx + 9);

            auto dx_xxy_yz = primBuffer.data(d1off + 60 * idx + 10);

            auto dx_xxy_zz = primBuffer.data(d1off + 60 * idx + 11);

            auto dx_xxz_xx = primBuffer.data(d1off + 60 * idx + 12);

            auto dx_xxz_xy = primBuffer.data(d1off + 60 * idx + 13);

            auto dx_xxz_xz = primBuffer.data(d1off + 60 * idx + 14);

            auto dx_xxz_yy = primBuffer.data(d1off + 60 * idx + 15);

            auto dx_xxz_yz = primBuffer.data(d1off + 60 * idx + 16);

            auto dx_xxz_zz = primBuffer.data(d1off + 60 * idx + 17);

            auto dx_xyy_xx = primBuffer.data(d1off + 60 * idx + 18);

            auto dx_xyy_xy = primBuffer.data(d1off + 60 * idx + 19);

            auto dx_xyy_xz = primBuffer.data(d1off + 60 * idx + 20);

            auto dx_xyy_yy = primBuffer.data(d1off + 60 * idx + 21);

            auto dx_xyy_yz = primBuffer.data(d1off + 60 * idx + 22);

            auto dx_xyy_zz = primBuffer.data(d1off + 60 * idx + 23);

            auto dx_xyz_xx = primBuffer.data(d1off + 60 * idx + 24);

            auto dx_xyz_xy = primBuffer.data(d1off + 60 * idx + 25);

            auto dx_xyz_xz = primBuffer.data(d1off + 60 * idx + 26);

            auto dx_xyz_yy = primBuffer.data(d1off + 60 * idx + 27);

            auto dx_xyz_yz = primBuffer.data(d1off + 60 * idx + 28);

            auto dx_xyz_zz = primBuffer.data(d1off + 60 * idx + 29);

            auto dx_xzz_xx = primBuffer.data(d1off + 60 * idx + 30);

            auto dx_xzz_xy = primBuffer.data(d1off + 60 * idx + 31);

            auto dx_xzz_xz = primBuffer.data(d1off + 60 * idx + 32);

            auto dx_xzz_yy = primBuffer.data(d1off + 60 * idx + 33);

            auto dx_xzz_yz = primBuffer.data(d1off + 60 * idx + 34);

            auto dx_xzz_zz = primBuffer.data(d1off + 60 * idx + 35);

            auto dx_yyy_xx = primBuffer.data(d1off + 60 * idx + 36);

            auto dx_yyy_xy = primBuffer.data(d1off + 60 * idx + 37);

            auto dx_yyy_xz = primBuffer.data(d1off + 60 * idx + 38);

            auto dx_yyy_yy = primBuffer.data(d1off + 60 * idx + 39);

            auto dx_yyy_yz = primBuffer.data(d1off + 60 * idx + 40);

            auto dx_yyy_zz = primBuffer.data(d1off + 60 * idx + 41);

            auto dx_yyz_xx = primBuffer.data(d1off + 60 * idx + 42);

            auto dx_yyz_xy = primBuffer.data(d1off + 60 * idx + 43);

            auto dx_yyz_xz = primBuffer.data(d1off + 60 * idx + 44);

            auto dx_yyz_yy = primBuffer.data(d1off + 60 * idx + 45);

            auto dx_yyz_yz = primBuffer.data(d1off + 60 * idx + 46);

            auto dx_yyz_zz = primBuffer.data(d1off + 60 * idx + 47);

            auto dx_yzz_xx = primBuffer.data(d1off + 60 * idx + 48);

            auto dx_yzz_xy = primBuffer.data(d1off + 60 * idx + 49);

            auto dx_yzz_xz = primBuffer.data(d1off + 60 * idx + 50);

            auto dx_yzz_yy = primBuffer.data(d1off + 60 * idx + 51);

            auto dx_yzz_yz = primBuffer.data(d1off + 60 * idx + 52);

            auto dx_yzz_zz = primBuffer.data(d1off + 60 * idx + 53);

            auto dx_zzz_xx = primBuffer.data(d1off + 60 * idx + 54);

            auto dx_zzz_xy = primBuffer.data(d1off + 60 * idx + 55);

            auto dx_zzz_xz = primBuffer.data(d1off + 60 * idx + 56);

            auto dx_zzz_yy = primBuffer.data(d1off + 60 * idx + 57);

            auto dx_zzz_yz = primBuffer.data(d1off + 60 * idx + 58);

            auto dx_zzz_zz = primBuffer.data(d1off + 60 * idx + 59);

            auto dy_xxx_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx);

            auto dy_xxx_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 1);

            auto dy_xxx_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 2);

            auto dy_xxx_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 3);

            auto dy_xxx_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 4);

            auto dy_xxx_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 5);

            auto dy_xxy_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 6);

            auto dy_xxy_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 7);

            auto dy_xxy_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 8);

            auto dy_xxy_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 9);

            auto dy_xxy_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 10);

            auto dy_xxy_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 11);

            auto dy_xxz_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 12);

            auto dy_xxz_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 13);

            auto dy_xxz_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 14);

            auto dy_xxz_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 15);

            auto dy_xxz_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 16);

            auto dy_xxz_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 17);

            auto dy_xyy_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 18);

            auto dy_xyy_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 19);

            auto dy_xyy_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 20);

            auto dy_xyy_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 21);

            auto dy_xyy_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 22);

            auto dy_xyy_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 23);

            auto dy_xyz_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 24);

            auto dy_xyz_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 25);

            auto dy_xyz_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 26);

            auto dy_xyz_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 27);

            auto dy_xyz_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 28);

            auto dy_xyz_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 29);

            auto dy_xzz_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 30);

            auto dy_xzz_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 31);

            auto dy_xzz_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 32);

            auto dy_xzz_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 33);

            auto dy_xzz_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 34);

            auto dy_xzz_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 35);

            auto dy_yyy_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 36);

            auto dy_yyy_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 37);

            auto dy_yyy_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 38);

            auto dy_yyy_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 39);

            auto dy_yyy_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 40);

            auto dy_yyy_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 41);

            auto dy_yyz_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 42);

            auto dy_yyz_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 43);

            auto dy_yyz_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 44);

            auto dy_yyz_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 45);

            auto dy_yyz_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 46);

            auto dy_yyz_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 47);

            auto dy_yzz_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 48);

            auto dy_yzz_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 49);

            auto dy_yzz_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 50);

            auto dy_yzz_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 51);

            auto dy_yzz_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 52);

            auto dy_yzz_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 53);

            auto dy_zzz_xx = primBuffer.data(d1off + 60 * bdim + 60 * idx + 54);

            auto dy_zzz_xy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 55);

            auto dy_zzz_xz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 56);

            auto dy_zzz_yy = primBuffer.data(d1off + 60 * bdim + 60 * idx + 57);

            auto dy_zzz_yz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 58);

            auto dy_zzz_zz = primBuffer.data(d1off + 60 * bdim + 60 * idx + 59);

            auto dz_xxx_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx);

            auto dz_xxx_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 1);

            auto dz_xxx_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 2);

            auto dz_xxx_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 3);

            auto dz_xxx_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 4);

            auto dz_xxx_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 5);

            auto dz_xxy_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 6);

            auto dz_xxy_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 7);

            auto dz_xxy_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 8);

            auto dz_xxy_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 9);

            auto dz_xxy_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 10);

            auto dz_xxy_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 11);

            auto dz_xxz_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 12);

            auto dz_xxz_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 13);

            auto dz_xxz_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 14);

            auto dz_xxz_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 15);

            auto dz_xxz_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 16);

            auto dz_xxz_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 17);

            auto dz_xyy_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 18);

            auto dz_xyy_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 19);

            auto dz_xyy_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 20);

            auto dz_xyy_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 21);

            auto dz_xyy_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 22);

            auto dz_xyy_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 23);

            auto dz_xyz_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 24);

            auto dz_xyz_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 25);

            auto dz_xyz_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 26);

            auto dz_xyz_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 27);

            auto dz_xyz_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 28);

            auto dz_xyz_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 29);

            auto dz_xzz_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 30);

            auto dz_xzz_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 31);

            auto dz_xzz_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 32);

            auto dz_xzz_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 33);

            auto dz_xzz_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 34);

            auto dz_xzz_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 35);

            auto dz_yyy_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 36);

            auto dz_yyy_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 37);

            auto dz_yyy_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 38);

            auto dz_yyy_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 39);

            auto dz_yyy_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 40);

            auto dz_yyy_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 41);

            auto dz_yyz_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 42);

            auto dz_yyz_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 43);

            auto dz_yyz_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 44);

            auto dz_yyz_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 45);

            auto dz_yyz_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 46);

            auto dz_yyz_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 47);

            auto dz_yzz_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 48);

            auto dz_yzz_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 49);

            auto dz_yzz_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 50);

            auto dz_yzz_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 51);

            auto dz_yzz_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 52);

            auto dz_yzz_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 53);

            auto dz_zzz_xx = primBuffer.data(d1off + 120 * bdim + 60 * idx + 54);

            auto dz_zzz_xy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 55);

            auto dz_zzz_xz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 56);

            auto dz_zzz_yy = primBuffer.data(d1off + 120 * bdim + 60 * idx + 57);

            auto dz_zzz_yz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 58);

            auto dz_zzz_zz = primBuffer.data(d1off + 120 * bdim + 60 * idx + 59);

            // set up pointers to (D|M|D) integrals

            auto dx_xx_xx = primBuffer.data(d2off + 36 * idx);

            auto dx_xx_xy = primBuffer.data(d2off + 36 * idx + 1);

            auto dx_xx_xz = primBuffer.data(d2off + 36 * idx + 2);

            auto dx_xx_yy = primBuffer.data(d2off + 36 * idx + 3);

            auto dx_xx_yz = primBuffer.data(d2off + 36 * idx + 4);

            auto dx_xx_zz = primBuffer.data(d2off + 36 * idx + 5);

            auto dx_xy_xx = primBuffer.data(d2off + 36 * idx + 6);

            auto dx_xy_xy = primBuffer.data(d2off + 36 * idx + 7);

            auto dx_xy_xz = primBuffer.data(d2off + 36 * idx + 8);

            auto dx_xy_yy = primBuffer.data(d2off + 36 * idx + 9);

            auto dx_xy_yz = primBuffer.data(d2off + 36 * idx + 10);

            auto dx_xy_zz = primBuffer.data(d2off + 36 * idx + 11);

            auto dx_xz_xx = primBuffer.data(d2off + 36 * idx + 12);

            auto dx_xz_xy = primBuffer.data(d2off + 36 * idx + 13);

            auto dx_xz_xz = primBuffer.data(d2off + 36 * idx + 14);

            auto dx_xz_yy = primBuffer.data(d2off + 36 * idx + 15);

            auto dx_xz_yz = primBuffer.data(d2off + 36 * idx + 16);

            auto dx_xz_zz = primBuffer.data(d2off + 36 * idx + 17);

            auto dx_yy_xx = primBuffer.data(d2off + 36 * idx + 18);

            auto dx_yy_xy = primBuffer.data(d2off + 36 * idx + 19);

            auto dx_yy_xz = primBuffer.data(d2off + 36 * idx + 20);

            auto dx_yy_yy = primBuffer.data(d2off + 36 * idx + 21);

            auto dx_yy_yz = primBuffer.data(d2off + 36 * idx + 22);

            auto dx_yy_zz = primBuffer.data(d2off + 36 * idx + 23);

            auto dx_yz_xx = primBuffer.data(d2off + 36 * idx + 24);

            auto dx_yz_xy = primBuffer.data(d2off + 36 * idx + 25);

            auto dx_yz_xz = primBuffer.data(d2off + 36 * idx + 26);

            auto dx_yz_yy = primBuffer.data(d2off + 36 * idx + 27);

            auto dx_yz_yz = primBuffer.data(d2off + 36 * idx + 28);

            auto dx_yz_zz = primBuffer.data(d2off + 36 * idx + 29);

            auto dx_zz_xx = primBuffer.data(d2off + 36 * idx + 30);

            auto dx_zz_xy = primBuffer.data(d2off + 36 * idx + 31);

            auto dx_zz_xz = primBuffer.data(d2off + 36 * idx + 32);

            auto dx_zz_yy = primBuffer.data(d2off + 36 * idx + 33);

            auto dx_zz_yz = primBuffer.data(d2off + 36 * idx + 34);

            auto dx_zz_zz = primBuffer.data(d2off + 36 * idx + 35);

            auto dy_xx_xx = primBuffer.data(d2off + 36 * bdim + 36 * idx);

            auto dy_xx_xy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 1);

            auto dy_xx_xz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 2);

            auto dy_xx_yy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 3);

            auto dy_xx_yz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 4);

            auto dy_xx_zz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 5);

            auto dy_xy_xx = primBuffer.data(d2off + 36 * bdim + 36 * idx + 6);

            auto dy_xy_xy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 7);

            auto dy_xy_xz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 8);

            auto dy_xy_yy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 9);

            auto dy_xy_yz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 10);

            auto dy_xy_zz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 11);

            auto dy_xz_xx = primBuffer.data(d2off + 36 * bdim + 36 * idx + 12);

            auto dy_xz_xy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 13);

            auto dy_xz_xz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 14);

            auto dy_xz_yy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 15);

            auto dy_xz_yz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 16);

            auto dy_xz_zz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 17);

            auto dy_yy_xx = primBuffer.data(d2off + 36 * bdim + 36 * idx + 18);

            auto dy_yy_xy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 19);

            auto dy_yy_xz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 20);

            auto dy_yy_yy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 21);

            auto dy_yy_yz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 22);

            auto dy_yy_zz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 23);

            auto dy_yz_xx = primBuffer.data(d2off + 36 * bdim + 36 * idx + 24);

            auto dy_yz_xy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 25);

            auto dy_yz_xz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 26);

            auto dy_yz_yy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 27);

            auto dy_yz_yz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 28);

            auto dy_yz_zz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 29);

            auto dy_zz_xx = primBuffer.data(d2off + 36 * bdim + 36 * idx + 30);

            auto dy_zz_xy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 31);

            auto dy_zz_xz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 32);

            auto dy_zz_yy = primBuffer.data(d2off + 36 * bdim + 36 * idx + 33);

            auto dy_zz_yz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 34);

            auto dy_zz_zz = primBuffer.data(d2off + 36 * bdim + 36 * idx + 35);

            auto dz_xx_xx = primBuffer.data(d2off + 72 * bdim + 36 * idx);

            auto dz_xx_xy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 1);

            auto dz_xx_xz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 2);

            auto dz_xx_yy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 3);

            auto dz_xx_yz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 4);

            auto dz_xx_zz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 5);

            auto dz_xy_xx = primBuffer.data(d2off + 72 * bdim + 36 * idx + 6);

            auto dz_xy_xy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 7);

            auto dz_xy_xz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 8);

            auto dz_xy_yy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 9);

            auto dz_xy_yz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 10);

            auto dz_xy_zz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 11);

            auto dz_xz_xx = primBuffer.data(d2off + 72 * bdim + 36 * idx + 12);

            auto dz_xz_xy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 13);

            auto dz_xz_xz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 14);

            auto dz_xz_yy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 15);

            auto dz_xz_yz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 16);

            auto dz_xz_zz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 17);

            auto dz_yy_xx = primBuffer.data(d2off + 72 * bdim + 36 * idx + 18);

            auto dz_yy_xy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 19);

            auto dz_yy_xz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 20);

            auto dz_yy_yy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 21);

            auto dz_yy_yz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 22);

            auto dz_yy_zz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 23);

            auto dz_yz_xx = primBuffer.data(d2off + 72 * bdim + 36 * idx + 24);

            auto dz_yz_xy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 25);

            auto dz_yz_xz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 26);

            auto dz_yz_yy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 27);

            auto dz_yz_yz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 28);

            auto dz_yz_zz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 29);

            auto dz_zz_xx = primBuffer.data(d2off + 72 * bdim + 36 * idx + 30);

            auto dz_zz_xy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 31);

            auto dz_zz_xz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 32);

            auto dz_zz_yy = primBuffer.data(d2off + 72 * bdim + 36 * idx + 33);

            auto dz_zz_yz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 34);

            auto dz_zz_zz = primBuffer.data(d2off + 72 * bdim + 36 * idx + 35);

            // set up pointers to (F|M|P) integrals

            auto dx_xxx_x = primBuffer.data(dkoff + 30 * idx);

            auto dx_xxx_y = primBuffer.data(dkoff + 30 * idx + 1);

            auto dx_xxx_z = primBuffer.data(dkoff + 30 * idx + 2);

            auto dx_xxy_x = primBuffer.data(dkoff + 30 * idx + 3);

            auto dx_xxy_y = primBuffer.data(dkoff + 30 * idx + 4);

            auto dx_xxy_z = primBuffer.data(dkoff + 30 * idx + 5);

            auto dx_xxz_x = primBuffer.data(dkoff + 30 * idx + 6);

            auto dx_xxz_y = primBuffer.data(dkoff + 30 * idx + 7);

            auto dx_xxz_z = primBuffer.data(dkoff + 30 * idx + 8);

            auto dx_xyy_x = primBuffer.data(dkoff + 30 * idx + 9);

            auto dx_xyy_y = primBuffer.data(dkoff + 30 * idx + 10);

            auto dx_xyy_z = primBuffer.data(dkoff + 30 * idx + 11);

            auto dx_xyz_x = primBuffer.data(dkoff + 30 * idx + 12);

            auto dx_xyz_y = primBuffer.data(dkoff + 30 * idx + 13);

            auto dx_xyz_z = primBuffer.data(dkoff + 30 * idx + 14);

            auto dx_xzz_x = primBuffer.data(dkoff + 30 * idx + 15);

            auto dx_xzz_y = primBuffer.data(dkoff + 30 * idx + 16);

            auto dx_xzz_z = primBuffer.data(dkoff + 30 * idx + 17);

            auto dx_yyy_x = primBuffer.data(dkoff + 30 * idx + 18);

            auto dx_yyy_y = primBuffer.data(dkoff + 30 * idx + 19);

            auto dx_yyy_z = primBuffer.data(dkoff + 30 * idx + 20);

            auto dx_yyz_x = primBuffer.data(dkoff + 30 * idx + 21);

            auto dx_yyz_y = primBuffer.data(dkoff + 30 * idx + 22);

            auto dx_yyz_z = primBuffer.data(dkoff + 30 * idx + 23);

            auto dx_yzz_x = primBuffer.data(dkoff + 30 * idx + 24);

            auto dx_yzz_y = primBuffer.data(dkoff + 30 * idx + 25);

            auto dx_yzz_z = primBuffer.data(dkoff + 30 * idx + 26);

            auto dx_zzz_x = primBuffer.data(dkoff + 30 * idx + 27);

            auto dx_zzz_y = primBuffer.data(dkoff + 30 * idx + 28);

            auto dx_zzz_z = primBuffer.data(dkoff + 30 * idx + 29);

            auto dy_xxx_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx);

            auto dy_xxx_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 1);

            auto dy_xxx_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 2);

            auto dy_xxy_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 3);

            auto dy_xxy_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 4);

            auto dy_xxy_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 5);

            auto dy_xxz_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 6);

            auto dy_xxz_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 7);

            auto dy_xxz_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 8);

            auto dy_xyy_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 9);

            auto dy_xyy_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 10);

            auto dy_xyy_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 11);

            auto dy_xyz_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 12);

            auto dy_xyz_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 13);

            auto dy_xyz_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 14);

            auto dy_xzz_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 15);

            auto dy_xzz_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 16);

            auto dy_xzz_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 17);

            auto dy_yyy_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 18);

            auto dy_yyy_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 19);

            auto dy_yyy_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 20);

            auto dy_yyz_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 21);

            auto dy_yyz_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 22);

            auto dy_yyz_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 23);

            auto dy_yzz_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 24);

            auto dy_yzz_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 25);

            auto dy_yzz_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 26);

            auto dy_zzz_x = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 27);

            auto dy_zzz_y = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 28);

            auto dy_zzz_z = primBuffer.data(dkoff + 30 * bdim + 30 * idx + 29);

            auto dz_xxx_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx);

            auto dz_xxx_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 1);

            auto dz_xxx_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 2);

            auto dz_xxy_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 3);

            auto dz_xxy_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 4);

            auto dz_xxy_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 5);

            auto dz_xxz_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 6);

            auto dz_xxz_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 7);

            auto dz_xxz_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 8);

            auto dz_xyy_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 9);

            auto dz_xyy_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 10);

            auto dz_xyy_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 11);

            auto dz_xyz_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 12);

            auto dz_xyz_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 13);

            auto dz_xyz_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 14);

            auto dz_xzz_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 15);

            auto dz_xzz_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 16);

            auto dz_xzz_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 17);

            auto dz_yyy_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 18);

            auto dz_yyy_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 19);

            auto dz_yyy_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 20);

            auto dz_yyz_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 21);

            auto dz_yyz_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 22);

            auto dz_yyz_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 23);

            auto dz_yzz_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 24);

            auto dz_yzz_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 25);

            auto dz_yzz_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 26);

            auto dz_zzz_x = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 27);

            auto dz_zzz_y = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 28);

            auto dz_zzz_z = primBuffer.data(dkoff + 60 * bdim + 30 * idx + 29);

            // set up pointers to (F|D) integrals

            auto s_xxx_xx = primBuffer.data(soff + 60 * idx);

            auto s_xxx_xy = primBuffer.data(soff + 60 * idx + 1);

            auto s_xxx_xz = primBuffer.data(soff + 60 * idx + 2);

            auto s_xxx_yy = primBuffer.data(soff + 60 * idx + 3);

            auto s_xxx_yz = primBuffer.data(soff + 60 * idx + 4);

            auto s_xxx_zz = primBuffer.data(soff + 60 * idx + 5);

            auto s_xxy_xx = primBuffer.data(soff + 60 * idx + 6);

            auto s_xxy_xy = primBuffer.data(soff + 60 * idx + 7);

            auto s_xxy_xz = primBuffer.data(soff + 60 * idx + 8);

            auto s_xxy_yy = primBuffer.data(soff + 60 * idx + 9);

            auto s_xxy_yz = primBuffer.data(soff + 60 * idx + 10);

            auto s_xxy_zz = primBuffer.data(soff + 60 * idx + 11);

            auto s_xxz_xx = primBuffer.data(soff + 60 * idx + 12);

            auto s_xxz_xy = primBuffer.data(soff + 60 * idx + 13);

            auto s_xxz_xz = primBuffer.data(soff + 60 * idx + 14);

            auto s_xxz_yy = primBuffer.data(soff + 60 * idx + 15);

            auto s_xxz_yz = primBuffer.data(soff + 60 * idx + 16);

            auto s_xxz_zz = primBuffer.data(soff + 60 * idx + 17);

            auto s_xyy_xx = primBuffer.data(soff + 60 * idx + 18);

            auto s_xyy_xy = primBuffer.data(soff + 60 * idx + 19);

            auto s_xyy_xz = primBuffer.data(soff + 60 * idx + 20);

            auto s_xyy_yy = primBuffer.data(soff + 60 * idx + 21);

            auto s_xyy_yz = primBuffer.data(soff + 60 * idx + 22);

            auto s_xyy_zz = primBuffer.data(soff + 60 * idx + 23);

            auto s_xyz_xx = primBuffer.data(soff + 60 * idx + 24);

            auto s_xyz_xy = primBuffer.data(soff + 60 * idx + 25);

            auto s_xyz_xz = primBuffer.data(soff + 60 * idx + 26);

            auto s_xyz_yy = primBuffer.data(soff + 60 * idx + 27);

            auto s_xyz_yz = primBuffer.data(soff + 60 * idx + 28);

            auto s_xyz_zz = primBuffer.data(soff + 60 * idx + 29);

            auto s_xzz_xx = primBuffer.data(soff + 60 * idx + 30);

            auto s_xzz_xy = primBuffer.data(soff + 60 * idx + 31);

            auto s_xzz_xz = primBuffer.data(soff + 60 * idx + 32);

            auto s_xzz_yy = primBuffer.data(soff + 60 * idx + 33);

            auto s_xzz_yz = primBuffer.data(soff + 60 * idx + 34);

            auto s_xzz_zz = primBuffer.data(soff + 60 * idx + 35);

            auto s_yyy_xx = primBuffer.data(soff + 60 * idx + 36);

            auto s_yyy_xy = primBuffer.data(soff + 60 * idx + 37);

            auto s_yyy_xz = primBuffer.data(soff + 60 * idx + 38);

            auto s_yyy_yy = primBuffer.data(soff + 60 * idx + 39);

            auto s_yyy_yz = primBuffer.data(soff + 60 * idx + 40);

            auto s_yyy_zz = primBuffer.data(soff + 60 * idx + 41);

            auto s_yyz_xx = primBuffer.data(soff + 60 * idx + 42);

            auto s_yyz_xy = primBuffer.data(soff + 60 * idx + 43);

            auto s_yyz_xz = primBuffer.data(soff + 60 * idx + 44);

            auto s_yyz_yy = primBuffer.data(soff + 60 * idx + 45);

            auto s_yyz_yz = primBuffer.data(soff + 60 * idx + 46);

            auto s_yyz_zz = primBuffer.data(soff + 60 * idx + 47);

            auto s_yzz_xx = primBuffer.data(soff + 60 * idx + 48);

            auto s_yzz_xy = primBuffer.data(soff + 60 * idx + 49);

            auto s_yzz_xz = primBuffer.data(soff + 60 * idx + 50);

            auto s_yzz_yy = primBuffer.data(soff + 60 * idx + 51);

            auto s_yzz_yz = primBuffer.data(soff + 60 * idx + 52);

            auto s_yzz_zz = primBuffer.data(soff + 60 * idx + 53);

            auto s_zzz_xx = primBuffer.data(soff + 60 * idx + 54);

            auto s_zzz_xy = primBuffer.data(soff + 60 * idx + 55);

            auto s_zzz_xz = primBuffer.data(soff + 60 * idx + 56);

            auto s_zzz_yy = primBuffer.data(soff + 60 * idx + 57);

            auto s_zzz_yz = primBuffer.data(soff + 60 * idx + 58);

            auto s_zzz_zz = primBuffer.data(soff + 60 * idx + 59);

            // set up pointers to (D|D) integrals

            auto s_xx_xx = primBuffer.data(s1off + 36 * idx);

            auto s_xx_xy = primBuffer.data(s1off + 36 * idx + 1);

            auto s_xx_xz = primBuffer.data(s1off + 36 * idx + 2);

            auto s_xx_yy = primBuffer.data(s1off + 36 * idx + 3);

            auto s_xx_yz = primBuffer.data(s1off + 36 * idx + 4);

            auto s_xx_zz = primBuffer.data(s1off + 36 * idx + 5);

            auto s_xy_xx = primBuffer.data(s1off + 36 * idx + 6);

            auto s_xy_xy = primBuffer.data(s1off + 36 * idx + 7);

            auto s_xy_xz = primBuffer.data(s1off + 36 * idx + 8);

            auto s_xy_yy = primBuffer.data(s1off + 36 * idx + 9);

            auto s_xy_yz = primBuffer.data(s1off + 36 * idx + 10);

            auto s_xy_zz = primBuffer.data(s1off + 36 * idx + 11);

            auto s_xz_xx = primBuffer.data(s1off + 36 * idx + 12);

            auto s_xz_xy = primBuffer.data(s1off + 36 * idx + 13);

            auto s_xz_xz = primBuffer.data(s1off + 36 * idx + 14);

            auto s_xz_yy = primBuffer.data(s1off + 36 * idx + 15);

            auto s_xz_yz = primBuffer.data(s1off + 36 * idx + 16);

            auto s_xz_zz = primBuffer.data(s1off + 36 * idx + 17);

            auto s_yy_xx = primBuffer.data(s1off + 36 * idx + 18);

            auto s_yy_xy = primBuffer.data(s1off + 36 * idx + 19);

            auto s_yy_xz = primBuffer.data(s1off + 36 * idx + 20);

            auto s_yy_yy = primBuffer.data(s1off + 36 * idx + 21);

            auto s_yy_yz = primBuffer.data(s1off + 36 * idx + 22);

            auto s_yy_zz = primBuffer.data(s1off + 36 * idx + 23);

            auto s_yz_xx = primBuffer.data(s1off + 36 * idx + 24);

            auto s_yz_xy = primBuffer.data(s1off + 36 * idx + 25);

            auto s_yz_xz = primBuffer.data(s1off + 36 * idx + 26);

            auto s_yz_yy = primBuffer.data(s1off + 36 * idx + 27);

            auto s_yz_yz = primBuffer.data(s1off + 36 * idx + 28);

            auto s_yz_zz = primBuffer.data(s1off + 36 * idx + 29);

            auto s_zz_xx = primBuffer.data(s1off + 36 * idx + 30);

            auto s_zz_xy = primBuffer.data(s1off + 36 * idx + 31);

            auto s_zz_xz = primBuffer.data(s1off + 36 * idx + 32);

            auto s_zz_yy = primBuffer.data(s1off + 36 * idx + 33);

            auto s_zz_yz = primBuffer.data(s1off + 36 * idx + 34);

            auto s_zz_zz = primBuffer.data(s1off + 36 * idx + 35);

            // set up pointers to (P|D) integrals

            auto s_x_xx = primBuffer.data(s2off + 18 * idx);

            auto s_x_xy = primBuffer.data(s2off + 18 * idx + 1);

            auto s_x_xz = primBuffer.data(s2off + 18 * idx + 2);

            auto s_x_yy = primBuffer.data(s2off + 18 * idx + 3);

            auto s_x_yz = primBuffer.data(s2off + 18 * idx + 4);

            auto s_x_zz = primBuffer.data(s2off + 18 * idx + 5);

            auto s_y_xx = primBuffer.data(s2off + 18 * idx + 6);

            auto s_y_xy = primBuffer.data(s2off + 18 * idx + 7);

            auto s_y_xz = primBuffer.data(s2off + 18 * idx + 8);

            auto s_y_yy = primBuffer.data(s2off + 18 * idx + 9);

            auto s_y_yz = primBuffer.data(s2off + 18 * idx + 10);

            auto s_y_zz = primBuffer.data(s2off + 18 * idx + 11);

            auto s_z_xx = primBuffer.data(s2off + 18 * idx + 12);

            auto s_z_xy = primBuffer.data(s2off + 18 * idx + 13);

            auto s_z_xz = primBuffer.data(s2off + 18 * idx + 14);

            auto s_z_yy = primBuffer.data(s2off + 18 * idx + 15);

            auto s_z_yz = primBuffer.data(s2off + 18 * idx + 16);

            auto s_z_zz = primBuffer.data(s2off + 18 * idx + 17);

            // set up pointers to (D|P) integrals

            auto s_xx_x = primBuffer.data(skoff + 18 * idx);

            auto s_xx_y = primBuffer.data(skoff + 18 * idx + 1);

            auto s_xx_z = primBuffer.data(skoff + 18 * idx + 2);

            auto s_xy_x = primBuffer.data(skoff + 18 * idx + 3);

            auto s_xy_y = primBuffer.data(skoff + 18 * idx + 4);

            auto s_xy_z = primBuffer.data(skoff + 18 * idx + 5);

            auto s_xz_x = primBuffer.data(skoff + 18 * idx + 6);

            auto s_xz_y = primBuffer.data(skoff + 18 * idx + 7);

            auto s_xz_z = primBuffer.data(skoff + 18 * idx + 8);

            auto s_yy_x = primBuffer.data(skoff + 18 * idx + 9);

            auto s_yy_y = primBuffer.data(skoff + 18 * idx + 10);

            auto s_yy_z = primBuffer.data(skoff + 18 * idx + 11);

            auto s_yz_x = primBuffer.data(skoff + 18 * idx + 12);

            auto s_yz_y = primBuffer.data(skoff + 18 * idx + 13);

            auto s_yz_z = primBuffer.data(skoff + 18 * idx + 14);

            auto s_zz_x = primBuffer.data(skoff + 18 * idx + 15);

            auto s_zz_y = primBuffer.data(skoff + 18 * idx + 16);

            auto s_zz_z = primBuffer.data(skoff + 18 * idx + 17);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxxx_xx, dx_xxxx_xy,\
                                     dx_xxxx_xz, dx_xxxx_yy, dx_xxxx_yz, dx_xxxx_zz,\
                                     dx_xxxy_xx, dx_xxxy_xy, dx_xxxy_xz, dx_xxxy_yy,\
                                     dx_xxxy_yz, dx_xxxy_zz, dx_xxxz_xx, dx_xxxz_xy,\
                                     dx_xxxz_xz, dx_xxxz_yy, dx_xxxz_yz, dx_xxxz_zz,\
                                     dx_xxyy_xx, dx_xxyy_xy, dx_xxyy_xz, dx_xxyy_yy,\
                                     dx_xxyy_yz, dx_xxyy_zz, dx_xxyz_xx, dx_xxyz_xy,\
                                     dx_xxyz_xz, dx_xxyz_yy, dx_xxyz_yz, dx_xxyz_zz,\
                                     dx_xxzz_xx, dx_xxzz_xy, dx_xxzz_xz, dx_xxzz_yy,\
                                     dx_xxzz_yz, dx_xxzz_zz, dx_xyyy_xx, dx_xyyy_xy,\
                                     dx_xyyy_xz, dx_xyyy_yy, dx_xyyy_yz, dx_xyyy_zz,\
                                     dx_xyyz_xx, dx_xyyz_xy, dx_xyyz_xz, dx_xyyz_yy,\
                                     dx_xyyz_yz, dx_xyyz_zz, dx_xyzz_xx, dx_xyzz_xy,\
                                     dx_xyzz_xz, dx_xyzz_yy, dx_xyzz_yz, dx_xyzz_zz,\
                                     dx_xzzz_xx, dx_xzzz_xy, dx_xzzz_xz, dx_xzzz_yy,\
                                     dx_xzzz_yz, dx_xzzz_zz, dx_yyyy_xx, dx_yyyy_xy,\
                                     dx_yyyy_xz, dx_yyyy_yy, dx_yyyy_yz, dx_yyyy_zz,\
                                     dx_yyyz_xx, dx_yyyz_xy, dx_yyyz_xz, dx_yyyz_yy,\
                                     dx_yyyz_yz, dx_yyyz_zz, dx_yyzz_xx, dx_yyzz_xy,\
                                     dx_yyzz_xz, dx_yyzz_yy, dx_yyzz_yz, dx_yyzz_zz,\
                                     dx_yzzz_xx, dx_yzzz_xy, dx_yzzz_xz, dx_yzzz_yy,\
                                     dx_yzzz_yz, dx_yzzz_zz, dx_zzzz_xx, dx_zzzz_xy,\
                                     dx_zzzz_xz, dx_zzzz_yy, dx_zzzz_yz, dx_zzzz_zz,\
                                     dy_xxxx_xx, dy_xxxx_xy, dy_xxxx_xz, dy_xxxx_yy,\
                                     dy_xxxx_yz, dy_xxxx_zz, dy_xxxy_xx, dy_xxxy_xy,\
                                     dy_xxxy_xz, dy_xxxy_yy, dy_xxxy_yz, dy_xxxy_zz,\
                                     dy_xxxz_xx, dy_xxxz_xy, dy_xxxz_xz, dy_xxxz_yy,\
                                     dy_xxxz_yz, dy_xxxz_zz, dy_xxyy_xx, dy_xxyy_xy,\
                                     dy_xxyy_xz, dy_xxyy_yy, dy_xxyy_yz, dy_xxyy_zz,\
                                     dy_xxyz_xx, dy_xxyz_xy, dy_xxyz_xz, dy_xxyz_yy,\
                                     dy_xxyz_yz, dy_xxyz_zz, dy_xxzz_xx, dy_xxzz_xy,\
                                     dy_xxzz_xz, dy_xxzz_yy, dy_xxzz_yz, dy_xxzz_zz,\
                                     dy_xyyy_xx, dy_xyyy_xy, dy_xyyy_xz, dy_xyyy_yy,\
                                     dy_xyyy_yz, dy_xyyy_zz, dy_xyyz_xx, dy_xyyz_xy,\
                                     dy_xyyz_xz, dy_xyyz_yy, dy_xyyz_yz, dy_xyyz_zz,\
                                     dy_xyzz_xx, dy_xyzz_xy, dy_xyzz_xz, dy_xyzz_yy,\
                                     dy_xyzz_yz, dy_xyzz_zz, dy_xzzz_xx, dy_xzzz_xy,\
                                     dy_xzzz_xz, dy_xzzz_yy, dy_xzzz_yz, dy_xzzz_zz,\
                                     dy_yyyy_xx, dy_yyyy_xy, dy_yyyy_xz, dy_yyyy_yy,\
                                     dy_yyyy_yz, dy_yyyy_zz, dy_yyyz_xx, dy_yyyz_xy,\
                                     dy_yyyz_xz, dy_yyyz_yy, dy_yyyz_yz, dy_yyyz_zz,\
                                     dy_yyzz_xx, dy_yyzz_xy, dy_yyzz_xz, dy_yyzz_yy,\
                                     dy_yyzz_yz, dy_yyzz_zz, dy_yzzz_xx, dy_yzzz_xy,\
                                     dy_yzzz_xz, dy_yzzz_yy, dy_yzzz_yz, dy_yzzz_zz,\
                                     dy_zzzz_xx, dy_zzzz_xy, dy_zzzz_xz, dy_zzzz_yy,\
                                     dy_zzzz_yz, dy_zzzz_zz, dz_xxxx_xx, dz_xxxx_xy,\
                                     dz_xxxx_xz, dz_xxxx_yy, dz_xxxx_yz, dz_xxxx_zz,\
                                     dz_xxxy_xx, dz_xxxy_xy, dz_xxxy_xz, dz_xxxy_yy,\
                                     dz_xxxy_yz, dz_xxxy_zz, dz_xxxz_xx, dz_xxxz_xy,\
                                     dz_xxxz_xz, dz_xxxz_yy, dz_xxxz_yz, dz_xxxz_zz,\
                                     dz_xxyy_xx, dz_xxyy_xy, dz_xxyy_xz, dz_xxyy_yy,\
                                     dz_xxyy_yz, dz_xxyy_zz, dz_xxyz_xx, dz_xxyz_xy,\
                                     dz_xxyz_xz, dz_xxyz_yy, dz_xxyz_yz, dz_xxyz_zz,\
                                     dz_xxzz_xx, dz_xxzz_xy, dz_xxzz_xz, dz_xxzz_yy,\
                                     dz_xxzz_yz, dz_xxzz_zz, dz_xyyy_xx, dz_xyyy_xy,\
                                     dz_xyyy_xz, dz_xyyy_yy, dz_xyyy_yz, dz_xyyy_zz,\
                                     dz_xyyz_xx, dz_xyyz_xy, dz_xyyz_xz, dz_xyyz_yy,\
                                     dz_xyyz_yz, dz_xyyz_zz, dz_xyzz_xx, dz_xyzz_xy,\
                                     dz_xyzz_xz, dz_xyzz_yy, dz_xyzz_yz, dz_xyzz_zz,\
                                     dz_xzzz_xx, dz_xzzz_xy, dz_xzzz_xz, dz_xzzz_yy,\
                                     dz_xzzz_yz, dz_xzzz_zz, dz_yyyy_xx, dz_yyyy_xy,\
                                     dz_yyyy_xz, dz_yyyy_yy, dz_yyyy_yz, dz_yyyy_zz,\
                                     dz_yyyz_xx, dz_yyyz_xy, dz_yyyz_xz, dz_yyyz_yy,\
                                     dz_yyyz_yz, dz_yyyz_zz, dz_yyzz_xx, dz_yyzz_xy,\
                                     dz_yyzz_xz, dz_yyzz_yy, dz_yyzz_yz, dz_yyzz_zz,\
                                     dz_yzzz_xx, dz_yzzz_xy, dz_yzzz_xz, dz_yzzz_yy,\
                                     dz_yzzz_yz, dz_yzzz_zz, dz_zzzz_xx, dz_zzzz_xy,\
                                     dz_zzzz_xz, dz_zzzz_yy, dz_zzzz_yz, dz_zzzz_zz,\
                                     dx_xxx_xx, dx_xxx_xy, dx_xxx_xz, dx_xxx_yy,\
                                     dx_xxx_yz, dx_xxx_zz, dx_xxy_xx, dx_xxy_xy,\
                                     dx_xxy_xz, dx_xxy_yy, dx_xxy_yz, dx_xxy_zz,\
                                     dx_xxz_xx, dx_xxz_xy, dx_xxz_xz, dx_xxz_yy,\
                                     dx_xxz_yz, dx_xxz_zz, dx_xyy_xx, dx_xyy_xy,\
                                     dx_xyy_xz, dx_xyy_yy, dx_xyy_yz, dx_xyy_zz,\
                                     dx_xyz_xx, dx_xyz_xy, dx_xyz_xz, dx_xyz_yy,\
                                     dx_xyz_yz, dx_xyz_zz, dx_xzz_xx, dx_xzz_xy,\
                                     dx_xzz_xz, dx_xzz_yy, dx_xzz_yz, dx_xzz_zz,\
                                     dx_yyy_xx, dx_yyy_xy, dx_yyy_xz, dx_yyy_yy,\
                                     dx_yyy_yz, dx_yyy_zz, dx_yyz_xx, dx_yyz_xy,\
                                     dx_yyz_xz, dx_yyz_yy, dx_yyz_yz, dx_yyz_zz,\
                                     dx_yzz_xx, dx_yzz_xy, dx_yzz_xz, dx_yzz_yy,\
                                     dx_yzz_yz, dx_yzz_zz, dx_zzz_xx, dx_zzz_xy,\
                                     dx_zzz_xz, dx_zzz_yy, dx_zzz_yz, dx_zzz_zz,\
                                     dy_xxx_xx, dy_xxx_xy, dy_xxx_xz, dy_xxx_yy,\
                                     dy_xxx_yz, dy_xxx_zz, dy_xxy_xx, dy_xxy_xy,\
                                     dy_xxy_xz, dy_xxy_yy, dy_xxy_yz, dy_xxy_zz,\
                                     dy_xxz_xx, dy_xxz_xy, dy_xxz_xz, dy_xxz_yy,\
                                     dy_xxz_yz, dy_xxz_zz, dy_xyy_xx, dy_xyy_xy,\
                                     dy_xyy_xz, dy_xyy_yy, dy_xyy_yz, dy_xyy_zz,\
                                     dy_xyz_xx, dy_xyz_xy, dy_xyz_xz, dy_xyz_yy,\
                                     dy_xyz_yz, dy_xyz_zz, dy_xzz_xx, dy_xzz_xy,\
                                     dy_xzz_xz, dy_xzz_yy, dy_xzz_yz, dy_xzz_zz,\
                                     dy_yyy_xx, dy_yyy_xy, dy_yyy_xz, dy_yyy_yy,\
                                     dy_yyy_yz, dy_yyy_zz, dy_yyz_xx, dy_yyz_xy,\
                                     dy_yyz_xz, dy_yyz_yy, dy_yyz_yz, dy_yyz_zz,\
                                     dy_yzz_xx, dy_yzz_xy, dy_yzz_xz, dy_yzz_yy,\
                                     dy_yzz_yz, dy_yzz_zz, dy_zzz_xx, dy_zzz_xy,\
                                     dy_zzz_xz, dy_zzz_yy, dy_zzz_yz, dy_zzz_zz,\
                                     dz_xxx_xx, dz_xxx_xy, dz_xxx_xz, dz_xxx_yy,\
                                     dz_xxx_yz, dz_xxx_zz, dz_xxy_xx, dz_xxy_xy,\
                                     dz_xxy_xz, dz_xxy_yy, dz_xxy_yz, dz_xxy_zz,\
                                     dz_xxz_xx, dz_xxz_xy, dz_xxz_xz, dz_xxz_yy,\
                                     dz_xxz_yz, dz_xxz_zz, dz_xyy_xx, dz_xyy_xy,\
                                     dz_xyy_xz, dz_xyy_yy, dz_xyy_yz, dz_xyy_zz,\
                                     dz_xyz_xx, dz_xyz_xy, dz_xyz_xz, dz_xyz_yy,\
                                     dz_xyz_yz, dz_xyz_zz, dz_xzz_xx, dz_xzz_xy,\
                                     dz_xzz_xz, dz_xzz_yy, dz_xzz_yz, dz_xzz_zz,\
                                     dz_yyy_xx, dz_yyy_xy, dz_yyy_xz, dz_yyy_yy,\
                                     dz_yyy_yz, dz_yyy_zz, dz_yyz_xx, dz_yyz_xy,\
                                     dz_yyz_xz, dz_yyz_yy, dz_yyz_yz, dz_yyz_zz,\
                                     dz_yzz_xx, dz_yzz_xy, dz_yzz_xz, dz_yzz_yy,\
                                     dz_yzz_yz, dz_yzz_zz, dz_zzz_xx, dz_zzz_xy,\
                                     dz_zzz_xz, dz_zzz_yy, dz_zzz_yz, dz_zzz_zz,\
                                     dx_xx_xx, dx_xx_xy, dx_xx_xz, dx_xx_yy, dx_xx_yz,\
                                     dx_xx_zz, dx_xy_xx, dx_xy_xy, dx_xy_xz, dx_xy_yy,\
                                     dx_xy_yz, dx_xy_zz, dx_xz_xx, dx_xz_xy, dx_xz_xz,\
                                     dx_xz_yy, dx_xz_yz, dx_xz_zz, dx_yy_xx, dx_yy_xy,\
                                     dx_yy_xz, dx_yy_yy, dx_yy_yz, dx_yy_zz, dx_yz_xx,\
                                     dx_yz_xy, dx_yz_xz, dx_yz_yy, dx_yz_yz, dx_yz_zz,\
                                     dx_zz_xx, dx_zz_xy, dx_zz_xz, dx_zz_yy, dx_zz_yz,\
                                     dx_zz_zz, dy_xx_xx, dy_xx_xy, dy_xx_xz, dy_xx_yy,\
                                     dy_xx_yz, dy_xx_zz, dy_xy_xx, dy_xy_xy, dy_xy_xz,\
                                     dy_xy_yy, dy_xy_yz, dy_xy_zz, dy_xz_xx, dy_xz_xy,\
                                     dy_xz_xz, dy_xz_yy, dy_xz_yz, dy_xz_zz, dy_yy_xx,\
                                     dy_yy_xy, dy_yy_xz, dy_yy_yy, dy_yy_yz, dy_yy_zz,\
                                     dy_yz_xx, dy_yz_xy, dy_yz_xz, dy_yz_yy, dy_yz_yz,\
                                     dy_yz_zz, dy_zz_xx, dy_zz_xy, dy_zz_xz, dy_zz_yy,\
                                     dy_zz_yz, dy_zz_zz, dz_xx_xx, dz_xx_xy, dz_xx_xz,\
                                     dz_xx_yy, dz_xx_yz, dz_xx_zz, dz_xy_xx, dz_xy_xy,\
                                     dz_xy_xz, dz_xy_yy, dz_xy_yz, dz_xy_zz, dz_xz_xx,\
                                     dz_xz_xy, dz_xz_xz, dz_xz_yy, dz_xz_yz, dz_xz_zz,\
                                     dz_yy_xx, dz_yy_xy, dz_yy_xz, dz_yy_yy, dz_yy_yz,\
                                     dz_yy_zz, dz_yz_xx, dz_yz_xy, dz_yz_xz, dz_yz_yy,\
                                     dz_yz_yz, dz_yz_zz, dz_zz_xx, dz_zz_xy, dz_zz_xz,\
                                     dz_zz_yy, dz_zz_yz, dz_zz_zz, dx_xxx_x, dx_xxx_y,\
                                     dx_xxx_z, dx_xxy_x, dx_xxy_y, dx_xxy_z, dx_xxz_x,\
                                     dx_xxz_y, dx_xxz_z, dx_xyy_x, dx_xyy_y, dx_xyy_z,\
                                     dx_xyz_x, dx_xyz_y, dx_xyz_z, dx_xzz_x, dx_xzz_y,\
                                     dx_xzz_z, dx_yyy_x, dx_yyy_y, dx_yyy_z, dx_yyz_x,\
                                     dx_yyz_y, dx_yyz_z, dx_yzz_x, dx_yzz_y, dx_yzz_z,\
                                     dx_zzz_x, dx_zzz_y, dx_zzz_z, dy_xxx_x, dy_xxx_y,\
                                     dy_xxx_z, dy_xxy_x, dy_xxy_y, dy_xxy_z, dy_xxz_x,\
                                     dy_xxz_y, dy_xxz_z, dy_xyy_x, dy_xyy_y, dy_xyy_z,\
                                     dy_xyz_x, dy_xyz_y, dy_xyz_z, dy_xzz_x, dy_xzz_y,\
                                     dy_xzz_z, dy_yyy_x, dy_yyy_y, dy_yyy_z, dy_yyz_x,\
                                     dy_yyz_y, dy_yyz_z, dy_yzz_x, dy_yzz_y, dy_yzz_z,\
                                     dy_zzz_x, dy_zzz_y, dy_zzz_z, dz_xxx_x, dz_xxx_y,\
                                     dz_xxx_z, dz_xxy_x, dz_xxy_y, dz_xxy_z, dz_xxz_x,\
                                     dz_xxz_y, dz_xxz_z, dz_xyy_x, dz_xyy_y, dz_xyy_z,\
                                     dz_xyz_x, dz_xyz_y, dz_xyz_z, dz_xzz_x, dz_xzz_y,\
                                     dz_xzz_z, dz_yyy_x, dz_yyy_y, dz_yyy_z, dz_yyz_x,\
                                     dz_yyz_y, dz_yyz_z, dz_yzz_x, dz_yzz_y, dz_yzz_z,\
                                     dz_zzz_x, dz_zzz_y, dz_zzz_z, s_xxx_xx, s_xxx_xy,\
                                     s_xxx_xz, s_xxx_yy, s_xxx_yz, s_xxx_zz, s_xxy_xx,\
                                     s_xxy_xy, s_xxy_xz, s_xxy_yy, s_xxy_yz, s_xxy_zz,\
                                     s_xxz_xx, s_xxz_xy, s_xxz_xz, s_xxz_yy, s_xxz_yz,\
                                     s_xxz_zz, s_xyy_xx, s_xyy_xy, s_xyy_xz, s_xyy_yy,\
                                     s_xyy_yz, s_xyy_zz, s_xyz_xx, s_xyz_xy, s_xyz_xz,\
                                     s_xyz_yy, s_xyz_yz, s_xyz_zz, s_xzz_xx, s_xzz_xy,\
                                     s_xzz_xz, s_xzz_yy, s_xzz_yz, s_xzz_zz, s_yyy_xx,\
                                     s_yyy_xy, s_yyy_xz, s_yyy_yy, s_yyy_yz, s_yyy_zz,\
                                     s_yyz_xx, s_yyz_xy, s_yyz_xz, s_yyz_yy, s_yyz_yz,\
                                     s_yyz_zz, s_yzz_xx, s_yzz_xy, s_yzz_xz, s_yzz_yy,\
                                     s_yzz_yz, s_yzz_zz, s_zzz_xx, s_zzz_xy, s_zzz_xz,\
                                     s_zzz_yy, s_zzz_yz, s_zzz_zz, s_xx_xx, s_xx_xy,\
                                     s_xx_xz, s_xx_yy, s_xx_yz, s_xx_zz, s_xy_xx,\
                                     s_xy_xy, s_xy_xz, s_xy_yy, s_xy_yz, s_xy_zz,\
                                     s_xz_xx, s_xz_xy, s_xz_xz, s_xz_yy, s_xz_yz,\
                                     s_xz_zz, s_yy_xx, s_yy_xy, s_yy_xz, s_yy_yy,\
                                     s_yy_yz, s_yy_zz, s_yz_xx, s_yz_xy, s_yz_xz,\
                                     s_yz_yy, s_yz_yz, s_yz_zz, s_zz_xx, s_zz_xy,\
                                     s_zz_xz, s_zz_yy, s_zz_yz, s_zz_zz, s_x_xx,\
                                     s_x_xy, s_x_xz, s_x_yy, s_x_yz, s_x_zz, s_y_xx,\
                                     s_y_xy, s_y_xz, s_y_yy, s_y_yz, s_y_zz, s_z_xx,\
                                     s_z_xy, s_z_xz, s_z_yy, s_z_yz, s_z_zz, s_xx_x,\
                                     s_xx_y, s_xx_z, s_xy_x, s_xy_y, s_xy_z, s_xz_x,\
                                     s_xz_y, s_xz_z, s_yy_x, s_yy_y, s_yy_z, s_yz_x,\
                                     s_yz_y, s_yz_z, s_zz_x, s_zz_y, s_zz_z: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xxx_xx[j] = fr * s_xx_xx[j] + f2t * (2.0 * s_x_xx[j] + 2.0 * s_xx_x[j]);

                s_xxx_xy[j] = fr * s_xx_xy[j] + f2t * (2.0 * s_x_xy[j] + s_xx_y[j]);

                s_xxx_xz[j] = fr * s_xx_xz[j] + f2t * (2.0 * s_x_xz[j] + s_xx_z[j]);

                s_xxx_yy[j] = fr * s_xx_yy[j] + f2t * 2.0 * s_x_yy[j];

                s_xxx_yz[j] = fr * s_xx_yz[j] + f2t * 2.0 * s_x_yz[j];

                s_xxx_zz[j] = fr * s_xx_zz[j] + f2t * 2.0 * s_x_zz[j];

                s_xxy_xx[j] = fr * s_xy_xx[j] + f2t * (s_y_xx[j] + 2.0 * s_xy_x[j]);

                s_xxy_xy[j] = fr * s_xy_xy[j] + f2t * (s_y_xy[j] + s_xy_y[j]);

                s_xxy_xz[j] = fr * s_xy_xz[j] + f2t * (s_y_xz[j] + s_xy_z[j]);

                s_xxy_yy[j] = fr * s_xy_yy[j] + f2t * s_y_yy[j];

                s_xxy_yz[j] = fr * s_xy_yz[j] + f2t * s_y_yz[j];

                s_xxy_zz[j] = fr * s_xy_zz[j] + f2t * s_y_zz[j];

                s_xxz_xx[j] = fr * s_xz_xx[j] + f2t * (s_z_xx[j] + 2.0 * s_xz_x[j]);

                s_xxz_xy[j] = fr * s_xz_xy[j] + f2t * (s_z_xy[j] + s_xz_y[j]);

                s_xxz_xz[j] = fr * s_xz_xz[j] + f2t * (s_z_xz[j] + s_xz_z[j]);

                s_xxz_yy[j] = fr * s_xz_yy[j] + f2t * s_z_yy[j];

                s_xxz_yz[j] = fr * s_xz_yz[j] + f2t * s_z_yz[j];

                s_xxz_zz[j] = fr * s_xz_zz[j] + f2t * s_z_zz[j];

                s_xyy_xx[j] = fr * s_yy_xx[j] + f2t * 2.0 * s_yy_x[j];

                s_xyy_xy[j] = fr * s_yy_xy[j] + f2t * s_yy_y[j];

                s_xyy_xz[j] = fr * s_yy_xz[j] + f2t * s_yy_z[j];

                s_xyy_yy[j] = fr * s_yy_yy[j];

                s_xyy_yz[j] = fr * s_yy_yz[j];

                s_xyy_zz[j] = fr * s_yy_zz[j];

                s_xyz_xx[j] = fr * s_yz_xx[j] + f2t * 2.0 * s_yz_x[j];

                s_xyz_xy[j] = fr * s_yz_xy[j] + f2t * s_yz_y[j];

                s_xyz_xz[j] = fr * s_yz_xz[j] + f2t * s_yz_z[j];

                s_xyz_yy[j] = fr * s_yz_yy[j];

                s_xyz_yz[j] = fr * s_yz_yz[j];

                s_xyz_zz[j] = fr * s_yz_zz[j];

                s_xzz_xx[j] = fr * s_zz_xx[j] + f2t * 2.0 * s_zz_x[j];

                s_xzz_xy[j] = fr * s_zz_xy[j] + f2t * s_zz_y[j];

                s_xzz_xz[j] = fr * s_zz_xz[j] + f2t * s_zz_z[j];

                s_xzz_yy[j] = fr * s_zz_yy[j];

                s_xzz_yz[j] = fr * s_zz_yz[j];

                s_xzz_zz[j] = fr * s_zz_zz[j];

                // leading y component

                fr = pay[j];

                s_yyy_xx[j] = fr * s_yy_xx[j] + f2t * 2.0 * s_y_xx[j];

                s_yyy_xy[j] = fr * s_yy_xy[j] + f2t * (2.0 * s_y_xy[j] + s_yy_x[j]);

                s_yyy_xz[j] = fr * s_yy_xz[j] + f2t * 2.0 * s_y_xz[j];

                s_yyy_yy[j] = fr * s_yy_yy[j] + f2t * (2.0 * s_y_yy[j] + 2.0 * s_yy_y[j]);

                s_yyy_yz[j] = fr * s_yy_yz[j] + f2t * (2.0 * s_y_yz[j] + s_yy_z[j]);

                s_yyy_zz[j] = fr * s_yy_zz[j] + f2t * 2.0 * s_y_zz[j];

                s_yyz_xx[j] = fr * s_yz_xx[j] + f2t * s_z_xx[j];

                s_yyz_xy[j] = fr * s_yz_xy[j] + f2t * (s_z_xy[j] + s_yz_x[j]);

                s_yyz_xz[j] = fr * s_yz_xz[j] + f2t * s_z_xz[j];

                s_yyz_yy[j] = fr * s_yz_yy[j] + f2t * (s_z_yy[j] + 2.0 * s_yz_y[j]);

                s_yyz_yz[j] = fr * s_yz_yz[j] + f2t * (s_z_yz[j] + s_yz_z[j]);

                s_yyz_zz[j] = fr * s_yz_zz[j] + f2t * s_z_zz[j];

                s_yzz_xx[j] = fr * s_zz_xx[j];

                s_yzz_xy[j] = fr * s_zz_xy[j] + f2t * s_zz_x[j];

                s_yzz_xz[j] = fr * s_zz_xz[j];

                s_yzz_yy[j] = fr * s_zz_yy[j] + f2t * 2.0 * s_zz_y[j];

                s_yzz_yz[j] = fr * s_zz_yz[j] + f2t * s_zz_z[j];

                s_yzz_zz[j] = fr * s_zz_zz[j];

                // leading z component

                fr = paz[j];

                s_zzz_xx[j] = fr * s_zz_xx[j] + f2t * 2.0 * s_z_xx[j];

                s_zzz_xy[j] = fr * s_zz_xy[j] + f2t * 2.0 * s_z_xy[j];

                s_zzz_xz[j] = fr * s_zz_xz[j] + f2t * (2.0 * s_z_xz[j] + s_zz_x[j]);

                s_zzz_yy[j] = fr * s_zz_yy[j] + f2t * 2.0 * s_z_yy[j];

                s_zzz_yz[j] = fr * s_zz_yz[j] + f2t * (2.0 * s_z_yz[j] + s_zz_y[j]);

                s_zzz_zz[j] = fr * s_zz_zz[j] + f2t * (2.0 * s_z_zz[j] + 2.0 * s_zz_z[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxxx_xx[j] = fr * dx_xxx_xx[j] + f2t * (3.0 * dx_xx_xx[j] + 2.0 * dx_xxx_x[j] + s_xxx_xx[j]);

                dy_xxxx_xx[j] = fr * dy_xxx_xx[j] + f2t * (3.0 * dy_xx_xx[j] + 2.0 * dy_xxx_x[j]);

                dz_xxxx_xx[j] = fr * dz_xxx_xx[j] + f2t * (3.0 * dz_xx_xx[j] + 2.0 * dz_xxx_x[j]);

                dx_xxxx_xy[j] = fr * dx_xxx_xy[j] + f2t * (3.0 * dx_xx_xy[j] + dx_xxx_y[j] + s_xxx_xy[j]);

                dy_xxxx_xy[j] = fr * dy_xxx_xy[j] + f2t * (3.0 * dy_xx_xy[j] + dy_xxx_y[j]);

                dz_xxxx_xy[j] = fr * dz_xxx_xy[j] + f2t * (3.0 * dz_xx_xy[j] + dz_xxx_y[j]);

                dx_xxxx_xz[j] = fr * dx_xxx_xz[j] + f2t * (3.0 * dx_xx_xz[j] + dx_xxx_z[j] + s_xxx_xz[j]);

                dy_xxxx_xz[j] = fr * dy_xxx_xz[j] + f2t * (3.0 * dy_xx_xz[j] + dy_xxx_z[j]);

                dz_xxxx_xz[j] = fr * dz_xxx_xz[j] + f2t * (3.0 * dz_xx_xz[j] + dz_xxx_z[j]);

                dx_xxxx_yy[j] = fr * dx_xxx_yy[j] + f2t * (3.0 * dx_xx_yy[j] + s_xxx_yy[j]);

                dy_xxxx_yy[j] = fr * dy_xxx_yy[j] + f2t * 3.0 * dy_xx_yy[j];

                dz_xxxx_yy[j] = fr * dz_xxx_yy[j] + f2t * 3.0 * dz_xx_yy[j];

                dx_xxxx_yz[j] = fr * dx_xxx_yz[j] + f2t * (3.0 * dx_xx_yz[j] + s_xxx_yz[j]);

                dy_xxxx_yz[j] = fr * dy_xxx_yz[j] + f2t * 3.0 * dy_xx_yz[j];

                dz_xxxx_yz[j] = fr * dz_xxx_yz[j] + f2t * 3.0 * dz_xx_yz[j];

                dx_xxxx_zz[j] = fr * dx_xxx_zz[j] + f2t * (3.0 * dx_xx_zz[j] + s_xxx_zz[j]);

                dy_xxxx_zz[j] = fr * dy_xxx_zz[j] + f2t * 3.0 * dy_xx_zz[j];

                dz_xxxx_zz[j] = fr * dz_xxx_zz[j] + f2t * 3.0 * dz_xx_zz[j];

                dx_xxxy_xx[j] = fr * dx_xxy_xx[j] + f2t * (2.0 * dx_xy_xx[j] + 2.0 * dx_xxy_x[j] + s_xxy_xx[j]);

                dy_xxxy_xx[j] = fr * dy_xxy_xx[j] + f2t * (2.0 * dy_xy_xx[j] + 2.0 * dy_xxy_x[j]);

                dz_xxxy_xx[j] = fr * dz_xxy_xx[j] + f2t * (2.0 * dz_xy_xx[j] + 2.0 * dz_xxy_x[j]);

                dx_xxxy_xy[j] = fr * dx_xxy_xy[j] + f2t * (2.0 * dx_xy_xy[j] + dx_xxy_y[j] + s_xxy_xy[j]);

                dy_xxxy_xy[j] = fr * dy_xxy_xy[j] + f2t * (2.0 * dy_xy_xy[j] + dy_xxy_y[j]);

                dz_xxxy_xy[j] = fr * dz_xxy_xy[j] + f2t * (2.0 * dz_xy_xy[j] + dz_xxy_y[j]);

                dx_xxxy_xz[j] = fr * dx_xxy_xz[j] + f2t * (2.0 * dx_xy_xz[j] + dx_xxy_z[j] + s_xxy_xz[j]);

                dy_xxxy_xz[j] = fr * dy_xxy_xz[j] + f2t * (2.0 * dy_xy_xz[j] + dy_xxy_z[j]);

                dz_xxxy_xz[j] = fr * dz_xxy_xz[j] + f2t * (2.0 * dz_xy_xz[j] + dz_xxy_z[j]);

                dx_xxxy_yy[j] = fr * dx_xxy_yy[j] + f2t * (2.0 * dx_xy_yy[j] + s_xxy_yy[j]);

                dy_xxxy_yy[j] = fr * dy_xxy_yy[j] + f2t * 2.0 * dy_xy_yy[j];

                dz_xxxy_yy[j] = fr * dz_xxy_yy[j] + f2t * 2.0 * dz_xy_yy[j];

                dx_xxxy_yz[j] = fr * dx_xxy_yz[j] + f2t * (2.0 * dx_xy_yz[j] + s_xxy_yz[j]);

                dy_xxxy_yz[j] = fr * dy_xxy_yz[j] + f2t * 2.0 * dy_xy_yz[j];

                dz_xxxy_yz[j] = fr * dz_xxy_yz[j] + f2t * 2.0 * dz_xy_yz[j];

                dx_xxxy_zz[j] = fr * dx_xxy_zz[j] + f2t * (2.0 * dx_xy_zz[j] + s_xxy_zz[j]);

                dy_xxxy_zz[j] = fr * dy_xxy_zz[j] + f2t * 2.0 * dy_xy_zz[j];

                dz_xxxy_zz[j] = fr * dz_xxy_zz[j] + f2t * 2.0 * dz_xy_zz[j];

                dx_xxxz_xx[j] = fr * dx_xxz_xx[j] + f2t * (2.0 * dx_xz_xx[j] + 2.0 * dx_xxz_x[j] + s_xxz_xx[j]);

                dy_xxxz_xx[j] = fr * dy_xxz_xx[j] + f2t * (2.0 * dy_xz_xx[j] + 2.0 * dy_xxz_x[j]);

                dz_xxxz_xx[j] = fr * dz_xxz_xx[j] + f2t * (2.0 * dz_xz_xx[j] + 2.0 * dz_xxz_x[j]);

                dx_xxxz_xy[j] = fr * dx_xxz_xy[j] + f2t * (2.0 * dx_xz_xy[j] + dx_xxz_y[j] + s_xxz_xy[j]);

                dy_xxxz_xy[j] = fr * dy_xxz_xy[j] + f2t * (2.0 * dy_xz_xy[j] + dy_xxz_y[j]);

                dz_xxxz_xy[j] = fr * dz_xxz_xy[j] + f2t * (2.0 * dz_xz_xy[j] + dz_xxz_y[j]);

                dx_xxxz_xz[j] = fr * dx_xxz_xz[j] + f2t * (2.0 * dx_xz_xz[j] + dx_xxz_z[j] + s_xxz_xz[j]);

                dy_xxxz_xz[j] = fr * dy_xxz_xz[j] + f2t * (2.0 * dy_xz_xz[j] + dy_xxz_z[j]);

                dz_xxxz_xz[j] = fr * dz_xxz_xz[j] + f2t * (2.0 * dz_xz_xz[j] + dz_xxz_z[j]);

                dx_xxxz_yy[j] = fr * dx_xxz_yy[j] + f2t * (2.0 * dx_xz_yy[j] + s_xxz_yy[j]);

                dy_xxxz_yy[j] = fr * dy_xxz_yy[j] + f2t * 2.0 * dy_xz_yy[j];

                dz_xxxz_yy[j] = fr * dz_xxz_yy[j] + f2t * 2.0 * dz_xz_yy[j];

                dx_xxxz_yz[j] = fr * dx_xxz_yz[j] + f2t * (2.0 * dx_xz_yz[j] + s_xxz_yz[j]);

                dy_xxxz_yz[j] = fr * dy_xxz_yz[j] + f2t * 2.0 * dy_xz_yz[j];

                dz_xxxz_yz[j] = fr * dz_xxz_yz[j] + f2t * 2.0 * dz_xz_yz[j];

                dx_xxxz_zz[j] = fr * dx_xxz_zz[j] + f2t * (2.0 * dx_xz_zz[j] + s_xxz_zz[j]);

                dy_xxxz_zz[j] = fr * dy_xxz_zz[j] + f2t * 2.0 * dy_xz_zz[j];

                dz_xxxz_zz[j] = fr * dz_xxz_zz[j] + f2t * 2.0 * dz_xz_zz[j];

                dx_xxyy_xx[j] = fr * dx_xyy_xx[j] + f2t * (dx_yy_xx[j] + 2.0 * dx_xyy_x[j] + s_xyy_xx[j]);

                dy_xxyy_xx[j] = fr * dy_xyy_xx[j] + f2t * (dy_yy_xx[j] + 2.0 * dy_xyy_x[j]);

                dz_xxyy_xx[j] = fr * dz_xyy_xx[j] + f2t * (dz_yy_xx[j] + 2.0 * dz_xyy_x[j]);

                dx_xxyy_xy[j] = fr * dx_xyy_xy[j] + f2t * (dx_yy_xy[j] + dx_xyy_y[j] + s_xyy_xy[j]);

                dy_xxyy_xy[j] = fr * dy_xyy_xy[j] + f2t * (dy_yy_xy[j] + dy_xyy_y[j]);

                dz_xxyy_xy[j] = fr * dz_xyy_xy[j] + f2t * (dz_yy_xy[j] + dz_xyy_y[j]);

                dx_xxyy_xz[j] = fr * dx_xyy_xz[j] + f2t * (dx_yy_xz[j] + dx_xyy_z[j] + s_xyy_xz[j]);

                dy_xxyy_xz[j] = fr * dy_xyy_xz[j] + f2t * (dy_yy_xz[j] + dy_xyy_z[j]);

                dz_xxyy_xz[j] = fr * dz_xyy_xz[j] + f2t * (dz_yy_xz[j] + dz_xyy_z[j]);

                dx_xxyy_yy[j] = fr * dx_xyy_yy[j] + f2t * (dx_yy_yy[j] + s_xyy_yy[j]);

                dy_xxyy_yy[j] = fr * dy_xyy_yy[j] + f2t * dy_yy_yy[j];

                dz_xxyy_yy[j] = fr * dz_xyy_yy[j] + f2t * dz_yy_yy[j];

                dx_xxyy_yz[j] = fr * dx_xyy_yz[j] + f2t * (dx_yy_yz[j] + s_xyy_yz[j]);

                dy_xxyy_yz[j] = fr * dy_xyy_yz[j] + f2t * dy_yy_yz[j];

                dz_xxyy_yz[j] = fr * dz_xyy_yz[j] + f2t * dz_yy_yz[j];

                dx_xxyy_zz[j] = fr * dx_xyy_zz[j] + f2t * (dx_yy_zz[j] + s_xyy_zz[j]);

                dy_xxyy_zz[j] = fr * dy_xyy_zz[j] + f2t * dy_yy_zz[j];

                dz_xxyy_zz[j] = fr * dz_xyy_zz[j] + f2t * dz_yy_zz[j];

                dx_xxyz_xx[j] = fr * dx_xyz_xx[j] + f2t * (dx_yz_xx[j] + 2.0 * dx_xyz_x[j] + s_xyz_xx[j]);

                dy_xxyz_xx[j] = fr * dy_xyz_xx[j] + f2t * (dy_yz_xx[j] + 2.0 * dy_xyz_x[j]);

                dz_xxyz_xx[j] = fr * dz_xyz_xx[j] + f2t * (dz_yz_xx[j] + 2.0 * dz_xyz_x[j]);

                dx_xxyz_xy[j] = fr * dx_xyz_xy[j] + f2t * (dx_yz_xy[j] + dx_xyz_y[j] + s_xyz_xy[j]);

                dy_xxyz_xy[j] = fr * dy_xyz_xy[j] + f2t * (dy_yz_xy[j] + dy_xyz_y[j]);

                dz_xxyz_xy[j] = fr * dz_xyz_xy[j] + f2t * (dz_yz_xy[j] + dz_xyz_y[j]);

                dx_xxyz_xz[j] = fr * dx_xyz_xz[j] + f2t * (dx_yz_xz[j] + dx_xyz_z[j] + s_xyz_xz[j]);

                dy_xxyz_xz[j] = fr * dy_xyz_xz[j] + f2t * (dy_yz_xz[j] + dy_xyz_z[j]);

                dz_xxyz_xz[j] = fr * dz_xyz_xz[j] + f2t * (dz_yz_xz[j] + dz_xyz_z[j]);

                dx_xxyz_yy[j] = fr * dx_xyz_yy[j] + f2t * (dx_yz_yy[j] + s_xyz_yy[j]);

                dy_xxyz_yy[j] = fr * dy_xyz_yy[j] + f2t * dy_yz_yy[j];

                dz_xxyz_yy[j] = fr * dz_xyz_yy[j] + f2t * dz_yz_yy[j];

                dx_xxyz_yz[j] = fr * dx_xyz_yz[j] + f2t * (dx_yz_yz[j] + s_xyz_yz[j]);

                dy_xxyz_yz[j] = fr * dy_xyz_yz[j] + f2t * dy_yz_yz[j];

                dz_xxyz_yz[j] = fr * dz_xyz_yz[j] + f2t * dz_yz_yz[j];

                dx_xxyz_zz[j] = fr * dx_xyz_zz[j] + f2t * (dx_yz_zz[j] + s_xyz_zz[j]);

                dy_xxyz_zz[j] = fr * dy_xyz_zz[j] + f2t * dy_yz_zz[j];

                dz_xxyz_zz[j] = fr * dz_xyz_zz[j] + f2t * dz_yz_zz[j];

                dx_xxzz_xx[j] = fr * dx_xzz_xx[j] + f2t * (dx_zz_xx[j] + 2.0 * dx_xzz_x[j] + s_xzz_xx[j]);

                dy_xxzz_xx[j] = fr * dy_xzz_xx[j] + f2t * (dy_zz_xx[j] + 2.0 * dy_xzz_x[j]);

                dz_xxzz_xx[j] = fr * dz_xzz_xx[j] + f2t * (dz_zz_xx[j] + 2.0 * dz_xzz_x[j]);

                dx_xxzz_xy[j] = fr * dx_xzz_xy[j] + f2t * (dx_zz_xy[j] + dx_xzz_y[j] + s_xzz_xy[j]);

                dy_xxzz_xy[j] = fr * dy_xzz_xy[j] + f2t * (dy_zz_xy[j] + dy_xzz_y[j]);

                dz_xxzz_xy[j] = fr * dz_xzz_xy[j] + f2t * (dz_zz_xy[j] + dz_xzz_y[j]);

                dx_xxzz_xz[j] = fr * dx_xzz_xz[j] + f2t * (dx_zz_xz[j] + dx_xzz_z[j] + s_xzz_xz[j]);

                dy_xxzz_xz[j] = fr * dy_xzz_xz[j] + f2t * (dy_zz_xz[j] + dy_xzz_z[j]);

                dz_xxzz_xz[j] = fr * dz_xzz_xz[j] + f2t * (dz_zz_xz[j] + dz_xzz_z[j]);

                dx_xxzz_yy[j] = fr * dx_xzz_yy[j] + f2t * (dx_zz_yy[j] + s_xzz_yy[j]);

                dy_xxzz_yy[j] = fr * dy_xzz_yy[j] + f2t * dy_zz_yy[j];

                dz_xxzz_yy[j] = fr * dz_xzz_yy[j] + f2t * dz_zz_yy[j];

                dx_xxzz_yz[j] = fr * dx_xzz_yz[j] + f2t * (dx_zz_yz[j] + s_xzz_yz[j]);

                dy_xxzz_yz[j] = fr * dy_xzz_yz[j] + f2t * dy_zz_yz[j];

                dz_xxzz_yz[j] = fr * dz_xzz_yz[j] + f2t * dz_zz_yz[j];

                dx_xxzz_zz[j] = fr * dx_xzz_zz[j] + f2t * (dx_zz_zz[j] + s_xzz_zz[j]);

                dy_xxzz_zz[j] = fr * dy_xzz_zz[j] + f2t * dy_zz_zz[j];

                dz_xxzz_zz[j] = fr * dz_xzz_zz[j] + f2t * dz_zz_zz[j];

                dx_xyyy_xx[j] = fr * dx_yyy_xx[j] + f2t * (2.0 * dx_yyy_x[j] + s_yyy_xx[j]);

                dy_xyyy_xx[j] = fr * dy_yyy_xx[j] + f2t * 2.0 * dy_yyy_x[j];

                dz_xyyy_xx[j] = fr * dz_yyy_xx[j] + f2t * 2.0 * dz_yyy_x[j];

                dx_xyyy_xy[j] = fr * dx_yyy_xy[j] + f2t * (dx_yyy_y[j] + s_yyy_xy[j]);

                dy_xyyy_xy[j] = fr * dy_yyy_xy[j] + f2t * dy_yyy_y[j];

                dz_xyyy_xy[j] = fr * dz_yyy_xy[j] + f2t * dz_yyy_y[j];

                dx_xyyy_xz[j] = fr * dx_yyy_xz[j] + f2t * (dx_yyy_z[j] + s_yyy_xz[j]);

                dy_xyyy_xz[j] = fr * dy_yyy_xz[j] + f2t * dy_yyy_z[j];

                dz_xyyy_xz[j] = fr * dz_yyy_xz[j] + f2t * dz_yyy_z[j];

                dx_xyyy_yy[j] = fr * dx_yyy_yy[j] + f2t * s_yyy_yy[j];

                dy_xyyy_yy[j] = fr * dy_yyy_yy[j];

                dz_xyyy_yy[j] = fr * dz_yyy_yy[j];

                dx_xyyy_yz[j] = fr * dx_yyy_yz[j] + f2t * s_yyy_yz[j];

                dy_xyyy_yz[j] = fr * dy_yyy_yz[j];

                dz_xyyy_yz[j] = fr * dz_yyy_yz[j];

                dx_xyyy_zz[j] = fr * dx_yyy_zz[j] + f2t * s_yyy_zz[j];

                dy_xyyy_zz[j] = fr * dy_yyy_zz[j];

                dz_xyyy_zz[j] = fr * dz_yyy_zz[j];

                dx_xyyz_xx[j] = fr * dx_yyz_xx[j] + f2t * (2.0 * dx_yyz_x[j] + s_yyz_xx[j]);

                dy_xyyz_xx[j] = fr * dy_yyz_xx[j] + f2t * 2.0 * dy_yyz_x[j];

                dz_xyyz_xx[j] = fr * dz_yyz_xx[j] + f2t * 2.0 * dz_yyz_x[j];

                dx_xyyz_xy[j] = fr * dx_yyz_xy[j] + f2t * (dx_yyz_y[j] + s_yyz_xy[j]);

                dy_xyyz_xy[j] = fr * dy_yyz_xy[j] + f2t * dy_yyz_y[j];

                dz_xyyz_xy[j] = fr * dz_yyz_xy[j] + f2t * dz_yyz_y[j];

                dx_xyyz_xz[j] = fr * dx_yyz_xz[j] + f2t * (dx_yyz_z[j] + s_yyz_xz[j]);

                dy_xyyz_xz[j] = fr * dy_yyz_xz[j] + f2t * dy_yyz_z[j];

                dz_xyyz_xz[j] = fr * dz_yyz_xz[j] + f2t * dz_yyz_z[j];

                dx_xyyz_yy[j] = fr * dx_yyz_yy[j] + f2t * s_yyz_yy[j];

                dy_xyyz_yy[j] = fr * dy_yyz_yy[j];

                dz_xyyz_yy[j] = fr * dz_yyz_yy[j];

                dx_xyyz_yz[j] = fr * dx_yyz_yz[j] + f2t * s_yyz_yz[j];

                dy_xyyz_yz[j] = fr * dy_yyz_yz[j];

                dz_xyyz_yz[j] = fr * dz_yyz_yz[j];

                dx_xyyz_zz[j] = fr * dx_yyz_zz[j] + f2t * s_yyz_zz[j];

                dy_xyyz_zz[j] = fr * dy_yyz_zz[j];

                dz_xyyz_zz[j] = fr * dz_yyz_zz[j];

                dx_xyzz_xx[j] = fr * dx_yzz_xx[j] + f2t * (2.0 * dx_yzz_x[j] + s_yzz_xx[j]);

                dy_xyzz_xx[j] = fr * dy_yzz_xx[j] + f2t * 2.0 * dy_yzz_x[j];

                dz_xyzz_xx[j] = fr * dz_yzz_xx[j] + f2t * 2.0 * dz_yzz_x[j];

                dx_xyzz_xy[j] = fr * dx_yzz_xy[j] + f2t * (dx_yzz_y[j] + s_yzz_xy[j]);

                dy_xyzz_xy[j] = fr * dy_yzz_xy[j] + f2t * dy_yzz_y[j];

                dz_xyzz_xy[j] = fr * dz_yzz_xy[j] + f2t * dz_yzz_y[j];

                dx_xyzz_xz[j] = fr * dx_yzz_xz[j] + f2t * (dx_yzz_z[j] + s_yzz_xz[j]);

                dy_xyzz_xz[j] = fr * dy_yzz_xz[j] + f2t * dy_yzz_z[j];

                dz_xyzz_xz[j] = fr * dz_yzz_xz[j] + f2t * dz_yzz_z[j];

                dx_xyzz_yy[j] = fr * dx_yzz_yy[j] + f2t * s_yzz_yy[j];

                dy_xyzz_yy[j] = fr * dy_yzz_yy[j];

                dz_xyzz_yy[j] = fr * dz_yzz_yy[j];

                dx_xyzz_yz[j] = fr * dx_yzz_yz[j] + f2t * s_yzz_yz[j];

                dy_xyzz_yz[j] = fr * dy_yzz_yz[j];

                dz_xyzz_yz[j] = fr * dz_yzz_yz[j];

                dx_xyzz_zz[j] = fr * dx_yzz_zz[j] + f2t * s_yzz_zz[j];

                dy_xyzz_zz[j] = fr * dy_yzz_zz[j];

                dz_xyzz_zz[j] = fr * dz_yzz_zz[j];

                dx_xzzz_xx[j] = fr * dx_zzz_xx[j] + f2t * (2.0 * dx_zzz_x[j] + s_zzz_xx[j]);

                dy_xzzz_xx[j] = fr * dy_zzz_xx[j] + f2t * 2.0 * dy_zzz_x[j];

                dz_xzzz_xx[j] = fr * dz_zzz_xx[j] + f2t * 2.0 * dz_zzz_x[j];

                dx_xzzz_xy[j] = fr * dx_zzz_xy[j] + f2t * (dx_zzz_y[j] + s_zzz_xy[j]);

                dy_xzzz_xy[j] = fr * dy_zzz_xy[j] + f2t * dy_zzz_y[j];

                dz_xzzz_xy[j] = fr * dz_zzz_xy[j] + f2t * dz_zzz_y[j];

                dx_xzzz_xz[j] = fr * dx_zzz_xz[j] + f2t * (dx_zzz_z[j] + s_zzz_xz[j]);

                dy_xzzz_xz[j] = fr * dy_zzz_xz[j] + f2t * dy_zzz_z[j];

                dz_xzzz_xz[j] = fr * dz_zzz_xz[j] + f2t * dz_zzz_z[j];

                dx_xzzz_yy[j] = fr * dx_zzz_yy[j] + f2t * s_zzz_yy[j];

                dy_xzzz_yy[j] = fr * dy_zzz_yy[j];

                dz_xzzz_yy[j] = fr * dz_zzz_yy[j];

                dx_xzzz_yz[j] = fr * dx_zzz_yz[j] + f2t * s_zzz_yz[j];

                dy_xzzz_yz[j] = fr * dy_zzz_yz[j];

                dz_xzzz_yz[j] = fr * dz_zzz_yz[j];

                dx_xzzz_zz[j] = fr * dx_zzz_zz[j] + f2t * s_zzz_zz[j];

                dy_xzzz_zz[j] = fr * dy_zzz_zz[j];

                dz_xzzz_zz[j] = fr * dz_zzz_zz[j];

                // leading y component

                fr = pay[j];

                dx_yyyy_xx[j] = fr * dx_yyy_xx[j] + f2t * 3.0 * dx_yy_xx[j];

                dy_yyyy_xx[j] = fr * dy_yyy_xx[j] + f2t * (3.0 * dy_yy_xx[j] + s_yyy_xx[j]);

                dz_yyyy_xx[j] = fr * dz_yyy_xx[j] + f2t * 3.0 * dz_yy_xx[j];

                dx_yyyy_xy[j] = fr * dx_yyy_xy[j] + f2t * (3.0 * dx_yy_xy[j] + dx_yyy_x[j]);

                dy_yyyy_xy[j] = fr * dy_yyy_xy[j] + f2t * (3.0 * dy_yy_xy[j] + dy_yyy_x[j] + s_yyy_xy[j]);

                dz_yyyy_xy[j] = fr * dz_yyy_xy[j] + f2t * (3.0 * dz_yy_xy[j] + dz_yyy_x[j]);

                dx_yyyy_xz[j] = fr * dx_yyy_xz[j] + f2t * 3.0 * dx_yy_xz[j];

                dy_yyyy_xz[j] = fr * dy_yyy_xz[j] + f2t * (3.0 * dy_yy_xz[j] + s_yyy_xz[j]);

                dz_yyyy_xz[j] = fr * dz_yyy_xz[j] + f2t * 3.0 * dz_yy_xz[j];

                dx_yyyy_yy[j] = fr * dx_yyy_yy[j] + f2t * (3.0 * dx_yy_yy[j] + 2.0 * dx_yyy_y[j]);

                dy_yyyy_yy[j] = fr * dy_yyy_yy[j] + f2t * (3.0 * dy_yy_yy[j] + 2.0 * dy_yyy_y[j] + s_yyy_yy[j]);

                dz_yyyy_yy[j] = fr * dz_yyy_yy[j] + f2t * (3.0 * dz_yy_yy[j] + 2.0 * dz_yyy_y[j]);

                dx_yyyy_yz[j] = fr * dx_yyy_yz[j] + f2t * (3.0 * dx_yy_yz[j] + dx_yyy_z[j]);

                dy_yyyy_yz[j] = fr * dy_yyy_yz[j] + f2t * (3.0 * dy_yy_yz[j] + dy_yyy_z[j] + s_yyy_yz[j]);

                dz_yyyy_yz[j] = fr * dz_yyy_yz[j] + f2t * (3.0 * dz_yy_yz[j] + dz_yyy_z[j]);

                dx_yyyy_zz[j] = fr * dx_yyy_zz[j] + f2t * 3.0 * dx_yy_zz[j];

                dy_yyyy_zz[j] = fr * dy_yyy_zz[j] + f2t * (3.0 * dy_yy_zz[j] + s_yyy_zz[j]);

                dz_yyyy_zz[j] = fr * dz_yyy_zz[j] + f2t * 3.0 * dz_yy_zz[j];

                dx_yyyz_xx[j] = fr * dx_yyz_xx[j] + f2t * 2.0 * dx_yz_xx[j];

                dy_yyyz_xx[j] = fr * dy_yyz_xx[j] + f2t * (2.0 * dy_yz_xx[j] + s_yyz_xx[j]);

                dz_yyyz_xx[j] = fr * dz_yyz_xx[j] + f2t * 2.0 * dz_yz_xx[j];

                dx_yyyz_xy[j] = fr * dx_yyz_xy[j] + f2t * (2.0 * dx_yz_xy[j] + dx_yyz_x[j]);

                dy_yyyz_xy[j] = fr * dy_yyz_xy[j] + f2t * (2.0 * dy_yz_xy[j] + dy_yyz_x[j] + s_yyz_xy[j]);

                dz_yyyz_xy[j] = fr * dz_yyz_xy[j] + f2t * (2.0 * dz_yz_xy[j] + dz_yyz_x[j]);

                dx_yyyz_xz[j] = fr * dx_yyz_xz[j] + f2t * 2.0 * dx_yz_xz[j];

                dy_yyyz_xz[j] = fr * dy_yyz_xz[j] + f2t * (2.0 * dy_yz_xz[j] + s_yyz_xz[j]);

                dz_yyyz_xz[j] = fr * dz_yyz_xz[j] + f2t * 2.0 * dz_yz_xz[j];

                dx_yyyz_yy[j] = fr * dx_yyz_yy[j] + f2t * (2.0 * dx_yz_yy[j] + 2.0 * dx_yyz_y[j]);

                dy_yyyz_yy[j] = fr * dy_yyz_yy[j] + f2t * (2.0 * dy_yz_yy[j] + 2.0 * dy_yyz_y[j] + s_yyz_yy[j]);

                dz_yyyz_yy[j] = fr * dz_yyz_yy[j] + f2t * (2.0 * dz_yz_yy[j] + 2.0 * dz_yyz_y[j]);

                dx_yyyz_yz[j] = fr * dx_yyz_yz[j] + f2t * (2.0 * dx_yz_yz[j] + dx_yyz_z[j]);

                dy_yyyz_yz[j] = fr * dy_yyz_yz[j] + f2t * (2.0 * dy_yz_yz[j] + dy_yyz_z[j] + s_yyz_yz[j]);

                dz_yyyz_yz[j] = fr * dz_yyz_yz[j] + f2t * (2.0 * dz_yz_yz[j] + dz_yyz_z[j]);

                dx_yyyz_zz[j] = fr * dx_yyz_zz[j] + f2t * 2.0 * dx_yz_zz[j];

                dy_yyyz_zz[j] = fr * dy_yyz_zz[j] + f2t * (2.0 * dy_yz_zz[j] + s_yyz_zz[j]);

                dz_yyyz_zz[j] = fr * dz_yyz_zz[j] + f2t * 2.0 * dz_yz_zz[j];

                dx_yyzz_xx[j] = fr * dx_yzz_xx[j] + f2t * dx_zz_xx[j];

                dy_yyzz_xx[j] = fr * dy_yzz_xx[j] + f2t * (dy_zz_xx[j] + s_yzz_xx[j]);

                dz_yyzz_xx[j] = fr * dz_yzz_xx[j] + f2t * dz_zz_xx[j];

                dx_yyzz_xy[j] = fr * dx_yzz_xy[j] + f2t * (dx_zz_xy[j] + dx_yzz_x[j]);

                dy_yyzz_xy[j] = fr * dy_yzz_xy[j] + f2t * (dy_zz_xy[j] + dy_yzz_x[j] + s_yzz_xy[j]);

                dz_yyzz_xy[j] = fr * dz_yzz_xy[j] + f2t * (dz_zz_xy[j] + dz_yzz_x[j]);

                dx_yyzz_xz[j] = fr * dx_yzz_xz[j] + f2t * dx_zz_xz[j];

                dy_yyzz_xz[j] = fr * dy_yzz_xz[j] + f2t * (dy_zz_xz[j] + s_yzz_xz[j]);

                dz_yyzz_xz[j] = fr * dz_yzz_xz[j] + f2t * dz_zz_xz[j];

                dx_yyzz_yy[j] = fr * dx_yzz_yy[j] + f2t * (dx_zz_yy[j] + 2.0 * dx_yzz_y[j]);

                dy_yyzz_yy[j] = fr * dy_yzz_yy[j] + f2t * (dy_zz_yy[j] + 2.0 * dy_yzz_y[j] + s_yzz_yy[j]);

                dz_yyzz_yy[j] = fr * dz_yzz_yy[j] + f2t * (dz_zz_yy[j] + 2.0 * dz_yzz_y[j]);

                dx_yyzz_yz[j] = fr * dx_yzz_yz[j] + f2t * (dx_zz_yz[j] + dx_yzz_z[j]);

                dy_yyzz_yz[j] = fr * dy_yzz_yz[j] + f2t * (dy_zz_yz[j] + dy_yzz_z[j] + s_yzz_yz[j]);

                dz_yyzz_yz[j] = fr * dz_yzz_yz[j] + f2t * (dz_zz_yz[j] + dz_yzz_z[j]);

                dx_yyzz_zz[j] = fr * dx_yzz_zz[j] + f2t * dx_zz_zz[j];

                dy_yyzz_zz[j] = fr * dy_yzz_zz[j] + f2t * (dy_zz_zz[j] + s_yzz_zz[j]);

                dz_yyzz_zz[j] = fr * dz_yzz_zz[j] + f2t * dz_zz_zz[j];

                dx_yzzz_xx[j] = fr * dx_zzz_xx[j];

                dy_yzzz_xx[j] = fr * dy_zzz_xx[j] + f2t * s_zzz_xx[j];

                dz_yzzz_xx[j] = fr * dz_zzz_xx[j];

                dx_yzzz_xy[j] = fr * dx_zzz_xy[j] + f2t * dx_zzz_x[j];

                dy_yzzz_xy[j] = fr * dy_zzz_xy[j] + f2t * (dy_zzz_x[j] + s_zzz_xy[j]);

                dz_yzzz_xy[j] = fr * dz_zzz_xy[j] + f2t * dz_zzz_x[j];

                dx_yzzz_xz[j] = fr * dx_zzz_xz[j];

                dy_yzzz_xz[j] = fr * dy_zzz_xz[j] + f2t * s_zzz_xz[j];

                dz_yzzz_xz[j] = fr * dz_zzz_xz[j];

                dx_yzzz_yy[j] = fr * dx_zzz_yy[j] + f2t * 2.0 * dx_zzz_y[j];

                dy_yzzz_yy[j] = fr * dy_zzz_yy[j] + f2t * (2.0 * dy_zzz_y[j] + s_zzz_yy[j]);

                dz_yzzz_yy[j] = fr * dz_zzz_yy[j] + f2t * 2.0 * dz_zzz_y[j];

                dx_yzzz_yz[j] = fr * dx_zzz_yz[j] + f2t * dx_zzz_z[j];

                dy_yzzz_yz[j] = fr * dy_zzz_yz[j] + f2t * (dy_zzz_z[j] + s_zzz_yz[j]);

                dz_yzzz_yz[j] = fr * dz_zzz_yz[j] + f2t * dz_zzz_z[j];

                dx_yzzz_zz[j] = fr * dx_zzz_zz[j];

                dy_yzzz_zz[j] = fr * dy_zzz_zz[j] + f2t * s_zzz_zz[j];

                dz_yzzz_zz[j] = fr * dz_zzz_zz[j];

                // leading z component

                fr = paz[j];

                dx_zzzz_xx[j] = fr * dx_zzz_xx[j] + f2t * 3.0 * dx_zz_xx[j];

                dy_zzzz_xx[j] = fr * dy_zzz_xx[j] + f2t * 3.0 * dy_zz_xx[j];

                dz_zzzz_xx[j] = fr * dz_zzz_xx[j] + f2t * (3.0 * dz_zz_xx[j] + s_zzz_xx[j]);

                dx_zzzz_xy[j] = fr * dx_zzz_xy[j] + f2t * 3.0 * dx_zz_xy[j];

                dy_zzzz_xy[j] = fr * dy_zzz_xy[j] + f2t * 3.0 * dy_zz_xy[j];

                dz_zzzz_xy[j] = fr * dz_zzz_xy[j] + f2t * (3.0 * dz_zz_xy[j] + s_zzz_xy[j]);

                dx_zzzz_xz[j] = fr * dx_zzz_xz[j] + f2t * (3.0 * dx_zz_xz[j] + dx_zzz_x[j]);

                dy_zzzz_xz[j] = fr * dy_zzz_xz[j] + f2t * (3.0 * dy_zz_xz[j] + dy_zzz_x[j]);

                dz_zzzz_xz[j] = fr * dz_zzz_xz[j] + f2t * (3.0 * dz_zz_xz[j] + dz_zzz_x[j] + s_zzz_xz[j]);

                dx_zzzz_yy[j] = fr * dx_zzz_yy[j] + f2t * 3.0 * dx_zz_yy[j];

                dy_zzzz_yy[j] = fr * dy_zzz_yy[j] + f2t * 3.0 * dy_zz_yy[j];

                dz_zzzz_yy[j] = fr * dz_zzz_yy[j] + f2t * (3.0 * dz_zz_yy[j] + s_zzz_yy[j]);

                dx_zzzz_yz[j] = fr * dx_zzz_yz[j] + f2t * (3.0 * dx_zz_yz[j] + dx_zzz_y[j]);

                dy_zzzz_yz[j] = fr * dy_zzz_yz[j] + f2t * (3.0 * dy_zz_yz[j] + dy_zzz_y[j]);

                dz_zzzz_yz[j] = fr * dz_zzz_yz[j] + f2t * (3.0 * dz_zz_yz[j] + dz_zzz_y[j] + s_zzz_yz[j]);

                dx_zzzz_zz[j] = fr * dx_zzz_zz[j] + f2t * (3.0 * dx_zz_zz[j] + 2.0 * dx_zzz_z[j]);

                dy_zzzz_zz[j] = fr * dy_zzz_zz[j] + f2t * (3.0 * dy_zz_zz[j] + 2.0 * dy_zzz_z[j]);

                dz_zzzz_zz[j] = fr * dz_zzz_zz[j] + f2t * (3.0 * dz_zz_zz[j] + 2.0 * dz_zzz_z[j] + s_zzz_zz[j]);
            }

            idx++;
        }
    }
    
    void
    compElectricDipoleForFG(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {3, 4, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {3, 4, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 4, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 4, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 3, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 4, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 4, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {0, 4, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (F|M|G) integrals

            auto dx_xxx_xxxx = primBuffer.data(doff + 150 * idx);

            auto dx_xxx_xxxy = primBuffer.data(doff + 150 * idx + 1);

            auto dx_xxx_xxxz = primBuffer.data(doff + 150 * idx + 2);

            auto dx_xxx_xxyy = primBuffer.data(doff + 150 * idx + 3);

            auto dx_xxx_xxyz = primBuffer.data(doff + 150 * idx + 4);

            auto dx_xxx_xxzz = primBuffer.data(doff + 150 * idx + 5);

            auto dx_xxx_xyyy = primBuffer.data(doff + 150 * idx + 6);

            auto dx_xxx_xyyz = primBuffer.data(doff + 150 * idx + 7);

            auto dx_xxx_xyzz = primBuffer.data(doff + 150 * idx + 8);

            auto dx_xxx_xzzz = primBuffer.data(doff + 150 * idx + 9);

            auto dx_xxx_yyyy = primBuffer.data(doff + 150 * idx + 10);

            auto dx_xxx_yyyz = primBuffer.data(doff + 150 * idx + 11);

            auto dx_xxx_yyzz = primBuffer.data(doff + 150 * idx + 12);

            auto dx_xxx_yzzz = primBuffer.data(doff + 150 * idx + 13);

            auto dx_xxx_zzzz = primBuffer.data(doff + 150 * idx + 14);

            auto dx_xxy_xxxx = primBuffer.data(doff + 150 * idx + 15);

            auto dx_xxy_xxxy = primBuffer.data(doff + 150 * idx + 16);

            auto dx_xxy_xxxz = primBuffer.data(doff + 150 * idx + 17);

            auto dx_xxy_xxyy = primBuffer.data(doff + 150 * idx + 18);

            auto dx_xxy_xxyz = primBuffer.data(doff + 150 * idx + 19);

            auto dx_xxy_xxzz = primBuffer.data(doff + 150 * idx + 20);

            auto dx_xxy_xyyy = primBuffer.data(doff + 150 * idx + 21);

            auto dx_xxy_xyyz = primBuffer.data(doff + 150 * idx + 22);

            auto dx_xxy_xyzz = primBuffer.data(doff + 150 * idx + 23);

            auto dx_xxy_xzzz = primBuffer.data(doff + 150 * idx + 24);

            auto dx_xxy_yyyy = primBuffer.data(doff + 150 * idx + 25);

            auto dx_xxy_yyyz = primBuffer.data(doff + 150 * idx + 26);

            auto dx_xxy_yyzz = primBuffer.data(doff + 150 * idx + 27);

            auto dx_xxy_yzzz = primBuffer.data(doff + 150 * idx + 28);

            auto dx_xxy_zzzz = primBuffer.data(doff + 150 * idx + 29);

            auto dx_xxz_xxxx = primBuffer.data(doff + 150 * idx + 30);

            auto dx_xxz_xxxy = primBuffer.data(doff + 150 * idx + 31);

            auto dx_xxz_xxxz = primBuffer.data(doff + 150 * idx + 32);

            auto dx_xxz_xxyy = primBuffer.data(doff + 150 * idx + 33);

            auto dx_xxz_xxyz = primBuffer.data(doff + 150 * idx + 34);

            auto dx_xxz_xxzz = primBuffer.data(doff + 150 * idx + 35);

            auto dx_xxz_xyyy = primBuffer.data(doff + 150 * idx + 36);

            auto dx_xxz_xyyz = primBuffer.data(doff + 150 * idx + 37);

            auto dx_xxz_xyzz = primBuffer.data(doff + 150 * idx + 38);

            auto dx_xxz_xzzz = primBuffer.data(doff + 150 * idx + 39);

            auto dx_xxz_yyyy = primBuffer.data(doff + 150 * idx + 40);

            auto dx_xxz_yyyz = primBuffer.data(doff + 150 * idx + 41);

            auto dx_xxz_yyzz = primBuffer.data(doff + 150 * idx + 42);

            auto dx_xxz_yzzz = primBuffer.data(doff + 150 * idx + 43);

            auto dx_xxz_zzzz = primBuffer.data(doff + 150 * idx + 44);

            auto dx_xyy_xxxx = primBuffer.data(doff + 150 * idx + 45);

            auto dx_xyy_xxxy = primBuffer.data(doff + 150 * idx + 46);

            auto dx_xyy_xxxz = primBuffer.data(doff + 150 * idx + 47);

            auto dx_xyy_xxyy = primBuffer.data(doff + 150 * idx + 48);

            auto dx_xyy_xxyz = primBuffer.data(doff + 150 * idx + 49);

            auto dx_xyy_xxzz = primBuffer.data(doff + 150 * idx + 50);

            auto dx_xyy_xyyy = primBuffer.data(doff + 150 * idx + 51);

            auto dx_xyy_xyyz = primBuffer.data(doff + 150 * idx + 52);

            auto dx_xyy_xyzz = primBuffer.data(doff + 150 * idx + 53);

            auto dx_xyy_xzzz = primBuffer.data(doff + 150 * idx + 54);

            auto dx_xyy_yyyy = primBuffer.data(doff + 150 * idx + 55);

            auto dx_xyy_yyyz = primBuffer.data(doff + 150 * idx + 56);

            auto dx_xyy_yyzz = primBuffer.data(doff + 150 * idx + 57);

            auto dx_xyy_yzzz = primBuffer.data(doff + 150 * idx + 58);

            auto dx_xyy_zzzz = primBuffer.data(doff + 150 * idx + 59);

            auto dx_xyz_xxxx = primBuffer.data(doff + 150 * idx + 60);

            auto dx_xyz_xxxy = primBuffer.data(doff + 150 * idx + 61);

            auto dx_xyz_xxxz = primBuffer.data(doff + 150 * idx + 62);

            auto dx_xyz_xxyy = primBuffer.data(doff + 150 * idx + 63);

            auto dx_xyz_xxyz = primBuffer.data(doff + 150 * idx + 64);

            auto dx_xyz_xxzz = primBuffer.data(doff + 150 * idx + 65);

            auto dx_xyz_xyyy = primBuffer.data(doff + 150 * idx + 66);

            auto dx_xyz_xyyz = primBuffer.data(doff + 150 * idx + 67);

            auto dx_xyz_xyzz = primBuffer.data(doff + 150 * idx + 68);

            auto dx_xyz_xzzz = primBuffer.data(doff + 150 * idx + 69);

            auto dx_xyz_yyyy = primBuffer.data(doff + 150 * idx + 70);

            auto dx_xyz_yyyz = primBuffer.data(doff + 150 * idx + 71);

            auto dx_xyz_yyzz = primBuffer.data(doff + 150 * idx + 72);

            auto dx_xyz_yzzz = primBuffer.data(doff + 150 * idx + 73);

            auto dx_xyz_zzzz = primBuffer.data(doff + 150 * idx + 74);

            auto dx_xzz_xxxx = primBuffer.data(doff + 150 * idx + 75);

            auto dx_xzz_xxxy = primBuffer.data(doff + 150 * idx + 76);

            auto dx_xzz_xxxz = primBuffer.data(doff + 150 * idx + 77);

            auto dx_xzz_xxyy = primBuffer.data(doff + 150 * idx + 78);

            auto dx_xzz_xxyz = primBuffer.data(doff + 150 * idx + 79);

            auto dx_xzz_xxzz = primBuffer.data(doff + 150 * idx + 80);

            auto dx_xzz_xyyy = primBuffer.data(doff + 150 * idx + 81);

            auto dx_xzz_xyyz = primBuffer.data(doff + 150 * idx + 82);

            auto dx_xzz_xyzz = primBuffer.data(doff + 150 * idx + 83);

            auto dx_xzz_xzzz = primBuffer.data(doff + 150 * idx + 84);

            auto dx_xzz_yyyy = primBuffer.data(doff + 150 * idx + 85);

            auto dx_xzz_yyyz = primBuffer.data(doff + 150 * idx + 86);

            auto dx_xzz_yyzz = primBuffer.data(doff + 150 * idx + 87);

            auto dx_xzz_yzzz = primBuffer.data(doff + 150 * idx + 88);

            auto dx_xzz_zzzz = primBuffer.data(doff + 150 * idx + 89);

            auto dx_yyy_xxxx = primBuffer.data(doff + 150 * idx + 90);

            auto dx_yyy_xxxy = primBuffer.data(doff + 150 * idx + 91);

            auto dx_yyy_xxxz = primBuffer.data(doff + 150 * idx + 92);

            auto dx_yyy_xxyy = primBuffer.data(doff + 150 * idx + 93);

            auto dx_yyy_xxyz = primBuffer.data(doff + 150 * idx + 94);

            auto dx_yyy_xxzz = primBuffer.data(doff + 150 * idx + 95);

            auto dx_yyy_xyyy = primBuffer.data(doff + 150 * idx + 96);

            auto dx_yyy_xyyz = primBuffer.data(doff + 150 * idx + 97);

            auto dx_yyy_xyzz = primBuffer.data(doff + 150 * idx + 98);

            auto dx_yyy_xzzz = primBuffer.data(doff + 150 * idx + 99);

            auto dx_yyy_yyyy = primBuffer.data(doff + 150 * idx + 100);

            auto dx_yyy_yyyz = primBuffer.data(doff + 150 * idx + 101);

            auto dx_yyy_yyzz = primBuffer.data(doff + 150 * idx + 102);

            auto dx_yyy_yzzz = primBuffer.data(doff + 150 * idx + 103);

            auto dx_yyy_zzzz = primBuffer.data(doff + 150 * idx + 104);

            auto dx_yyz_xxxx = primBuffer.data(doff + 150 * idx + 105);

            auto dx_yyz_xxxy = primBuffer.data(doff + 150 * idx + 106);

            auto dx_yyz_xxxz = primBuffer.data(doff + 150 * idx + 107);

            auto dx_yyz_xxyy = primBuffer.data(doff + 150 * idx + 108);

            auto dx_yyz_xxyz = primBuffer.data(doff + 150 * idx + 109);

            auto dx_yyz_xxzz = primBuffer.data(doff + 150 * idx + 110);

            auto dx_yyz_xyyy = primBuffer.data(doff + 150 * idx + 111);

            auto dx_yyz_xyyz = primBuffer.data(doff + 150 * idx + 112);

            auto dx_yyz_xyzz = primBuffer.data(doff + 150 * idx + 113);

            auto dx_yyz_xzzz = primBuffer.data(doff + 150 * idx + 114);

            auto dx_yyz_yyyy = primBuffer.data(doff + 150 * idx + 115);

            auto dx_yyz_yyyz = primBuffer.data(doff + 150 * idx + 116);

            auto dx_yyz_yyzz = primBuffer.data(doff + 150 * idx + 117);

            auto dx_yyz_yzzz = primBuffer.data(doff + 150 * idx + 118);

            auto dx_yyz_zzzz = primBuffer.data(doff + 150 * idx + 119);

            auto dx_yzz_xxxx = primBuffer.data(doff + 150 * idx + 120);

            auto dx_yzz_xxxy = primBuffer.data(doff + 150 * idx + 121);

            auto dx_yzz_xxxz = primBuffer.data(doff + 150 * idx + 122);

            auto dx_yzz_xxyy = primBuffer.data(doff + 150 * idx + 123);

            auto dx_yzz_xxyz = primBuffer.data(doff + 150 * idx + 124);

            auto dx_yzz_xxzz = primBuffer.data(doff + 150 * idx + 125);

            auto dx_yzz_xyyy = primBuffer.data(doff + 150 * idx + 126);

            auto dx_yzz_xyyz = primBuffer.data(doff + 150 * idx + 127);

            auto dx_yzz_xyzz = primBuffer.data(doff + 150 * idx + 128);

            auto dx_yzz_xzzz = primBuffer.data(doff + 150 * idx + 129);

            auto dx_yzz_yyyy = primBuffer.data(doff + 150 * idx + 130);

            auto dx_yzz_yyyz = primBuffer.data(doff + 150 * idx + 131);

            auto dx_yzz_yyzz = primBuffer.data(doff + 150 * idx + 132);

            auto dx_yzz_yzzz = primBuffer.data(doff + 150 * idx + 133);

            auto dx_yzz_zzzz = primBuffer.data(doff + 150 * idx + 134);

            auto dx_zzz_xxxx = primBuffer.data(doff + 150 * idx + 135);

            auto dx_zzz_xxxy = primBuffer.data(doff + 150 * idx + 136);

            auto dx_zzz_xxxz = primBuffer.data(doff + 150 * idx + 137);

            auto dx_zzz_xxyy = primBuffer.data(doff + 150 * idx + 138);

            auto dx_zzz_xxyz = primBuffer.data(doff + 150 * idx + 139);

            auto dx_zzz_xxzz = primBuffer.data(doff + 150 * idx + 140);

            auto dx_zzz_xyyy = primBuffer.data(doff + 150 * idx + 141);

            auto dx_zzz_xyyz = primBuffer.data(doff + 150 * idx + 142);

            auto dx_zzz_xyzz = primBuffer.data(doff + 150 * idx + 143);

            auto dx_zzz_xzzz = primBuffer.data(doff + 150 * idx + 144);

            auto dx_zzz_yyyy = primBuffer.data(doff + 150 * idx + 145);

            auto dx_zzz_yyyz = primBuffer.data(doff + 150 * idx + 146);

            auto dx_zzz_yyzz = primBuffer.data(doff + 150 * idx + 147);

            auto dx_zzz_yzzz = primBuffer.data(doff + 150 * idx + 148);

            auto dx_zzz_zzzz = primBuffer.data(doff + 150 * idx + 149);

            auto dy_xxx_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx);

            auto dy_xxx_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 1);

            auto dy_xxx_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 2);

            auto dy_xxx_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 3);

            auto dy_xxx_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 4);

            auto dy_xxx_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 5);

            auto dy_xxx_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 6);

            auto dy_xxx_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 7);

            auto dy_xxx_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 8);

            auto dy_xxx_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 9);

            auto dy_xxx_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 10);

            auto dy_xxx_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 11);

            auto dy_xxx_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 12);

            auto dy_xxx_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 13);

            auto dy_xxx_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 14);

            auto dy_xxy_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 15);

            auto dy_xxy_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 16);

            auto dy_xxy_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 17);

            auto dy_xxy_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 18);

            auto dy_xxy_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 19);

            auto dy_xxy_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 20);

            auto dy_xxy_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 21);

            auto dy_xxy_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 22);

            auto dy_xxy_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 23);

            auto dy_xxy_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 24);

            auto dy_xxy_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 25);

            auto dy_xxy_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 26);

            auto dy_xxy_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 27);

            auto dy_xxy_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 28);

            auto dy_xxy_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 29);

            auto dy_xxz_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 30);

            auto dy_xxz_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 31);

            auto dy_xxz_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 32);

            auto dy_xxz_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 33);

            auto dy_xxz_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 34);

            auto dy_xxz_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 35);

            auto dy_xxz_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 36);

            auto dy_xxz_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 37);

            auto dy_xxz_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 38);

            auto dy_xxz_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 39);

            auto dy_xxz_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 40);

            auto dy_xxz_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 41);

            auto dy_xxz_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 42);

            auto dy_xxz_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 43);

            auto dy_xxz_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 44);

            auto dy_xyy_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 45);

            auto dy_xyy_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 46);

            auto dy_xyy_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 47);

            auto dy_xyy_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 48);

            auto dy_xyy_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 49);

            auto dy_xyy_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 50);

            auto dy_xyy_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 51);

            auto dy_xyy_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 52);

            auto dy_xyy_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 53);

            auto dy_xyy_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 54);

            auto dy_xyy_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 55);

            auto dy_xyy_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 56);

            auto dy_xyy_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 57);

            auto dy_xyy_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 58);

            auto dy_xyy_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 59);

            auto dy_xyz_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 60);

            auto dy_xyz_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 61);

            auto dy_xyz_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 62);

            auto dy_xyz_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 63);

            auto dy_xyz_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 64);

            auto dy_xyz_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 65);

            auto dy_xyz_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 66);

            auto dy_xyz_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 67);

            auto dy_xyz_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 68);

            auto dy_xyz_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 69);

            auto dy_xyz_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 70);

            auto dy_xyz_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 71);

            auto dy_xyz_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 72);

            auto dy_xyz_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 73);

            auto dy_xyz_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 74);

            auto dy_xzz_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 75);

            auto dy_xzz_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 76);

            auto dy_xzz_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 77);

            auto dy_xzz_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 78);

            auto dy_xzz_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 79);

            auto dy_xzz_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 80);

            auto dy_xzz_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 81);

            auto dy_xzz_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 82);

            auto dy_xzz_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 83);

            auto dy_xzz_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 84);

            auto dy_xzz_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 85);

            auto dy_xzz_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 86);

            auto dy_xzz_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 87);

            auto dy_xzz_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 88);

            auto dy_xzz_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 89);

            auto dy_yyy_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 90);

            auto dy_yyy_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 91);

            auto dy_yyy_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 92);

            auto dy_yyy_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 93);

            auto dy_yyy_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 94);

            auto dy_yyy_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 95);

            auto dy_yyy_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 96);

            auto dy_yyy_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 97);

            auto dy_yyy_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 98);

            auto dy_yyy_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 99);

            auto dy_yyy_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 100);

            auto dy_yyy_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 101);

            auto dy_yyy_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 102);

            auto dy_yyy_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 103);

            auto dy_yyy_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 104);

            auto dy_yyz_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 105);

            auto dy_yyz_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 106);

            auto dy_yyz_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 107);

            auto dy_yyz_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 108);

            auto dy_yyz_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 109);

            auto dy_yyz_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 110);

            auto dy_yyz_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 111);

            auto dy_yyz_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 112);

            auto dy_yyz_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 113);

            auto dy_yyz_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 114);

            auto dy_yyz_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 115);

            auto dy_yyz_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 116);

            auto dy_yyz_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 117);

            auto dy_yyz_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 118);

            auto dy_yyz_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 119);

            auto dy_yzz_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 120);

            auto dy_yzz_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 121);

            auto dy_yzz_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 122);

            auto dy_yzz_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 123);

            auto dy_yzz_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 124);

            auto dy_yzz_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 125);

            auto dy_yzz_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 126);

            auto dy_yzz_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 127);

            auto dy_yzz_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 128);

            auto dy_yzz_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 129);

            auto dy_yzz_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 130);

            auto dy_yzz_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 131);

            auto dy_yzz_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 132);

            auto dy_yzz_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 133);

            auto dy_yzz_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 134);

            auto dy_zzz_xxxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 135);

            auto dy_zzz_xxxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 136);

            auto dy_zzz_xxxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 137);

            auto dy_zzz_xxyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 138);

            auto dy_zzz_xxyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 139);

            auto dy_zzz_xxzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 140);

            auto dy_zzz_xyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 141);

            auto dy_zzz_xyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 142);

            auto dy_zzz_xyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 143);

            auto dy_zzz_xzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 144);

            auto dy_zzz_yyyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 145);

            auto dy_zzz_yyyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 146);

            auto dy_zzz_yyzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 147);

            auto dy_zzz_yzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 148);

            auto dy_zzz_zzzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 149);

            auto dz_xxx_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx);

            auto dz_xxx_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 1);

            auto dz_xxx_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 2);

            auto dz_xxx_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 3);

            auto dz_xxx_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 4);

            auto dz_xxx_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 5);

            auto dz_xxx_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 6);

            auto dz_xxx_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 7);

            auto dz_xxx_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 8);

            auto dz_xxx_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 9);

            auto dz_xxx_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 10);

            auto dz_xxx_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 11);

            auto dz_xxx_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 12);

            auto dz_xxx_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 13);

            auto dz_xxx_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 14);

            auto dz_xxy_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 15);

            auto dz_xxy_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 16);

            auto dz_xxy_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 17);

            auto dz_xxy_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 18);

            auto dz_xxy_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 19);

            auto dz_xxy_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 20);

            auto dz_xxy_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 21);

            auto dz_xxy_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 22);

            auto dz_xxy_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 23);

            auto dz_xxy_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 24);

            auto dz_xxy_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 25);

            auto dz_xxy_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 26);

            auto dz_xxy_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 27);

            auto dz_xxy_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 28);

            auto dz_xxy_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 29);

            auto dz_xxz_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 30);

            auto dz_xxz_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 31);

            auto dz_xxz_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 32);

            auto dz_xxz_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 33);

            auto dz_xxz_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 34);

            auto dz_xxz_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 35);

            auto dz_xxz_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 36);

            auto dz_xxz_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 37);

            auto dz_xxz_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 38);

            auto dz_xxz_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 39);

            auto dz_xxz_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 40);

            auto dz_xxz_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 41);

            auto dz_xxz_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 42);

            auto dz_xxz_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 43);

            auto dz_xxz_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 44);

            auto dz_xyy_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 45);

            auto dz_xyy_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 46);

            auto dz_xyy_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 47);

            auto dz_xyy_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 48);

            auto dz_xyy_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 49);

            auto dz_xyy_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 50);

            auto dz_xyy_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 51);

            auto dz_xyy_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 52);

            auto dz_xyy_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 53);

            auto dz_xyy_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 54);

            auto dz_xyy_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 55);

            auto dz_xyy_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 56);

            auto dz_xyy_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 57);

            auto dz_xyy_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 58);

            auto dz_xyy_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 59);

            auto dz_xyz_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 60);

            auto dz_xyz_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 61);

            auto dz_xyz_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 62);

            auto dz_xyz_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 63);

            auto dz_xyz_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 64);

            auto dz_xyz_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 65);

            auto dz_xyz_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 66);

            auto dz_xyz_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 67);

            auto dz_xyz_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 68);

            auto dz_xyz_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 69);

            auto dz_xyz_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 70);

            auto dz_xyz_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 71);

            auto dz_xyz_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 72);

            auto dz_xyz_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 73);

            auto dz_xyz_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 74);

            auto dz_xzz_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 75);

            auto dz_xzz_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 76);

            auto dz_xzz_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 77);

            auto dz_xzz_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 78);

            auto dz_xzz_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 79);

            auto dz_xzz_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 80);

            auto dz_xzz_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 81);

            auto dz_xzz_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 82);

            auto dz_xzz_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 83);

            auto dz_xzz_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 84);

            auto dz_xzz_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 85);

            auto dz_xzz_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 86);

            auto dz_xzz_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 87);

            auto dz_xzz_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 88);

            auto dz_xzz_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 89);

            auto dz_yyy_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 90);

            auto dz_yyy_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 91);

            auto dz_yyy_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 92);

            auto dz_yyy_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 93);

            auto dz_yyy_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 94);

            auto dz_yyy_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 95);

            auto dz_yyy_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 96);

            auto dz_yyy_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 97);

            auto dz_yyy_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 98);

            auto dz_yyy_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 99);

            auto dz_yyy_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 100);

            auto dz_yyy_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 101);

            auto dz_yyy_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 102);

            auto dz_yyy_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 103);

            auto dz_yyy_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 104);

            auto dz_yyz_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 105);

            auto dz_yyz_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 106);

            auto dz_yyz_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 107);

            auto dz_yyz_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 108);

            auto dz_yyz_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 109);

            auto dz_yyz_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 110);

            auto dz_yyz_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 111);

            auto dz_yyz_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 112);

            auto dz_yyz_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 113);

            auto dz_yyz_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 114);

            auto dz_yyz_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 115);

            auto dz_yyz_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 116);

            auto dz_yyz_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 117);

            auto dz_yyz_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 118);

            auto dz_yyz_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 119);

            auto dz_yzz_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 120);

            auto dz_yzz_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 121);

            auto dz_yzz_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 122);

            auto dz_yzz_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 123);

            auto dz_yzz_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 124);

            auto dz_yzz_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 125);

            auto dz_yzz_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 126);

            auto dz_yzz_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 127);

            auto dz_yzz_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 128);

            auto dz_yzz_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 129);

            auto dz_yzz_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 130);

            auto dz_yzz_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 131);

            auto dz_yzz_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 132);

            auto dz_yzz_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 133);

            auto dz_yzz_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 134);

            auto dz_zzz_xxxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 135);

            auto dz_zzz_xxxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 136);

            auto dz_zzz_xxxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 137);

            auto dz_zzz_xxyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 138);

            auto dz_zzz_xxyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 139);

            auto dz_zzz_xxzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 140);

            auto dz_zzz_xyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 141);

            auto dz_zzz_xyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 142);

            auto dz_zzz_xyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 143);

            auto dz_zzz_xzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 144);

            auto dz_zzz_yyyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 145);

            auto dz_zzz_yyyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 146);

            auto dz_zzz_yyzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 147);

            auto dz_zzz_yzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 148);

            auto dz_zzz_zzzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 149);

            // set up pointers to (D|M|G) integrals

            auto dx_xx_xxxx = primBuffer.data(d1off + 90 * idx);

            auto dx_xx_xxxy = primBuffer.data(d1off + 90 * idx + 1);

            auto dx_xx_xxxz = primBuffer.data(d1off + 90 * idx + 2);

            auto dx_xx_xxyy = primBuffer.data(d1off + 90 * idx + 3);

            auto dx_xx_xxyz = primBuffer.data(d1off + 90 * idx + 4);

            auto dx_xx_xxzz = primBuffer.data(d1off + 90 * idx + 5);

            auto dx_xx_xyyy = primBuffer.data(d1off + 90 * idx + 6);

            auto dx_xx_xyyz = primBuffer.data(d1off + 90 * idx + 7);

            auto dx_xx_xyzz = primBuffer.data(d1off + 90 * idx + 8);

            auto dx_xx_xzzz = primBuffer.data(d1off + 90 * idx + 9);

            auto dx_xx_yyyy = primBuffer.data(d1off + 90 * idx + 10);

            auto dx_xx_yyyz = primBuffer.data(d1off + 90 * idx + 11);

            auto dx_xx_yyzz = primBuffer.data(d1off + 90 * idx + 12);

            auto dx_xx_yzzz = primBuffer.data(d1off + 90 * idx + 13);

            auto dx_xx_zzzz = primBuffer.data(d1off + 90 * idx + 14);

            auto dx_xy_xxxx = primBuffer.data(d1off + 90 * idx + 15);

            auto dx_xy_xxxy = primBuffer.data(d1off + 90 * idx + 16);

            auto dx_xy_xxxz = primBuffer.data(d1off + 90 * idx + 17);

            auto dx_xy_xxyy = primBuffer.data(d1off + 90 * idx + 18);

            auto dx_xy_xxyz = primBuffer.data(d1off + 90 * idx + 19);

            auto dx_xy_xxzz = primBuffer.data(d1off + 90 * idx + 20);

            auto dx_xy_xyyy = primBuffer.data(d1off + 90 * idx + 21);

            auto dx_xy_xyyz = primBuffer.data(d1off + 90 * idx + 22);

            auto dx_xy_xyzz = primBuffer.data(d1off + 90 * idx + 23);

            auto dx_xy_xzzz = primBuffer.data(d1off + 90 * idx + 24);

            auto dx_xy_yyyy = primBuffer.data(d1off + 90 * idx + 25);

            auto dx_xy_yyyz = primBuffer.data(d1off + 90 * idx + 26);

            auto dx_xy_yyzz = primBuffer.data(d1off + 90 * idx + 27);

            auto dx_xy_yzzz = primBuffer.data(d1off + 90 * idx + 28);

            auto dx_xy_zzzz = primBuffer.data(d1off + 90 * idx + 29);

            auto dx_xz_xxxx = primBuffer.data(d1off + 90 * idx + 30);

            auto dx_xz_xxxy = primBuffer.data(d1off + 90 * idx + 31);

            auto dx_xz_xxxz = primBuffer.data(d1off + 90 * idx + 32);

            auto dx_xz_xxyy = primBuffer.data(d1off + 90 * idx + 33);

            auto dx_xz_xxyz = primBuffer.data(d1off + 90 * idx + 34);

            auto dx_xz_xxzz = primBuffer.data(d1off + 90 * idx + 35);

            auto dx_xz_xyyy = primBuffer.data(d1off + 90 * idx + 36);

            auto dx_xz_xyyz = primBuffer.data(d1off + 90 * idx + 37);

            auto dx_xz_xyzz = primBuffer.data(d1off + 90 * idx + 38);

            auto dx_xz_xzzz = primBuffer.data(d1off + 90 * idx + 39);

            auto dx_xz_yyyy = primBuffer.data(d1off + 90 * idx + 40);

            auto dx_xz_yyyz = primBuffer.data(d1off + 90 * idx + 41);

            auto dx_xz_yyzz = primBuffer.data(d1off + 90 * idx + 42);

            auto dx_xz_yzzz = primBuffer.data(d1off + 90 * idx + 43);

            auto dx_xz_zzzz = primBuffer.data(d1off + 90 * idx + 44);

            auto dx_yy_xxxx = primBuffer.data(d1off + 90 * idx + 45);

            auto dx_yy_xxxy = primBuffer.data(d1off + 90 * idx + 46);

            auto dx_yy_xxxz = primBuffer.data(d1off + 90 * idx + 47);

            auto dx_yy_xxyy = primBuffer.data(d1off + 90 * idx + 48);

            auto dx_yy_xxyz = primBuffer.data(d1off + 90 * idx + 49);

            auto dx_yy_xxzz = primBuffer.data(d1off + 90 * idx + 50);

            auto dx_yy_xyyy = primBuffer.data(d1off + 90 * idx + 51);

            auto dx_yy_xyyz = primBuffer.data(d1off + 90 * idx + 52);

            auto dx_yy_xyzz = primBuffer.data(d1off + 90 * idx + 53);

            auto dx_yy_xzzz = primBuffer.data(d1off + 90 * idx + 54);

            auto dx_yy_yyyy = primBuffer.data(d1off + 90 * idx + 55);

            auto dx_yy_yyyz = primBuffer.data(d1off + 90 * idx + 56);

            auto dx_yy_yyzz = primBuffer.data(d1off + 90 * idx + 57);

            auto dx_yy_yzzz = primBuffer.data(d1off + 90 * idx + 58);

            auto dx_yy_zzzz = primBuffer.data(d1off + 90 * idx + 59);

            auto dx_yz_xxxx = primBuffer.data(d1off + 90 * idx + 60);

            auto dx_yz_xxxy = primBuffer.data(d1off + 90 * idx + 61);

            auto dx_yz_xxxz = primBuffer.data(d1off + 90 * idx + 62);

            auto dx_yz_xxyy = primBuffer.data(d1off + 90 * idx + 63);

            auto dx_yz_xxyz = primBuffer.data(d1off + 90 * idx + 64);

            auto dx_yz_xxzz = primBuffer.data(d1off + 90 * idx + 65);

            auto dx_yz_xyyy = primBuffer.data(d1off + 90 * idx + 66);

            auto dx_yz_xyyz = primBuffer.data(d1off + 90 * idx + 67);

            auto dx_yz_xyzz = primBuffer.data(d1off + 90 * idx + 68);

            auto dx_yz_xzzz = primBuffer.data(d1off + 90 * idx + 69);

            auto dx_yz_yyyy = primBuffer.data(d1off + 90 * idx + 70);

            auto dx_yz_yyyz = primBuffer.data(d1off + 90 * idx + 71);

            auto dx_yz_yyzz = primBuffer.data(d1off + 90 * idx + 72);

            auto dx_yz_yzzz = primBuffer.data(d1off + 90 * idx + 73);

            auto dx_yz_zzzz = primBuffer.data(d1off + 90 * idx + 74);

            auto dx_zz_xxxx = primBuffer.data(d1off + 90 * idx + 75);

            auto dx_zz_xxxy = primBuffer.data(d1off + 90 * idx + 76);

            auto dx_zz_xxxz = primBuffer.data(d1off + 90 * idx + 77);

            auto dx_zz_xxyy = primBuffer.data(d1off + 90 * idx + 78);

            auto dx_zz_xxyz = primBuffer.data(d1off + 90 * idx + 79);

            auto dx_zz_xxzz = primBuffer.data(d1off + 90 * idx + 80);

            auto dx_zz_xyyy = primBuffer.data(d1off + 90 * idx + 81);

            auto dx_zz_xyyz = primBuffer.data(d1off + 90 * idx + 82);

            auto dx_zz_xyzz = primBuffer.data(d1off + 90 * idx + 83);

            auto dx_zz_xzzz = primBuffer.data(d1off + 90 * idx + 84);

            auto dx_zz_yyyy = primBuffer.data(d1off + 90 * idx + 85);

            auto dx_zz_yyyz = primBuffer.data(d1off + 90 * idx + 86);

            auto dx_zz_yyzz = primBuffer.data(d1off + 90 * idx + 87);

            auto dx_zz_yzzz = primBuffer.data(d1off + 90 * idx + 88);

            auto dx_zz_zzzz = primBuffer.data(d1off + 90 * idx + 89);

            auto dy_xx_xxxx = primBuffer.data(d1off + 90 * bdim + 90 * idx);

            auto dy_xx_xxxy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 1);

            auto dy_xx_xxxz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 2);

            auto dy_xx_xxyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 3);

            auto dy_xx_xxyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 4);

            auto dy_xx_xxzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 5);

            auto dy_xx_xyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 6);

            auto dy_xx_xyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 7);

            auto dy_xx_xyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 8);

            auto dy_xx_xzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 9);

            auto dy_xx_yyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 10);

            auto dy_xx_yyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 11);

            auto dy_xx_yyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 12);

            auto dy_xx_yzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 13);

            auto dy_xx_zzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 14);

            auto dy_xy_xxxx = primBuffer.data(d1off + 90 * bdim + 90 * idx + 15);

            auto dy_xy_xxxy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 16);

            auto dy_xy_xxxz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 17);

            auto dy_xy_xxyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 18);

            auto dy_xy_xxyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 19);

            auto dy_xy_xxzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 20);

            auto dy_xy_xyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 21);

            auto dy_xy_xyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 22);

            auto dy_xy_xyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 23);

            auto dy_xy_xzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 24);

            auto dy_xy_yyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 25);

            auto dy_xy_yyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 26);

            auto dy_xy_yyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 27);

            auto dy_xy_yzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 28);

            auto dy_xy_zzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 29);

            auto dy_xz_xxxx = primBuffer.data(d1off + 90 * bdim + 90 * idx + 30);

            auto dy_xz_xxxy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 31);

            auto dy_xz_xxxz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 32);

            auto dy_xz_xxyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 33);

            auto dy_xz_xxyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 34);

            auto dy_xz_xxzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 35);

            auto dy_xz_xyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 36);

            auto dy_xz_xyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 37);

            auto dy_xz_xyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 38);

            auto dy_xz_xzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 39);

            auto dy_xz_yyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 40);

            auto dy_xz_yyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 41);

            auto dy_xz_yyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 42);

            auto dy_xz_yzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 43);

            auto dy_xz_zzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 44);

            auto dy_yy_xxxx = primBuffer.data(d1off + 90 * bdim + 90 * idx + 45);

            auto dy_yy_xxxy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 46);

            auto dy_yy_xxxz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 47);

            auto dy_yy_xxyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 48);

            auto dy_yy_xxyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 49);

            auto dy_yy_xxzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 50);

            auto dy_yy_xyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 51);

            auto dy_yy_xyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 52);

            auto dy_yy_xyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 53);

            auto dy_yy_xzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 54);

            auto dy_yy_yyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 55);

            auto dy_yy_yyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 56);

            auto dy_yy_yyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 57);

            auto dy_yy_yzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 58);

            auto dy_yy_zzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 59);

            auto dy_yz_xxxx = primBuffer.data(d1off + 90 * bdim + 90 * idx + 60);

            auto dy_yz_xxxy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 61);

            auto dy_yz_xxxz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 62);

            auto dy_yz_xxyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 63);

            auto dy_yz_xxyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 64);

            auto dy_yz_xxzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 65);

            auto dy_yz_xyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 66);

            auto dy_yz_xyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 67);

            auto dy_yz_xyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 68);

            auto dy_yz_xzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 69);

            auto dy_yz_yyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 70);

            auto dy_yz_yyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 71);

            auto dy_yz_yyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 72);

            auto dy_yz_yzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 73);

            auto dy_yz_zzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 74);

            auto dy_zz_xxxx = primBuffer.data(d1off + 90 * bdim + 90 * idx + 75);

            auto dy_zz_xxxy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 76);

            auto dy_zz_xxxz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 77);

            auto dy_zz_xxyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 78);

            auto dy_zz_xxyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 79);

            auto dy_zz_xxzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 80);

            auto dy_zz_xyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 81);

            auto dy_zz_xyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 82);

            auto dy_zz_xyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 83);

            auto dy_zz_xzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 84);

            auto dy_zz_yyyy = primBuffer.data(d1off + 90 * bdim + 90 * idx + 85);

            auto dy_zz_yyyz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 86);

            auto dy_zz_yyzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 87);

            auto dy_zz_yzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 88);

            auto dy_zz_zzzz = primBuffer.data(d1off + 90 * bdim + 90 * idx + 89);

            auto dz_xx_xxxx = primBuffer.data(d1off + 180 * bdim + 90 * idx);

            auto dz_xx_xxxy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 1);

            auto dz_xx_xxxz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 2);

            auto dz_xx_xxyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 3);

            auto dz_xx_xxyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 4);

            auto dz_xx_xxzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 5);

            auto dz_xx_xyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 6);

            auto dz_xx_xyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 7);

            auto dz_xx_xyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 8);

            auto dz_xx_xzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 9);

            auto dz_xx_yyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 10);

            auto dz_xx_yyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 11);

            auto dz_xx_yyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 12);

            auto dz_xx_yzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 13);

            auto dz_xx_zzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 14);

            auto dz_xy_xxxx = primBuffer.data(d1off + 180 * bdim + 90 * idx + 15);

            auto dz_xy_xxxy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 16);

            auto dz_xy_xxxz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 17);

            auto dz_xy_xxyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 18);

            auto dz_xy_xxyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 19);

            auto dz_xy_xxzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 20);

            auto dz_xy_xyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 21);

            auto dz_xy_xyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 22);

            auto dz_xy_xyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 23);

            auto dz_xy_xzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 24);

            auto dz_xy_yyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 25);

            auto dz_xy_yyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 26);

            auto dz_xy_yyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 27);

            auto dz_xy_yzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 28);

            auto dz_xy_zzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 29);

            auto dz_xz_xxxx = primBuffer.data(d1off + 180 * bdim + 90 * idx + 30);

            auto dz_xz_xxxy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 31);

            auto dz_xz_xxxz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 32);

            auto dz_xz_xxyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 33);

            auto dz_xz_xxyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 34);

            auto dz_xz_xxzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 35);

            auto dz_xz_xyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 36);

            auto dz_xz_xyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 37);

            auto dz_xz_xyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 38);

            auto dz_xz_xzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 39);

            auto dz_xz_yyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 40);

            auto dz_xz_yyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 41);

            auto dz_xz_yyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 42);

            auto dz_xz_yzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 43);

            auto dz_xz_zzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 44);

            auto dz_yy_xxxx = primBuffer.data(d1off + 180 * bdim + 90 * idx + 45);

            auto dz_yy_xxxy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 46);

            auto dz_yy_xxxz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 47);

            auto dz_yy_xxyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 48);

            auto dz_yy_xxyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 49);

            auto dz_yy_xxzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 50);

            auto dz_yy_xyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 51);

            auto dz_yy_xyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 52);

            auto dz_yy_xyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 53);

            auto dz_yy_xzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 54);

            auto dz_yy_yyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 55);

            auto dz_yy_yyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 56);

            auto dz_yy_yyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 57);

            auto dz_yy_yzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 58);

            auto dz_yy_zzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 59);

            auto dz_yz_xxxx = primBuffer.data(d1off + 180 * bdim + 90 * idx + 60);

            auto dz_yz_xxxy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 61);

            auto dz_yz_xxxz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 62);

            auto dz_yz_xxyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 63);

            auto dz_yz_xxyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 64);

            auto dz_yz_xxzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 65);

            auto dz_yz_xyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 66);

            auto dz_yz_xyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 67);

            auto dz_yz_xyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 68);

            auto dz_yz_xzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 69);

            auto dz_yz_yyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 70);

            auto dz_yz_yyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 71);

            auto dz_yz_yyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 72);

            auto dz_yz_yzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 73);

            auto dz_yz_zzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 74);

            auto dz_zz_xxxx = primBuffer.data(d1off + 180 * bdim + 90 * idx + 75);

            auto dz_zz_xxxy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 76);

            auto dz_zz_xxxz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 77);

            auto dz_zz_xxyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 78);

            auto dz_zz_xxyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 79);

            auto dz_zz_xxzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 80);

            auto dz_zz_xyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 81);

            auto dz_zz_xyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 82);

            auto dz_zz_xyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 83);

            auto dz_zz_xzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 84);

            auto dz_zz_yyyy = primBuffer.data(d1off + 180 * bdim + 90 * idx + 85);

            auto dz_zz_yyyz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 86);

            auto dz_zz_yyzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 87);

            auto dz_zz_yzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 88);

            auto dz_zz_zzzz = primBuffer.data(d1off + 180 * bdim + 90 * idx + 89);

            // set up pointers to (P|M|G) integrals

            auto dx_x_xxxx = primBuffer.data(d2off + 45 * idx);

            auto dx_x_xxxy = primBuffer.data(d2off + 45 * idx + 1);

            auto dx_x_xxxz = primBuffer.data(d2off + 45 * idx + 2);

            auto dx_x_xxyy = primBuffer.data(d2off + 45 * idx + 3);

            auto dx_x_xxyz = primBuffer.data(d2off + 45 * idx + 4);

            auto dx_x_xxzz = primBuffer.data(d2off + 45 * idx + 5);

            auto dx_x_xyyy = primBuffer.data(d2off + 45 * idx + 6);

            auto dx_x_xyyz = primBuffer.data(d2off + 45 * idx + 7);

            auto dx_x_xyzz = primBuffer.data(d2off + 45 * idx + 8);

            auto dx_x_xzzz = primBuffer.data(d2off + 45 * idx + 9);

            auto dx_x_yyyy = primBuffer.data(d2off + 45 * idx + 10);

            auto dx_x_yyyz = primBuffer.data(d2off + 45 * idx + 11);

            auto dx_x_yyzz = primBuffer.data(d2off + 45 * idx + 12);

            auto dx_x_yzzz = primBuffer.data(d2off + 45 * idx + 13);

            auto dx_x_zzzz = primBuffer.data(d2off + 45 * idx + 14);

            auto dx_y_xxxx = primBuffer.data(d2off + 45 * idx + 15);

            auto dx_y_xxxy = primBuffer.data(d2off + 45 * idx + 16);

            auto dx_y_xxxz = primBuffer.data(d2off + 45 * idx + 17);

            auto dx_y_xxyy = primBuffer.data(d2off + 45 * idx + 18);

            auto dx_y_xxyz = primBuffer.data(d2off + 45 * idx + 19);

            auto dx_y_xxzz = primBuffer.data(d2off + 45 * idx + 20);

            auto dx_y_xyyy = primBuffer.data(d2off + 45 * idx + 21);

            auto dx_y_xyyz = primBuffer.data(d2off + 45 * idx + 22);

            auto dx_y_xyzz = primBuffer.data(d2off + 45 * idx + 23);

            auto dx_y_xzzz = primBuffer.data(d2off + 45 * idx + 24);

            auto dx_y_yyyy = primBuffer.data(d2off + 45 * idx + 25);

            auto dx_y_yyyz = primBuffer.data(d2off + 45 * idx + 26);

            auto dx_y_yyzz = primBuffer.data(d2off + 45 * idx + 27);

            auto dx_y_yzzz = primBuffer.data(d2off + 45 * idx + 28);

            auto dx_y_zzzz = primBuffer.data(d2off + 45 * idx + 29);

            auto dx_z_xxxx = primBuffer.data(d2off + 45 * idx + 30);

            auto dx_z_xxxy = primBuffer.data(d2off + 45 * idx + 31);

            auto dx_z_xxxz = primBuffer.data(d2off + 45 * idx + 32);

            auto dx_z_xxyy = primBuffer.data(d2off + 45 * idx + 33);

            auto dx_z_xxyz = primBuffer.data(d2off + 45 * idx + 34);

            auto dx_z_xxzz = primBuffer.data(d2off + 45 * idx + 35);

            auto dx_z_xyyy = primBuffer.data(d2off + 45 * idx + 36);

            auto dx_z_xyyz = primBuffer.data(d2off + 45 * idx + 37);

            auto dx_z_xyzz = primBuffer.data(d2off + 45 * idx + 38);

            auto dx_z_xzzz = primBuffer.data(d2off + 45 * idx + 39);

            auto dx_z_yyyy = primBuffer.data(d2off + 45 * idx + 40);

            auto dx_z_yyyz = primBuffer.data(d2off + 45 * idx + 41);

            auto dx_z_yyzz = primBuffer.data(d2off + 45 * idx + 42);

            auto dx_z_yzzz = primBuffer.data(d2off + 45 * idx + 43);

            auto dx_z_zzzz = primBuffer.data(d2off + 45 * idx + 44);

            auto dy_x_xxxx = primBuffer.data(d2off + 45 * bdim + 45 * idx);

            auto dy_x_xxxy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 1);

            auto dy_x_xxxz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 2);

            auto dy_x_xxyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 3);

            auto dy_x_xxyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 4);

            auto dy_x_xxzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 5);

            auto dy_x_xyyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 6);

            auto dy_x_xyyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 7);

            auto dy_x_xyzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 8);

            auto dy_x_xzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 9);

            auto dy_x_yyyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 10);

            auto dy_x_yyyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 11);

            auto dy_x_yyzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 12);

            auto dy_x_yzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 13);

            auto dy_x_zzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 14);

            auto dy_y_xxxx = primBuffer.data(d2off + 45 * bdim + 45 * idx + 15);

            auto dy_y_xxxy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 16);

            auto dy_y_xxxz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 17);

            auto dy_y_xxyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 18);

            auto dy_y_xxyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 19);

            auto dy_y_xxzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 20);

            auto dy_y_xyyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 21);

            auto dy_y_xyyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 22);

            auto dy_y_xyzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 23);

            auto dy_y_xzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 24);

            auto dy_y_yyyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 25);

            auto dy_y_yyyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 26);

            auto dy_y_yyzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 27);

            auto dy_y_yzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 28);

            auto dy_y_zzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 29);

            auto dy_z_xxxx = primBuffer.data(d2off + 45 * bdim + 45 * idx + 30);

            auto dy_z_xxxy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 31);

            auto dy_z_xxxz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 32);

            auto dy_z_xxyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 33);

            auto dy_z_xxyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 34);

            auto dy_z_xxzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 35);

            auto dy_z_xyyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 36);

            auto dy_z_xyyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 37);

            auto dy_z_xyzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 38);

            auto dy_z_xzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 39);

            auto dy_z_yyyy = primBuffer.data(d2off + 45 * bdim + 45 * idx + 40);

            auto dy_z_yyyz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 41);

            auto dy_z_yyzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 42);

            auto dy_z_yzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 43);

            auto dy_z_zzzz = primBuffer.data(d2off + 45 * bdim + 45 * idx + 44);

            auto dz_x_xxxx = primBuffer.data(d2off + 90 * bdim + 45 * idx);

            auto dz_x_xxxy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 1);

            auto dz_x_xxxz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 2);

            auto dz_x_xxyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 3);

            auto dz_x_xxyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 4);

            auto dz_x_xxzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 5);

            auto dz_x_xyyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 6);

            auto dz_x_xyyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 7);

            auto dz_x_xyzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 8);

            auto dz_x_xzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 9);

            auto dz_x_yyyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 10);

            auto dz_x_yyyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 11);

            auto dz_x_yyzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 12);

            auto dz_x_yzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 13);

            auto dz_x_zzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 14);

            auto dz_y_xxxx = primBuffer.data(d2off + 90 * bdim + 45 * idx + 15);

            auto dz_y_xxxy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 16);

            auto dz_y_xxxz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 17);

            auto dz_y_xxyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 18);

            auto dz_y_xxyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 19);

            auto dz_y_xxzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 20);

            auto dz_y_xyyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 21);

            auto dz_y_xyyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 22);

            auto dz_y_xyzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 23);

            auto dz_y_xzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 24);

            auto dz_y_yyyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 25);

            auto dz_y_yyyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 26);

            auto dz_y_yyzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 27);

            auto dz_y_yzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 28);

            auto dz_y_zzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 29);

            auto dz_z_xxxx = primBuffer.data(d2off + 90 * bdim + 45 * idx + 30);

            auto dz_z_xxxy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 31);

            auto dz_z_xxxz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 32);

            auto dz_z_xxyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 33);

            auto dz_z_xxyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 34);

            auto dz_z_xxzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 35);

            auto dz_z_xyyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 36);

            auto dz_z_xyyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 37);

            auto dz_z_xyzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 38);

            auto dz_z_xzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 39);

            auto dz_z_yyyy = primBuffer.data(d2off + 90 * bdim + 45 * idx + 40);

            auto dz_z_yyyz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 41);

            auto dz_z_yyzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 42);

            auto dz_z_yzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 43);

            auto dz_z_zzzz = primBuffer.data(d2off + 90 * bdim + 45 * idx + 44);

            // set up pointers to (D|M|F) integrals

            auto dx_xx_xxx = primBuffer.data(dkoff + 60 * idx);

            auto dx_xx_xxy = primBuffer.data(dkoff + 60 * idx + 1);

            auto dx_xx_xxz = primBuffer.data(dkoff + 60 * idx + 2);

            auto dx_xx_xyy = primBuffer.data(dkoff + 60 * idx + 3);

            auto dx_xx_xyz = primBuffer.data(dkoff + 60 * idx + 4);

            auto dx_xx_xzz = primBuffer.data(dkoff + 60 * idx + 5);

            auto dx_xx_yyy = primBuffer.data(dkoff + 60 * idx + 6);

            auto dx_xx_yyz = primBuffer.data(dkoff + 60 * idx + 7);

            auto dx_xx_yzz = primBuffer.data(dkoff + 60 * idx + 8);

            auto dx_xx_zzz = primBuffer.data(dkoff + 60 * idx + 9);

            auto dx_xy_xxx = primBuffer.data(dkoff + 60 * idx + 10);

            auto dx_xy_xxy = primBuffer.data(dkoff + 60 * idx + 11);

            auto dx_xy_xxz = primBuffer.data(dkoff + 60 * idx + 12);

            auto dx_xy_xyy = primBuffer.data(dkoff + 60 * idx + 13);

            auto dx_xy_xyz = primBuffer.data(dkoff + 60 * idx + 14);

            auto dx_xy_xzz = primBuffer.data(dkoff + 60 * idx + 15);

            auto dx_xy_yyy = primBuffer.data(dkoff + 60 * idx + 16);

            auto dx_xy_yyz = primBuffer.data(dkoff + 60 * idx + 17);

            auto dx_xy_yzz = primBuffer.data(dkoff + 60 * idx + 18);

            auto dx_xy_zzz = primBuffer.data(dkoff + 60 * idx + 19);

            auto dx_xz_xxx = primBuffer.data(dkoff + 60 * idx + 20);

            auto dx_xz_xxy = primBuffer.data(dkoff + 60 * idx + 21);

            auto dx_xz_xxz = primBuffer.data(dkoff + 60 * idx + 22);

            auto dx_xz_xyy = primBuffer.data(dkoff + 60 * idx + 23);

            auto dx_xz_xyz = primBuffer.data(dkoff + 60 * idx + 24);

            auto dx_xz_xzz = primBuffer.data(dkoff + 60 * idx + 25);

            auto dx_xz_yyy = primBuffer.data(dkoff + 60 * idx + 26);

            auto dx_xz_yyz = primBuffer.data(dkoff + 60 * idx + 27);

            auto dx_xz_yzz = primBuffer.data(dkoff + 60 * idx + 28);

            auto dx_xz_zzz = primBuffer.data(dkoff + 60 * idx + 29);

            auto dx_yy_xxx = primBuffer.data(dkoff + 60 * idx + 30);

            auto dx_yy_xxy = primBuffer.data(dkoff + 60 * idx + 31);

            auto dx_yy_xxz = primBuffer.data(dkoff + 60 * idx + 32);

            auto dx_yy_xyy = primBuffer.data(dkoff + 60 * idx + 33);

            auto dx_yy_xyz = primBuffer.data(dkoff + 60 * idx + 34);

            auto dx_yy_xzz = primBuffer.data(dkoff + 60 * idx + 35);

            auto dx_yy_yyy = primBuffer.data(dkoff + 60 * idx + 36);

            auto dx_yy_yyz = primBuffer.data(dkoff + 60 * idx + 37);

            auto dx_yy_yzz = primBuffer.data(dkoff + 60 * idx + 38);

            auto dx_yy_zzz = primBuffer.data(dkoff + 60 * idx + 39);

            auto dx_yz_xxx = primBuffer.data(dkoff + 60 * idx + 40);

            auto dx_yz_xxy = primBuffer.data(dkoff + 60 * idx + 41);

            auto dx_yz_xxz = primBuffer.data(dkoff + 60 * idx + 42);

            auto dx_yz_xyy = primBuffer.data(dkoff + 60 * idx + 43);

            auto dx_yz_xyz = primBuffer.data(dkoff + 60 * idx + 44);

            auto dx_yz_xzz = primBuffer.data(dkoff + 60 * idx + 45);

            auto dx_yz_yyy = primBuffer.data(dkoff + 60 * idx + 46);

            auto dx_yz_yyz = primBuffer.data(dkoff + 60 * idx + 47);

            auto dx_yz_yzz = primBuffer.data(dkoff + 60 * idx + 48);

            auto dx_yz_zzz = primBuffer.data(dkoff + 60 * idx + 49);

            auto dx_zz_xxx = primBuffer.data(dkoff + 60 * idx + 50);

            auto dx_zz_xxy = primBuffer.data(dkoff + 60 * idx + 51);

            auto dx_zz_xxz = primBuffer.data(dkoff + 60 * idx + 52);

            auto dx_zz_xyy = primBuffer.data(dkoff + 60 * idx + 53);

            auto dx_zz_xyz = primBuffer.data(dkoff + 60 * idx + 54);

            auto dx_zz_xzz = primBuffer.data(dkoff + 60 * idx + 55);

            auto dx_zz_yyy = primBuffer.data(dkoff + 60 * idx + 56);

            auto dx_zz_yyz = primBuffer.data(dkoff + 60 * idx + 57);

            auto dx_zz_yzz = primBuffer.data(dkoff + 60 * idx + 58);

            auto dx_zz_zzz = primBuffer.data(dkoff + 60 * idx + 59);

            auto dy_xx_xxx = primBuffer.data(dkoff + 60 * bdim + 60 * idx);

            auto dy_xx_xxy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 1);

            auto dy_xx_xxz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 2);

            auto dy_xx_xyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 3);

            auto dy_xx_xyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 4);

            auto dy_xx_xzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 5);

            auto dy_xx_yyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 6);

            auto dy_xx_yyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 7);

            auto dy_xx_yzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 8);

            auto dy_xx_zzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 9);

            auto dy_xy_xxx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 10);

            auto dy_xy_xxy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 11);

            auto dy_xy_xxz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 12);

            auto dy_xy_xyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 13);

            auto dy_xy_xyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 14);

            auto dy_xy_xzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 15);

            auto dy_xy_yyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 16);

            auto dy_xy_yyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 17);

            auto dy_xy_yzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 18);

            auto dy_xy_zzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 19);

            auto dy_xz_xxx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 20);

            auto dy_xz_xxy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 21);

            auto dy_xz_xxz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 22);

            auto dy_xz_xyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 23);

            auto dy_xz_xyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 24);

            auto dy_xz_xzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 25);

            auto dy_xz_yyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 26);

            auto dy_xz_yyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 27);

            auto dy_xz_yzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 28);

            auto dy_xz_zzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 29);

            auto dy_yy_xxx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 30);

            auto dy_yy_xxy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 31);

            auto dy_yy_xxz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 32);

            auto dy_yy_xyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 33);

            auto dy_yy_xyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 34);

            auto dy_yy_xzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 35);

            auto dy_yy_yyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 36);

            auto dy_yy_yyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 37);

            auto dy_yy_yzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 38);

            auto dy_yy_zzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 39);

            auto dy_yz_xxx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 40);

            auto dy_yz_xxy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 41);

            auto dy_yz_xxz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 42);

            auto dy_yz_xyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 43);

            auto dy_yz_xyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 44);

            auto dy_yz_xzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 45);

            auto dy_yz_yyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 46);

            auto dy_yz_yyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 47);

            auto dy_yz_yzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 48);

            auto dy_yz_zzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 49);

            auto dy_zz_xxx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 50);

            auto dy_zz_xxy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 51);

            auto dy_zz_xxz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 52);

            auto dy_zz_xyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 53);

            auto dy_zz_xyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 54);

            auto dy_zz_xzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 55);

            auto dy_zz_yyy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 56);

            auto dy_zz_yyz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 57);

            auto dy_zz_yzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 58);

            auto dy_zz_zzz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 59);

            auto dz_xx_xxx = primBuffer.data(dkoff + 120 * bdim + 60 * idx);

            auto dz_xx_xxy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 1);

            auto dz_xx_xxz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 2);

            auto dz_xx_xyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 3);

            auto dz_xx_xyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 4);

            auto dz_xx_xzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 5);

            auto dz_xx_yyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 6);

            auto dz_xx_yyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 7);

            auto dz_xx_yzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 8);

            auto dz_xx_zzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 9);

            auto dz_xy_xxx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 10);

            auto dz_xy_xxy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 11);

            auto dz_xy_xxz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 12);

            auto dz_xy_xyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 13);

            auto dz_xy_xyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 14);

            auto dz_xy_xzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 15);

            auto dz_xy_yyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 16);

            auto dz_xy_yyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 17);

            auto dz_xy_yzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 18);

            auto dz_xy_zzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 19);

            auto dz_xz_xxx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 20);

            auto dz_xz_xxy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 21);

            auto dz_xz_xxz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 22);

            auto dz_xz_xyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 23);

            auto dz_xz_xyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 24);

            auto dz_xz_xzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 25);

            auto dz_xz_yyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 26);

            auto dz_xz_yyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 27);

            auto dz_xz_yzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 28);

            auto dz_xz_zzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 29);

            auto dz_yy_xxx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 30);

            auto dz_yy_xxy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 31);

            auto dz_yy_xxz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 32);

            auto dz_yy_xyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 33);

            auto dz_yy_xyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 34);

            auto dz_yy_xzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 35);

            auto dz_yy_yyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 36);

            auto dz_yy_yyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 37);

            auto dz_yy_yzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 38);

            auto dz_yy_zzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 39);

            auto dz_yz_xxx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 40);

            auto dz_yz_xxy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 41);

            auto dz_yz_xxz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 42);

            auto dz_yz_xyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 43);

            auto dz_yz_xyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 44);

            auto dz_yz_xzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 45);

            auto dz_yz_yyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 46);

            auto dz_yz_yyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 47);

            auto dz_yz_yzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 48);

            auto dz_yz_zzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 49);

            auto dz_zz_xxx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 50);

            auto dz_zz_xxy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 51);

            auto dz_zz_xxz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 52);

            auto dz_zz_xyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 53);

            auto dz_zz_xyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 54);

            auto dz_zz_xzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 55);

            auto dz_zz_yyy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 56);

            auto dz_zz_yyz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 57);

            auto dz_zz_yzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 58);

            auto dz_zz_zzz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 59);

            // set up pointers to (D|G) integrals

            auto s_xx_xxxx = primBuffer.data(soff + 90 * idx);

            auto s_xx_xxxy = primBuffer.data(soff + 90 * idx + 1);

            auto s_xx_xxxz = primBuffer.data(soff + 90 * idx + 2);

            auto s_xx_xxyy = primBuffer.data(soff + 90 * idx + 3);

            auto s_xx_xxyz = primBuffer.data(soff + 90 * idx + 4);

            auto s_xx_xxzz = primBuffer.data(soff + 90 * idx + 5);

            auto s_xx_xyyy = primBuffer.data(soff + 90 * idx + 6);

            auto s_xx_xyyz = primBuffer.data(soff + 90 * idx + 7);

            auto s_xx_xyzz = primBuffer.data(soff + 90 * idx + 8);

            auto s_xx_xzzz = primBuffer.data(soff + 90 * idx + 9);

            auto s_xx_yyyy = primBuffer.data(soff + 90 * idx + 10);

            auto s_xx_yyyz = primBuffer.data(soff + 90 * idx + 11);

            auto s_xx_yyzz = primBuffer.data(soff + 90 * idx + 12);

            auto s_xx_yzzz = primBuffer.data(soff + 90 * idx + 13);

            auto s_xx_zzzz = primBuffer.data(soff + 90 * idx + 14);

            auto s_xy_xxxx = primBuffer.data(soff + 90 * idx + 15);

            auto s_xy_xxxy = primBuffer.data(soff + 90 * idx + 16);

            auto s_xy_xxxz = primBuffer.data(soff + 90 * idx + 17);

            auto s_xy_xxyy = primBuffer.data(soff + 90 * idx + 18);

            auto s_xy_xxyz = primBuffer.data(soff + 90 * idx + 19);

            auto s_xy_xxzz = primBuffer.data(soff + 90 * idx + 20);

            auto s_xy_xyyy = primBuffer.data(soff + 90 * idx + 21);

            auto s_xy_xyyz = primBuffer.data(soff + 90 * idx + 22);

            auto s_xy_xyzz = primBuffer.data(soff + 90 * idx + 23);

            auto s_xy_xzzz = primBuffer.data(soff + 90 * idx + 24);

            auto s_xy_yyyy = primBuffer.data(soff + 90 * idx + 25);

            auto s_xy_yyyz = primBuffer.data(soff + 90 * idx + 26);

            auto s_xy_yyzz = primBuffer.data(soff + 90 * idx + 27);

            auto s_xy_yzzz = primBuffer.data(soff + 90 * idx + 28);

            auto s_xy_zzzz = primBuffer.data(soff + 90 * idx + 29);

            auto s_xz_xxxx = primBuffer.data(soff + 90 * idx + 30);

            auto s_xz_xxxy = primBuffer.data(soff + 90 * idx + 31);

            auto s_xz_xxxz = primBuffer.data(soff + 90 * idx + 32);

            auto s_xz_xxyy = primBuffer.data(soff + 90 * idx + 33);

            auto s_xz_xxyz = primBuffer.data(soff + 90 * idx + 34);

            auto s_xz_xxzz = primBuffer.data(soff + 90 * idx + 35);

            auto s_xz_xyyy = primBuffer.data(soff + 90 * idx + 36);

            auto s_xz_xyyz = primBuffer.data(soff + 90 * idx + 37);

            auto s_xz_xyzz = primBuffer.data(soff + 90 * idx + 38);

            auto s_xz_xzzz = primBuffer.data(soff + 90 * idx + 39);

            auto s_xz_yyyy = primBuffer.data(soff + 90 * idx + 40);

            auto s_xz_yyyz = primBuffer.data(soff + 90 * idx + 41);

            auto s_xz_yyzz = primBuffer.data(soff + 90 * idx + 42);

            auto s_xz_yzzz = primBuffer.data(soff + 90 * idx + 43);

            auto s_xz_zzzz = primBuffer.data(soff + 90 * idx + 44);

            auto s_yy_xxxx = primBuffer.data(soff + 90 * idx + 45);

            auto s_yy_xxxy = primBuffer.data(soff + 90 * idx + 46);

            auto s_yy_xxxz = primBuffer.data(soff + 90 * idx + 47);

            auto s_yy_xxyy = primBuffer.data(soff + 90 * idx + 48);

            auto s_yy_xxyz = primBuffer.data(soff + 90 * idx + 49);

            auto s_yy_xxzz = primBuffer.data(soff + 90 * idx + 50);

            auto s_yy_xyyy = primBuffer.data(soff + 90 * idx + 51);

            auto s_yy_xyyz = primBuffer.data(soff + 90 * idx + 52);

            auto s_yy_xyzz = primBuffer.data(soff + 90 * idx + 53);

            auto s_yy_xzzz = primBuffer.data(soff + 90 * idx + 54);

            auto s_yy_yyyy = primBuffer.data(soff + 90 * idx + 55);

            auto s_yy_yyyz = primBuffer.data(soff + 90 * idx + 56);

            auto s_yy_yyzz = primBuffer.data(soff + 90 * idx + 57);

            auto s_yy_yzzz = primBuffer.data(soff + 90 * idx + 58);

            auto s_yy_zzzz = primBuffer.data(soff + 90 * idx + 59);

            auto s_yz_xxxx = primBuffer.data(soff + 90 * idx + 60);

            auto s_yz_xxxy = primBuffer.data(soff + 90 * idx + 61);

            auto s_yz_xxxz = primBuffer.data(soff + 90 * idx + 62);

            auto s_yz_xxyy = primBuffer.data(soff + 90 * idx + 63);

            auto s_yz_xxyz = primBuffer.data(soff + 90 * idx + 64);

            auto s_yz_xxzz = primBuffer.data(soff + 90 * idx + 65);

            auto s_yz_xyyy = primBuffer.data(soff + 90 * idx + 66);

            auto s_yz_xyyz = primBuffer.data(soff + 90 * idx + 67);

            auto s_yz_xyzz = primBuffer.data(soff + 90 * idx + 68);

            auto s_yz_xzzz = primBuffer.data(soff + 90 * idx + 69);

            auto s_yz_yyyy = primBuffer.data(soff + 90 * idx + 70);

            auto s_yz_yyyz = primBuffer.data(soff + 90 * idx + 71);

            auto s_yz_yyzz = primBuffer.data(soff + 90 * idx + 72);

            auto s_yz_yzzz = primBuffer.data(soff + 90 * idx + 73);

            auto s_yz_zzzz = primBuffer.data(soff + 90 * idx + 74);

            auto s_zz_xxxx = primBuffer.data(soff + 90 * idx + 75);

            auto s_zz_xxxy = primBuffer.data(soff + 90 * idx + 76);

            auto s_zz_xxxz = primBuffer.data(soff + 90 * idx + 77);

            auto s_zz_xxyy = primBuffer.data(soff + 90 * idx + 78);

            auto s_zz_xxyz = primBuffer.data(soff + 90 * idx + 79);

            auto s_zz_xxzz = primBuffer.data(soff + 90 * idx + 80);

            auto s_zz_xyyy = primBuffer.data(soff + 90 * idx + 81);

            auto s_zz_xyyz = primBuffer.data(soff + 90 * idx + 82);

            auto s_zz_xyzz = primBuffer.data(soff + 90 * idx + 83);

            auto s_zz_xzzz = primBuffer.data(soff + 90 * idx + 84);

            auto s_zz_yyyy = primBuffer.data(soff + 90 * idx + 85);

            auto s_zz_yyyz = primBuffer.data(soff + 90 * idx + 86);

            auto s_zz_yyzz = primBuffer.data(soff + 90 * idx + 87);

            auto s_zz_yzzz = primBuffer.data(soff + 90 * idx + 88);

            auto s_zz_zzzz = primBuffer.data(soff + 90 * idx + 89);

            // set up pointers to (P|G) integrals

            auto s_x_xxxx = primBuffer.data(s1off + 45 * idx);

            auto s_x_xxxy = primBuffer.data(s1off + 45 * idx + 1);

            auto s_x_xxxz = primBuffer.data(s1off + 45 * idx + 2);

            auto s_x_xxyy = primBuffer.data(s1off + 45 * idx + 3);

            auto s_x_xxyz = primBuffer.data(s1off + 45 * idx + 4);

            auto s_x_xxzz = primBuffer.data(s1off + 45 * idx + 5);

            auto s_x_xyyy = primBuffer.data(s1off + 45 * idx + 6);

            auto s_x_xyyz = primBuffer.data(s1off + 45 * idx + 7);

            auto s_x_xyzz = primBuffer.data(s1off + 45 * idx + 8);

            auto s_x_xzzz = primBuffer.data(s1off + 45 * idx + 9);

            auto s_x_yyyy = primBuffer.data(s1off + 45 * idx + 10);

            auto s_x_yyyz = primBuffer.data(s1off + 45 * idx + 11);

            auto s_x_yyzz = primBuffer.data(s1off + 45 * idx + 12);

            auto s_x_yzzz = primBuffer.data(s1off + 45 * idx + 13);

            auto s_x_zzzz = primBuffer.data(s1off + 45 * idx + 14);

            auto s_y_xxxx = primBuffer.data(s1off + 45 * idx + 15);

            auto s_y_xxxy = primBuffer.data(s1off + 45 * idx + 16);

            auto s_y_xxxz = primBuffer.data(s1off + 45 * idx + 17);

            auto s_y_xxyy = primBuffer.data(s1off + 45 * idx + 18);

            auto s_y_xxyz = primBuffer.data(s1off + 45 * idx + 19);

            auto s_y_xxzz = primBuffer.data(s1off + 45 * idx + 20);

            auto s_y_xyyy = primBuffer.data(s1off + 45 * idx + 21);

            auto s_y_xyyz = primBuffer.data(s1off + 45 * idx + 22);

            auto s_y_xyzz = primBuffer.data(s1off + 45 * idx + 23);

            auto s_y_xzzz = primBuffer.data(s1off + 45 * idx + 24);

            auto s_y_yyyy = primBuffer.data(s1off + 45 * idx + 25);

            auto s_y_yyyz = primBuffer.data(s1off + 45 * idx + 26);

            auto s_y_yyzz = primBuffer.data(s1off + 45 * idx + 27);

            auto s_y_yzzz = primBuffer.data(s1off + 45 * idx + 28);

            auto s_y_zzzz = primBuffer.data(s1off + 45 * idx + 29);

            auto s_z_xxxx = primBuffer.data(s1off + 45 * idx + 30);

            auto s_z_xxxy = primBuffer.data(s1off + 45 * idx + 31);

            auto s_z_xxxz = primBuffer.data(s1off + 45 * idx + 32);

            auto s_z_xxyy = primBuffer.data(s1off + 45 * idx + 33);

            auto s_z_xxyz = primBuffer.data(s1off + 45 * idx + 34);

            auto s_z_xxzz = primBuffer.data(s1off + 45 * idx + 35);

            auto s_z_xyyy = primBuffer.data(s1off + 45 * idx + 36);

            auto s_z_xyyz = primBuffer.data(s1off + 45 * idx + 37);

            auto s_z_xyzz = primBuffer.data(s1off + 45 * idx + 38);

            auto s_z_xzzz = primBuffer.data(s1off + 45 * idx + 39);

            auto s_z_yyyy = primBuffer.data(s1off + 45 * idx + 40);

            auto s_z_yyyz = primBuffer.data(s1off + 45 * idx + 41);

            auto s_z_yyzz = primBuffer.data(s1off + 45 * idx + 42);

            auto s_z_yzzz = primBuffer.data(s1off + 45 * idx + 43);

            auto s_z_zzzz = primBuffer.data(s1off + 45 * idx + 44);

            // set up pointers to (S|G) integrals

            auto s_0_xxxx = primBuffer.data(s2off + 15 * idx);

            auto s_0_xxxy = primBuffer.data(s2off + 15 * idx + 1);

            auto s_0_xxxz = primBuffer.data(s2off + 15 * idx + 2);

            auto s_0_xxyy = primBuffer.data(s2off + 15 * idx + 3);

            auto s_0_xxyz = primBuffer.data(s2off + 15 * idx + 4);

            auto s_0_xxzz = primBuffer.data(s2off + 15 * idx + 5);

            auto s_0_xyyy = primBuffer.data(s2off + 15 * idx + 6);

            auto s_0_xyyz = primBuffer.data(s2off + 15 * idx + 7);

            auto s_0_xyzz = primBuffer.data(s2off + 15 * idx + 8);

            auto s_0_xzzz = primBuffer.data(s2off + 15 * idx + 9);

            auto s_0_yyyy = primBuffer.data(s2off + 15 * idx + 10);

            auto s_0_yyyz = primBuffer.data(s2off + 15 * idx + 11);

            auto s_0_yyzz = primBuffer.data(s2off + 15 * idx + 12);

            auto s_0_yzzz = primBuffer.data(s2off + 15 * idx + 13);

            auto s_0_zzzz = primBuffer.data(s2off + 15 * idx + 14);

            // set up pointers to (P|F) integrals

            auto s_x_xxx = primBuffer.data(skoff + 30 * idx);

            auto s_x_xxy = primBuffer.data(skoff + 30 * idx + 1);

            auto s_x_xxz = primBuffer.data(skoff + 30 * idx + 2);

            auto s_x_xyy = primBuffer.data(skoff + 30 * idx + 3);

            auto s_x_xyz = primBuffer.data(skoff + 30 * idx + 4);

            auto s_x_xzz = primBuffer.data(skoff + 30 * idx + 5);

            auto s_x_yyy = primBuffer.data(skoff + 30 * idx + 6);

            auto s_x_yyz = primBuffer.data(skoff + 30 * idx + 7);

            auto s_x_yzz = primBuffer.data(skoff + 30 * idx + 8);

            auto s_x_zzz = primBuffer.data(skoff + 30 * idx + 9);

            auto s_y_xxx = primBuffer.data(skoff + 30 * idx + 10);

            auto s_y_xxy = primBuffer.data(skoff + 30 * idx + 11);

            auto s_y_xxz = primBuffer.data(skoff + 30 * idx + 12);

            auto s_y_xyy = primBuffer.data(skoff + 30 * idx + 13);

            auto s_y_xyz = primBuffer.data(skoff + 30 * idx + 14);

            auto s_y_xzz = primBuffer.data(skoff + 30 * idx + 15);

            auto s_y_yyy = primBuffer.data(skoff + 30 * idx + 16);

            auto s_y_yyz = primBuffer.data(skoff + 30 * idx + 17);

            auto s_y_yzz = primBuffer.data(skoff + 30 * idx + 18);

            auto s_y_zzz = primBuffer.data(skoff + 30 * idx + 19);

            auto s_z_xxx = primBuffer.data(skoff + 30 * idx + 20);

            auto s_z_xxy = primBuffer.data(skoff + 30 * idx + 21);

            auto s_z_xxz = primBuffer.data(skoff + 30 * idx + 22);

            auto s_z_xyy = primBuffer.data(skoff + 30 * idx + 23);

            auto s_z_xyz = primBuffer.data(skoff + 30 * idx + 24);

            auto s_z_xzz = primBuffer.data(skoff + 30 * idx + 25);

            auto s_z_yyy = primBuffer.data(skoff + 30 * idx + 26);

            auto s_z_yyz = primBuffer.data(skoff + 30 * idx + 27);

            auto s_z_yzz = primBuffer.data(skoff + 30 * idx + 28);

            auto s_z_zzz = primBuffer.data(skoff + 30 * idx + 29);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxx_xxxx, dx_xxx_xxxy,\
                                     dx_xxx_xxxz, dx_xxx_xxyy, dx_xxx_xxyz, dx_xxx_xxzz,\
                                     dx_xxx_xyyy, dx_xxx_xyyz, dx_xxx_xyzz, dx_xxx_xzzz,\
                                     dx_xxx_yyyy, dx_xxx_yyyz, dx_xxx_yyzz, dx_xxx_yzzz,\
                                     dx_xxx_zzzz, dx_xxy_xxxx, dx_xxy_xxxy, dx_xxy_xxxz,\
                                     dx_xxy_xxyy, dx_xxy_xxyz, dx_xxy_xxzz, dx_xxy_xyyy,\
                                     dx_xxy_xyyz, dx_xxy_xyzz, dx_xxy_xzzz, dx_xxy_yyyy,\
                                     dx_xxy_yyyz, dx_xxy_yyzz, dx_xxy_yzzz, dx_xxy_zzzz,\
                                     dx_xxz_xxxx, dx_xxz_xxxy, dx_xxz_xxxz, dx_xxz_xxyy,\
                                     dx_xxz_xxyz, dx_xxz_xxzz, dx_xxz_xyyy, dx_xxz_xyyz,\
                                     dx_xxz_xyzz, dx_xxz_xzzz, dx_xxz_yyyy, dx_xxz_yyyz,\
                                     dx_xxz_yyzz, dx_xxz_yzzz, dx_xxz_zzzz, dx_xyy_xxxx,\
                                     dx_xyy_xxxy, dx_xyy_xxxz, dx_xyy_xxyy, dx_xyy_xxyz,\
                                     dx_xyy_xxzz, dx_xyy_xyyy, dx_xyy_xyyz, dx_xyy_xyzz,\
                                     dx_xyy_xzzz, dx_xyy_yyyy, dx_xyy_yyyz, dx_xyy_yyzz,\
                                     dx_xyy_yzzz, dx_xyy_zzzz, dx_xyz_xxxx, dx_xyz_xxxy,\
                                     dx_xyz_xxxz, dx_xyz_xxyy, dx_xyz_xxyz, dx_xyz_xxzz,\
                                     dx_xyz_xyyy, dx_xyz_xyyz, dx_xyz_xyzz, dx_xyz_xzzz,\
                                     dx_xyz_yyyy, dx_xyz_yyyz, dx_xyz_yyzz, dx_xyz_yzzz,\
                                     dx_xyz_zzzz, dx_xzz_xxxx, dx_xzz_xxxy, dx_xzz_xxxz,\
                                     dx_xzz_xxyy, dx_xzz_xxyz, dx_xzz_xxzz, dx_xzz_xyyy,\
                                     dx_xzz_xyyz, dx_xzz_xyzz, dx_xzz_xzzz, dx_xzz_yyyy,\
                                     dx_xzz_yyyz, dx_xzz_yyzz, dx_xzz_yzzz, dx_xzz_zzzz,\
                                     dx_yyy_xxxx, dx_yyy_xxxy, dx_yyy_xxxz, dx_yyy_xxyy,\
                                     dx_yyy_xxyz, dx_yyy_xxzz, dx_yyy_xyyy, dx_yyy_xyyz,\
                                     dx_yyy_xyzz, dx_yyy_xzzz, dx_yyy_yyyy, dx_yyy_yyyz,\
                                     dx_yyy_yyzz, dx_yyy_yzzz, dx_yyy_zzzz, dx_yyz_xxxx,\
                                     dx_yyz_xxxy, dx_yyz_xxxz, dx_yyz_xxyy, dx_yyz_xxyz,\
                                     dx_yyz_xxzz, dx_yyz_xyyy, dx_yyz_xyyz, dx_yyz_xyzz,\
                                     dx_yyz_xzzz, dx_yyz_yyyy, dx_yyz_yyyz, dx_yyz_yyzz,\
                                     dx_yyz_yzzz, dx_yyz_zzzz, dx_yzz_xxxx, dx_yzz_xxxy,\
                                     dx_yzz_xxxz, dx_yzz_xxyy, dx_yzz_xxyz, dx_yzz_xxzz,\
                                     dx_yzz_xyyy, dx_yzz_xyyz, dx_yzz_xyzz, dx_yzz_xzzz,\
                                     dx_yzz_yyyy, dx_yzz_yyyz, dx_yzz_yyzz, dx_yzz_yzzz,\
                                     dx_yzz_zzzz, dx_zzz_xxxx, dx_zzz_xxxy, dx_zzz_xxxz,\
                                     dx_zzz_xxyy, dx_zzz_xxyz, dx_zzz_xxzz, dx_zzz_xyyy,\
                                     dx_zzz_xyyz, dx_zzz_xyzz, dx_zzz_xzzz, dx_zzz_yyyy,\
                                     dx_zzz_yyyz, dx_zzz_yyzz, dx_zzz_yzzz, dx_zzz_zzzz,\
                                     dy_xxx_xxxx, dy_xxx_xxxy, dy_xxx_xxxz, dy_xxx_xxyy,\
                                     dy_xxx_xxyz, dy_xxx_xxzz, dy_xxx_xyyy, dy_xxx_xyyz,\
                                     dy_xxx_xyzz, dy_xxx_xzzz, dy_xxx_yyyy, dy_xxx_yyyz,\
                                     dy_xxx_yyzz, dy_xxx_yzzz, dy_xxx_zzzz, dy_xxy_xxxx,\
                                     dy_xxy_xxxy, dy_xxy_xxxz, dy_xxy_xxyy, dy_xxy_xxyz,\
                                     dy_xxy_xxzz, dy_xxy_xyyy, dy_xxy_xyyz, dy_xxy_xyzz,\
                                     dy_xxy_xzzz, dy_xxy_yyyy, dy_xxy_yyyz, dy_xxy_yyzz,\
                                     dy_xxy_yzzz, dy_xxy_zzzz, dy_xxz_xxxx, dy_xxz_xxxy,\
                                     dy_xxz_xxxz, dy_xxz_xxyy, dy_xxz_xxyz, dy_xxz_xxzz,\
                                     dy_xxz_xyyy, dy_xxz_xyyz, dy_xxz_xyzz, dy_xxz_xzzz,\
                                     dy_xxz_yyyy, dy_xxz_yyyz, dy_xxz_yyzz, dy_xxz_yzzz,\
                                     dy_xxz_zzzz, dy_xyy_xxxx, dy_xyy_xxxy, dy_xyy_xxxz,\
                                     dy_xyy_xxyy, dy_xyy_xxyz, dy_xyy_xxzz, dy_xyy_xyyy,\
                                     dy_xyy_xyyz, dy_xyy_xyzz, dy_xyy_xzzz, dy_xyy_yyyy,\
                                     dy_xyy_yyyz, dy_xyy_yyzz, dy_xyy_yzzz, dy_xyy_zzzz,\
                                     dy_xyz_xxxx, dy_xyz_xxxy, dy_xyz_xxxz, dy_xyz_xxyy,\
                                     dy_xyz_xxyz, dy_xyz_xxzz, dy_xyz_xyyy, dy_xyz_xyyz,\
                                     dy_xyz_xyzz, dy_xyz_xzzz, dy_xyz_yyyy, dy_xyz_yyyz,\
                                     dy_xyz_yyzz, dy_xyz_yzzz, dy_xyz_zzzz, dy_xzz_xxxx,\
                                     dy_xzz_xxxy, dy_xzz_xxxz, dy_xzz_xxyy, dy_xzz_xxyz,\
                                     dy_xzz_xxzz, dy_xzz_xyyy, dy_xzz_xyyz, dy_xzz_xyzz,\
                                     dy_xzz_xzzz, dy_xzz_yyyy, dy_xzz_yyyz, dy_xzz_yyzz,\
                                     dy_xzz_yzzz, dy_xzz_zzzz, dy_yyy_xxxx, dy_yyy_xxxy,\
                                     dy_yyy_xxxz, dy_yyy_xxyy, dy_yyy_xxyz, dy_yyy_xxzz,\
                                     dy_yyy_xyyy, dy_yyy_xyyz, dy_yyy_xyzz, dy_yyy_xzzz,\
                                     dy_yyy_yyyy, dy_yyy_yyyz, dy_yyy_yyzz, dy_yyy_yzzz,\
                                     dy_yyy_zzzz, dy_yyz_xxxx, dy_yyz_xxxy, dy_yyz_xxxz,\
                                     dy_yyz_xxyy, dy_yyz_xxyz, dy_yyz_xxzz, dy_yyz_xyyy,\
                                     dy_yyz_xyyz, dy_yyz_xyzz, dy_yyz_xzzz, dy_yyz_yyyy,\
                                     dy_yyz_yyyz, dy_yyz_yyzz, dy_yyz_yzzz, dy_yyz_zzzz,\
                                     dy_yzz_xxxx, dy_yzz_xxxy, dy_yzz_xxxz, dy_yzz_xxyy,\
                                     dy_yzz_xxyz, dy_yzz_xxzz, dy_yzz_xyyy, dy_yzz_xyyz,\
                                     dy_yzz_xyzz, dy_yzz_xzzz, dy_yzz_yyyy, dy_yzz_yyyz,\
                                     dy_yzz_yyzz, dy_yzz_yzzz, dy_yzz_zzzz, dy_zzz_xxxx,\
                                     dy_zzz_xxxy, dy_zzz_xxxz, dy_zzz_xxyy, dy_zzz_xxyz,\
                                     dy_zzz_xxzz, dy_zzz_xyyy, dy_zzz_xyyz, dy_zzz_xyzz,\
                                     dy_zzz_xzzz, dy_zzz_yyyy, dy_zzz_yyyz, dy_zzz_yyzz,\
                                     dy_zzz_yzzz, dy_zzz_zzzz, dz_xxx_xxxx, dz_xxx_xxxy,\
                                     dz_xxx_xxxz, dz_xxx_xxyy, dz_xxx_xxyz, dz_xxx_xxzz,\
                                     dz_xxx_xyyy, dz_xxx_xyyz, dz_xxx_xyzz, dz_xxx_xzzz,\
                                     dz_xxx_yyyy, dz_xxx_yyyz, dz_xxx_yyzz, dz_xxx_yzzz,\
                                     dz_xxx_zzzz, dz_xxy_xxxx, dz_xxy_xxxy, dz_xxy_xxxz,\
                                     dz_xxy_xxyy, dz_xxy_xxyz, dz_xxy_xxzz, dz_xxy_xyyy,\
                                     dz_xxy_xyyz, dz_xxy_xyzz, dz_xxy_xzzz, dz_xxy_yyyy,\
                                     dz_xxy_yyyz, dz_xxy_yyzz, dz_xxy_yzzz, dz_xxy_zzzz,\
                                     dz_xxz_xxxx, dz_xxz_xxxy, dz_xxz_xxxz, dz_xxz_xxyy,\
                                     dz_xxz_xxyz, dz_xxz_xxzz, dz_xxz_xyyy, dz_xxz_xyyz,\
                                     dz_xxz_xyzz, dz_xxz_xzzz, dz_xxz_yyyy, dz_xxz_yyyz,\
                                     dz_xxz_yyzz, dz_xxz_yzzz, dz_xxz_zzzz, dz_xyy_xxxx,\
                                     dz_xyy_xxxy, dz_xyy_xxxz, dz_xyy_xxyy, dz_xyy_xxyz,\
                                     dz_xyy_xxzz, dz_xyy_xyyy, dz_xyy_xyyz, dz_xyy_xyzz,\
                                     dz_xyy_xzzz, dz_xyy_yyyy, dz_xyy_yyyz, dz_xyy_yyzz,\
                                     dz_xyy_yzzz, dz_xyy_zzzz, dz_xyz_xxxx, dz_xyz_xxxy,\
                                     dz_xyz_xxxz, dz_xyz_xxyy, dz_xyz_xxyz, dz_xyz_xxzz,\
                                     dz_xyz_xyyy, dz_xyz_xyyz, dz_xyz_xyzz, dz_xyz_xzzz,\
                                     dz_xyz_yyyy, dz_xyz_yyyz, dz_xyz_yyzz, dz_xyz_yzzz,\
                                     dz_xyz_zzzz, dz_xzz_xxxx, dz_xzz_xxxy, dz_xzz_xxxz,\
                                     dz_xzz_xxyy, dz_xzz_xxyz, dz_xzz_xxzz, dz_xzz_xyyy,\
                                     dz_xzz_xyyz, dz_xzz_xyzz, dz_xzz_xzzz, dz_xzz_yyyy,\
                                     dz_xzz_yyyz, dz_xzz_yyzz, dz_xzz_yzzz, dz_xzz_zzzz,\
                                     dz_yyy_xxxx, dz_yyy_xxxy, dz_yyy_xxxz, dz_yyy_xxyy,\
                                     dz_yyy_xxyz, dz_yyy_xxzz, dz_yyy_xyyy, dz_yyy_xyyz,\
                                     dz_yyy_xyzz, dz_yyy_xzzz, dz_yyy_yyyy, dz_yyy_yyyz,\
                                     dz_yyy_yyzz, dz_yyy_yzzz, dz_yyy_zzzz, dz_yyz_xxxx,\
                                     dz_yyz_xxxy, dz_yyz_xxxz, dz_yyz_xxyy, dz_yyz_xxyz,\
                                     dz_yyz_xxzz, dz_yyz_xyyy, dz_yyz_xyyz, dz_yyz_xyzz,\
                                     dz_yyz_xzzz, dz_yyz_yyyy, dz_yyz_yyyz, dz_yyz_yyzz,\
                                     dz_yyz_yzzz, dz_yyz_zzzz, dz_yzz_xxxx, dz_yzz_xxxy,\
                                     dz_yzz_xxxz, dz_yzz_xxyy, dz_yzz_xxyz, dz_yzz_xxzz,\
                                     dz_yzz_xyyy, dz_yzz_xyyz, dz_yzz_xyzz, dz_yzz_xzzz,\
                                     dz_yzz_yyyy, dz_yzz_yyyz, dz_yzz_yyzz, dz_yzz_yzzz,\
                                     dz_yzz_zzzz, dz_zzz_xxxx, dz_zzz_xxxy, dz_zzz_xxxz,\
                                     dz_zzz_xxyy, dz_zzz_xxyz, dz_zzz_xxzz, dz_zzz_xyyy,\
                                     dz_zzz_xyyz, dz_zzz_xyzz, dz_zzz_xzzz, dz_zzz_yyyy,\
                                     dz_zzz_yyyz, dz_zzz_yyzz, dz_zzz_yzzz, dz_zzz_zzzz,\
                                     dx_xx_xxxx, dx_xx_xxxy, dx_xx_xxxz, dx_xx_xxyy,\
                                     dx_xx_xxyz, dx_xx_xxzz, dx_xx_xyyy, dx_xx_xyyz,\
                                     dx_xx_xyzz, dx_xx_xzzz, dx_xx_yyyy, dx_xx_yyyz,\
                                     dx_xx_yyzz, dx_xx_yzzz, dx_xx_zzzz, dx_xy_xxxx,\
                                     dx_xy_xxxy, dx_xy_xxxz, dx_xy_xxyy, dx_xy_xxyz,\
                                     dx_xy_xxzz, dx_xy_xyyy, dx_xy_xyyz, dx_xy_xyzz,\
                                     dx_xy_xzzz, dx_xy_yyyy, dx_xy_yyyz, dx_xy_yyzz,\
                                     dx_xy_yzzz, dx_xy_zzzz, dx_xz_xxxx, dx_xz_xxxy,\
                                     dx_xz_xxxz, dx_xz_xxyy, dx_xz_xxyz, dx_xz_xxzz,\
                                     dx_xz_xyyy, dx_xz_xyyz, dx_xz_xyzz, dx_xz_xzzz,\
                                     dx_xz_yyyy, dx_xz_yyyz, dx_xz_yyzz, dx_xz_yzzz,\
                                     dx_xz_zzzz, dx_yy_xxxx, dx_yy_xxxy, dx_yy_xxxz,\
                                     dx_yy_xxyy, dx_yy_xxyz, dx_yy_xxzz, dx_yy_xyyy,\
                                     dx_yy_xyyz, dx_yy_xyzz, dx_yy_xzzz, dx_yy_yyyy,\
                                     dx_yy_yyyz, dx_yy_yyzz, dx_yy_yzzz, dx_yy_zzzz,\
                                     dx_yz_xxxx, dx_yz_xxxy, dx_yz_xxxz, dx_yz_xxyy,\
                                     dx_yz_xxyz, dx_yz_xxzz, dx_yz_xyyy, dx_yz_xyyz,\
                                     dx_yz_xyzz, dx_yz_xzzz, dx_yz_yyyy, dx_yz_yyyz,\
                                     dx_yz_yyzz, dx_yz_yzzz, dx_yz_zzzz, dx_zz_xxxx,\
                                     dx_zz_xxxy, dx_zz_xxxz, dx_zz_xxyy, dx_zz_xxyz,\
                                     dx_zz_xxzz, dx_zz_xyyy, dx_zz_xyyz, dx_zz_xyzz,\
                                     dx_zz_xzzz, dx_zz_yyyy, dx_zz_yyyz, dx_zz_yyzz,\
                                     dx_zz_yzzz, dx_zz_zzzz, dy_xx_xxxx, dy_xx_xxxy,\
                                     dy_xx_xxxz, dy_xx_xxyy, dy_xx_xxyz, dy_xx_xxzz,\
                                     dy_xx_xyyy, dy_xx_xyyz, dy_xx_xyzz, dy_xx_xzzz,\
                                     dy_xx_yyyy, dy_xx_yyyz, dy_xx_yyzz, dy_xx_yzzz,\
                                     dy_xx_zzzz, dy_xy_xxxx, dy_xy_xxxy, dy_xy_xxxz,\
                                     dy_xy_xxyy, dy_xy_xxyz, dy_xy_xxzz, dy_xy_xyyy,\
                                     dy_xy_xyyz, dy_xy_xyzz, dy_xy_xzzz, dy_xy_yyyy,\
                                     dy_xy_yyyz, dy_xy_yyzz, dy_xy_yzzz, dy_xy_zzzz,\
                                     dy_xz_xxxx, dy_xz_xxxy, dy_xz_xxxz, dy_xz_xxyy,\
                                     dy_xz_xxyz, dy_xz_xxzz, dy_xz_xyyy, dy_xz_xyyz,\
                                     dy_xz_xyzz, dy_xz_xzzz, dy_xz_yyyy, dy_xz_yyyz,\
                                     dy_xz_yyzz, dy_xz_yzzz, dy_xz_zzzz, dy_yy_xxxx,\
                                     dy_yy_xxxy, dy_yy_xxxz, dy_yy_xxyy, dy_yy_xxyz,\
                                     dy_yy_xxzz, dy_yy_xyyy, dy_yy_xyyz, dy_yy_xyzz,\
                                     dy_yy_xzzz, dy_yy_yyyy, dy_yy_yyyz, dy_yy_yyzz,\
                                     dy_yy_yzzz, dy_yy_zzzz, dy_yz_xxxx, dy_yz_xxxy,\
                                     dy_yz_xxxz, dy_yz_xxyy, dy_yz_xxyz, dy_yz_xxzz,\
                                     dy_yz_xyyy, dy_yz_xyyz, dy_yz_xyzz, dy_yz_xzzz,\
                                     dy_yz_yyyy, dy_yz_yyyz, dy_yz_yyzz, dy_yz_yzzz,\
                                     dy_yz_zzzz, dy_zz_xxxx, dy_zz_xxxy, dy_zz_xxxz,\
                                     dy_zz_xxyy, dy_zz_xxyz, dy_zz_xxzz, dy_zz_xyyy,\
                                     dy_zz_xyyz, dy_zz_xyzz, dy_zz_xzzz, dy_zz_yyyy,\
                                     dy_zz_yyyz, dy_zz_yyzz, dy_zz_yzzz, dy_zz_zzzz,\
                                     dz_xx_xxxx, dz_xx_xxxy, dz_xx_xxxz, dz_xx_xxyy,\
                                     dz_xx_xxyz, dz_xx_xxzz, dz_xx_xyyy, dz_xx_xyyz,\
                                     dz_xx_xyzz, dz_xx_xzzz, dz_xx_yyyy, dz_xx_yyyz,\
                                     dz_xx_yyzz, dz_xx_yzzz, dz_xx_zzzz, dz_xy_xxxx,\
                                     dz_xy_xxxy, dz_xy_xxxz, dz_xy_xxyy, dz_xy_xxyz,\
                                     dz_xy_xxzz, dz_xy_xyyy, dz_xy_xyyz, dz_xy_xyzz,\
                                     dz_xy_xzzz, dz_xy_yyyy, dz_xy_yyyz, dz_xy_yyzz,\
                                     dz_xy_yzzz, dz_xy_zzzz, dz_xz_xxxx, dz_xz_xxxy,\
                                     dz_xz_xxxz, dz_xz_xxyy, dz_xz_xxyz, dz_xz_xxzz,\
                                     dz_xz_xyyy, dz_xz_xyyz, dz_xz_xyzz, dz_xz_xzzz,\
                                     dz_xz_yyyy, dz_xz_yyyz, dz_xz_yyzz, dz_xz_yzzz,\
                                     dz_xz_zzzz, dz_yy_xxxx, dz_yy_xxxy, dz_yy_xxxz,\
                                     dz_yy_xxyy, dz_yy_xxyz, dz_yy_xxzz, dz_yy_xyyy,\
                                     dz_yy_xyyz, dz_yy_xyzz, dz_yy_xzzz, dz_yy_yyyy,\
                                     dz_yy_yyyz, dz_yy_yyzz, dz_yy_yzzz, dz_yy_zzzz,\
                                     dz_yz_xxxx, dz_yz_xxxy, dz_yz_xxxz, dz_yz_xxyy,\
                                     dz_yz_xxyz, dz_yz_xxzz, dz_yz_xyyy, dz_yz_xyyz,\
                                     dz_yz_xyzz, dz_yz_xzzz, dz_yz_yyyy, dz_yz_yyyz,\
                                     dz_yz_yyzz, dz_yz_yzzz, dz_yz_zzzz, dz_zz_xxxx,\
                                     dz_zz_xxxy, dz_zz_xxxz, dz_zz_xxyy, dz_zz_xxyz,\
                                     dz_zz_xxzz, dz_zz_xyyy, dz_zz_xyyz, dz_zz_xyzz,\
                                     dz_zz_xzzz, dz_zz_yyyy, dz_zz_yyyz, dz_zz_yyzz,\
                                     dz_zz_yzzz, dz_zz_zzzz, dx_x_xxxx, dx_x_xxxy,\
                                     dx_x_xxxz, dx_x_xxyy, dx_x_xxyz, dx_x_xxzz,\
                                     dx_x_xyyy, dx_x_xyyz, dx_x_xyzz, dx_x_xzzz,\
                                     dx_x_yyyy, dx_x_yyyz, dx_x_yyzz, dx_x_yzzz,\
                                     dx_x_zzzz, dx_y_xxxx, dx_y_xxxy, dx_y_xxxz,\
                                     dx_y_xxyy, dx_y_xxyz, dx_y_xxzz, dx_y_xyyy,\
                                     dx_y_xyyz, dx_y_xyzz, dx_y_xzzz, dx_y_yyyy,\
                                     dx_y_yyyz, dx_y_yyzz, dx_y_yzzz, dx_y_zzzz,\
                                     dx_z_xxxx, dx_z_xxxy, dx_z_xxxz, dx_z_xxyy,\
                                     dx_z_xxyz, dx_z_xxzz, dx_z_xyyy, dx_z_xyyz,\
                                     dx_z_xyzz, dx_z_xzzz, dx_z_yyyy, dx_z_yyyz,\
                                     dx_z_yyzz, dx_z_yzzz, dx_z_zzzz, dy_x_xxxx,\
                                     dy_x_xxxy, dy_x_xxxz, dy_x_xxyy, dy_x_xxyz,\
                                     dy_x_xxzz, dy_x_xyyy, dy_x_xyyz, dy_x_xyzz,\
                                     dy_x_xzzz, dy_x_yyyy, dy_x_yyyz, dy_x_yyzz,\
                                     dy_x_yzzz, dy_x_zzzz, dy_y_xxxx, dy_y_xxxy,\
                                     dy_y_xxxz, dy_y_xxyy, dy_y_xxyz, dy_y_xxzz,\
                                     dy_y_xyyy, dy_y_xyyz, dy_y_xyzz, dy_y_xzzz,\
                                     dy_y_yyyy, dy_y_yyyz, dy_y_yyzz, dy_y_yzzz,\
                                     dy_y_zzzz, dy_z_xxxx, dy_z_xxxy, dy_z_xxxz,\
                                     dy_z_xxyy, dy_z_xxyz, dy_z_xxzz, dy_z_xyyy,\
                                     dy_z_xyyz, dy_z_xyzz, dy_z_xzzz, dy_z_yyyy,\
                                     dy_z_yyyz, dy_z_yyzz, dy_z_yzzz, dy_z_zzzz,\
                                     dz_x_xxxx, dz_x_xxxy, dz_x_xxxz, dz_x_xxyy,\
                                     dz_x_xxyz, dz_x_xxzz, dz_x_xyyy, dz_x_xyyz,\
                                     dz_x_xyzz, dz_x_xzzz, dz_x_yyyy, dz_x_yyyz,\
                                     dz_x_yyzz, dz_x_yzzz, dz_x_zzzz, dz_y_xxxx,\
                                     dz_y_xxxy, dz_y_xxxz, dz_y_xxyy, dz_y_xxyz,\
                                     dz_y_xxzz, dz_y_xyyy, dz_y_xyyz, dz_y_xyzz,\
                                     dz_y_xzzz, dz_y_yyyy, dz_y_yyyz, dz_y_yyzz,\
                                     dz_y_yzzz, dz_y_zzzz, dz_z_xxxx, dz_z_xxxy,\
                                     dz_z_xxxz, dz_z_xxyy, dz_z_xxyz, dz_z_xxzz,\
                                     dz_z_xyyy, dz_z_xyyz, dz_z_xyzz, dz_z_xzzz,\
                                     dz_z_yyyy, dz_z_yyyz, dz_z_yyzz, dz_z_yzzz,\
                                     dz_z_zzzz, dx_xx_xxx, dx_xx_xxy, dx_xx_xxz,\
                                     dx_xx_xyy, dx_xx_xyz, dx_xx_xzz, dx_xx_yyy,\
                                     dx_xx_yyz, dx_xx_yzz, dx_xx_zzz, dx_xy_xxx,\
                                     dx_xy_xxy, dx_xy_xxz, dx_xy_xyy, dx_xy_xyz,\
                                     dx_xy_xzz, dx_xy_yyy, dx_xy_yyz, dx_xy_yzz,\
                                     dx_xy_zzz, dx_xz_xxx, dx_xz_xxy, dx_xz_xxz,\
                                     dx_xz_xyy, dx_xz_xyz, dx_xz_xzz, dx_xz_yyy,\
                                     dx_xz_yyz, dx_xz_yzz, dx_xz_zzz, dx_yy_xxx,\
                                     dx_yy_xxy, dx_yy_xxz, dx_yy_xyy, dx_yy_xyz,\
                                     dx_yy_xzz, dx_yy_yyy, dx_yy_yyz, dx_yy_yzz,\
                                     dx_yy_zzz, dx_yz_xxx, dx_yz_xxy, dx_yz_xxz,\
                                     dx_yz_xyy, dx_yz_xyz, dx_yz_xzz, dx_yz_yyy,\
                                     dx_yz_yyz, dx_yz_yzz, dx_yz_zzz, dx_zz_xxx,\
                                     dx_zz_xxy, dx_zz_xxz, dx_zz_xyy, dx_zz_xyz,\
                                     dx_zz_xzz, dx_zz_yyy, dx_zz_yyz, dx_zz_yzz,\
                                     dx_zz_zzz, dy_xx_xxx, dy_xx_xxy, dy_xx_xxz,\
                                     dy_xx_xyy, dy_xx_xyz, dy_xx_xzz, dy_xx_yyy,\
                                     dy_xx_yyz, dy_xx_yzz, dy_xx_zzz, dy_xy_xxx,\
                                     dy_xy_xxy, dy_xy_xxz, dy_xy_xyy, dy_xy_xyz,\
                                     dy_xy_xzz, dy_xy_yyy, dy_xy_yyz, dy_xy_yzz,\
                                     dy_xy_zzz, dy_xz_xxx, dy_xz_xxy, dy_xz_xxz,\
                                     dy_xz_xyy, dy_xz_xyz, dy_xz_xzz, dy_xz_yyy,\
                                     dy_xz_yyz, dy_xz_yzz, dy_xz_zzz, dy_yy_xxx,\
                                     dy_yy_xxy, dy_yy_xxz, dy_yy_xyy, dy_yy_xyz,\
                                     dy_yy_xzz, dy_yy_yyy, dy_yy_yyz, dy_yy_yzz,\
                                     dy_yy_zzz, dy_yz_xxx, dy_yz_xxy, dy_yz_xxz,\
                                     dy_yz_xyy, dy_yz_xyz, dy_yz_xzz, dy_yz_yyy,\
                                     dy_yz_yyz, dy_yz_yzz, dy_yz_zzz, dy_zz_xxx,\
                                     dy_zz_xxy, dy_zz_xxz, dy_zz_xyy, dy_zz_xyz,\
                                     dy_zz_xzz, dy_zz_yyy, dy_zz_yyz, dy_zz_yzz,\
                                     dy_zz_zzz, dz_xx_xxx, dz_xx_xxy, dz_xx_xxz,\
                                     dz_xx_xyy, dz_xx_xyz, dz_xx_xzz, dz_xx_yyy,\
                                     dz_xx_yyz, dz_xx_yzz, dz_xx_zzz, dz_xy_xxx,\
                                     dz_xy_xxy, dz_xy_xxz, dz_xy_xyy, dz_xy_xyz,\
                                     dz_xy_xzz, dz_xy_yyy, dz_xy_yyz, dz_xy_yzz,\
                                     dz_xy_zzz, dz_xz_xxx, dz_xz_xxy, dz_xz_xxz,\
                                     dz_xz_xyy, dz_xz_xyz, dz_xz_xzz, dz_xz_yyy,\
                                     dz_xz_yyz, dz_xz_yzz, dz_xz_zzz, dz_yy_xxx,\
                                     dz_yy_xxy, dz_yy_xxz, dz_yy_xyy, dz_yy_xyz,\
                                     dz_yy_xzz, dz_yy_yyy, dz_yy_yyz, dz_yy_yzz,\
                                     dz_yy_zzz, dz_yz_xxx, dz_yz_xxy, dz_yz_xxz,\
                                     dz_yz_xyy, dz_yz_xyz, dz_yz_xzz, dz_yz_yyy,\
                                     dz_yz_yyz, dz_yz_yzz, dz_yz_zzz, dz_zz_xxx,\
                                     dz_zz_xxy, dz_zz_xxz, dz_zz_xyy, dz_zz_xyz,\
                                     dz_zz_xzz, dz_zz_yyy, dz_zz_yyz, dz_zz_yzz,\
                                     dz_zz_zzz, s_xx_xxxx, s_xx_xxxy, s_xx_xxxz,\
                                     s_xx_xxyy, s_xx_xxyz, s_xx_xxzz, s_xx_xyyy,\
                                     s_xx_xyyz, s_xx_xyzz, s_xx_xzzz, s_xx_yyyy,\
                                     s_xx_yyyz, s_xx_yyzz, s_xx_yzzz, s_xx_zzzz,\
                                     s_xy_xxxx, s_xy_xxxy, s_xy_xxxz, s_xy_xxyy,\
                                     s_xy_xxyz, s_xy_xxzz, s_xy_xyyy, s_xy_xyyz,\
                                     s_xy_xyzz, s_xy_xzzz, s_xy_yyyy, s_xy_yyyz,\
                                     s_xy_yyzz, s_xy_yzzz, s_xy_zzzz, s_xz_xxxx,\
                                     s_xz_xxxy, s_xz_xxxz, s_xz_xxyy, s_xz_xxyz,\
                                     s_xz_xxzz, s_xz_xyyy, s_xz_xyyz, s_xz_xyzz,\
                                     s_xz_xzzz, s_xz_yyyy, s_xz_yyyz, s_xz_yyzz,\
                                     s_xz_yzzz, s_xz_zzzz, s_yy_xxxx, s_yy_xxxy,\
                                     s_yy_xxxz, s_yy_xxyy, s_yy_xxyz, s_yy_xxzz,\
                                     s_yy_xyyy, s_yy_xyyz, s_yy_xyzz, s_yy_xzzz,\
                                     s_yy_yyyy, s_yy_yyyz, s_yy_yyzz, s_yy_yzzz,\
                                     s_yy_zzzz, s_yz_xxxx, s_yz_xxxy, s_yz_xxxz,\
                                     s_yz_xxyy, s_yz_xxyz, s_yz_xxzz, s_yz_xyyy,\
                                     s_yz_xyyz, s_yz_xyzz, s_yz_xzzz, s_yz_yyyy,\
                                     s_yz_yyyz, s_yz_yyzz, s_yz_yzzz, s_yz_zzzz,\
                                     s_zz_xxxx, s_zz_xxxy, s_zz_xxxz, s_zz_xxyy,\
                                     s_zz_xxyz, s_zz_xxzz, s_zz_xyyy, s_zz_xyyz,\
                                     s_zz_xyzz, s_zz_xzzz, s_zz_yyyy, s_zz_yyyz,\
                                     s_zz_yyzz, s_zz_yzzz, s_zz_zzzz, s_x_xxxx,\
                                     s_x_xxxy, s_x_xxxz, s_x_xxyy, s_x_xxyz, s_x_xxzz,\
                                     s_x_xyyy, s_x_xyyz, s_x_xyzz, s_x_xzzz, s_x_yyyy,\
                                     s_x_yyyz, s_x_yyzz, s_x_yzzz, s_x_zzzz, s_y_xxxx,\
                                     s_y_xxxy, s_y_xxxz, s_y_xxyy, s_y_xxyz, s_y_xxzz,\
                                     s_y_xyyy, s_y_xyyz, s_y_xyzz, s_y_xzzz, s_y_yyyy,\
                                     s_y_yyyz, s_y_yyzz, s_y_yzzz, s_y_zzzz, s_z_xxxx,\
                                     s_z_xxxy, s_z_xxxz, s_z_xxyy, s_z_xxyz, s_z_xxzz,\
                                     s_z_xyyy, s_z_xyyz, s_z_xyzz, s_z_xzzz, s_z_yyyy,\
                                     s_z_yyyz, s_z_yyzz, s_z_yzzz, s_z_zzzz, s_0_xxxx,\
                                     s_0_xxxy, s_0_xxxz, s_0_xxyy, s_0_xxyz, s_0_xxzz,\
                                     s_0_xyyy, s_0_xyyz, s_0_xyzz, s_0_xzzz, s_0_yyyy,\
                                     s_0_yyyz, s_0_yyzz, s_0_yzzz, s_0_zzzz, s_x_xxx,\
                                     s_x_xxy, s_x_xxz, s_x_xyy, s_x_xyz, s_x_xzz,\
                                     s_x_yyy, s_x_yyz, s_x_yzz, s_x_zzz, s_y_xxx,\
                                     s_y_xxy, s_y_xxz, s_y_xyy, s_y_xyz, s_y_xzz,\
                                     s_y_yyy, s_y_yyz, s_y_yzz, s_y_zzz, s_z_xxx,\
                                     s_z_xxy, s_z_xxz, s_z_xyy, s_z_xyz, s_z_xzz,\
                                     s_z_yyy, s_z_yyz, s_z_yzz, s_z_zzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xx_xxxx[j] = fr * s_x_xxxx[j] + f2t * (s_0_xxxx[j] + 4.0 * s_x_xxx[j]);

                s_xx_xxxy[j] = fr * s_x_xxxy[j] + f2t * (s_0_xxxy[j] + 3.0 * s_x_xxy[j]);

                s_xx_xxxz[j] = fr * s_x_xxxz[j] + f2t * (s_0_xxxz[j] + 3.0 * s_x_xxz[j]);

                s_xx_xxyy[j] = fr * s_x_xxyy[j] + f2t * (s_0_xxyy[j] + 2.0 * s_x_xyy[j]);

                s_xx_xxyz[j] = fr * s_x_xxyz[j] + f2t * (s_0_xxyz[j] + 2.0 * s_x_xyz[j]);

                s_xx_xxzz[j] = fr * s_x_xxzz[j] + f2t * (s_0_xxzz[j] + 2.0 * s_x_xzz[j]);

                s_xx_xyyy[j] = fr * s_x_xyyy[j] + f2t * (s_0_xyyy[j] + s_x_yyy[j]);

                s_xx_xyyz[j] = fr * s_x_xyyz[j] + f2t * (s_0_xyyz[j] + s_x_yyz[j]);

                s_xx_xyzz[j] = fr * s_x_xyzz[j] + f2t * (s_0_xyzz[j] + s_x_yzz[j]);

                s_xx_xzzz[j] = fr * s_x_xzzz[j] + f2t * (s_0_xzzz[j] + s_x_zzz[j]);

                s_xx_yyyy[j] = fr * s_x_yyyy[j] + f2t * s_0_yyyy[j];

                s_xx_yyyz[j] = fr * s_x_yyyz[j] + f2t * s_0_yyyz[j];

                s_xx_yyzz[j] = fr * s_x_yyzz[j] + f2t * s_0_yyzz[j];

                s_xx_yzzz[j] = fr * s_x_yzzz[j] + f2t * s_0_yzzz[j];

                s_xx_zzzz[j] = fr * s_x_zzzz[j] + f2t * s_0_zzzz[j];

                s_xy_xxxx[j] = fr * s_y_xxxx[j] + f2t * 4.0 * s_y_xxx[j];

                s_xy_xxxy[j] = fr * s_y_xxxy[j] + f2t * 3.0 * s_y_xxy[j];

                s_xy_xxxz[j] = fr * s_y_xxxz[j] + f2t * 3.0 * s_y_xxz[j];

                s_xy_xxyy[j] = fr * s_y_xxyy[j] + f2t * 2.0 * s_y_xyy[j];

                s_xy_xxyz[j] = fr * s_y_xxyz[j] + f2t * 2.0 * s_y_xyz[j];

                s_xy_xxzz[j] = fr * s_y_xxzz[j] + f2t * 2.0 * s_y_xzz[j];

                s_xy_xyyy[j] = fr * s_y_xyyy[j] + f2t * s_y_yyy[j];

                s_xy_xyyz[j] = fr * s_y_xyyz[j] + f2t * s_y_yyz[j];

                s_xy_xyzz[j] = fr * s_y_xyzz[j] + f2t * s_y_yzz[j];

                s_xy_xzzz[j] = fr * s_y_xzzz[j] + f2t * s_y_zzz[j];

                s_xy_yyyy[j] = fr * s_y_yyyy[j];

                s_xy_yyyz[j] = fr * s_y_yyyz[j];

                s_xy_yyzz[j] = fr * s_y_yyzz[j];

                s_xy_yzzz[j] = fr * s_y_yzzz[j];

                s_xy_zzzz[j] = fr * s_y_zzzz[j];

                s_xz_xxxx[j] = fr * s_z_xxxx[j] + f2t * 4.0 * s_z_xxx[j];

                s_xz_xxxy[j] = fr * s_z_xxxy[j] + f2t * 3.0 * s_z_xxy[j];

                s_xz_xxxz[j] = fr * s_z_xxxz[j] + f2t * 3.0 * s_z_xxz[j];

                s_xz_xxyy[j] = fr * s_z_xxyy[j] + f2t * 2.0 * s_z_xyy[j];

                s_xz_xxyz[j] = fr * s_z_xxyz[j] + f2t * 2.0 * s_z_xyz[j];

                s_xz_xxzz[j] = fr * s_z_xxzz[j] + f2t * 2.0 * s_z_xzz[j];

                s_xz_xyyy[j] = fr * s_z_xyyy[j] + f2t * s_z_yyy[j];

                s_xz_xyyz[j] = fr * s_z_xyyz[j] + f2t * s_z_yyz[j];

                s_xz_xyzz[j] = fr * s_z_xyzz[j] + f2t * s_z_yzz[j];

                s_xz_xzzz[j] = fr * s_z_xzzz[j] + f2t * s_z_zzz[j];

                s_xz_yyyy[j] = fr * s_z_yyyy[j];

                s_xz_yyyz[j] = fr * s_z_yyyz[j];

                s_xz_yyzz[j] = fr * s_z_yyzz[j];

                s_xz_yzzz[j] = fr * s_z_yzzz[j];

                s_xz_zzzz[j] = fr * s_z_zzzz[j];

                // leading y component

                fr = pay[j];

                s_yy_xxxx[j] = fr * s_y_xxxx[j] + f2t * s_0_xxxx[j];

                s_yy_xxxy[j] = fr * s_y_xxxy[j] + f2t * (s_0_xxxy[j] + s_y_xxx[j]);

                s_yy_xxxz[j] = fr * s_y_xxxz[j] + f2t * s_0_xxxz[j];

                s_yy_xxyy[j] = fr * s_y_xxyy[j] + f2t * (s_0_xxyy[j] + 2.0 * s_y_xxy[j]);

                s_yy_xxyz[j] = fr * s_y_xxyz[j] + f2t * (s_0_xxyz[j] + s_y_xxz[j]);

                s_yy_xxzz[j] = fr * s_y_xxzz[j] + f2t * s_0_xxzz[j];

                s_yy_xyyy[j] = fr * s_y_xyyy[j] + f2t * (s_0_xyyy[j] + 3.0 * s_y_xyy[j]);

                s_yy_xyyz[j] = fr * s_y_xyyz[j] + f2t * (s_0_xyyz[j] + 2.0 * s_y_xyz[j]);

                s_yy_xyzz[j] = fr * s_y_xyzz[j] + f2t * (s_0_xyzz[j] + s_y_xzz[j]);

                s_yy_xzzz[j] = fr * s_y_xzzz[j] + f2t * s_0_xzzz[j];

                s_yy_yyyy[j] = fr * s_y_yyyy[j] + f2t * (s_0_yyyy[j] + 4.0 * s_y_yyy[j]);

                s_yy_yyyz[j] = fr * s_y_yyyz[j] + f2t * (s_0_yyyz[j] + 3.0 * s_y_yyz[j]);

                s_yy_yyzz[j] = fr * s_y_yyzz[j] + f2t * (s_0_yyzz[j] + 2.0 * s_y_yzz[j]);

                s_yy_yzzz[j] = fr * s_y_yzzz[j] + f2t * (s_0_yzzz[j] + s_y_zzz[j]);

                s_yy_zzzz[j] = fr * s_y_zzzz[j] + f2t * s_0_zzzz[j];

                s_yz_xxxx[j] = fr * s_z_xxxx[j];

                s_yz_xxxy[j] = fr * s_z_xxxy[j] + f2t * s_z_xxx[j];

                s_yz_xxxz[j] = fr * s_z_xxxz[j];

                s_yz_xxyy[j] = fr * s_z_xxyy[j] + f2t * 2.0 * s_z_xxy[j];

                s_yz_xxyz[j] = fr * s_z_xxyz[j] + f2t * s_z_xxz[j];

                s_yz_xxzz[j] = fr * s_z_xxzz[j];

                s_yz_xyyy[j] = fr * s_z_xyyy[j] + f2t * 3.0 * s_z_xyy[j];

                s_yz_xyyz[j] = fr * s_z_xyyz[j] + f2t * 2.0 * s_z_xyz[j];

                s_yz_xyzz[j] = fr * s_z_xyzz[j] + f2t * s_z_xzz[j];

                s_yz_xzzz[j] = fr * s_z_xzzz[j];

                s_yz_yyyy[j] = fr * s_z_yyyy[j] + f2t * 4.0 * s_z_yyy[j];

                s_yz_yyyz[j] = fr * s_z_yyyz[j] + f2t * 3.0 * s_z_yyz[j];

                s_yz_yyzz[j] = fr * s_z_yyzz[j] + f2t * 2.0 * s_z_yzz[j];

                s_yz_yzzz[j] = fr * s_z_yzzz[j] + f2t * s_z_zzz[j];

                s_yz_zzzz[j] = fr * s_z_zzzz[j];

                // leading z component

                fr = paz[j];

                s_zz_xxxx[j] = fr * s_z_xxxx[j] + f2t * s_0_xxxx[j];

                s_zz_xxxy[j] = fr * s_z_xxxy[j] + f2t * s_0_xxxy[j];

                s_zz_xxxz[j] = fr * s_z_xxxz[j] + f2t * (s_0_xxxz[j] + s_z_xxx[j]);

                s_zz_xxyy[j] = fr * s_z_xxyy[j] + f2t * s_0_xxyy[j];

                s_zz_xxyz[j] = fr * s_z_xxyz[j] + f2t * (s_0_xxyz[j] + s_z_xxy[j]);

                s_zz_xxzz[j] = fr * s_z_xxzz[j] + f2t * (s_0_xxzz[j] + 2.0 * s_z_xxz[j]);

                s_zz_xyyy[j] = fr * s_z_xyyy[j] + f2t * s_0_xyyy[j];

                s_zz_xyyz[j] = fr * s_z_xyyz[j] + f2t * (s_0_xyyz[j] + s_z_xyy[j]);

                s_zz_xyzz[j] = fr * s_z_xyzz[j] + f2t * (s_0_xyzz[j] + 2.0 * s_z_xyz[j]);

                s_zz_xzzz[j] = fr * s_z_xzzz[j] + f2t * (s_0_xzzz[j] + 3.0 * s_z_xzz[j]);

                s_zz_yyyy[j] = fr * s_z_yyyy[j] + f2t * s_0_yyyy[j];

                s_zz_yyyz[j] = fr * s_z_yyyz[j] + f2t * (s_0_yyyz[j] + s_z_yyy[j]);

                s_zz_yyzz[j] = fr * s_z_yyzz[j] + f2t * (s_0_yyzz[j] + 2.0 * s_z_yyz[j]);

                s_zz_yzzz[j] = fr * s_z_yzzz[j] + f2t * (s_0_yzzz[j] + 3.0 * s_z_yzz[j]);

                s_zz_zzzz[j] = fr * s_z_zzzz[j] + f2t * (s_0_zzzz[j] + 4.0 * s_z_zzz[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxx_xxxx[j] = fr * dx_xx_xxxx[j] + f2t * (2.0 * dx_x_xxxx[j] + 4.0 * dx_xx_xxx[j] + s_xx_xxxx[j]);

                dy_xxx_xxxx[j] = fr * dy_xx_xxxx[j] + f2t * (2.0 * dy_x_xxxx[j] + 4.0 * dy_xx_xxx[j]);

                dz_xxx_xxxx[j] = fr * dz_xx_xxxx[j] + f2t * (2.0 * dz_x_xxxx[j] + 4.0 * dz_xx_xxx[j]);

                dx_xxx_xxxy[j] = fr * dx_xx_xxxy[j] + f2t * (2.0 * dx_x_xxxy[j] + 3.0 * dx_xx_xxy[j] + s_xx_xxxy[j]);

                dy_xxx_xxxy[j] = fr * dy_xx_xxxy[j] + f2t * (2.0 * dy_x_xxxy[j] + 3.0 * dy_xx_xxy[j]);

                dz_xxx_xxxy[j] = fr * dz_xx_xxxy[j] + f2t * (2.0 * dz_x_xxxy[j] + 3.0 * dz_xx_xxy[j]);

                dx_xxx_xxxz[j] = fr * dx_xx_xxxz[j] + f2t * (2.0 * dx_x_xxxz[j] + 3.0 * dx_xx_xxz[j] + s_xx_xxxz[j]);

                dy_xxx_xxxz[j] = fr * dy_xx_xxxz[j] + f2t * (2.0 * dy_x_xxxz[j] + 3.0 * dy_xx_xxz[j]);

                dz_xxx_xxxz[j] = fr * dz_xx_xxxz[j] + f2t * (2.0 * dz_x_xxxz[j] + 3.0 * dz_xx_xxz[j]);

                dx_xxx_xxyy[j] = fr * dx_xx_xxyy[j] + f2t * (2.0 * dx_x_xxyy[j] + 2.0 * dx_xx_xyy[j] + s_xx_xxyy[j]);

                dy_xxx_xxyy[j] = fr * dy_xx_xxyy[j] + f2t * (2.0 * dy_x_xxyy[j] + 2.0 * dy_xx_xyy[j]);

                dz_xxx_xxyy[j] = fr * dz_xx_xxyy[j] + f2t * (2.0 * dz_x_xxyy[j] + 2.0 * dz_xx_xyy[j]);

                dx_xxx_xxyz[j] = fr * dx_xx_xxyz[j] + f2t * (2.0 * dx_x_xxyz[j] + 2.0 * dx_xx_xyz[j] + s_xx_xxyz[j]);

                dy_xxx_xxyz[j] = fr * dy_xx_xxyz[j] + f2t * (2.0 * dy_x_xxyz[j] + 2.0 * dy_xx_xyz[j]);

                dz_xxx_xxyz[j] = fr * dz_xx_xxyz[j] + f2t * (2.0 * dz_x_xxyz[j] + 2.0 * dz_xx_xyz[j]);

                dx_xxx_xxzz[j] = fr * dx_xx_xxzz[j] + f2t * (2.0 * dx_x_xxzz[j] + 2.0 * dx_xx_xzz[j] + s_xx_xxzz[j]);

                dy_xxx_xxzz[j] = fr * dy_xx_xxzz[j] + f2t * (2.0 * dy_x_xxzz[j] + 2.0 * dy_xx_xzz[j]);

                dz_xxx_xxzz[j] = fr * dz_xx_xxzz[j] + f2t * (2.0 * dz_x_xxzz[j] + 2.0 * dz_xx_xzz[j]);

                dx_xxx_xyyy[j] = fr * dx_xx_xyyy[j] + f2t * (2.0 * dx_x_xyyy[j] + dx_xx_yyy[j] + s_xx_xyyy[j]);

                dy_xxx_xyyy[j] = fr * dy_xx_xyyy[j] + f2t * (2.0 * dy_x_xyyy[j] + dy_xx_yyy[j]);

                dz_xxx_xyyy[j] = fr * dz_xx_xyyy[j] + f2t * (2.0 * dz_x_xyyy[j] + dz_xx_yyy[j]);

                dx_xxx_xyyz[j] = fr * dx_xx_xyyz[j] + f2t * (2.0 * dx_x_xyyz[j] + dx_xx_yyz[j] + s_xx_xyyz[j]);

                dy_xxx_xyyz[j] = fr * dy_xx_xyyz[j] + f2t * (2.0 * dy_x_xyyz[j] + dy_xx_yyz[j]);

                dz_xxx_xyyz[j] = fr * dz_xx_xyyz[j] + f2t * (2.0 * dz_x_xyyz[j] + dz_xx_yyz[j]);

                dx_xxx_xyzz[j] = fr * dx_xx_xyzz[j] + f2t * (2.0 * dx_x_xyzz[j] + dx_xx_yzz[j] + s_xx_xyzz[j]);

                dy_xxx_xyzz[j] = fr * dy_xx_xyzz[j] + f2t * (2.0 * dy_x_xyzz[j] + dy_xx_yzz[j]);

                dz_xxx_xyzz[j] = fr * dz_xx_xyzz[j] + f2t * (2.0 * dz_x_xyzz[j] + dz_xx_yzz[j]);

                dx_xxx_xzzz[j] = fr * dx_xx_xzzz[j] + f2t * (2.0 * dx_x_xzzz[j] + dx_xx_zzz[j] + s_xx_xzzz[j]);

                dy_xxx_xzzz[j] = fr * dy_xx_xzzz[j] + f2t * (2.0 * dy_x_xzzz[j] + dy_xx_zzz[j]);

                dz_xxx_xzzz[j] = fr * dz_xx_xzzz[j] + f2t * (2.0 * dz_x_xzzz[j] + dz_xx_zzz[j]);

                dx_xxx_yyyy[j] = fr * dx_xx_yyyy[j] + f2t * (2.0 * dx_x_yyyy[j] + s_xx_yyyy[j]);

                dy_xxx_yyyy[j] = fr * dy_xx_yyyy[j] + f2t * 2.0 * dy_x_yyyy[j];

                dz_xxx_yyyy[j] = fr * dz_xx_yyyy[j] + f2t * 2.0 * dz_x_yyyy[j];

                dx_xxx_yyyz[j] = fr * dx_xx_yyyz[j] + f2t * (2.0 * dx_x_yyyz[j] + s_xx_yyyz[j]);

                dy_xxx_yyyz[j] = fr * dy_xx_yyyz[j] + f2t * 2.0 * dy_x_yyyz[j];

                dz_xxx_yyyz[j] = fr * dz_xx_yyyz[j] + f2t * 2.0 * dz_x_yyyz[j];

                dx_xxx_yyzz[j] = fr * dx_xx_yyzz[j] + f2t * (2.0 * dx_x_yyzz[j] + s_xx_yyzz[j]);

                dy_xxx_yyzz[j] = fr * dy_xx_yyzz[j] + f2t * 2.0 * dy_x_yyzz[j];

                dz_xxx_yyzz[j] = fr * dz_xx_yyzz[j] + f2t * 2.0 * dz_x_yyzz[j];

                dx_xxx_yzzz[j] = fr * dx_xx_yzzz[j] + f2t * (2.0 * dx_x_yzzz[j] + s_xx_yzzz[j]);

                dy_xxx_yzzz[j] = fr * dy_xx_yzzz[j] + f2t * 2.0 * dy_x_yzzz[j];

                dz_xxx_yzzz[j] = fr * dz_xx_yzzz[j] + f2t * 2.0 * dz_x_yzzz[j];

                dx_xxx_zzzz[j] = fr * dx_xx_zzzz[j] + f2t * (2.0 * dx_x_zzzz[j] + s_xx_zzzz[j]);

                dy_xxx_zzzz[j] = fr * dy_xx_zzzz[j] + f2t * 2.0 * dy_x_zzzz[j];

                dz_xxx_zzzz[j] = fr * dz_xx_zzzz[j] + f2t * 2.0 * dz_x_zzzz[j];

                dx_xxy_xxxx[j] = fr * dx_xy_xxxx[j] + f2t * (dx_y_xxxx[j] + 4.0 * dx_xy_xxx[j] + s_xy_xxxx[j]);

                dy_xxy_xxxx[j] = fr * dy_xy_xxxx[j] + f2t * (dy_y_xxxx[j] + 4.0 * dy_xy_xxx[j]);

                dz_xxy_xxxx[j] = fr * dz_xy_xxxx[j] + f2t * (dz_y_xxxx[j] + 4.0 * dz_xy_xxx[j]);

                dx_xxy_xxxy[j] = fr * dx_xy_xxxy[j] + f2t * (dx_y_xxxy[j] + 3.0 * dx_xy_xxy[j] + s_xy_xxxy[j]);

                dy_xxy_xxxy[j] = fr * dy_xy_xxxy[j] + f2t * (dy_y_xxxy[j] + 3.0 * dy_xy_xxy[j]);

                dz_xxy_xxxy[j] = fr * dz_xy_xxxy[j] + f2t * (dz_y_xxxy[j] + 3.0 * dz_xy_xxy[j]);

                dx_xxy_xxxz[j] = fr * dx_xy_xxxz[j] + f2t * (dx_y_xxxz[j] + 3.0 * dx_xy_xxz[j] + s_xy_xxxz[j]);

                dy_xxy_xxxz[j] = fr * dy_xy_xxxz[j] + f2t * (dy_y_xxxz[j] + 3.0 * dy_xy_xxz[j]);

                dz_xxy_xxxz[j] = fr * dz_xy_xxxz[j] + f2t * (dz_y_xxxz[j] + 3.0 * dz_xy_xxz[j]);

                dx_xxy_xxyy[j] = fr * dx_xy_xxyy[j] + f2t * (dx_y_xxyy[j] + 2.0 * dx_xy_xyy[j] + s_xy_xxyy[j]);

                dy_xxy_xxyy[j] = fr * dy_xy_xxyy[j] + f2t * (dy_y_xxyy[j] + 2.0 * dy_xy_xyy[j]);

                dz_xxy_xxyy[j] = fr * dz_xy_xxyy[j] + f2t * (dz_y_xxyy[j] + 2.0 * dz_xy_xyy[j]);

                dx_xxy_xxyz[j] = fr * dx_xy_xxyz[j] + f2t * (dx_y_xxyz[j] + 2.0 * dx_xy_xyz[j] + s_xy_xxyz[j]);

                dy_xxy_xxyz[j] = fr * dy_xy_xxyz[j] + f2t * (dy_y_xxyz[j] + 2.0 * dy_xy_xyz[j]);

                dz_xxy_xxyz[j] = fr * dz_xy_xxyz[j] + f2t * (dz_y_xxyz[j] + 2.0 * dz_xy_xyz[j]);

                dx_xxy_xxzz[j] = fr * dx_xy_xxzz[j] + f2t * (dx_y_xxzz[j] + 2.0 * dx_xy_xzz[j] + s_xy_xxzz[j]);

                dy_xxy_xxzz[j] = fr * dy_xy_xxzz[j] + f2t * (dy_y_xxzz[j] + 2.0 * dy_xy_xzz[j]);

                dz_xxy_xxzz[j] = fr * dz_xy_xxzz[j] + f2t * (dz_y_xxzz[j] + 2.0 * dz_xy_xzz[j]);

                dx_xxy_xyyy[j] = fr * dx_xy_xyyy[j] + f2t * (dx_y_xyyy[j] + dx_xy_yyy[j] + s_xy_xyyy[j]);

                dy_xxy_xyyy[j] = fr * dy_xy_xyyy[j] + f2t * (dy_y_xyyy[j] + dy_xy_yyy[j]);

                dz_xxy_xyyy[j] = fr * dz_xy_xyyy[j] + f2t * (dz_y_xyyy[j] + dz_xy_yyy[j]);

                dx_xxy_xyyz[j] = fr * dx_xy_xyyz[j] + f2t * (dx_y_xyyz[j] + dx_xy_yyz[j] + s_xy_xyyz[j]);

                dy_xxy_xyyz[j] = fr * dy_xy_xyyz[j] + f2t * (dy_y_xyyz[j] + dy_xy_yyz[j]);

                dz_xxy_xyyz[j] = fr * dz_xy_xyyz[j] + f2t * (dz_y_xyyz[j] + dz_xy_yyz[j]);

                dx_xxy_xyzz[j] = fr * dx_xy_xyzz[j] + f2t * (dx_y_xyzz[j] + dx_xy_yzz[j] + s_xy_xyzz[j]);

                dy_xxy_xyzz[j] = fr * dy_xy_xyzz[j] + f2t * (dy_y_xyzz[j] + dy_xy_yzz[j]);

                dz_xxy_xyzz[j] = fr * dz_xy_xyzz[j] + f2t * (dz_y_xyzz[j] + dz_xy_yzz[j]);

                dx_xxy_xzzz[j] = fr * dx_xy_xzzz[j] + f2t * (dx_y_xzzz[j] + dx_xy_zzz[j] + s_xy_xzzz[j]);

                dy_xxy_xzzz[j] = fr * dy_xy_xzzz[j] + f2t * (dy_y_xzzz[j] + dy_xy_zzz[j]);

                dz_xxy_xzzz[j] = fr * dz_xy_xzzz[j] + f2t * (dz_y_xzzz[j] + dz_xy_zzz[j]);

                dx_xxy_yyyy[j] = fr * dx_xy_yyyy[j] + f2t * (dx_y_yyyy[j] + s_xy_yyyy[j]);

                dy_xxy_yyyy[j] = fr * dy_xy_yyyy[j] + f2t * dy_y_yyyy[j];

                dz_xxy_yyyy[j] = fr * dz_xy_yyyy[j] + f2t * dz_y_yyyy[j];

                dx_xxy_yyyz[j] = fr * dx_xy_yyyz[j] + f2t * (dx_y_yyyz[j] + s_xy_yyyz[j]);

                dy_xxy_yyyz[j] = fr * dy_xy_yyyz[j] + f2t * dy_y_yyyz[j];

                dz_xxy_yyyz[j] = fr * dz_xy_yyyz[j] + f2t * dz_y_yyyz[j];

                dx_xxy_yyzz[j] = fr * dx_xy_yyzz[j] + f2t * (dx_y_yyzz[j] + s_xy_yyzz[j]);

                dy_xxy_yyzz[j] = fr * dy_xy_yyzz[j] + f2t * dy_y_yyzz[j];

                dz_xxy_yyzz[j] = fr * dz_xy_yyzz[j] + f2t * dz_y_yyzz[j];

                dx_xxy_yzzz[j] = fr * dx_xy_yzzz[j] + f2t * (dx_y_yzzz[j] + s_xy_yzzz[j]);

                dy_xxy_yzzz[j] = fr * dy_xy_yzzz[j] + f2t * dy_y_yzzz[j];

                dz_xxy_yzzz[j] = fr * dz_xy_yzzz[j] + f2t * dz_y_yzzz[j];

                dx_xxy_zzzz[j] = fr * dx_xy_zzzz[j] + f2t * (dx_y_zzzz[j] + s_xy_zzzz[j]);

                dy_xxy_zzzz[j] = fr * dy_xy_zzzz[j] + f2t * dy_y_zzzz[j];

                dz_xxy_zzzz[j] = fr * dz_xy_zzzz[j] + f2t * dz_y_zzzz[j];

                dx_xxz_xxxx[j] = fr * dx_xz_xxxx[j] + f2t * (dx_z_xxxx[j] + 4.0 * dx_xz_xxx[j] + s_xz_xxxx[j]);

                dy_xxz_xxxx[j] = fr * dy_xz_xxxx[j] + f2t * (dy_z_xxxx[j] + 4.0 * dy_xz_xxx[j]);

                dz_xxz_xxxx[j] = fr * dz_xz_xxxx[j] + f2t * (dz_z_xxxx[j] + 4.0 * dz_xz_xxx[j]);

                dx_xxz_xxxy[j] = fr * dx_xz_xxxy[j] + f2t * (dx_z_xxxy[j] + 3.0 * dx_xz_xxy[j] + s_xz_xxxy[j]);

                dy_xxz_xxxy[j] = fr * dy_xz_xxxy[j] + f2t * (dy_z_xxxy[j] + 3.0 * dy_xz_xxy[j]);

                dz_xxz_xxxy[j] = fr * dz_xz_xxxy[j] + f2t * (dz_z_xxxy[j] + 3.0 * dz_xz_xxy[j]);

                dx_xxz_xxxz[j] = fr * dx_xz_xxxz[j] + f2t * (dx_z_xxxz[j] + 3.0 * dx_xz_xxz[j] + s_xz_xxxz[j]);

                dy_xxz_xxxz[j] = fr * dy_xz_xxxz[j] + f2t * (dy_z_xxxz[j] + 3.0 * dy_xz_xxz[j]);

                dz_xxz_xxxz[j] = fr * dz_xz_xxxz[j] + f2t * (dz_z_xxxz[j] + 3.0 * dz_xz_xxz[j]);

                dx_xxz_xxyy[j] = fr * dx_xz_xxyy[j] + f2t * (dx_z_xxyy[j] + 2.0 * dx_xz_xyy[j] + s_xz_xxyy[j]);

                dy_xxz_xxyy[j] = fr * dy_xz_xxyy[j] + f2t * (dy_z_xxyy[j] + 2.0 * dy_xz_xyy[j]);

                dz_xxz_xxyy[j] = fr * dz_xz_xxyy[j] + f2t * (dz_z_xxyy[j] + 2.0 * dz_xz_xyy[j]);

                dx_xxz_xxyz[j] = fr * dx_xz_xxyz[j] + f2t * (dx_z_xxyz[j] + 2.0 * dx_xz_xyz[j] + s_xz_xxyz[j]);

                dy_xxz_xxyz[j] = fr * dy_xz_xxyz[j] + f2t * (dy_z_xxyz[j] + 2.0 * dy_xz_xyz[j]);

                dz_xxz_xxyz[j] = fr * dz_xz_xxyz[j] + f2t * (dz_z_xxyz[j] + 2.0 * dz_xz_xyz[j]);

                dx_xxz_xxzz[j] = fr * dx_xz_xxzz[j] + f2t * (dx_z_xxzz[j] + 2.0 * dx_xz_xzz[j] + s_xz_xxzz[j]);

                dy_xxz_xxzz[j] = fr * dy_xz_xxzz[j] + f2t * (dy_z_xxzz[j] + 2.0 * dy_xz_xzz[j]);

                dz_xxz_xxzz[j] = fr * dz_xz_xxzz[j] + f2t * (dz_z_xxzz[j] + 2.0 * dz_xz_xzz[j]);

                dx_xxz_xyyy[j] = fr * dx_xz_xyyy[j] + f2t * (dx_z_xyyy[j] + dx_xz_yyy[j] + s_xz_xyyy[j]);

                dy_xxz_xyyy[j] = fr * dy_xz_xyyy[j] + f2t * (dy_z_xyyy[j] + dy_xz_yyy[j]);

                dz_xxz_xyyy[j] = fr * dz_xz_xyyy[j] + f2t * (dz_z_xyyy[j] + dz_xz_yyy[j]);

                dx_xxz_xyyz[j] = fr * dx_xz_xyyz[j] + f2t * (dx_z_xyyz[j] + dx_xz_yyz[j] + s_xz_xyyz[j]);

                dy_xxz_xyyz[j] = fr * dy_xz_xyyz[j] + f2t * (dy_z_xyyz[j] + dy_xz_yyz[j]);

                dz_xxz_xyyz[j] = fr * dz_xz_xyyz[j] + f2t * (dz_z_xyyz[j] + dz_xz_yyz[j]);

                dx_xxz_xyzz[j] = fr * dx_xz_xyzz[j] + f2t * (dx_z_xyzz[j] + dx_xz_yzz[j] + s_xz_xyzz[j]);

                dy_xxz_xyzz[j] = fr * dy_xz_xyzz[j] + f2t * (dy_z_xyzz[j] + dy_xz_yzz[j]);

                dz_xxz_xyzz[j] = fr * dz_xz_xyzz[j] + f2t * (dz_z_xyzz[j] + dz_xz_yzz[j]);

                dx_xxz_xzzz[j] = fr * dx_xz_xzzz[j] + f2t * (dx_z_xzzz[j] + dx_xz_zzz[j] + s_xz_xzzz[j]);

                dy_xxz_xzzz[j] = fr * dy_xz_xzzz[j] + f2t * (dy_z_xzzz[j] + dy_xz_zzz[j]);

                dz_xxz_xzzz[j] = fr * dz_xz_xzzz[j] + f2t * (dz_z_xzzz[j] + dz_xz_zzz[j]);

                dx_xxz_yyyy[j] = fr * dx_xz_yyyy[j] + f2t * (dx_z_yyyy[j] + s_xz_yyyy[j]);

                dy_xxz_yyyy[j] = fr * dy_xz_yyyy[j] + f2t * dy_z_yyyy[j];

                dz_xxz_yyyy[j] = fr * dz_xz_yyyy[j] + f2t * dz_z_yyyy[j];

                dx_xxz_yyyz[j] = fr * dx_xz_yyyz[j] + f2t * (dx_z_yyyz[j] + s_xz_yyyz[j]);

                dy_xxz_yyyz[j] = fr * dy_xz_yyyz[j] + f2t * dy_z_yyyz[j];

                dz_xxz_yyyz[j] = fr * dz_xz_yyyz[j] + f2t * dz_z_yyyz[j];

                dx_xxz_yyzz[j] = fr * dx_xz_yyzz[j] + f2t * (dx_z_yyzz[j] + s_xz_yyzz[j]);

                dy_xxz_yyzz[j] = fr * dy_xz_yyzz[j] + f2t * dy_z_yyzz[j];

                dz_xxz_yyzz[j] = fr * dz_xz_yyzz[j] + f2t * dz_z_yyzz[j];

                dx_xxz_yzzz[j] = fr * dx_xz_yzzz[j] + f2t * (dx_z_yzzz[j] + s_xz_yzzz[j]);

                dy_xxz_yzzz[j] = fr * dy_xz_yzzz[j] + f2t * dy_z_yzzz[j];

                dz_xxz_yzzz[j] = fr * dz_xz_yzzz[j] + f2t * dz_z_yzzz[j];

                dx_xxz_zzzz[j] = fr * dx_xz_zzzz[j] + f2t * (dx_z_zzzz[j] + s_xz_zzzz[j]);

                dy_xxz_zzzz[j] = fr * dy_xz_zzzz[j] + f2t * dy_z_zzzz[j];

                dz_xxz_zzzz[j] = fr * dz_xz_zzzz[j] + f2t * dz_z_zzzz[j];

                dx_xyy_xxxx[j] = fr * dx_yy_xxxx[j] + f2t * (4.0 * dx_yy_xxx[j] + s_yy_xxxx[j]);

                dy_xyy_xxxx[j] = fr * dy_yy_xxxx[j] + f2t * 4.0 * dy_yy_xxx[j];

                dz_xyy_xxxx[j] = fr * dz_yy_xxxx[j] + f2t * 4.0 * dz_yy_xxx[j];

                dx_xyy_xxxy[j] = fr * dx_yy_xxxy[j] + f2t * (3.0 * dx_yy_xxy[j] + s_yy_xxxy[j]);

                dy_xyy_xxxy[j] = fr * dy_yy_xxxy[j] + f2t * 3.0 * dy_yy_xxy[j];

                dz_xyy_xxxy[j] = fr * dz_yy_xxxy[j] + f2t * 3.0 * dz_yy_xxy[j];

                dx_xyy_xxxz[j] = fr * dx_yy_xxxz[j] + f2t * (3.0 * dx_yy_xxz[j] + s_yy_xxxz[j]);

                dy_xyy_xxxz[j] = fr * dy_yy_xxxz[j] + f2t * 3.0 * dy_yy_xxz[j];

                dz_xyy_xxxz[j] = fr * dz_yy_xxxz[j] + f2t * 3.0 * dz_yy_xxz[j];

                dx_xyy_xxyy[j] = fr * dx_yy_xxyy[j] + f2t * (2.0 * dx_yy_xyy[j] + s_yy_xxyy[j]);

                dy_xyy_xxyy[j] = fr * dy_yy_xxyy[j] + f2t * 2.0 * dy_yy_xyy[j];

                dz_xyy_xxyy[j] = fr * dz_yy_xxyy[j] + f2t * 2.0 * dz_yy_xyy[j];

                dx_xyy_xxyz[j] = fr * dx_yy_xxyz[j] + f2t * (2.0 * dx_yy_xyz[j] + s_yy_xxyz[j]);

                dy_xyy_xxyz[j] = fr * dy_yy_xxyz[j] + f2t * 2.0 * dy_yy_xyz[j];

                dz_xyy_xxyz[j] = fr * dz_yy_xxyz[j] + f2t * 2.0 * dz_yy_xyz[j];

                dx_xyy_xxzz[j] = fr * dx_yy_xxzz[j] + f2t * (2.0 * dx_yy_xzz[j] + s_yy_xxzz[j]);

                dy_xyy_xxzz[j] = fr * dy_yy_xxzz[j] + f2t * 2.0 * dy_yy_xzz[j];

                dz_xyy_xxzz[j] = fr * dz_yy_xxzz[j] + f2t * 2.0 * dz_yy_xzz[j];

                dx_xyy_xyyy[j] = fr * dx_yy_xyyy[j] + f2t * (dx_yy_yyy[j] + s_yy_xyyy[j]);

                dy_xyy_xyyy[j] = fr * dy_yy_xyyy[j] + f2t * dy_yy_yyy[j];

                dz_xyy_xyyy[j] = fr * dz_yy_xyyy[j] + f2t * dz_yy_yyy[j];

                dx_xyy_xyyz[j] = fr * dx_yy_xyyz[j] + f2t * (dx_yy_yyz[j] + s_yy_xyyz[j]);

                dy_xyy_xyyz[j] = fr * dy_yy_xyyz[j] + f2t * dy_yy_yyz[j];

                dz_xyy_xyyz[j] = fr * dz_yy_xyyz[j] + f2t * dz_yy_yyz[j];

                dx_xyy_xyzz[j] = fr * dx_yy_xyzz[j] + f2t * (dx_yy_yzz[j] + s_yy_xyzz[j]);

                dy_xyy_xyzz[j] = fr * dy_yy_xyzz[j] + f2t * dy_yy_yzz[j];

                dz_xyy_xyzz[j] = fr * dz_yy_xyzz[j] + f2t * dz_yy_yzz[j];

                dx_xyy_xzzz[j] = fr * dx_yy_xzzz[j] + f2t * (dx_yy_zzz[j] + s_yy_xzzz[j]);

                dy_xyy_xzzz[j] = fr * dy_yy_xzzz[j] + f2t * dy_yy_zzz[j];

                dz_xyy_xzzz[j] = fr * dz_yy_xzzz[j] + f2t * dz_yy_zzz[j];

                dx_xyy_yyyy[j] = fr * dx_yy_yyyy[j] + f2t * s_yy_yyyy[j];

                dy_xyy_yyyy[j] = fr * dy_yy_yyyy[j];

                dz_xyy_yyyy[j] = fr * dz_yy_yyyy[j];

                dx_xyy_yyyz[j] = fr * dx_yy_yyyz[j] + f2t * s_yy_yyyz[j];

                dy_xyy_yyyz[j] = fr * dy_yy_yyyz[j];

                dz_xyy_yyyz[j] = fr * dz_yy_yyyz[j];

                dx_xyy_yyzz[j] = fr * dx_yy_yyzz[j] + f2t * s_yy_yyzz[j];

                dy_xyy_yyzz[j] = fr * dy_yy_yyzz[j];

                dz_xyy_yyzz[j] = fr * dz_yy_yyzz[j];

                dx_xyy_yzzz[j] = fr * dx_yy_yzzz[j] + f2t * s_yy_yzzz[j];

                dy_xyy_yzzz[j] = fr * dy_yy_yzzz[j];

                dz_xyy_yzzz[j] = fr * dz_yy_yzzz[j];

                dx_xyy_zzzz[j] = fr * dx_yy_zzzz[j] + f2t * s_yy_zzzz[j];

                dy_xyy_zzzz[j] = fr * dy_yy_zzzz[j];

                dz_xyy_zzzz[j] = fr * dz_yy_zzzz[j];

                dx_xyz_xxxx[j] = fr * dx_yz_xxxx[j] + f2t * (4.0 * dx_yz_xxx[j] + s_yz_xxxx[j]);

                dy_xyz_xxxx[j] = fr * dy_yz_xxxx[j] + f2t * 4.0 * dy_yz_xxx[j];

                dz_xyz_xxxx[j] = fr * dz_yz_xxxx[j] + f2t * 4.0 * dz_yz_xxx[j];

                dx_xyz_xxxy[j] = fr * dx_yz_xxxy[j] + f2t * (3.0 * dx_yz_xxy[j] + s_yz_xxxy[j]);

                dy_xyz_xxxy[j] = fr * dy_yz_xxxy[j] + f2t * 3.0 * dy_yz_xxy[j];

                dz_xyz_xxxy[j] = fr * dz_yz_xxxy[j] + f2t * 3.0 * dz_yz_xxy[j];

                dx_xyz_xxxz[j] = fr * dx_yz_xxxz[j] + f2t * (3.0 * dx_yz_xxz[j] + s_yz_xxxz[j]);

                dy_xyz_xxxz[j] = fr * dy_yz_xxxz[j] + f2t * 3.0 * dy_yz_xxz[j];

                dz_xyz_xxxz[j] = fr * dz_yz_xxxz[j] + f2t * 3.0 * dz_yz_xxz[j];

                dx_xyz_xxyy[j] = fr * dx_yz_xxyy[j] + f2t * (2.0 * dx_yz_xyy[j] + s_yz_xxyy[j]);

                dy_xyz_xxyy[j] = fr * dy_yz_xxyy[j] + f2t * 2.0 * dy_yz_xyy[j];

                dz_xyz_xxyy[j] = fr * dz_yz_xxyy[j] + f2t * 2.0 * dz_yz_xyy[j];

                dx_xyz_xxyz[j] = fr * dx_yz_xxyz[j] + f2t * (2.0 * dx_yz_xyz[j] + s_yz_xxyz[j]);

                dy_xyz_xxyz[j] = fr * dy_yz_xxyz[j] + f2t * 2.0 * dy_yz_xyz[j];

                dz_xyz_xxyz[j] = fr * dz_yz_xxyz[j] + f2t * 2.0 * dz_yz_xyz[j];

                dx_xyz_xxzz[j] = fr * dx_yz_xxzz[j] + f2t * (2.0 * dx_yz_xzz[j] + s_yz_xxzz[j]);

                dy_xyz_xxzz[j] = fr * dy_yz_xxzz[j] + f2t * 2.0 * dy_yz_xzz[j];

                dz_xyz_xxzz[j] = fr * dz_yz_xxzz[j] + f2t * 2.0 * dz_yz_xzz[j];

                dx_xyz_xyyy[j] = fr * dx_yz_xyyy[j] + f2t * (dx_yz_yyy[j] + s_yz_xyyy[j]);

                dy_xyz_xyyy[j] = fr * dy_yz_xyyy[j] + f2t * dy_yz_yyy[j];

                dz_xyz_xyyy[j] = fr * dz_yz_xyyy[j] + f2t * dz_yz_yyy[j];

                dx_xyz_xyyz[j] = fr * dx_yz_xyyz[j] + f2t * (dx_yz_yyz[j] + s_yz_xyyz[j]);

                dy_xyz_xyyz[j] = fr * dy_yz_xyyz[j] + f2t * dy_yz_yyz[j];

                dz_xyz_xyyz[j] = fr * dz_yz_xyyz[j] + f2t * dz_yz_yyz[j];

                dx_xyz_xyzz[j] = fr * dx_yz_xyzz[j] + f2t * (dx_yz_yzz[j] + s_yz_xyzz[j]);

                dy_xyz_xyzz[j] = fr * dy_yz_xyzz[j] + f2t * dy_yz_yzz[j];

                dz_xyz_xyzz[j] = fr * dz_yz_xyzz[j] + f2t * dz_yz_yzz[j];

                dx_xyz_xzzz[j] = fr * dx_yz_xzzz[j] + f2t * (dx_yz_zzz[j] + s_yz_xzzz[j]);

                dy_xyz_xzzz[j] = fr * dy_yz_xzzz[j] + f2t * dy_yz_zzz[j];

                dz_xyz_xzzz[j] = fr * dz_yz_xzzz[j] + f2t * dz_yz_zzz[j];

                dx_xyz_yyyy[j] = fr * dx_yz_yyyy[j] + f2t * s_yz_yyyy[j];

                dy_xyz_yyyy[j] = fr * dy_yz_yyyy[j];

                dz_xyz_yyyy[j] = fr * dz_yz_yyyy[j];

                dx_xyz_yyyz[j] = fr * dx_yz_yyyz[j] + f2t * s_yz_yyyz[j];

                dy_xyz_yyyz[j] = fr * dy_yz_yyyz[j];

                dz_xyz_yyyz[j] = fr * dz_yz_yyyz[j];

                dx_xyz_yyzz[j] = fr * dx_yz_yyzz[j] + f2t * s_yz_yyzz[j];

                dy_xyz_yyzz[j] = fr * dy_yz_yyzz[j];

                dz_xyz_yyzz[j] = fr * dz_yz_yyzz[j];

                dx_xyz_yzzz[j] = fr * dx_yz_yzzz[j] + f2t * s_yz_yzzz[j];

                dy_xyz_yzzz[j] = fr * dy_yz_yzzz[j];

                dz_xyz_yzzz[j] = fr * dz_yz_yzzz[j];

                dx_xyz_zzzz[j] = fr * dx_yz_zzzz[j] + f2t * s_yz_zzzz[j];

                dy_xyz_zzzz[j] = fr * dy_yz_zzzz[j];

                dz_xyz_zzzz[j] = fr * dz_yz_zzzz[j];

                dx_xzz_xxxx[j] = fr * dx_zz_xxxx[j] + f2t * (4.0 * dx_zz_xxx[j] + s_zz_xxxx[j]);

                dy_xzz_xxxx[j] = fr * dy_zz_xxxx[j] + f2t * 4.0 * dy_zz_xxx[j];

                dz_xzz_xxxx[j] = fr * dz_zz_xxxx[j] + f2t * 4.0 * dz_zz_xxx[j];

                dx_xzz_xxxy[j] = fr * dx_zz_xxxy[j] + f2t * (3.0 * dx_zz_xxy[j] + s_zz_xxxy[j]);

                dy_xzz_xxxy[j] = fr * dy_zz_xxxy[j] + f2t * 3.0 * dy_zz_xxy[j];

                dz_xzz_xxxy[j] = fr * dz_zz_xxxy[j] + f2t * 3.0 * dz_zz_xxy[j];

                dx_xzz_xxxz[j] = fr * dx_zz_xxxz[j] + f2t * (3.0 * dx_zz_xxz[j] + s_zz_xxxz[j]);

                dy_xzz_xxxz[j] = fr * dy_zz_xxxz[j] + f2t * 3.0 * dy_zz_xxz[j];

                dz_xzz_xxxz[j] = fr * dz_zz_xxxz[j] + f2t * 3.0 * dz_zz_xxz[j];

                dx_xzz_xxyy[j] = fr * dx_zz_xxyy[j] + f2t * (2.0 * dx_zz_xyy[j] + s_zz_xxyy[j]);

                dy_xzz_xxyy[j] = fr * dy_zz_xxyy[j] + f2t * 2.0 * dy_zz_xyy[j];

                dz_xzz_xxyy[j] = fr * dz_zz_xxyy[j] + f2t * 2.0 * dz_zz_xyy[j];

                dx_xzz_xxyz[j] = fr * dx_zz_xxyz[j] + f2t * (2.0 * dx_zz_xyz[j] + s_zz_xxyz[j]);

                dy_xzz_xxyz[j] = fr * dy_zz_xxyz[j] + f2t * 2.0 * dy_zz_xyz[j];

                dz_xzz_xxyz[j] = fr * dz_zz_xxyz[j] + f2t * 2.0 * dz_zz_xyz[j];

                dx_xzz_xxzz[j] = fr * dx_zz_xxzz[j] + f2t * (2.0 * dx_zz_xzz[j] + s_zz_xxzz[j]);

                dy_xzz_xxzz[j] = fr * dy_zz_xxzz[j] + f2t * 2.0 * dy_zz_xzz[j];

                dz_xzz_xxzz[j] = fr * dz_zz_xxzz[j] + f2t * 2.0 * dz_zz_xzz[j];

                dx_xzz_xyyy[j] = fr * dx_zz_xyyy[j] + f2t * (dx_zz_yyy[j] + s_zz_xyyy[j]);

                dy_xzz_xyyy[j] = fr * dy_zz_xyyy[j] + f2t * dy_zz_yyy[j];

                dz_xzz_xyyy[j] = fr * dz_zz_xyyy[j] + f2t * dz_zz_yyy[j];

                dx_xzz_xyyz[j] = fr * dx_zz_xyyz[j] + f2t * (dx_zz_yyz[j] + s_zz_xyyz[j]);

                dy_xzz_xyyz[j] = fr * dy_zz_xyyz[j] + f2t * dy_zz_yyz[j];

                dz_xzz_xyyz[j] = fr * dz_zz_xyyz[j] + f2t * dz_zz_yyz[j];

                dx_xzz_xyzz[j] = fr * dx_zz_xyzz[j] + f2t * (dx_zz_yzz[j] + s_zz_xyzz[j]);

                dy_xzz_xyzz[j] = fr * dy_zz_xyzz[j] + f2t * dy_zz_yzz[j];

                dz_xzz_xyzz[j] = fr * dz_zz_xyzz[j] + f2t * dz_zz_yzz[j];

                dx_xzz_xzzz[j] = fr * dx_zz_xzzz[j] + f2t * (dx_zz_zzz[j] + s_zz_xzzz[j]);

                dy_xzz_xzzz[j] = fr * dy_zz_xzzz[j] + f2t * dy_zz_zzz[j];

                dz_xzz_xzzz[j] = fr * dz_zz_xzzz[j] + f2t * dz_zz_zzz[j];

                dx_xzz_yyyy[j] = fr * dx_zz_yyyy[j] + f2t * s_zz_yyyy[j];

                dy_xzz_yyyy[j] = fr * dy_zz_yyyy[j];

                dz_xzz_yyyy[j] = fr * dz_zz_yyyy[j];

                dx_xzz_yyyz[j] = fr * dx_zz_yyyz[j] + f2t * s_zz_yyyz[j];

                dy_xzz_yyyz[j] = fr * dy_zz_yyyz[j];

                dz_xzz_yyyz[j] = fr * dz_zz_yyyz[j];

                dx_xzz_yyzz[j] = fr * dx_zz_yyzz[j] + f2t * s_zz_yyzz[j];

                dy_xzz_yyzz[j] = fr * dy_zz_yyzz[j];

                dz_xzz_yyzz[j] = fr * dz_zz_yyzz[j];

                dx_xzz_yzzz[j] = fr * dx_zz_yzzz[j] + f2t * s_zz_yzzz[j];

                dy_xzz_yzzz[j] = fr * dy_zz_yzzz[j];

                dz_xzz_yzzz[j] = fr * dz_zz_yzzz[j];

                dx_xzz_zzzz[j] = fr * dx_zz_zzzz[j] + f2t * s_zz_zzzz[j];

                dy_xzz_zzzz[j] = fr * dy_zz_zzzz[j];

                dz_xzz_zzzz[j] = fr * dz_zz_zzzz[j];

                // leading y component

                fr = pay[j];

                dx_yyy_xxxx[j] = fr * dx_yy_xxxx[j] + f2t * 2.0 * dx_y_xxxx[j];

                dy_yyy_xxxx[j] = fr * dy_yy_xxxx[j] + f2t * (2.0 * dy_y_xxxx[j] + s_yy_xxxx[j]);

                dz_yyy_xxxx[j] = fr * dz_yy_xxxx[j] + f2t * 2.0 * dz_y_xxxx[j];

                dx_yyy_xxxy[j] = fr * dx_yy_xxxy[j] + f2t * (2.0 * dx_y_xxxy[j] + dx_yy_xxx[j]);

                dy_yyy_xxxy[j] = fr * dy_yy_xxxy[j] + f2t * (2.0 * dy_y_xxxy[j] + dy_yy_xxx[j] + s_yy_xxxy[j]);

                dz_yyy_xxxy[j] = fr * dz_yy_xxxy[j] + f2t * (2.0 * dz_y_xxxy[j] + dz_yy_xxx[j]);

                dx_yyy_xxxz[j] = fr * dx_yy_xxxz[j] + f2t * 2.0 * dx_y_xxxz[j];

                dy_yyy_xxxz[j] = fr * dy_yy_xxxz[j] + f2t * (2.0 * dy_y_xxxz[j] + s_yy_xxxz[j]);

                dz_yyy_xxxz[j] = fr * dz_yy_xxxz[j] + f2t * 2.0 * dz_y_xxxz[j];

                dx_yyy_xxyy[j] = fr * dx_yy_xxyy[j] + f2t * (2.0 * dx_y_xxyy[j] + 2.0 * dx_yy_xxy[j]);

                dy_yyy_xxyy[j] = fr * dy_yy_xxyy[j] + f2t * (2.0 * dy_y_xxyy[j] + 2.0 * dy_yy_xxy[j] + s_yy_xxyy[j]);

                dz_yyy_xxyy[j] = fr * dz_yy_xxyy[j] + f2t * (2.0 * dz_y_xxyy[j] + 2.0 * dz_yy_xxy[j]);

                dx_yyy_xxyz[j] = fr * dx_yy_xxyz[j] + f2t * (2.0 * dx_y_xxyz[j] + dx_yy_xxz[j]);

                dy_yyy_xxyz[j] = fr * dy_yy_xxyz[j] + f2t * (2.0 * dy_y_xxyz[j] + dy_yy_xxz[j] + s_yy_xxyz[j]);

                dz_yyy_xxyz[j] = fr * dz_yy_xxyz[j] + f2t * (2.0 * dz_y_xxyz[j] + dz_yy_xxz[j]);

                dx_yyy_xxzz[j] = fr * dx_yy_xxzz[j] + f2t * 2.0 * dx_y_xxzz[j];

                dy_yyy_xxzz[j] = fr * dy_yy_xxzz[j] + f2t * (2.0 * dy_y_xxzz[j] + s_yy_xxzz[j]);

                dz_yyy_xxzz[j] = fr * dz_yy_xxzz[j] + f2t * 2.0 * dz_y_xxzz[j];

                dx_yyy_xyyy[j] = fr * dx_yy_xyyy[j] + f2t * (2.0 * dx_y_xyyy[j] + 3.0 * dx_yy_xyy[j]);

                dy_yyy_xyyy[j] = fr * dy_yy_xyyy[j] + f2t * (2.0 * dy_y_xyyy[j] + 3.0 * dy_yy_xyy[j] + s_yy_xyyy[j]);

                dz_yyy_xyyy[j] = fr * dz_yy_xyyy[j] + f2t * (2.0 * dz_y_xyyy[j] + 3.0 * dz_yy_xyy[j]);

                dx_yyy_xyyz[j] = fr * dx_yy_xyyz[j] + f2t * (2.0 * dx_y_xyyz[j] + 2.0 * dx_yy_xyz[j]);

                dy_yyy_xyyz[j] = fr * dy_yy_xyyz[j] + f2t * (2.0 * dy_y_xyyz[j] + 2.0 * dy_yy_xyz[j] + s_yy_xyyz[j]);

                dz_yyy_xyyz[j] = fr * dz_yy_xyyz[j] + f2t * (2.0 * dz_y_xyyz[j] + 2.0 * dz_yy_xyz[j]);

                dx_yyy_xyzz[j] = fr * dx_yy_xyzz[j] + f2t * (2.0 * dx_y_xyzz[j] + dx_yy_xzz[j]);

                dy_yyy_xyzz[j] = fr * dy_yy_xyzz[j] + f2t * (2.0 * dy_y_xyzz[j] + dy_yy_xzz[j] + s_yy_xyzz[j]);

                dz_yyy_xyzz[j] = fr * dz_yy_xyzz[j] + f2t * (2.0 * dz_y_xyzz[j] + dz_yy_xzz[j]);

                dx_yyy_xzzz[j] = fr * dx_yy_xzzz[j] + f2t * 2.0 * dx_y_xzzz[j];

                dy_yyy_xzzz[j] = fr * dy_yy_xzzz[j] + f2t * (2.0 * dy_y_xzzz[j] + s_yy_xzzz[j]);

                dz_yyy_xzzz[j] = fr * dz_yy_xzzz[j] + f2t * 2.0 * dz_y_xzzz[j];

                dx_yyy_yyyy[j] = fr * dx_yy_yyyy[j] + f2t * (2.0 * dx_y_yyyy[j] + 4.0 * dx_yy_yyy[j]);

                dy_yyy_yyyy[j] = fr * dy_yy_yyyy[j] + f2t * (2.0 * dy_y_yyyy[j] + 4.0 * dy_yy_yyy[j] + s_yy_yyyy[j]);

                dz_yyy_yyyy[j] = fr * dz_yy_yyyy[j] + f2t * (2.0 * dz_y_yyyy[j] + 4.0 * dz_yy_yyy[j]);

                dx_yyy_yyyz[j] = fr * dx_yy_yyyz[j] + f2t * (2.0 * dx_y_yyyz[j] + 3.0 * dx_yy_yyz[j]);

                dy_yyy_yyyz[j] = fr * dy_yy_yyyz[j] + f2t * (2.0 * dy_y_yyyz[j] + 3.0 * dy_yy_yyz[j] + s_yy_yyyz[j]);

                dz_yyy_yyyz[j] = fr * dz_yy_yyyz[j] + f2t * (2.0 * dz_y_yyyz[j] + 3.0 * dz_yy_yyz[j]);

                dx_yyy_yyzz[j] = fr * dx_yy_yyzz[j] + f2t * (2.0 * dx_y_yyzz[j] + 2.0 * dx_yy_yzz[j]);

                dy_yyy_yyzz[j] = fr * dy_yy_yyzz[j] + f2t * (2.0 * dy_y_yyzz[j] + 2.0 * dy_yy_yzz[j] + s_yy_yyzz[j]);

                dz_yyy_yyzz[j] = fr * dz_yy_yyzz[j] + f2t * (2.0 * dz_y_yyzz[j] + 2.0 * dz_yy_yzz[j]);

                dx_yyy_yzzz[j] = fr * dx_yy_yzzz[j] + f2t * (2.0 * dx_y_yzzz[j] + dx_yy_zzz[j]);

                dy_yyy_yzzz[j] = fr * dy_yy_yzzz[j] + f2t * (2.0 * dy_y_yzzz[j] + dy_yy_zzz[j] + s_yy_yzzz[j]);

                dz_yyy_yzzz[j] = fr * dz_yy_yzzz[j] + f2t * (2.0 * dz_y_yzzz[j] + dz_yy_zzz[j]);

                dx_yyy_zzzz[j] = fr * dx_yy_zzzz[j] + f2t * 2.0 * dx_y_zzzz[j];

                dy_yyy_zzzz[j] = fr * dy_yy_zzzz[j] + f2t * (2.0 * dy_y_zzzz[j] + s_yy_zzzz[j]);

                dz_yyy_zzzz[j] = fr * dz_yy_zzzz[j] + f2t * 2.0 * dz_y_zzzz[j];

                dx_yyz_xxxx[j] = fr * dx_yz_xxxx[j] + f2t * dx_z_xxxx[j];

                dy_yyz_xxxx[j] = fr * dy_yz_xxxx[j] + f2t * (dy_z_xxxx[j] + s_yz_xxxx[j]);

                dz_yyz_xxxx[j] = fr * dz_yz_xxxx[j] + f2t * dz_z_xxxx[j];

                dx_yyz_xxxy[j] = fr * dx_yz_xxxy[j] + f2t * (dx_z_xxxy[j] + dx_yz_xxx[j]);

                dy_yyz_xxxy[j] = fr * dy_yz_xxxy[j] + f2t * (dy_z_xxxy[j] + dy_yz_xxx[j] + s_yz_xxxy[j]);

                dz_yyz_xxxy[j] = fr * dz_yz_xxxy[j] + f2t * (dz_z_xxxy[j] + dz_yz_xxx[j]);

                dx_yyz_xxxz[j] = fr * dx_yz_xxxz[j] + f2t * dx_z_xxxz[j];

                dy_yyz_xxxz[j] = fr * dy_yz_xxxz[j] + f2t * (dy_z_xxxz[j] + s_yz_xxxz[j]);

                dz_yyz_xxxz[j] = fr * dz_yz_xxxz[j] + f2t * dz_z_xxxz[j];

                dx_yyz_xxyy[j] = fr * dx_yz_xxyy[j] + f2t * (dx_z_xxyy[j] + 2.0 * dx_yz_xxy[j]);

                dy_yyz_xxyy[j] = fr * dy_yz_xxyy[j] + f2t * (dy_z_xxyy[j] + 2.0 * dy_yz_xxy[j] + s_yz_xxyy[j]);

                dz_yyz_xxyy[j] = fr * dz_yz_xxyy[j] + f2t * (dz_z_xxyy[j] + 2.0 * dz_yz_xxy[j]);

                dx_yyz_xxyz[j] = fr * dx_yz_xxyz[j] + f2t * (dx_z_xxyz[j] + dx_yz_xxz[j]);

                dy_yyz_xxyz[j] = fr * dy_yz_xxyz[j] + f2t * (dy_z_xxyz[j] + dy_yz_xxz[j] + s_yz_xxyz[j]);

                dz_yyz_xxyz[j] = fr * dz_yz_xxyz[j] + f2t * (dz_z_xxyz[j] + dz_yz_xxz[j]);

                dx_yyz_xxzz[j] = fr * dx_yz_xxzz[j] + f2t * dx_z_xxzz[j];

                dy_yyz_xxzz[j] = fr * dy_yz_xxzz[j] + f2t * (dy_z_xxzz[j] + s_yz_xxzz[j]);

                dz_yyz_xxzz[j] = fr * dz_yz_xxzz[j] + f2t * dz_z_xxzz[j];

                dx_yyz_xyyy[j] = fr * dx_yz_xyyy[j] + f2t * (dx_z_xyyy[j] + 3.0 * dx_yz_xyy[j]);

                dy_yyz_xyyy[j] = fr * dy_yz_xyyy[j] + f2t * (dy_z_xyyy[j] + 3.0 * dy_yz_xyy[j] + s_yz_xyyy[j]);

                dz_yyz_xyyy[j] = fr * dz_yz_xyyy[j] + f2t * (dz_z_xyyy[j] + 3.0 * dz_yz_xyy[j]);

                dx_yyz_xyyz[j] = fr * dx_yz_xyyz[j] + f2t * (dx_z_xyyz[j] + 2.0 * dx_yz_xyz[j]);

                dy_yyz_xyyz[j] = fr * dy_yz_xyyz[j] + f2t * (dy_z_xyyz[j] + 2.0 * dy_yz_xyz[j] + s_yz_xyyz[j]);

                dz_yyz_xyyz[j] = fr * dz_yz_xyyz[j] + f2t * (dz_z_xyyz[j] + 2.0 * dz_yz_xyz[j]);

                dx_yyz_xyzz[j] = fr * dx_yz_xyzz[j] + f2t * (dx_z_xyzz[j] + dx_yz_xzz[j]);

                dy_yyz_xyzz[j] = fr * dy_yz_xyzz[j] + f2t * (dy_z_xyzz[j] + dy_yz_xzz[j] + s_yz_xyzz[j]);

                dz_yyz_xyzz[j] = fr * dz_yz_xyzz[j] + f2t * (dz_z_xyzz[j] + dz_yz_xzz[j]);

                dx_yyz_xzzz[j] = fr * dx_yz_xzzz[j] + f2t * dx_z_xzzz[j];

                dy_yyz_xzzz[j] = fr * dy_yz_xzzz[j] + f2t * (dy_z_xzzz[j] + s_yz_xzzz[j]);

                dz_yyz_xzzz[j] = fr * dz_yz_xzzz[j] + f2t * dz_z_xzzz[j];

                dx_yyz_yyyy[j] = fr * dx_yz_yyyy[j] + f2t * (dx_z_yyyy[j] + 4.0 * dx_yz_yyy[j]);

                dy_yyz_yyyy[j] = fr * dy_yz_yyyy[j] + f2t * (dy_z_yyyy[j] + 4.0 * dy_yz_yyy[j] + s_yz_yyyy[j]);

                dz_yyz_yyyy[j] = fr * dz_yz_yyyy[j] + f2t * (dz_z_yyyy[j] + 4.0 * dz_yz_yyy[j]);

                dx_yyz_yyyz[j] = fr * dx_yz_yyyz[j] + f2t * (dx_z_yyyz[j] + 3.0 * dx_yz_yyz[j]);

                dy_yyz_yyyz[j] = fr * dy_yz_yyyz[j] + f2t * (dy_z_yyyz[j] + 3.0 * dy_yz_yyz[j] + s_yz_yyyz[j]);

                dz_yyz_yyyz[j] = fr * dz_yz_yyyz[j] + f2t * (dz_z_yyyz[j] + 3.0 * dz_yz_yyz[j]);

                dx_yyz_yyzz[j] = fr * dx_yz_yyzz[j] + f2t * (dx_z_yyzz[j] + 2.0 * dx_yz_yzz[j]);

                dy_yyz_yyzz[j] = fr * dy_yz_yyzz[j] + f2t * (dy_z_yyzz[j] + 2.0 * dy_yz_yzz[j] + s_yz_yyzz[j]);

                dz_yyz_yyzz[j] = fr * dz_yz_yyzz[j] + f2t * (dz_z_yyzz[j] + 2.0 * dz_yz_yzz[j]);

                dx_yyz_yzzz[j] = fr * dx_yz_yzzz[j] + f2t * (dx_z_yzzz[j] + dx_yz_zzz[j]);

                dy_yyz_yzzz[j] = fr * dy_yz_yzzz[j] + f2t * (dy_z_yzzz[j] + dy_yz_zzz[j] + s_yz_yzzz[j]);

                dz_yyz_yzzz[j] = fr * dz_yz_yzzz[j] + f2t * (dz_z_yzzz[j] + dz_yz_zzz[j]);

                dx_yyz_zzzz[j] = fr * dx_yz_zzzz[j] + f2t * dx_z_zzzz[j];

                dy_yyz_zzzz[j] = fr * dy_yz_zzzz[j] + f2t * (dy_z_zzzz[j] + s_yz_zzzz[j]);

                dz_yyz_zzzz[j] = fr * dz_yz_zzzz[j] + f2t * dz_z_zzzz[j];

                dx_yzz_xxxx[j] = fr * dx_zz_xxxx[j];

                dy_yzz_xxxx[j] = fr * dy_zz_xxxx[j] + f2t * s_zz_xxxx[j];

                dz_yzz_xxxx[j] = fr * dz_zz_xxxx[j];

                dx_yzz_xxxy[j] = fr * dx_zz_xxxy[j] + f2t * dx_zz_xxx[j];

                dy_yzz_xxxy[j] = fr * dy_zz_xxxy[j] + f2t * (dy_zz_xxx[j] + s_zz_xxxy[j]);

                dz_yzz_xxxy[j] = fr * dz_zz_xxxy[j] + f2t * dz_zz_xxx[j];

                dx_yzz_xxxz[j] = fr * dx_zz_xxxz[j];

                dy_yzz_xxxz[j] = fr * dy_zz_xxxz[j] + f2t * s_zz_xxxz[j];

                dz_yzz_xxxz[j] = fr * dz_zz_xxxz[j];

                dx_yzz_xxyy[j] = fr * dx_zz_xxyy[j] + f2t * 2.0 * dx_zz_xxy[j];

                dy_yzz_xxyy[j] = fr * dy_zz_xxyy[j] + f2t * (2.0 * dy_zz_xxy[j] + s_zz_xxyy[j]);

                dz_yzz_xxyy[j] = fr * dz_zz_xxyy[j] + f2t * 2.0 * dz_zz_xxy[j];

                dx_yzz_xxyz[j] = fr * dx_zz_xxyz[j] + f2t * dx_zz_xxz[j];

                dy_yzz_xxyz[j] = fr * dy_zz_xxyz[j] + f2t * (dy_zz_xxz[j] + s_zz_xxyz[j]);

                dz_yzz_xxyz[j] = fr * dz_zz_xxyz[j] + f2t * dz_zz_xxz[j];

                dx_yzz_xxzz[j] = fr * dx_zz_xxzz[j];

                dy_yzz_xxzz[j] = fr * dy_zz_xxzz[j] + f2t * s_zz_xxzz[j];

                dz_yzz_xxzz[j] = fr * dz_zz_xxzz[j];

                dx_yzz_xyyy[j] = fr * dx_zz_xyyy[j] + f2t * 3.0 * dx_zz_xyy[j];

                dy_yzz_xyyy[j] = fr * dy_zz_xyyy[j] + f2t * (3.0 * dy_zz_xyy[j] + s_zz_xyyy[j]);

                dz_yzz_xyyy[j] = fr * dz_zz_xyyy[j] + f2t * 3.0 * dz_zz_xyy[j];

                dx_yzz_xyyz[j] = fr * dx_zz_xyyz[j] + f2t * 2.0 * dx_zz_xyz[j];

                dy_yzz_xyyz[j] = fr * dy_zz_xyyz[j] + f2t * (2.0 * dy_zz_xyz[j] + s_zz_xyyz[j]);

                dz_yzz_xyyz[j] = fr * dz_zz_xyyz[j] + f2t * 2.0 * dz_zz_xyz[j];

                dx_yzz_xyzz[j] = fr * dx_zz_xyzz[j] + f2t * dx_zz_xzz[j];

                dy_yzz_xyzz[j] = fr * dy_zz_xyzz[j] + f2t * (dy_zz_xzz[j] + s_zz_xyzz[j]);

                dz_yzz_xyzz[j] = fr * dz_zz_xyzz[j] + f2t * dz_zz_xzz[j];

                dx_yzz_xzzz[j] = fr * dx_zz_xzzz[j];

                dy_yzz_xzzz[j] = fr * dy_zz_xzzz[j] + f2t * s_zz_xzzz[j];

                dz_yzz_xzzz[j] = fr * dz_zz_xzzz[j];

                dx_yzz_yyyy[j] = fr * dx_zz_yyyy[j] + f2t * 4.0 * dx_zz_yyy[j];

                dy_yzz_yyyy[j] = fr * dy_zz_yyyy[j] + f2t * (4.0 * dy_zz_yyy[j] + s_zz_yyyy[j]);

                dz_yzz_yyyy[j] = fr * dz_zz_yyyy[j] + f2t * 4.0 * dz_zz_yyy[j];

                dx_yzz_yyyz[j] = fr * dx_zz_yyyz[j] + f2t * 3.0 * dx_zz_yyz[j];

                dy_yzz_yyyz[j] = fr * dy_zz_yyyz[j] + f2t * (3.0 * dy_zz_yyz[j] + s_zz_yyyz[j]);

                dz_yzz_yyyz[j] = fr * dz_zz_yyyz[j] + f2t * 3.0 * dz_zz_yyz[j];

                dx_yzz_yyzz[j] = fr * dx_zz_yyzz[j] + f2t * 2.0 * dx_zz_yzz[j];

                dy_yzz_yyzz[j] = fr * dy_zz_yyzz[j] + f2t * (2.0 * dy_zz_yzz[j] + s_zz_yyzz[j]);

                dz_yzz_yyzz[j] = fr * dz_zz_yyzz[j] + f2t * 2.0 * dz_zz_yzz[j];

                dx_yzz_yzzz[j] = fr * dx_zz_yzzz[j] + f2t * dx_zz_zzz[j];

                dy_yzz_yzzz[j] = fr * dy_zz_yzzz[j] + f2t * (dy_zz_zzz[j] + s_zz_yzzz[j]);

                dz_yzz_yzzz[j] = fr * dz_zz_yzzz[j] + f2t * dz_zz_zzz[j];

                dx_yzz_zzzz[j] = fr * dx_zz_zzzz[j];

                dy_yzz_zzzz[j] = fr * dy_zz_zzzz[j] + f2t * s_zz_zzzz[j];

                dz_yzz_zzzz[j] = fr * dz_zz_zzzz[j];

                // leading z component

                fr = paz[j];

                dx_zzz_xxxx[j] = fr * dx_zz_xxxx[j] + f2t * 2.0 * dx_z_xxxx[j];

                dy_zzz_xxxx[j] = fr * dy_zz_xxxx[j] + f2t * 2.0 * dy_z_xxxx[j];

                dz_zzz_xxxx[j] = fr * dz_zz_xxxx[j] + f2t * (2.0 * dz_z_xxxx[j] + s_zz_xxxx[j]);

                dx_zzz_xxxy[j] = fr * dx_zz_xxxy[j] + f2t * 2.0 * dx_z_xxxy[j];

                dy_zzz_xxxy[j] = fr * dy_zz_xxxy[j] + f2t * 2.0 * dy_z_xxxy[j];

                dz_zzz_xxxy[j] = fr * dz_zz_xxxy[j] + f2t * (2.0 * dz_z_xxxy[j] + s_zz_xxxy[j]);

                dx_zzz_xxxz[j] = fr * dx_zz_xxxz[j] + f2t * (2.0 * dx_z_xxxz[j] + dx_zz_xxx[j]);

                dy_zzz_xxxz[j] = fr * dy_zz_xxxz[j] + f2t * (2.0 * dy_z_xxxz[j] + dy_zz_xxx[j]);

                dz_zzz_xxxz[j] = fr * dz_zz_xxxz[j] + f2t * (2.0 * dz_z_xxxz[j] + dz_zz_xxx[j] + s_zz_xxxz[j]);

                dx_zzz_xxyy[j] = fr * dx_zz_xxyy[j] + f2t * 2.0 * dx_z_xxyy[j];

                dy_zzz_xxyy[j] = fr * dy_zz_xxyy[j] + f2t * 2.0 * dy_z_xxyy[j];

                dz_zzz_xxyy[j] = fr * dz_zz_xxyy[j] + f2t * (2.0 * dz_z_xxyy[j] + s_zz_xxyy[j]);

                dx_zzz_xxyz[j] = fr * dx_zz_xxyz[j] + f2t * (2.0 * dx_z_xxyz[j] + dx_zz_xxy[j]);

                dy_zzz_xxyz[j] = fr * dy_zz_xxyz[j] + f2t * (2.0 * dy_z_xxyz[j] + dy_zz_xxy[j]);

                dz_zzz_xxyz[j] = fr * dz_zz_xxyz[j] + f2t * (2.0 * dz_z_xxyz[j] + dz_zz_xxy[j] + s_zz_xxyz[j]);

                dx_zzz_xxzz[j] = fr * dx_zz_xxzz[j] + f2t * (2.0 * dx_z_xxzz[j] + 2.0 * dx_zz_xxz[j]);

                dy_zzz_xxzz[j] = fr * dy_zz_xxzz[j] + f2t * (2.0 * dy_z_xxzz[j] + 2.0 * dy_zz_xxz[j]);

                dz_zzz_xxzz[j] = fr * dz_zz_xxzz[j] + f2t * (2.0 * dz_z_xxzz[j] + 2.0 * dz_zz_xxz[j] + s_zz_xxzz[j]);

                dx_zzz_xyyy[j] = fr * dx_zz_xyyy[j] + f2t * 2.0 * dx_z_xyyy[j];

                dy_zzz_xyyy[j] = fr * dy_zz_xyyy[j] + f2t * 2.0 * dy_z_xyyy[j];

                dz_zzz_xyyy[j] = fr * dz_zz_xyyy[j] + f2t * (2.0 * dz_z_xyyy[j] + s_zz_xyyy[j]);

                dx_zzz_xyyz[j] = fr * dx_zz_xyyz[j] + f2t * (2.0 * dx_z_xyyz[j] + dx_zz_xyy[j]);

                dy_zzz_xyyz[j] = fr * dy_zz_xyyz[j] + f2t * (2.0 * dy_z_xyyz[j] + dy_zz_xyy[j]);

                dz_zzz_xyyz[j] = fr * dz_zz_xyyz[j] + f2t * (2.0 * dz_z_xyyz[j] + dz_zz_xyy[j] + s_zz_xyyz[j]);

                dx_zzz_xyzz[j] = fr * dx_zz_xyzz[j] + f2t * (2.0 * dx_z_xyzz[j] + 2.0 * dx_zz_xyz[j]);

                dy_zzz_xyzz[j] = fr * dy_zz_xyzz[j] + f2t * (2.0 * dy_z_xyzz[j] + 2.0 * dy_zz_xyz[j]);

                dz_zzz_xyzz[j] = fr * dz_zz_xyzz[j] + f2t * (2.0 * dz_z_xyzz[j] + 2.0 * dz_zz_xyz[j] + s_zz_xyzz[j]);

                dx_zzz_xzzz[j] = fr * dx_zz_xzzz[j] + f2t * (2.0 * dx_z_xzzz[j] + 3.0 * dx_zz_xzz[j]);

                dy_zzz_xzzz[j] = fr * dy_zz_xzzz[j] + f2t * (2.0 * dy_z_xzzz[j] + 3.0 * dy_zz_xzz[j]);

                dz_zzz_xzzz[j] = fr * dz_zz_xzzz[j] + f2t * (2.0 * dz_z_xzzz[j] + 3.0 * dz_zz_xzz[j] + s_zz_xzzz[j]);

                dx_zzz_yyyy[j] = fr * dx_zz_yyyy[j] + f2t * 2.0 * dx_z_yyyy[j];

                dy_zzz_yyyy[j] = fr * dy_zz_yyyy[j] + f2t * 2.0 * dy_z_yyyy[j];

                dz_zzz_yyyy[j] = fr * dz_zz_yyyy[j] + f2t * (2.0 * dz_z_yyyy[j] + s_zz_yyyy[j]);

                dx_zzz_yyyz[j] = fr * dx_zz_yyyz[j] + f2t * (2.0 * dx_z_yyyz[j] + dx_zz_yyy[j]);

                dy_zzz_yyyz[j] = fr * dy_zz_yyyz[j] + f2t * (2.0 * dy_z_yyyz[j] + dy_zz_yyy[j]);

                dz_zzz_yyyz[j] = fr * dz_zz_yyyz[j] + f2t * (2.0 * dz_z_yyyz[j] + dz_zz_yyy[j] + s_zz_yyyz[j]);

                dx_zzz_yyzz[j] = fr * dx_zz_yyzz[j] + f2t * (2.0 * dx_z_yyzz[j] + 2.0 * dx_zz_yyz[j]);

                dy_zzz_yyzz[j] = fr * dy_zz_yyzz[j] + f2t * (2.0 * dy_z_yyzz[j] + 2.0 * dy_zz_yyz[j]);

                dz_zzz_yyzz[j] = fr * dz_zz_yyzz[j] + f2t * (2.0 * dz_z_yyzz[j] + 2.0 * dz_zz_yyz[j] + s_zz_yyzz[j]);

                dx_zzz_yzzz[j] = fr * dx_zz_yzzz[j] + f2t * (2.0 * dx_z_yzzz[j] + 3.0 * dx_zz_yzz[j]);

                dy_zzz_yzzz[j] = fr * dy_zz_yzzz[j] + f2t * (2.0 * dy_z_yzzz[j] + 3.0 * dy_zz_yzz[j]);

                dz_zzz_yzzz[j] = fr * dz_zz_yzzz[j] + f2t * (2.0 * dz_z_yzzz[j] + 3.0 * dz_zz_yzz[j] + s_zz_yzzz[j]);

                dx_zzz_zzzz[j] = fr * dx_zz_zzzz[j] + f2t * (2.0 * dx_z_zzzz[j] + 4.0 * dx_zz_zzz[j]);

                dy_zzz_zzzz[j] = fr * dy_zz_zzzz[j] + f2t * (2.0 * dy_z_zzzz[j] + 4.0 * dy_zz_zzz[j]);

                dz_zzz_zzzz[j] = fr * dz_zz_zzzz[j] + f2t * (2.0 * dz_z_zzzz[j] + 4.0 * dz_zz_zzz[j] + s_zz_zzzz[j]);
            }

            idx++;
        }
    }
    
        void
    compElectricDipoleForGF(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {4, 3, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {4, 3, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {3, 3, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 3, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 2, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 3, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 3, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 3, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 2, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (G|M|F) integrals

            auto dx_xxxx_xxx = primBuffer.data(doff + 150 * idx);

            auto dx_xxxx_xxy = primBuffer.data(doff + 150 * idx + 1);

            auto dx_xxxx_xxz = primBuffer.data(doff + 150 * idx + 2);

            auto dx_xxxx_xyy = primBuffer.data(doff + 150 * idx + 3);

            auto dx_xxxx_xyz = primBuffer.data(doff + 150 * idx + 4);

            auto dx_xxxx_xzz = primBuffer.data(doff + 150 * idx + 5);

            auto dx_xxxx_yyy = primBuffer.data(doff + 150 * idx + 6);

            auto dx_xxxx_yyz = primBuffer.data(doff + 150 * idx + 7);

            auto dx_xxxx_yzz = primBuffer.data(doff + 150 * idx + 8);

            auto dx_xxxx_zzz = primBuffer.data(doff + 150 * idx + 9);

            auto dx_xxxy_xxx = primBuffer.data(doff + 150 * idx + 10);

            auto dx_xxxy_xxy = primBuffer.data(doff + 150 * idx + 11);

            auto dx_xxxy_xxz = primBuffer.data(doff + 150 * idx + 12);

            auto dx_xxxy_xyy = primBuffer.data(doff + 150 * idx + 13);

            auto dx_xxxy_xyz = primBuffer.data(doff + 150 * idx + 14);

            auto dx_xxxy_xzz = primBuffer.data(doff + 150 * idx + 15);

            auto dx_xxxy_yyy = primBuffer.data(doff + 150 * idx + 16);

            auto dx_xxxy_yyz = primBuffer.data(doff + 150 * idx + 17);

            auto dx_xxxy_yzz = primBuffer.data(doff + 150 * idx + 18);

            auto dx_xxxy_zzz = primBuffer.data(doff + 150 * idx + 19);

            auto dx_xxxz_xxx = primBuffer.data(doff + 150 * idx + 20);

            auto dx_xxxz_xxy = primBuffer.data(doff + 150 * idx + 21);

            auto dx_xxxz_xxz = primBuffer.data(doff + 150 * idx + 22);

            auto dx_xxxz_xyy = primBuffer.data(doff + 150 * idx + 23);

            auto dx_xxxz_xyz = primBuffer.data(doff + 150 * idx + 24);

            auto dx_xxxz_xzz = primBuffer.data(doff + 150 * idx + 25);

            auto dx_xxxz_yyy = primBuffer.data(doff + 150 * idx + 26);

            auto dx_xxxz_yyz = primBuffer.data(doff + 150 * idx + 27);

            auto dx_xxxz_yzz = primBuffer.data(doff + 150 * idx + 28);

            auto dx_xxxz_zzz = primBuffer.data(doff + 150 * idx + 29);

            auto dx_xxyy_xxx = primBuffer.data(doff + 150 * idx + 30);

            auto dx_xxyy_xxy = primBuffer.data(doff + 150 * idx + 31);

            auto dx_xxyy_xxz = primBuffer.data(doff + 150 * idx + 32);

            auto dx_xxyy_xyy = primBuffer.data(doff + 150 * idx + 33);

            auto dx_xxyy_xyz = primBuffer.data(doff + 150 * idx + 34);

            auto dx_xxyy_xzz = primBuffer.data(doff + 150 * idx + 35);

            auto dx_xxyy_yyy = primBuffer.data(doff + 150 * idx + 36);

            auto dx_xxyy_yyz = primBuffer.data(doff + 150 * idx + 37);

            auto dx_xxyy_yzz = primBuffer.data(doff + 150 * idx + 38);

            auto dx_xxyy_zzz = primBuffer.data(doff + 150 * idx + 39);

            auto dx_xxyz_xxx = primBuffer.data(doff + 150 * idx + 40);

            auto dx_xxyz_xxy = primBuffer.data(doff + 150 * idx + 41);

            auto dx_xxyz_xxz = primBuffer.data(doff + 150 * idx + 42);

            auto dx_xxyz_xyy = primBuffer.data(doff + 150 * idx + 43);

            auto dx_xxyz_xyz = primBuffer.data(doff + 150 * idx + 44);

            auto dx_xxyz_xzz = primBuffer.data(doff + 150 * idx + 45);

            auto dx_xxyz_yyy = primBuffer.data(doff + 150 * idx + 46);

            auto dx_xxyz_yyz = primBuffer.data(doff + 150 * idx + 47);

            auto dx_xxyz_yzz = primBuffer.data(doff + 150 * idx + 48);

            auto dx_xxyz_zzz = primBuffer.data(doff + 150 * idx + 49);

            auto dx_xxzz_xxx = primBuffer.data(doff + 150 * idx + 50);

            auto dx_xxzz_xxy = primBuffer.data(doff + 150 * idx + 51);

            auto dx_xxzz_xxz = primBuffer.data(doff + 150 * idx + 52);

            auto dx_xxzz_xyy = primBuffer.data(doff + 150 * idx + 53);

            auto dx_xxzz_xyz = primBuffer.data(doff + 150 * idx + 54);

            auto dx_xxzz_xzz = primBuffer.data(doff + 150 * idx + 55);

            auto dx_xxzz_yyy = primBuffer.data(doff + 150 * idx + 56);

            auto dx_xxzz_yyz = primBuffer.data(doff + 150 * idx + 57);

            auto dx_xxzz_yzz = primBuffer.data(doff + 150 * idx + 58);

            auto dx_xxzz_zzz = primBuffer.data(doff + 150 * idx + 59);

            auto dx_xyyy_xxx = primBuffer.data(doff + 150 * idx + 60);

            auto dx_xyyy_xxy = primBuffer.data(doff + 150 * idx + 61);

            auto dx_xyyy_xxz = primBuffer.data(doff + 150 * idx + 62);

            auto dx_xyyy_xyy = primBuffer.data(doff + 150 * idx + 63);

            auto dx_xyyy_xyz = primBuffer.data(doff + 150 * idx + 64);

            auto dx_xyyy_xzz = primBuffer.data(doff + 150 * idx + 65);

            auto dx_xyyy_yyy = primBuffer.data(doff + 150 * idx + 66);

            auto dx_xyyy_yyz = primBuffer.data(doff + 150 * idx + 67);

            auto dx_xyyy_yzz = primBuffer.data(doff + 150 * idx + 68);

            auto dx_xyyy_zzz = primBuffer.data(doff + 150 * idx + 69);

            auto dx_xyyz_xxx = primBuffer.data(doff + 150 * idx + 70);

            auto dx_xyyz_xxy = primBuffer.data(doff + 150 * idx + 71);

            auto dx_xyyz_xxz = primBuffer.data(doff + 150 * idx + 72);

            auto dx_xyyz_xyy = primBuffer.data(doff + 150 * idx + 73);

            auto dx_xyyz_xyz = primBuffer.data(doff + 150 * idx + 74);

            auto dx_xyyz_xzz = primBuffer.data(doff + 150 * idx + 75);

            auto dx_xyyz_yyy = primBuffer.data(doff + 150 * idx + 76);

            auto dx_xyyz_yyz = primBuffer.data(doff + 150 * idx + 77);

            auto dx_xyyz_yzz = primBuffer.data(doff + 150 * idx + 78);

            auto dx_xyyz_zzz = primBuffer.data(doff + 150 * idx + 79);

            auto dx_xyzz_xxx = primBuffer.data(doff + 150 * idx + 80);

            auto dx_xyzz_xxy = primBuffer.data(doff + 150 * idx + 81);

            auto dx_xyzz_xxz = primBuffer.data(doff + 150 * idx + 82);

            auto dx_xyzz_xyy = primBuffer.data(doff + 150 * idx + 83);

            auto dx_xyzz_xyz = primBuffer.data(doff + 150 * idx + 84);

            auto dx_xyzz_xzz = primBuffer.data(doff + 150 * idx + 85);

            auto dx_xyzz_yyy = primBuffer.data(doff + 150 * idx + 86);

            auto dx_xyzz_yyz = primBuffer.data(doff + 150 * idx + 87);

            auto dx_xyzz_yzz = primBuffer.data(doff + 150 * idx + 88);

            auto dx_xyzz_zzz = primBuffer.data(doff + 150 * idx + 89);

            auto dx_xzzz_xxx = primBuffer.data(doff + 150 * idx + 90);

            auto dx_xzzz_xxy = primBuffer.data(doff + 150 * idx + 91);

            auto dx_xzzz_xxz = primBuffer.data(doff + 150 * idx + 92);

            auto dx_xzzz_xyy = primBuffer.data(doff + 150 * idx + 93);

            auto dx_xzzz_xyz = primBuffer.data(doff + 150 * idx + 94);

            auto dx_xzzz_xzz = primBuffer.data(doff + 150 * idx + 95);

            auto dx_xzzz_yyy = primBuffer.data(doff + 150 * idx + 96);

            auto dx_xzzz_yyz = primBuffer.data(doff + 150 * idx + 97);

            auto dx_xzzz_yzz = primBuffer.data(doff + 150 * idx + 98);

            auto dx_xzzz_zzz = primBuffer.data(doff + 150 * idx + 99);

            auto dx_yyyy_xxx = primBuffer.data(doff + 150 * idx + 100);

            auto dx_yyyy_xxy = primBuffer.data(doff + 150 * idx + 101);

            auto dx_yyyy_xxz = primBuffer.data(doff + 150 * idx + 102);

            auto dx_yyyy_xyy = primBuffer.data(doff + 150 * idx + 103);

            auto dx_yyyy_xyz = primBuffer.data(doff + 150 * idx + 104);

            auto dx_yyyy_xzz = primBuffer.data(doff + 150 * idx + 105);

            auto dx_yyyy_yyy = primBuffer.data(doff + 150 * idx + 106);

            auto dx_yyyy_yyz = primBuffer.data(doff + 150 * idx + 107);

            auto dx_yyyy_yzz = primBuffer.data(doff + 150 * idx + 108);

            auto dx_yyyy_zzz = primBuffer.data(doff + 150 * idx + 109);

            auto dx_yyyz_xxx = primBuffer.data(doff + 150 * idx + 110);

            auto dx_yyyz_xxy = primBuffer.data(doff + 150 * idx + 111);

            auto dx_yyyz_xxz = primBuffer.data(doff + 150 * idx + 112);

            auto dx_yyyz_xyy = primBuffer.data(doff + 150 * idx + 113);

            auto dx_yyyz_xyz = primBuffer.data(doff + 150 * idx + 114);

            auto dx_yyyz_xzz = primBuffer.data(doff + 150 * idx + 115);

            auto dx_yyyz_yyy = primBuffer.data(doff + 150 * idx + 116);

            auto dx_yyyz_yyz = primBuffer.data(doff + 150 * idx + 117);

            auto dx_yyyz_yzz = primBuffer.data(doff + 150 * idx + 118);

            auto dx_yyyz_zzz = primBuffer.data(doff + 150 * idx + 119);

            auto dx_yyzz_xxx = primBuffer.data(doff + 150 * idx + 120);

            auto dx_yyzz_xxy = primBuffer.data(doff + 150 * idx + 121);

            auto dx_yyzz_xxz = primBuffer.data(doff + 150 * idx + 122);

            auto dx_yyzz_xyy = primBuffer.data(doff + 150 * idx + 123);

            auto dx_yyzz_xyz = primBuffer.data(doff + 150 * idx + 124);

            auto dx_yyzz_xzz = primBuffer.data(doff + 150 * idx + 125);

            auto dx_yyzz_yyy = primBuffer.data(doff + 150 * idx + 126);

            auto dx_yyzz_yyz = primBuffer.data(doff + 150 * idx + 127);

            auto dx_yyzz_yzz = primBuffer.data(doff + 150 * idx + 128);

            auto dx_yyzz_zzz = primBuffer.data(doff + 150 * idx + 129);

            auto dx_yzzz_xxx = primBuffer.data(doff + 150 * idx + 130);

            auto dx_yzzz_xxy = primBuffer.data(doff + 150 * idx + 131);

            auto dx_yzzz_xxz = primBuffer.data(doff + 150 * idx + 132);

            auto dx_yzzz_xyy = primBuffer.data(doff + 150 * idx + 133);

            auto dx_yzzz_xyz = primBuffer.data(doff + 150 * idx + 134);

            auto dx_yzzz_xzz = primBuffer.data(doff + 150 * idx + 135);

            auto dx_yzzz_yyy = primBuffer.data(doff + 150 * idx + 136);

            auto dx_yzzz_yyz = primBuffer.data(doff + 150 * idx + 137);

            auto dx_yzzz_yzz = primBuffer.data(doff + 150 * idx + 138);

            auto dx_yzzz_zzz = primBuffer.data(doff + 150 * idx + 139);

            auto dx_zzzz_xxx = primBuffer.data(doff + 150 * idx + 140);

            auto dx_zzzz_xxy = primBuffer.data(doff + 150 * idx + 141);

            auto dx_zzzz_xxz = primBuffer.data(doff + 150 * idx + 142);

            auto dx_zzzz_xyy = primBuffer.data(doff + 150 * idx + 143);

            auto dx_zzzz_xyz = primBuffer.data(doff + 150 * idx + 144);

            auto dx_zzzz_xzz = primBuffer.data(doff + 150 * idx + 145);

            auto dx_zzzz_yyy = primBuffer.data(doff + 150 * idx + 146);

            auto dx_zzzz_yyz = primBuffer.data(doff + 150 * idx + 147);

            auto dx_zzzz_yzz = primBuffer.data(doff + 150 * idx + 148);

            auto dx_zzzz_zzz = primBuffer.data(doff + 150 * idx + 149);

            auto dy_xxxx_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx);

            auto dy_xxxx_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 1);

            auto dy_xxxx_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 2);

            auto dy_xxxx_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 3);

            auto dy_xxxx_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 4);

            auto dy_xxxx_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 5);

            auto dy_xxxx_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 6);

            auto dy_xxxx_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 7);

            auto dy_xxxx_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 8);

            auto dy_xxxx_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 9);

            auto dy_xxxy_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 10);

            auto dy_xxxy_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 11);

            auto dy_xxxy_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 12);

            auto dy_xxxy_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 13);

            auto dy_xxxy_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 14);

            auto dy_xxxy_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 15);

            auto dy_xxxy_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 16);

            auto dy_xxxy_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 17);

            auto dy_xxxy_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 18);

            auto dy_xxxy_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 19);

            auto dy_xxxz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 20);

            auto dy_xxxz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 21);

            auto dy_xxxz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 22);

            auto dy_xxxz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 23);

            auto dy_xxxz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 24);

            auto dy_xxxz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 25);

            auto dy_xxxz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 26);

            auto dy_xxxz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 27);

            auto dy_xxxz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 28);

            auto dy_xxxz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 29);

            auto dy_xxyy_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 30);

            auto dy_xxyy_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 31);

            auto dy_xxyy_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 32);

            auto dy_xxyy_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 33);

            auto dy_xxyy_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 34);

            auto dy_xxyy_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 35);

            auto dy_xxyy_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 36);

            auto dy_xxyy_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 37);

            auto dy_xxyy_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 38);

            auto dy_xxyy_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 39);

            auto dy_xxyz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 40);

            auto dy_xxyz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 41);

            auto dy_xxyz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 42);

            auto dy_xxyz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 43);

            auto dy_xxyz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 44);

            auto dy_xxyz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 45);

            auto dy_xxyz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 46);

            auto dy_xxyz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 47);

            auto dy_xxyz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 48);

            auto dy_xxyz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 49);

            auto dy_xxzz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 50);

            auto dy_xxzz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 51);

            auto dy_xxzz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 52);

            auto dy_xxzz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 53);

            auto dy_xxzz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 54);

            auto dy_xxzz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 55);

            auto dy_xxzz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 56);

            auto dy_xxzz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 57);

            auto dy_xxzz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 58);

            auto dy_xxzz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 59);

            auto dy_xyyy_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 60);

            auto dy_xyyy_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 61);

            auto dy_xyyy_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 62);

            auto dy_xyyy_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 63);

            auto dy_xyyy_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 64);

            auto dy_xyyy_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 65);

            auto dy_xyyy_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 66);

            auto dy_xyyy_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 67);

            auto dy_xyyy_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 68);

            auto dy_xyyy_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 69);

            auto dy_xyyz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 70);

            auto dy_xyyz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 71);

            auto dy_xyyz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 72);

            auto dy_xyyz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 73);

            auto dy_xyyz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 74);

            auto dy_xyyz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 75);

            auto dy_xyyz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 76);

            auto dy_xyyz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 77);

            auto dy_xyyz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 78);

            auto dy_xyyz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 79);

            auto dy_xyzz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 80);

            auto dy_xyzz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 81);

            auto dy_xyzz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 82);

            auto dy_xyzz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 83);

            auto dy_xyzz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 84);

            auto dy_xyzz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 85);

            auto dy_xyzz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 86);

            auto dy_xyzz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 87);

            auto dy_xyzz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 88);

            auto dy_xyzz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 89);

            auto dy_xzzz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 90);

            auto dy_xzzz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 91);

            auto dy_xzzz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 92);

            auto dy_xzzz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 93);

            auto dy_xzzz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 94);

            auto dy_xzzz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 95);

            auto dy_xzzz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 96);

            auto dy_xzzz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 97);

            auto dy_xzzz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 98);

            auto dy_xzzz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 99);

            auto dy_yyyy_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 100);

            auto dy_yyyy_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 101);

            auto dy_yyyy_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 102);

            auto dy_yyyy_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 103);

            auto dy_yyyy_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 104);

            auto dy_yyyy_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 105);

            auto dy_yyyy_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 106);

            auto dy_yyyy_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 107);

            auto dy_yyyy_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 108);

            auto dy_yyyy_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 109);

            auto dy_yyyz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 110);

            auto dy_yyyz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 111);

            auto dy_yyyz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 112);

            auto dy_yyyz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 113);

            auto dy_yyyz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 114);

            auto dy_yyyz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 115);

            auto dy_yyyz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 116);

            auto dy_yyyz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 117);

            auto dy_yyyz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 118);

            auto dy_yyyz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 119);

            auto dy_yyzz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 120);

            auto dy_yyzz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 121);

            auto dy_yyzz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 122);

            auto dy_yyzz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 123);

            auto dy_yyzz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 124);

            auto dy_yyzz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 125);

            auto dy_yyzz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 126);

            auto dy_yyzz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 127);

            auto dy_yyzz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 128);

            auto dy_yyzz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 129);

            auto dy_yzzz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 130);

            auto dy_yzzz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 131);

            auto dy_yzzz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 132);

            auto dy_yzzz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 133);

            auto dy_yzzz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 134);

            auto dy_yzzz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 135);

            auto dy_yzzz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 136);

            auto dy_yzzz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 137);

            auto dy_yzzz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 138);

            auto dy_yzzz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 139);

            auto dy_zzzz_xxx = primBuffer.data(doff + 150 * bdim + 150 * idx + 140);

            auto dy_zzzz_xxy = primBuffer.data(doff + 150 * bdim + 150 * idx + 141);

            auto dy_zzzz_xxz = primBuffer.data(doff + 150 * bdim + 150 * idx + 142);

            auto dy_zzzz_xyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 143);

            auto dy_zzzz_xyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 144);

            auto dy_zzzz_xzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 145);

            auto dy_zzzz_yyy = primBuffer.data(doff + 150 * bdim + 150 * idx + 146);

            auto dy_zzzz_yyz = primBuffer.data(doff + 150 * bdim + 150 * idx + 147);

            auto dy_zzzz_yzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 148);

            auto dy_zzzz_zzz = primBuffer.data(doff + 150 * bdim + 150 * idx + 149);

            auto dz_xxxx_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx);

            auto dz_xxxx_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 1);

            auto dz_xxxx_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 2);

            auto dz_xxxx_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 3);

            auto dz_xxxx_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 4);

            auto dz_xxxx_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 5);

            auto dz_xxxx_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 6);

            auto dz_xxxx_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 7);

            auto dz_xxxx_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 8);

            auto dz_xxxx_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 9);

            auto dz_xxxy_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 10);

            auto dz_xxxy_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 11);

            auto dz_xxxy_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 12);

            auto dz_xxxy_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 13);

            auto dz_xxxy_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 14);

            auto dz_xxxy_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 15);

            auto dz_xxxy_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 16);

            auto dz_xxxy_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 17);

            auto dz_xxxy_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 18);

            auto dz_xxxy_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 19);

            auto dz_xxxz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 20);

            auto dz_xxxz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 21);

            auto dz_xxxz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 22);

            auto dz_xxxz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 23);

            auto dz_xxxz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 24);

            auto dz_xxxz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 25);

            auto dz_xxxz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 26);

            auto dz_xxxz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 27);

            auto dz_xxxz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 28);

            auto dz_xxxz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 29);

            auto dz_xxyy_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 30);

            auto dz_xxyy_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 31);

            auto dz_xxyy_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 32);

            auto dz_xxyy_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 33);

            auto dz_xxyy_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 34);

            auto dz_xxyy_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 35);

            auto dz_xxyy_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 36);

            auto dz_xxyy_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 37);

            auto dz_xxyy_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 38);

            auto dz_xxyy_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 39);

            auto dz_xxyz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 40);

            auto dz_xxyz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 41);

            auto dz_xxyz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 42);

            auto dz_xxyz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 43);

            auto dz_xxyz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 44);

            auto dz_xxyz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 45);

            auto dz_xxyz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 46);

            auto dz_xxyz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 47);

            auto dz_xxyz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 48);

            auto dz_xxyz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 49);

            auto dz_xxzz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 50);

            auto dz_xxzz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 51);

            auto dz_xxzz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 52);

            auto dz_xxzz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 53);

            auto dz_xxzz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 54);

            auto dz_xxzz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 55);

            auto dz_xxzz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 56);

            auto dz_xxzz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 57);

            auto dz_xxzz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 58);

            auto dz_xxzz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 59);

            auto dz_xyyy_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 60);

            auto dz_xyyy_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 61);

            auto dz_xyyy_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 62);

            auto dz_xyyy_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 63);

            auto dz_xyyy_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 64);

            auto dz_xyyy_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 65);

            auto dz_xyyy_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 66);

            auto dz_xyyy_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 67);

            auto dz_xyyy_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 68);

            auto dz_xyyy_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 69);

            auto dz_xyyz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 70);

            auto dz_xyyz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 71);

            auto dz_xyyz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 72);

            auto dz_xyyz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 73);

            auto dz_xyyz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 74);

            auto dz_xyyz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 75);

            auto dz_xyyz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 76);

            auto dz_xyyz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 77);

            auto dz_xyyz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 78);

            auto dz_xyyz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 79);

            auto dz_xyzz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 80);

            auto dz_xyzz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 81);

            auto dz_xyzz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 82);

            auto dz_xyzz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 83);

            auto dz_xyzz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 84);

            auto dz_xyzz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 85);

            auto dz_xyzz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 86);

            auto dz_xyzz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 87);

            auto dz_xyzz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 88);

            auto dz_xyzz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 89);

            auto dz_xzzz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 90);

            auto dz_xzzz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 91);

            auto dz_xzzz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 92);

            auto dz_xzzz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 93);

            auto dz_xzzz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 94);

            auto dz_xzzz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 95);

            auto dz_xzzz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 96);

            auto dz_xzzz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 97);

            auto dz_xzzz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 98);

            auto dz_xzzz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 99);

            auto dz_yyyy_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 100);

            auto dz_yyyy_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 101);

            auto dz_yyyy_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 102);

            auto dz_yyyy_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 103);

            auto dz_yyyy_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 104);

            auto dz_yyyy_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 105);

            auto dz_yyyy_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 106);

            auto dz_yyyy_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 107);

            auto dz_yyyy_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 108);

            auto dz_yyyy_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 109);

            auto dz_yyyz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 110);

            auto dz_yyyz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 111);

            auto dz_yyyz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 112);

            auto dz_yyyz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 113);

            auto dz_yyyz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 114);

            auto dz_yyyz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 115);

            auto dz_yyyz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 116);

            auto dz_yyyz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 117);

            auto dz_yyyz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 118);

            auto dz_yyyz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 119);

            auto dz_yyzz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 120);

            auto dz_yyzz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 121);

            auto dz_yyzz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 122);

            auto dz_yyzz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 123);

            auto dz_yyzz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 124);

            auto dz_yyzz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 125);

            auto dz_yyzz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 126);

            auto dz_yyzz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 127);

            auto dz_yyzz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 128);

            auto dz_yyzz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 129);

            auto dz_yzzz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 130);

            auto dz_yzzz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 131);

            auto dz_yzzz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 132);

            auto dz_yzzz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 133);

            auto dz_yzzz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 134);

            auto dz_yzzz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 135);

            auto dz_yzzz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 136);

            auto dz_yzzz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 137);

            auto dz_yzzz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 138);

            auto dz_yzzz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 139);

            auto dz_zzzz_xxx = primBuffer.data(doff + 300 * bdim + 150 * idx + 140);

            auto dz_zzzz_xxy = primBuffer.data(doff + 300 * bdim + 150 * idx + 141);

            auto dz_zzzz_xxz = primBuffer.data(doff + 300 * bdim + 150 * idx + 142);

            auto dz_zzzz_xyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 143);

            auto dz_zzzz_xyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 144);

            auto dz_zzzz_xzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 145);

            auto dz_zzzz_yyy = primBuffer.data(doff + 300 * bdim + 150 * idx + 146);

            auto dz_zzzz_yyz = primBuffer.data(doff + 300 * bdim + 150 * idx + 147);

            auto dz_zzzz_yzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 148);

            auto dz_zzzz_zzz = primBuffer.data(doff + 300 * bdim + 150 * idx + 149);

            // set up pointers to (F|M|F) integrals

            auto dx_xxx_xxx = primBuffer.data(d1off + 100 * idx);

            auto dx_xxx_xxy = primBuffer.data(d1off + 100 * idx + 1);

            auto dx_xxx_xxz = primBuffer.data(d1off + 100 * idx + 2);

            auto dx_xxx_xyy = primBuffer.data(d1off + 100 * idx + 3);

            auto dx_xxx_xyz = primBuffer.data(d1off + 100 * idx + 4);

            auto dx_xxx_xzz = primBuffer.data(d1off + 100 * idx + 5);

            auto dx_xxx_yyy = primBuffer.data(d1off + 100 * idx + 6);

            auto dx_xxx_yyz = primBuffer.data(d1off + 100 * idx + 7);

            auto dx_xxx_yzz = primBuffer.data(d1off + 100 * idx + 8);

            auto dx_xxx_zzz = primBuffer.data(d1off + 100 * idx + 9);

            auto dx_xxy_xxx = primBuffer.data(d1off + 100 * idx + 10);

            auto dx_xxy_xxy = primBuffer.data(d1off + 100 * idx + 11);

            auto dx_xxy_xxz = primBuffer.data(d1off + 100 * idx + 12);

            auto dx_xxy_xyy = primBuffer.data(d1off + 100 * idx + 13);

            auto dx_xxy_xyz = primBuffer.data(d1off + 100 * idx + 14);

            auto dx_xxy_xzz = primBuffer.data(d1off + 100 * idx + 15);

            auto dx_xxy_yyy = primBuffer.data(d1off + 100 * idx + 16);

            auto dx_xxy_yyz = primBuffer.data(d1off + 100 * idx + 17);

            auto dx_xxy_yzz = primBuffer.data(d1off + 100 * idx + 18);

            auto dx_xxy_zzz = primBuffer.data(d1off + 100 * idx + 19);

            auto dx_xxz_xxx = primBuffer.data(d1off + 100 * idx + 20);

            auto dx_xxz_xxy = primBuffer.data(d1off + 100 * idx + 21);

            auto dx_xxz_xxz = primBuffer.data(d1off + 100 * idx + 22);

            auto dx_xxz_xyy = primBuffer.data(d1off + 100 * idx + 23);

            auto dx_xxz_xyz = primBuffer.data(d1off + 100 * idx + 24);

            auto dx_xxz_xzz = primBuffer.data(d1off + 100 * idx + 25);

            auto dx_xxz_yyy = primBuffer.data(d1off + 100 * idx + 26);

            auto dx_xxz_yyz = primBuffer.data(d1off + 100 * idx + 27);

            auto dx_xxz_yzz = primBuffer.data(d1off + 100 * idx + 28);

            auto dx_xxz_zzz = primBuffer.data(d1off + 100 * idx + 29);

            auto dx_xyy_xxx = primBuffer.data(d1off + 100 * idx + 30);

            auto dx_xyy_xxy = primBuffer.data(d1off + 100 * idx + 31);

            auto dx_xyy_xxz = primBuffer.data(d1off + 100 * idx + 32);

            auto dx_xyy_xyy = primBuffer.data(d1off + 100 * idx + 33);

            auto dx_xyy_xyz = primBuffer.data(d1off + 100 * idx + 34);

            auto dx_xyy_xzz = primBuffer.data(d1off + 100 * idx + 35);

            auto dx_xyy_yyy = primBuffer.data(d1off + 100 * idx + 36);

            auto dx_xyy_yyz = primBuffer.data(d1off + 100 * idx + 37);

            auto dx_xyy_yzz = primBuffer.data(d1off + 100 * idx + 38);

            auto dx_xyy_zzz = primBuffer.data(d1off + 100 * idx + 39);

            auto dx_xyz_xxx = primBuffer.data(d1off + 100 * idx + 40);

            auto dx_xyz_xxy = primBuffer.data(d1off + 100 * idx + 41);

            auto dx_xyz_xxz = primBuffer.data(d1off + 100 * idx + 42);

            auto dx_xyz_xyy = primBuffer.data(d1off + 100 * idx + 43);

            auto dx_xyz_xyz = primBuffer.data(d1off + 100 * idx + 44);

            auto dx_xyz_xzz = primBuffer.data(d1off + 100 * idx + 45);

            auto dx_xyz_yyy = primBuffer.data(d1off + 100 * idx + 46);

            auto dx_xyz_yyz = primBuffer.data(d1off + 100 * idx + 47);

            auto dx_xyz_yzz = primBuffer.data(d1off + 100 * idx + 48);

            auto dx_xyz_zzz = primBuffer.data(d1off + 100 * idx + 49);

            auto dx_xzz_xxx = primBuffer.data(d1off + 100 * idx + 50);

            auto dx_xzz_xxy = primBuffer.data(d1off + 100 * idx + 51);

            auto dx_xzz_xxz = primBuffer.data(d1off + 100 * idx + 52);

            auto dx_xzz_xyy = primBuffer.data(d1off + 100 * idx + 53);

            auto dx_xzz_xyz = primBuffer.data(d1off + 100 * idx + 54);

            auto dx_xzz_xzz = primBuffer.data(d1off + 100 * idx + 55);

            auto dx_xzz_yyy = primBuffer.data(d1off + 100 * idx + 56);

            auto dx_xzz_yyz = primBuffer.data(d1off + 100 * idx + 57);

            auto dx_xzz_yzz = primBuffer.data(d1off + 100 * idx + 58);

            auto dx_xzz_zzz = primBuffer.data(d1off + 100 * idx + 59);

            auto dx_yyy_xxx = primBuffer.data(d1off + 100 * idx + 60);

            auto dx_yyy_xxy = primBuffer.data(d1off + 100 * idx + 61);

            auto dx_yyy_xxz = primBuffer.data(d1off + 100 * idx + 62);

            auto dx_yyy_xyy = primBuffer.data(d1off + 100 * idx + 63);

            auto dx_yyy_xyz = primBuffer.data(d1off + 100 * idx + 64);

            auto dx_yyy_xzz = primBuffer.data(d1off + 100 * idx + 65);

            auto dx_yyy_yyy = primBuffer.data(d1off + 100 * idx + 66);

            auto dx_yyy_yyz = primBuffer.data(d1off + 100 * idx + 67);

            auto dx_yyy_yzz = primBuffer.data(d1off + 100 * idx + 68);

            auto dx_yyy_zzz = primBuffer.data(d1off + 100 * idx + 69);

            auto dx_yyz_xxx = primBuffer.data(d1off + 100 * idx + 70);

            auto dx_yyz_xxy = primBuffer.data(d1off + 100 * idx + 71);

            auto dx_yyz_xxz = primBuffer.data(d1off + 100 * idx + 72);

            auto dx_yyz_xyy = primBuffer.data(d1off + 100 * idx + 73);

            auto dx_yyz_xyz = primBuffer.data(d1off + 100 * idx + 74);

            auto dx_yyz_xzz = primBuffer.data(d1off + 100 * idx + 75);

            auto dx_yyz_yyy = primBuffer.data(d1off + 100 * idx + 76);

            auto dx_yyz_yyz = primBuffer.data(d1off + 100 * idx + 77);

            auto dx_yyz_yzz = primBuffer.data(d1off + 100 * idx + 78);

            auto dx_yyz_zzz = primBuffer.data(d1off + 100 * idx + 79);

            auto dx_yzz_xxx = primBuffer.data(d1off + 100 * idx + 80);

            auto dx_yzz_xxy = primBuffer.data(d1off + 100 * idx + 81);

            auto dx_yzz_xxz = primBuffer.data(d1off + 100 * idx + 82);

            auto dx_yzz_xyy = primBuffer.data(d1off + 100 * idx + 83);

            auto dx_yzz_xyz = primBuffer.data(d1off + 100 * idx + 84);

            auto dx_yzz_xzz = primBuffer.data(d1off + 100 * idx + 85);

            auto dx_yzz_yyy = primBuffer.data(d1off + 100 * idx + 86);

            auto dx_yzz_yyz = primBuffer.data(d1off + 100 * idx + 87);

            auto dx_yzz_yzz = primBuffer.data(d1off + 100 * idx + 88);

            auto dx_yzz_zzz = primBuffer.data(d1off + 100 * idx + 89);

            auto dx_zzz_xxx = primBuffer.data(d1off + 100 * idx + 90);

            auto dx_zzz_xxy = primBuffer.data(d1off + 100 * idx + 91);

            auto dx_zzz_xxz = primBuffer.data(d1off + 100 * idx + 92);

            auto dx_zzz_xyy = primBuffer.data(d1off + 100 * idx + 93);

            auto dx_zzz_xyz = primBuffer.data(d1off + 100 * idx + 94);

            auto dx_zzz_xzz = primBuffer.data(d1off + 100 * idx + 95);

            auto dx_zzz_yyy = primBuffer.data(d1off + 100 * idx + 96);

            auto dx_zzz_yyz = primBuffer.data(d1off + 100 * idx + 97);

            auto dx_zzz_yzz = primBuffer.data(d1off + 100 * idx + 98);

            auto dx_zzz_zzz = primBuffer.data(d1off + 100 * idx + 99);

            auto dy_xxx_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx);

            auto dy_xxx_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 1);

            auto dy_xxx_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 2);

            auto dy_xxx_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 3);

            auto dy_xxx_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 4);

            auto dy_xxx_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 5);

            auto dy_xxx_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 6);

            auto dy_xxx_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 7);

            auto dy_xxx_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 8);

            auto dy_xxx_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 9);

            auto dy_xxy_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 10);

            auto dy_xxy_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 11);

            auto dy_xxy_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 12);

            auto dy_xxy_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 13);

            auto dy_xxy_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 14);

            auto dy_xxy_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 15);

            auto dy_xxy_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 16);

            auto dy_xxy_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 17);

            auto dy_xxy_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 18);

            auto dy_xxy_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 19);

            auto dy_xxz_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 20);

            auto dy_xxz_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 21);

            auto dy_xxz_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 22);

            auto dy_xxz_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 23);

            auto dy_xxz_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 24);

            auto dy_xxz_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 25);

            auto dy_xxz_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 26);

            auto dy_xxz_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 27);

            auto dy_xxz_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 28);

            auto dy_xxz_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 29);

            auto dy_xyy_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 30);

            auto dy_xyy_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 31);

            auto dy_xyy_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 32);

            auto dy_xyy_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 33);

            auto dy_xyy_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 34);

            auto dy_xyy_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 35);

            auto dy_xyy_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 36);

            auto dy_xyy_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 37);

            auto dy_xyy_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 38);

            auto dy_xyy_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 39);

            auto dy_xyz_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 40);

            auto dy_xyz_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 41);

            auto dy_xyz_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 42);

            auto dy_xyz_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 43);

            auto dy_xyz_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 44);

            auto dy_xyz_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 45);

            auto dy_xyz_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 46);

            auto dy_xyz_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 47);

            auto dy_xyz_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 48);

            auto dy_xyz_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 49);

            auto dy_xzz_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 50);

            auto dy_xzz_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 51);

            auto dy_xzz_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 52);

            auto dy_xzz_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 53);

            auto dy_xzz_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 54);

            auto dy_xzz_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 55);

            auto dy_xzz_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 56);

            auto dy_xzz_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 57);

            auto dy_xzz_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 58);

            auto dy_xzz_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 59);

            auto dy_yyy_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 60);

            auto dy_yyy_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 61);

            auto dy_yyy_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 62);

            auto dy_yyy_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 63);

            auto dy_yyy_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 64);

            auto dy_yyy_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 65);

            auto dy_yyy_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 66);

            auto dy_yyy_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 67);

            auto dy_yyy_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 68);

            auto dy_yyy_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 69);

            auto dy_yyz_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 70);

            auto dy_yyz_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 71);

            auto dy_yyz_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 72);

            auto dy_yyz_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 73);

            auto dy_yyz_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 74);

            auto dy_yyz_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 75);

            auto dy_yyz_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 76);

            auto dy_yyz_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 77);

            auto dy_yyz_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 78);

            auto dy_yyz_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 79);

            auto dy_yzz_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 80);

            auto dy_yzz_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 81);

            auto dy_yzz_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 82);

            auto dy_yzz_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 83);

            auto dy_yzz_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 84);

            auto dy_yzz_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 85);

            auto dy_yzz_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 86);

            auto dy_yzz_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 87);

            auto dy_yzz_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 88);

            auto dy_yzz_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 89);

            auto dy_zzz_xxx = primBuffer.data(d1off + 100 * bdim + 100 * idx + 90);

            auto dy_zzz_xxy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 91);

            auto dy_zzz_xxz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 92);

            auto dy_zzz_xyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 93);

            auto dy_zzz_xyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 94);

            auto dy_zzz_xzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 95);

            auto dy_zzz_yyy = primBuffer.data(d1off + 100 * bdim + 100 * idx + 96);

            auto dy_zzz_yyz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 97);

            auto dy_zzz_yzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 98);

            auto dy_zzz_zzz = primBuffer.data(d1off + 100 * bdim + 100 * idx + 99);

            auto dz_xxx_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx);

            auto dz_xxx_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 1);

            auto dz_xxx_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 2);

            auto dz_xxx_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 3);

            auto dz_xxx_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 4);

            auto dz_xxx_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 5);

            auto dz_xxx_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 6);

            auto dz_xxx_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 7);

            auto dz_xxx_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 8);

            auto dz_xxx_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 9);

            auto dz_xxy_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 10);

            auto dz_xxy_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 11);

            auto dz_xxy_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 12);

            auto dz_xxy_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 13);

            auto dz_xxy_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 14);

            auto dz_xxy_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 15);

            auto dz_xxy_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 16);

            auto dz_xxy_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 17);

            auto dz_xxy_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 18);

            auto dz_xxy_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 19);

            auto dz_xxz_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 20);

            auto dz_xxz_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 21);

            auto dz_xxz_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 22);

            auto dz_xxz_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 23);

            auto dz_xxz_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 24);

            auto dz_xxz_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 25);

            auto dz_xxz_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 26);

            auto dz_xxz_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 27);

            auto dz_xxz_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 28);

            auto dz_xxz_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 29);

            auto dz_xyy_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 30);

            auto dz_xyy_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 31);

            auto dz_xyy_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 32);

            auto dz_xyy_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 33);

            auto dz_xyy_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 34);

            auto dz_xyy_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 35);

            auto dz_xyy_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 36);

            auto dz_xyy_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 37);

            auto dz_xyy_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 38);

            auto dz_xyy_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 39);

            auto dz_xyz_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 40);

            auto dz_xyz_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 41);

            auto dz_xyz_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 42);

            auto dz_xyz_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 43);

            auto dz_xyz_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 44);

            auto dz_xyz_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 45);

            auto dz_xyz_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 46);

            auto dz_xyz_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 47);

            auto dz_xyz_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 48);

            auto dz_xyz_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 49);

            auto dz_xzz_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 50);

            auto dz_xzz_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 51);

            auto dz_xzz_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 52);

            auto dz_xzz_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 53);

            auto dz_xzz_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 54);

            auto dz_xzz_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 55);

            auto dz_xzz_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 56);

            auto dz_xzz_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 57);

            auto dz_xzz_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 58);

            auto dz_xzz_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 59);

            auto dz_yyy_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 60);

            auto dz_yyy_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 61);

            auto dz_yyy_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 62);

            auto dz_yyy_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 63);

            auto dz_yyy_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 64);

            auto dz_yyy_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 65);

            auto dz_yyy_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 66);

            auto dz_yyy_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 67);

            auto dz_yyy_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 68);

            auto dz_yyy_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 69);

            auto dz_yyz_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 70);

            auto dz_yyz_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 71);

            auto dz_yyz_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 72);

            auto dz_yyz_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 73);

            auto dz_yyz_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 74);

            auto dz_yyz_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 75);

            auto dz_yyz_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 76);

            auto dz_yyz_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 77);

            auto dz_yyz_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 78);

            auto dz_yyz_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 79);

            auto dz_yzz_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 80);

            auto dz_yzz_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 81);

            auto dz_yzz_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 82);

            auto dz_yzz_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 83);

            auto dz_yzz_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 84);

            auto dz_yzz_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 85);

            auto dz_yzz_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 86);

            auto dz_yzz_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 87);

            auto dz_yzz_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 88);

            auto dz_yzz_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 89);

            auto dz_zzz_xxx = primBuffer.data(d1off + 200 * bdim + 100 * idx + 90);

            auto dz_zzz_xxy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 91);

            auto dz_zzz_xxz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 92);

            auto dz_zzz_xyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 93);

            auto dz_zzz_xyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 94);

            auto dz_zzz_xzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 95);

            auto dz_zzz_yyy = primBuffer.data(d1off + 200 * bdim + 100 * idx + 96);

            auto dz_zzz_yyz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 97);

            auto dz_zzz_yzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 98);

            auto dz_zzz_zzz = primBuffer.data(d1off + 200 * bdim + 100 * idx + 99);

            // set up pointers to (D|M|F) integrals

            auto dx_xx_xxx = primBuffer.data(d2off + 60 * idx);

            auto dx_xx_xxy = primBuffer.data(d2off + 60 * idx + 1);

            auto dx_xx_xxz = primBuffer.data(d2off + 60 * idx + 2);

            auto dx_xx_xyy = primBuffer.data(d2off + 60 * idx + 3);

            auto dx_xx_xyz = primBuffer.data(d2off + 60 * idx + 4);

            auto dx_xx_xzz = primBuffer.data(d2off + 60 * idx + 5);

            auto dx_xx_yyy = primBuffer.data(d2off + 60 * idx + 6);

            auto dx_xx_yyz = primBuffer.data(d2off + 60 * idx + 7);

            auto dx_xx_yzz = primBuffer.data(d2off + 60 * idx + 8);

            auto dx_xx_zzz = primBuffer.data(d2off + 60 * idx + 9);

            auto dx_xy_xxx = primBuffer.data(d2off + 60 * idx + 10);

            auto dx_xy_xxy = primBuffer.data(d2off + 60 * idx + 11);

            auto dx_xy_xxz = primBuffer.data(d2off + 60 * idx + 12);

            auto dx_xy_xyy = primBuffer.data(d2off + 60 * idx + 13);

            auto dx_xy_xyz = primBuffer.data(d2off + 60 * idx + 14);

            auto dx_xy_xzz = primBuffer.data(d2off + 60 * idx + 15);

            auto dx_xy_yyy = primBuffer.data(d2off + 60 * idx + 16);

            auto dx_xy_yyz = primBuffer.data(d2off + 60 * idx + 17);

            auto dx_xy_yzz = primBuffer.data(d2off + 60 * idx + 18);

            auto dx_xy_zzz = primBuffer.data(d2off + 60 * idx + 19);

            auto dx_xz_xxx = primBuffer.data(d2off + 60 * idx + 20);

            auto dx_xz_xxy = primBuffer.data(d2off + 60 * idx + 21);

            auto dx_xz_xxz = primBuffer.data(d2off + 60 * idx + 22);

            auto dx_xz_xyy = primBuffer.data(d2off + 60 * idx + 23);

            auto dx_xz_xyz = primBuffer.data(d2off + 60 * idx + 24);

            auto dx_xz_xzz = primBuffer.data(d2off + 60 * idx + 25);

            auto dx_xz_yyy = primBuffer.data(d2off + 60 * idx + 26);

            auto dx_xz_yyz = primBuffer.data(d2off + 60 * idx + 27);

            auto dx_xz_yzz = primBuffer.data(d2off + 60 * idx + 28);

            auto dx_xz_zzz = primBuffer.data(d2off + 60 * idx + 29);

            auto dx_yy_xxx = primBuffer.data(d2off + 60 * idx + 30);

            auto dx_yy_xxy = primBuffer.data(d2off + 60 * idx + 31);

            auto dx_yy_xxz = primBuffer.data(d2off + 60 * idx + 32);

            auto dx_yy_xyy = primBuffer.data(d2off + 60 * idx + 33);

            auto dx_yy_xyz = primBuffer.data(d2off + 60 * idx + 34);

            auto dx_yy_xzz = primBuffer.data(d2off + 60 * idx + 35);

            auto dx_yy_yyy = primBuffer.data(d2off + 60 * idx + 36);

            auto dx_yy_yyz = primBuffer.data(d2off + 60 * idx + 37);

            auto dx_yy_yzz = primBuffer.data(d2off + 60 * idx + 38);

            auto dx_yy_zzz = primBuffer.data(d2off + 60 * idx + 39);

            auto dx_yz_xxx = primBuffer.data(d2off + 60 * idx + 40);

            auto dx_yz_xxy = primBuffer.data(d2off + 60 * idx + 41);

            auto dx_yz_xxz = primBuffer.data(d2off + 60 * idx + 42);

            auto dx_yz_xyy = primBuffer.data(d2off + 60 * idx + 43);

            auto dx_yz_xyz = primBuffer.data(d2off + 60 * idx + 44);

            auto dx_yz_xzz = primBuffer.data(d2off + 60 * idx + 45);

            auto dx_yz_yyy = primBuffer.data(d2off + 60 * idx + 46);

            auto dx_yz_yyz = primBuffer.data(d2off + 60 * idx + 47);

            auto dx_yz_yzz = primBuffer.data(d2off + 60 * idx + 48);

            auto dx_yz_zzz = primBuffer.data(d2off + 60 * idx + 49);

            auto dx_zz_xxx = primBuffer.data(d2off + 60 * idx + 50);

            auto dx_zz_xxy = primBuffer.data(d2off + 60 * idx + 51);

            auto dx_zz_xxz = primBuffer.data(d2off + 60 * idx + 52);

            auto dx_zz_xyy = primBuffer.data(d2off + 60 * idx + 53);

            auto dx_zz_xyz = primBuffer.data(d2off + 60 * idx + 54);

            auto dx_zz_xzz = primBuffer.data(d2off + 60 * idx + 55);

            auto dx_zz_yyy = primBuffer.data(d2off + 60 * idx + 56);

            auto dx_zz_yyz = primBuffer.data(d2off + 60 * idx + 57);

            auto dx_zz_yzz = primBuffer.data(d2off + 60 * idx + 58);

            auto dx_zz_zzz = primBuffer.data(d2off + 60 * idx + 59);

            auto dy_xx_xxx = primBuffer.data(d2off + 60 * bdim + 60 * idx);

            auto dy_xx_xxy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 1);

            auto dy_xx_xxz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 2);

            auto dy_xx_xyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 3);

            auto dy_xx_xyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 4);

            auto dy_xx_xzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 5);

            auto dy_xx_yyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 6);

            auto dy_xx_yyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 7);

            auto dy_xx_yzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 8);

            auto dy_xx_zzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 9);

            auto dy_xy_xxx = primBuffer.data(d2off + 60 * bdim + 60 * idx + 10);

            auto dy_xy_xxy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 11);

            auto dy_xy_xxz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 12);

            auto dy_xy_xyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 13);

            auto dy_xy_xyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 14);

            auto dy_xy_xzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 15);

            auto dy_xy_yyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 16);

            auto dy_xy_yyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 17);

            auto dy_xy_yzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 18);

            auto dy_xy_zzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 19);

            auto dy_xz_xxx = primBuffer.data(d2off + 60 * bdim + 60 * idx + 20);

            auto dy_xz_xxy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 21);

            auto dy_xz_xxz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 22);

            auto dy_xz_xyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 23);

            auto dy_xz_xyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 24);

            auto dy_xz_xzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 25);

            auto dy_xz_yyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 26);

            auto dy_xz_yyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 27);

            auto dy_xz_yzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 28);

            auto dy_xz_zzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 29);

            auto dy_yy_xxx = primBuffer.data(d2off + 60 * bdim + 60 * idx + 30);

            auto dy_yy_xxy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 31);

            auto dy_yy_xxz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 32);

            auto dy_yy_xyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 33);

            auto dy_yy_xyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 34);

            auto dy_yy_xzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 35);

            auto dy_yy_yyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 36);

            auto dy_yy_yyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 37);

            auto dy_yy_yzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 38);

            auto dy_yy_zzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 39);

            auto dy_yz_xxx = primBuffer.data(d2off + 60 * bdim + 60 * idx + 40);

            auto dy_yz_xxy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 41);

            auto dy_yz_xxz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 42);

            auto dy_yz_xyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 43);

            auto dy_yz_xyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 44);

            auto dy_yz_xzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 45);

            auto dy_yz_yyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 46);

            auto dy_yz_yyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 47);

            auto dy_yz_yzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 48);

            auto dy_yz_zzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 49);

            auto dy_zz_xxx = primBuffer.data(d2off + 60 * bdim + 60 * idx + 50);

            auto dy_zz_xxy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 51);

            auto dy_zz_xxz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 52);

            auto dy_zz_xyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 53);

            auto dy_zz_xyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 54);

            auto dy_zz_xzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 55);

            auto dy_zz_yyy = primBuffer.data(d2off + 60 * bdim + 60 * idx + 56);

            auto dy_zz_yyz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 57);

            auto dy_zz_yzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 58);

            auto dy_zz_zzz = primBuffer.data(d2off + 60 * bdim + 60 * idx + 59);

            auto dz_xx_xxx = primBuffer.data(d2off + 120 * bdim + 60 * idx);

            auto dz_xx_xxy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 1);

            auto dz_xx_xxz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 2);

            auto dz_xx_xyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 3);

            auto dz_xx_xyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 4);

            auto dz_xx_xzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 5);

            auto dz_xx_yyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 6);

            auto dz_xx_yyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 7);

            auto dz_xx_yzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 8);

            auto dz_xx_zzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 9);

            auto dz_xy_xxx = primBuffer.data(d2off + 120 * bdim + 60 * idx + 10);

            auto dz_xy_xxy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 11);

            auto dz_xy_xxz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 12);

            auto dz_xy_xyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 13);

            auto dz_xy_xyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 14);

            auto dz_xy_xzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 15);

            auto dz_xy_yyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 16);

            auto dz_xy_yyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 17);

            auto dz_xy_yzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 18);

            auto dz_xy_zzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 19);

            auto dz_xz_xxx = primBuffer.data(d2off + 120 * bdim + 60 * idx + 20);

            auto dz_xz_xxy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 21);

            auto dz_xz_xxz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 22);

            auto dz_xz_xyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 23);

            auto dz_xz_xyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 24);

            auto dz_xz_xzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 25);

            auto dz_xz_yyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 26);

            auto dz_xz_yyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 27);

            auto dz_xz_yzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 28);

            auto dz_xz_zzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 29);

            auto dz_yy_xxx = primBuffer.data(d2off + 120 * bdim + 60 * idx + 30);

            auto dz_yy_xxy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 31);

            auto dz_yy_xxz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 32);

            auto dz_yy_xyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 33);

            auto dz_yy_xyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 34);

            auto dz_yy_xzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 35);

            auto dz_yy_yyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 36);

            auto dz_yy_yyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 37);

            auto dz_yy_yzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 38);

            auto dz_yy_zzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 39);

            auto dz_yz_xxx = primBuffer.data(d2off + 120 * bdim + 60 * idx + 40);

            auto dz_yz_xxy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 41);

            auto dz_yz_xxz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 42);

            auto dz_yz_xyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 43);

            auto dz_yz_xyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 44);

            auto dz_yz_xzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 45);

            auto dz_yz_yyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 46);

            auto dz_yz_yyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 47);

            auto dz_yz_yzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 48);

            auto dz_yz_zzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 49);

            auto dz_zz_xxx = primBuffer.data(d2off + 120 * bdim + 60 * idx + 50);

            auto dz_zz_xxy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 51);

            auto dz_zz_xxz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 52);

            auto dz_zz_xyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 53);

            auto dz_zz_xyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 54);

            auto dz_zz_xzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 55);

            auto dz_zz_yyy = primBuffer.data(d2off + 120 * bdim + 60 * idx + 56);

            auto dz_zz_yyz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 57);

            auto dz_zz_yzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 58);

            auto dz_zz_zzz = primBuffer.data(d2off + 120 * bdim + 60 * idx + 59);

            // set up pointers to (F|M|D) integrals

            auto dx_xxx_xx = primBuffer.data(dkoff + 60 * idx);

            auto dx_xxx_xy = primBuffer.data(dkoff + 60 * idx + 1);

            auto dx_xxx_xz = primBuffer.data(dkoff + 60 * idx + 2);

            auto dx_xxx_yy = primBuffer.data(dkoff + 60 * idx + 3);

            auto dx_xxx_yz = primBuffer.data(dkoff + 60 * idx + 4);

            auto dx_xxx_zz = primBuffer.data(dkoff + 60 * idx + 5);

            auto dx_xxy_xx = primBuffer.data(dkoff + 60 * idx + 6);

            auto dx_xxy_xy = primBuffer.data(dkoff + 60 * idx + 7);

            auto dx_xxy_xz = primBuffer.data(dkoff + 60 * idx + 8);

            auto dx_xxy_yy = primBuffer.data(dkoff + 60 * idx + 9);

            auto dx_xxy_yz = primBuffer.data(dkoff + 60 * idx + 10);

            auto dx_xxy_zz = primBuffer.data(dkoff + 60 * idx + 11);

            auto dx_xxz_xx = primBuffer.data(dkoff + 60 * idx + 12);

            auto dx_xxz_xy = primBuffer.data(dkoff + 60 * idx + 13);

            auto dx_xxz_xz = primBuffer.data(dkoff + 60 * idx + 14);

            auto dx_xxz_yy = primBuffer.data(dkoff + 60 * idx + 15);

            auto dx_xxz_yz = primBuffer.data(dkoff + 60 * idx + 16);

            auto dx_xxz_zz = primBuffer.data(dkoff + 60 * idx + 17);

            auto dx_xyy_xx = primBuffer.data(dkoff + 60 * idx + 18);

            auto dx_xyy_xy = primBuffer.data(dkoff + 60 * idx + 19);

            auto dx_xyy_xz = primBuffer.data(dkoff + 60 * idx + 20);

            auto dx_xyy_yy = primBuffer.data(dkoff + 60 * idx + 21);

            auto dx_xyy_yz = primBuffer.data(dkoff + 60 * idx + 22);

            auto dx_xyy_zz = primBuffer.data(dkoff + 60 * idx + 23);

            auto dx_xyz_xx = primBuffer.data(dkoff + 60 * idx + 24);

            auto dx_xyz_xy = primBuffer.data(dkoff + 60 * idx + 25);

            auto dx_xyz_xz = primBuffer.data(dkoff + 60 * idx + 26);

            auto dx_xyz_yy = primBuffer.data(dkoff + 60 * idx + 27);

            auto dx_xyz_yz = primBuffer.data(dkoff + 60 * idx + 28);

            auto dx_xyz_zz = primBuffer.data(dkoff + 60 * idx + 29);

            auto dx_xzz_xx = primBuffer.data(dkoff + 60 * idx + 30);

            auto dx_xzz_xy = primBuffer.data(dkoff + 60 * idx + 31);

            auto dx_xzz_xz = primBuffer.data(dkoff + 60 * idx + 32);

            auto dx_xzz_yy = primBuffer.data(dkoff + 60 * idx + 33);

            auto dx_xzz_yz = primBuffer.data(dkoff + 60 * idx + 34);

            auto dx_xzz_zz = primBuffer.data(dkoff + 60 * idx + 35);

            auto dx_yyy_xx = primBuffer.data(dkoff + 60 * idx + 36);

            auto dx_yyy_xy = primBuffer.data(dkoff + 60 * idx + 37);

            auto dx_yyy_xz = primBuffer.data(dkoff + 60 * idx + 38);

            auto dx_yyy_yy = primBuffer.data(dkoff + 60 * idx + 39);

            auto dx_yyy_yz = primBuffer.data(dkoff + 60 * idx + 40);

            auto dx_yyy_zz = primBuffer.data(dkoff + 60 * idx + 41);

            auto dx_yyz_xx = primBuffer.data(dkoff + 60 * idx + 42);

            auto dx_yyz_xy = primBuffer.data(dkoff + 60 * idx + 43);

            auto dx_yyz_xz = primBuffer.data(dkoff + 60 * idx + 44);

            auto dx_yyz_yy = primBuffer.data(dkoff + 60 * idx + 45);

            auto dx_yyz_yz = primBuffer.data(dkoff + 60 * idx + 46);

            auto dx_yyz_zz = primBuffer.data(dkoff + 60 * idx + 47);

            auto dx_yzz_xx = primBuffer.data(dkoff + 60 * idx + 48);

            auto dx_yzz_xy = primBuffer.data(dkoff + 60 * idx + 49);

            auto dx_yzz_xz = primBuffer.data(dkoff + 60 * idx + 50);

            auto dx_yzz_yy = primBuffer.data(dkoff + 60 * idx + 51);

            auto dx_yzz_yz = primBuffer.data(dkoff + 60 * idx + 52);

            auto dx_yzz_zz = primBuffer.data(dkoff + 60 * idx + 53);

            auto dx_zzz_xx = primBuffer.data(dkoff + 60 * idx + 54);

            auto dx_zzz_xy = primBuffer.data(dkoff + 60 * idx + 55);

            auto dx_zzz_xz = primBuffer.data(dkoff + 60 * idx + 56);

            auto dx_zzz_yy = primBuffer.data(dkoff + 60 * idx + 57);

            auto dx_zzz_yz = primBuffer.data(dkoff + 60 * idx + 58);

            auto dx_zzz_zz = primBuffer.data(dkoff + 60 * idx + 59);

            auto dy_xxx_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx);

            auto dy_xxx_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 1);

            auto dy_xxx_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 2);

            auto dy_xxx_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 3);

            auto dy_xxx_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 4);

            auto dy_xxx_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 5);

            auto dy_xxy_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 6);

            auto dy_xxy_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 7);

            auto dy_xxy_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 8);

            auto dy_xxy_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 9);

            auto dy_xxy_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 10);

            auto dy_xxy_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 11);

            auto dy_xxz_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 12);

            auto dy_xxz_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 13);

            auto dy_xxz_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 14);

            auto dy_xxz_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 15);

            auto dy_xxz_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 16);

            auto dy_xxz_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 17);

            auto dy_xyy_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 18);

            auto dy_xyy_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 19);

            auto dy_xyy_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 20);

            auto dy_xyy_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 21);

            auto dy_xyy_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 22);

            auto dy_xyy_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 23);

            auto dy_xyz_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 24);

            auto dy_xyz_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 25);

            auto dy_xyz_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 26);

            auto dy_xyz_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 27);

            auto dy_xyz_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 28);

            auto dy_xyz_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 29);

            auto dy_xzz_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 30);

            auto dy_xzz_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 31);

            auto dy_xzz_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 32);

            auto dy_xzz_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 33);

            auto dy_xzz_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 34);

            auto dy_xzz_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 35);

            auto dy_yyy_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 36);

            auto dy_yyy_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 37);

            auto dy_yyy_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 38);

            auto dy_yyy_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 39);

            auto dy_yyy_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 40);

            auto dy_yyy_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 41);

            auto dy_yyz_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 42);

            auto dy_yyz_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 43);

            auto dy_yyz_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 44);

            auto dy_yyz_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 45);

            auto dy_yyz_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 46);

            auto dy_yyz_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 47);

            auto dy_yzz_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 48);

            auto dy_yzz_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 49);

            auto dy_yzz_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 50);

            auto dy_yzz_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 51);

            auto dy_yzz_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 52);

            auto dy_yzz_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 53);

            auto dy_zzz_xx = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 54);

            auto dy_zzz_xy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 55);

            auto dy_zzz_xz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 56);

            auto dy_zzz_yy = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 57);

            auto dy_zzz_yz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 58);

            auto dy_zzz_zz = primBuffer.data(dkoff + 60 * bdim + 60 * idx + 59);

            auto dz_xxx_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx);

            auto dz_xxx_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 1);

            auto dz_xxx_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 2);

            auto dz_xxx_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 3);

            auto dz_xxx_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 4);

            auto dz_xxx_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 5);

            auto dz_xxy_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 6);

            auto dz_xxy_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 7);

            auto dz_xxy_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 8);

            auto dz_xxy_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 9);

            auto dz_xxy_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 10);

            auto dz_xxy_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 11);

            auto dz_xxz_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 12);

            auto dz_xxz_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 13);

            auto dz_xxz_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 14);

            auto dz_xxz_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 15);

            auto dz_xxz_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 16);

            auto dz_xxz_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 17);

            auto dz_xyy_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 18);

            auto dz_xyy_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 19);

            auto dz_xyy_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 20);

            auto dz_xyy_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 21);

            auto dz_xyy_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 22);

            auto dz_xyy_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 23);

            auto dz_xyz_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 24);

            auto dz_xyz_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 25);

            auto dz_xyz_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 26);

            auto dz_xyz_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 27);

            auto dz_xyz_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 28);

            auto dz_xyz_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 29);

            auto dz_xzz_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 30);

            auto dz_xzz_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 31);

            auto dz_xzz_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 32);

            auto dz_xzz_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 33);

            auto dz_xzz_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 34);

            auto dz_xzz_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 35);

            auto dz_yyy_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 36);

            auto dz_yyy_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 37);

            auto dz_yyy_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 38);

            auto dz_yyy_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 39);

            auto dz_yyy_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 40);

            auto dz_yyy_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 41);

            auto dz_yyz_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 42);

            auto dz_yyz_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 43);

            auto dz_yyz_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 44);

            auto dz_yyz_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 45);

            auto dz_yyz_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 46);

            auto dz_yyz_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 47);

            auto dz_yzz_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 48);

            auto dz_yzz_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 49);

            auto dz_yzz_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 50);

            auto dz_yzz_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 51);

            auto dz_yzz_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 52);

            auto dz_yzz_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 53);

            auto dz_zzz_xx = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 54);

            auto dz_zzz_xy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 55);

            auto dz_zzz_xz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 56);

            auto dz_zzz_yy = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 57);

            auto dz_zzz_yz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 58);

            auto dz_zzz_zz = primBuffer.data(dkoff + 120 * bdim + 60 * idx + 59);

            // set up pointers to (F|F) integrals

            auto s_xxx_xxx = primBuffer.data(soff + 100 * idx);

            auto s_xxx_xxy = primBuffer.data(soff + 100 * idx + 1);

            auto s_xxx_xxz = primBuffer.data(soff + 100 * idx + 2);

            auto s_xxx_xyy = primBuffer.data(soff + 100 * idx + 3);

            auto s_xxx_xyz = primBuffer.data(soff + 100 * idx + 4);

            auto s_xxx_xzz = primBuffer.data(soff + 100 * idx + 5);

            auto s_xxx_yyy = primBuffer.data(soff + 100 * idx + 6);

            auto s_xxx_yyz = primBuffer.data(soff + 100 * idx + 7);

            auto s_xxx_yzz = primBuffer.data(soff + 100 * idx + 8);

            auto s_xxx_zzz = primBuffer.data(soff + 100 * idx + 9);

            auto s_xxy_xxx = primBuffer.data(soff + 100 * idx + 10);

            auto s_xxy_xxy = primBuffer.data(soff + 100 * idx + 11);

            auto s_xxy_xxz = primBuffer.data(soff + 100 * idx + 12);

            auto s_xxy_xyy = primBuffer.data(soff + 100 * idx + 13);

            auto s_xxy_xyz = primBuffer.data(soff + 100 * idx + 14);

            auto s_xxy_xzz = primBuffer.data(soff + 100 * idx + 15);

            auto s_xxy_yyy = primBuffer.data(soff + 100 * idx + 16);

            auto s_xxy_yyz = primBuffer.data(soff + 100 * idx + 17);

            auto s_xxy_yzz = primBuffer.data(soff + 100 * idx + 18);

            auto s_xxy_zzz = primBuffer.data(soff + 100 * idx + 19);

            auto s_xxz_xxx = primBuffer.data(soff + 100 * idx + 20);

            auto s_xxz_xxy = primBuffer.data(soff + 100 * idx + 21);

            auto s_xxz_xxz = primBuffer.data(soff + 100 * idx + 22);

            auto s_xxz_xyy = primBuffer.data(soff + 100 * idx + 23);

            auto s_xxz_xyz = primBuffer.data(soff + 100 * idx + 24);

            auto s_xxz_xzz = primBuffer.data(soff + 100 * idx + 25);

            auto s_xxz_yyy = primBuffer.data(soff + 100 * idx + 26);

            auto s_xxz_yyz = primBuffer.data(soff + 100 * idx + 27);

            auto s_xxz_yzz = primBuffer.data(soff + 100 * idx + 28);

            auto s_xxz_zzz = primBuffer.data(soff + 100 * idx + 29);

            auto s_xyy_xxx = primBuffer.data(soff + 100 * idx + 30);

            auto s_xyy_xxy = primBuffer.data(soff + 100 * idx + 31);

            auto s_xyy_xxz = primBuffer.data(soff + 100 * idx + 32);

            auto s_xyy_xyy = primBuffer.data(soff + 100 * idx + 33);

            auto s_xyy_xyz = primBuffer.data(soff + 100 * idx + 34);

            auto s_xyy_xzz = primBuffer.data(soff + 100 * idx + 35);

            auto s_xyy_yyy = primBuffer.data(soff + 100 * idx + 36);

            auto s_xyy_yyz = primBuffer.data(soff + 100 * idx + 37);

            auto s_xyy_yzz = primBuffer.data(soff + 100 * idx + 38);

            auto s_xyy_zzz = primBuffer.data(soff + 100 * idx + 39);

            auto s_xyz_xxx = primBuffer.data(soff + 100 * idx + 40);

            auto s_xyz_xxy = primBuffer.data(soff + 100 * idx + 41);

            auto s_xyz_xxz = primBuffer.data(soff + 100 * idx + 42);

            auto s_xyz_xyy = primBuffer.data(soff + 100 * idx + 43);

            auto s_xyz_xyz = primBuffer.data(soff + 100 * idx + 44);

            auto s_xyz_xzz = primBuffer.data(soff + 100 * idx + 45);

            auto s_xyz_yyy = primBuffer.data(soff + 100 * idx + 46);

            auto s_xyz_yyz = primBuffer.data(soff + 100 * idx + 47);

            auto s_xyz_yzz = primBuffer.data(soff + 100 * idx + 48);

            auto s_xyz_zzz = primBuffer.data(soff + 100 * idx + 49);

            auto s_xzz_xxx = primBuffer.data(soff + 100 * idx + 50);

            auto s_xzz_xxy = primBuffer.data(soff + 100 * idx + 51);

            auto s_xzz_xxz = primBuffer.data(soff + 100 * idx + 52);

            auto s_xzz_xyy = primBuffer.data(soff + 100 * idx + 53);

            auto s_xzz_xyz = primBuffer.data(soff + 100 * idx + 54);

            auto s_xzz_xzz = primBuffer.data(soff + 100 * idx + 55);

            auto s_xzz_yyy = primBuffer.data(soff + 100 * idx + 56);

            auto s_xzz_yyz = primBuffer.data(soff + 100 * idx + 57);

            auto s_xzz_yzz = primBuffer.data(soff + 100 * idx + 58);

            auto s_xzz_zzz = primBuffer.data(soff + 100 * idx + 59);

            auto s_yyy_xxx = primBuffer.data(soff + 100 * idx + 60);

            auto s_yyy_xxy = primBuffer.data(soff + 100 * idx + 61);

            auto s_yyy_xxz = primBuffer.data(soff + 100 * idx + 62);

            auto s_yyy_xyy = primBuffer.data(soff + 100 * idx + 63);

            auto s_yyy_xyz = primBuffer.data(soff + 100 * idx + 64);

            auto s_yyy_xzz = primBuffer.data(soff + 100 * idx + 65);

            auto s_yyy_yyy = primBuffer.data(soff + 100 * idx + 66);

            auto s_yyy_yyz = primBuffer.data(soff + 100 * idx + 67);

            auto s_yyy_yzz = primBuffer.data(soff + 100 * idx + 68);

            auto s_yyy_zzz = primBuffer.data(soff + 100 * idx + 69);

            auto s_yyz_xxx = primBuffer.data(soff + 100 * idx + 70);

            auto s_yyz_xxy = primBuffer.data(soff + 100 * idx + 71);

            auto s_yyz_xxz = primBuffer.data(soff + 100 * idx + 72);

            auto s_yyz_xyy = primBuffer.data(soff + 100 * idx + 73);

            auto s_yyz_xyz = primBuffer.data(soff + 100 * idx + 74);

            auto s_yyz_xzz = primBuffer.data(soff + 100 * idx + 75);

            auto s_yyz_yyy = primBuffer.data(soff + 100 * idx + 76);

            auto s_yyz_yyz = primBuffer.data(soff + 100 * idx + 77);

            auto s_yyz_yzz = primBuffer.data(soff + 100 * idx + 78);

            auto s_yyz_zzz = primBuffer.data(soff + 100 * idx + 79);

            auto s_yzz_xxx = primBuffer.data(soff + 100 * idx + 80);

            auto s_yzz_xxy = primBuffer.data(soff + 100 * idx + 81);

            auto s_yzz_xxz = primBuffer.data(soff + 100 * idx + 82);

            auto s_yzz_xyy = primBuffer.data(soff + 100 * idx + 83);

            auto s_yzz_xyz = primBuffer.data(soff + 100 * idx + 84);

            auto s_yzz_xzz = primBuffer.data(soff + 100 * idx + 85);

            auto s_yzz_yyy = primBuffer.data(soff + 100 * idx + 86);

            auto s_yzz_yyz = primBuffer.data(soff + 100 * idx + 87);

            auto s_yzz_yzz = primBuffer.data(soff + 100 * idx + 88);

            auto s_yzz_zzz = primBuffer.data(soff + 100 * idx + 89);

            auto s_zzz_xxx = primBuffer.data(soff + 100 * idx + 90);

            auto s_zzz_xxy = primBuffer.data(soff + 100 * idx + 91);

            auto s_zzz_xxz = primBuffer.data(soff + 100 * idx + 92);

            auto s_zzz_xyy = primBuffer.data(soff + 100 * idx + 93);

            auto s_zzz_xyz = primBuffer.data(soff + 100 * idx + 94);

            auto s_zzz_xzz = primBuffer.data(soff + 100 * idx + 95);

            auto s_zzz_yyy = primBuffer.data(soff + 100 * idx + 96);

            auto s_zzz_yyz = primBuffer.data(soff + 100 * idx + 97);

            auto s_zzz_yzz = primBuffer.data(soff + 100 * idx + 98);

            auto s_zzz_zzz = primBuffer.data(soff + 100 * idx + 99);

            // set up pointers to (D|F) integrals

            auto s_xx_xxx = primBuffer.data(s1off + 60 * idx);

            auto s_xx_xxy = primBuffer.data(s1off + 60 * idx + 1);

            auto s_xx_xxz = primBuffer.data(s1off + 60 * idx + 2);

            auto s_xx_xyy = primBuffer.data(s1off + 60 * idx + 3);

            auto s_xx_xyz = primBuffer.data(s1off + 60 * idx + 4);

            auto s_xx_xzz = primBuffer.data(s1off + 60 * idx + 5);

            auto s_xx_yyy = primBuffer.data(s1off + 60 * idx + 6);

            auto s_xx_yyz = primBuffer.data(s1off + 60 * idx + 7);

            auto s_xx_yzz = primBuffer.data(s1off + 60 * idx + 8);

            auto s_xx_zzz = primBuffer.data(s1off + 60 * idx + 9);

            auto s_xy_xxx = primBuffer.data(s1off + 60 * idx + 10);

            auto s_xy_xxy = primBuffer.data(s1off + 60 * idx + 11);

            auto s_xy_xxz = primBuffer.data(s1off + 60 * idx + 12);

            auto s_xy_xyy = primBuffer.data(s1off + 60 * idx + 13);

            auto s_xy_xyz = primBuffer.data(s1off + 60 * idx + 14);

            auto s_xy_xzz = primBuffer.data(s1off + 60 * idx + 15);

            auto s_xy_yyy = primBuffer.data(s1off + 60 * idx + 16);

            auto s_xy_yyz = primBuffer.data(s1off + 60 * idx + 17);

            auto s_xy_yzz = primBuffer.data(s1off + 60 * idx + 18);

            auto s_xy_zzz = primBuffer.data(s1off + 60 * idx + 19);

            auto s_xz_xxx = primBuffer.data(s1off + 60 * idx + 20);

            auto s_xz_xxy = primBuffer.data(s1off + 60 * idx + 21);

            auto s_xz_xxz = primBuffer.data(s1off + 60 * idx + 22);

            auto s_xz_xyy = primBuffer.data(s1off + 60 * idx + 23);

            auto s_xz_xyz = primBuffer.data(s1off + 60 * idx + 24);

            auto s_xz_xzz = primBuffer.data(s1off + 60 * idx + 25);

            auto s_xz_yyy = primBuffer.data(s1off + 60 * idx + 26);

            auto s_xz_yyz = primBuffer.data(s1off + 60 * idx + 27);

            auto s_xz_yzz = primBuffer.data(s1off + 60 * idx + 28);

            auto s_xz_zzz = primBuffer.data(s1off + 60 * idx + 29);

            auto s_yy_xxx = primBuffer.data(s1off + 60 * idx + 30);

            auto s_yy_xxy = primBuffer.data(s1off + 60 * idx + 31);

            auto s_yy_xxz = primBuffer.data(s1off + 60 * idx + 32);

            auto s_yy_xyy = primBuffer.data(s1off + 60 * idx + 33);

            auto s_yy_xyz = primBuffer.data(s1off + 60 * idx + 34);

            auto s_yy_xzz = primBuffer.data(s1off + 60 * idx + 35);

            auto s_yy_yyy = primBuffer.data(s1off + 60 * idx + 36);

            auto s_yy_yyz = primBuffer.data(s1off + 60 * idx + 37);

            auto s_yy_yzz = primBuffer.data(s1off + 60 * idx + 38);

            auto s_yy_zzz = primBuffer.data(s1off + 60 * idx + 39);

            auto s_yz_xxx = primBuffer.data(s1off + 60 * idx + 40);

            auto s_yz_xxy = primBuffer.data(s1off + 60 * idx + 41);

            auto s_yz_xxz = primBuffer.data(s1off + 60 * idx + 42);

            auto s_yz_xyy = primBuffer.data(s1off + 60 * idx + 43);

            auto s_yz_xyz = primBuffer.data(s1off + 60 * idx + 44);

            auto s_yz_xzz = primBuffer.data(s1off + 60 * idx + 45);

            auto s_yz_yyy = primBuffer.data(s1off + 60 * idx + 46);

            auto s_yz_yyz = primBuffer.data(s1off + 60 * idx + 47);

            auto s_yz_yzz = primBuffer.data(s1off + 60 * idx + 48);

            auto s_yz_zzz = primBuffer.data(s1off + 60 * idx + 49);

            auto s_zz_xxx = primBuffer.data(s1off + 60 * idx + 50);

            auto s_zz_xxy = primBuffer.data(s1off + 60 * idx + 51);

            auto s_zz_xxz = primBuffer.data(s1off + 60 * idx + 52);

            auto s_zz_xyy = primBuffer.data(s1off + 60 * idx + 53);

            auto s_zz_xyz = primBuffer.data(s1off + 60 * idx + 54);

            auto s_zz_xzz = primBuffer.data(s1off + 60 * idx + 55);

            auto s_zz_yyy = primBuffer.data(s1off + 60 * idx + 56);

            auto s_zz_yyz = primBuffer.data(s1off + 60 * idx + 57);

            auto s_zz_yzz = primBuffer.data(s1off + 60 * idx + 58);

            auto s_zz_zzz = primBuffer.data(s1off + 60 * idx + 59);

            // set up pointers to (P|F) integrals

            auto s_x_xxx = primBuffer.data(s2off + 30 * idx);

            auto s_x_xxy = primBuffer.data(s2off + 30 * idx + 1);

            auto s_x_xxz = primBuffer.data(s2off + 30 * idx + 2);

            auto s_x_xyy = primBuffer.data(s2off + 30 * idx + 3);

            auto s_x_xyz = primBuffer.data(s2off + 30 * idx + 4);

            auto s_x_xzz = primBuffer.data(s2off + 30 * idx + 5);

            auto s_x_yyy = primBuffer.data(s2off + 30 * idx + 6);

            auto s_x_yyz = primBuffer.data(s2off + 30 * idx + 7);

            auto s_x_yzz = primBuffer.data(s2off + 30 * idx + 8);

            auto s_x_zzz = primBuffer.data(s2off + 30 * idx + 9);

            auto s_y_xxx = primBuffer.data(s2off + 30 * idx + 10);

            auto s_y_xxy = primBuffer.data(s2off + 30 * idx + 11);

            auto s_y_xxz = primBuffer.data(s2off + 30 * idx + 12);

            auto s_y_xyy = primBuffer.data(s2off + 30 * idx + 13);

            auto s_y_xyz = primBuffer.data(s2off + 30 * idx + 14);

            auto s_y_xzz = primBuffer.data(s2off + 30 * idx + 15);

            auto s_y_yyy = primBuffer.data(s2off + 30 * idx + 16);

            auto s_y_yyz = primBuffer.data(s2off + 30 * idx + 17);

            auto s_y_yzz = primBuffer.data(s2off + 30 * idx + 18);

            auto s_y_zzz = primBuffer.data(s2off + 30 * idx + 19);

            auto s_z_xxx = primBuffer.data(s2off + 30 * idx + 20);

            auto s_z_xxy = primBuffer.data(s2off + 30 * idx + 21);

            auto s_z_xxz = primBuffer.data(s2off + 30 * idx + 22);

            auto s_z_xyy = primBuffer.data(s2off + 30 * idx + 23);

            auto s_z_xyz = primBuffer.data(s2off + 30 * idx + 24);

            auto s_z_xzz = primBuffer.data(s2off + 30 * idx + 25);

            auto s_z_yyy = primBuffer.data(s2off + 30 * idx + 26);

            auto s_z_yyz = primBuffer.data(s2off + 30 * idx + 27);

            auto s_z_yzz = primBuffer.data(s2off + 30 * idx + 28);

            auto s_z_zzz = primBuffer.data(s2off + 30 * idx + 29);

            // set up pointers to (D|D) integrals

            auto s_xx_xx = primBuffer.data(skoff + 36 * idx);

            auto s_xx_xy = primBuffer.data(skoff + 36 * idx + 1);

            auto s_xx_xz = primBuffer.data(skoff + 36 * idx + 2);

            auto s_xx_yy = primBuffer.data(skoff + 36 * idx + 3);

            auto s_xx_yz = primBuffer.data(skoff + 36 * idx + 4);

            auto s_xx_zz = primBuffer.data(skoff + 36 * idx + 5);

            auto s_xy_xx = primBuffer.data(skoff + 36 * idx + 6);

            auto s_xy_xy = primBuffer.data(skoff + 36 * idx + 7);

            auto s_xy_xz = primBuffer.data(skoff + 36 * idx + 8);

            auto s_xy_yy = primBuffer.data(skoff + 36 * idx + 9);

            auto s_xy_yz = primBuffer.data(skoff + 36 * idx + 10);

            auto s_xy_zz = primBuffer.data(skoff + 36 * idx + 11);

            auto s_xz_xx = primBuffer.data(skoff + 36 * idx + 12);

            auto s_xz_xy = primBuffer.data(skoff + 36 * idx + 13);

            auto s_xz_xz = primBuffer.data(skoff + 36 * idx + 14);

            auto s_xz_yy = primBuffer.data(skoff + 36 * idx + 15);

            auto s_xz_yz = primBuffer.data(skoff + 36 * idx + 16);

            auto s_xz_zz = primBuffer.data(skoff + 36 * idx + 17);

            auto s_yy_xx = primBuffer.data(skoff + 36 * idx + 18);

            auto s_yy_xy = primBuffer.data(skoff + 36 * idx + 19);

            auto s_yy_xz = primBuffer.data(skoff + 36 * idx + 20);

            auto s_yy_yy = primBuffer.data(skoff + 36 * idx + 21);

            auto s_yy_yz = primBuffer.data(skoff + 36 * idx + 22);

            auto s_yy_zz = primBuffer.data(skoff + 36 * idx + 23);

            auto s_yz_xx = primBuffer.data(skoff + 36 * idx + 24);

            auto s_yz_xy = primBuffer.data(skoff + 36 * idx + 25);

            auto s_yz_xz = primBuffer.data(skoff + 36 * idx + 26);

            auto s_yz_yy = primBuffer.data(skoff + 36 * idx + 27);

            auto s_yz_yz = primBuffer.data(skoff + 36 * idx + 28);

            auto s_yz_zz = primBuffer.data(skoff + 36 * idx + 29);

            auto s_zz_xx = primBuffer.data(skoff + 36 * idx + 30);

            auto s_zz_xy = primBuffer.data(skoff + 36 * idx + 31);

            auto s_zz_xz = primBuffer.data(skoff + 36 * idx + 32);

            auto s_zz_yy = primBuffer.data(skoff + 36 * idx + 33);

            auto s_zz_yz = primBuffer.data(skoff + 36 * idx + 34);

            auto s_zz_zz = primBuffer.data(skoff + 36 * idx + 35);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxxx_xxx, dx_xxxx_xxy,\
                                     dx_xxxx_xxz, dx_xxxx_xyy, dx_xxxx_xyz, dx_xxxx_xzz,\
                                     dx_xxxx_yyy, dx_xxxx_yyz, dx_xxxx_yzz, dx_xxxx_zzz,\
                                     dx_xxxy_xxx, dx_xxxy_xxy, dx_xxxy_xxz, dx_xxxy_xyy,\
                                     dx_xxxy_xyz, dx_xxxy_xzz, dx_xxxy_yyy, dx_xxxy_yyz,\
                                     dx_xxxy_yzz, dx_xxxy_zzz, dx_xxxz_xxx, dx_xxxz_xxy,\
                                     dx_xxxz_xxz, dx_xxxz_xyy, dx_xxxz_xyz, dx_xxxz_xzz,\
                                     dx_xxxz_yyy, dx_xxxz_yyz, dx_xxxz_yzz, dx_xxxz_zzz,\
                                     dx_xxyy_xxx, dx_xxyy_xxy, dx_xxyy_xxz, dx_xxyy_xyy,\
                                     dx_xxyy_xyz, dx_xxyy_xzz, dx_xxyy_yyy, dx_xxyy_yyz,\
                                     dx_xxyy_yzz, dx_xxyy_zzz, dx_xxyz_xxx, dx_xxyz_xxy,\
                                     dx_xxyz_xxz, dx_xxyz_xyy, dx_xxyz_xyz, dx_xxyz_xzz,\
                                     dx_xxyz_yyy, dx_xxyz_yyz, dx_xxyz_yzz, dx_xxyz_zzz,\
                                     dx_xxzz_xxx, dx_xxzz_xxy, dx_xxzz_xxz, dx_xxzz_xyy,\
                                     dx_xxzz_xyz, dx_xxzz_xzz, dx_xxzz_yyy, dx_xxzz_yyz,\
                                     dx_xxzz_yzz, dx_xxzz_zzz, dx_xyyy_xxx, dx_xyyy_xxy,\
                                     dx_xyyy_xxz, dx_xyyy_xyy, dx_xyyy_xyz, dx_xyyy_xzz,\
                                     dx_xyyy_yyy, dx_xyyy_yyz, dx_xyyy_yzz, dx_xyyy_zzz,\
                                     dx_xyyz_xxx, dx_xyyz_xxy, dx_xyyz_xxz, dx_xyyz_xyy,\
                                     dx_xyyz_xyz, dx_xyyz_xzz, dx_xyyz_yyy, dx_xyyz_yyz,\
                                     dx_xyyz_yzz, dx_xyyz_zzz, dx_xyzz_xxx, dx_xyzz_xxy,\
                                     dx_xyzz_xxz, dx_xyzz_xyy, dx_xyzz_xyz, dx_xyzz_xzz,\
                                     dx_xyzz_yyy, dx_xyzz_yyz, dx_xyzz_yzz, dx_xyzz_zzz,\
                                     dx_xzzz_xxx, dx_xzzz_xxy, dx_xzzz_xxz, dx_xzzz_xyy,\
                                     dx_xzzz_xyz, dx_xzzz_xzz, dx_xzzz_yyy, dx_xzzz_yyz,\
                                     dx_xzzz_yzz, dx_xzzz_zzz, dx_yyyy_xxx, dx_yyyy_xxy,\
                                     dx_yyyy_xxz, dx_yyyy_xyy, dx_yyyy_xyz, dx_yyyy_xzz,\
                                     dx_yyyy_yyy, dx_yyyy_yyz, dx_yyyy_yzz, dx_yyyy_zzz,\
                                     dx_yyyz_xxx, dx_yyyz_xxy, dx_yyyz_xxz, dx_yyyz_xyy,\
                                     dx_yyyz_xyz, dx_yyyz_xzz, dx_yyyz_yyy, dx_yyyz_yyz,\
                                     dx_yyyz_yzz, dx_yyyz_zzz, dx_yyzz_xxx, dx_yyzz_xxy,\
                                     dx_yyzz_xxz, dx_yyzz_xyy, dx_yyzz_xyz, dx_yyzz_xzz,\
                                     dx_yyzz_yyy, dx_yyzz_yyz, dx_yyzz_yzz, dx_yyzz_zzz,\
                                     dx_yzzz_xxx, dx_yzzz_xxy, dx_yzzz_xxz, dx_yzzz_xyy,\
                                     dx_yzzz_xyz, dx_yzzz_xzz, dx_yzzz_yyy, dx_yzzz_yyz,\
                                     dx_yzzz_yzz, dx_yzzz_zzz, dx_zzzz_xxx, dx_zzzz_xxy,\
                                     dx_zzzz_xxz, dx_zzzz_xyy, dx_zzzz_xyz, dx_zzzz_xzz,\
                                     dx_zzzz_yyy, dx_zzzz_yyz, dx_zzzz_yzz, dx_zzzz_zzz,\
                                     dy_xxxx_xxx, dy_xxxx_xxy, dy_xxxx_xxz, dy_xxxx_xyy,\
                                     dy_xxxx_xyz, dy_xxxx_xzz, dy_xxxx_yyy, dy_xxxx_yyz,\
                                     dy_xxxx_yzz, dy_xxxx_zzz, dy_xxxy_xxx, dy_xxxy_xxy,\
                                     dy_xxxy_xxz, dy_xxxy_xyy, dy_xxxy_xyz, dy_xxxy_xzz,\
                                     dy_xxxy_yyy, dy_xxxy_yyz, dy_xxxy_yzz, dy_xxxy_zzz,\
                                     dy_xxxz_xxx, dy_xxxz_xxy, dy_xxxz_xxz, dy_xxxz_xyy,\
                                     dy_xxxz_xyz, dy_xxxz_xzz, dy_xxxz_yyy, dy_xxxz_yyz,\
                                     dy_xxxz_yzz, dy_xxxz_zzz, dy_xxyy_xxx, dy_xxyy_xxy,\
                                     dy_xxyy_xxz, dy_xxyy_xyy, dy_xxyy_xyz, dy_xxyy_xzz,\
                                     dy_xxyy_yyy, dy_xxyy_yyz, dy_xxyy_yzz, dy_xxyy_zzz,\
                                     dy_xxyz_xxx, dy_xxyz_xxy, dy_xxyz_xxz, dy_xxyz_xyy,\
                                     dy_xxyz_xyz, dy_xxyz_xzz, dy_xxyz_yyy, dy_xxyz_yyz,\
                                     dy_xxyz_yzz, dy_xxyz_zzz, dy_xxzz_xxx, dy_xxzz_xxy,\
                                     dy_xxzz_xxz, dy_xxzz_xyy, dy_xxzz_xyz, dy_xxzz_xzz,\
                                     dy_xxzz_yyy, dy_xxzz_yyz, dy_xxzz_yzz, dy_xxzz_zzz,\
                                     dy_xyyy_xxx, dy_xyyy_xxy, dy_xyyy_xxz, dy_xyyy_xyy,\
                                     dy_xyyy_xyz, dy_xyyy_xzz, dy_xyyy_yyy, dy_xyyy_yyz,\
                                     dy_xyyy_yzz, dy_xyyy_zzz, dy_xyyz_xxx, dy_xyyz_xxy,\
                                     dy_xyyz_xxz, dy_xyyz_xyy, dy_xyyz_xyz, dy_xyyz_xzz,\
                                     dy_xyyz_yyy, dy_xyyz_yyz, dy_xyyz_yzz, dy_xyyz_zzz,\
                                     dy_xyzz_xxx, dy_xyzz_xxy, dy_xyzz_xxz, dy_xyzz_xyy,\
                                     dy_xyzz_xyz, dy_xyzz_xzz, dy_xyzz_yyy, dy_xyzz_yyz,\
                                     dy_xyzz_yzz, dy_xyzz_zzz, dy_xzzz_xxx, dy_xzzz_xxy,\
                                     dy_xzzz_xxz, dy_xzzz_xyy, dy_xzzz_xyz, dy_xzzz_xzz,\
                                     dy_xzzz_yyy, dy_xzzz_yyz, dy_xzzz_yzz, dy_xzzz_zzz,\
                                     dy_yyyy_xxx, dy_yyyy_xxy, dy_yyyy_xxz, dy_yyyy_xyy,\
                                     dy_yyyy_xyz, dy_yyyy_xzz, dy_yyyy_yyy, dy_yyyy_yyz,\
                                     dy_yyyy_yzz, dy_yyyy_zzz, dy_yyyz_xxx, dy_yyyz_xxy,\
                                     dy_yyyz_xxz, dy_yyyz_xyy, dy_yyyz_xyz, dy_yyyz_xzz,\
                                     dy_yyyz_yyy, dy_yyyz_yyz, dy_yyyz_yzz, dy_yyyz_zzz,\
                                     dy_yyzz_xxx, dy_yyzz_xxy, dy_yyzz_xxz, dy_yyzz_xyy,\
                                     dy_yyzz_xyz, dy_yyzz_xzz, dy_yyzz_yyy, dy_yyzz_yyz,\
                                     dy_yyzz_yzz, dy_yyzz_zzz, dy_yzzz_xxx, dy_yzzz_xxy,\
                                     dy_yzzz_xxz, dy_yzzz_xyy, dy_yzzz_xyz, dy_yzzz_xzz,\
                                     dy_yzzz_yyy, dy_yzzz_yyz, dy_yzzz_yzz, dy_yzzz_zzz,\
                                     dy_zzzz_xxx, dy_zzzz_xxy, dy_zzzz_xxz, dy_zzzz_xyy,\
                                     dy_zzzz_xyz, dy_zzzz_xzz, dy_zzzz_yyy, dy_zzzz_yyz,\
                                     dy_zzzz_yzz, dy_zzzz_zzz, dz_xxxx_xxx, dz_xxxx_xxy,\
                                     dz_xxxx_xxz, dz_xxxx_xyy, dz_xxxx_xyz, dz_xxxx_xzz,\
                                     dz_xxxx_yyy, dz_xxxx_yyz, dz_xxxx_yzz, dz_xxxx_zzz,\
                                     dz_xxxy_xxx, dz_xxxy_xxy, dz_xxxy_xxz, dz_xxxy_xyy,\
                                     dz_xxxy_xyz, dz_xxxy_xzz, dz_xxxy_yyy, dz_xxxy_yyz,\
                                     dz_xxxy_yzz, dz_xxxy_zzz, dz_xxxz_xxx, dz_xxxz_xxy,\
                                     dz_xxxz_xxz, dz_xxxz_xyy, dz_xxxz_xyz, dz_xxxz_xzz,\
                                     dz_xxxz_yyy, dz_xxxz_yyz, dz_xxxz_yzz, dz_xxxz_zzz,\
                                     dz_xxyy_xxx, dz_xxyy_xxy, dz_xxyy_xxz, dz_xxyy_xyy,\
                                     dz_xxyy_xyz, dz_xxyy_xzz, dz_xxyy_yyy, dz_xxyy_yyz,\
                                     dz_xxyy_yzz, dz_xxyy_zzz, dz_xxyz_xxx, dz_xxyz_xxy,\
                                     dz_xxyz_xxz, dz_xxyz_xyy, dz_xxyz_xyz, dz_xxyz_xzz,\
                                     dz_xxyz_yyy, dz_xxyz_yyz, dz_xxyz_yzz, dz_xxyz_zzz,\
                                     dz_xxzz_xxx, dz_xxzz_xxy, dz_xxzz_xxz, dz_xxzz_xyy,\
                                     dz_xxzz_xyz, dz_xxzz_xzz, dz_xxzz_yyy, dz_xxzz_yyz,\
                                     dz_xxzz_yzz, dz_xxzz_zzz, dz_xyyy_xxx, dz_xyyy_xxy,\
                                     dz_xyyy_xxz, dz_xyyy_xyy, dz_xyyy_xyz, dz_xyyy_xzz,\
                                     dz_xyyy_yyy, dz_xyyy_yyz, dz_xyyy_yzz, dz_xyyy_zzz,\
                                     dz_xyyz_xxx, dz_xyyz_xxy, dz_xyyz_xxz, dz_xyyz_xyy,\
                                     dz_xyyz_xyz, dz_xyyz_xzz, dz_xyyz_yyy, dz_xyyz_yyz,\
                                     dz_xyyz_yzz, dz_xyyz_zzz, dz_xyzz_xxx, dz_xyzz_xxy,\
                                     dz_xyzz_xxz, dz_xyzz_xyy, dz_xyzz_xyz, dz_xyzz_xzz,\
                                     dz_xyzz_yyy, dz_xyzz_yyz, dz_xyzz_yzz, dz_xyzz_zzz,\
                                     dz_xzzz_xxx, dz_xzzz_xxy, dz_xzzz_xxz, dz_xzzz_xyy,\
                                     dz_xzzz_xyz, dz_xzzz_xzz, dz_xzzz_yyy, dz_xzzz_yyz,\
                                     dz_xzzz_yzz, dz_xzzz_zzz, dz_yyyy_xxx, dz_yyyy_xxy,\
                                     dz_yyyy_xxz, dz_yyyy_xyy, dz_yyyy_xyz, dz_yyyy_xzz,\
                                     dz_yyyy_yyy, dz_yyyy_yyz, dz_yyyy_yzz, dz_yyyy_zzz,\
                                     dz_yyyz_xxx, dz_yyyz_xxy, dz_yyyz_xxz, dz_yyyz_xyy,\
                                     dz_yyyz_xyz, dz_yyyz_xzz, dz_yyyz_yyy, dz_yyyz_yyz,\
                                     dz_yyyz_yzz, dz_yyyz_zzz, dz_yyzz_xxx, dz_yyzz_xxy,\
                                     dz_yyzz_xxz, dz_yyzz_xyy, dz_yyzz_xyz, dz_yyzz_xzz,\
                                     dz_yyzz_yyy, dz_yyzz_yyz, dz_yyzz_yzz, dz_yyzz_zzz,\
                                     dz_yzzz_xxx, dz_yzzz_xxy, dz_yzzz_xxz, dz_yzzz_xyy,\
                                     dz_yzzz_xyz, dz_yzzz_xzz, dz_yzzz_yyy, dz_yzzz_yyz,\
                                     dz_yzzz_yzz, dz_yzzz_zzz, dz_zzzz_xxx, dz_zzzz_xxy,\
                                     dz_zzzz_xxz, dz_zzzz_xyy, dz_zzzz_xyz, dz_zzzz_xzz,\
                                     dz_zzzz_yyy, dz_zzzz_yyz, dz_zzzz_yzz, dz_zzzz_zzz,\
                                     dx_xxx_xxx, dx_xxx_xxy, dx_xxx_xxz, dx_xxx_xyy,\
                                     dx_xxx_xyz, dx_xxx_xzz, dx_xxx_yyy, dx_xxx_yyz,\
                                     dx_xxx_yzz, dx_xxx_zzz, dx_xxy_xxx, dx_xxy_xxy,\
                                     dx_xxy_xxz, dx_xxy_xyy, dx_xxy_xyz, dx_xxy_xzz,\
                                     dx_xxy_yyy, dx_xxy_yyz, dx_xxy_yzz, dx_xxy_zzz,\
                                     dx_xxz_xxx, dx_xxz_xxy, dx_xxz_xxz, dx_xxz_xyy,\
                                     dx_xxz_xyz, dx_xxz_xzz, dx_xxz_yyy, dx_xxz_yyz,\
                                     dx_xxz_yzz, dx_xxz_zzz, dx_xyy_xxx, dx_xyy_xxy,\
                                     dx_xyy_xxz, dx_xyy_xyy, dx_xyy_xyz, dx_xyy_xzz,\
                                     dx_xyy_yyy, dx_xyy_yyz, dx_xyy_yzz, dx_xyy_zzz,\
                                     dx_xyz_xxx, dx_xyz_xxy, dx_xyz_xxz, dx_xyz_xyy,\
                                     dx_xyz_xyz, dx_xyz_xzz, dx_xyz_yyy, dx_xyz_yyz,\
                                     dx_xyz_yzz, dx_xyz_zzz, dx_xzz_xxx, dx_xzz_xxy,\
                                     dx_xzz_xxz, dx_xzz_xyy, dx_xzz_xyz, dx_xzz_xzz,\
                                     dx_xzz_yyy, dx_xzz_yyz, dx_xzz_yzz, dx_xzz_zzz,\
                                     dx_yyy_xxx, dx_yyy_xxy, dx_yyy_xxz, dx_yyy_xyy,\
                                     dx_yyy_xyz, dx_yyy_xzz, dx_yyy_yyy, dx_yyy_yyz,\
                                     dx_yyy_yzz, dx_yyy_zzz, dx_yyz_xxx, dx_yyz_xxy,\
                                     dx_yyz_xxz, dx_yyz_xyy, dx_yyz_xyz, dx_yyz_xzz,\
                                     dx_yyz_yyy, dx_yyz_yyz, dx_yyz_yzz, dx_yyz_zzz,\
                                     dx_yzz_xxx, dx_yzz_xxy, dx_yzz_xxz, dx_yzz_xyy,\
                                     dx_yzz_xyz, dx_yzz_xzz, dx_yzz_yyy, dx_yzz_yyz,\
                                     dx_yzz_yzz, dx_yzz_zzz, dx_zzz_xxx, dx_zzz_xxy,\
                                     dx_zzz_xxz, dx_zzz_xyy, dx_zzz_xyz, dx_zzz_xzz,\
                                     dx_zzz_yyy, dx_zzz_yyz, dx_zzz_yzz, dx_zzz_zzz,\
                                     dy_xxx_xxx, dy_xxx_xxy, dy_xxx_xxz, dy_xxx_xyy,\
                                     dy_xxx_xyz, dy_xxx_xzz, dy_xxx_yyy, dy_xxx_yyz,\
                                     dy_xxx_yzz, dy_xxx_zzz, dy_xxy_xxx, dy_xxy_xxy,\
                                     dy_xxy_xxz, dy_xxy_xyy, dy_xxy_xyz, dy_xxy_xzz,\
                                     dy_xxy_yyy, dy_xxy_yyz, dy_xxy_yzz, dy_xxy_zzz,\
                                     dy_xxz_xxx, dy_xxz_xxy, dy_xxz_xxz, dy_xxz_xyy,\
                                     dy_xxz_xyz, dy_xxz_xzz, dy_xxz_yyy, dy_xxz_yyz,\
                                     dy_xxz_yzz, dy_xxz_zzz, dy_xyy_xxx, dy_xyy_xxy,\
                                     dy_xyy_xxz, dy_xyy_xyy, dy_xyy_xyz, dy_xyy_xzz,\
                                     dy_xyy_yyy, dy_xyy_yyz, dy_xyy_yzz, dy_xyy_zzz,\
                                     dy_xyz_xxx, dy_xyz_xxy, dy_xyz_xxz, dy_xyz_xyy,\
                                     dy_xyz_xyz, dy_xyz_xzz, dy_xyz_yyy, dy_xyz_yyz,\
                                     dy_xyz_yzz, dy_xyz_zzz, dy_xzz_xxx, dy_xzz_xxy,\
                                     dy_xzz_xxz, dy_xzz_xyy, dy_xzz_xyz, dy_xzz_xzz,\
                                     dy_xzz_yyy, dy_xzz_yyz, dy_xzz_yzz, dy_xzz_zzz,\
                                     dy_yyy_xxx, dy_yyy_xxy, dy_yyy_xxz, dy_yyy_xyy,\
                                     dy_yyy_xyz, dy_yyy_xzz, dy_yyy_yyy, dy_yyy_yyz,\
                                     dy_yyy_yzz, dy_yyy_zzz, dy_yyz_xxx, dy_yyz_xxy,\
                                     dy_yyz_xxz, dy_yyz_xyy, dy_yyz_xyz, dy_yyz_xzz,\
                                     dy_yyz_yyy, dy_yyz_yyz, dy_yyz_yzz, dy_yyz_zzz,\
                                     dy_yzz_xxx, dy_yzz_xxy, dy_yzz_xxz, dy_yzz_xyy,\
                                     dy_yzz_xyz, dy_yzz_xzz, dy_yzz_yyy, dy_yzz_yyz,\
                                     dy_yzz_yzz, dy_yzz_zzz, dy_zzz_xxx, dy_zzz_xxy,\
                                     dy_zzz_xxz, dy_zzz_xyy, dy_zzz_xyz, dy_zzz_xzz,\
                                     dy_zzz_yyy, dy_zzz_yyz, dy_zzz_yzz, dy_zzz_zzz,\
                                     dz_xxx_xxx, dz_xxx_xxy, dz_xxx_xxz, dz_xxx_xyy,\
                                     dz_xxx_xyz, dz_xxx_xzz, dz_xxx_yyy, dz_xxx_yyz,\
                                     dz_xxx_yzz, dz_xxx_zzz, dz_xxy_xxx, dz_xxy_xxy,\
                                     dz_xxy_xxz, dz_xxy_xyy, dz_xxy_xyz, dz_xxy_xzz,\
                                     dz_xxy_yyy, dz_xxy_yyz, dz_xxy_yzz, dz_xxy_zzz,\
                                     dz_xxz_xxx, dz_xxz_xxy, dz_xxz_xxz, dz_xxz_xyy,\
                                     dz_xxz_xyz, dz_xxz_xzz, dz_xxz_yyy, dz_xxz_yyz,\
                                     dz_xxz_yzz, dz_xxz_zzz, dz_xyy_xxx, dz_xyy_xxy,\
                                     dz_xyy_xxz, dz_xyy_xyy, dz_xyy_xyz, dz_xyy_xzz,\
                                     dz_xyy_yyy, dz_xyy_yyz, dz_xyy_yzz, dz_xyy_zzz,\
                                     dz_xyz_xxx, dz_xyz_xxy, dz_xyz_xxz, dz_xyz_xyy,\
                                     dz_xyz_xyz, dz_xyz_xzz, dz_xyz_yyy, dz_xyz_yyz,\
                                     dz_xyz_yzz, dz_xyz_zzz, dz_xzz_xxx, dz_xzz_xxy,\
                                     dz_xzz_xxz, dz_xzz_xyy, dz_xzz_xyz, dz_xzz_xzz,\
                                     dz_xzz_yyy, dz_xzz_yyz, dz_xzz_yzz, dz_xzz_zzz,\
                                     dz_yyy_xxx, dz_yyy_xxy, dz_yyy_xxz, dz_yyy_xyy,\
                                     dz_yyy_xyz, dz_yyy_xzz, dz_yyy_yyy, dz_yyy_yyz,\
                                     dz_yyy_yzz, dz_yyy_zzz, dz_yyz_xxx, dz_yyz_xxy,\
                                     dz_yyz_xxz, dz_yyz_xyy, dz_yyz_xyz, dz_yyz_xzz,\
                                     dz_yyz_yyy, dz_yyz_yyz, dz_yyz_yzz, dz_yyz_zzz,\
                                     dz_yzz_xxx, dz_yzz_xxy, dz_yzz_xxz, dz_yzz_xyy,\
                                     dz_yzz_xyz, dz_yzz_xzz, dz_yzz_yyy, dz_yzz_yyz,\
                                     dz_yzz_yzz, dz_yzz_zzz, dz_zzz_xxx, dz_zzz_xxy,\
                                     dz_zzz_xxz, dz_zzz_xyy, dz_zzz_xyz, dz_zzz_xzz,\
                                     dz_zzz_yyy, dz_zzz_yyz, dz_zzz_yzz, dz_zzz_zzz,\
                                     dx_xx_xxx, dx_xx_xxy, dx_xx_xxz, dx_xx_xyy,\
                                     dx_xx_xyz, dx_xx_xzz, dx_xx_yyy, dx_xx_yyz,\
                                     dx_xx_yzz, dx_xx_zzz, dx_xy_xxx, dx_xy_xxy,\
                                     dx_xy_xxz, dx_xy_xyy, dx_xy_xyz, dx_xy_xzz,\
                                     dx_xy_yyy, dx_xy_yyz, dx_xy_yzz, dx_xy_zzz,\
                                     dx_xz_xxx, dx_xz_xxy, dx_xz_xxz, dx_xz_xyy,\
                                     dx_xz_xyz, dx_xz_xzz, dx_xz_yyy, dx_xz_yyz,\
                                     dx_xz_yzz, dx_xz_zzz, dx_yy_xxx, dx_yy_xxy,\
                                     dx_yy_xxz, dx_yy_xyy, dx_yy_xyz, dx_yy_xzz,\
                                     dx_yy_yyy, dx_yy_yyz, dx_yy_yzz, dx_yy_zzz,\
                                     dx_yz_xxx, dx_yz_xxy, dx_yz_xxz, dx_yz_xyy,\
                                     dx_yz_xyz, dx_yz_xzz, dx_yz_yyy, dx_yz_yyz,\
                                     dx_yz_yzz, dx_yz_zzz, dx_zz_xxx, dx_zz_xxy,\
                                     dx_zz_xxz, dx_zz_xyy, dx_zz_xyz, dx_zz_xzz,\
                                     dx_zz_yyy, dx_zz_yyz, dx_zz_yzz, dx_zz_zzz,\
                                     dy_xx_xxx, dy_xx_xxy, dy_xx_xxz, dy_xx_xyy,\
                                     dy_xx_xyz, dy_xx_xzz, dy_xx_yyy, dy_xx_yyz,\
                                     dy_xx_yzz, dy_xx_zzz, dy_xy_xxx, dy_xy_xxy,\
                                     dy_xy_xxz, dy_xy_xyy, dy_xy_xyz, dy_xy_xzz,\
                                     dy_xy_yyy, dy_xy_yyz, dy_xy_yzz, dy_xy_zzz,\
                                     dy_xz_xxx, dy_xz_xxy, dy_xz_xxz, dy_xz_xyy,\
                                     dy_xz_xyz, dy_xz_xzz, dy_xz_yyy, dy_xz_yyz,\
                                     dy_xz_yzz, dy_xz_zzz, dy_yy_xxx, dy_yy_xxy,\
                                     dy_yy_xxz, dy_yy_xyy, dy_yy_xyz, dy_yy_xzz,\
                                     dy_yy_yyy, dy_yy_yyz, dy_yy_yzz, dy_yy_zzz,\
                                     dy_yz_xxx, dy_yz_xxy, dy_yz_xxz, dy_yz_xyy,\
                                     dy_yz_xyz, dy_yz_xzz, dy_yz_yyy, dy_yz_yyz,\
                                     dy_yz_yzz, dy_yz_zzz, dy_zz_xxx, dy_zz_xxy,\
                                     dy_zz_xxz, dy_zz_xyy, dy_zz_xyz, dy_zz_xzz,\
                                     dy_zz_yyy, dy_zz_yyz, dy_zz_yzz, dy_zz_zzz,\
                                     dz_xx_xxx, dz_xx_xxy, dz_xx_xxz, dz_xx_xyy,\
                                     dz_xx_xyz, dz_xx_xzz, dz_xx_yyy, dz_xx_yyz,\
                                     dz_xx_yzz, dz_xx_zzz, dz_xy_xxx, dz_xy_xxy,\
                                     dz_xy_xxz, dz_xy_xyy, dz_xy_xyz, dz_xy_xzz,\
                                     dz_xy_yyy, dz_xy_yyz, dz_xy_yzz, dz_xy_zzz,\
                                     dz_xz_xxx, dz_xz_xxy, dz_xz_xxz, dz_xz_xyy,\
                                     dz_xz_xyz, dz_xz_xzz, dz_xz_yyy, dz_xz_yyz,\
                                     dz_xz_yzz, dz_xz_zzz, dz_yy_xxx, dz_yy_xxy,\
                                     dz_yy_xxz, dz_yy_xyy, dz_yy_xyz, dz_yy_xzz,\
                                     dz_yy_yyy, dz_yy_yyz, dz_yy_yzz, dz_yy_zzz,\
                                     dz_yz_xxx, dz_yz_xxy, dz_yz_xxz, dz_yz_xyy,\
                                     dz_yz_xyz, dz_yz_xzz, dz_yz_yyy, dz_yz_yyz,\
                                     dz_yz_yzz, dz_yz_zzz, dz_zz_xxx, dz_zz_xxy,\
                                     dz_zz_xxz, dz_zz_xyy, dz_zz_xyz, dz_zz_xzz,\
                                     dz_zz_yyy, dz_zz_yyz, dz_zz_yzz, dz_zz_zzz,\
                                     dx_xxx_xx, dx_xxx_xy, dx_xxx_xz, dx_xxx_yy,\
                                     dx_xxx_yz, dx_xxx_zz, dx_xxy_xx, dx_xxy_xy,\
                                     dx_xxy_xz, dx_xxy_yy, dx_xxy_yz, dx_xxy_zz,\
                                     dx_xxz_xx, dx_xxz_xy, dx_xxz_xz, dx_xxz_yy,\
                                     dx_xxz_yz, dx_xxz_zz, dx_xyy_xx, dx_xyy_xy,\
                                     dx_xyy_xz, dx_xyy_yy, dx_xyy_yz, dx_xyy_zz,\
                                     dx_xyz_xx, dx_xyz_xy, dx_xyz_xz, dx_xyz_yy,\
                                     dx_xyz_yz, dx_xyz_zz, dx_xzz_xx, dx_xzz_xy,\
                                     dx_xzz_xz, dx_xzz_yy, dx_xzz_yz, dx_xzz_zz,\
                                     dx_yyy_xx, dx_yyy_xy, dx_yyy_xz, dx_yyy_yy,\
                                     dx_yyy_yz, dx_yyy_zz, dx_yyz_xx, dx_yyz_xy,\
                                     dx_yyz_xz, dx_yyz_yy, dx_yyz_yz, dx_yyz_zz,\
                                     dx_yzz_xx, dx_yzz_xy, dx_yzz_xz, dx_yzz_yy,\
                                     dx_yzz_yz, dx_yzz_zz, dx_zzz_xx, dx_zzz_xy,\
                                     dx_zzz_xz, dx_zzz_yy, dx_zzz_yz, dx_zzz_zz,\
                                     dy_xxx_xx, dy_xxx_xy, dy_xxx_xz, dy_xxx_yy,\
                                     dy_xxx_yz, dy_xxx_zz, dy_xxy_xx, dy_xxy_xy,\
                                     dy_xxy_xz, dy_xxy_yy, dy_xxy_yz, dy_xxy_zz,\
                                     dy_xxz_xx, dy_xxz_xy, dy_xxz_xz, dy_xxz_yy,\
                                     dy_xxz_yz, dy_xxz_zz, dy_xyy_xx, dy_xyy_xy,\
                                     dy_xyy_xz, dy_xyy_yy, dy_xyy_yz, dy_xyy_zz,\
                                     dy_xyz_xx, dy_xyz_xy, dy_xyz_xz, dy_xyz_yy,\
                                     dy_xyz_yz, dy_xyz_zz, dy_xzz_xx, dy_xzz_xy,\
                                     dy_xzz_xz, dy_xzz_yy, dy_xzz_yz, dy_xzz_zz,\
                                     dy_yyy_xx, dy_yyy_xy, dy_yyy_xz, dy_yyy_yy,\
                                     dy_yyy_yz, dy_yyy_zz, dy_yyz_xx, dy_yyz_xy,\
                                     dy_yyz_xz, dy_yyz_yy, dy_yyz_yz, dy_yyz_zz,\
                                     dy_yzz_xx, dy_yzz_xy, dy_yzz_xz, dy_yzz_yy,\
                                     dy_yzz_yz, dy_yzz_zz, dy_zzz_xx, dy_zzz_xy,\
                                     dy_zzz_xz, dy_zzz_yy, dy_zzz_yz, dy_zzz_zz,\
                                     dz_xxx_xx, dz_xxx_xy, dz_xxx_xz, dz_xxx_yy,\
                                     dz_xxx_yz, dz_xxx_zz, dz_xxy_xx, dz_xxy_xy,\
                                     dz_xxy_xz, dz_xxy_yy, dz_xxy_yz, dz_xxy_zz,\
                                     dz_xxz_xx, dz_xxz_xy, dz_xxz_xz, dz_xxz_yy,\
                                     dz_xxz_yz, dz_xxz_zz, dz_xyy_xx, dz_xyy_xy,\
                                     dz_xyy_xz, dz_xyy_yy, dz_xyy_yz, dz_xyy_zz,\
                                     dz_xyz_xx, dz_xyz_xy, dz_xyz_xz, dz_xyz_yy,\
                                     dz_xyz_yz, dz_xyz_zz, dz_xzz_xx, dz_xzz_xy,\
                                     dz_xzz_xz, dz_xzz_yy, dz_xzz_yz, dz_xzz_zz,\
                                     dz_yyy_xx, dz_yyy_xy, dz_yyy_xz, dz_yyy_yy,\
                                     dz_yyy_yz, dz_yyy_zz, dz_yyz_xx, dz_yyz_xy,\
                                     dz_yyz_xz, dz_yyz_yy, dz_yyz_yz, dz_yyz_zz,\
                                     dz_yzz_xx, dz_yzz_xy, dz_yzz_xz, dz_yzz_yy,\
                                     dz_yzz_yz, dz_yzz_zz, dz_zzz_xx, dz_zzz_xy,\
                                     dz_zzz_xz, dz_zzz_yy, dz_zzz_yz, dz_zzz_zz,\
                                     s_xxx_xxx, s_xxx_xxy, s_xxx_xxz, s_xxx_xyy,\
                                     s_xxx_xyz, s_xxx_xzz, s_xxx_yyy, s_xxx_yyz,\
                                     s_xxx_yzz, s_xxx_zzz, s_xxy_xxx, s_xxy_xxy,\
                                     s_xxy_xxz, s_xxy_xyy, s_xxy_xyz, s_xxy_xzz,\
                                     s_xxy_yyy, s_xxy_yyz, s_xxy_yzz, s_xxy_zzz,\
                                     s_xxz_xxx, s_xxz_xxy, s_xxz_xxz, s_xxz_xyy,\
                                     s_xxz_xyz, s_xxz_xzz, s_xxz_yyy, s_xxz_yyz,\
                                     s_xxz_yzz, s_xxz_zzz, s_xyy_xxx, s_xyy_xxy,\
                                     s_xyy_xxz, s_xyy_xyy, s_xyy_xyz, s_xyy_xzz,\
                                     s_xyy_yyy, s_xyy_yyz, s_xyy_yzz, s_xyy_zzz,\
                                     s_xyz_xxx, s_xyz_xxy, s_xyz_xxz, s_xyz_xyy,\
                                     s_xyz_xyz, s_xyz_xzz, s_xyz_yyy, s_xyz_yyz,\
                                     s_xyz_yzz, s_xyz_zzz, s_xzz_xxx, s_xzz_xxy,\
                                     s_xzz_xxz, s_xzz_xyy, s_xzz_xyz, s_xzz_xzz,\
                                     s_xzz_yyy, s_xzz_yyz, s_xzz_yzz, s_xzz_zzz,\
                                     s_yyy_xxx, s_yyy_xxy, s_yyy_xxz, s_yyy_xyy,\
                                     s_yyy_xyz, s_yyy_xzz, s_yyy_yyy, s_yyy_yyz,\
                                     s_yyy_yzz, s_yyy_zzz, s_yyz_xxx, s_yyz_xxy,\
                                     s_yyz_xxz, s_yyz_xyy, s_yyz_xyz, s_yyz_xzz,\
                                     s_yyz_yyy, s_yyz_yyz, s_yyz_yzz, s_yyz_zzz,\
                                     s_yzz_xxx, s_yzz_xxy, s_yzz_xxz, s_yzz_xyy,\
                                     s_yzz_xyz, s_yzz_xzz, s_yzz_yyy, s_yzz_yyz,\
                                     s_yzz_yzz, s_yzz_zzz, s_zzz_xxx, s_zzz_xxy,\
                                     s_zzz_xxz, s_zzz_xyy, s_zzz_xyz, s_zzz_xzz,\
                                     s_zzz_yyy, s_zzz_yyz, s_zzz_yzz, s_zzz_zzz,\
                                     s_xx_xxx, s_xx_xxy, s_xx_xxz, s_xx_xyy, s_xx_xyz,\
                                     s_xx_xzz, s_xx_yyy, s_xx_yyz, s_xx_yzz, s_xx_zzz,\
                                     s_xy_xxx, s_xy_xxy, s_xy_xxz, s_xy_xyy, s_xy_xyz,\
                                     s_xy_xzz, s_xy_yyy, s_xy_yyz, s_xy_yzz, s_xy_zzz,\
                                     s_xz_xxx, s_xz_xxy, s_xz_xxz, s_xz_xyy, s_xz_xyz,\
                                     s_xz_xzz, s_xz_yyy, s_xz_yyz, s_xz_yzz, s_xz_zzz,\
                                     s_yy_xxx, s_yy_xxy, s_yy_xxz, s_yy_xyy, s_yy_xyz,\
                                     s_yy_xzz, s_yy_yyy, s_yy_yyz, s_yy_yzz, s_yy_zzz,\
                                     s_yz_xxx, s_yz_xxy, s_yz_xxz, s_yz_xyy, s_yz_xyz,\
                                     s_yz_xzz, s_yz_yyy, s_yz_yyz, s_yz_yzz, s_yz_zzz,\
                                     s_zz_xxx, s_zz_xxy, s_zz_xxz, s_zz_xyy, s_zz_xyz,\
                                     s_zz_xzz, s_zz_yyy, s_zz_yyz, s_zz_yzz, s_zz_zzz,\
                                     s_x_xxx, s_x_xxy, s_x_xxz, s_x_xyy, s_x_xyz,\
                                     s_x_xzz, s_x_yyy, s_x_yyz, s_x_yzz, s_x_zzz,\
                                     s_y_xxx, s_y_xxy, s_y_xxz, s_y_xyy, s_y_xyz,\
                                     s_y_xzz, s_y_yyy, s_y_yyz, s_y_yzz, s_y_zzz,\
                                     s_z_xxx, s_z_xxy, s_z_xxz, s_z_xyy, s_z_xyz,\
                                     s_z_xzz, s_z_yyy, s_z_yyz, s_z_yzz, s_z_zzz,\
                                     s_xx_xx, s_xx_xy, s_xx_xz, s_xx_yy, s_xx_yz,\
                                     s_xx_zz, s_xy_xx, s_xy_xy, s_xy_xz, s_xy_yy,\
                                     s_xy_yz, s_xy_zz, s_xz_xx, s_xz_xy, s_xz_xz,\
                                     s_xz_yy, s_xz_yz, s_xz_zz, s_yy_xx, s_yy_xy,\
                                     s_yy_xz, s_yy_yy, s_yy_yz, s_yy_zz, s_yz_xx,\
                                     s_yz_xy, s_yz_xz, s_yz_yy, s_yz_yz, s_yz_zz,\
                                     s_zz_xx, s_zz_xy, s_zz_xz, s_zz_yy, s_zz_yz,\
                                     s_zz_zz: VLX_ALIGN)
             for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xxx_xxx[j] = fr * s_xx_xxx[j] + f2t * (2.0 * s_x_xxx[j] + 3.0 * s_xx_xx[j]);

                s_xxx_xxy[j] = fr * s_xx_xxy[j] + f2t * (2.0 * s_x_xxy[j] + 2.0 * s_xx_xy[j]);

                s_xxx_xxz[j] = fr * s_xx_xxz[j] + f2t * (2.0 * s_x_xxz[j] + 2.0 * s_xx_xz[j]);

                s_xxx_xyy[j] = fr * s_xx_xyy[j] + f2t * (2.0 * s_x_xyy[j] + s_xx_yy[j]);

                s_xxx_xyz[j] = fr * s_xx_xyz[j] + f2t * (2.0 * s_x_xyz[j] + s_xx_yz[j]);

                s_xxx_xzz[j] = fr * s_xx_xzz[j] + f2t * (2.0 * s_x_xzz[j] + s_xx_zz[j]);

                s_xxx_yyy[j] = fr * s_xx_yyy[j] + f2t * 2.0 * s_x_yyy[j];

                s_xxx_yyz[j] = fr * s_xx_yyz[j] + f2t * 2.0 * s_x_yyz[j];

                s_xxx_yzz[j] = fr * s_xx_yzz[j] + f2t * 2.0 * s_x_yzz[j];

                s_xxx_zzz[j] = fr * s_xx_zzz[j] + f2t * 2.0 * s_x_zzz[j];

                s_xxy_xxx[j] = fr * s_xy_xxx[j] + f2t * (s_y_xxx[j] + 3.0 * s_xy_xx[j]);

                s_xxy_xxy[j] = fr * s_xy_xxy[j] + f2t * (s_y_xxy[j] + 2.0 * s_xy_xy[j]);

                s_xxy_xxz[j] = fr * s_xy_xxz[j] + f2t * (s_y_xxz[j] + 2.0 * s_xy_xz[j]);

                s_xxy_xyy[j] = fr * s_xy_xyy[j] + f2t * (s_y_xyy[j] + s_xy_yy[j]);

                s_xxy_xyz[j] = fr * s_xy_xyz[j] + f2t * (s_y_xyz[j] + s_xy_yz[j]);

                s_xxy_xzz[j] = fr * s_xy_xzz[j] + f2t * (s_y_xzz[j] + s_xy_zz[j]);

                s_xxy_yyy[j] = fr * s_xy_yyy[j] + f2t * s_y_yyy[j];

                s_xxy_yyz[j] = fr * s_xy_yyz[j] + f2t * s_y_yyz[j];

                s_xxy_yzz[j] = fr * s_xy_yzz[j] + f2t * s_y_yzz[j];

                s_xxy_zzz[j] = fr * s_xy_zzz[j] + f2t * s_y_zzz[j];

                s_xxz_xxx[j] = fr * s_xz_xxx[j] + f2t * (s_z_xxx[j] + 3.0 * s_xz_xx[j]);

                s_xxz_xxy[j] = fr * s_xz_xxy[j] + f2t * (s_z_xxy[j] + 2.0 * s_xz_xy[j]);

                s_xxz_xxz[j] = fr * s_xz_xxz[j] + f2t * (s_z_xxz[j] + 2.0 * s_xz_xz[j]);

                s_xxz_xyy[j] = fr * s_xz_xyy[j] + f2t * (s_z_xyy[j] + s_xz_yy[j]);

                s_xxz_xyz[j] = fr * s_xz_xyz[j] + f2t * (s_z_xyz[j] + s_xz_yz[j]);

                s_xxz_xzz[j] = fr * s_xz_xzz[j] + f2t * (s_z_xzz[j] + s_xz_zz[j]);

                s_xxz_yyy[j] = fr * s_xz_yyy[j] + f2t * s_z_yyy[j];

                s_xxz_yyz[j] = fr * s_xz_yyz[j] + f2t * s_z_yyz[j];

                s_xxz_yzz[j] = fr * s_xz_yzz[j] + f2t * s_z_yzz[j];

                s_xxz_zzz[j] = fr * s_xz_zzz[j] + f2t * s_z_zzz[j];

                s_xyy_xxx[j] = fr * s_yy_xxx[j] + f2t * 3.0 * s_yy_xx[j];

                s_xyy_xxy[j] = fr * s_yy_xxy[j] + f2t * 2.0 * s_yy_xy[j];

                s_xyy_xxz[j] = fr * s_yy_xxz[j] + f2t * 2.0 * s_yy_xz[j];

                s_xyy_xyy[j] = fr * s_yy_xyy[j] + f2t * s_yy_yy[j];

                s_xyy_xyz[j] = fr * s_yy_xyz[j] + f2t * s_yy_yz[j];

                s_xyy_xzz[j] = fr * s_yy_xzz[j] + f2t * s_yy_zz[j];

                s_xyy_yyy[j] = fr * s_yy_yyy[j];

                s_xyy_yyz[j] = fr * s_yy_yyz[j];

                s_xyy_yzz[j] = fr * s_yy_yzz[j];

                s_xyy_zzz[j] = fr * s_yy_zzz[j];

                s_xyz_xxx[j] = fr * s_yz_xxx[j] + f2t * 3.0 * s_yz_xx[j];

                s_xyz_xxy[j] = fr * s_yz_xxy[j] + f2t * 2.0 * s_yz_xy[j];

                s_xyz_xxz[j] = fr * s_yz_xxz[j] + f2t * 2.0 * s_yz_xz[j];

                s_xyz_xyy[j] = fr * s_yz_xyy[j] + f2t * s_yz_yy[j];

                s_xyz_xyz[j] = fr * s_yz_xyz[j] + f2t * s_yz_yz[j];

                s_xyz_xzz[j] = fr * s_yz_xzz[j] + f2t * s_yz_zz[j];

                s_xyz_yyy[j] = fr * s_yz_yyy[j];

                s_xyz_yyz[j] = fr * s_yz_yyz[j];

                s_xyz_yzz[j] = fr * s_yz_yzz[j];

                s_xyz_zzz[j] = fr * s_yz_zzz[j];

                s_xzz_xxx[j] = fr * s_zz_xxx[j] + f2t * 3.0 * s_zz_xx[j];

                s_xzz_xxy[j] = fr * s_zz_xxy[j] + f2t * 2.0 * s_zz_xy[j];

                s_xzz_xxz[j] = fr * s_zz_xxz[j] + f2t * 2.0 * s_zz_xz[j];

                s_xzz_xyy[j] = fr * s_zz_xyy[j] + f2t * s_zz_yy[j];

                s_xzz_xyz[j] = fr * s_zz_xyz[j] + f2t * s_zz_yz[j];

                s_xzz_xzz[j] = fr * s_zz_xzz[j] + f2t * s_zz_zz[j];

                s_xzz_yyy[j] = fr * s_zz_yyy[j];

                s_xzz_yyz[j] = fr * s_zz_yyz[j];

                s_xzz_yzz[j] = fr * s_zz_yzz[j];

                s_xzz_zzz[j] = fr * s_zz_zzz[j];

                // leading y component

                fr = pay[j];

                s_yyy_xxx[j] = fr * s_yy_xxx[j] + f2t * 2.0 * s_y_xxx[j];

                s_yyy_xxy[j] = fr * s_yy_xxy[j] + f2t * (2.0 * s_y_xxy[j] + s_yy_xx[j]);

                s_yyy_xxz[j] = fr * s_yy_xxz[j] + f2t * 2.0 * s_y_xxz[j];

                s_yyy_xyy[j] = fr * s_yy_xyy[j] + f2t * (2.0 * s_y_xyy[j] + 2.0 * s_yy_xy[j]);

                s_yyy_xyz[j] = fr * s_yy_xyz[j] + f2t * (2.0 * s_y_xyz[j] + s_yy_xz[j]);

                s_yyy_xzz[j] = fr * s_yy_xzz[j] + f2t * 2.0 * s_y_xzz[j];

                s_yyy_yyy[j] = fr * s_yy_yyy[j] + f2t * (2.0 * s_y_yyy[j] + 3.0 * s_yy_yy[j]);

                s_yyy_yyz[j] = fr * s_yy_yyz[j] + f2t * (2.0 * s_y_yyz[j] + 2.0 * s_yy_yz[j]);

                s_yyy_yzz[j] = fr * s_yy_yzz[j] + f2t * (2.0 * s_y_yzz[j] + s_yy_zz[j]);

                s_yyy_zzz[j] = fr * s_yy_zzz[j] + f2t * 2.0 * s_y_zzz[j];

                s_yyz_xxx[j] = fr * s_yz_xxx[j] + f2t * s_z_xxx[j];

                s_yyz_xxy[j] = fr * s_yz_xxy[j] + f2t * (s_z_xxy[j] + s_yz_xx[j]);

                s_yyz_xxz[j] = fr * s_yz_xxz[j] + f2t * s_z_xxz[j];

                s_yyz_xyy[j] = fr * s_yz_xyy[j] + f2t * (s_z_xyy[j] + 2.0 * s_yz_xy[j]);

                s_yyz_xyz[j] = fr * s_yz_xyz[j] + f2t * (s_z_xyz[j] + s_yz_xz[j]);

                s_yyz_xzz[j] = fr * s_yz_xzz[j] + f2t * s_z_xzz[j];

                s_yyz_yyy[j] = fr * s_yz_yyy[j] + f2t * (s_z_yyy[j] + 3.0 * s_yz_yy[j]);

                s_yyz_yyz[j] = fr * s_yz_yyz[j] + f2t * (s_z_yyz[j] + 2.0 * s_yz_yz[j]);

                s_yyz_yzz[j] = fr * s_yz_yzz[j] + f2t * (s_z_yzz[j] + s_yz_zz[j]);

                s_yyz_zzz[j] = fr * s_yz_zzz[j] + f2t * s_z_zzz[j];

                s_yzz_xxx[j] = fr * s_zz_xxx[j];

                s_yzz_xxy[j] = fr * s_zz_xxy[j] + f2t * s_zz_xx[j];

                s_yzz_xxz[j] = fr * s_zz_xxz[j];

                s_yzz_xyy[j] = fr * s_zz_xyy[j] + f2t * 2.0 * s_zz_xy[j];

                s_yzz_xyz[j] = fr * s_zz_xyz[j] + f2t * s_zz_xz[j];

                s_yzz_xzz[j] = fr * s_zz_xzz[j];

                s_yzz_yyy[j] = fr * s_zz_yyy[j] + f2t * 3.0 * s_zz_yy[j];

                s_yzz_yyz[j] = fr * s_zz_yyz[j] + f2t * 2.0 * s_zz_yz[j];

                s_yzz_yzz[j] = fr * s_zz_yzz[j] + f2t * s_zz_zz[j];

                s_yzz_zzz[j] = fr * s_zz_zzz[j];

                // leading z component

                fr = paz[j];

                s_zzz_xxx[j] = fr * s_zz_xxx[j] + f2t * 2.0 * s_z_xxx[j];

                s_zzz_xxy[j] = fr * s_zz_xxy[j] + f2t * 2.0 * s_z_xxy[j];

                s_zzz_xxz[j] = fr * s_zz_xxz[j] + f2t * (2.0 * s_z_xxz[j] + s_zz_xx[j]);

                s_zzz_xyy[j] = fr * s_zz_xyy[j] + f2t * 2.0 * s_z_xyy[j];

                s_zzz_xyz[j] = fr * s_zz_xyz[j] + f2t * (2.0 * s_z_xyz[j] + s_zz_xy[j]);

                s_zzz_xzz[j] = fr * s_zz_xzz[j] + f2t * (2.0 * s_z_xzz[j] + 2.0 * s_zz_xz[j]);

                s_zzz_yyy[j] = fr * s_zz_yyy[j] + f2t * 2.0 * s_z_yyy[j];

                s_zzz_yyz[j] = fr * s_zz_yyz[j] + f2t * (2.0 * s_z_yyz[j] + s_zz_yy[j]);

                s_zzz_yzz[j] = fr * s_zz_yzz[j] + f2t * (2.0 * s_z_yzz[j] + 2.0 * s_zz_yz[j]);

                s_zzz_zzz[j] = fr * s_zz_zzz[j] + f2t * (2.0 * s_z_zzz[j] + 3.0 * s_zz_zz[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxxx_xxx[j] = fr * dx_xxx_xxx[j] + f2t * (3.0 * dx_xx_xxx[j] + 3.0 * dx_xxx_xx[j] + s_xxx_xxx[j]);

                dy_xxxx_xxx[j] = fr * dy_xxx_xxx[j] + f2t * (3.0 * dy_xx_xxx[j] + 3.0 * dy_xxx_xx[j]);

                dz_xxxx_xxx[j] = fr * dz_xxx_xxx[j] + f2t * (3.0 * dz_xx_xxx[j] + 3.0 * dz_xxx_xx[j]);

                dx_xxxx_xxy[j] = fr * dx_xxx_xxy[j] + f2t * (3.0 * dx_xx_xxy[j] + 2.0 * dx_xxx_xy[j] + s_xxx_xxy[j]);

                dy_xxxx_xxy[j] = fr * dy_xxx_xxy[j] + f2t * (3.0 * dy_xx_xxy[j] + 2.0 * dy_xxx_xy[j]);

                dz_xxxx_xxy[j] = fr * dz_xxx_xxy[j] + f2t * (3.0 * dz_xx_xxy[j] + 2.0 * dz_xxx_xy[j]);

                dx_xxxx_xxz[j] = fr * dx_xxx_xxz[j] + f2t * (3.0 * dx_xx_xxz[j] + 2.0 * dx_xxx_xz[j] + s_xxx_xxz[j]);

                dy_xxxx_xxz[j] = fr * dy_xxx_xxz[j] + f2t * (3.0 * dy_xx_xxz[j] + 2.0 * dy_xxx_xz[j]);

                dz_xxxx_xxz[j] = fr * dz_xxx_xxz[j] + f2t * (3.0 * dz_xx_xxz[j] + 2.0 * dz_xxx_xz[j]);

                dx_xxxx_xyy[j] = fr * dx_xxx_xyy[j] + f2t * (3.0 * dx_xx_xyy[j] + dx_xxx_yy[j] + s_xxx_xyy[j]);

                dy_xxxx_xyy[j] = fr * dy_xxx_xyy[j] + f2t * (3.0 * dy_xx_xyy[j] + dy_xxx_yy[j]);

                dz_xxxx_xyy[j] = fr * dz_xxx_xyy[j] + f2t * (3.0 * dz_xx_xyy[j] + dz_xxx_yy[j]);

                dx_xxxx_xyz[j] = fr * dx_xxx_xyz[j] + f2t * (3.0 * dx_xx_xyz[j] + dx_xxx_yz[j] + s_xxx_xyz[j]);

                dy_xxxx_xyz[j] = fr * dy_xxx_xyz[j] + f2t * (3.0 * dy_xx_xyz[j] + dy_xxx_yz[j]);

                dz_xxxx_xyz[j] = fr * dz_xxx_xyz[j] + f2t * (3.0 * dz_xx_xyz[j] + dz_xxx_yz[j]);

                dx_xxxx_xzz[j] = fr * dx_xxx_xzz[j] + f2t * (3.0 * dx_xx_xzz[j] + dx_xxx_zz[j] + s_xxx_xzz[j]);

                dy_xxxx_xzz[j] = fr * dy_xxx_xzz[j] + f2t * (3.0 * dy_xx_xzz[j] + dy_xxx_zz[j]);

                dz_xxxx_xzz[j] = fr * dz_xxx_xzz[j] + f2t * (3.0 * dz_xx_xzz[j] + dz_xxx_zz[j]);

                dx_xxxx_yyy[j] = fr * dx_xxx_yyy[j] + f2t * (3.0 * dx_xx_yyy[j] + s_xxx_yyy[j]);

                dy_xxxx_yyy[j] = fr * dy_xxx_yyy[j] + f2t * 3.0 * dy_xx_yyy[j];

                dz_xxxx_yyy[j] = fr * dz_xxx_yyy[j] + f2t * 3.0 * dz_xx_yyy[j];

                dx_xxxx_yyz[j] = fr * dx_xxx_yyz[j] + f2t * (3.0 * dx_xx_yyz[j] + s_xxx_yyz[j]);

                dy_xxxx_yyz[j] = fr * dy_xxx_yyz[j] + f2t * 3.0 * dy_xx_yyz[j];

                dz_xxxx_yyz[j] = fr * dz_xxx_yyz[j] + f2t * 3.0 * dz_xx_yyz[j];

                dx_xxxx_yzz[j] = fr * dx_xxx_yzz[j] + f2t * (3.0 * dx_xx_yzz[j] + s_xxx_yzz[j]);

                dy_xxxx_yzz[j] = fr * dy_xxx_yzz[j] + f2t * 3.0 * dy_xx_yzz[j];

                dz_xxxx_yzz[j] = fr * dz_xxx_yzz[j] + f2t * 3.0 * dz_xx_yzz[j];

                dx_xxxx_zzz[j] = fr * dx_xxx_zzz[j] + f2t * (3.0 * dx_xx_zzz[j] + s_xxx_zzz[j]);

                dy_xxxx_zzz[j] = fr * dy_xxx_zzz[j] + f2t * 3.0 * dy_xx_zzz[j];

                dz_xxxx_zzz[j] = fr * dz_xxx_zzz[j] + f2t * 3.0 * dz_xx_zzz[j];

                dx_xxxy_xxx[j] = fr * dx_xxy_xxx[j] + f2t * (2.0 * dx_xy_xxx[j] + 3.0 * dx_xxy_xx[j] + s_xxy_xxx[j]);

                dy_xxxy_xxx[j] = fr * dy_xxy_xxx[j] + f2t * (2.0 * dy_xy_xxx[j] + 3.0 * dy_xxy_xx[j]);

                dz_xxxy_xxx[j] = fr * dz_xxy_xxx[j] + f2t * (2.0 * dz_xy_xxx[j] + 3.0 * dz_xxy_xx[j]);

                dx_xxxy_xxy[j] = fr * dx_xxy_xxy[j] + f2t * (2.0 * dx_xy_xxy[j] + 2.0 * dx_xxy_xy[j] + s_xxy_xxy[j]);

                dy_xxxy_xxy[j] = fr * dy_xxy_xxy[j] + f2t * (2.0 * dy_xy_xxy[j] + 2.0 * dy_xxy_xy[j]);

                dz_xxxy_xxy[j] = fr * dz_xxy_xxy[j] + f2t * (2.0 * dz_xy_xxy[j] + 2.0 * dz_xxy_xy[j]);

                dx_xxxy_xxz[j] = fr * dx_xxy_xxz[j] + f2t * (2.0 * dx_xy_xxz[j] + 2.0 * dx_xxy_xz[j] + s_xxy_xxz[j]);

                dy_xxxy_xxz[j] = fr * dy_xxy_xxz[j] + f2t * (2.0 * dy_xy_xxz[j] + 2.0 * dy_xxy_xz[j]);

                dz_xxxy_xxz[j] = fr * dz_xxy_xxz[j] + f2t * (2.0 * dz_xy_xxz[j] + 2.0 * dz_xxy_xz[j]);

                dx_xxxy_xyy[j] = fr * dx_xxy_xyy[j] + f2t * (2.0 * dx_xy_xyy[j] + dx_xxy_yy[j] + s_xxy_xyy[j]);

                dy_xxxy_xyy[j] = fr * dy_xxy_xyy[j] + f2t * (2.0 * dy_xy_xyy[j] + dy_xxy_yy[j]);

                dz_xxxy_xyy[j] = fr * dz_xxy_xyy[j] + f2t * (2.0 * dz_xy_xyy[j] + dz_xxy_yy[j]);

                dx_xxxy_xyz[j] = fr * dx_xxy_xyz[j] + f2t * (2.0 * dx_xy_xyz[j] + dx_xxy_yz[j] + s_xxy_xyz[j]);

                dy_xxxy_xyz[j] = fr * dy_xxy_xyz[j] + f2t * (2.0 * dy_xy_xyz[j] + dy_xxy_yz[j]);

                dz_xxxy_xyz[j] = fr * dz_xxy_xyz[j] + f2t * (2.0 * dz_xy_xyz[j] + dz_xxy_yz[j]);

                dx_xxxy_xzz[j] = fr * dx_xxy_xzz[j] + f2t * (2.0 * dx_xy_xzz[j] + dx_xxy_zz[j] + s_xxy_xzz[j]);

                dy_xxxy_xzz[j] = fr * dy_xxy_xzz[j] + f2t * (2.0 * dy_xy_xzz[j] + dy_xxy_zz[j]);

                dz_xxxy_xzz[j] = fr * dz_xxy_xzz[j] + f2t * (2.0 * dz_xy_xzz[j] + dz_xxy_zz[j]);

                dx_xxxy_yyy[j] = fr * dx_xxy_yyy[j] + f2t * (2.0 * dx_xy_yyy[j] + s_xxy_yyy[j]);

                dy_xxxy_yyy[j] = fr * dy_xxy_yyy[j] + f2t * 2.0 * dy_xy_yyy[j];

                dz_xxxy_yyy[j] = fr * dz_xxy_yyy[j] + f2t * 2.0 * dz_xy_yyy[j];

                dx_xxxy_yyz[j] = fr * dx_xxy_yyz[j] + f2t * (2.0 * dx_xy_yyz[j] + s_xxy_yyz[j]);

                dy_xxxy_yyz[j] = fr * dy_xxy_yyz[j] + f2t * 2.0 * dy_xy_yyz[j];

                dz_xxxy_yyz[j] = fr * dz_xxy_yyz[j] + f2t * 2.0 * dz_xy_yyz[j];

                dx_xxxy_yzz[j] = fr * dx_xxy_yzz[j] + f2t * (2.0 * dx_xy_yzz[j] + s_xxy_yzz[j]);

                dy_xxxy_yzz[j] = fr * dy_xxy_yzz[j] + f2t * 2.0 * dy_xy_yzz[j];

                dz_xxxy_yzz[j] = fr * dz_xxy_yzz[j] + f2t * 2.0 * dz_xy_yzz[j];

                dx_xxxy_zzz[j] = fr * dx_xxy_zzz[j] + f2t * (2.0 * dx_xy_zzz[j] + s_xxy_zzz[j]);

                dy_xxxy_zzz[j] = fr * dy_xxy_zzz[j] + f2t * 2.0 * dy_xy_zzz[j];

                dz_xxxy_zzz[j] = fr * dz_xxy_zzz[j] + f2t * 2.0 * dz_xy_zzz[j];

                dx_xxxz_xxx[j] = fr * dx_xxz_xxx[j] + f2t * (2.0 * dx_xz_xxx[j] + 3.0 * dx_xxz_xx[j] + s_xxz_xxx[j]);

                dy_xxxz_xxx[j] = fr * dy_xxz_xxx[j] + f2t * (2.0 * dy_xz_xxx[j] + 3.0 * dy_xxz_xx[j]);

                dz_xxxz_xxx[j] = fr * dz_xxz_xxx[j] + f2t * (2.0 * dz_xz_xxx[j] + 3.0 * dz_xxz_xx[j]);

                dx_xxxz_xxy[j] = fr * dx_xxz_xxy[j] + f2t * (2.0 * dx_xz_xxy[j] + 2.0 * dx_xxz_xy[j] + s_xxz_xxy[j]);

                dy_xxxz_xxy[j] = fr * dy_xxz_xxy[j] + f2t * (2.0 * dy_xz_xxy[j] + 2.0 * dy_xxz_xy[j]);

                dz_xxxz_xxy[j] = fr * dz_xxz_xxy[j] + f2t * (2.0 * dz_xz_xxy[j] + 2.0 * dz_xxz_xy[j]);

                dx_xxxz_xxz[j] = fr * dx_xxz_xxz[j] + f2t * (2.0 * dx_xz_xxz[j] + 2.0 * dx_xxz_xz[j] + s_xxz_xxz[j]);

                dy_xxxz_xxz[j] = fr * dy_xxz_xxz[j] + f2t * (2.0 * dy_xz_xxz[j] + 2.0 * dy_xxz_xz[j]);

                dz_xxxz_xxz[j] = fr * dz_xxz_xxz[j] + f2t * (2.0 * dz_xz_xxz[j] + 2.0 * dz_xxz_xz[j]);

                dx_xxxz_xyy[j] = fr * dx_xxz_xyy[j] + f2t * (2.0 * dx_xz_xyy[j] + dx_xxz_yy[j] + s_xxz_xyy[j]);

                dy_xxxz_xyy[j] = fr * dy_xxz_xyy[j] + f2t * (2.0 * dy_xz_xyy[j] + dy_xxz_yy[j]);

                dz_xxxz_xyy[j] = fr * dz_xxz_xyy[j] + f2t * (2.0 * dz_xz_xyy[j] + dz_xxz_yy[j]);

                dx_xxxz_xyz[j] = fr * dx_xxz_xyz[j] + f2t * (2.0 * dx_xz_xyz[j] + dx_xxz_yz[j] + s_xxz_xyz[j]);

                dy_xxxz_xyz[j] = fr * dy_xxz_xyz[j] + f2t * (2.0 * dy_xz_xyz[j] + dy_xxz_yz[j]);

                dz_xxxz_xyz[j] = fr * dz_xxz_xyz[j] + f2t * (2.0 * dz_xz_xyz[j] + dz_xxz_yz[j]);

                dx_xxxz_xzz[j] = fr * dx_xxz_xzz[j] + f2t * (2.0 * dx_xz_xzz[j] + dx_xxz_zz[j] + s_xxz_xzz[j]);

                dy_xxxz_xzz[j] = fr * dy_xxz_xzz[j] + f2t * (2.0 * dy_xz_xzz[j] + dy_xxz_zz[j]);

                dz_xxxz_xzz[j] = fr * dz_xxz_xzz[j] + f2t * (2.0 * dz_xz_xzz[j] + dz_xxz_zz[j]);

                dx_xxxz_yyy[j] = fr * dx_xxz_yyy[j] + f2t * (2.0 * dx_xz_yyy[j] + s_xxz_yyy[j]);

                dy_xxxz_yyy[j] = fr * dy_xxz_yyy[j] + f2t * 2.0 * dy_xz_yyy[j];

                dz_xxxz_yyy[j] = fr * dz_xxz_yyy[j] + f2t * 2.0 * dz_xz_yyy[j];

                dx_xxxz_yyz[j] = fr * dx_xxz_yyz[j] + f2t * (2.0 * dx_xz_yyz[j] + s_xxz_yyz[j]);

                dy_xxxz_yyz[j] = fr * dy_xxz_yyz[j] + f2t * 2.0 * dy_xz_yyz[j];

                dz_xxxz_yyz[j] = fr * dz_xxz_yyz[j] + f2t * 2.0 * dz_xz_yyz[j];

                dx_xxxz_yzz[j] = fr * dx_xxz_yzz[j] + f2t * (2.0 * dx_xz_yzz[j] + s_xxz_yzz[j]);

                dy_xxxz_yzz[j] = fr * dy_xxz_yzz[j] + f2t * 2.0 * dy_xz_yzz[j];

                dz_xxxz_yzz[j] = fr * dz_xxz_yzz[j] + f2t * 2.0 * dz_xz_yzz[j];

                dx_xxxz_zzz[j] = fr * dx_xxz_zzz[j] + f2t * (2.0 * dx_xz_zzz[j] + s_xxz_zzz[j]);

                dy_xxxz_zzz[j] = fr * dy_xxz_zzz[j] + f2t * 2.0 * dy_xz_zzz[j];

                dz_xxxz_zzz[j] = fr * dz_xxz_zzz[j] + f2t * 2.0 * dz_xz_zzz[j];

                dx_xxyy_xxx[j] = fr * dx_xyy_xxx[j] + f2t * (dx_yy_xxx[j] + 3.0 * dx_xyy_xx[j] + s_xyy_xxx[j]);

                dy_xxyy_xxx[j] = fr * dy_xyy_xxx[j] + f2t * (dy_yy_xxx[j] + 3.0 * dy_xyy_xx[j]);

                dz_xxyy_xxx[j] = fr * dz_xyy_xxx[j] + f2t * (dz_yy_xxx[j] + 3.0 * dz_xyy_xx[j]);

                dx_xxyy_xxy[j] = fr * dx_xyy_xxy[j] + f2t * (dx_yy_xxy[j] + 2.0 * dx_xyy_xy[j] + s_xyy_xxy[j]);

                dy_xxyy_xxy[j] = fr * dy_xyy_xxy[j] + f2t * (dy_yy_xxy[j] + 2.0 * dy_xyy_xy[j]);

                dz_xxyy_xxy[j] = fr * dz_xyy_xxy[j] + f2t * (dz_yy_xxy[j] + 2.0 * dz_xyy_xy[j]);

                dx_xxyy_xxz[j] = fr * dx_xyy_xxz[j] + f2t * (dx_yy_xxz[j] + 2.0 * dx_xyy_xz[j] + s_xyy_xxz[j]);

                dy_xxyy_xxz[j] = fr * dy_xyy_xxz[j] + f2t * (dy_yy_xxz[j] + 2.0 * dy_xyy_xz[j]);

                dz_xxyy_xxz[j] = fr * dz_xyy_xxz[j] + f2t * (dz_yy_xxz[j] + 2.0 * dz_xyy_xz[j]);

                dx_xxyy_xyy[j] = fr * dx_xyy_xyy[j] + f2t * (dx_yy_xyy[j] + dx_xyy_yy[j] + s_xyy_xyy[j]);

                dy_xxyy_xyy[j] = fr * dy_xyy_xyy[j] + f2t * (dy_yy_xyy[j] + dy_xyy_yy[j]);

                dz_xxyy_xyy[j] = fr * dz_xyy_xyy[j] + f2t * (dz_yy_xyy[j] + dz_xyy_yy[j]);

                dx_xxyy_xyz[j] = fr * dx_xyy_xyz[j] + f2t * (dx_yy_xyz[j] + dx_xyy_yz[j] + s_xyy_xyz[j]);

                dy_xxyy_xyz[j] = fr * dy_xyy_xyz[j] + f2t * (dy_yy_xyz[j] + dy_xyy_yz[j]);

                dz_xxyy_xyz[j] = fr * dz_xyy_xyz[j] + f2t * (dz_yy_xyz[j] + dz_xyy_yz[j]);

                dx_xxyy_xzz[j] = fr * dx_xyy_xzz[j] + f2t * (dx_yy_xzz[j] + dx_xyy_zz[j] + s_xyy_xzz[j]);

                dy_xxyy_xzz[j] = fr * dy_xyy_xzz[j] + f2t * (dy_yy_xzz[j] + dy_xyy_zz[j]);

                dz_xxyy_xzz[j] = fr * dz_xyy_xzz[j] + f2t * (dz_yy_xzz[j] + dz_xyy_zz[j]);

                dx_xxyy_yyy[j] = fr * dx_xyy_yyy[j] + f2t * (dx_yy_yyy[j] + s_xyy_yyy[j]);

                dy_xxyy_yyy[j] = fr * dy_xyy_yyy[j] + f2t * dy_yy_yyy[j];

                dz_xxyy_yyy[j] = fr * dz_xyy_yyy[j] + f2t * dz_yy_yyy[j];

                dx_xxyy_yyz[j] = fr * dx_xyy_yyz[j] + f2t * (dx_yy_yyz[j] + s_xyy_yyz[j]);

                dy_xxyy_yyz[j] = fr * dy_xyy_yyz[j] + f2t * dy_yy_yyz[j];

                dz_xxyy_yyz[j] = fr * dz_xyy_yyz[j] + f2t * dz_yy_yyz[j];

                dx_xxyy_yzz[j] = fr * dx_xyy_yzz[j] + f2t * (dx_yy_yzz[j] + s_xyy_yzz[j]);

                dy_xxyy_yzz[j] = fr * dy_xyy_yzz[j] + f2t * dy_yy_yzz[j];

                dz_xxyy_yzz[j] = fr * dz_xyy_yzz[j] + f2t * dz_yy_yzz[j];

                dx_xxyy_zzz[j] = fr * dx_xyy_zzz[j] + f2t * (dx_yy_zzz[j] + s_xyy_zzz[j]);

                dy_xxyy_zzz[j] = fr * dy_xyy_zzz[j] + f2t * dy_yy_zzz[j];

                dz_xxyy_zzz[j] = fr * dz_xyy_zzz[j] + f2t * dz_yy_zzz[j];

                dx_xxyz_xxx[j] = fr * dx_xyz_xxx[j] + f2t * (dx_yz_xxx[j] + 3.0 * dx_xyz_xx[j] + s_xyz_xxx[j]);

                dy_xxyz_xxx[j] = fr * dy_xyz_xxx[j] + f2t * (dy_yz_xxx[j] + 3.0 * dy_xyz_xx[j]);

                dz_xxyz_xxx[j] = fr * dz_xyz_xxx[j] + f2t * (dz_yz_xxx[j] + 3.0 * dz_xyz_xx[j]);

                dx_xxyz_xxy[j] = fr * dx_xyz_xxy[j] + f2t * (dx_yz_xxy[j] + 2.0 * dx_xyz_xy[j] + s_xyz_xxy[j]);

                dy_xxyz_xxy[j] = fr * dy_xyz_xxy[j] + f2t * (dy_yz_xxy[j] + 2.0 * dy_xyz_xy[j]);

                dz_xxyz_xxy[j] = fr * dz_xyz_xxy[j] + f2t * (dz_yz_xxy[j] + 2.0 * dz_xyz_xy[j]);

                dx_xxyz_xxz[j] = fr * dx_xyz_xxz[j] + f2t * (dx_yz_xxz[j] + 2.0 * dx_xyz_xz[j] + s_xyz_xxz[j]);

                dy_xxyz_xxz[j] = fr * dy_xyz_xxz[j] + f2t * (dy_yz_xxz[j] + 2.0 * dy_xyz_xz[j]);

                dz_xxyz_xxz[j] = fr * dz_xyz_xxz[j] + f2t * (dz_yz_xxz[j] + 2.0 * dz_xyz_xz[j]);

                dx_xxyz_xyy[j] = fr * dx_xyz_xyy[j] + f2t * (dx_yz_xyy[j] + dx_xyz_yy[j] + s_xyz_xyy[j]);

                dy_xxyz_xyy[j] = fr * dy_xyz_xyy[j] + f2t * (dy_yz_xyy[j] + dy_xyz_yy[j]);

                dz_xxyz_xyy[j] = fr * dz_xyz_xyy[j] + f2t * (dz_yz_xyy[j] + dz_xyz_yy[j]);

                dx_xxyz_xyz[j] = fr * dx_xyz_xyz[j] + f2t * (dx_yz_xyz[j] + dx_xyz_yz[j] + s_xyz_xyz[j]);

                dy_xxyz_xyz[j] = fr * dy_xyz_xyz[j] + f2t * (dy_yz_xyz[j] + dy_xyz_yz[j]);

                dz_xxyz_xyz[j] = fr * dz_xyz_xyz[j] + f2t * (dz_yz_xyz[j] + dz_xyz_yz[j]);

                dx_xxyz_xzz[j] = fr * dx_xyz_xzz[j] + f2t * (dx_yz_xzz[j] + dx_xyz_zz[j] + s_xyz_xzz[j]);

                dy_xxyz_xzz[j] = fr * dy_xyz_xzz[j] + f2t * (dy_yz_xzz[j] + dy_xyz_zz[j]);

                dz_xxyz_xzz[j] = fr * dz_xyz_xzz[j] + f2t * (dz_yz_xzz[j] + dz_xyz_zz[j]);

                dx_xxyz_yyy[j] = fr * dx_xyz_yyy[j] + f2t * (dx_yz_yyy[j] + s_xyz_yyy[j]);

                dy_xxyz_yyy[j] = fr * dy_xyz_yyy[j] + f2t * dy_yz_yyy[j];

                dz_xxyz_yyy[j] = fr * dz_xyz_yyy[j] + f2t * dz_yz_yyy[j];

                dx_xxyz_yyz[j] = fr * dx_xyz_yyz[j] + f2t * (dx_yz_yyz[j] + s_xyz_yyz[j]);

                dy_xxyz_yyz[j] = fr * dy_xyz_yyz[j] + f2t * dy_yz_yyz[j];

                dz_xxyz_yyz[j] = fr * dz_xyz_yyz[j] + f2t * dz_yz_yyz[j];

                dx_xxyz_yzz[j] = fr * dx_xyz_yzz[j] + f2t * (dx_yz_yzz[j] + s_xyz_yzz[j]);

                dy_xxyz_yzz[j] = fr * dy_xyz_yzz[j] + f2t * dy_yz_yzz[j];

                dz_xxyz_yzz[j] = fr * dz_xyz_yzz[j] + f2t * dz_yz_yzz[j];

                dx_xxyz_zzz[j] = fr * dx_xyz_zzz[j] + f2t * (dx_yz_zzz[j] + s_xyz_zzz[j]);

                dy_xxyz_zzz[j] = fr * dy_xyz_zzz[j] + f2t * dy_yz_zzz[j];

                dz_xxyz_zzz[j] = fr * dz_xyz_zzz[j] + f2t * dz_yz_zzz[j];

                dx_xxzz_xxx[j] = fr * dx_xzz_xxx[j] + f2t * (dx_zz_xxx[j] + 3.0 * dx_xzz_xx[j] + s_xzz_xxx[j]);

                dy_xxzz_xxx[j] = fr * dy_xzz_xxx[j] + f2t * (dy_zz_xxx[j] + 3.0 * dy_xzz_xx[j]);

                dz_xxzz_xxx[j] = fr * dz_xzz_xxx[j] + f2t * (dz_zz_xxx[j] + 3.0 * dz_xzz_xx[j]);

                dx_xxzz_xxy[j] = fr * dx_xzz_xxy[j] + f2t * (dx_zz_xxy[j] + 2.0 * dx_xzz_xy[j] + s_xzz_xxy[j]);

                dy_xxzz_xxy[j] = fr * dy_xzz_xxy[j] + f2t * (dy_zz_xxy[j] + 2.0 * dy_xzz_xy[j]);

                dz_xxzz_xxy[j] = fr * dz_xzz_xxy[j] + f2t * (dz_zz_xxy[j] + 2.0 * dz_xzz_xy[j]);

                dx_xxzz_xxz[j] = fr * dx_xzz_xxz[j] + f2t * (dx_zz_xxz[j] + 2.0 * dx_xzz_xz[j] + s_xzz_xxz[j]);

                dy_xxzz_xxz[j] = fr * dy_xzz_xxz[j] + f2t * (dy_zz_xxz[j] + 2.0 * dy_xzz_xz[j]);

                dz_xxzz_xxz[j] = fr * dz_xzz_xxz[j] + f2t * (dz_zz_xxz[j] + 2.0 * dz_xzz_xz[j]);

                dx_xxzz_xyy[j] = fr * dx_xzz_xyy[j] + f2t * (dx_zz_xyy[j] + dx_xzz_yy[j] + s_xzz_xyy[j]);

                dy_xxzz_xyy[j] = fr * dy_xzz_xyy[j] + f2t * (dy_zz_xyy[j] + dy_xzz_yy[j]);

                dz_xxzz_xyy[j] = fr * dz_xzz_xyy[j] + f2t * (dz_zz_xyy[j] + dz_xzz_yy[j]);

                dx_xxzz_xyz[j] = fr * dx_xzz_xyz[j] + f2t * (dx_zz_xyz[j] + dx_xzz_yz[j] + s_xzz_xyz[j]);

                dy_xxzz_xyz[j] = fr * dy_xzz_xyz[j] + f2t * (dy_zz_xyz[j] + dy_xzz_yz[j]);

                dz_xxzz_xyz[j] = fr * dz_xzz_xyz[j] + f2t * (dz_zz_xyz[j] + dz_xzz_yz[j]);

                dx_xxzz_xzz[j] = fr * dx_xzz_xzz[j] + f2t * (dx_zz_xzz[j] + dx_xzz_zz[j] + s_xzz_xzz[j]);

                dy_xxzz_xzz[j] = fr * dy_xzz_xzz[j] + f2t * (dy_zz_xzz[j] + dy_xzz_zz[j]);

                dz_xxzz_xzz[j] = fr * dz_xzz_xzz[j] + f2t * (dz_zz_xzz[j] + dz_xzz_zz[j]);

                dx_xxzz_yyy[j] = fr * dx_xzz_yyy[j] + f2t * (dx_zz_yyy[j] + s_xzz_yyy[j]);

                dy_xxzz_yyy[j] = fr * dy_xzz_yyy[j] + f2t * dy_zz_yyy[j];

                dz_xxzz_yyy[j] = fr * dz_xzz_yyy[j] + f2t * dz_zz_yyy[j];

                dx_xxzz_yyz[j] = fr * dx_xzz_yyz[j] + f2t * (dx_zz_yyz[j] + s_xzz_yyz[j]);

                dy_xxzz_yyz[j] = fr * dy_xzz_yyz[j] + f2t * dy_zz_yyz[j];

                dz_xxzz_yyz[j] = fr * dz_xzz_yyz[j] + f2t * dz_zz_yyz[j];

                dx_xxzz_yzz[j] = fr * dx_xzz_yzz[j] + f2t * (dx_zz_yzz[j] + s_xzz_yzz[j]);

                dy_xxzz_yzz[j] = fr * dy_xzz_yzz[j] + f2t * dy_zz_yzz[j];

                dz_xxzz_yzz[j] = fr * dz_xzz_yzz[j] + f2t * dz_zz_yzz[j];

                dx_xxzz_zzz[j] = fr * dx_xzz_zzz[j] + f2t * (dx_zz_zzz[j] + s_xzz_zzz[j]);

                dy_xxzz_zzz[j] = fr * dy_xzz_zzz[j] + f2t * dy_zz_zzz[j];

                dz_xxzz_zzz[j] = fr * dz_xzz_zzz[j] + f2t * dz_zz_zzz[j];

                dx_xyyy_xxx[j] = fr * dx_yyy_xxx[j] + f2t * (3.0 * dx_yyy_xx[j] + s_yyy_xxx[j]);

                dy_xyyy_xxx[j] = fr * dy_yyy_xxx[j] + f2t * 3.0 * dy_yyy_xx[j];

                dz_xyyy_xxx[j] = fr * dz_yyy_xxx[j] + f2t * 3.0 * dz_yyy_xx[j];

                dx_xyyy_xxy[j] = fr * dx_yyy_xxy[j] + f2t * (2.0 * dx_yyy_xy[j] + s_yyy_xxy[j]);

                dy_xyyy_xxy[j] = fr * dy_yyy_xxy[j] + f2t * 2.0 * dy_yyy_xy[j];

                dz_xyyy_xxy[j] = fr * dz_yyy_xxy[j] + f2t * 2.0 * dz_yyy_xy[j];

                dx_xyyy_xxz[j] = fr * dx_yyy_xxz[j] + f2t * (2.0 * dx_yyy_xz[j] + s_yyy_xxz[j]);

                dy_xyyy_xxz[j] = fr * dy_yyy_xxz[j] + f2t * 2.0 * dy_yyy_xz[j];

                dz_xyyy_xxz[j] = fr * dz_yyy_xxz[j] + f2t * 2.0 * dz_yyy_xz[j];

                dx_xyyy_xyy[j] = fr * dx_yyy_xyy[j] + f2t * (dx_yyy_yy[j] + s_yyy_xyy[j]);

                dy_xyyy_xyy[j] = fr * dy_yyy_xyy[j] + f2t * dy_yyy_yy[j];

                dz_xyyy_xyy[j] = fr * dz_yyy_xyy[j] + f2t * dz_yyy_yy[j];

                dx_xyyy_xyz[j] = fr * dx_yyy_xyz[j] + f2t * (dx_yyy_yz[j] + s_yyy_xyz[j]);

                dy_xyyy_xyz[j] = fr * dy_yyy_xyz[j] + f2t * dy_yyy_yz[j];

                dz_xyyy_xyz[j] = fr * dz_yyy_xyz[j] + f2t * dz_yyy_yz[j];

                dx_xyyy_xzz[j] = fr * dx_yyy_xzz[j] + f2t * (dx_yyy_zz[j] + s_yyy_xzz[j]);

                dy_xyyy_xzz[j] = fr * dy_yyy_xzz[j] + f2t * dy_yyy_zz[j];

                dz_xyyy_xzz[j] = fr * dz_yyy_xzz[j] + f2t * dz_yyy_zz[j];

                dx_xyyy_yyy[j] = fr * dx_yyy_yyy[j] + f2t * s_yyy_yyy[j];

                dy_xyyy_yyy[j] = fr * dy_yyy_yyy[j];

                dz_xyyy_yyy[j] = fr * dz_yyy_yyy[j];

                dx_xyyy_yyz[j] = fr * dx_yyy_yyz[j] + f2t * s_yyy_yyz[j];

                dy_xyyy_yyz[j] = fr * dy_yyy_yyz[j];

                dz_xyyy_yyz[j] = fr * dz_yyy_yyz[j];

                dx_xyyy_yzz[j] = fr * dx_yyy_yzz[j] + f2t * s_yyy_yzz[j];

                dy_xyyy_yzz[j] = fr * dy_yyy_yzz[j];

                dz_xyyy_yzz[j] = fr * dz_yyy_yzz[j];

                dx_xyyy_zzz[j] = fr * dx_yyy_zzz[j] + f2t * s_yyy_zzz[j];

                dy_xyyy_zzz[j] = fr * dy_yyy_zzz[j];

                dz_xyyy_zzz[j] = fr * dz_yyy_zzz[j];

                dx_xyyz_xxx[j] = fr * dx_yyz_xxx[j] + f2t * (3.0 * dx_yyz_xx[j] + s_yyz_xxx[j]);

                dy_xyyz_xxx[j] = fr * dy_yyz_xxx[j] + f2t * 3.0 * dy_yyz_xx[j];

                dz_xyyz_xxx[j] = fr * dz_yyz_xxx[j] + f2t * 3.0 * dz_yyz_xx[j];

                dx_xyyz_xxy[j] = fr * dx_yyz_xxy[j] + f2t * (2.0 * dx_yyz_xy[j] + s_yyz_xxy[j]);

                dy_xyyz_xxy[j] = fr * dy_yyz_xxy[j] + f2t * 2.0 * dy_yyz_xy[j];

                dz_xyyz_xxy[j] = fr * dz_yyz_xxy[j] + f2t * 2.0 * dz_yyz_xy[j];

                dx_xyyz_xxz[j] = fr * dx_yyz_xxz[j] + f2t * (2.0 * dx_yyz_xz[j] + s_yyz_xxz[j]);

                dy_xyyz_xxz[j] = fr * dy_yyz_xxz[j] + f2t * 2.0 * dy_yyz_xz[j];

                dz_xyyz_xxz[j] = fr * dz_yyz_xxz[j] + f2t * 2.0 * dz_yyz_xz[j];

                dx_xyyz_xyy[j] = fr * dx_yyz_xyy[j] + f2t * (dx_yyz_yy[j] + s_yyz_xyy[j]);

                dy_xyyz_xyy[j] = fr * dy_yyz_xyy[j] + f2t * dy_yyz_yy[j];

                dz_xyyz_xyy[j] = fr * dz_yyz_xyy[j] + f2t * dz_yyz_yy[j];

                dx_xyyz_xyz[j] = fr * dx_yyz_xyz[j] + f2t * (dx_yyz_yz[j] + s_yyz_xyz[j]);

                dy_xyyz_xyz[j] = fr * dy_yyz_xyz[j] + f2t * dy_yyz_yz[j];

                dz_xyyz_xyz[j] = fr * dz_yyz_xyz[j] + f2t * dz_yyz_yz[j];

                dx_xyyz_xzz[j] = fr * dx_yyz_xzz[j] + f2t * (dx_yyz_zz[j] + s_yyz_xzz[j]);

                dy_xyyz_xzz[j] = fr * dy_yyz_xzz[j] + f2t * dy_yyz_zz[j];

                dz_xyyz_xzz[j] = fr * dz_yyz_xzz[j] + f2t * dz_yyz_zz[j];

                dx_xyyz_yyy[j] = fr * dx_yyz_yyy[j] + f2t * s_yyz_yyy[j];

                dy_xyyz_yyy[j] = fr * dy_yyz_yyy[j];

                dz_xyyz_yyy[j] = fr * dz_yyz_yyy[j];

                dx_xyyz_yyz[j] = fr * dx_yyz_yyz[j] + f2t * s_yyz_yyz[j];

                dy_xyyz_yyz[j] = fr * dy_yyz_yyz[j];

                dz_xyyz_yyz[j] = fr * dz_yyz_yyz[j];

                dx_xyyz_yzz[j] = fr * dx_yyz_yzz[j] + f2t * s_yyz_yzz[j];

                dy_xyyz_yzz[j] = fr * dy_yyz_yzz[j];

                dz_xyyz_yzz[j] = fr * dz_yyz_yzz[j];

                dx_xyyz_zzz[j] = fr * dx_yyz_zzz[j] + f2t * s_yyz_zzz[j];

                dy_xyyz_zzz[j] = fr * dy_yyz_zzz[j];

                dz_xyyz_zzz[j] = fr * dz_yyz_zzz[j];

                dx_xyzz_xxx[j] = fr * dx_yzz_xxx[j] + f2t * (3.0 * dx_yzz_xx[j] + s_yzz_xxx[j]);

                dy_xyzz_xxx[j] = fr * dy_yzz_xxx[j] + f2t * 3.0 * dy_yzz_xx[j];

                dz_xyzz_xxx[j] = fr * dz_yzz_xxx[j] + f2t * 3.0 * dz_yzz_xx[j];

                dx_xyzz_xxy[j] = fr * dx_yzz_xxy[j] + f2t * (2.0 * dx_yzz_xy[j] + s_yzz_xxy[j]);

                dy_xyzz_xxy[j] = fr * dy_yzz_xxy[j] + f2t * 2.0 * dy_yzz_xy[j];

                dz_xyzz_xxy[j] = fr * dz_yzz_xxy[j] + f2t * 2.0 * dz_yzz_xy[j];

                dx_xyzz_xxz[j] = fr * dx_yzz_xxz[j] + f2t * (2.0 * dx_yzz_xz[j] + s_yzz_xxz[j]);

                dy_xyzz_xxz[j] = fr * dy_yzz_xxz[j] + f2t * 2.0 * dy_yzz_xz[j];

                dz_xyzz_xxz[j] = fr * dz_yzz_xxz[j] + f2t * 2.0 * dz_yzz_xz[j];

                dx_xyzz_xyy[j] = fr * dx_yzz_xyy[j] + f2t * (dx_yzz_yy[j] + s_yzz_xyy[j]);

                dy_xyzz_xyy[j] = fr * dy_yzz_xyy[j] + f2t * dy_yzz_yy[j];

                dz_xyzz_xyy[j] = fr * dz_yzz_xyy[j] + f2t * dz_yzz_yy[j];

                dx_xyzz_xyz[j] = fr * dx_yzz_xyz[j] + f2t * (dx_yzz_yz[j] + s_yzz_xyz[j]);

                dy_xyzz_xyz[j] = fr * dy_yzz_xyz[j] + f2t * dy_yzz_yz[j];

                dz_xyzz_xyz[j] = fr * dz_yzz_xyz[j] + f2t * dz_yzz_yz[j];

                dx_xyzz_xzz[j] = fr * dx_yzz_xzz[j] + f2t * (dx_yzz_zz[j] + s_yzz_xzz[j]);

                dy_xyzz_xzz[j] = fr * dy_yzz_xzz[j] + f2t * dy_yzz_zz[j];

                dz_xyzz_xzz[j] = fr * dz_yzz_xzz[j] + f2t * dz_yzz_zz[j];

                dx_xyzz_yyy[j] = fr * dx_yzz_yyy[j] + f2t * s_yzz_yyy[j];

                dy_xyzz_yyy[j] = fr * dy_yzz_yyy[j];

                dz_xyzz_yyy[j] = fr * dz_yzz_yyy[j];

                dx_xyzz_yyz[j] = fr * dx_yzz_yyz[j] + f2t * s_yzz_yyz[j];

                dy_xyzz_yyz[j] = fr * dy_yzz_yyz[j];

                dz_xyzz_yyz[j] = fr * dz_yzz_yyz[j];

                dx_xyzz_yzz[j] = fr * dx_yzz_yzz[j] + f2t * s_yzz_yzz[j];

                dy_xyzz_yzz[j] = fr * dy_yzz_yzz[j];

                dz_xyzz_yzz[j] = fr * dz_yzz_yzz[j];

                dx_xyzz_zzz[j] = fr * dx_yzz_zzz[j] + f2t * s_yzz_zzz[j];

                dy_xyzz_zzz[j] = fr * dy_yzz_zzz[j];

                dz_xyzz_zzz[j] = fr * dz_yzz_zzz[j];

                dx_xzzz_xxx[j] = fr * dx_zzz_xxx[j] + f2t * (3.0 * dx_zzz_xx[j] + s_zzz_xxx[j]);

                dy_xzzz_xxx[j] = fr * dy_zzz_xxx[j] + f2t * 3.0 * dy_zzz_xx[j];

                dz_xzzz_xxx[j] = fr * dz_zzz_xxx[j] + f2t * 3.0 * dz_zzz_xx[j];

                dx_xzzz_xxy[j] = fr * dx_zzz_xxy[j] + f2t * (2.0 * dx_zzz_xy[j] + s_zzz_xxy[j]);

                dy_xzzz_xxy[j] = fr * dy_zzz_xxy[j] + f2t * 2.0 * dy_zzz_xy[j];

                dz_xzzz_xxy[j] = fr * dz_zzz_xxy[j] + f2t * 2.0 * dz_zzz_xy[j];

                dx_xzzz_xxz[j] = fr * dx_zzz_xxz[j] + f2t * (2.0 * dx_zzz_xz[j] + s_zzz_xxz[j]);

                dy_xzzz_xxz[j] = fr * dy_zzz_xxz[j] + f2t * 2.0 * dy_zzz_xz[j];

                dz_xzzz_xxz[j] = fr * dz_zzz_xxz[j] + f2t * 2.0 * dz_zzz_xz[j];

                dx_xzzz_xyy[j] = fr * dx_zzz_xyy[j] + f2t * (dx_zzz_yy[j] + s_zzz_xyy[j]);

                dy_xzzz_xyy[j] = fr * dy_zzz_xyy[j] + f2t * dy_zzz_yy[j];

                dz_xzzz_xyy[j] = fr * dz_zzz_xyy[j] + f2t * dz_zzz_yy[j];

                dx_xzzz_xyz[j] = fr * dx_zzz_xyz[j] + f2t * (dx_zzz_yz[j] + s_zzz_xyz[j]);

                dy_xzzz_xyz[j] = fr * dy_zzz_xyz[j] + f2t * dy_zzz_yz[j];

                dz_xzzz_xyz[j] = fr * dz_zzz_xyz[j] + f2t * dz_zzz_yz[j];

                dx_xzzz_xzz[j] = fr * dx_zzz_xzz[j] + f2t * (dx_zzz_zz[j] + s_zzz_xzz[j]);

                dy_xzzz_xzz[j] = fr * dy_zzz_xzz[j] + f2t * dy_zzz_zz[j];

                dz_xzzz_xzz[j] = fr * dz_zzz_xzz[j] + f2t * dz_zzz_zz[j];

                dx_xzzz_yyy[j] = fr * dx_zzz_yyy[j] + f2t * s_zzz_yyy[j];

                dy_xzzz_yyy[j] = fr * dy_zzz_yyy[j];

                dz_xzzz_yyy[j] = fr * dz_zzz_yyy[j];

                dx_xzzz_yyz[j] = fr * dx_zzz_yyz[j] + f2t * s_zzz_yyz[j];

                dy_xzzz_yyz[j] = fr * dy_zzz_yyz[j];

                dz_xzzz_yyz[j] = fr * dz_zzz_yyz[j];

                dx_xzzz_yzz[j] = fr * dx_zzz_yzz[j] + f2t * s_zzz_yzz[j];

                dy_xzzz_yzz[j] = fr * dy_zzz_yzz[j];

                dz_xzzz_yzz[j] = fr * dz_zzz_yzz[j];

                dx_xzzz_zzz[j] = fr * dx_zzz_zzz[j] + f2t * s_zzz_zzz[j];

                dy_xzzz_zzz[j] = fr * dy_zzz_zzz[j];

                dz_xzzz_zzz[j] = fr * dz_zzz_zzz[j];

                // leading y component

                fr = pay[j];

                dx_yyyy_xxx[j] = fr * dx_yyy_xxx[j] + f2t * 3.0 * dx_yy_xxx[j];

                dy_yyyy_xxx[j] = fr * dy_yyy_xxx[j] + f2t * (3.0 * dy_yy_xxx[j] + s_yyy_xxx[j]);

                dz_yyyy_xxx[j] = fr * dz_yyy_xxx[j] + f2t * 3.0 * dz_yy_xxx[j];

                dx_yyyy_xxy[j] = fr * dx_yyy_xxy[j] + f2t * (3.0 * dx_yy_xxy[j] + dx_yyy_xx[j]);

                dy_yyyy_xxy[j] = fr * dy_yyy_xxy[j] + f2t * (3.0 * dy_yy_xxy[j] + dy_yyy_xx[j] + s_yyy_xxy[j]);

                dz_yyyy_xxy[j] = fr * dz_yyy_xxy[j] + f2t * (3.0 * dz_yy_xxy[j] + dz_yyy_xx[j]);

                dx_yyyy_xxz[j] = fr * dx_yyy_xxz[j] + f2t * 3.0 * dx_yy_xxz[j];

                dy_yyyy_xxz[j] = fr * dy_yyy_xxz[j] + f2t * (3.0 * dy_yy_xxz[j] + s_yyy_xxz[j]);

                dz_yyyy_xxz[j] = fr * dz_yyy_xxz[j] + f2t * 3.0 * dz_yy_xxz[j];

                dx_yyyy_xyy[j] = fr * dx_yyy_xyy[j] + f2t * (3.0 * dx_yy_xyy[j] + 2.0 * dx_yyy_xy[j]);

                dy_yyyy_xyy[j] = fr * dy_yyy_xyy[j] + f2t * (3.0 * dy_yy_xyy[j] + 2.0 * dy_yyy_xy[j] + s_yyy_xyy[j]);

                dz_yyyy_xyy[j] = fr * dz_yyy_xyy[j] + f2t * (3.0 * dz_yy_xyy[j] + 2.0 * dz_yyy_xy[j]);

                dx_yyyy_xyz[j] = fr * dx_yyy_xyz[j] + f2t * (3.0 * dx_yy_xyz[j] + dx_yyy_xz[j]);

                dy_yyyy_xyz[j] = fr * dy_yyy_xyz[j] + f2t * (3.0 * dy_yy_xyz[j] + dy_yyy_xz[j] + s_yyy_xyz[j]);

                dz_yyyy_xyz[j] = fr * dz_yyy_xyz[j] + f2t * (3.0 * dz_yy_xyz[j] + dz_yyy_xz[j]);

                dx_yyyy_xzz[j] = fr * dx_yyy_xzz[j] + f2t * 3.0 * dx_yy_xzz[j];

                dy_yyyy_xzz[j] = fr * dy_yyy_xzz[j] + f2t * (3.0 * dy_yy_xzz[j] + s_yyy_xzz[j]);

                dz_yyyy_xzz[j] = fr * dz_yyy_xzz[j] + f2t * 3.0 * dz_yy_xzz[j];

                dx_yyyy_yyy[j] = fr * dx_yyy_yyy[j] + f2t * (3.0 * dx_yy_yyy[j] + 3.0 * dx_yyy_yy[j]);

                dy_yyyy_yyy[j] = fr * dy_yyy_yyy[j] + f2t * (3.0 * dy_yy_yyy[j] + 3.0 * dy_yyy_yy[j] + s_yyy_yyy[j]);

                dz_yyyy_yyy[j] = fr * dz_yyy_yyy[j] + f2t * (3.0 * dz_yy_yyy[j] + 3.0 * dz_yyy_yy[j]);

                dx_yyyy_yyz[j] = fr * dx_yyy_yyz[j] + f2t * (3.0 * dx_yy_yyz[j] + 2.0 * dx_yyy_yz[j]);

                dy_yyyy_yyz[j] = fr * dy_yyy_yyz[j] + f2t * (3.0 * dy_yy_yyz[j] + 2.0 * dy_yyy_yz[j] + s_yyy_yyz[j]);

                dz_yyyy_yyz[j] = fr * dz_yyy_yyz[j] + f2t * (3.0 * dz_yy_yyz[j] + 2.0 * dz_yyy_yz[j]);

                dx_yyyy_yzz[j] = fr * dx_yyy_yzz[j] + f2t * (3.0 * dx_yy_yzz[j] + dx_yyy_zz[j]);

                dy_yyyy_yzz[j] = fr * dy_yyy_yzz[j] + f2t * (3.0 * dy_yy_yzz[j] + dy_yyy_zz[j] + s_yyy_yzz[j]);

                dz_yyyy_yzz[j] = fr * dz_yyy_yzz[j] + f2t * (3.0 * dz_yy_yzz[j] + dz_yyy_zz[j]);

                dx_yyyy_zzz[j] = fr * dx_yyy_zzz[j] + f2t * 3.0 * dx_yy_zzz[j];

                dy_yyyy_zzz[j] = fr * dy_yyy_zzz[j] + f2t * (3.0 * dy_yy_zzz[j] + s_yyy_zzz[j]);

                dz_yyyy_zzz[j] = fr * dz_yyy_zzz[j] + f2t * 3.0 * dz_yy_zzz[j];

                dx_yyyz_xxx[j] = fr * dx_yyz_xxx[j] + f2t * 2.0 * dx_yz_xxx[j];

                dy_yyyz_xxx[j] = fr * dy_yyz_xxx[j] + f2t * (2.0 * dy_yz_xxx[j] + s_yyz_xxx[j]);

                dz_yyyz_xxx[j] = fr * dz_yyz_xxx[j] + f2t * 2.0 * dz_yz_xxx[j];

                dx_yyyz_xxy[j] = fr * dx_yyz_xxy[j] + f2t * (2.0 * dx_yz_xxy[j] + dx_yyz_xx[j]);

                dy_yyyz_xxy[j] = fr * dy_yyz_xxy[j] + f2t * (2.0 * dy_yz_xxy[j] + dy_yyz_xx[j] + s_yyz_xxy[j]);

                dz_yyyz_xxy[j] = fr * dz_yyz_xxy[j] + f2t * (2.0 * dz_yz_xxy[j] + dz_yyz_xx[j]);

                dx_yyyz_xxz[j] = fr * dx_yyz_xxz[j] + f2t * 2.0 * dx_yz_xxz[j];

                dy_yyyz_xxz[j] = fr * dy_yyz_xxz[j] + f2t * (2.0 * dy_yz_xxz[j] + s_yyz_xxz[j]);

                dz_yyyz_xxz[j] = fr * dz_yyz_xxz[j] + f2t * 2.0 * dz_yz_xxz[j];

                dx_yyyz_xyy[j] = fr * dx_yyz_xyy[j] + f2t * (2.0 * dx_yz_xyy[j] + 2.0 * dx_yyz_xy[j]);

                dy_yyyz_xyy[j] = fr * dy_yyz_xyy[j] + f2t * (2.0 * dy_yz_xyy[j] + 2.0 * dy_yyz_xy[j] + s_yyz_xyy[j]);

                dz_yyyz_xyy[j] = fr * dz_yyz_xyy[j] + f2t * (2.0 * dz_yz_xyy[j] + 2.0 * dz_yyz_xy[j]);

                dx_yyyz_xyz[j] = fr * dx_yyz_xyz[j] + f2t * (2.0 * dx_yz_xyz[j] + dx_yyz_xz[j]);

                dy_yyyz_xyz[j] = fr * dy_yyz_xyz[j] + f2t * (2.0 * dy_yz_xyz[j] + dy_yyz_xz[j] + s_yyz_xyz[j]);

                dz_yyyz_xyz[j] = fr * dz_yyz_xyz[j] + f2t * (2.0 * dz_yz_xyz[j] + dz_yyz_xz[j]);

                dx_yyyz_xzz[j] = fr * dx_yyz_xzz[j] + f2t * 2.0 * dx_yz_xzz[j];

                dy_yyyz_xzz[j] = fr * dy_yyz_xzz[j] + f2t * (2.0 * dy_yz_xzz[j] + s_yyz_xzz[j]);

                dz_yyyz_xzz[j] = fr * dz_yyz_xzz[j] + f2t * 2.0 * dz_yz_xzz[j];

                dx_yyyz_yyy[j] = fr * dx_yyz_yyy[j] + f2t * (2.0 * dx_yz_yyy[j] + 3.0 * dx_yyz_yy[j]);

                dy_yyyz_yyy[j] = fr * dy_yyz_yyy[j] + f2t * (2.0 * dy_yz_yyy[j] + 3.0 * dy_yyz_yy[j] + s_yyz_yyy[j]);

                dz_yyyz_yyy[j] = fr * dz_yyz_yyy[j] + f2t * (2.0 * dz_yz_yyy[j] + 3.0 * dz_yyz_yy[j]);

                dx_yyyz_yyz[j] = fr * dx_yyz_yyz[j] + f2t * (2.0 * dx_yz_yyz[j] + 2.0 * dx_yyz_yz[j]);

                dy_yyyz_yyz[j] = fr * dy_yyz_yyz[j] + f2t * (2.0 * dy_yz_yyz[j] + 2.0 * dy_yyz_yz[j] + s_yyz_yyz[j]);

                dz_yyyz_yyz[j] = fr * dz_yyz_yyz[j] + f2t * (2.0 * dz_yz_yyz[j] + 2.0 * dz_yyz_yz[j]);

                dx_yyyz_yzz[j] = fr * dx_yyz_yzz[j] + f2t * (2.0 * dx_yz_yzz[j] + dx_yyz_zz[j]);

                dy_yyyz_yzz[j] = fr * dy_yyz_yzz[j] + f2t * (2.0 * dy_yz_yzz[j] + dy_yyz_zz[j] + s_yyz_yzz[j]);

                dz_yyyz_yzz[j] = fr * dz_yyz_yzz[j] + f2t * (2.0 * dz_yz_yzz[j] + dz_yyz_zz[j]);

                dx_yyyz_zzz[j] = fr * dx_yyz_zzz[j] + f2t * 2.0 * dx_yz_zzz[j];

                dy_yyyz_zzz[j] = fr * dy_yyz_zzz[j] + f2t * (2.0 * dy_yz_zzz[j] + s_yyz_zzz[j]);

                dz_yyyz_zzz[j] = fr * dz_yyz_zzz[j] + f2t * 2.0 * dz_yz_zzz[j];

                dx_yyzz_xxx[j] = fr * dx_yzz_xxx[j] + f2t * dx_zz_xxx[j];

                dy_yyzz_xxx[j] = fr * dy_yzz_xxx[j] + f2t * (dy_zz_xxx[j] + s_yzz_xxx[j]);

                dz_yyzz_xxx[j] = fr * dz_yzz_xxx[j] + f2t * dz_zz_xxx[j];

                dx_yyzz_xxy[j] = fr * dx_yzz_xxy[j] + f2t * (dx_zz_xxy[j] + dx_yzz_xx[j]);

                dy_yyzz_xxy[j] = fr * dy_yzz_xxy[j] + f2t * (dy_zz_xxy[j] + dy_yzz_xx[j] + s_yzz_xxy[j]);

                dz_yyzz_xxy[j] = fr * dz_yzz_xxy[j] + f2t * (dz_zz_xxy[j] + dz_yzz_xx[j]);

                dx_yyzz_xxz[j] = fr * dx_yzz_xxz[j] + f2t * dx_zz_xxz[j];

                dy_yyzz_xxz[j] = fr * dy_yzz_xxz[j] + f2t * (dy_zz_xxz[j] + s_yzz_xxz[j]);

                dz_yyzz_xxz[j] = fr * dz_yzz_xxz[j] + f2t * dz_zz_xxz[j];

                dx_yyzz_xyy[j] = fr * dx_yzz_xyy[j] + f2t * (dx_zz_xyy[j] + 2.0 * dx_yzz_xy[j]);

                dy_yyzz_xyy[j] = fr * dy_yzz_xyy[j] + f2t * (dy_zz_xyy[j] + 2.0 * dy_yzz_xy[j] + s_yzz_xyy[j]);

                dz_yyzz_xyy[j] = fr * dz_yzz_xyy[j] + f2t * (dz_zz_xyy[j] + 2.0 * dz_yzz_xy[j]);

                dx_yyzz_xyz[j] = fr * dx_yzz_xyz[j] + f2t * (dx_zz_xyz[j] + dx_yzz_xz[j]);

                dy_yyzz_xyz[j] = fr * dy_yzz_xyz[j] + f2t * (dy_zz_xyz[j] + dy_yzz_xz[j] + s_yzz_xyz[j]);

                dz_yyzz_xyz[j] = fr * dz_yzz_xyz[j] + f2t * (dz_zz_xyz[j] + dz_yzz_xz[j]);

                dx_yyzz_xzz[j] = fr * dx_yzz_xzz[j] + f2t * dx_zz_xzz[j];

                dy_yyzz_xzz[j] = fr * dy_yzz_xzz[j] + f2t * (dy_zz_xzz[j] + s_yzz_xzz[j]);

                dz_yyzz_xzz[j] = fr * dz_yzz_xzz[j] + f2t * dz_zz_xzz[j];

                dx_yyzz_yyy[j] = fr * dx_yzz_yyy[j] + f2t * (dx_zz_yyy[j] + 3.0 * dx_yzz_yy[j]);

                dy_yyzz_yyy[j] = fr * dy_yzz_yyy[j] + f2t * (dy_zz_yyy[j] + 3.0 * dy_yzz_yy[j] + s_yzz_yyy[j]);

                dz_yyzz_yyy[j] = fr * dz_yzz_yyy[j] + f2t * (dz_zz_yyy[j] + 3.0 * dz_yzz_yy[j]);

                dx_yyzz_yyz[j] = fr * dx_yzz_yyz[j] + f2t * (dx_zz_yyz[j] + 2.0 * dx_yzz_yz[j]);

                dy_yyzz_yyz[j] = fr * dy_yzz_yyz[j] + f2t * (dy_zz_yyz[j] + 2.0 * dy_yzz_yz[j] + s_yzz_yyz[j]);

                dz_yyzz_yyz[j] = fr * dz_yzz_yyz[j] + f2t * (dz_zz_yyz[j] + 2.0 * dz_yzz_yz[j]);

                dx_yyzz_yzz[j] = fr * dx_yzz_yzz[j] + f2t * (dx_zz_yzz[j] + dx_yzz_zz[j]);

                dy_yyzz_yzz[j] = fr * dy_yzz_yzz[j] + f2t * (dy_zz_yzz[j] + dy_yzz_zz[j] + s_yzz_yzz[j]);

                dz_yyzz_yzz[j] = fr * dz_yzz_yzz[j] + f2t * (dz_zz_yzz[j] + dz_yzz_zz[j]);

                dx_yyzz_zzz[j] = fr * dx_yzz_zzz[j] + f2t * dx_zz_zzz[j];

                dy_yyzz_zzz[j] = fr * dy_yzz_zzz[j] + f2t * (dy_zz_zzz[j] + s_yzz_zzz[j]);

                dz_yyzz_zzz[j] = fr * dz_yzz_zzz[j] + f2t * dz_zz_zzz[j];

                dx_yzzz_xxx[j] = fr * dx_zzz_xxx[j];

                dy_yzzz_xxx[j] = fr * dy_zzz_xxx[j] + f2t * s_zzz_xxx[j];

                dz_yzzz_xxx[j] = fr * dz_zzz_xxx[j];

                dx_yzzz_xxy[j] = fr * dx_zzz_xxy[j] + f2t * dx_zzz_xx[j];

                dy_yzzz_xxy[j] = fr * dy_zzz_xxy[j] + f2t * (dy_zzz_xx[j] + s_zzz_xxy[j]);

                dz_yzzz_xxy[j] = fr * dz_zzz_xxy[j] + f2t * dz_zzz_xx[j];

                dx_yzzz_xxz[j] = fr * dx_zzz_xxz[j];

                dy_yzzz_xxz[j] = fr * dy_zzz_xxz[j] + f2t * s_zzz_xxz[j];

                dz_yzzz_xxz[j] = fr * dz_zzz_xxz[j];

                dx_yzzz_xyy[j] = fr * dx_zzz_xyy[j] + f2t * 2.0 * dx_zzz_xy[j];

                dy_yzzz_xyy[j] = fr * dy_zzz_xyy[j] + f2t * (2.0 * dy_zzz_xy[j] + s_zzz_xyy[j]);

                dz_yzzz_xyy[j] = fr * dz_zzz_xyy[j] + f2t * 2.0 * dz_zzz_xy[j];

                dx_yzzz_xyz[j] = fr * dx_zzz_xyz[j] + f2t * dx_zzz_xz[j];

                dy_yzzz_xyz[j] = fr * dy_zzz_xyz[j] + f2t * (dy_zzz_xz[j] + s_zzz_xyz[j]);

                dz_yzzz_xyz[j] = fr * dz_zzz_xyz[j] + f2t * dz_zzz_xz[j];

                dx_yzzz_xzz[j] = fr * dx_zzz_xzz[j];

                dy_yzzz_xzz[j] = fr * dy_zzz_xzz[j] + f2t * s_zzz_xzz[j];

                dz_yzzz_xzz[j] = fr * dz_zzz_xzz[j];

                dx_yzzz_yyy[j] = fr * dx_zzz_yyy[j] + f2t * 3.0 * dx_zzz_yy[j];

                dy_yzzz_yyy[j] = fr * dy_zzz_yyy[j] + f2t * (3.0 * dy_zzz_yy[j] + s_zzz_yyy[j]);

                dz_yzzz_yyy[j] = fr * dz_zzz_yyy[j] + f2t * 3.0 * dz_zzz_yy[j];

                dx_yzzz_yyz[j] = fr * dx_zzz_yyz[j] + f2t * 2.0 * dx_zzz_yz[j];

                dy_yzzz_yyz[j] = fr * dy_zzz_yyz[j] + f2t * (2.0 * dy_zzz_yz[j] + s_zzz_yyz[j]);

                dz_yzzz_yyz[j] = fr * dz_zzz_yyz[j] + f2t * 2.0 * dz_zzz_yz[j];

                dx_yzzz_yzz[j] = fr * dx_zzz_yzz[j] + f2t * dx_zzz_zz[j];

                dy_yzzz_yzz[j] = fr * dy_zzz_yzz[j] + f2t * (dy_zzz_zz[j] + s_zzz_yzz[j]);

                dz_yzzz_yzz[j] = fr * dz_zzz_yzz[j] + f2t * dz_zzz_zz[j];

                dx_yzzz_zzz[j] = fr * dx_zzz_zzz[j];

                dy_yzzz_zzz[j] = fr * dy_zzz_zzz[j] + f2t * s_zzz_zzz[j];

                dz_yzzz_zzz[j] = fr * dz_zzz_zzz[j];

                // leading z component

                fr = paz[j];

                dx_zzzz_xxx[j] = fr * dx_zzz_xxx[j] + f2t * 3.0 * dx_zz_xxx[j];

                dy_zzzz_xxx[j] = fr * dy_zzz_xxx[j] + f2t * 3.0 * dy_zz_xxx[j];

                dz_zzzz_xxx[j] = fr * dz_zzz_xxx[j] + f2t * (3.0 * dz_zz_xxx[j] + s_zzz_xxx[j]);

                dx_zzzz_xxy[j] = fr * dx_zzz_xxy[j] + f2t * 3.0 * dx_zz_xxy[j];

                dy_zzzz_xxy[j] = fr * dy_zzz_xxy[j] + f2t * 3.0 * dy_zz_xxy[j];

                dz_zzzz_xxy[j] = fr * dz_zzz_xxy[j] + f2t * (3.0 * dz_zz_xxy[j] + s_zzz_xxy[j]);

                dx_zzzz_xxz[j] = fr * dx_zzz_xxz[j] + f2t * (3.0 * dx_zz_xxz[j] + dx_zzz_xx[j]);

                dy_zzzz_xxz[j] = fr * dy_zzz_xxz[j] + f2t * (3.0 * dy_zz_xxz[j] + dy_zzz_xx[j]);

                dz_zzzz_xxz[j] = fr * dz_zzz_xxz[j] + f2t * (3.0 * dz_zz_xxz[j] + dz_zzz_xx[j] + s_zzz_xxz[j]);

                dx_zzzz_xyy[j] = fr * dx_zzz_xyy[j] + f2t * 3.0 * dx_zz_xyy[j];

                dy_zzzz_xyy[j] = fr * dy_zzz_xyy[j] + f2t * 3.0 * dy_zz_xyy[j];

                dz_zzzz_xyy[j] = fr * dz_zzz_xyy[j] + f2t * (3.0 * dz_zz_xyy[j] + s_zzz_xyy[j]);

                dx_zzzz_xyz[j] = fr * dx_zzz_xyz[j] + f2t * (3.0 * dx_zz_xyz[j] + dx_zzz_xy[j]);

                dy_zzzz_xyz[j] = fr * dy_zzz_xyz[j] + f2t * (3.0 * dy_zz_xyz[j] + dy_zzz_xy[j]);

                dz_zzzz_xyz[j] = fr * dz_zzz_xyz[j] + f2t * (3.0 * dz_zz_xyz[j] + dz_zzz_xy[j] + s_zzz_xyz[j]);

                dx_zzzz_xzz[j] = fr * dx_zzz_xzz[j] + f2t * (3.0 * dx_zz_xzz[j] + 2.0 * dx_zzz_xz[j]);

                dy_zzzz_xzz[j] = fr * dy_zzz_xzz[j] + f2t * (3.0 * dy_zz_xzz[j] + 2.0 * dy_zzz_xz[j]);

                dz_zzzz_xzz[j] = fr * dz_zzz_xzz[j] + f2t * (3.0 * dz_zz_xzz[j] + 2.0 * dz_zzz_xz[j] + s_zzz_xzz[j]);

                dx_zzzz_yyy[j] = fr * dx_zzz_yyy[j] + f2t * 3.0 * dx_zz_yyy[j];

                dy_zzzz_yyy[j] = fr * dy_zzz_yyy[j] + f2t * 3.0 * dy_zz_yyy[j];

                dz_zzzz_yyy[j] = fr * dz_zzz_yyy[j] + f2t * (3.0 * dz_zz_yyy[j] + s_zzz_yyy[j]);

                dx_zzzz_yyz[j] = fr * dx_zzz_yyz[j] + f2t * (3.0 * dx_zz_yyz[j] + dx_zzz_yy[j]);

                dy_zzzz_yyz[j] = fr * dy_zzz_yyz[j] + f2t * (3.0 * dy_zz_yyz[j] + dy_zzz_yy[j]);

                dz_zzzz_yyz[j] = fr * dz_zzz_yyz[j] + f2t * (3.0 * dz_zz_yyz[j] + dz_zzz_yy[j] + s_zzz_yyz[j]);

                dx_zzzz_yzz[j] = fr * dx_zzz_yzz[j] + f2t * (3.0 * dx_zz_yzz[j] + 2.0 * dx_zzz_yz[j]);

                dy_zzzz_yzz[j] = fr * dy_zzz_yzz[j] + f2t * (3.0 * dy_zz_yzz[j] + 2.0 * dy_zzz_yz[j]);

                dz_zzzz_yzz[j] = fr * dz_zzz_yzz[j] + f2t * (3.0 * dz_zz_yzz[j] + 2.0 * dz_zzz_yz[j] + s_zzz_yzz[j]);

                dx_zzzz_zzz[j] = fr * dx_zzz_zzz[j] + f2t * (3.0 * dx_zz_zzz[j] + 3.0 * dx_zzz_zz[j]);

                dy_zzzz_zzz[j] = fr * dy_zzz_zzz[j] + f2t * (3.0 * dy_zz_zzz[j] + 3.0 * dy_zzz_zz[j]);

                dz_zzzz_zzz[j] = fr * dz_zzz_zzz[j] + f2t * (3.0 * dz_zz_zzz[j] + 3.0 * dz_zzz_zz[j] + s_zzz_zzz[j]);
            }

            idx++;
        }
    }

    void
    compElectricDipoleForGG(      CMemBlock2D<double>&  primBuffer,
                            const CVecThreeIndexes&     recPattern,
                            const std::vector<int32_t>& recIndexes,
                            const CMemBlock2D<double>&  osFactors,
                            const CMemBlock2D<double>&  paDistances,
                            const CGtoBlock&            braGtoBlock,
                            const CGtoBlock&            ketGtoBlock,
                            const int32_t               iContrGto)
    {
        // skip integrals if not included in recursion pattern

        if (!genfunc::isInVector(recPattern, {4, 4, 0})) return;

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        auto bdim = epos[iContrGto] - spos[iContrGto];

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // get position of integrals in primitves buffer

        auto doff  = genfunc::findTripleIndex(recIndexes, recPattern, {4, 4, 0});

        auto d1off = genfunc::findTripleIndex(recIndexes, recPattern, {3, 4, 0});

        auto d2off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 4, 0});

        auto dkoff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 3, 0});

        auto soff = genfunc::findTripleIndex(recIndexes, recPattern, {3, 4, 1});

        auto s1off = genfunc::findTripleIndex(recIndexes, recPattern, {2, 4, 1});

        auto s2off = genfunc::findTripleIndex(recIndexes, recPattern, {1, 4, 1});

        auto skoff = genfunc::findTripleIndex(recIndexes, recPattern, {2, 3, 1});

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(2 * idx);

            // set up pointers to distances R(PA)

            auto pax = paDistances.data(3 * idx);

            auto pay = paDistances.data(3 * idx + 1);

            auto paz = paDistances.data(3 * idx + 2);

            // set up pointers to (G|M|G) integrals

            auto dx_xxxx_xxxx = primBuffer.data(doff + 225 * idx);

            auto dx_xxxx_xxxy = primBuffer.data(doff + 225 * idx + 1);

            auto dx_xxxx_xxxz = primBuffer.data(doff + 225 * idx + 2);

            auto dx_xxxx_xxyy = primBuffer.data(doff + 225 * idx + 3);

            auto dx_xxxx_xxyz = primBuffer.data(doff + 225 * idx + 4);

            auto dx_xxxx_xxzz = primBuffer.data(doff + 225 * idx + 5);

            auto dx_xxxx_xyyy = primBuffer.data(doff + 225 * idx + 6);

            auto dx_xxxx_xyyz = primBuffer.data(doff + 225 * idx + 7);

            auto dx_xxxx_xyzz = primBuffer.data(doff + 225 * idx + 8);

            auto dx_xxxx_xzzz = primBuffer.data(doff + 225 * idx + 9);

            auto dx_xxxx_yyyy = primBuffer.data(doff + 225 * idx + 10);

            auto dx_xxxx_yyyz = primBuffer.data(doff + 225 * idx + 11);

            auto dx_xxxx_yyzz = primBuffer.data(doff + 225 * idx + 12);

            auto dx_xxxx_yzzz = primBuffer.data(doff + 225 * idx + 13);

            auto dx_xxxx_zzzz = primBuffer.data(doff + 225 * idx + 14);

            auto dx_xxxy_xxxx = primBuffer.data(doff + 225 * idx + 15);

            auto dx_xxxy_xxxy = primBuffer.data(doff + 225 * idx + 16);

            auto dx_xxxy_xxxz = primBuffer.data(doff + 225 * idx + 17);

            auto dx_xxxy_xxyy = primBuffer.data(doff + 225 * idx + 18);

            auto dx_xxxy_xxyz = primBuffer.data(doff + 225 * idx + 19);

            auto dx_xxxy_xxzz = primBuffer.data(doff + 225 * idx + 20);

            auto dx_xxxy_xyyy = primBuffer.data(doff + 225 * idx + 21);

            auto dx_xxxy_xyyz = primBuffer.data(doff + 225 * idx + 22);

            auto dx_xxxy_xyzz = primBuffer.data(doff + 225 * idx + 23);

            auto dx_xxxy_xzzz = primBuffer.data(doff + 225 * idx + 24);

            auto dx_xxxy_yyyy = primBuffer.data(doff + 225 * idx + 25);

            auto dx_xxxy_yyyz = primBuffer.data(doff + 225 * idx + 26);

            auto dx_xxxy_yyzz = primBuffer.data(doff + 225 * idx + 27);

            auto dx_xxxy_yzzz = primBuffer.data(doff + 225 * idx + 28);

            auto dx_xxxy_zzzz = primBuffer.data(doff + 225 * idx + 29);

            auto dx_xxxz_xxxx = primBuffer.data(doff + 225 * idx + 30);

            auto dx_xxxz_xxxy = primBuffer.data(doff + 225 * idx + 31);

            auto dx_xxxz_xxxz = primBuffer.data(doff + 225 * idx + 32);

            auto dx_xxxz_xxyy = primBuffer.data(doff + 225 * idx + 33);

            auto dx_xxxz_xxyz = primBuffer.data(doff + 225 * idx + 34);

            auto dx_xxxz_xxzz = primBuffer.data(doff + 225 * idx + 35);

            auto dx_xxxz_xyyy = primBuffer.data(doff + 225 * idx + 36);

            auto dx_xxxz_xyyz = primBuffer.data(doff + 225 * idx + 37);

            auto dx_xxxz_xyzz = primBuffer.data(doff + 225 * idx + 38);

            auto dx_xxxz_xzzz = primBuffer.data(doff + 225 * idx + 39);

            auto dx_xxxz_yyyy = primBuffer.data(doff + 225 * idx + 40);

            auto dx_xxxz_yyyz = primBuffer.data(doff + 225 * idx + 41);

            auto dx_xxxz_yyzz = primBuffer.data(doff + 225 * idx + 42);

            auto dx_xxxz_yzzz = primBuffer.data(doff + 225 * idx + 43);

            auto dx_xxxz_zzzz = primBuffer.data(doff + 225 * idx + 44);

            auto dx_xxyy_xxxx = primBuffer.data(doff + 225 * idx + 45);

            auto dx_xxyy_xxxy = primBuffer.data(doff + 225 * idx + 46);

            auto dx_xxyy_xxxz = primBuffer.data(doff + 225 * idx + 47);

            auto dx_xxyy_xxyy = primBuffer.data(doff + 225 * idx + 48);

            auto dx_xxyy_xxyz = primBuffer.data(doff + 225 * idx + 49);

            auto dx_xxyy_xxzz = primBuffer.data(doff + 225 * idx + 50);

            auto dx_xxyy_xyyy = primBuffer.data(doff + 225 * idx + 51);

            auto dx_xxyy_xyyz = primBuffer.data(doff + 225 * idx + 52);

            auto dx_xxyy_xyzz = primBuffer.data(doff + 225 * idx + 53);

            auto dx_xxyy_xzzz = primBuffer.data(doff + 225 * idx + 54);

            auto dx_xxyy_yyyy = primBuffer.data(doff + 225 * idx + 55);

            auto dx_xxyy_yyyz = primBuffer.data(doff + 225 * idx + 56);

            auto dx_xxyy_yyzz = primBuffer.data(doff + 225 * idx + 57);

            auto dx_xxyy_yzzz = primBuffer.data(doff + 225 * idx + 58);

            auto dx_xxyy_zzzz = primBuffer.data(doff + 225 * idx + 59);

            auto dx_xxyz_xxxx = primBuffer.data(doff + 225 * idx + 60);

            auto dx_xxyz_xxxy = primBuffer.data(doff + 225 * idx + 61);

            auto dx_xxyz_xxxz = primBuffer.data(doff + 225 * idx + 62);

            auto dx_xxyz_xxyy = primBuffer.data(doff + 225 * idx + 63);

            auto dx_xxyz_xxyz = primBuffer.data(doff + 225 * idx + 64);

            auto dx_xxyz_xxzz = primBuffer.data(doff + 225 * idx + 65);

            auto dx_xxyz_xyyy = primBuffer.data(doff + 225 * idx + 66);

            auto dx_xxyz_xyyz = primBuffer.data(doff + 225 * idx + 67);

            auto dx_xxyz_xyzz = primBuffer.data(doff + 225 * idx + 68);

            auto dx_xxyz_xzzz = primBuffer.data(doff + 225 * idx + 69);

            auto dx_xxyz_yyyy = primBuffer.data(doff + 225 * idx + 70);

            auto dx_xxyz_yyyz = primBuffer.data(doff + 225 * idx + 71);

            auto dx_xxyz_yyzz = primBuffer.data(doff + 225 * idx + 72);

            auto dx_xxyz_yzzz = primBuffer.data(doff + 225 * idx + 73);

            auto dx_xxyz_zzzz = primBuffer.data(doff + 225 * idx + 74);

            auto dx_xxzz_xxxx = primBuffer.data(doff + 225 * idx + 75);

            auto dx_xxzz_xxxy = primBuffer.data(doff + 225 * idx + 76);

            auto dx_xxzz_xxxz = primBuffer.data(doff + 225 * idx + 77);

            auto dx_xxzz_xxyy = primBuffer.data(doff + 225 * idx + 78);

            auto dx_xxzz_xxyz = primBuffer.data(doff + 225 * idx + 79);

            auto dx_xxzz_xxzz = primBuffer.data(doff + 225 * idx + 80);

            auto dx_xxzz_xyyy = primBuffer.data(doff + 225 * idx + 81);

            auto dx_xxzz_xyyz = primBuffer.data(doff + 225 * idx + 82);

            auto dx_xxzz_xyzz = primBuffer.data(doff + 225 * idx + 83);

            auto dx_xxzz_xzzz = primBuffer.data(doff + 225 * idx + 84);

            auto dx_xxzz_yyyy = primBuffer.data(doff + 225 * idx + 85);

            auto dx_xxzz_yyyz = primBuffer.data(doff + 225 * idx + 86);

            auto dx_xxzz_yyzz = primBuffer.data(doff + 225 * idx + 87);

            auto dx_xxzz_yzzz = primBuffer.data(doff + 225 * idx + 88);

            auto dx_xxzz_zzzz = primBuffer.data(doff + 225 * idx + 89);

            auto dx_xyyy_xxxx = primBuffer.data(doff + 225 * idx + 90);

            auto dx_xyyy_xxxy = primBuffer.data(doff + 225 * idx + 91);

            auto dx_xyyy_xxxz = primBuffer.data(doff + 225 * idx + 92);

            auto dx_xyyy_xxyy = primBuffer.data(doff + 225 * idx + 93);

            auto dx_xyyy_xxyz = primBuffer.data(doff + 225 * idx + 94);

            auto dx_xyyy_xxzz = primBuffer.data(doff + 225 * idx + 95);

            auto dx_xyyy_xyyy = primBuffer.data(doff + 225 * idx + 96);

            auto dx_xyyy_xyyz = primBuffer.data(doff + 225 * idx + 97);

            auto dx_xyyy_xyzz = primBuffer.data(doff + 225 * idx + 98);

            auto dx_xyyy_xzzz = primBuffer.data(doff + 225 * idx + 99);

            auto dx_xyyy_yyyy = primBuffer.data(doff + 225 * idx + 100);

            auto dx_xyyy_yyyz = primBuffer.data(doff + 225 * idx + 101);

            auto dx_xyyy_yyzz = primBuffer.data(doff + 225 * idx + 102);

            auto dx_xyyy_yzzz = primBuffer.data(doff + 225 * idx + 103);

            auto dx_xyyy_zzzz = primBuffer.data(doff + 225 * idx + 104);

            auto dx_xyyz_xxxx = primBuffer.data(doff + 225 * idx + 105);

            auto dx_xyyz_xxxy = primBuffer.data(doff + 225 * idx + 106);

            auto dx_xyyz_xxxz = primBuffer.data(doff + 225 * idx + 107);

            auto dx_xyyz_xxyy = primBuffer.data(doff + 225 * idx + 108);

            auto dx_xyyz_xxyz = primBuffer.data(doff + 225 * idx + 109);

            auto dx_xyyz_xxzz = primBuffer.data(doff + 225 * idx + 110);

            auto dx_xyyz_xyyy = primBuffer.data(doff + 225 * idx + 111);

            auto dx_xyyz_xyyz = primBuffer.data(doff + 225 * idx + 112);

            auto dx_xyyz_xyzz = primBuffer.data(doff + 225 * idx + 113);

            auto dx_xyyz_xzzz = primBuffer.data(doff + 225 * idx + 114);

            auto dx_xyyz_yyyy = primBuffer.data(doff + 225 * idx + 115);

            auto dx_xyyz_yyyz = primBuffer.data(doff + 225 * idx + 116);

            auto dx_xyyz_yyzz = primBuffer.data(doff + 225 * idx + 117);

            auto dx_xyyz_yzzz = primBuffer.data(doff + 225 * idx + 118);

            auto dx_xyyz_zzzz = primBuffer.data(doff + 225 * idx + 119);

            auto dx_xyzz_xxxx = primBuffer.data(doff + 225 * idx + 120);

            auto dx_xyzz_xxxy = primBuffer.data(doff + 225 * idx + 121);

            auto dx_xyzz_xxxz = primBuffer.data(doff + 225 * idx + 122);

            auto dx_xyzz_xxyy = primBuffer.data(doff + 225 * idx + 123);

            auto dx_xyzz_xxyz = primBuffer.data(doff + 225 * idx + 124);

            auto dx_xyzz_xxzz = primBuffer.data(doff + 225 * idx + 125);

            auto dx_xyzz_xyyy = primBuffer.data(doff + 225 * idx + 126);

            auto dx_xyzz_xyyz = primBuffer.data(doff + 225 * idx + 127);

            auto dx_xyzz_xyzz = primBuffer.data(doff + 225 * idx + 128);

            auto dx_xyzz_xzzz = primBuffer.data(doff + 225 * idx + 129);

            auto dx_xyzz_yyyy = primBuffer.data(doff + 225 * idx + 130);

            auto dx_xyzz_yyyz = primBuffer.data(doff + 225 * idx + 131);

            auto dx_xyzz_yyzz = primBuffer.data(doff + 225 * idx + 132);

            auto dx_xyzz_yzzz = primBuffer.data(doff + 225 * idx + 133);

            auto dx_xyzz_zzzz = primBuffer.data(doff + 225 * idx + 134);

            auto dx_xzzz_xxxx = primBuffer.data(doff + 225 * idx + 135);

            auto dx_xzzz_xxxy = primBuffer.data(doff + 225 * idx + 136);

            auto dx_xzzz_xxxz = primBuffer.data(doff + 225 * idx + 137);

            auto dx_xzzz_xxyy = primBuffer.data(doff + 225 * idx + 138);

            auto dx_xzzz_xxyz = primBuffer.data(doff + 225 * idx + 139);

            auto dx_xzzz_xxzz = primBuffer.data(doff + 225 * idx + 140);

            auto dx_xzzz_xyyy = primBuffer.data(doff + 225 * idx + 141);

            auto dx_xzzz_xyyz = primBuffer.data(doff + 225 * idx + 142);

            auto dx_xzzz_xyzz = primBuffer.data(doff + 225 * idx + 143);

            auto dx_xzzz_xzzz = primBuffer.data(doff + 225 * idx + 144);

            auto dx_xzzz_yyyy = primBuffer.data(doff + 225 * idx + 145);

            auto dx_xzzz_yyyz = primBuffer.data(doff + 225 * idx + 146);

            auto dx_xzzz_yyzz = primBuffer.data(doff + 225 * idx + 147);

            auto dx_xzzz_yzzz = primBuffer.data(doff + 225 * idx + 148);

            auto dx_xzzz_zzzz = primBuffer.data(doff + 225 * idx + 149);

            auto dx_yyyy_xxxx = primBuffer.data(doff + 225 * idx + 150);

            auto dx_yyyy_xxxy = primBuffer.data(doff + 225 * idx + 151);

            auto dx_yyyy_xxxz = primBuffer.data(doff + 225 * idx + 152);

            auto dx_yyyy_xxyy = primBuffer.data(doff + 225 * idx + 153);

            auto dx_yyyy_xxyz = primBuffer.data(doff + 225 * idx + 154);

            auto dx_yyyy_xxzz = primBuffer.data(doff + 225 * idx + 155);

            auto dx_yyyy_xyyy = primBuffer.data(doff + 225 * idx + 156);

            auto dx_yyyy_xyyz = primBuffer.data(doff + 225 * idx + 157);

            auto dx_yyyy_xyzz = primBuffer.data(doff + 225 * idx + 158);

            auto dx_yyyy_xzzz = primBuffer.data(doff + 225 * idx + 159);

            auto dx_yyyy_yyyy = primBuffer.data(doff + 225 * idx + 160);

            auto dx_yyyy_yyyz = primBuffer.data(doff + 225 * idx + 161);

            auto dx_yyyy_yyzz = primBuffer.data(doff + 225 * idx + 162);

            auto dx_yyyy_yzzz = primBuffer.data(doff + 225 * idx + 163);

            auto dx_yyyy_zzzz = primBuffer.data(doff + 225 * idx + 164);

            auto dx_yyyz_xxxx = primBuffer.data(doff + 225 * idx + 165);

            auto dx_yyyz_xxxy = primBuffer.data(doff + 225 * idx + 166);

            auto dx_yyyz_xxxz = primBuffer.data(doff + 225 * idx + 167);

            auto dx_yyyz_xxyy = primBuffer.data(doff + 225 * idx + 168);

            auto dx_yyyz_xxyz = primBuffer.data(doff + 225 * idx + 169);

            auto dx_yyyz_xxzz = primBuffer.data(doff + 225 * idx + 170);

            auto dx_yyyz_xyyy = primBuffer.data(doff + 225 * idx + 171);

            auto dx_yyyz_xyyz = primBuffer.data(doff + 225 * idx + 172);

            auto dx_yyyz_xyzz = primBuffer.data(doff + 225 * idx + 173);

            auto dx_yyyz_xzzz = primBuffer.data(doff + 225 * idx + 174);

            auto dx_yyyz_yyyy = primBuffer.data(doff + 225 * idx + 175);

            auto dx_yyyz_yyyz = primBuffer.data(doff + 225 * idx + 176);

            auto dx_yyyz_yyzz = primBuffer.data(doff + 225 * idx + 177);

            auto dx_yyyz_yzzz = primBuffer.data(doff + 225 * idx + 178);

            auto dx_yyyz_zzzz = primBuffer.data(doff + 225 * idx + 179);

            auto dx_yyzz_xxxx = primBuffer.data(doff + 225 * idx + 180);

            auto dx_yyzz_xxxy = primBuffer.data(doff + 225 * idx + 181);

            auto dx_yyzz_xxxz = primBuffer.data(doff + 225 * idx + 182);

            auto dx_yyzz_xxyy = primBuffer.data(doff + 225 * idx + 183);

            auto dx_yyzz_xxyz = primBuffer.data(doff + 225 * idx + 184);

            auto dx_yyzz_xxzz = primBuffer.data(doff + 225 * idx + 185);

            auto dx_yyzz_xyyy = primBuffer.data(doff + 225 * idx + 186);

            auto dx_yyzz_xyyz = primBuffer.data(doff + 225 * idx + 187);

            auto dx_yyzz_xyzz = primBuffer.data(doff + 225 * idx + 188);

            auto dx_yyzz_xzzz = primBuffer.data(doff + 225 * idx + 189);

            auto dx_yyzz_yyyy = primBuffer.data(doff + 225 * idx + 190);

            auto dx_yyzz_yyyz = primBuffer.data(doff + 225 * idx + 191);

            auto dx_yyzz_yyzz = primBuffer.data(doff + 225 * idx + 192);

            auto dx_yyzz_yzzz = primBuffer.data(doff + 225 * idx + 193);

            auto dx_yyzz_zzzz = primBuffer.data(doff + 225 * idx + 194);

            auto dx_yzzz_xxxx = primBuffer.data(doff + 225 * idx + 195);

            auto dx_yzzz_xxxy = primBuffer.data(doff + 225 * idx + 196);

            auto dx_yzzz_xxxz = primBuffer.data(doff + 225 * idx + 197);

            auto dx_yzzz_xxyy = primBuffer.data(doff + 225 * idx + 198);

            auto dx_yzzz_xxyz = primBuffer.data(doff + 225 * idx + 199);

            auto dx_yzzz_xxzz = primBuffer.data(doff + 225 * idx + 200);

            auto dx_yzzz_xyyy = primBuffer.data(doff + 225 * idx + 201);

            auto dx_yzzz_xyyz = primBuffer.data(doff + 225 * idx + 202);

            auto dx_yzzz_xyzz = primBuffer.data(doff + 225 * idx + 203);

            auto dx_yzzz_xzzz = primBuffer.data(doff + 225 * idx + 204);

            auto dx_yzzz_yyyy = primBuffer.data(doff + 225 * idx + 205);

            auto dx_yzzz_yyyz = primBuffer.data(doff + 225 * idx + 206);

            auto dx_yzzz_yyzz = primBuffer.data(doff + 225 * idx + 207);

            auto dx_yzzz_yzzz = primBuffer.data(doff + 225 * idx + 208);

            auto dx_yzzz_zzzz = primBuffer.data(doff + 225 * idx + 209);

            auto dx_zzzz_xxxx = primBuffer.data(doff + 225 * idx + 210);

            auto dx_zzzz_xxxy = primBuffer.data(doff + 225 * idx + 211);

            auto dx_zzzz_xxxz = primBuffer.data(doff + 225 * idx + 212);

            auto dx_zzzz_xxyy = primBuffer.data(doff + 225 * idx + 213);

            auto dx_zzzz_xxyz = primBuffer.data(doff + 225 * idx + 214);

            auto dx_zzzz_xxzz = primBuffer.data(doff + 225 * idx + 215);

            auto dx_zzzz_xyyy = primBuffer.data(doff + 225 * idx + 216);

            auto dx_zzzz_xyyz = primBuffer.data(doff + 225 * idx + 217);

            auto dx_zzzz_xyzz = primBuffer.data(doff + 225 * idx + 218);

            auto dx_zzzz_xzzz = primBuffer.data(doff + 225 * idx + 219);

            auto dx_zzzz_yyyy = primBuffer.data(doff + 225 * idx + 220);

            auto dx_zzzz_yyyz = primBuffer.data(doff + 225 * idx + 221);

            auto dx_zzzz_yyzz = primBuffer.data(doff + 225 * idx + 222);

            auto dx_zzzz_yzzz = primBuffer.data(doff + 225 * idx + 223);

            auto dx_zzzz_zzzz = primBuffer.data(doff + 225 * idx + 224);

            auto dy_xxxx_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx);

            auto dy_xxxx_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 1);

            auto dy_xxxx_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 2);

            auto dy_xxxx_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 3);

            auto dy_xxxx_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 4);

            auto dy_xxxx_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 5);

            auto dy_xxxx_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 6);

            auto dy_xxxx_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 7);

            auto dy_xxxx_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 8);

            auto dy_xxxx_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 9);

            auto dy_xxxx_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 10);

            auto dy_xxxx_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 11);

            auto dy_xxxx_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 12);

            auto dy_xxxx_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 13);

            auto dy_xxxx_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 14);

            auto dy_xxxy_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 15);

            auto dy_xxxy_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 16);

            auto dy_xxxy_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 17);

            auto dy_xxxy_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 18);

            auto dy_xxxy_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 19);

            auto dy_xxxy_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 20);

            auto dy_xxxy_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 21);

            auto dy_xxxy_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 22);

            auto dy_xxxy_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 23);

            auto dy_xxxy_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 24);

            auto dy_xxxy_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 25);

            auto dy_xxxy_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 26);

            auto dy_xxxy_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 27);

            auto dy_xxxy_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 28);

            auto dy_xxxy_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 29);

            auto dy_xxxz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 30);

            auto dy_xxxz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 31);

            auto dy_xxxz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 32);

            auto dy_xxxz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 33);

            auto dy_xxxz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 34);

            auto dy_xxxz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 35);

            auto dy_xxxz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 36);

            auto dy_xxxz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 37);

            auto dy_xxxz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 38);

            auto dy_xxxz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 39);

            auto dy_xxxz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 40);

            auto dy_xxxz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 41);

            auto dy_xxxz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 42);

            auto dy_xxxz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 43);

            auto dy_xxxz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 44);

            auto dy_xxyy_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 45);

            auto dy_xxyy_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 46);

            auto dy_xxyy_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 47);

            auto dy_xxyy_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 48);

            auto dy_xxyy_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 49);

            auto dy_xxyy_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 50);

            auto dy_xxyy_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 51);

            auto dy_xxyy_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 52);

            auto dy_xxyy_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 53);

            auto dy_xxyy_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 54);

            auto dy_xxyy_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 55);

            auto dy_xxyy_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 56);

            auto dy_xxyy_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 57);

            auto dy_xxyy_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 58);

            auto dy_xxyy_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 59);

            auto dy_xxyz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 60);

            auto dy_xxyz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 61);

            auto dy_xxyz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 62);

            auto dy_xxyz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 63);

            auto dy_xxyz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 64);

            auto dy_xxyz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 65);

            auto dy_xxyz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 66);

            auto dy_xxyz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 67);

            auto dy_xxyz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 68);

            auto dy_xxyz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 69);

            auto dy_xxyz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 70);

            auto dy_xxyz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 71);

            auto dy_xxyz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 72);

            auto dy_xxyz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 73);

            auto dy_xxyz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 74);

            auto dy_xxzz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 75);

            auto dy_xxzz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 76);

            auto dy_xxzz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 77);

            auto dy_xxzz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 78);

            auto dy_xxzz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 79);

            auto dy_xxzz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 80);

            auto dy_xxzz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 81);

            auto dy_xxzz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 82);

            auto dy_xxzz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 83);

            auto dy_xxzz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 84);

            auto dy_xxzz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 85);

            auto dy_xxzz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 86);

            auto dy_xxzz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 87);

            auto dy_xxzz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 88);

            auto dy_xxzz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 89);

            auto dy_xyyy_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 90);

            auto dy_xyyy_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 91);

            auto dy_xyyy_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 92);

            auto dy_xyyy_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 93);

            auto dy_xyyy_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 94);

            auto dy_xyyy_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 95);

            auto dy_xyyy_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 96);

            auto dy_xyyy_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 97);

            auto dy_xyyy_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 98);

            auto dy_xyyy_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 99);

            auto dy_xyyy_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 100);

            auto dy_xyyy_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 101);

            auto dy_xyyy_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 102);

            auto dy_xyyy_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 103);

            auto dy_xyyy_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 104);

            auto dy_xyyz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 105);

            auto dy_xyyz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 106);

            auto dy_xyyz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 107);

            auto dy_xyyz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 108);

            auto dy_xyyz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 109);

            auto dy_xyyz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 110);

            auto dy_xyyz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 111);

            auto dy_xyyz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 112);

            auto dy_xyyz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 113);

            auto dy_xyyz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 114);

            auto dy_xyyz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 115);

            auto dy_xyyz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 116);

            auto dy_xyyz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 117);

            auto dy_xyyz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 118);

            auto dy_xyyz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 119);

            auto dy_xyzz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 120);

            auto dy_xyzz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 121);

            auto dy_xyzz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 122);

            auto dy_xyzz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 123);

            auto dy_xyzz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 124);

            auto dy_xyzz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 125);

            auto dy_xyzz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 126);

            auto dy_xyzz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 127);

            auto dy_xyzz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 128);

            auto dy_xyzz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 129);

            auto dy_xyzz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 130);

            auto dy_xyzz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 131);

            auto dy_xyzz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 132);

            auto dy_xyzz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 133);

            auto dy_xyzz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 134);

            auto dy_xzzz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 135);

            auto dy_xzzz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 136);

            auto dy_xzzz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 137);

            auto dy_xzzz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 138);

            auto dy_xzzz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 139);

            auto dy_xzzz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 140);

            auto dy_xzzz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 141);

            auto dy_xzzz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 142);

            auto dy_xzzz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 143);

            auto dy_xzzz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 144);

            auto dy_xzzz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 145);

            auto dy_xzzz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 146);

            auto dy_xzzz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 147);

            auto dy_xzzz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 148);

            auto dy_xzzz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 149);

            auto dy_yyyy_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 150);

            auto dy_yyyy_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 151);

            auto dy_yyyy_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 152);

            auto dy_yyyy_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 153);

            auto dy_yyyy_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 154);

            auto dy_yyyy_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 155);

            auto dy_yyyy_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 156);

            auto dy_yyyy_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 157);

            auto dy_yyyy_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 158);

            auto dy_yyyy_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 159);

            auto dy_yyyy_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 160);

            auto dy_yyyy_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 161);

            auto dy_yyyy_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 162);

            auto dy_yyyy_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 163);

            auto dy_yyyy_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 164);

            auto dy_yyyz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 165);

            auto dy_yyyz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 166);

            auto dy_yyyz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 167);

            auto dy_yyyz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 168);

            auto dy_yyyz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 169);

            auto dy_yyyz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 170);

            auto dy_yyyz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 171);

            auto dy_yyyz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 172);

            auto dy_yyyz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 173);

            auto dy_yyyz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 174);

            auto dy_yyyz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 175);

            auto dy_yyyz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 176);

            auto dy_yyyz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 177);

            auto dy_yyyz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 178);

            auto dy_yyyz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 179);

            auto dy_yyzz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 180);

            auto dy_yyzz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 181);

            auto dy_yyzz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 182);

            auto dy_yyzz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 183);

            auto dy_yyzz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 184);

            auto dy_yyzz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 185);

            auto dy_yyzz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 186);

            auto dy_yyzz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 187);

            auto dy_yyzz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 188);

            auto dy_yyzz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 189);

            auto dy_yyzz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 190);

            auto dy_yyzz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 191);

            auto dy_yyzz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 192);

            auto dy_yyzz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 193);

            auto dy_yyzz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 194);

            auto dy_yzzz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 195);

            auto dy_yzzz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 196);

            auto dy_yzzz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 197);

            auto dy_yzzz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 198);

            auto dy_yzzz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 199);

            auto dy_yzzz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 200);

            auto dy_yzzz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 201);

            auto dy_yzzz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 202);

            auto dy_yzzz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 203);

            auto dy_yzzz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 204);

            auto dy_yzzz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 205);

            auto dy_yzzz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 206);

            auto dy_yzzz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 207);

            auto dy_yzzz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 208);

            auto dy_yzzz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 209);

            auto dy_zzzz_xxxx = primBuffer.data(doff + 225 * bdim + 225 * idx + 210);

            auto dy_zzzz_xxxy = primBuffer.data(doff + 225 * bdim + 225 * idx + 211);

            auto dy_zzzz_xxxz = primBuffer.data(doff + 225 * bdim + 225 * idx + 212);

            auto dy_zzzz_xxyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 213);

            auto dy_zzzz_xxyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 214);

            auto dy_zzzz_xxzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 215);

            auto dy_zzzz_xyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 216);

            auto dy_zzzz_xyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 217);

            auto dy_zzzz_xyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 218);

            auto dy_zzzz_xzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 219);

            auto dy_zzzz_yyyy = primBuffer.data(doff + 225 * bdim + 225 * idx + 220);

            auto dy_zzzz_yyyz = primBuffer.data(doff + 225 * bdim + 225 * idx + 221);

            auto dy_zzzz_yyzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 222);

            auto dy_zzzz_yzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 223);

            auto dy_zzzz_zzzz = primBuffer.data(doff + 225 * bdim + 225 * idx + 224);

            auto dz_xxxx_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx);

            auto dz_xxxx_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 1);

            auto dz_xxxx_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 2);

            auto dz_xxxx_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 3);

            auto dz_xxxx_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 4);

            auto dz_xxxx_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 5);

            auto dz_xxxx_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 6);

            auto dz_xxxx_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 7);

            auto dz_xxxx_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 8);

            auto dz_xxxx_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 9);

            auto dz_xxxx_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 10);

            auto dz_xxxx_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 11);

            auto dz_xxxx_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 12);

            auto dz_xxxx_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 13);

            auto dz_xxxx_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 14);

            auto dz_xxxy_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 15);

            auto dz_xxxy_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 16);

            auto dz_xxxy_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 17);

            auto dz_xxxy_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 18);

            auto dz_xxxy_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 19);

            auto dz_xxxy_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 20);

            auto dz_xxxy_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 21);

            auto dz_xxxy_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 22);

            auto dz_xxxy_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 23);

            auto dz_xxxy_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 24);

            auto dz_xxxy_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 25);

            auto dz_xxxy_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 26);

            auto dz_xxxy_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 27);

            auto dz_xxxy_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 28);

            auto dz_xxxy_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 29);

            auto dz_xxxz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 30);

            auto dz_xxxz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 31);

            auto dz_xxxz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 32);

            auto dz_xxxz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 33);

            auto dz_xxxz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 34);

            auto dz_xxxz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 35);

            auto dz_xxxz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 36);

            auto dz_xxxz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 37);

            auto dz_xxxz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 38);

            auto dz_xxxz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 39);

            auto dz_xxxz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 40);

            auto dz_xxxz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 41);

            auto dz_xxxz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 42);

            auto dz_xxxz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 43);

            auto dz_xxxz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 44);

            auto dz_xxyy_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 45);

            auto dz_xxyy_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 46);

            auto dz_xxyy_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 47);

            auto dz_xxyy_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 48);

            auto dz_xxyy_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 49);

            auto dz_xxyy_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 50);

            auto dz_xxyy_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 51);

            auto dz_xxyy_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 52);

            auto dz_xxyy_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 53);

            auto dz_xxyy_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 54);

            auto dz_xxyy_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 55);

            auto dz_xxyy_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 56);

            auto dz_xxyy_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 57);

            auto dz_xxyy_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 58);

            auto dz_xxyy_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 59);

            auto dz_xxyz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 60);

            auto dz_xxyz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 61);

            auto dz_xxyz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 62);

            auto dz_xxyz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 63);

            auto dz_xxyz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 64);

            auto dz_xxyz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 65);

            auto dz_xxyz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 66);

            auto dz_xxyz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 67);

            auto dz_xxyz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 68);

            auto dz_xxyz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 69);

            auto dz_xxyz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 70);

            auto dz_xxyz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 71);

            auto dz_xxyz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 72);

            auto dz_xxyz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 73);

            auto dz_xxyz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 74);

            auto dz_xxzz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 75);

            auto dz_xxzz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 76);

            auto dz_xxzz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 77);

            auto dz_xxzz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 78);

            auto dz_xxzz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 79);

            auto dz_xxzz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 80);

            auto dz_xxzz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 81);

            auto dz_xxzz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 82);

            auto dz_xxzz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 83);

            auto dz_xxzz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 84);

            auto dz_xxzz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 85);

            auto dz_xxzz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 86);

            auto dz_xxzz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 87);

            auto dz_xxzz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 88);

            auto dz_xxzz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 89);

            auto dz_xyyy_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 90);

            auto dz_xyyy_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 91);

            auto dz_xyyy_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 92);

            auto dz_xyyy_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 93);

            auto dz_xyyy_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 94);

            auto dz_xyyy_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 95);

            auto dz_xyyy_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 96);

            auto dz_xyyy_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 97);

            auto dz_xyyy_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 98);

            auto dz_xyyy_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 99);

            auto dz_xyyy_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 100);

            auto dz_xyyy_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 101);

            auto dz_xyyy_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 102);

            auto dz_xyyy_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 103);

            auto dz_xyyy_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 104);

            auto dz_xyyz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 105);

            auto dz_xyyz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 106);

            auto dz_xyyz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 107);

            auto dz_xyyz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 108);

            auto dz_xyyz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 109);

            auto dz_xyyz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 110);

            auto dz_xyyz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 111);

            auto dz_xyyz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 112);

            auto dz_xyyz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 113);

            auto dz_xyyz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 114);

            auto dz_xyyz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 115);

            auto dz_xyyz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 116);

            auto dz_xyyz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 117);

            auto dz_xyyz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 118);

            auto dz_xyyz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 119);

            auto dz_xyzz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 120);

            auto dz_xyzz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 121);

            auto dz_xyzz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 122);

            auto dz_xyzz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 123);

            auto dz_xyzz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 124);

            auto dz_xyzz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 125);

            auto dz_xyzz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 126);

            auto dz_xyzz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 127);

            auto dz_xyzz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 128);

            auto dz_xyzz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 129);

            auto dz_xyzz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 130);

            auto dz_xyzz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 131);

            auto dz_xyzz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 132);

            auto dz_xyzz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 133);

            auto dz_xyzz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 134);

            auto dz_xzzz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 135);

            auto dz_xzzz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 136);

            auto dz_xzzz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 137);

            auto dz_xzzz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 138);

            auto dz_xzzz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 139);

            auto dz_xzzz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 140);

            auto dz_xzzz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 141);

            auto dz_xzzz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 142);

            auto dz_xzzz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 143);

            auto dz_xzzz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 144);

            auto dz_xzzz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 145);

            auto dz_xzzz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 146);

            auto dz_xzzz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 147);

            auto dz_xzzz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 148);

            auto dz_xzzz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 149);

            auto dz_yyyy_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 150);

            auto dz_yyyy_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 151);

            auto dz_yyyy_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 152);

            auto dz_yyyy_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 153);

            auto dz_yyyy_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 154);

            auto dz_yyyy_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 155);

            auto dz_yyyy_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 156);

            auto dz_yyyy_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 157);

            auto dz_yyyy_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 158);

            auto dz_yyyy_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 159);

            auto dz_yyyy_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 160);

            auto dz_yyyy_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 161);

            auto dz_yyyy_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 162);

            auto dz_yyyy_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 163);

            auto dz_yyyy_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 164);

            auto dz_yyyz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 165);

            auto dz_yyyz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 166);

            auto dz_yyyz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 167);

            auto dz_yyyz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 168);

            auto dz_yyyz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 169);

            auto dz_yyyz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 170);

            auto dz_yyyz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 171);

            auto dz_yyyz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 172);

            auto dz_yyyz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 173);

            auto dz_yyyz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 174);

            auto dz_yyyz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 175);

            auto dz_yyyz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 176);

            auto dz_yyyz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 177);

            auto dz_yyyz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 178);

            auto dz_yyyz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 179);

            auto dz_yyzz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 180);

            auto dz_yyzz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 181);

            auto dz_yyzz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 182);

            auto dz_yyzz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 183);

            auto dz_yyzz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 184);

            auto dz_yyzz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 185);

            auto dz_yyzz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 186);

            auto dz_yyzz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 187);

            auto dz_yyzz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 188);

            auto dz_yyzz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 189);

            auto dz_yyzz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 190);

            auto dz_yyzz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 191);

            auto dz_yyzz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 192);

            auto dz_yyzz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 193);

            auto dz_yyzz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 194);

            auto dz_yzzz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 195);

            auto dz_yzzz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 196);

            auto dz_yzzz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 197);

            auto dz_yzzz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 198);

            auto dz_yzzz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 199);

            auto dz_yzzz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 200);

            auto dz_yzzz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 201);

            auto dz_yzzz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 202);

            auto dz_yzzz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 203);

            auto dz_yzzz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 204);

            auto dz_yzzz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 205);

            auto dz_yzzz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 206);

            auto dz_yzzz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 207);

            auto dz_yzzz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 208);

            auto dz_yzzz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 209);

            auto dz_zzzz_xxxx = primBuffer.data(doff + 450 * bdim + 225 * idx + 210);

            auto dz_zzzz_xxxy = primBuffer.data(doff + 450 * bdim + 225 * idx + 211);

            auto dz_zzzz_xxxz = primBuffer.data(doff + 450 * bdim + 225 * idx + 212);

            auto dz_zzzz_xxyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 213);

            auto dz_zzzz_xxyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 214);

            auto dz_zzzz_xxzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 215);

            auto dz_zzzz_xyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 216);

            auto dz_zzzz_xyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 217);

            auto dz_zzzz_xyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 218);

            auto dz_zzzz_xzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 219);

            auto dz_zzzz_yyyy = primBuffer.data(doff + 450 * bdim + 225 * idx + 220);

            auto dz_zzzz_yyyz = primBuffer.data(doff + 450 * bdim + 225 * idx + 221);

            auto dz_zzzz_yyzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 222);

            auto dz_zzzz_yzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 223);

            auto dz_zzzz_zzzz = primBuffer.data(doff + 450 * bdim + 225 * idx + 224);

            // set up pointers to (F|M|G) integrals

            auto dx_xxx_xxxx = primBuffer.data(d1off + 150 * idx);

            auto dx_xxx_xxxy = primBuffer.data(d1off + 150 * idx + 1);

            auto dx_xxx_xxxz = primBuffer.data(d1off + 150 * idx + 2);

            auto dx_xxx_xxyy = primBuffer.data(d1off + 150 * idx + 3);

            auto dx_xxx_xxyz = primBuffer.data(d1off + 150 * idx + 4);

            auto dx_xxx_xxzz = primBuffer.data(d1off + 150 * idx + 5);

            auto dx_xxx_xyyy = primBuffer.data(d1off + 150 * idx + 6);

            auto dx_xxx_xyyz = primBuffer.data(d1off + 150 * idx + 7);

            auto dx_xxx_xyzz = primBuffer.data(d1off + 150 * idx + 8);

            auto dx_xxx_xzzz = primBuffer.data(d1off + 150 * idx + 9);

            auto dx_xxx_yyyy = primBuffer.data(d1off + 150 * idx + 10);

            auto dx_xxx_yyyz = primBuffer.data(d1off + 150 * idx + 11);

            auto dx_xxx_yyzz = primBuffer.data(d1off + 150 * idx + 12);

            auto dx_xxx_yzzz = primBuffer.data(d1off + 150 * idx + 13);

            auto dx_xxx_zzzz = primBuffer.data(d1off + 150 * idx + 14);

            auto dx_xxy_xxxx = primBuffer.data(d1off + 150 * idx + 15);

            auto dx_xxy_xxxy = primBuffer.data(d1off + 150 * idx + 16);

            auto dx_xxy_xxxz = primBuffer.data(d1off + 150 * idx + 17);

            auto dx_xxy_xxyy = primBuffer.data(d1off + 150 * idx + 18);

            auto dx_xxy_xxyz = primBuffer.data(d1off + 150 * idx + 19);

            auto dx_xxy_xxzz = primBuffer.data(d1off + 150 * idx + 20);

            auto dx_xxy_xyyy = primBuffer.data(d1off + 150 * idx + 21);

            auto dx_xxy_xyyz = primBuffer.data(d1off + 150 * idx + 22);

            auto dx_xxy_xyzz = primBuffer.data(d1off + 150 * idx + 23);

            auto dx_xxy_xzzz = primBuffer.data(d1off + 150 * idx + 24);

            auto dx_xxy_yyyy = primBuffer.data(d1off + 150 * idx + 25);

            auto dx_xxy_yyyz = primBuffer.data(d1off + 150 * idx + 26);

            auto dx_xxy_yyzz = primBuffer.data(d1off + 150 * idx + 27);

            auto dx_xxy_yzzz = primBuffer.data(d1off + 150 * idx + 28);

            auto dx_xxy_zzzz = primBuffer.data(d1off + 150 * idx + 29);

            auto dx_xxz_xxxx = primBuffer.data(d1off + 150 * idx + 30);

            auto dx_xxz_xxxy = primBuffer.data(d1off + 150 * idx + 31);

            auto dx_xxz_xxxz = primBuffer.data(d1off + 150 * idx + 32);

            auto dx_xxz_xxyy = primBuffer.data(d1off + 150 * idx + 33);

            auto dx_xxz_xxyz = primBuffer.data(d1off + 150 * idx + 34);

            auto dx_xxz_xxzz = primBuffer.data(d1off + 150 * idx + 35);

            auto dx_xxz_xyyy = primBuffer.data(d1off + 150 * idx + 36);

            auto dx_xxz_xyyz = primBuffer.data(d1off + 150 * idx + 37);

            auto dx_xxz_xyzz = primBuffer.data(d1off + 150 * idx + 38);

            auto dx_xxz_xzzz = primBuffer.data(d1off + 150 * idx + 39);

            auto dx_xxz_yyyy = primBuffer.data(d1off + 150 * idx + 40);

            auto dx_xxz_yyyz = primBuffer.data(d1off + 150 * idx + 41);

            auto dx_xxz_yyzz = primBuffer.data(d1off + 150 * idx + 42);

            auto dx_xxz_yzzz = primBuffer.data(d1off + 150 * idx + 43);

            auto dx_xxz_zzzz = primBuffer.data(d1off + 150 * idx + 44);

            auto dx_xyy_xxxx = primBuffer.data(d1off + 150 * idx + 45);

            auto dx_xyy_xxxy = primBuffer.data(d1off + 150 * idx + 46);

            auto dx_xyy_xxxz = primBuffer.data(d1off + 150 * idx + 47);

            auto dx_xyy_xxyy = primBuffer.data(d1off + 150 * idx + 48);

            auto dx_xyy_xxyz = primBuffer.data(d1off + 150 * idx + 49);

            auto dx_xyy_xxzz = primBuffer.data(d1off + 150 * idx + 50);

            auto dx_xyy_xyyy = primBuffer.data(d1off + 150 * idx + 51);

            auto dx_xyy_xyyz = primBuffer.data(d1off + 150 * idx + 52);

            auto dx_xyy_xyzz = primBuffer.data(d1off + 150 * idx + 53);

            auto dx_xyy_xzzz = primBuffer.data(d1off + 150 * idx + 54);

            auto dx_xyy_yyyy = primBuffer.data(d1off + 150 * idx + 55);

            auto dx_xyy_yyyz = primBuffer.data(d1off + 150 * idx + 56);

            auto dx_xyy_yyzz = primBuffer.data(d1off + 150 * idx + 57);

            auto dx_xyy_yzzz = primBuffer.data(d1off + 150 * idx + 58);

            auto dx_xyy_zzzz = primBuffer.data(d1off + 150 * idx + 59);

            auto dx_xyz_xxxx = primBuffer.data(d1off + 150 * idx + 60);

            auto dx_xyz_xxxy = primBuffer.data(d1off + 150 * idx + 61);

            auto dx_xyz_xxxz = primBuffer.data(d1off + 150 * idx + 62);

            auto dx_xyz_xxyy = primBuffer.data(d1off + 150 * idx + 63);

            auto dx_xyz_xxyz = primBuffer.data(d1off + 150 * idx + 64);

            auto dx_xyz_xxzz = primBuffer.data(d1off + 150 * idx + 65);

            auto dx_xyz_xyyy = primBuffer.data(d1off + 150 * idx + 66);

            auto dx_xyz_xyyz = primBuffer.data(d1off + 150 * idx + 67);

            auto dx_xyz_xyzz = primBuffer.data(d1off + 150 * idx + 68);

            auto dx_xyz_xzzz = primBuffer.data(d1off + 150 * idx + 69);

            auto dx_xyz_yyyy = primBuffer.data(d1off + 150 * idx + 70);

            auto dx_xyz_yyyz = primBuffer.data(d1off + 150 * idx + 71);

            auto dx_xyz_yyzz = primBuffer.data(d1off + 150 * idx + 72);

            auto dx_xyz_yzzz = primBuffer.data(d1off + 150 * idx + 73);

            auto dx_xyz_zzzz = primBuffer.data(d1off + 150 * idx + 74);

            auto dx_xzz_xxxx = primBuffer.data(d1off + 150 * idx + 75);

            auto dx_xzz_xxxy = primBuffer.data(d1off + 150 * idx + 76);

            auto dx_xzz_xxxz = primBuffer.data(d1off + 150 * idx + 77);

            auto dx_xzz_xxyy = primBuffer.data(d1off + 150 * idx + 78);

            auto dx_xzz_xxyz = primBuffer.data(d1off + 150 * idx + 79);

            auto dx_xzz_xxzz = primBuffer.data(d1off + 150 * idx + 80);

            auto dx_xzz_xyyy = primBuffer.data(d1off + 150 * idx + 81);

            auto dx_xzz_xyyz = primBuffer.data(d1off + 150 * idx + 82);

            auto dx_xzz_xyzz = primBuffer.data(d1off + 150 * idx + 83);

            auto dx_xzz_xzzz = primBuffer.data(d1off + 150 * idx + 84);

            auto dx_xzz_yyyy = primBuffer.data(d1off + 150 * idx + 85);

            auto dx_xzz_yyyz = primBuffer.data(d1off + 150 * idx + 86);

            auto dx_xzz_yyzz = primBuffer.data(d1off + 150 * idx + 87);

            auto dx_xzz_yzzz = primBuffer.data(d1off + 150 * idx + 88);

            auto dx_xzz_zzzz = primBuffer.data(d1off + 150 * idx + 89);

            auto dx_yyy_xxxx = primBuffer.data(d1off + 150 * idx + 90);

            auto dx_yyy_xxxy = primBuffer.data(d1off + 150 * idx + 91);

            auto dx_yyy_xxxz = primBuffer.data(d1off + 150 * idx + 92);

            auto dx_yyy_xxyy = primBuffer.data(d1off + 150 * idx + 93);

            auto dx_yyy_xxyz = primBuffer.data(d1off + 150 * idx + 94);

            auto dx_yyy_xxzz = primBuffer.data(d1off + 150 * idx + 95);

            auto dx_yyy_xyyy = primBuffer.data(d1off + 150 * idx + 96);

            auto dx_yyy_xyyz = primBuffer.data(d1off + 150 * idx + 97);

            auto dx_yyy_xyzz = primBuffer.data(d1off + 150 * idx + 98);

            auto dx_yyy_xzzz = primBuffer.data(d1off + 150 * idx + 99);

            auto dx_yyy_yyyy = primBuffer.data(d1off + 150 * idx + 100);

            auto dx_yyy_yyyz = primBuffer.data(d1off + 150 * idx + 101);

            auto dx_yyy_yyzz = primBuffer.data(d1off + 150 * idx + 102);

            auto dx_yyy_yzzz = primBuffer.data(d1off + 150 * idx + 103);

            auto dx_yyy_zzzz = primBuffer.data(d1off + 150 * idx + 104);

            auto dx_yyz_xxxx = primBuffer.data(d1off + 150 * idx + 105);

            auto dx_yyz_xxxy = primBuffer.data(d1off + 150 * idx + 106);

            auto dx_yyz_xxxz = primBuffer.data(d1off + 150 * idx + 107);

            auto dx_yyz_xxyy = primBuffer.data(d1off + 150 * idx + 108);

            auto dx_yyz_xxyz = primBuffer.data(d1off + 150 * idx + 109);

            auto dx_yyz_xxzz = primBuffer.data(d1off + 150 * idx + 110);

            auto dx_yyz_xyyy = primBuffer.data(d1off + 150 * idx + 111);

            auto dx_yyz_xyyz = primBuffer.data(d1off + 150 * idx + 112);

            auto dx_yyz_xyzz = primBuffer.data(d1off + 150 * idx + 113);

            auto dx_yyz_xzzz = primBuffer.data(d1off + 150 * idx + 114);

            auto dx_yyz_yyyy = primBuffer.data(d1off + 150 * idx + 115);

            auto dx_yyz_yyyz = primBuffer.data(d1off + 150 * idx + 116);

            auto dx_yyz_yyzz = primBuffer.data(d1off + 150 * idx + 117);

            auto dx_yyz_yzzz = primBuffer.data(d1off + 150 * idx + 118);

            auto dx_yyz_zzzz = primBuffer.data(d1off + 150 * idx + 119);

            auto dx_yzz_xxxx = primBuffer.data(d1off + 150 * idx + 120);

            auto dx_yzz_xxxy = primBuffer.data(d1off + 150 * idx + 121);

            auto dx_yzz_xxxz = primBuffer.data(d1off + 150 * idx + 122);

            auto dx_yzz_xxyy = primBuffer.data(d1off + 150 * idx + 123);

            auto dx_yzz_xxyz = primBuffer.data(d1off + 150 * idx + 124);

            auto dx_yzz_xxzz = primBuffer.data(d1off + 150 * idx + 125);

            auto dx_yzz_xyyy = primBuffer.data(d1off + 150 * idx + 126);

            auto dx_yzz_xyyz = primBuffer.data(d1off + 150 * idx + 127);

            auto dx_yzz_xyzz = primBuffer.data(d1off + 150 * idx + 128);

            auto dx_yzz_xzzz = primBuffer.data(d1off + 150 * idx + 129);

            auto dx_yzz_yyyy = primBuffer.data(d1off + 150 * idx + 130);

            auto dx_yzz_yyyz = primBuffer.data(d1off + 150 * idx + 131);

            auto dx_yzz_yyzz = primBuffer.data(d1off + 150 * idx + 132);

            auto dx_yzz_yzzz = primBuffer.data(d1off + 150 * idx + 133);

            auto dx_yzz_zzzz = primBuffer.data(d1off + 150 * idx + 134);

            auto dx_zzz_xxxx = primBuffer.data(d1off + 150 * idx + 135);

            auto dx_zzz_xxxy = primBuffer.data(d1off + 150 * idx + 136);

            auto dx_zzz_xxxz = primBuffer.data(d1off + 150 * idx + 137);

            auto dx_zzz_xxyy = primBuffer.data(d1off + 150 * idx + 138);

            auto dx_zzz_xxyz = primBuffer.data(d1off + 150 * idx + 139);

            auto dx_zzz_xxzz = primBuffer.data(d1off + 150 * idx + 140);

            auto dx_zzz_xyyy = primBuffer.data(d1off + 150 * idx + 141);

            auto dx_zzz_xyyz = primBuffer.data(d1off + 150 * idx + 142);

            auto dx_zzz_xyzz = primBuffer.data(d1off + 150 * idx + 143);

            auto dx_zzz_xzzz = primBuffer.data(d1off + 150 * idx + 144);

            auto dx_zzz_yyyy = primBuffer.data(d1off + 150 * idx + 145);

            auto dx_zzz_yyyz = primBuffer.data(d1off + 150 * idx + 146);

            auto dx_zzz_yyzz = primBuffer.data(d1off + 150 * idx + 147);

            auto dx_zzz_yzzz = primBuffer.data(d1off + 150 * idx + 148);

            auto dx_zzz_zzzz = primBuffer.data(d1off + 150 * idx + 149);

            auto dy_xxx_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx);

            auto dy_xxx_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 1);

            auto dy_xxx_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 2);

            auto dy_xxx_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 3);

            auto dy_xxx_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 4);

            auto dy_xxx_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 5);

            auto dy_xxx_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 6);

            auto dy_xxx_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 7);

            auto dy_xxx_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 8);

            auto dy_xxx_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 9);

            auto dy_xxx_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 10);

            auto dy_xxx_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 11);

            auto dy_xxx_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 12);

            auto dy_xxx_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 13);

            auto dy_xxx_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 14);

            auto dy_xxy_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 15);

            auto dy_xxy_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 16);

            auto dy_xxy_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 17);

            auto dy_xxy_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 18);

            auto dy_xxy_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 19);

            auto dy_xxy_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 20);

            auto dy_xxy_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 21);

            auto dy_xxy_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 22);

            auto dy_xxy_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 23);

            auto dy_xxy_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 24);

            auto dy_xxy_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 25);

            auto dy_xxy_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 26);

            auto dy_xxy_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 27);

            auto dy_xxy_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 28);

            auto dy_xxy_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 29);

            auto dy_xxz_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 30);

            auto dy_xxz_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 31);

            auto dy_xxz_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 32);

            auto dy_xxz_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 33);

            auto dy_xxz_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 34);

            auto dy_xxz_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 35);

            auto dy_xxz_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 36);

            auto dy_xxz_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 37);

            auto dy_xxz_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 38);

            auto dy_xxz_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 39);

            auto dy_xxz_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 40);

            auto dy_xxz_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 41);

            auto dy_xxz_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 42);

            auto dy_xxz_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 43);

            auto dy_xxz_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 44);

            auto dy_xyy_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 45);

            auto dy_xyy_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 46);

            auto dy_xyy_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 47);

            auto dy_xyy_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 48);

            auto dy_xyy_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 49);

            auto dy_xyy_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 50);

            auto dy_xyy_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 51);

            auto dy_xyy_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 52);

            auto dy_xyy_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 53);

            auto dy_xyy_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 54);

            auto dy_xyy_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 55);

            auto dy_xyy_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 56);

            auto dy_xyy_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 57);

            auto dy_xyy_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 58);

            auto dy_xyy_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 59);

            auto dy_xyz_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 60);

            auto dy_xyz_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 61);

            auto dy_xyz_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 62);

            auto dy_xyz_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 63);

            auto dy_xyz_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 64);

            auto dy_xyz_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 65);

            auto dy_xyz_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 66);

            auto dy_xyz_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 67);

            auto dy_xyz_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 68);

            auto dy_xyz_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 69);

            auto dy_xyz_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 70);

            auto dy_xyz_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 71);

            auto dy_xyz_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 72);

            auto dy_xyz_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 73);

            auto dy_xyz_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 74);

            auto dy_xzz_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 75);

            auto dy_xzz_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 76);

            auto dy_xzz_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 77);

            auto dy_xzz_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 78);

            auto dy_xzz_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 79);

            auto dy_xzz_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 80);

            auto dy_xzz_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 81);

            auto dy_xzz_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 82);

            auto dy_xzz_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 83);

            auto dy_xzz_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 84);

            auto dy_xzz_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 85);

            auto dy_xzz_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 86);

            auto dy_xzz_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 87);

            auto dy_xzz_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 88);

            auto dy_xzz_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 89);

            auto dy_yyy_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 90);

            auto dy_yyy_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 91);

            auto dy_yyy_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 92);

            auto dy_yyy_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 93);

            auto dy_yyy_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 94);

            auto dy_yyy_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 95);

            auto dy_yyy_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 96);

            auto dy_yyy_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 97);

            auto dy_yyy_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 98);

            auto dy_yyy_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 99);

            auto dy_yyy_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 100);

            auto dy_yyy_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 101);

            auto dy_yyy_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 102);

            auto dy_yyy_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 103);

            auto dy_yyy_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 104);

            auto dy_yyz_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 105);

            auto dy_yyz_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 106);

            auto dy_yyz_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 107);

            auto dy_yyz_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 108);

            auto dy_yyz_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 109);

            auto dy_yyz_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 110);

            auto dy_yyz_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 111);

            auto dy_yyz_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 112);

            auto dy_yyz_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 113);

            auto dy_yyz_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 114);

            auto dy_yyz_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 115);

            auto dy_yyz_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 116);

            auto dy_yyz_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 117);

            auto dy_yyz_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 118);

            auto dy_yyz_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 119);

            auto dy_yzz_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 120);

            auto dy_yzz_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 121);

            auto dy_yzz_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 122);

            auto dy_yzz_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 123);

            auto dy_yzz_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 124);

            auto dy_yzz_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 125);

            auto dy_yzz_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 126);

            auto dy_yzz_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 127);

            auto dy_yzz_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 128);

            auto dy_yzz_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 129);

            auto dy_yzz_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 130);

            auto dy_yzz_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 131);

            auto dy_yzz_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 132);

            auto dy_yzz_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 133);

            auto dy_yzz_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 134);

            auto dy_zzz_xxxx = primBuffer.data(d1off + 150 * bdim + 150 * idx + 135);

            auto dy_zzz_xxxy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 136);

            auto dy_zzz_xxxz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 137);

            auto dy_zzz_xxyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 138);

            auto dy_zzz_xxyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 139);

            auto dy_zzz_xxzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 140);

            auto dy_zzz_xyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 141);

            auto dy_zzz_xyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 142);

            auto dy_zzz_xyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 143);

            auto dy_zzz_xzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 144);

            auto dy_zzz_yyyy = primBuffer.data(d1off + 150 * bdim + 150 * idx + 145);

            auto dy_zzz_yyyz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 146);

            auto dy_zzz_yyzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 147);

            auto dy_zzz_yzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 148);

            auto dy_zzz_zzzz = primBuffer.data(d1off + 150 * bdim + 150 * idx + 149);

            auto dz_xxx_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx);

            auto dz_xxx_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 1);

            auto dz_xxx_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 2);

            auto dz_xxx_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 3);

            auto dz_xxx_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 4);

            auto dz_xxx_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 5);

            auto dz_xxx_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 6);

            auto dz_xxx_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 7);

            auto dz_xxx_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 8);

            auto dz_xxx_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 9);

            auto dz_xxx_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 10);

            auto dz_xxx_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 11);

            auto dz_xxx_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 12);

            auto dz_xxx_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 13);

            auto dz_xxx_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 14);

            auto dz_xxy_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 15);

            auto dz_xxy_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 16);

            auto dz_xxy_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 17);

            auto dz_xxy_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 18);

            auto dz_xxy_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 19);

            auto dz_xxy_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 20);

            auto dz_xxy_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 21);

            auto dz_xxy_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 22);

            auto dz_xxy_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 23);

            auto dz_xxy_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 24);

            auto dz_xxy_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 25);

            auto dz_xxy_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 26);

            auto dz_xxy_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 27);

            auto dz_xxy_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 28);

            auto dz_xxy_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 29);

            auto dz_xxz_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 30);

            auto dz_xxz_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 31);

            auto dz_xxz_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 32);

            auto dz_xxz_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 33);

            auto dz_xxz_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 34);

            auto dz_xxz_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 35);

            auto dz_xxz_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 36);

            auto dz_xxz_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 37);

            auto dz_xxz_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 38);

            auto dz_xxz_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 39);

            auto dz_xxz_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 40);

            auto dz_xxz_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 41);

            auto dz_xxz_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 42);

            auto dz_xxz_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 43);

            auto dz_xxz_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 44);

            auto dz_xyy_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 45);

            auto dz_xyy_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 46);

            auto dz_xyy_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 47);

            auto dz_xyy_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 48);

            auto dz_xyy_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 49);

            auto dz_xyy_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 50);

            auto dz_xyy_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 51);

            auto dz_xyy_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 52);

            auto dz_xyy_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 53);

            auto dz_xyy_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 54);

            auto dz_xyy_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 55);

            auto dz_xyy_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 56);

            auto dz_xyy_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 57);

            auto dz_xyy_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 58);

            auto dz_xyy_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 59);

            auto dz_xyz_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 60);

            auto dz_xyz_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 61);

            auto dz_xyz_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 62);

            auto dz_xyz_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 63);

            auto dz_xyz_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 64);

            auto dz_xyz_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 65);

            auto dz_xyz_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 66);

            auto dz_xyz_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 67);

            auto dz_xyz_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 68);

            auto dz_xyz_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 69);

            auto dz_xyz_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 70);

            auto dz_xyz_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 71);

            auto dz_xyz_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 72);

            auto dz_xyz_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 73);

            auto dz_xyz_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 74);

            auto dz_xzz_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 75);

            auto dz_xzz_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 76);

            auto dz_xzz_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 77);

            auto dz_xzz_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 78);

            auto dz_xzz_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 79);

            auto dz_xzz_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 80);

            auto dz_xzz_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 81);

            auto dz_xzz_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 82);

            auto dz_xzz_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 83);

            auto dz_xzz_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 84);

            auto dz_xzz_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 85);

            auto dz_xzz_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 86);

            auto dz_xzz_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 87);

            auto dz_xzz_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 88);

            auto dz_xzz_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 89);

            auto dz_yyy_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 90);

            auto dz_yyy_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 91);

            auto dz_yyy_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 92);

            auto dz_yyy_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 93);

            auto dz_yyy_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 94);

            auto dz_yyy_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 95);

            auto dz_yyy_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 96);

            auto dz_yyy_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 97);

            auto dz_yyy_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 98);

            auto dz_yyy_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 99);

            auto dz_yyy_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 100);

            auto dz_yyy_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 101);

            auto dz_yyy_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 102);

            auto dz_yyy_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 103);

            auto dz_yyy_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 104);

            auto dz_yyz_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 105);

            auto dz_yyz_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 106);

            auto dz_yyz_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 107);

            auto dz_yyz_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 108);

            auto dz_yyz_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 109);

            auto dz_yyz_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 110);

            auto dz_yyz_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 111);

            auto dz_yyz_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 112);

            auto dz_yyz_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 113);

            auto dz_yyz_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 114);

            auto dz_yyz_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 115);

            auto dz_yyz_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 116);

            auto dz_yyz_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 117);

            auto dz_yyz_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 118);

            auto dz_yyz_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 119);

            auto dz_yzz_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 120);

            auto dz_yzz_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 121);

            auto dz_yzz_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 122);

            auto dz_yzz_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 123);

            auto dz_yzz_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 124);

            auto dz_yzz_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 125);

            auto dz_yzz_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 126);

            auto dz_yzz_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 127);

            auto dz_yzz_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 128);

            auto dz_yzz_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 129);

            auto dz_yzz_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 130);

            auto dz_yzz_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 131);

            auto dz_yzz_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 132);

            auto dz_yzz_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 133);

            auto dz_yzz_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 134);

            auto dz_zzz_xxxx = primBuffer.data(d1off + 300 * bdim + 150 * idx + 135);

            auto dz_zzz_xxxy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 136);

            auto dz_zzz_xxxz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 137);

            auto dz_zzz_xxyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 138);

            auto dz_zzz_xxyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 139);

            auto dz_zzz_xxzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 140);

            auto dz_zzz_xyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 141);

            auto dz_zzz_xyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 142);

            auto dz_zzz_xyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 143);

            auto dz_zzz_xzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 144);

            auto dz_zzz_yyyy = primBuffer.data(d1off + 300 * bdim + 150 * idx + 145);

            auto dz_zzz_yyyz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 146);

            auto dz_zzz_yyzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 147);

            auto dz_zzz_yzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 148);

            auto dz_zzz_zzzz = primBuffer.data(d1off + 300 * bdim + 150 * idx + 149);

            // set up pointers to (D|M|G) integrals

            auto dx_xx_xxxx = primBuffer.data(d2off + 90 * idx);

            auto dx_xx_xxxy = primBuffer.data(d2off + 90 * idx + 1);

            auto dx_xx_xxxz = primBuffer.data(d2off + 90 * idx + 2);

            auto dx_xx_xxyy = primBuffer.data(d2off + 90 * idx + 3);

            auto dx_xx_xxyz = primBuffer.data(d2off + 90 * idx + 4);

            auto dx_xx_xxzz = primBuffer.data(d2off + 90 * idx + 5);

            auto dx_xx_xyyy = primBuffer.data(d2off + 90 * idx + 6);

            auto dx_xx_xyyz = primBuffer.data(d2off + 90 * idx + 7);

            auto dx_xx_xyzz = primBuffer.data(d2off + 90 * idx + 8);

            auto dx_xx_xzzz = primBuffer.data(d2off + 90 * idx + 9);

            auto dx_xx_yyyy = primBuffer.data(d2off + 90 * idx + 10);

            auto dx_xx_yyyz = primBuffer.data(d2off + 90 * idx + 11);

            auto dx_xx_yyzz = primBuffer.data(d2off + 90 * idx + 12);

            auto dx_xx_yzzz = primBuffer.data(d2off + 90 * idx + 13);

            auto dx_xx_zzzz = primBuffer.data(d2off + 90 * idx + 14);

            auto dx_xy_xxxx = primBuffer.data(d2off + 90 * idx + 15);

            auto dx_xy_xxxy = primBuffer.data(d2off + 90 * idx + 16);

            auto dx_xy_xxxz = primBuffer.data(d2off + 90 * idx + 17);

            auto dx_xy_xxyy = primBuffer.data(d2off + 90 * idx + 18);

            auto dx_xy_xxyz = primBuffer.data(d2off + 90 * idx + 19);

            auto dx_xy_xxzz = primBuffer.data(d2off + 90 * idx + 20);

            auto dx_xy_xyyy = primBuffer.data(d2off + 90 * idx + 21);

            auto dx_xy_xyyz = primBuffer.data(d2off + 90 * idx + 22);

            auto dx_xy_xyzz = primBuffer.data(d2off + 90 * idx + 23);

            auto dx_xy_xzzz = primBuffer.data(d2off + 90 * idx + 24);

            auto dx_xy_yyyy = primBuffer.data(d2off + 90 * idx + 25);

            auto dx_xy_yyyz = primBuffer.data(d2off + 90 * idx + 26);

            auto dx_xy_yyzz = primBuffer.data(d2off + 90 * idx + 27);

            auto dx_xy_yzzz = primBuffer.data(d2off + 90 * idx + 28);

            auto dx_xy_zzzz = primBuffer.data(d2off + 90 * idx + 29);

            auto dx_xz_xxxx = primBuffer.data(d2off + 90 * idx + 30);

            auto dx_xz_xxxy = primBuffer.data(d2off + 90 * idx + 31);

            auto dx_xz_xxxz = primBuffer.data(d2off + 90 * idx + 32);

            auto dx_xz_xxyy = primBuffer.data(d2off + 90 * idx + 33);

            auto dx_xz_xxyz = primBuffer.data(d2off + 90 * idx + 34);

            auto dx_xz_xxzz = primBuffer.data(d2off + 90 * idx + 35);

            auto dx_xz_xyyy = primBuffer.data(d2off + 90 * idx + 36);

            auto dx_xz_xyyz = primBuffer.data(d2off + 90 * idx + 37);

            auto dx_xz_xyzz = primBuffer.data(d2off + 90 * idx + 38);

            auto dx_xz_xzzz = primBuffer.data(d2off + 90 * idx + 39);

            auto dx_xz_yyyy = primBuffer.data(d2off + 90 * idx + 40);

            auto dx_xz_yyyz = primBuffer.data(d2off + 90 * idx + 41);

            auto dx_xz_yyzz = primBuffer.data(d2off + 90 * idx + 42);

            auto dx_xz_yzzz = primBuffer.data(d2off + 90 * idx + 43);

            auto dx_xz_zzzz = primBuffer.data(d2off + 90 * idx + 44);

            auto dx_yy_xxxx = primBuffer.data(d2off + 90 * idx + 45);

            auto dx_yy_xxxy = primBuffer.data(d2off + 90 * idx + 46);

            auto dx_yy_xxxz = primBuffer.data(d2off + 90 * idx + 47);

            auto dx_yy_xxyy = primBuffer.data(d2off + 90 * idx + 48);

            auto dx_yy_xxyz = primBuffer.data(d2off + 90 * idx + 49);

            auto dx_yy_xxzz = primBuffer.data(d2off + 90 * idx + 50);

            auto dx_yy_xyyy = primBuffer.data(d2off + 90 * idx + 51);

            auto dx_yy_xyyz = primBuffer.data(d2off + 90 * idx + 52);

            auto dx_yy_xyzz = primBuffer.data(d2off + 90 * idx + 53);

            auto dx_yy_xzzz = primBuffer.data(d2off + 90 * idx + 54);

            auto dx_yy_yyyy = primBuffer.data(d2off + 90 * idx + 55);

            auto dx_yy_yyyz = primBuffer.data(d2off + 90 * idx + 56);

            auto dx_yy_yyzz = primBuffer.data(d2off + 90 * idx + 57);

            auto dx_yy_yzzz = primBuffer.data(d2off + 90 * idx + 58);

            auto dx_yy_zzzz = primBuffer.data(d2off + 90 * idx + 59);

            auto dx_yz_xxxx = primBuffer.data(d2off + 90 * idx + 60);

            auto dx_yz_xxxy = primBuffer.data(d2off + 90 * idx + 61);

            auto dx_yz_xxxz = primBuffer.data(d2off + 90 * idx + 62);

            auto dx_yz_xxyy = primBuffer.data(d2off + 90 * idx + 63);

            auto dx_yz_xxyz = primBuffer.data(d2off + 90 * idx + 64);

            auto dx_yz_xxzz = primBuffer.data(d2off + 90 * idx + 65);

            auto dx_yz_xyyy = primBuffer.data(d2off + 90 * idx + 66);

            auto dx_yz_xyyz = primBuffer.data(d2off + 90 * idx + 67);

            auto dx_yz_xyzz = primBuffer.data(d2off + 90 * idx + 68);

            auto dx_yz_xzzz = primBuffer.data(d2off + 90 * idx + 69);

            auto dx_yz_yyyy = primBuffer.data(d2off + 90 * idx + 70);

            auto dx_yz_yyyz = primBuffer.data(d2off + 90 * idx + 71);

            auto dx_yz_yyzz = primBuffer.data(d2off + 90 * idx + 72);

            auto dx_yz_yzzz = primBuffer.data(d2off + 90 * idx + 73);

            auto dx_yz_zzzz = primBuffer.data(d2off + 90 * idx + 74);

            auto dx_zz_xxxx = primBuffer.data(d2off + 90 * idx + 75);

            auto dx_zz_xxxy = primBuffer.data(d2off + 90 * idx + 76);

            auto dx_zz_xxxz = primBuffer.data(d2off + 90 * idx + 77);

            auto dx_zz_xxyy = primBuffer.data(d2off + 90 * idx + 78);

            auto dx_zz_xxyz = primBuffer.data(d2off + 90 * idx + 79);

            auto dx_zz_xxzz = primBuffer.data(d2off + 90 * idx + 80);

            auto dx_zz_xyyy = primBuffer.data(d2off + 90 * idx + 81);

            auto dx_zz_xyyz = primBuffer.data(d2off + 90 * idx + 82);

            auto dx_zz_xyzz = primBuffer.data(d2off + 90 * idx + 83);

            auto dx_zz_xzzz = primBuffer.data(d2off + 90 * idx + 84);

            auto dx_zz_yyyy = primBuffer.data(d2off + 90 * idx + 85);

            auto dx_zz_yyyz = primBuffer.data(d2off + 90 * idx + 86);

            auto dx_zz_yyzz = primBuffer.data(d2off + 90 * idx + 87);

            auto dx_zz_yzzz = primBuffer.data(d2off + 90 * idx + 88);

            auto dx_zz_zzzz = primBuffer.data(d2off + 90 * idx + 89);

            auto dy_xx_xxxx = primBuffer.data(d2off + 90 * bdim + 90 * idx);

            auto dy_xx_xxxy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 1);

            auto dy_xx_xxxz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 2);

            auto dy_xx_xxyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 3);

            auto dy_xx_xxyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 4);

            auto dy_xx_xxzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 5);

            auto dy_xx_xyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 6);

            auto dy_xx_xyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 7);

            auto dy_xx_xyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 8);

            auto dy_xx_xzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 9);

            auto dy_xx_yyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 10);

            auto dy_xx_yyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 11);

            auto dy_xx_yyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 12);

            auto dy_xx_yzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 13);

            auto dy_xx_zzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 14);

            auto dy_xy_xxxx = primBuffer.data(d2off + 90 * bdim + 90 * idx + 15);

            auto dy_xy_xxxy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 16);

            auto dy_xy_xxxz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 17);

            auto dy_xy_xxyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 18);

            auto dy_xy_xxyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 19);

            auto dy_xy_xxzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 20);

            auto dy_xy_xyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 21);

            auto dy_xy_xyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 22);

            auto dy_xy_xyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 23);

            auto dy_xy_xzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 24);

            auto dy_xy_yyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 25);

            auto dy_xy_yyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 26);

            auto dy_xy_yyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 27);

            auto dy_xy_yzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 28);

            auto dy_xy_zzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 29);

            auto dy_xz_xxxx = primBuffer.data(d2off + 90 * bdim + 90 * idx + 30);

            auto dy_xz_xxxy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 31);

            auto dy_xz_xxxz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 32);

            auto dy_xz_xxyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 33);

            auto dy_xz_xxyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 34);

            auto dy_xz_xxzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 35);

            auto dy_xz_xyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 36);

            auto dy_xz_xyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 37);

            auto dy_xz_xyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 38);

            auto dy_xz_xzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 39);

            auto dy_xz_yyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 40);

            auto dy_xz_yyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 41);

            auto dy_xz_yyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 42);

            auto dy_xz_yzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 43);

            auto dy_xz_zzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 44);

            auto dy_yy_xxxx = primBuffer.data(d2off + 90 * bdim + 90 * idx + 45);

            auto dy_yy_xxxy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 46);

            auto dy_yy_xxxz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 47);

            auto dy_yy_xxyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 48);

            auto dy_yy_xxyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 49);

            auto dy_yy_xxzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 50);

            auto dy_yy_xyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 51);

            auto dy_yy_xyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 52);

            auto dy_yy_xyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 53);

            auto dy_yy_xzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 54);

            auto dy_yy_yyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 55);

            auto dy_yy_yyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 56);

            auto dy_yy_yyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 57);

            auto dy_yy_yzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 58);

            auto dy_yy_zzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 59);

            auto dy_yz_xxxx = primBuffer.data(d2off + 90 * bdim + 90 * idx + 60);

            auto dy_yz_xxxy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 61);

            auto dy_yz_xxxz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 62);

            auto dy_yz_xxyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 63);

            auto dy_yz_xxyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 64);

            auto dy_yz_xxzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 65);

            auto dy_yz_xyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 66);

            auto dy_yz_xyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 67);

            auto dy_yz_xyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 68);

            auto dy_yz_xzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 69);

            auto dy_yz_yyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 70);

            auto dy_yz_yyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 71);

            auto dy_yz_yyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 72);

            auto dy_yz_yzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 73);

            auto dy_yz_zzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 74);

            auto dy_zz_xxxx = primBuffer.data(d2off + 90 * bdim + 90 * idx + 75);

            auto dy_zz_xxxy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 76);

            auto dy_zz_xxxz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 77);

            auto dy_zz_xxyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 78);

            auto dy_zz_xxyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 79);

            auto dy_zz_xxzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 80);

            auto dy_zz_xyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 81);

            auto dy_zz_xyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 82);

            auto dy_zz_xyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 83);

            auto dy_zz_xzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 84);

            auto dy_zz_yyyy = primBuffer.data(d2off + 90 * bdim + 90 * idx + 85);

            auto dy_zz_yyyz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 86);

            auto dy_zz_yyzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 87);

            auto dy_zz_yzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 88);

            auto dy_zz_zzzz = primBuffer.data(d2off + 90 * bdim + 90 * idx + 89);

            auto dz_xx_xxxx = primBuffer.data(d2off + 180 * bdim + 90 * idx);

            auto dz_xx_xxxy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 1);

            auto dz_xx_xxxz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 2);

            auto dz_xx_xxyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 3);

            auto dz_xx_xxyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 4);

            auto dz_xx_xxzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 5);

            auto dz_xx_xyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 6);

            auto dz_xx_xyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 7);

            auto dz_xx_xyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 8);

            auto dz_xx_xzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 9);

            auto dz_xx_yyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 10);

            auto dz_xx_yyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 11);

            auto dz_xx_yyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 12);

            auto dz_xx_yzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 13);

            auto dz_xx_zzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 14);

            auto dz_xy_xxxx = primBuffer.data(d2off + 180 * bdim + 90 * idx + 15);

            auto dz_xy_xxxy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 16);

            auto dz_xy_xxxz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 17);

            auto dz_xy_xxyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 18);

            auto dz_xy_xxyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 19);

            auto dz_xy_xxzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 20);

            auto dz_xy_xyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 21);

            auto dz_xy_xyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 22);

            auto dz_xy_xyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 23);

            auto dz_xy_xzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 24);

            auto dz_xy_yyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 25);

            auto dz_xy_yyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 26);

            auto dz_xy_yyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 27);

            auto dz_xy_yzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 28);

            auto dz_xy_zzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 29);

            auto dz_xz_xxxx = primBuffer.data(d2off + 180 * bdim + 90 * idx + 30);

            auto dz_xz_xxxy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 31);

            auto dz_xz_xxxz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 32);

            auto dz_xz_xxyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 33);

            auto dz_xz_xxyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 34);

            auto dz_xz_xxzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 35);

            auto dz_xz_xyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 36);

            auto dz_xz_xyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 37);

            auto dz_xz_xyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 38);

            auto dz_xz_xzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 39);

            auto dz_xz_yyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 40);

            auto dz_xz_yyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 41);

            auto dz_xz_yyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 42);

            auto dz_xz_yzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 43);

            auto dz_xz_zzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 44);

            auto dz_yy_xxxx = primBuffer.data(d2off + 180 * bdim + 90 * idx + 45);

            auto dz_yy_xxxy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 46);

            auto dz_yy_xxxz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 47);

            auto dz_yy_xxyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 48);

            auto dz_yy_xxyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 49);

            auto dz_yy_xxzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 50);

            auto dz_yy_xyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 51);

            auto dz_yy_xyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 52);

            auto dz_yy_xyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 53);

            auto dz_yy_xzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 54);

            auto dz_yy_yyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 55);

            auto dz_yy_yyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 56);

            auto dz_yy_yyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 57);

            auto dz_yy_yzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 58);

            auto dz_yy_zzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 59);

            auto dz_yz_xxxx = primBuffer.data(d2off + 180 * bdim + 90 * idx + 60);

            auto dz_yz_xxxy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 61);

            auto dz_yz_xxxz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 62);

            auto dz_yz_xxyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 63);

            auto dz_yz_xxyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 64);

            auto dz_yz_xxzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 65);

            auto dz_yz_xyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 66);

            auto dz_yz_xyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 67);

            auto dz_yz_xyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 68);

            auto dz_yz_xzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 69);

            auto dz_yz_yyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 70);

            auto dz_yz_yyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 71);

            auto dz_yz_yyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 72);

            auto dz_yz_yzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 73);

            auto dz_yz_zzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 74);

            auto dz_zz_xxxx = primBuffer.data(d2off + 180 * bdim + 90 * idx + 75);

            auto dz_zz_xxxy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 76);

            auto dz_zz_xxxz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 77);

            auto dz_zz_xxyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 78);

            auto dz_zz_xxyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 79);

            auto dz_zz_xxzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 80);

            auto dz_zz_xyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 81);

            auto dz_zz_xyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 82);

            auto dz_zz_xyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 83);

            auto dz_zz_xzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 84);

            auto dz_zz_yyyy = primBuffer.data(d2off + 180 * bdim + 90 * idx + 85);

            auto dz_zz_yyyz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 86);

            auto dz_zz_yyzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 87);

            auto dz_zz_yzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 88);

            auto dz_zz_zzzz = primBuffer.data(d2off + 180 * bdim + 90 * idx + 89);

            // set up pointers to (F|M|F) integrals

            auto dx_xxx_xxx = primBuffer.data(dkoff + 100 * idx);

            auto dx_xxx_xxy = primBuffer.data(dkoff + 100 * idx + 1);

            auto dx_xxx_xxz = primBuffer.data(dkoff + 100 * idx + 2);

            auto dx_xxx_xyy = primBuffer.data(dkoff + 100 * idx + 3);

            auto dx_xxx_xyz = primBuffer.data(dkoff + 100 * idx + 4);

            auto dx_xxx_xzz = primBuffer.data(dkoff + 100 * idx + 5);

            auto dx_xxx_yyy = primBuffer.data(dkoff + 100 * idx + 6);

            auto dx_xxx_yyz = primBuffer.data(dkoff + 100 * idx + 7);

            auto dx_xxx_yzz = primBuffer.data(dkoff + 100 * idx + 8);

            auto dx_xxx_zzz = primBuffer.data(dkoff + 100 * idx + 9);

            auto dx_xxy_xxx = primBuffer.data(dkoff + 100 * idx + 10);

            auto dx_xxy_xxy = primBuffer.data(dkoff + 100 * idx + 11);

            auto dx_xxy_xxz = primBuffer.data(dkoff + 100 * idx + 12);

            auto dx_xxy_xyy = primBuffer.data(dkoff + 100 * idx + 13);

            auto dx_xxy_xyz = primBuffer.data(dkoff + 100 * idx + 14);

            auto dx_xxy_xzz = primBuffer.data(dkoff + 100 * idx + 15);

            auto dx_xxy_yyy = primBuffer.data(dkoff + 100 * idx + 16);

            auto dx_xxy_yyz = primBuffer.data(dkoff + 100 * idx + 17);

            auto dx_xxy_yzz = primBuffer.data(dkoff + 100 * idx + 18);

            auto dx_xxy_zzz = primBuffer.data(dkoff + 100 * idx + 19);

            auto dx_xxz_xxx = primBuffer.data(dkoff + 100 * idx + 20);

            auto dx_xxz_xxy = primBuffer.data(dkoff + 100 * idx + 21);

            auto dx_xxz_xxz = primBuffer.data(dkoff + 100 * idx + 22);

            auto dx_xxz_xyy = primBuffer.data(dkoff + 100 * idx + 23);

            auto dx_xxz_xyz = primBuffer.data(dkoff + 100 * idx + 24);

            auto dx_xxz_xzz = primBuffer.data(dkoff + 100 * idx + 25);

            auto dx_xxz_yyy = primBuffer.data(dkoff + 100 * idx + 26);

            auto dx_xxz_yyz = primBuffer.data(dkoff + 100 * idx + 27);

            auto dx_xxz_yzz = primBuffer.data(dkoff + 100 * idx + 28);

            auto dx_xxz_zzz = primBuffer.data(dkoff + 100 * idx + 29);

            auto dx_xyy_xxx = primBuffer.data(dkoff + 100 * idx + 30);

            auto dx_xyy_xxy = primBuffer.data(dkoff + 100 * idx + 31);

            auto dx_xyy_xxz = primBuffer.data(dkoff + 100 * idx + 32);

            auto dx_xyy_xyy = primBuffer.data(dkoff + 100 * idx + 33);

            auto dx_xyy_xyz = primBuffer.data(dkoff + 100 * idx + 34);

            auto dx_xyy_xzz = primBuffer.data(dkoff + 100 * idx + 35);

            auto dx_xyy_yyy = primBuffer.data(dkoff + 100 * idx + 36);

            auto dx_xyy_yyz = primBuffer.data(dkoff + 100 * idx + 37);

            auto dx_xyy_yzz = primBuffer.data(dkoff + 100 * idx + 38);

            auto dx_xyy_zzz = primBuffer.data(dkoff + 100 * idx + 39);

            auto dx_xyz_xxx = primBuffer.data(dkoff + 100 * idx + 40);

            auto dx_xyz_xxy = primBuffer.data(dkoff + 100 * idx + 41);

            auto dx_xyz_xxz = primBuffer.data(dkoff + 100 * idx + 42);

            auto dx_xyz_xyy = primBuffer.data(dkoff + 100 * idx + 43);

            auto dx_xyz_xyz = primBuffer.data(dkoff + 100 * idx + 44);

            auto dx_xyz_xzz = primBuffer.data(dkoff + 100 * idx + 45);

            auto dx_xyz_yyy = primBuffer.data(dkoff + 100 * idx + 46);

            auto dx_xyz_yyz = primBuffer.data(dkoff + 100 * idx + 47);

            auto dx_xyz_yzz = primBuffer.data(dkoff + 100 * idx + 48);

            auto dx_xyz_zzz = primBuffer.data(dkoff + 100 * idx + 49);

            auto dx_xzz_xxx = primBuffer.data(dkoff + 100 * idx + 50);

            auto dx_xzz_xxy = primBuffer.data(dkoff + 100 * idx + 51);

            auto dx_xzz_xxz = primBuffer.data(dkoff + 100 * idx + 52);

            auto dx_xzz_xyy = primBuffer.data(dkoff + 100 * idx + 53);

            auto dx_xzz_xyz = primBuffer.data(dkoff + 100 * idx + 54);

            auto dx_xzz_xzz = primBuffer.data(dkoff + 100 * idx + 55);

            auto dx_xzz_yyy = primBuffer.data(dkoff + 100 * idx + 56);

            auto dx_xzz_yyz = primBuffer.data(dkoff + 100 * idx + 57);

            auto dx_xzz_yzz = primBuffer.data(dkoff + 100 * idx + 58);

            auto dx_xzz_zzz = primBuffer.data(dkoff + 100 * idx + 59);

            auto dx_yyy_xxx = primBuffer.data(dkoff + 100 * idx + 60);

            auto dx_yyy_xxy = primBuffer.data(dkoff + 100 * idx + 61);

            auto dx_yyy_xxz = primBuffer.data(dkoff + 100 * idx + 62);

            auto dx_yyy_xyy = primBuffer.data(dkoff + 100 * idx + 63);

            auto dx_yyy_xyz = primBuffer.data(dkoff + 100 * idx + 64);

            auto dx_yyy_xzz = primBuffer.data(dkoff + 100 * idx + 65);

            auto dx_yyy_yyy = primBuffer.data(dkoff + 100 * idx + 66);

            auto dx_yyy_yyz = primBuffer.data(dkoff + 100 * idx + 67);

            auto dx_yyy_yzz = primBuffer.data(dkoff + 100 * idx + 68);

            auto dx_yyy_zzz = primBuffer.data(dkoff + 100 * idx + 69);

            auto dx_yyz_xxx = primBuffer.data(dkoff + 100 * idx + 70);

            auto dx_yyz_xxy = primBuffer.data(dkoff + 100 * idx + 71);

            auto dx_yyz_xxz = primBuffer.data(dkoff + 100 * idx + 72);

            auto dx_yyz_xyy = primBuffer.data(dkoff + 100 * idx + 73);

            auto dx_yyz_xyz = primBuffer.data(dkoff + 100 * idx + 74);

            auto dx_yyz_xzz = primBuffer.data(dkoff + 100 * idx + 75);

            auto dx_yyz_yyy = primBuffer.data(dkoff + 100 * idx + 76);

            auto dx_yyz_yyz = primBuffer.data(dkoff + 100 * idx + 77);

            auto dx_yyz_yzz = primBuffer.data(dkoff + 100 * idx + 78);

            auto dx_yyz_zzz = primBuffer.data(dkoff + 100 * idx + 79);

            auto dx_yzz_xxx = primBuffer.data(dkoff + 100 * idx + 80);

            auto dx_yzz_xxy = primBuffer.data(dkoff + 100 * idx + 81);

            auto dx_yzz_xxz = primBuffer.data(dkoff + 100 * idx + 82);

            auto dx_yzz_xyy = primBuffer.data(dkoff + 100 * idx + 83);

            auto dx_yzz_xyz = primBuffer.data(dkoff + 100 * idx + 84);

            auto dx_yzz_xzz = primBuffer.data(dkoff + 100 * idx + 85);

            auto dx_yzz_yyy = primBuffer.data(dkoff + 100 * idx + 86);

            auto dx_yzz_yyz = primBuffer.data(dkoff + 100 * idx + 87);

            auto dx_yzz_yzz = primBuffer.data(dkoff + 100 * idx + 88);

            auto dx_yzz_zzz = primBuffer.data(dkoff + 100 * idx + 89);

            auto dx_zzz_xxx = primBuffer.data(dkoff + 100 * idx + 90);

            auto dx_zzz_xxy = primBuffer.data(dkoff + 100 * idx + 91);

            auto dx_zzz_xxz = primBuffer.data(dkoff + 100 * idx + 92);

            auto dx_zzz_xyy = primBuffer.data(dkoff + 100 * idx + 93);

            auto dx_zzz_xyz = primBuffer.data(dkoff + 100 * idx + 94);

            auto dx_zzz_xzz = primBuffer.data(dkoff + 100 * idx + 95);

            auto dx_zzz_yyy = primBuffer.data(dkoff + 100 * idx + 96);

            auto dx_zzz_yyz = primBuffer.data(dkoff + 100 * idx + 97);

            auto dx_zzz_yzz = primBuffer.data(dkoff + 100 * idx + 98);

            auto dx_zzz_zzz = primBuffer.data(dkoff + 100 * idx + 99);

            auto dy_xxx_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx);

            auto dy_xxx_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 1);

            auto dy_xxx_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 2);

            auto dy_xxx_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 3);

            auto dy_xxx_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 4);

            auto dy_xxx_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 5);

            auto dy_xxx_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 6);

            auto dy_xxx_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 7);

            auto dy_xxx_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 8);

            auto dy_xxx_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 9);

            auto dy_xxy_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 10);

            auto dy_xxy_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 11);

            auto dy_xxy_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 12);

            auto dy_xxy_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 13);

            auto dy_xxy_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 14);

            auto dy_xxy_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 15);

            auto dy_xxy_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 16);

            auto dy_xxy_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 17);

            auto dy_xxy_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 18);

            auto dy_xxy_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 19);

            auto dy_xxz_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 20);

            auto dy_xxz_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 21);

            auto dy_xxz_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 22);

            auto dy_xxz_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 23);

            auto dy_xxz_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 24);

            auto dy_xxz_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 25);

            auto dy_xxz_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 26);

            auto dy_xxz_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 27);

            auto dy_xxz_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 28);

            auto dy_xxz_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 29);

            auto dy_xyy_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 30);

            auto dy_xyy_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 31);

            auto dy_xyy_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 32);

            auto dy_xyy_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 33);

            auto dy_xyy_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 34);

            auto dy_xyy_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 35);

            auto dy_xyy_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 36);

            auto dy_xyy_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 37);

            auto dy_xyy_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 38);

            auto dy_xyy_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 39);

            auto dy_xyz_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 40);

            auto dy_xyz_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 41);

            auto dy_xyz_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 42);

            auto dy_xyz_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 43);

            auto dy_xyz_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 44);

            auto dy_xyz_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 45);

            auto dy_xyz_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 46);

            auto dy_xyz_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 47);

            auto dy_xyz_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 48);

            auto dy_xyz_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 49);

            auto dy_xzz_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 50);

            auto dy_xzz_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 51);

            auto dy_xzz_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 52);

            auto dy_xzz_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 53);

            auto dy_xzz_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 54);

            auto dy_xzz_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 55);

            auto dy_xzz_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 56);

            auto dy_xzz_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 57);

            auto dy_xzz_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 58);

            auto dy_xzz_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 59);

            auto dy_yyy_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 60);

            auto dy_yyy_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 61);

            auto dy_yyy_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 62);

            auto dy_yyy_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 63);

            auto dy_yyy_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 64);

            auto dy_yyy_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 65);

            auto dy_yyy_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 66);

            auto dy_yyy_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 67);

            auto dy_yyy_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 68);

            auto dy_yyy_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 69);

            auto dy_yyz_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 70);

            auto dy_yyz_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 71);

            auto dy_yyz_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 72);

            auto dy_yyz_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 73);

            auto dy_yyz_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 74);

            auto dy_yyz_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 75);

            auto dy_yyz_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 76);

            auto dy_yyz_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 77);

            auto dy_yyz_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 78);

            auto dy_yyz_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 79);

            auto dy_yzz_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 80);

            auto dy_yzz_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 81);

            auto dy_yzz_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 82);

            auto dy_yzz_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 83);

            auto dy_yzz_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 84);

            auto dy_yzz_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 85);

            auto dy_yzz_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 86);

            auto dy_yzz_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 87);

            auto dy_yzz_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 88);

            auto dy_yzz_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 89);

            auto dy_zzz_xxx = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 90);

            auto dy_zzz_xxy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 91);

            auto dy_zzz_xxz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 92);

            auto dy_zzz_xyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 93);

            auto dy_zzz_xyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 94);

            auto dy_zzz_xzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 95);

            auto dy_zzz_yyy = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 96);

            auto dy_zzz_yyz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 97);

            auto dy_zzz_yzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 98);

            auto dy_zzz_zzz = primBuffer.data(dkoff + 100 * bdim + 100 * idx + 99);

            auto dz_xxx_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx);

            auto dz_xxx_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 1);

            auto dz_xxx_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 2);

            auto dz_xxx_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 3);

            auto dz_xxx_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 4);

            auto dz_xxx_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 5);

            auto dz_xxx_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 6);

            auto dz_xxx_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 7);

            auto dz_xxx_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 8);

            auto dz_xxx_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 9);

            auto dz_xxy_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 10);

            auto dz_xxy_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 11);

            auto dz_xxy_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 12);

            auto dz_xxy_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 13);

            auto dz_xxy_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 14);

            auto dz_xxy_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 15);

            auto dz_xxy_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 16);

            auto dz_xxy_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 17);

            auto dz_xxy_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 18);

            auto dz_xxy_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 19);

            auto dz_xxz_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 20);

            auto dz_xxz_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 21);

            auto dz_xxz_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 22);

            auto dz_xxz_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 23);

            auto dz_xxz_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 24);

            auto dz_xxz_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 25);

            auto dz_xxz_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 26);

            auto dz_xxz_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 27);

            auto dz_xxz_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 28);

            auto dz_xxz_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 29);

            auto dz_xyy_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 30);

            auto dz_xyy_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 31);

            auto dz_xyy_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 32);

            auto dz_xyy_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 33);

            auto dz_xyy_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 34);

            auto dz_xyy_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 35);

            auto dz_xyy_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 36);

            auto dz_xyy_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 37);

            auto dz_xyy_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 38);

            auto dz_xyy_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 39);

            auto dz_xyz_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 40);

            auto dz_xyz_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 41);

            auto dz_xyz_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 42);

            auto dz_xyz_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 43);

            auto dz_xyz_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 44);

            auto dz_xyz_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 45);

            auto dz_xyz_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 46);

            auto dz_xyz_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 47);

            auto dz_xyz_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 48);

            auto dz_xyz_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 49);

            auto dz_xzz_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 50);

            auto dz_xzz_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 51);

            auto dz_xzz_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 52);

            auto dz_xzz_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 53);

            auto dz_xzz_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 54);

            auto dz_xzz_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 55);

            auto dz_xzz_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 56);

            auto dz_xzz_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 57);

            auto dz_xzz_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 58);

            auto dz_xzz_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 59);

            auto dz_yyy_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 60);

            auto dz_yyy_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 61);

            auto dz_yyy_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 62);

            auto dz_yyy_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 63);

            auto dz_yyy_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 64);

            auto dz_yyy_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 65);

            auto dz_yyy_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 66);

            auto dz_yyy_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 67);

            auto dz_yyy_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 68);

            auto dz_yyy_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 69);

            auto dz_yyz_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 70);

            auto dz_yyz_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 71);

            auto dz_yyz_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 72);

            auto dz_yyz_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 73);

            auto dz_yyz_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 74);

            auto dz_yyz_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 75);

            auto dz_yyz_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 76);

            auto dz_yyz_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 77);

            auto dz_yyz_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 78);

            auto dz_yyz_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 79);

            auto dz_yzz_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 80);

            auto dz_yzz_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 81);

            auto dz_yzz_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 82);

            auto dz_yzz_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 83);

            auto dz_yzz_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 84);

            auto dz_yzz_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 85);

            auto dz_yzz_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 86);

            auto dz_yzz_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 87);

            auto dz_yzz_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 88);

            auto dz_yzz_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 89);

            auto dz_zzz_xxx = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 90);

            auto dz_zzz_xxy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 91);

            auto dz_zzz_xxz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 92);

            auto dz_zzz_xyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 93);

            auto dz_zzz_xyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 94);

            auto dz_zzz_xzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 95);

            auto dz_zzz_yyy = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 96);

            auto dz_zzz_yyz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 97);

            auto dz_zzz_yzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 98);

            auto dz_zzz_zzz = primBuffer.data(dkoff + 200 * bdim + 100 * idx + 99);

            // set up pointers to (F|G) integrals

            auto s_xxx_xxxx = primBuffer.data(soff + 150 * idx);

            auto s_xxx_xxxy = primBuffer.data(soff + 150 * idx + 1);

            auto s_xxx_xxxz = primBuffer.data(soff + 150 * idx + 2);

            auto s_xxx_xxyy = primBuffer.data(soff + 150 * idx + 3);

            auto s_xxx_xxyz = primBuffer.data(soff + 150 * idx + 4);

            auto s_xxx_xxzz = primBuffer.data(soff + 150 * idx + 5);

            auto s_xxx_xyyy = primBuffer.data(soff + 150 * idx + 6);

            auto s_xxx_xyyz = primBuffer.data(soff + 150 * idx + 7);

            auto s_xxx_xyzz = primBuffer.data(soff + 150 * idx + 8);

            auto s_xxx_xzzz = primBuffer.data(soff + 150 * idx + 9);

            auto s_xxx_yyyy = primBuffer.data(soff + 150 * idx + 10);

            auto s_xxx_yyyz = primBuffer.data(soff + 150 * idx + 11);

            auto s_xxx_yyzz = primBuffer.data(soff + 150 * idx + 12);

            auto s_xxx_yzzz = primBuffer.data(soff + 150 * idx + 13);

            auto s_xxx_zzzz = primBuffer.data(soff + 150 * idx + 14);

            auto s_xxy_xxxx = primBuffer.data(soff + 150 * idx + 15);

            auto s_xxy_xxxy = primBuffer.data(soff + 150 * idx + 16);

            auto s_xxy_xxxz = primBuffer.data(soff + 150 * idx + 17);

            auto s_xxy_xxyy = primBuffer.data(soff + 150 * idx + 18);

            auto s_xxy_xxyz = primBuffer.data(soff + 150 * idx + 19);

            auto s_xxy_xxzz = primBuffer.data(soff + 150 * idx + 20);

            auto s_xxy_xyyy = primBuffer.data(soff + 150 * idx + 21);

            auto s_xxy_xyyz = primBuffer.data(soff + 150 * idx + 22);

            auto s_xxy_xyzz = primBuffer.data(soff + 150 * idx + 23);

            auto s_xxy_xzzz = primBuffer.data(soff + 150 * idx + 24);

            auto s_xxy_yyyy = primBuffer.data(soff + 150 * idx + 25);

            auto s_xxy_yyyz = primBuffer.data(soff + 150 * idx + 26);

            auto s_xxy_yyzz = primBuffer.data(soff + 150 * idx + 27);

            auto s_xxy_yzzz = primBuffer.data(soff + 150 * idx + 28);

            auto s_xxy_zzzz = primBuffer.data(soff + 150 * idx + 29);

            auto s_xxz_xxxx = primBuffer.data(soff + 150 * idx + 30);

            auto s_xxz_xxxy = primBuffer.data(soff + 150 * idx + 31);

            auto s_xxz_xxxz = primBuffer.data(soff + 150 * idx + 32);

            auto s_xxz_xxyy = primBuffer.data(soff + 150 * idx + 33);

            auto s_xxz_xxyz = primBuffer.data(soff + 150 * idx + 34);

            auto s_xxz_xxzz = primBuffer.data(soff + 150 * idx + 35);

            auto s_xxz_xyyy = primBuffer.data(soff + 150 * idx + 36);

            auto s_xxz_xyyz = primBuffer.data(soff + 150 * idx + 37);

            auto s_xxz_xyzz = primBuffer.data(soff + 150 * idx + 38);

            auto s_xxz_xzzz = primBuffer.data(soff + 150 * idx + 39);

            auto s_xxz_yyyy = primBuffer.data(soff + 150 * idx + 40);

            auto s_xxz_yyyz = primBuffer.data(soff + 150 * idx + 41);

            auto s_xxz_yyzz = primBuffer.data(soff + 150 * idx + 42);

            auto s_xxz_yzzz = primBuffer.data(soff + 150 * idx + 43);

            auto s_xxz_zzzz = primBuffer.data(soff + 150 * idx + 44);

            auto s_xyy_xxxx = primBuffer.data(soff + 150 * idx + 45);

            auto s_xyy_xxxy = primBuffer.data(soff + 150 * idx + 46);

            auto s_xyy_xxxz = primBuffer.data(soff + 150 * idx + 47);

            auto s_xyy_xxyy = primBuffer.data(soff + 150 * idx + 48);

            auto s_xyy_xxyz = primBuffer.data(soff + 150 * idx + 49);

            auto s_xyy_xxzz = primBuffer.data(soff + 150 * idx + 50);

            auto s_xyy_xyyy = primBuffer.data(soff + 150 * idx + 51);

            auto s_xyy_xyyz = primBuffer.data(soff + 150 * idx + 52);

            auto s_xyy_xyzz = primBuffer.data(soff + 150 * idx + 53);

            auto s_xyy_xzzz = primBuffer.data(soff + 150 * idx + 54);

            auto s_xyy_yyyy = primBuffer.data(soff + 150 * idx + 55);

            auto s_xyy_yyyz = primBuffer.data(soff + 150 * idx + 56);

            auto s_xyy_yyzz = primBuffer.data(soff + 150 * idx + 57);

            auto s_xyy_yzzz = primBuffer.data(soff + 150 * idx + 58);

            auto s_xyy_zzzz = primBuffer.data(soff + 150 * idx + 59);

            auto s_xyz_xxxx = primBuffer.data(soff + 150 * idx + 60);

            auto s_xyz_xxxy = primBuffer.data(soff + 150 * idx + 61);

            auto s_xyz_xxxz = primBuffer.data(soff + 150 * idx + 62);

            auto s_xyz_xxyy = primBuffer.data(soff + 150 * idx + 63);

            auto s_xyz_xxyz = primBuffer.data(soff + 150 * idx + 64);

            auto s_xyz_xxzz = primBuffer.data(soff + 150 * idx + 65);

            auto s_xyz_xyyy = primBuffer.data(soff + 150 * idx + 66);

            auto s_xyz_xyyz = primBuffer.data(soff + 150 * idx + 67);

            auto s_xyz_xyzz = primBuffer.data(soff + 150 * idx + 68);

            auto s_xyz_xzzz = primBuffer.data(soff + 150 * idx + 69);

            auto s_xyz_yyyy = primBuffer.data(soff + 150 * idx + 70);

            auto s_xyz_yyyz = primBuffer.data(soff + 150 * idx + 71);

            auto s_xyz_yyzz = primBuffer.data(soff + 150 * idx + 72);

            auto s_xyz_yzzz = primBuffer.data(soff + 150 * idx + 73);

            auto s_xyz_zzzz = primBuffer.data(soff + 150 * idx + 74);

            auto s_xzz_xxxx = primBuffer.data(soff + 150 * idx + 75);

            auto s_xzz_xxxy = primBuffer.data(soff + 150 * idx + 76);

            auto s_xzz_xxxz = primBuffer.data(soff + 150 * idx + 77);

            auto s_xzz_xxyy = primBuffer.data(soff + 150 * idx + 78);

            auto s_xzz_xxyz = primBuffer.data(soff + 150 * idx + 79);

            auto s_xzz_xxzz = primBuffer.data(soff + 150 * idx + 80);

            auto s_xzz_xyyy = primBuffer.data(soff + 150 * idx + 81);

            auto s_xzz_xyyz = primBuffer.data(soff + 150 * idx + 82);

            auto s_xzz_xyzz = primBuffer.data(soff + 150 * idx + 83);

            auto s_xzz_xzzz = primBuffer.data(soff + 150 * idx + 84);

            auto s_xzz_yyyy = primBuffer.data(soff + 150 * idx + 85);

            auto s_xzz_yyyz = primBuffer.data(soff + 150 * idx + 86);

            auto s_xzz_yyzz = primBuffer.data(soff + 150 * idx + 87);

            auto s_xzz_yzzz = primBuffer.data(soff + 150 * idx + 88);

            auto s_xzz_zzzz = primBuffer.data(soff + 150 * idx + 89);

            auto s_yyy_xxxx = primBuffer.data(soff + 150 * idx + 90);

            auto s_yyy_xxxy = primBuffer.data(soff + 150 * idx + 91);

            auto s_yyy_xxxz = primBuffer.data(soff + 150 * idx + 92);

            auto s_yyy_xxyy = primBuffer.data(soff + 150 * idx + 93);

            auto s_yyy_xxyz = primBuffer.data(soff + 150 * idx + 94);

            auto s_yyy_xxzz = primBuffer.data(soff + 150 * idx + 95);

            auto s_yyy_xyyy = primBuffer.data(soff + 150 * idx + 96);

            auto s_yyy_xyyz = primBuffer.data(soff + 150 * idx + 97);

            auto s_yyy_xyzz = primBuffer.data(soff + 150 * idx + 98);

            auto s_yyy_xzzz = primBuffer.data(soff + 150 * idx + 99);

            auto s_yyy_yyyy = primBuffer.data(soff + 150 * idx + 100);

            auto s_yyy_yyyz = primBuffer.data(soff + 150 * idx + 101);

            auto s_yyy_yyzz = primBuffer.data(soff + 150 * idx + 102);

            auto s_yyy_yzzz = primBuffer.data(soff + 150 * idx + 103);

            auto s_yyy_zzzz = primBuffer.data(soff + 150 * idx + 104);

            auto s_yyz_xxxx = primBuffer.data(soff + 150 * idx + 105);

            auto s_yyz_xxxy = primBuffer.data(soff + 150 * idx + 106);

            auto s_yyz_xxxz = primBuffer.data(soff + 150 * idx + 107);

            auto s_yyz_xxyy = primBuffer.data(soff + 150 * idx + 108);

            auto s_yyz_xxyz = primBuffer.data(soff + 150 * idx + 109);

            auto s_yyz_xxzz = primBuffer.data(soff + 150 * idx + 110);

            auto s_yyz_xyyy = primBuffer.data(soff + 150 * idx + 111);

            auto s_yyz_xyyz = primBuffer.data(soff + 150 * idx + 112);

            auto s_yyz_xyzz = primBuffer.data(soff + 150 * idx + 113);

            auto s_yyz_xzzz = primBuffer.data(soff + 150 * idx + 114);

            auto s_yyz_yyyy = primBuffer.data(soff + 150 * idx + 115);

            auto s_yyz_yyyz = primBuffer.data(soff + 150 * idx + 116);

            auto s_yyz_yyzz = primBuffer.data(soff + 150 * idx + 117);

            auto s_yyz_yzzz = primBuffer.data(soff + 150 * idx + 118);

            auto s_yyz_zzzz = primBuffer.data(soff + 150 * idx + 119);

            auto s_yzz_xxxx = primBuffer.data(soff + 150 * idx + 120);

            auto s_yzz_xxxy = primBuffer.data(soff + 150 * idx + 121);

            auto s_yzz_xxxz = primBuffer.data(soff + 150 * idx + 122);

            auto s_yzz_xxyy = primBuffer.data(soff + 150 * idx + 123);

            auto s_yzz_xxyz = primBuffer.data(soff + 150 * idx + 124);

            auto s_yzz_xxzz = primBuffer.data(soff + 150 * idx + 125);

            auto s_yzz_xyyy = primBuffer.data(soff + 150 * idx + 126);

            auto s_yzz_xyyz = primBuffer.data(soff + 150 * idx + 127);

            auto s_yzz_xyzz = primBuffer.data(soff + 150 * idx + 128);

            auto s_yzz_xzzz = primBuffer.data(soff + 150 * idx + 129);

            auto s_yzz_yyyy = primBuffer.data(soff + 150 * idx + 130);

            auto s_yzz_yyyz = primBuffer.data(soff + 150 * idx + 131);

            auto s_yzz_yyzz = primBuffer.data(soff + 150 * idx + 132);

            auto s_yzz_yzzz = primBuffer.data(soff + 150 * idx + 133);

            auto s_yzz_zzzz = primBuffer.data(soff + 150 * idx + 134);

            auto s_zzz_xxxx = primBuffer.data(soff + 150 * idx + 135);

            auto s_zzz_xxxy = primBuffer.data(soff + 150 * idx + 136);

            auto s_zzz_xxxz = primBuffer.data(soff + 150 * idx + 137);

            auto s_zzz_xxyy = primBuffer.data(soff + 150 * idx + 138);

            auto s_zzz_xxyz = primBuffer.data(soff + 150 * idx + 139);

            auto s_zzz_xxzz = primBuffer.data(soff + 150 * idx + 140);

            auto s_zzz_xyyy = primBuffer.data(soff + 150 * idx + 141);

            auto s_zzz_xyyz = primBuffer.data(soff + 150 * idx + 142);

            auto s_zzz_xyzz = primBuffer.data(soff + 150 * idx + 143);

            auto s_zzz_xzzz = primBuffer.data(soff + 150 * idx + 144);

            auto s_zzz_yyyy = primBuffer.data(soff + 150 * idx + 145);

            auto s_zzz_yyyz = primBuffer.data(soff + 150 * idx + 146);

            auto s_zzz_yyzz = primBuffer.data(soff + 150 * idx + 147);

            auto s_zzz_yzzz = primBuffer.data(soff + 150 * idx + 148);

            auto s_zzz_zzzz = primBuffer.data(soff + 150 * idx + 149);

            // set up pointers to (D|G) integrals

            auto s_xx_xxxx = primBuffer.data(s1off + 90 * idx);

            auto s_xx_xxxy = primBuffer.data(s1off + 90 * idx + 1);

            auto s_xx_xxxz = primBuffer.data(s1off + 90 * idx + 2);

            auto s_xx_xxyy = primBuffer.data(s1off + 90 * idx + 3);

            auto s_xx_xxyz = primBuffer.data(s1off + 90 * idx + 4);

            auto s_xx_xxzz = primBuffer.data(s1off + 90 * idx + 5);

            auto s_xx_xyyy = primBuffer.data(s1off + 90 * idx + 6);

            auto s_xx_xyyz = primBuffer.data(s1off + 90 * idx + 7);

            auto s_xx_xyzz = primBuffer.data(s1off + 90 * idx + 8);

            auto s_xx_xzzz = primBuffer.data(s1off + 90 * idx + 9);

            auto s_xx_yyyy = primBuffer.data(s1off + 90 * idx + 10);

            auto s_xx_yyyz = primBuffer.data(s1off + 90 * idx + 11);

            auto s_xx_yyzz = primBuffer.data(s1off + 90 * idx + 12);

            auto s_xx_yzzz = primBuffer.data(s1off + 90 * idx + 13);

            auto s_xx_zzzz = primBuffer.data(s1off + 90 * idx + 14);

            auto s_xy_xxxx = primBuffer.data(s1off + 90 * idx + 15);

            auto s_xy_xxxy = primBuffer.data(s1off + 90 * idx + 16);

            auto s_xy_xxxz = primBuffer.data(s1off + 90 * idx + 17);

            auto s_xy_xxyy = primBuffer.data(s1off + 90 * idx + 18);

            auto s_xy_xxyz = primBuffer.data(s1off + 90 * idx + 19);

            auto s_xy_xxzz = primBuffer.data(s1off + 90 * idx + 20);

            auto s_xy_xyyy = primBuffer.data(s1off + 90 * idx + 21);

            auto s_xy_xyyz = primBuffer.data(s1off + 90 * idx + 22);

            auto s_xy_xyzz = primBuffer.data(s1off + 90 * idx + 23);

            auto s_xy_xzzz = primBuffer.data(s1off + 90 * idx + 24);

            auto s_xy_yyyy = primBuffer.data(s1off + 90 * idx + 25);

            auto s_xy_yyyz = primBuffer.data(s1off + 90 * idx + 26);

            auto s_xy_yyzz = primBuffer.data(s1off + 90 * idx + 27);

            auto s_xy_yzzz = primBuffer.data(s1off + 90 * idx + 28);

            auto s_xy_zzzz = primBuffer.data(s1off + 90 * idx + 29);

            auto s_xz_xxxx = primBuffer.data(s1off + 90 * idx + 30);

            auto s_xz_xxxy = primBuffer.data(s1off + 90 * idx + 31);

            auto s_xz_xxxz = primBuffer.data(s1off + 90 * idx + 32);

            auto s_xz_xxyy = primBuffer.data(s1off + 90 * idx + 33);

            auto s_xz_xxyz = primBuffer.data(s1off + 90 * idx + 34);

            auto s_xz_xxzz = primBuffer.data(s1off + 90 * idx + 35);

            auto s_xz_xyyy = primBuffer.data(s1off + 90 * idx + 36);

            auto s_xz_xyyz = primBuffer.data(s1off + 90 * idx + 37);

            auto s_xz_xyzz = primBuffer.data(s1off + 90 * idx + 38);

            auto s_xz_xzzz = primBuffer.data(s1off + 90 * idx + 39);

            auto s_xz_yyyy = primBuffer.data(s1off + 90 * idx + 40);

            auto s_xz_yyyz = primBuffer.data(s1off + 90 * idx + 41);

            auto s_xz_yyzz = primBuffer.data(s1off + 90 * idx + 42);

            auto s_xz_yzzz = primBuffer.data(s1off + 90 * idx + 43);

            auto s_xz_zzzz = primBuffer.data(s1off + 90 * idx + 44);

            auto s_yy_xxxx = primBuffer.data(s1off + 90 * idx + 45);

            auto s_yy_xxxy = primBuffer.data(s1off + 90 * idx + 46);

            auto s_yy_xxxz = primBuffer.data(s1off + 90 * idx + 47);

            auto s_yy_xxyy = primBuffer.data(s1off + 90 * idx + 48);

            auto s_yy_xxyz = primBuffer.data(s1off + 90 * idx + 49);

            auto s_yy_xxzz = primBuffer.data(s1off + 90 * idx + 50);

            auto s_yy_xyyy = primBuffer.data(s1off + 90 * idx + 51);

            auto s_yy_xyyz = primBuffer.data(s1off + 90 * idx + 52);

            auto s_yy_xyzz = primBuffer.data(s1off + 90 * idx + 53);

            auto s_yy_xzzz = primBuffer.data(s1off + 90 * idx + 54);

            auto s_yy_yyyy = primBuffer.data(s1off + 90 * idx + 55);

            auto s_yy_yyyz = primBuffer.data(s1off + 90 * idx + 56);

            auto s_yy_yyzz = primBuffer.data(s1off + 90 * idx + 57);

            auto s_yy_yzzz = primBuffer.data(s1off + 90 * idx + 58);

            auto s_yy_zzzz = primBuffer.data(s1off + 90 * idx + 59);

            auto s_yz_xxxx = primBuffer.data(s1off + 90 * idx + 60);

            auto s_yz_xxxy = primBuffer.data(s1off + 90 * idx + 61);

            auto s_yz_xxxz = primBuffer.data(s1off + 90 * idx + 62);

            auto s_yz_xxyy = primBuffer.data(s1off + 90 * idx + 63);

            auto s_yz_xxyz = primBuffer.data(s1off + 90 * idx + 64);

            auto s_yz_xxzz = primBuffer.data(s1off + 90 * idx + 65);

            auto s_yz_xyyy = primBuffer.data(s1off + 90 * idx + 66);

            auto s_yz_xyyz = primBuffer.data(s1off + 90 * idx + 67);

            auto s_yz_xyzz = primBuffer.data(s1off + 90 * idx + 68);

            auto s_yz_xzzz = primBuffer.data(s1off + 90 * idx + 69);

            auto s_yz_yyyy = primBuffer.data(s1off + 90 * idx + 70);

            auto s_yz_yyyz = primBuffer.data(s1off + 90 * idx + 71);

            auto s_yz_yyzz = primBuffer.data(s1off + 90 * idx + 72);

            auto s_yz_yzzz = primBuffer.data(s1off + 90 * idx + 73);

            auto s_yz_zzzz = primBuffer.data(s1off + 90 * idx + 74);

            auto s_zz_xxxx = primBuffer.data(s1off + 90 * idx + 75);

            auto s_zz_xxxy = primBuffer.data(s1off + 90 * idx + 76);

            auto s_zz_xxxz = primBuffer.data(s1off + 90 * idx + 77);

            auto s_zz_xxyy = primBuffer.data(s1off + 90 * idx + 78);

            auto s_zz_xxyz = primBuffer.data(s1off + 90 * idx + 79);

            auto s_zz_xxzz = primBuffer.data(s1off + 90 * idx + 80);

            auto s_zz_xyyy = primBuffer.data(s1off + 90 * idx + 81);

            auto s_zz_xyyz = primBuffer.data(s1off + 90 * idx + 82);

            auto s_zz_xyzz = primBuffer.data(s1off + 90 * idx + 83);

            auto s_zz_xzzz = primBuffer.data(s1off + 90 * idx + 84);

            auto s_zz_yyyy = primBuffer.data(s1off + 90 * idx + 85);

            auto s_zz_yyyz = primBuffer.data(s1off + 90 * idx + 86);

            auto s_zz_yyzz = primBuffer.data(s1off + 90 * idx + 87);

            auto s_zz_yzzz = primBuffer.data(s1off + 90 * idx + 88);

            auto s_zz_zzzz = primBuffer.data(s1off + 90 * idx + 89);

            // set up pointers to (P|G) integrals

            auto s_x_xxxx = primBuffer.data(s2off + 45 * idx);

            auto s_x_xxxy = primBuffer.data(s2off + 45 * idx + 1);

            auto s_x_xxxz = primBuffer.data(s2off + 45 * idx + 2);

            auto s_x_xxyy = primBuffer.data(s2off + 45 * idx + 3);

            auto s_x_xxyz = primBuffer.data(s2off + 45 * idx + 4);

            auto s_x_xxzz = primBuffer.data(s2off + 45 * idx + 5);

            auto s_x_xyyy = primBuffer.data(s2off + 45 * idx + 6);

            auto s_x_xyyz = primBuffer.data(s2off + 45 * idx + 7);

            auto s_x_xyzz = primBuffer.data(s2off + 45 * idx + 8);

            auto s_x_xzzz = primBuffer.data(s2off + 45 * idx + 9);

            auto s_x_yyyy = primBuffer.data(s2off + 45 * idx + 10);

            auto s_x_yyyz = primBuffer.data(s2off + 45 * idx + 11);

            auto s_x_yyzz = primBuffer.data(s2off + 45 * idx + 12);

            auto s_x_yzzz = primBuffer.data(s2off + 45 * idx + 13);

            auto s_x_zzzz = primBuffer.data(s2off + 45 * idx + 14);

            auto s_y_xxxx = primBuffer.data(s2off + 45 * idx + 15);

            auto s_y_xxxy = primBuffer.data(s2off + 45 * idx + 16);

            auto s_y_xxxz = primBuffer.data(s2off + 45 * idx + 17);

            auto s_y_xxyy = primBuffer.data(s2off + 45 * idx + 18);

            auto s_y_xxyz = primBuffer.data(s2off + 45 * idx + 19);

            auto s_y_xxzz = primBuffer.data(s2off + 45 * idx + 20);

            auto s_y_xyyy = primBuffer.data(s2off + 45 * idx + 21);

            auto s_y_xyyz = primBuffer.data(s2off + 45 * idx + 22);

            auto s_y_xyzz = primBuffer.data(s2off + 45 * idx + 23);

            auto s_y_xzzz = primBuffer.data(s2off + 45 * idx + 24);

            auto s_y_yyyy = primBuffer.data(s2off + 45 * idx + 25);

            auto s_y_yyyz = primBuffer.data(s2off + 45 * idx + 26);

            auto s_y_yyzz = primBuffer.data(s2off + 45 * idx + 27);

            auto s_y_yzzz = primBuffer.data(s2off + 45 * idx + 28);

            auto s_y_zzzz = primBuffer.data(s2off + 45 * idx + 29);

            auto s_z_xxxx = primBuffer.data(s2off + 45 * idx + 30);

            auto s_z_xxxy = primBuffer.data(s2off + 45 * idx + 31);

            auto s_z_xxxz = primBuffer.data(s2off + 45 * idx + 32);

            auto s_z_xxyy = primBuffer.data(s2off + 45 * idx + 33);

            auto s_z_xxyz = primBuffer.data(s2off + 45 * idx + 34);

            auto s_z_xxzz = primBuffer.data(s2off + 45 * idx + 35);

            auto s_z_xyyy = primBuffer.data(s2off + 45 * idx + 36);

            auto s_z_xyyz = primBuffer.data(s2off + 45 * idx + 37);

            auto s_z_xyzz = primBuffer.data(s2off + 45 * idx + 38);

            auto s_z_xzzz = primBuffer.data(s2off + 45 * idx + 39);

            auto s_z_yyyy = primBuffer.data(s2off + 45 * idx + 40);

            auto s_z_yyyz = primBuffer.data(s2off + 45 * idx + 41);

            auto s_z_yyzz = primBuffer.data(s2off + 45 * idx + 42);

            auto s_z_yzzz = primBuffer.data(s2off + 45 * idx + 43);

            auto s_z_zzzz = primBuffer.data(s2off + 45 * idx + 44);

            // set up pointers to (D|F) integrals

            auto s_xx_xxx = primBuffer.data(skoff + 60 * idx);

            auto s_xx_xxy = primBuffer.data(skoff + 60 * idx + 1);

            auto s_xx_xxz = primBuffer.data(skoff + 60 * idx + 2);

            auto s_xx_xyy = primBuffer.data(skoff + 60 * idx + 3);

            auto s_xx_xyz = primBuffer.data(skoff + 60 * idx + 4);

            auto s_xx_xzz = primBuffer.data(skoff + 60 * idx + 5);

            auto s_xx_yyy = primBuffer.data(skoff + 60 * idx + 6);

            auto s_xx_yyz = primBuffer.data(skoff + 60 * idx + 7);

            auto s_xx_yzz = primBuffer.data(skoff + 60 * idx + 8);

            auto s_xx_zzz = primBuffer.data(skoff + 60 * idx + 9);

            auto s_xy_xxx = primBuffer.data(skoff + 60 * idx + 10);

            auto s_xy_xxy = primBuffer.data(skoff + 60 * idx + 11);

            auto s_xy_xxz = primBuffer.data(skoff + 60 * idx + 12);

            auto s_xy_xyy = primBuffer.data(skoff + 60 * idx + 13);

            auto s_xy_xyz = primBuffer.data(skoff + 60 * idx + 14);

            auto s_xy_xzz = primBuffer.data(skoff + 60 * idx + 15);

            auto s_xy_yyy = primBuffer.data(skoff + 60 * idx + 16);

            auto s_xy_yyz = primBuffer.data(skoff + 60 * idx + 17);

            auto s_xy_yzz = primBuffer.data(skoff + 60 * idx + 18);

            auto s_xy_zzz = primBuffer.data(skoff + 60 * idx + 19);

            auto s_xz_xxx = primBuffer.data(skoff + 60 * idx + 20);

            auto s_xz_xxy = primBuffer.data(skoff + 60 * idx + 21);

            auto s_xz_xxz = primBuffer.data(skoff + 60 * idx + 22);

            auto s_xz_xyy = primBuffer.data(skoff + 60 * idx + 23);

            auto s_xz_xyz = primBuffer.data(skoff + 60 * idx + 24);

            auto s_xz_xzz = primBuffer.data(skoff + 60 * idx + 25);

            auto s_xz_yyy = primBuffer.data(skoff + 60 * idx + 26);

            auto s_xz_yyz = primBuffer.data(skoff + 60 * idx + 27);

            auto s_xz_yzz = primBuffer.data(skoff + 60 * idx + 28);

            auto s_xz_zzz = primBuffer.data(skoff + 60 * idx + 29);

            auto s_yy_xxx = primBuffer.data(skoff + 60 * idx + 30);

            auto s_yy_xxy = primBuffer.data(skoff + 60 * idx + 31);

            auto s_yy_xxz = primBuffer.data(skoff + 60 * idx + 32);

            auto s_yy_xyy = primBuffer.data(skoff + 60 * idx + 33);

            auto s_yy_xyz = primBuffer.data(skoff + 60 * idx + 34);

            auto s_yy_xzz = primBuffer.data(skoff + 60 * idx + 35);

            auto s_yy_yyy = primBuffer.data(skoff + 60 * idx + 36);

            auto s_yy_yyz = primBuffer.data(skoff + 60 * idx + 37);

            auto s_yy_yzz = primBuffer.data(skoff + 60 * idx + 38);

            auto s_yy_zzz = primBuffer.data(skoff + 60 * idx + 39);

            auto s_yz_xxx = primBuffer.data(skoff + 60 * idx + 40);

            auto s_yz_xxy = primBuffer.data(skoff + 60 * idx + 41);

            auto s_yz_xxz = primBuffer.data(skoff + 60 * idx + 42);

            auto s_yz_xyy = primBuffer.data(skoff + 60 * idx + 43);

            auto s_yz_xyz = primBuffer.data(skoff + 60 * idx + 44);

            auto s_yz_xzz = primBuffer.data(skoff + 60 * idx + 45);

            auto s_yz_yyy = primBuffer.data(skoff + 60 * idx + 46);

            auto s_yz_yyz = primBuffer.data(skoff + 60 * idx + 47);

            auto s_yz_yzz = primBuffer.data(skoff + 60 * idx + 48);

            auto s_yz_zzz = primBuffer.data(skoff + 60 * idx + 49);

            auto s_zz_xxx = primBuffer.data(skoff + 60 * idx + 50);

            auto s_zz_xxy = primBuffer.data(skoff + 60 * idx + 51);

            auto s_zz_xxz = primBuffer.data(skoff + 60 * idx + 52);

            auto s_zz_xyy = primBuffer.data(skoff + 60 * idx + 53);

            auto s_zz_xyz = primBuffer.data(skoff + 60 * idx + 54);

            auto s_zz_xzz = primBuffer.data(skoff + 60 * idx + 55);

            auto s_zz_yyy = primBuffer.data(skoff + 60 * idx + 56);

            auto s_zz_yyz = primBuffer.data(skoff + 60 * idx + 57);

            auto s_zz_yzz = primBuffer.data(skoff + 60 * idx + 58);

            auto s_zz_zzz = primBuffer.data(skoff + 60 * idx + 59);

            #pragma omp simd aligned(fx, pax, pay, paz, dx_xxxx_xxxx, dx_xxxx_xxxy,\
                                     dx_xxxx_xxxz, dx_xxxx_xxyy, dx_xxxx_xxyz,\
                                     dx_xxxx_xxzz, dx_xxxx_xyyy, dx_xxxx_xyyz,\
                                     dx_xxxx_xyzz, dx_xxxx_xzzz, dx_xxxx_yyyy,\
                                     dx_xxxx_yyyz, dx_xxxx_yyzz, dx_xxxx_yzzz,\
                                     dx_xxxx_zzzz, dx_xxxy_xxxx, dx_xxxy_xxxy,\
                                     dx_xxxy_xxxz, dx_xxxy_xxyy, dx_xxxy_xxyz,\
                                     dx_xxxy_xxzz, dx_xxxy_xyyy, dx_xxxy_xyyz,\
                                     dx_xxxy_xyzz, dx_xxxy_xzzz, dx_xxxy_yyyy,\
                                     dx_xxxy_yyyz, dx_xxxy_yyzz, dx_xxxy_yzzz,\
                                     dx_xxxy_zzzz, dx_xxxz_xxxx, dx_xxxz_xxxy,\
                                     dx_xxxz_xxxz, dx_xxxz_xxyy, dx_xxxz_xxyz,\
                                     dx_xxxz_xxzz, dx_xxxz_xyyy, dx_xxxz_xyyz,\
                                     dx_xxxz_xyzz, dx_xxxz_xzzz, dx_xxxz_yyyy,\
                                     dx_xxxz_yyyz, dx_xxxz_yyzz, dx_xxxz_yzzz,\
                                     dx_xxxz_zzzz, dx_xxyy_xxxx, dx_xxyy_xxxy,\
                                     dx_xxyy_xxxz, dx_xxyy_xxyy, dx_xxyy_xxyz,\
                                     dx_xxyy_xxzz, dx_xxyy_xyyy, dx_xxyy_xyyz,\
                                     dx_xxyy_xyzz, dx_xxyy_xzzz, dx_xxyy_yyyy,\
                                     dx_xxyy_yyyz, dx_xxyy_yyzz, dx_xxyy_yzzz,\
                                     dx_xxyy_zzzz, dx_xxyz_xxxx, dx_xxyz_xxxy,\
                                     dx_xxyz_xxxz, dx_xxyz_xxyy, dx_xxyz_xxyz,\
                                     dx_xxyz_xxzz, dx_xxyz_xyyy, dx_xxyz_xyyz,\
                                     dx_xxyz_xyzz, dx_xxyz_xzzz, dx_xxyz_yyyy,\
                                     dx_xxyz_yyyz, dx_xxyz_yyzz, dx_xxyz_yzzz,\
                                     dx_xxyz_zzzz, dx_xxzz_xxxx, dx_xxzz_xxxy,\
                                     dx_xxzz_xxxz, dx_xxzz_xxyy, dx_xxzz_xxyz,\
                                     dx_xxzz_xxzz, dx_xxzz_xyyy, dx_xxzz_xyyz,\
                                     dx_xxzz_xyzz, dx_xxzz_xzzz, dx_xxzz_yyyy,\
                                     dx_xxzz_yyyz, dx_xxzz_yyzz, dx_xxzz_yzzz,\
                                     dx_xxzz_zzzz, dx_xyyy_xxxx, dx_xyyy_xxxy,\
                                     dx_xyyy_xxxz, dx_xyyy_xxyy, dx_xyyy_xxyz,\
                                     dx_xyyy_xxzz, dx_xyyy_xyyy, dx_xyyy_xyyz,\
                                     dx_xyyy_xyzz, dx_xyyy_xzzz, dx_xyyy_yyyy,\
                                     dx_xyyy_yyyz, dx_xyyy_yyzz, dx_xyyy_yzzz,\
                                     dx_xyyy_zzzz, dx_xyyz_xxxx, dx_xyyz_xxxy,\
                                     dx_xyyz_xxxz, dx_xyyz_xxyy, dx_xyyz_xxyz,\
                                     dx_xyyz_xxzz, dx_xyyz_xyyy, dx_xyyz_xyyz,\
                                     dx_xyyz_xyzz, dx_xyyz_xzzz, dx_xyyz_yyyy,\
                                     dx_xyyz_yyyz, dx_xyyz_yyzz, dx_xyyz_yzzz,\
                                     dx_xyyz_zzzz, dx_xyzz_xxxx, dx_xyzz_xxxy,\
                                     dx_xyzz_xxxz, dx_xyzz_xxyy, dx_xyzz_xxyz,\
                                     dx_xyzz_xxzz, dx_xyzz_xyyy, dx_xyzz_xyyz,\
                                     dx_xyzz_xyzz, dx_xyzz_xzzz, dx_xyzz_yyyy,\
                                     dx_xyzz_yyyz, dx_xyzz_yyzz, dx_xyzz_yzzz,\
                                     dx_xyzz_zzzz, dx_xzzz_xxxx, dx_xzzz_xxxy,\
                                     dx_xzzz_xxxz, dx_xzzz_xxyy, dx_xzzz_xxyz,\
                                     dx_xzzz_xxzz, dx_xzzz_xyyy, dx_xzzz_xyyz,\
                                     dx_xzzz_xyzz, dx_xzzz_xzzz, dx_xzzz_yyyy,\
                                     dx_xzzz_yyyz, dx_xzzz_yyzz, dx_xzzz_yzzz,\
                                     dx_xzzz_zzzz, dx_yyyy_xxxx, dx_yyyy_xxxy,\
                                     dx_yyyy_xxxz, dx_yyyy_xxyy, dx_yyyy_xxyz,\
                                     dx_yyyy_xxzz, dx_yyyy_xyyy, dx_yyyy_xyyz,\
                                     dx_yyyy_xyzz, dx_yyyy_xzzz, dx_yyyy_yyyy,\
                                     dx_yyyy_yyyz, dx_yyyy_yyzz, dx_yyyy_yzzz,\
                                     dx_yyyy_zzzz, dx_yyyz_xxxx, dx_yyyz_xxxy,\
                                     dx_yyyz_xxxz, dx_yyyz_xxyy, dx_yyyz_xxyz,\
                                     dx_yyyz_xxzz, dx_yyyz_xyyy, dx_yyyz_xyyz,\
                                     dx_yyyz_xyzz, dx_yyyz_xzzz, dx_yyyz_yyyy,\
                                     dx_yyyz_yyyz, dx_yyyz_yyzz, dx_yyyz_yzzz,\
                                     dx_yyyz_zzzz, dx_yyzz_xxxx, dx_yyzz_xxxy,\
                                     dx_yyzz_xxxz, dx_yyzz_xxyy, dx_yyzz_xxyz,\
                                     dx_yyzz_xxzz, dx_yyzz_xyyy, dx_yyzz_xyyz,\
                                     dx_yyzz_xyzz, dx_yyzz_xzzz, dx_yyzz_yyyy,\
                                     dx_yyzz_yyyz, dx_yyzz_yyzz, dx_yyzz_yzzz,\
                                     dx_yyzz_zzzz, dx_yzzz_xxxx, dx_yzzz_xxxy,\
                                     dx_yzzz_xxxz, dx_yzzz_xxyy, dx_yzzz_xxyz,\
                                     dx_yzzz_xxzz, dx_yzzz_xyyy, dx_yzzz_xyyz,\
                                     dx_yzzz_xyzz, dx_yzzz_xzzz, dx_yzzz_yyyy,\
                                     dx_yzzz_yyyz, dx_yzzz_yyzz, dx_yzzz_yzzz,\
                                     dx_yzzz_zzzz, dx_zzzz_xxxx, dx_zzzz_xxxy,\
                                     dx_zzzz_xxxz, dx_zzzz_xxyy, dx_zzzz_xxyz,\
                                     dx_zzzz_xxzz, dx_zzzz_xyyy, dx_zzzz_xyyz,\
                                     dx_zzzz_xyzz, dx_zzzz_xzzz, dx_zzzz_yyyy,\
                                     dx_zzzz_yyyz, dx_zzzz_yyzz, dx_zzzz_yzzz,\
                                     dx_zzzz_zzzz, dy_xxxx_xxxx, dy_xxxx_xxxy,\
                                     dy_xxxx_xxxz, dy_xxxx_xxyy, dy_xxxx_xxyz,\
                                     dy_xxxx_xxzz, dy_xxxx_xyyy, dy_xxxx_xyyz,\
                                     dy_xxxx_xyzz, dy_xxxx_xzzz, dy_xxxx_yyyy,\
                                     dy_xxxx_yyyz, dy_xxxx_yyzz, dy_xxxx_yzzz,\
                                     dy_xxxx_zzzz, dy_xxxy_xxxx, dy_xxxy_xxxy,\
                                     dy_xxxy_xxxz, dy_xxxy_xxyy, dy_xxxy_xxyz,\
                                     dy_xxxy_xxzz, dy_xxxy_xyyy, dy_xxxy_xyyz,\
                                     dy_xxxy_xyzz, dy_xxxy_xzzz, dy_xxxy_yyyy,\
                                     dy_xxxy_yyyz, dy_xxxy_yyzz, dy_xxxy_yzzz,\
                                     dy_xxxy_zzzz, dy_xxxz_xxxx, dy_xxxz_xxxy,\
                                     dy_xxxz_xxxz, dy_xxxz_xxyy, dy_xxxz_xxyz,\
                                     dy_xxxz_xxzz, dy_xxxz_xyyy, dy_xxxz_xyyz,\
                                     dy_xxxz_xyzz, dy_xxxz_xzzz, dy_xxxz_yyyy,\
                                     dy_xxxz_yyyz, dy_xxxz_yyzz, dy_xxxz_yzzz,\
                                     dy_xxxz_zzzz, dy_xxyy_xxxx, dy_xxyy_xxxy,\
                                     dy_xxyy_xxxz, dy_xxyy_xxyy, dy_xxyy_xxyz,\
                                     dy_xxyy_xxzz, dy_xxyy_xyyy, dy_xxyy_xyyz,\
                                     dy_xxyy_xyzz, dy_xxyy_xzzz, dy_xxyy_yyyy,\
                                     dy_xxyy_yyyz, dy_xxyy_yyzz, dy_xxyy_yzzz,\
                                     dy_xxyy_zzzz, dy_xxyz_xxxx, dy_xxyz_xxxy,\
                                     dy_xxyz_xxxz, dy_xxyz_xxyy, dy_xxyz_xxyz,\
                                     dy_xxyz_xxzz, dy_xxyz_xyyy, dy_xxyz_xyyz,\
                                     dy_xxyz_xyzz, dy_xxyz_xzzz, dy_xxyz_yyyy,\
                                     dy_xxyz_yyyz, dy_xxyz_yyzz, dy_xxyz_yzzz,\
                                     dy_xxyz_zzzz, dy_xxzz_xxxx, dy_xxzz_xxxy,\
                                     dy_xxzz_xxxz, dy_xxzz_xxyy, dy_xxzz_xxyz,\
                                     dy_xxzz_xxzz, dy_xxzz_xyyy, dy_xxzz_xyyz,\
                                     dy_xxzz_xyzz, dy_xxzz_xzzz, dy_xxzz_yyyy,\
                                     dy_xxzz_yyyz, dy_xxzz_yyzz, dy_xxzz_yzzz,\
                                     dy_xxzz_zzzz, dy_xyyy_xxxx, dy_xyyy_xxxy,\
                                     dy_xyyy_xxxz, dy_xyyy_xxyy, dy_xyyy_xxyz,\
                                     dy_xyyy_xxzz, dy_xyyy_xyyy, dy_xyyy_xyyz,\
                                     dy_xyyy_xyzz, dy_xyyy_xzzz, dy_xyyy_yyyy,\
                                     dy_xyyy_yyyz, dy_xyyy_yyzz, dy_xyyy_yzzz,\
                                     dy_xyyy_zzzz, dy_xyyz_xxxx, dy_xyyz_xxxy,\
                                     dy_xyyz_xxxz, dy_xyyz_xxyy, dy_xyyz_xxyz,\
                                     dy_xyyz_xxzz, dy_xyyz_xyyy, dy_xyyz_xyyz,\
                                     dy_xyyz_xyzz, dy_xyyz_xzzz, dy_xyyz_yyyy,\
                                     dy_xyyz_yyyz, dy_xyyz_yyzz, dy_xyyz_yzzz,\
                                     dy_xyyz_zzzz, dy_xyzz_xxxx, dy_xyzz_xxxy,\
                                     dy_xyzz_xxxz, dy_xyzz_xxyy, dy_xyzz_xxyz,\
                                     dy_xyzz_xxzz, dy_xyzz_xyyy, dy_xyzz_xyyz,\
                                     dy_xyzz_xyzz, dy_xyzz_xzzz, dy_xyzz_yyyy,\
                                     dy_xyzz_yyyz, dy_xyzz_yyzz, dy_xyzz_yzzz,\
                                     dy_xyzz_zzzz, dy_xzzz_xxxx, dy_xzzz_xxxy,\
                                     dy_xzzz_xxxz, dy_xzzz_xxyy, dy_xzzz_xxyz,\
                                     dy_xzzz_xxzz, dy_xzzz_xyyy, dy_xzzz_xyyz,\
                                     dy_xzzz_xyzz, dy_xzzz_xzzz, dy_xzzz_yyyy,\
                                     dy_xzzz_yyyz, dy_xzzz_yyzz, dy_xzzz_yzzz,\
                                     dy_xzzz_zzzz, dy_yyyy_xxxx, dy_yyyy_xxxy,\
                                     dy_yyyy_xxxz, dy_yyyy_xxyy, dy_yyyy_xxyz,\
                                     dy_yyyy_xxzz, dy_yyyy_xyyy, dy_yyyy_xyyz,\
                                     dy_yyyy_xyzz, dy_yyyy_xzzz, dy_yyyy_yyyy,\
                                     dy_yyyy_yyyz, dy_yyyy_yyzz, dy_yyyy_yzzz,\
                                     dy_yyyy_zzzz, dy_yyyz_xxxx, dy_yyyz_xxxy,\
                                     dy_yyyz_xxxz, dy_yyyz_xxyy, dy_yyyz_xxyz,\
                                     dy_yyyz_xxzz, dy_yyyz_xyyy, dy_yyyz_xyyz,\
                                     dy_yyyz_xyzz, dy_yyyz_xzzz, dy_yyyz_yyyy,\
                                     dy_yyyz_yyyz, dy_yyyz_yyzz, dy_yyyz_yzzz,\
                                     dy_yyyz_zzzz, dy_yyzz_xxxx, dy_yyzz_xxxy,\
                                     dy_yyzz_xxxz, dy_yyzz_xxyy, dy_yyzz_xxyz,\
                                     dy_yyzz_xxzz, dy_yyzz_xyyy, dy_yyzz_xyyz,\
                                     dy_yyzz_xyzz, dy_yyzz_xzzz, dy_yyzz_yyyy,\
                                     dy_yyzz_yyyz, dy_yyzz_yyzz, dy_yyzz_yzzz,\
                                     dy_yyzz_zzzz, dy_yzzz_xxxx, dy_yzzz_xxxy,\
                                     dy_yzzz_xxxz, dy_yzzz_xxyy, dy_yzzz_xxyz,\
                                     dy_yzzz_xxzz, dy_yzzz_xyyy, dy_yzzz_xyyz,\
                                     dy_yzzz_xyzz, dy_yzzz_xzzz, dy_yzzz_yyyy,\
                                     dy_yzzz_yyyz, dy_yzzz_yyzz, dy_yzzz_yzzz,\
                                     dy_yzzz_zzzz, dy_zzzz_xxxx, dy_zzzz_xxxy,\
                                     dy_zzzz_xxxz, dy_zzzz_xxyy, dy_zzzz_xxyz,\
                                     dy_zzzz_xxzz, dy_zzzz_xyyy, dy_zzzz_xyyz,\
                                     dy_zzzz_xyzz, dy_zzzz_xzzz, dy_zzzz_yyyy,\
                                     dy_zzzz_yyyz, dy_zzzz_yyzz, dy_zzzz_yzzz,\
                                     dy_zzzz_zzzz, dz_xxxx_xxxx, dz_xxxx_xxxy,\
                                     dz_xxxx_xxxz, dz_xxxx_xxyy, dz_xxxx_xxyz,\
                                     dz_xxxx_xxzz, dz_xxxx_xyyy, dz_xxxx_xyyz,\
                                     dz_xxxx_xyzz, dz_xxxx_xzzz, dz_xxxx_yyyy,\
                                     dz_xxxx_yyyz, dz_xxxx_yyzz, dz_xxxx_yzzz,\
                                     dz_xxxx_zzzz, dz_xxxy_xxxx, dz_xxxy_xxxy,\
                                     dz_xxxy_xxxz, dz_xxxy_xxyy, dz_xxxy_xxyz,\
                                     dz_xxxy_xxzz, dz_xxxy_xyyy, dz_xxxy_xyyz,\
                                     dz_xxxy_xyzz, dz_xxxy_xzzz, dz_xxxy_yyyy,\
                                     dz_xxxy_yyyz, dz_xxxy_yyzz, dz_xxxy_yzzz,\
                                     dz_xxxy_zzzz, dz_xxxz_xxxx, dz_xxxz_xxxy,\
                                     dz_xxxz_xxxz, dz_xxxz_xxyy, dz_xxxz_xxyz,\
                                     dz_xxxz_xxzz, dz_xxxz_xyyy, dz_xxxz_xyyz,\
                                     dz_xxxz_xyzz, dz_xxxz_xzzz, dz_xxxz_yyyy,\
                                     dz_xxxz_yyyz, dz_xxxz_yyzz, dz_xxxz_yzzz,\
                                     dz_xxxz_zzzz, dz_xxyy_xxxx, dz_xxyy_xxxy,\
                                     dz_xxyy_xxxz, dz_xxyy_xxyy, dz_xxyy_xxyz,\
                                     dz_xxyy_xxzz, dz_xxyy_xyyy, dz_xxyy_xyyz,\
                                     dz_xxyy_xyzz, dz_xxyy_xzzz, dz_xxyy_yyyy,\
                                     dz_xxyy_yyyz, dz_xxyy_yyzz, dz_xxyy_yzzz,\
                                     dz_xxyy_zzzz, dz_xxyz_xxxx, dz_xxyz_xxxy,\
                                     dz_xxyz_xxxz, dz_xxyz_xxyy, dz_xxyz_xxyz,\
                                     dz_xxyz_xxzz, dz_xxyz_xyyy, dz_xxyz_xyyz,\
                                     dz_xxyz_xyzz, dz_xxyz_xzzz, dz_xxyz_yyyy,\
                                     dz_xxyz_yyyz, dz_xxyz_yyzz, dz_xxyz_yzzz,\
                                     dz_xxyz_zzzz, dz_xxzz_xxxx, dz_xxzz_xxxy,\
                                     dz_xxzz_xxxz, dz_xxzz_xxyy, dz_xxzz_xxyz,\
                                     dz_xxzz_xxzz, dz_xxzz_xyyy, dz_xxzz_xyyz,\
                                     dz_xxzz_xyzz, dz_xxzz_xzzz, dz_xxzz_yyyy,\
                                     dz_xxzz_yyyz, dz_xxzz_yyzz, dz_xxzz_yzzz,\
                                     dz_xxzz_zzzz, dz_xyyy_xxxx, dz_xyyy_xxxy,\
                                     dz_xyyy_xxxz, dz_xyyy_xxyy, dz_xyyy_xxyz,\
                                     dz_xyyy_xxzz, dz_xyyy_xyyy, dz_xyyy_xyyz,\
                                     dz_xyyy_xyzz, dz_xyyy_xzzz, dz_xyyy_yyyy,\
                                     dz_xyyy_yyyz, dz_xyyy_yyzz, dz_xyyy_yzzz,\
                                     dz_xyyy_zzzz, dz_xyyz_xxxx, dz_xyyz_xxxy,\
                                     dz_xyyz_xxxz, dz_xyyz_xxyy, dz_xyyz_xxyz,\
                                     dz_xyyz_xxzz, dz_xyyz_xyyy, dz_xyyz_xyyz,\
                                     dz_xyyz_xyzz, dz_xyyz_xzzz, dz_xyyz_yyyy,\
                                     dz_xyyz_yyyz, dz_xyyz_yyzz, dz_xyyz_yzzz,\
                                     dz_xyyz_zzzz, dz_xyzz_xxxx, dz_xyzz_xxxy,\
                                     dz_xyzz_xxxz, dz_xyzz_xxyy, dz_xyzz_xxyz,\
                                     dz_xyzz_xxzz, dz_xyzz_xyyy, dz_xyzz_xyyz,\
                                     dz_xyzz_xyzz, dz_xyzz_xzzz, dz_xyzz_yyyy,\
                                     dz_xyzz_yyyz, dz_xyzz_yyzz, dz_xyzz_yzzz,\
                                     dz_xyzz_zzzz, dz_xzzz_xxxx, dz_xzzz_xxxy,\
                                     dz_xzzz_xxxz, dz_xzzz_xxyy, dz_xzzz_xxyz,\
                                     dz_xzzz_xxzz, dz_xzzz_xyyy, dz_xzzz_xyyz,\
                                     dz_xzzz_xyzz, dz_xzzz_xzzz, dz_xzzz_yyyy,\
                                     dz_xzzz_yyyz, dz_xzzz_yyzz, dz_xzzz_yzzz,\
                                     dz_xzzz_zzzz, dz_yyyy_xxxx, dz_yyyy_xxxy,\
                                     dz_yyyy_xxxz, dz_yyyy_xxyy, dz_yyyy_xxyz,\
                                     dz_yyyy_xxzz, dz_yyyy_xyyy, dz_yyyy_xyyz,\
                                     dz_yyyy_xyzz, dz_yyyy_xzzz, dz_yyyy_yyyy,\
                                     dz_yyyy_yyyz, dz_yyyy_yyzz, dz_yyyy_yzzz,\
                                     dz_yyyy_zzzz, dz_yyyz_xxxx, dz_yyyz_xxxy,\
                                     dz_yyyz_xxxz, dz_yyyz_xxyy, dz_yyyz_xxyz,\
                                     dz_yyyz_xxzz, dz_yyyz_xyyy, dz_yyyz_xyyz,\
                                     dz_yyyz_xyzz, dz_yyyz_xzzz, dz_yyyz_yyyy,\
                                     dz_yyyz_yyyz, dz_yyyz_yyzz, dz_yyyz_yzzz,\
                                     dz_yyyz_zzzz, dz_yyzz_xxxx, dz_yyzz_xxxy,\
                                     dz_yyzz_xxxz, dz_yyzz_xxyy, dz_yyzz_xxyz,\
                                     dz_yyzz_xxzz, dz_yyzz_xyyy, dz_yyzz_xyyz,\
                                     dz_yyzz_xyzz, dz_yyzz_xzzz, dz_yyzz_yyyy,\
                                     dz_yyzz_yyyz, dz_yyzz_yyzz, dz_yyzz_yzzz,\
                                     dz_yyzz_zzzz, dz_yzzz_xxxx, dz_yzzz_xxxy,\
                                     dz_yzzz_xxxz, dz_yzzz_xxyy, dz_yzzz_xxyz,\
                                     dz_yzzz_xxzz, dz_yzzz_xyyy, dz_yzzz_xyyz,\
                                     dz_yzzz_xyzz, dz_yzzz_xzzz, dz_yzzz_yyyy,\
                                     dz_yzzz_yyyz, dz_yzzz_yyzz, dz_yzzz_yzzz,\
                                     dz_yzzz_zzzz, dz_zzzz_xxxx, dz_zzzz_xxxy,\
                                     dz_zzzz_xxxz, dz_zzzz_xxyy, dz_zzzz_xxyz,\
                                     dz_zzzz_xxzz, dz_zzzz_xyyy, dz_zzzz_xyyz,\
                                     dz_zzzz_xyzz, dz_zzzz_xzzz, dz_zzzz_yyyy,\
                                     dz_zzzz_yyyz, dz_zzzz_yyzz, dz_zzzz_yzzz,\
                                     dz_zzzz_zzzz, dx_xxx_xxxx, dx_xxx_xxxy, dx_xxx_xxxz,\
                                     dx_xxx_xxyy, dx_xxx_xxyz, dx_xxx_xxzz, dx_xxx_xyyy,\
                                     dx_xxx_xyyz, dx_xxx_xyzz, dx_xxx_xzzz, dx_xxx_yyyy,\
                                     dx_xxx_yyyz, dx_xxx_yyzz, dx_xxx_yzzz, dx_xxx_zzzz,\
                                     dx_xxy_xxxx, dx_xxy_xxxy, dx_xxy_xxxz, dx_xxy_xxyy,\
                                     dx_xxy_xxyz, dx_xxy_xxzz, dx_xxy_xyyy, dx_xxy_xyyz,\
                                     dx_xxy_xyzz, dx_xxy_xzzz, dx_xxy_yyyy, dx_xxy_yyyz,\
                                     dx_xxy_yyzz, dx_xxy_yzzz, dx_xxy_zzzz, dx_xxz_xxxx,\
                                     dx_xxz_xxxy, dx_xxz_xxxz, dx_xxz_xxyy, dx_xxz_xxyz,\
                                     dx_xxz_xxzz, dx_xxz_xyyy, dx_xxz_xyyz, dx_xxz_xyzz,\
                                     dx_xxz_xzzz, dx_xxz_yyyy, dx_xxz_yyyz, dx_xxz_yyzz,\
                                     dx_xxz_yzzz, dx_xxz_zzzz, dx_xyy_xxxx, dx_xyy_xxxy,\
                                     dx_xyy_xxxz, dx_xyy_xxyy, dx_xyy_xxyz, dx_xyy_xxzz,\
                                     dx_xyy_xyyy, dx_xyy_xyyz, dx_xyy_xyzz, dx_xyy_xzzz,\
                                     dx_xyy_yyyy, dx_xyy_yyyz, dx_xyy_yyzz, dx_xyy_yzzz,\
                                     dx_xyy_zzzz, dx_xyz_xxxx, dx_xyz_xxxy, dx_xyz_xxxz,\
                                     dx_xyz_xxyy, dx_xyz_xxyz, dx_xyz_xxzz, dx_xyz_xyyy,\
                                     dx_xyz_xyyz, dx_xyz_xyzz, dx_xyz_xzzz, dx_xyz_yyyy,\
                                     dx_xyz_yyyz, dx_xyz_yyzz, dx_xyz_yzzz, dx_xyz_zzzz,\
                                     dx_xzz_xxxx, dx_xzz_xxxy, dx_xzz_xxxz, dx_xzz_xxyy,\
                                     dx_xzz_xxyz, dx_xzz_xxzz, dx_xzz_xyyy, dx_xzz_xyyz,\
                                     dx_xzz_xyzz, dx_xzz_xzzz, dx_xzz_yyyy, dx_xzz_yyyz,\
                                     dx_xzz_yyzz, dx_xzz_yzzz, dx_xzz_zzzz, dx_yyy_xxxx,\
                                     dx_yyy_xxxy, dx_yyy_xxxz, dx_yyy_xxyy, dx_yyy_xxyz,\
                                     dx_yyy_xxzz, dx_yyy_xyyy, dx_yyy_xyyz, dx_yyy_xyzz,\
                                     dx_yyy_xzzz, dx_yyy_yyyy, dx_yyy_yyyz, dx_yyy_yyzz,\
                                     dx_yyy_yzzz, dx_yyy_zzzz, dx_yyz_xxxx, dx_yyz_xxxy,\
                                     dx_yyz_xxxz, dx_yyz_xxyy, dx_yyz_xxyz, dx_yyz_xxzz,\
                                     dx_yyz_xyyy, dx_yyz_xyyz, dx_yyz_xyzz, dx_yyz_xzzz,\
                                     dx_yyz_yyyy, dx_yyz_yyyz, dx_yyz_yyzz, dx_yyz_yzzz,\
                                     dx_yyz_zzzz, dx_yzz_xxxx, dx_yzz_xxxy, dx_yzz_xxxz,\
                                     dx_yzz_xxyy, dx_yzz_xxyz, dx_yzz_xxzz, dx_yzz_xyyy,\
                                     dx_yzz_xyyz, dx_yzz_xyzz, dx_yzz_xzzz, dx_yzz_yyyy,\
                                     dx_yzz_yyyz, dx_yzz_yyzz, dx_yzz_yzzz, dx_yzz_zzzz,\
                                     dx_zzz_xxxx, dx_zzz_xxxy, dx_zzz_xxxz, dx_zzz_xxyy,\
                                     dx_zzz_xxyz, dx_zzz_xxzz, dx_zzz_xyyy, dx_zzz_xyyz,\
                                     dx_zzz_xyzz, dx_zzz_xzzz, dx_zzz_yyyy, dx_zzz_yyyz,\
                                     dx_zzz_yyzz, dx_zzz_yzzz, dx_zzz_zzzz, dy_xxx_xxxx,\
                                     dy_xxx_xxxy, dy_xxx_xxxz, dy_xxx_xxyy, dy_xxx_xxyz,\
                                     dy_xxx_xxzz, dy_xxx_xyyy, dy_xxx_xyyz, dy_xxx_xyzz,\
                                     dy_xxx_xzzz, dy_xxx_yyyy, dy_xxx_yyyz, dy_xxx_yyzz,\
                                     dy_xxx_yzzz, dy_xxx_zzzz, dy_xxy_xxxx, dy_xxy_xxxy,\
                                     dy_xxy_xxxz, dy_xxy_xxyy, dy_xxy_xxyz, dy_xxy_xxzz,\
                                     dy_xxy_xyyy, dy_xxy_xyyz, dy_xxy_xyzz, dy_xxy_xzzz,\
                                     dy_xxy_yyyy, dy_xxy_yyyz, dy_xxy_yyzz, dy_xxy_yzzz,\
                                     dy_xxy_zzzz, dy_xxz_xxxx, dy_xxz_xxxy, dy_xxz_xxxz,\
                                     dy_xxz_xxyy, dy_xxz_xxyz, dy_xxz_xxzz, dy_xxz_xyyy,\
                                     dy_xxz_xyyz, dy_xxz_xyzz, dy_xxz_xzzz, dy_xxz_yyyy,\
                                     dy_xxz_yyyz, dy_xxz_yyzz, dy_xxz_yzzz, dy_xxz_zzzz,\
                                     dy_xyy_xxxx, dy_xyy_xxxy, dy_xyy_xxxz, dy_xyy_xxyy,\
                                     dy_xyy_xxyz, dy_xyy_xxzz, dy_xyy_xyyy, dy_xyy_xyyz,\
                                     dy_xyy_xyzz, dy_xyy_xzzz, dy_xyy_yyyy, dy_xyy_yyyz,\
                                     dy_xyy_yyzz, dy_xyy_yzzz, dy_xyy_zzzz, dy_xyz_xxxx,\
                                     dy_xyz_xxxy, dy_xyz_xxxz, dy_xyz_xxyy, dy_xyz_xxyz,\
                                     dy_xyz_xxzz, dy_xyz_xyyy, dy_xyz_xyyz, dy_xyz_xyzz,\
                                     dy_xyz_xzzz, dy_xyz_yyyy, dy_xyz_yyyz, dy_xyz_yyzz,\
                                     dy_xyz_yzzz, dy_xyz_zzzz, dy_xzz_xxxx, dy_xzz_xxxy,\
                                     dy_xzz_xxxz, dy_xzz_xxyy, dy_xzz_xxyz, dy_xzz_xxzz,\
                                     dy_xzz_xyyy, dy_xzz_xyyz, dy_xzz_xyzz, dy_xzz_xzzz,\
                                     dy_xzz_yyyy, dy_xzz_yyyz, dy_xzz_yyzz, dy_xzz_yzzz,\
                                     dy_xzz_zzzz, dy_yyy_xxxx, dy_yyy_xxxy, dy_yyy_xxxz,\
                                     dy_yyy_xxyy, dy_yyy_xxyz, dy_yyy_xxzz, dy_yyy_xyyy,\
                                     dy_yyy_xyyz, dy_yyy_xyzz, dy_yyy_xzzz, dy_yyy_yyyy,\
                                     dy_yyy_yyyz, dy_yyy_yyzz, dy_yyy_yzzz, dy_yyy_zzzz,\
                                     dy_yyz_xxxx, dy_yyz_xxxy, dy_yyz_xxxz, dy_yyz_xxyy,\
                                     dy_yyz_xxyz, dy_yyz_xxzz, dy_yyz_xyyy, dy_yyz_xyyz,\
                                     dy_yyz_xyzz, dy_yyz_xzzz, dy_yyz_yyyy, dy_yyz_yyyz,\
                                     dy_yyz_yyzz, dy_yyz_yzzz, dy_yyz_zzzz, dy_yzz_xxxx,\
                                     dy_yzz_xxxy, dy_yzz_xxxz, dy_yzz_xxyy, dy_yzz_xxyz,\
                                     dy_yzz_xxzz, dy_yzz_xyyy, dy_yzz_xyyz, dy_yzz_xyzz,\
                                     dy_yzz_xzzz, dy_yzz_yyyy, dy_yzz_yyyz, dy_yzz_yyzz,\
                                     dy_yzz_yzzz, dy_yzz_zzzz, dy_zzz_xxxx, dy_zzz_xxxy,\
                                     dy_zzz_xxxz, dy_zzz_xxyy, dy_zzz_xxyz, dy_zzz_xxzz,\
                                     dy_zzz_xyyy, dy_zzz_xyyz, dy_zzz_xyzz, dy_zzz_xzzz,\
                                     dy_zzz_yyyy, dy_zzz_yyyz, dy_zzz_yyzz, dy_zzz_yzzz,\
                                     dy_zzz_zzzz, dz_xxx_xxxx, dz_xxx_xxxy, dz_xxx_xxxz,\
                                     dz_xxx_xxyy, dz_xxx_xxyz, dz_xxx_xxzz, dz_xxx_xyyy,\
                                     dz_xxx_xyyz, dz_xxx_xyzz, dz_xxx_xzzz, dz_xxx_yyyy,\
                                     dz_xxx_yyyz, dz_xxx_yyzz, dz_xxx_yzzz, dz_xxx_zzzz,\
                                     dz_xxy_xxxx, dz_xxy_xxxy, dz_xxy_xxxz, dz_xxy_xxyy,\
                                     dz_xxy_xxyz, dz_xxy_xxzz, dz_xxy_xyyy, dz_xxy_xyyz,\
                                     dz_xxy_xyzz, dz_xxy_xzzz, dz_xxy_yyyy, dz_xxy_yyyz,\
                                     dz_xxy_yyzz, dz_xxy_yzzz, dz_xxy_zzzz, dz_xxz_xxxx,\
                                     dz_xxz_xxxy, dz_xxz_xxxz, dz_xxz_xxyy, dz_xxz_xxyz,\
                                     dz_xxz_xxzz, dz_xxz_xyyy, dz_xxz_xyyz, dz_xxz_xyzz,\
                                     dz_xxz_xzzz, dz_xxz_yyyy, dz_xxz_yyyz, dz_xxz_yyzz,\
                                     dz_xxz_yzzz, dz_xxz_zzzz, dz_xyy_xxxx, dz_xyy_xxxy,\
                                     dz_xyy_xxxz, dz_xyy_xxyy, dz_xyy_xxyz, dz_xyy_xxzz,\
                                     dz_xyy_xyyy, dz_xyy_xyyz, dz_xyy_xyzz, dz_xyy_xzzz,\
                                     dz_xyy_yyyy, dz_xyy_yyyz, dz_xyy_yyzz, dz_xyy_yzzz,\
                                     dz_xyy_zzzz, dz_xyz_xxxx, dz_xyz_xxxy, dz_xyz_xxxz,\
                                     dz_xyz_xxyy, dz_xyz_xxyz, dz_xyz_xxzz, dz_xyz_xyyy,\
                                     dz_xyz_xyyz, dz_xyz_xyzz, dz_xyz_xzzz, dz_xyz_yyyy,\
                                     dz_xyz_yyyz, dz_xyz_yyzz, dz_xyz_yzzz, dz_xyz_zzzz,\
                                     dz_xzz_xxxx, dz_xzz_xxxy, dz_xzz_xxxz, dz_xzz_xxyy,\
                                     dz_xzz_xxyz, dz_xzz_xxzz, dz_xzz_xyyy, dz_xzz_xyyz,\
                                     dz_xzz_xyzz, dz_xzz_xzzz, dz_xzz_yyyy, dz_xzz_yyyz,\
                                     dz_xzz_yyzz, dz_xzz_yzzz, dz_xzz_zzzz, dz_yyy_xxxx,\
                                     dz_yyy_xxxy, dz_yyy_xxxz, dz_yyy_xxyy, dz_yyy_xxyz,\
                                     dz_yyy_xxzz, dz_yyy_xyyy, dz_yyy_xyyz, dz_yyy_xyzz,\
                                     dz_yyy_xzzz, dz_yyy_yyyy, dz_yyy_yyyz, dz_yyy_yyzz,\
                                     dz_yyy_yzzz, dz_yyy_zzzz, dz_yyz_xxxx, dz_yyz_xxxy,\
                                     dz_yyz_xxxz, dz_yyz_xxyy, dz_yyz_xxyz, dz_yyz_xxzz,\
                                     dz_yyz_xyyy, dz_yyz_xyyz, dz_yyz_xyzz, dz_yyz_xzzz,\
                                     dz_yyz_yyyy, dz_yyz_yyyz, dz_yyz_yyzz, dz_yyz_yzzz,\
                                     dz_yyz_zzzz, dz_yzz_xxxx, dz_yzz_xxxy, dz_yzz_xxxz,\
                                     dz_yzz_xxyy, dz_yzz_xxyz, dz_yzz_xxzz, dz_yzz_xyyy,\
                                     dz_yzz_xyyz, dz_yzz_xyzz, dz_yzz_xzzz, dz_yzz_yyyy,\
                                     dz_yzz_yyyz, dz_yzz_yyzz, dz_yzz_yzzz, dz_yzz_zzzz,\
                                     dz_zzz_xxxx, dz_zzz_xxxy, dz_zzz_xxxz, dz_zzz_xxyy,\
                                     dz_zzz_xxyz, dz_zzz_xxzz, dz_zzz_xyyy, dz_zzz_xyyz,\
                                     dz_zzz_xyzz, dz_zzz_xzzz, dz_zzz_yyyy, dz_zzz_yyyz,\
                                     dz_zzz_yyzz, dz_zzz_yzzz, dz_zzz_zzzz, dx_xx_xxxx,\
                                     dx_xx_xxxy, dx_xx_xxxz, dx_xx_xxyy, dx_xx_xxyz,\
                                     dx_xx_xxzz, dx_xx_xyyy, dx_xx_xyyz, dx_xx_xyzz,\
                                     dx_xx_xzzz, dx_xx_yyyy, dx_xx_yyyz, dx_xx_yyzz,\
                                     dx_xx_yzzz, dx_xx_zzzz, dx_xy_xxxx, dx_xy_xxxy,\
                                     dx_xy_xxxz, dx_xy_xxyy, dx_xy_xxyz, dx_xy_xxzz,\
                                     dx_xy_xyyy, dx_xy_xyyz, dx_xy_xyzz, dx_xy_xzzz,\
                                     dx_xy_yyyy, dx_xy_yyyz, dx_xy_yyzz, dx_xy_yzzz,\
                                     dx_xy_zzzz, dx_xz_xxxx, dx_xz_xxxy, dx_xz_xxxz,\
                                     dx_xz_xxyy, dx_xz_xxyz, dx_xz_xxzz, dx_xz_xyyy,\
                                     dx_xz_xyyz, dx_xz_xyzz, dx_xz_xzzz, dx_xz_yyyy,\
                                     dx_xz_yyyz, dx_xz_yyzz, dx_xz_yzzz, dx_xz_zzzz,\
                                     dx_yy_xxxx, dx_yy_xxxy, dx_yy_xxxz, dx_yy_xxyy,\
                                     dx_yy_xxyz, dx_yy_xxzz, dx_yy_xyyy, dx_yy_xyyz,\
                                     dx_yy_xyzz, dx_yy_xzzz, dx_yy_yyyy, dx_yy_yyyz,\
                                     dx_yy_yyzz, dx_yy_yzzz, dx_yy_zzzz, dx_yz_xxxx,\
                                     dx_yz_xxxy, dx_yz_xxxz, dx_yz_xxyy, dx_yz_xxyz,\
                                     dx_yz_xxzz, dx_yz_xyyy, dx_yz_xyyz, dx_yz_xyzz,\
                                     dx_yz_xzzz, dx_yz_yyyy, dx_yz_yyyz, dx_yz_yyzz,\
                                     dx_yz_yzzz, dx_yz_zzzz, dx_zz_xxxx, dx_zz_xxxy,\
                                     dx_zz_xxxz, dx_zz_xxyy, dx_zz_xxyz, dx_zz_xxzz,\
                                     dx_zz_xyyy, dx_zz_xyyz, dx_zz_xyzz, dx_zz_xzzz,\
                                     dx_zz_yyyy, dx_zz_yyyz, dx_zz_yyzz, dx_zz_yzzz,\
                                     dx_zz_zzzz, dy_xx_xxxx, dy_xx_xxxy, dy_xx_xxxz,\
                                     dy_xx_xxyy, dy_xx_xxyz, dy_xx_xxzz, dy_xx_xyyy,\
                                     dy_xx_xyyz, dy_xx_xyzz, dy_xx_xzzz, dy_xx_yyyy,\
                                     dy_xx_yyyz, dy_xx_yyzz, dy_xx_yzzz, dy_xx_zzzz,\
                                     dy_xy_xxxx, dy_xy_xxxy, dy_xy_xxxz, dy_xy_xxyy,\
                                     dy_xy_xxyz, dy_xy_xxzz, dy_xy_xyyy, dy_xy_xyyz,\
                                     dy_xy_xyzz, dy_xy_xzzz, dy_xy_yyyy, dy_xy_yyyz,\
                                     dy_xy_yyzz, dy_xy_yzzz, dy_xy_zzzz, dy_xz_xxxx,\
                                     dy_xz_xxxy, dy_xz_xxxz, dy_xz_xxyy, dy_xz_xxyz,\
                                     dy_xz_xxzz, dy_xz_xyyy, dy_xz_xyyz, dy_xz_xyzz,\
                                     dy_xz_xzzz, dy_xz_yyyy, dy_xz_yyyz, dy_xz_yyzz,\
                                     dy_xz_yzzz, dy_xz_zzzz, dy_yy_xxxx, dy_yy_xxxy,\
                                     dy_yy_xxxz, dy_yy_xxyy, dy_yy_xxyz, dy_yy_xxzz,\
                                     dy_yy_xyyy, dy_yy_xyyz, dy_yy_xyzz, dy_yy_xzzz,\
                                     dy_yy_yyyy, dy_yy_yyyz, dy_yy_yyzz, dy_yy_yzzz,\
                                     dy_yy_zzzz, dy_yz_xxxx, dy_yz_xxxy, dy_yz_xxxz,\
                                     dy_yz_xxyy, dy_yz_xxyz, dy_yz_xxzz, dy_yz_xyyy,\
                                     dy_yz_xyyz, dy_yz_xyzz, dy_yz_xzzz, dy_yz_yyyy,\
                                     dy_yz_yyyz, dy_yz_yyzz, dy_yz_yzzz, dy_yz_zzzz,\
                                     dy_zz_xxxx, dy_zz_xxxy, dy_zz_xxxz, dy_zz_xxyy,\
                                     dy_zz_xxyz, dy_zz_xxzz, dy_zz_xyyy, dy_zz_xyyz,\
                                     dy_zz_xyzz, dy_zz_xzzz, dy_zz_yyyy, dy_zz_yyyz,\
                                     dy_zz_yyzz, dy_zz_yzzz, dy_zz_zzzz, dz_xx_xxxx,\
                                     dz_xx_xxxy, dz_xx_xxxz, dz_xx_xxyy, dz_xx_xxyz,\
                                     dz_xx_xxzz, dz_xx_xyyy, dz_xx_xyyz, dz_xx_xyzz,\
                                     dz_xx_xzzz, dz_xx_yyyy, dz_xx_yyyz, dz_xx_yyzz,\
                                     dz_xx_yzzz, dz_xx_zzzz, dz_xy_xxxx, dz_xy_xxxy,\
                                     dz_xy_xxxz, dz_xy_xxyy, dz_xy_xxyz, dz_xy_xxzz,\
                                     dz_xy_xyyy, dz_xy_xyyz, dz_xy_xyzz, dz_xy_xzzz,\
                                     dz_xy_yyyy, dz_xy_yyyz, dz_xy_yyzz, dz_xy_yzzz,\
                                     dz_xy_zzzz, dz_xz_xxxx, dz_xz_xxxy, dz_xz_xxxz,\
                                     dz_xz_xxyy, dz_xz_xxyz, dz_xz_xxzz, dz_xz_xyyy,\
                                     dz_xz_xyyz, dz_xz_xyzz, dz_xz_xzzz, dz_xz_yyyy,\
                                     dz_xz_yyyz, dz_xz_yyzz, dz_xz_yzzz, dz_xz_zzzz,\
                                     dz_yy_xxxx, dz_yy_xxxy, dz_yy_xxxz, dz_yy_xxyy,\
                                     dz_yy_xxyz, dz_yy_xxzz, dz_yy_xyyy, dz_yy_xyyz,\
                                     dz_yy_xyzz, dz_yy_xzzz, dz_yy_yyyy, dz_yy_yyyz,\
                                     dz_yy_yyzz, dz_yy_yzzz, dz_yy_zzzz, dz_yz_xxxx,\
                                     dz_yz_xxxy, dz_yz_xxxz, dz_yz_xxyy, dz_yz_xxyz,\
                                     dz_yz_xxzz, dz_yz_xyyy, dz_yz_xyyz, dz_yz_xyzz,\
                                     dz_yz_xzzz, dz_yz_yyyy, dz_yz_yyyz, dz_yz_yyzz,\
                                     dz_yz_yzzz, dz_yz_zzzz, dz_zz_xxxx, dz_zz_xxxy,\
                                     dz_zz_xxxz, dz_zz_xxyy, dz_zz_xxyz, dz_zz_xxzz,\
                                     dz_zz_xyyy, dz_zz_xyyz, dz_zz_xyzz, dz_zz_xzzz,\
                                     dz_zz_yyyy, dz_zz_yyyz, dz_zz_yyzz, dz_zz_yzzz,\
                                     dz_zz_zzzz, dx_xxx_xxx, dx_xxx_xxy, dx_xxx_xxz,\
                                     dx_xxx_xyy, dx_xxx_xyz, dx_xxx_xzz, dx_xxx_yyy,\
                                     dx_xxx_yyz, dx_xxx_yzz, dx_xxx_zzz, dx_xxy_xxx,\
                                     dx_xxy_xxy, dx_xxy_xxz, dx_xxy_xyy, dx_xxy_xyz,\
                                     dx_xxy_xzz, dx_xxy_yyy, dx_xxy_yyz, dx_xxy_yzz,\
                                     dx_xxy_zzz, dx_xxz_xxx, dx_xxz_xxy, dx_xxz_xxz,\
                                     dx_xxz_xyy, dx_xxz_xyz, dx_xxz_xzz, dx_xxz_yyy,\
                                     dx_xxz_yyz, dx_xxz_yzz, dx_xxz_zzz, dx_xyy_xxx,\
                                     dx_xyy_xxy, dx_xyy_xxz, dx_xyy_xyy, dx_xyy_xyz,\
                                     dx_xyy_xzz, dx_xyy_yyy, dx_xyy_yyz, dx_xyy_yzz,\
                                     dx_xyy_zzz, dx_xyz_xxx, dx_xyz_xxy, dx_xyz_xxz,\
                                     dx_xyz_xyy, dx_xyz_xyz, dx_xyz_xzz, dx_xyz_yyy,\
                                     dx_xyz_yyz, dx_xyz_yzz, dx_xyz_zzz, dx_xzz_xxx,\
                                     dx_xzz_xxy, dx_xzz_xxz, dx_xzz_xyy, dx_xzz_xyz,\
                                     dx_xzz_xzz, dx_xzz_yyy, dx_xzz_yyz, dx_xzz_yzz,\
                                     dx_xzz_zzz, dx_yyy_xxx, dx_yyy_xxy, dx_yyy_xxz,\
                                     dx_yyy_xyy, dx_yyy_xyz, dx_yyy_xzz, dx_yyy_yyy,\
                                     dx_yyy_yyz, dx_yyy_yzz, dx_yyy_zzz, dx_yyz_xxx,\
                                     dx_yyz_xxy, dx_yyz_xxz, dx_yyz_xyy, dx_yyz_xyz,\
                                     dx_yyz_xzz, dx_yyz_yyy, dx_yyz_yyz, dx_yyz_yzz,\
                                     dx_yyz_zzz, dx_yzz_xxx, dx_yzz_xxy, dx_yzz_xxz,\
                                     dx_yzz_xyy, dx_yzz_xyz, dx_yzz_xzz, dx_yzz_yyy,\
                                     dx_yzz_yyz, dx_yzz_yzz, dx_yzz_zzz, dx_zzz_xxx,\
                                     dx_zzz_xxy, dx_zzz_xxz, dx_zzz_xyy, dx_zzz_xyz,\
                                     dx_zzz_xzz, dx_zzz_yyy, dx_zzz_yyz, dx_zzz_yzz,\
                                     dx_zzz_zzz, dy_xxx_xxx, dy_xxx_xxy, dy_xxx_xxz,\
                                     dy_xxx_xyy, dy_xxx_xyz, dy_xxx_xzz, dy_xxx_yyy,\
                                     dy_xxx_yyz, dy_xxx_yzz, dy_xxx_zzz, dy_xxy_xxx,\
                                     dy_xxy_xxy, dy_xxy_xxz, dy_xxy_xyy, dy_xxy_xyz,\
                                     dy_xxy_xzz, dy_xxy_yyy, dy_xxy_yyz, dy_xxy_yzz,\
                                     dy_xxy_zzz, dy_xxz_xxx, dy_xxz_xxy, dy_xxz_xxz,\
                                     dy_xxz_xyy, dy_xxz_xyz, dy_xxz_xzz, dy_xxz_yyy,\
                                     dy_xxz_yyz, dy_xxz_yzz, dy_xxz_zzz, dy_xyy_xxx,\
                                     dy_xyy_xxy, dy_xyy_xxz, dy_xyy_xyy, dy_xyy_xyz,\
                                     dy_xyy_xzz, dy_xyy_yyy, dy_xyy_yyz, dy_xyy_yzz,\
                                     dy_xyy_zzz, dy_xyz_xxx, dy_xyz_xxy, dy_xyz_xxz,\
                                     dy_xyz_xyy, dy_xyz_xyz, dy_xyz_xzz, dy_xyz_yyy,\
                                     dy_xyz_yyz, dy_xyz_yzz, dy_xyz_zzz, dy_xzz_xxx,\
                                     dy_xzz_xxy, dy_xzz_xxz, dy_xzz_xyy, dy_xzz_xyz,\
                                     dy_xzz_xzz, dy_xzz_yyy, dy_xzz_yyz, dy_xzz_yzz,\
                                     dy_xzz_zzz, dy_yyy_xxx, dy_yyy_xxy, dy_yyy_xxz,\
                                     dy_yyy_xyy, dy_yyy_xyz, dy_yyy_xzz, dy_yyy_yyy,\
                                     dy_yyy_yyz, dy_yyy_yzz, dy_yyy_zzz, dy_yyz_xxx,\
                                     dy_yyz_xxy, dy_yyz_xxz, dy_yyz_xyy, dy_yyz_xyz,\
                                     dy_yyz_xzz, dy_yyz_yyy, dy_yyz_yyz, dy_yyz_yzz,\
                                     dy_yyz_zzz, dy_yzz_xxx, dy_yzz_xxy, dy_yzz_xxz,\
                                     dy_yzz_xyy, dy_yzz_xyz, dy_yzz_xzz, dy_yzz_yyy,\
                                     dy_yzz_yyz, dy_yzz_yzz, dy_yzz_zzz, dy_zzz_xxx,\
                                     dy_zzz_xxy, dy_zzz_xxz, dy_zzz_xyy, dy_zzz_xyz,\
                                     dy_zzz_xzz, dy_zzz_yyy, dy_zzz_yyz, dy_zzz_yzz,\
                                     dy_zzz_zzz, dz_xxx_xxx, dz_xxx_xxy, dz_xxx_xxz,\
                                     dz_xxx_xyy, dz_xxx_xyz, dz_xxx_xzz, dz_xxx_yyy,\
                                     dz_xxx_yyz, dz_xxx_yzz, dz_xxx_zzz, dz_xxy_xxx,\
                                     dz_xxy_xxy, dz_xxy_xxz, dz_xxy_xyy, dz_xxy_xyz,\
                                     dz_xxy_xzz, dz_xxy_yyy, dz_xxy_yyz, dz_xxy_yzz,\
                                     dz_xxy_zzz, dz_xxz_xxx, dz_xxz_xxy, dz_xxz_xxz,\
                                     dz_xxz_xyy, dz_xxz_xyz, dz_xxz_xzz, dz_xxz_yyy,\
                                     dz_xxz_yyz, dz_xxz_yzz, dz_xxz_zzz, dz_xyy_xxx,\
                                     dz_xyy_xxy, dz_xyy_xxz, dz_xyy_xyy, dz_xyy_xyz,\
                                     dz_xyy_xzz, dz_xyy_yyy, dz_xyy_yyz, dz_xyy_yzz,\
                                     dz_xyy_zzz, dz_xyz_xxx, dz_xyz_xxy, dz_xyz_xxz,\
                                     dz_xyz_xyy, dz_xyz_xyz, dz_xyz_xzz, dz_xyz_yyy,\
                                     dz_xyz_yyz, dz_xyz_yzz, dz_xyz_zzz, dz_xzz_xxx,\
                                     dz_xzz_xxy, dz_xzz_xxz, dz_xzz_xyy, dz_xzz_xyz,\
                                     dz_xzz_xzz, dz_xzz_yyy, dz_xzz_yyz, dz_xzz_yzz,\
                                     dz_xzz_zzz, dz_yyy_xxx, dz_yyy_xxy, dz_yyy_xxz,\
                                     dz_yyy_xyy, dz_yyy_xyz, dz_yyy_xzz, dz_yyy_yyy,\
                                     dz_yyy_yyz, dz_yyy_yzz, dz_yyy_zzz, dz_yyz_xxx,\
                                     dz_yyz_xxy, dz_yyz_xxz, dz_yyz_xyy, dz_yyz_xyz,\
                                     dz_yyz_xzz, dz_yyz_yyy, dz_yyz_yyz, dz_yyz_yzz,\
                                     dz_yyz_zzz, dz_yzz_xxx, dz_yzz_xxy, dz_yzz_xxz,\
                                     dz_yzz_xyy, dz_yzz_xyz, dz_yzz_xzz, dz_yzz_yyy,\
                                     dz_yzz_yyz, dz_yzz_yzz, dz_yzz_zzz, dz_zzz_xxx,\
                                     dz_zzz_xxy, dz_zzz_xxz, dz_zzz_xyy, dz_zzz_xyz,\
                                     dz_zzz_xzz, dz_zzz_yyy, dz_zzz_yyz, dz_zzz_yzz,\
                                     dz_zzz_zzz, s_xxx_xxxx, s_xxx_xxxy, s_xxx_xxxz,\
                                     s_xxx_xxyy, s_xxx_xxyz, s_xxx_xxzz, s_xxx_xyyy,\
                                     s_xxx_xyyz, s_xxx_xyzz, s_xxx_xzzz, s_xxx_yyyy,\
                                     s_xxx_yyyz, s_xxx_yyzz, s_xxx_yzzz, s_xxx_zzzz,\
                                     s_xxy_xxxx, s_xxy_xxxy, s_xxy_xxxz, s_xxy_xxyy,\
                                     s_xxy_xxyz, s_xxy_xxzz, s_xxy_xyyy, s_xxy_xyyz,\
                                     s_xxy_xyzz, s_xxy_xzzz, s_xxy_yyyy, s_xxy_yyyz,\
                                     s_xxy_yyzz, s_xxy_yzzz, s_xxy_zzzz, s_xxz_xxxx,\
                                     s_xxz_xxxy, s_xxz_xxxz, s_xxz_xxyy, s_xxz_xxyz,\
                                     s_xxz_xxzz, s_xxz_xyyy, s_xxz_xyyz, s_xxz_xyzz,\
                                     s_xxz_xzzz, s_xxz_yyyy, s_xxz_yyyz, s_xxz_yyzz,\
                                     s_xxz_yzzz, s_xxz_zzzz, s_xyy_xxxx, s_xyy_xxxy,\
                                     s_xyy_xxxz, s_xyy_xxyy, s_xyy_xxyz, s_xyy_xxzz,\
                                     s_xyy_xyyy, s_xyy_xyyz, s_xyy_xyzz, s_xyy_xzzz,\
                                     s_xyy_yyyy, s_xyy_yyyz, s_xyy_yyzz, s_xyy_yzzz,\
                                     s_xyy_zzzz, s_xyz_xxxx, s_xyz_xxxy, s_xyz_xxxz,\
                                     s_xyz_xxyy, s_xyz_xxyz, s_xyz_xxzz, s_xyz_xyyy,\
                                     s_xyz_xyyz, s_xyz_xyzz, s_xyz_xzzz, s_xyz_yyyy,\
                                     s_xyz_yyyz, s_xyz_yyzz, s_xyz_yzzz, s_xyz_zzzz,\
                                     s_xzz_xxxx, s_xzz_xxxy, s_xzz_xxxz, s_xzz_xxyy,\
                                     s_xzz_xxyz, s_xzz_xxzz, s_xzz_xyyy, s_xzz_xyyz,\
                                     s_xzz_xyzz, s_xzz_xzzz, s_xzz_yyyy, s_xzz_yyyz,\
                                     s_xzz_yyzz, s_xzz_yzzz, s_xzz_zzzz, s_yyy_xxxx,\
                                     s_yyy_xxxy, s_yyy_xxxz, s_yyy_xxyy, s_yyy_xxyz,\
                                     s_yyy_xxzz, s_yyy_xyyy, s_yyy_xyyz, s_yyy_xyzz,\
                                     s_yyy_xzzz, s_yyy_yyyy, s_yyy_yyyz, s_yyy_yyzz,\
                                     s_yyy_yzzz, s_yyy_zzzz, s_yyz_xxxx, s_yyz_xxxy,\
                                     s_yyz_xxxz, s_yyz_xxyy, s_yyz_xxyz, s_yyz_xxzz,\
                                     s_yyz_xyyy, s_yyz_xyyz, s_yyz_xyzz, s_yyz_xzzz,\
                                     s_yyz_yyyy, s_yyz_yyyz, s_yyz_yyzz, s_yyz_yzzz,\
                                     s_yyz_zzzz, s_yzz_xxxx, s_yzz_xxxy, s_yzz_xxxz,\
                                     s_yzz_xxyy, s_yzz_xxyz, s_yzz_xxzz, s_yzz_xyyy,\
                                     s_yzz_xyyz, s_yzz_xyzz, s_yzz_xzzz, s_yzz_yyyy,\
                                     s_yzz_yyyz, s_yzz_yyzz, s_yzz_yzzz, s_yzz_zzzz,\
                                     s_zzz_xxxx, s_zzz_xxxy, s_zzz_xxxz, s_zzz_xxyy,\
                                     s_zzz_xxyz, s_zzz_xxzz, s_zzz_xyyy, s_zzz_xyyz,\
                                     s_zzz_xyzz, s_zzz_xzzz, s_zzz_yyyy, s_zzz_yyyz,\
                                     s_zzz_yyzz, s_zzz_yzzz, s_zzz_zzzz, s_xx_xxxx,\
                                     s_xx_xxxy, s_xx_xxxz, s_xx_xxyy, s_xx_xxyz,\
                                     s_xx_xxzz, s_xx_xyyy, s_xx_xyyz, s_xx_xyzz,\
                                     s_xx_xzzz, s_xx_yyyy, s_xx_yyyz, s_xx_yyzz,\
                                     s_xx_yzzz, s_xx_zzzz, s_xy_xxxx, s_xy_xxxy,\
                                     s_xy_xxxz, s_xy_xxyy, s_xy_xxyz, s_xy_xxzz,\
                                     s_xy_xyyy, s_xy_xyyz, s_xy_xyzz, s_xy_xzzz,\
                                     s_xy_yyyy, s_xy_yyyz, s_xy_yyzz, s_xy_yzzz,\
                                     s_xy_zzzz, s_xz_xxxx, s_xz_xxxy, s_xz_xxxz,\
                                     s_xz_xxyy, s_xz_xxyz, s_xz_xxzz, s_xz_xyyy,\
                                     s_xz_xyyz, s_xz_xyzz, s_xz_xzzz, s_xz_yyyy,\
                                     s_xz_yyyz, s_xz_yyzz, s_xz_yzzz, s_xz_zzzz,\
                                     s_yy_xxxx, s_yy_xxxy, s_yy_xxxz, s_yy_xxyy,\
                                     s_yy_xxyz, s_yy_xxzz, s_yy_xyyy, s_yy_xyyz,\
                                     s_yy_xyzz, s_yy_xzzz, s_yy_yyyy, s_yy_yyyz,\
                                     s_yy_yyzz, s_yy_yzzz, s_yy_zzzz, s_yz_xxxx,\
                                     s_yz_xxxy, s_yz_xxxz, s_yz_xxyy, s_yz_xxyz,\
                                     s_yz_xxzz, s_yz_xyyy, s_yz_xyyz, s_yz_xyzz,\
                                     s_yz_xzzz, s_yz_yyyy, s_yz_yyyz, s_yz_yyzz,\
                                     s_yz_yzzz, s_yz_zzzz, s_zz_xxxx, s_zz_xxxy,\
                                     s_zz_xxxz, s_zz_xxyy, s_zz_xxyz, s_zz_xxzz,\
                                     s_zz_xyyy, s_zz_xyyz, s_zz_xyzz, s_zz_xzzz,\
                                     s_zz_yyyy, s_zz_yyyz, s_zz_yyzz, s_zz_yzzz,\
                                     s_zz_zzzz, s_x_xxxx, s_x_xxxy, s_x_xxxz, s_x_xxyy,\
                                     s_x_xxyz, s_x_xxzz, s_x_xyyy, s_x_xyyz, s_x_xyzz,\
                                     s_x_xzzz, s_x_yyyy, s_x_yyyz, s_x_yyzz, s_x_yzzz,\
                                     s_x_zzzz, s_y_xxxx, s_y_xxxy, s_y_xxxz, s_y_xxyy,\
                                     s_y_xxyz, s_y_xxzz, s_y_xyyy, s_y_xyyz, s_y_xyzz,\
                                     s_y_xzzz, s_y_yyyy, s_y_yyyz, s_y_yyzz, s_y_yzzz,\
                                     s_y_zzzz, s_z_xxxx, s_z_xxxy, s_z_xxxz, s_z_xxyy,\
                                     s_z_xxyz, s_z_xxzz, s_z_xyyy, s_z_xyyz, s_z_xyzz,\
                                     s_z_xzzz, s_z_yyyy, s_z_yyyz, s_z_yyzz, s_z_yzzz,\
                                     s_z_zzzz, s_xx_xxx, s_xx_xxy, s_xx_xxz, s_xx_xyy,\
                                     s_xx_xyz, s_xx_xzz, s_xx_yyy, s_xx_yyz, s_xx_yzz,\
                                     s_xx_zzz, s_xy_xxx, s_xy_xxy, s_xy_xxz, s_xy_xyy,\
                                     s_xy_xyz, s_xy_xzz, s_xy_yyy, s_xy_yyz, s_xy_yzz,\
                                     s_xy_zzz, s_xz_xxx, s_xz_xxy, s_xz_xxz, s_xz_xyy,\
                                     s_xz_xyz, s_xz_xzz, s_xz_yyy, s_xz_yyz, s_xz_yzz,\
                                     s_xz_zzz, s_yy_xxx, s_yy_xxy, s_yy_xxz, s_yy_xyy,\
                                     s_yy_xyz, s_yy_xzz, s_yy_yyy, s_yy_yyz, s_yy_yzz,\
                                     s_yy_zzz, s_yz_xxx, s_yz_xxy, s_yz_xxz, s_yz_xyy,\
                                     s_yz_xyz, s_yz_xzz, s_yz_yyy, s_yz_yyz, s_yz_yzz,\
                                     s_yz_zzz, s_zz_xxx, s_zz_xxy, s_zz_xxz, s_zz_xyy,\
                                     s_zz_xyz, s_zz_xzz, s_zz_yyy, s_zz_yyz, s_zz_yzz,\
                                     s_zz_zzz: VLX_ALIGN)
             for (int32_t j = 0; j < nprim; j++)
            {
                // scaled prefactor

                double f2t = 0.50 * fx[j];

                // overlap integrals

                // leading x component

                double fr = pax[j];

                s_xxx_xxxx[j] = fr * s_xx_xxxx[j] + f2t * (2.0 * s_x_xxxx[j] + 4.0 * s_xx_xxx[j]);

                s_xxx_xxxy[j] = fr * s_xx_xxxy[j] + f2t * (2.0 * s_x_xxxy[j] + 3.0 * s_xx_xxy[j]);

                s_xxx_xxxz[j] = fr * s_xx_xxxz[j] + f2t * (2.0 * s_x_xxxz[j] + 3.0 * s_xx_xxz[j]);

                s_xxx_xxyy[j] = fr * s_xx_xxyy[j] + f2t * (2.0 * s_x_xxyy[j] + 2.0 * s_xx_xyy[j]);

                s_xxx_xxyz[j] = fr * s_xx_xxyz[j] + f2t * (2.0 * s_x_xxyz[j] + 2.0 * s_xx_xyz[j]);

                s_xxx_xxzz[j] = fr * s_xx_xxzz[j] + f2t * (2.0 * s_x_xxzz[j] + 2.0 * s_xx_xzz[j]);

                s_xxx_xyyy[j] = fr * s_xx_xyyy[j] + f2t * (2.0 * s_x_xyyy[j] + s_xx_yyy[j]);

                s_xxx_xyyz[j] = fr * s_xx_xyyz[j] + f2t * (2.0 * s_x_xyyz[j] + s_xx_yyz[j]);

                s_xxx_xyzz[j] = fr * s_xx_xyzz[j] + f2t * (2.0 * s_x_xyzz[j] + s_xx_yzz[j]);

                s_xxx_xzzz[j] = fr * s_xx_xzzz[j] + f2t * (2.0 * s_x_xzzz[j] + s_xx_zzz[j]);

                s_xxx_yyyy[j] = fr * s_xx_yyyy[j] + f2t * 2.0 * s_x_yyyy[j];

                s_xxx_yyyz[j] = fr * s_xx_yyyz[j] + f2t * 2.0 * s_x_yyyz[j];

                s_xxx_yyzz[j] = fr * s_xx_yyzz[j] + f2t * 2.0 * s_x_yyzz[j];

                s_xxx_yzzz[j] = fr * s_xx_yzzz[j] + f2t * 2.0 * s_x_yzzz[j];

                s_xxx_zzzz[j] = fr * s_xx_zzzz[j] + f2t * 2.0 * s_x_zzzz[j];

                s_xxy_xxxx[j] = fr * s_xy_xxxx[j] + f2t * (s_y_xxxx[j] + 4.0 * s_xy_xxx[j]);

                s_xxy_xxxy[j] = fr * s_xy_xxxy[j] + f2t * (s_y_xxxy[j] + 3.0 * s_xy_xxy[j]);

                s_xxy_xxxz[j] = fr * s_xy_xxxz[j] + f2t * (s_y_xxxz[j] + 3.0 * s_xy_xxz[j]);

                s_xxy_xxyy[j] = fr * s_xy_xxyy[j] + f2t * (s_y_xxyy[j] + 2.0 * s_xy_xyy[j]);

                s_xxy_xxyz[j] = fr * s_xy_xxyz[j] + f2t * (s_y_xxyz[j] + 2.0 * s_xy_xyz[j]);

                s_xxy_xxzz[j] = fr * s_xy_xxzz[j] + f2t * (s_y_xxzz[j] + 2.0 * s_xy_xzz[j]);

                s_xxy_xyyy[j] = fr * s_xy_xyyy[j] + f2t * (s_y_xyyy[j] + s_xy_yyy[j]);

                s_xxy_xyyz[j] = fr * s_xy_xyyz[j] + f2t * (s_y_xyyz[j] + s_xy_yyz[j]);

                s_xxy_xyzz[j] = fr * s_xy_xyzz[j] + f2t * (s_y_xyzz[j] + s_xy_yzz[j]);

                s_xxy_xzzz[j] = fr * s_xy_xzzz[j] + f2t * (s_y_xzzz[j] + s_xy_zzz[j]);

                s_xxy_yyyy[j] = fr * s_xy_yyyy[j] + f2t * s_y_yyyy[j];

                s_xxy_yyyz[j] = fr * s_xy_yyyz[j] + f2t * s_y_yyyz[j];

                s_xxy_yyzz[j] = fr * s_xy_yyzz[j] + f2t * s_y_yyzz[j];

                s_xxy_yzzz[j] = fr * s_xy_yzzz[j] + f2t * s_y_yzzz[j];

                s_xxy_zzzz[j] = fr * s_xy_zzzz[j] + f2t * s_y_zzzz[j];

                s_xxz_xxxx[j] = fr * s_xz_xxxx[j] + f2t * (s_z_xxxx[j] + 4.0 * s_xz_xxx[j]);

                s_xxz_xxxy[j] = fr * s_xz_xxxy[j] + f2t * (s_z_xxxy[j] + 3.0 * s_xz_xxy[j]);

                s_xxz_xxxz[j] = fr * s_xz_xxxz[j] + f2t * (s_z_xxxz[j] + 3.0 * s_xz_xxz[j]);

                s_xxz_xxyy[j] = fr * s_xz_xxyy[j] + f2t * (s_z_xxyy[j] + 2.0 * s_xz_xyy[j]);

                s_xxz_xxyz[j] = fr * s_xz_xxyz[j] + f2t * (s_z_xxyz[j] + 2.0 * s_xz_xyz[j]);

                s_xxz_xxzz[j] = fr * s_xz_xxzz[j] + f2t * (s_z_xxzz[j] + 2.0 * s_xz_xzz[j]);

                s_xxz_xyyy[j] = fr * s_xz_xyyy[j] + f2t * (s_z_xyyy[j] + s_xz_yyy[j]);

                s_xxz_xyyz[j] = fr * s_xz_xyyz[j] + f2t * (s_z_xyyz[j] + s_xz_yyz[j]);

                s_xxz_xyzz[j] = fr * s_xz_xyzz[j] + f2t * (s_z_xyzz[j] + s_xz_yzz[j]);

                s_xxz_xzzz[j] = fr * s_xz_xzzz[j] + f2t * (s_z_xzzz[j] + s_xz_zzz[j]);

                s_xxz_yyyy[j] = fr * s_xz_yyyy[j] + f2t * s_z_yyyy[j];

                s_xxz_yyyz[j] = fr * s_xz_yyyz[j] + f2t * s_z_yyyz[j];

                s_xxz_yyzz[j] = fr * s_xz_yyzz[j] + f2t * s_z_yyzz[j];

                s_xxz_yzzz[j] = fr * s_xz_yzzz[j] + f2t * s_z_yzzz[j];

                s_xxz_zzzz[j] = fr * s_xz_zzzz[j] + f2t * s_z_zzzz[j];

                s_xyy_xxxx[j] = fr * s_yy_xxxx[j] + f2t * 4.0 * s_yy_xxx[j];

                s_xyy_xxxy[j] = fr * s_yy_xxxy[j] + f2t * 3.0 * s_yy_xxy[j];

                s_xyy_xxxz[j] = fr * s_yy_xxxz[j] + f2t * 3.0 * s_yy_xxz[j];

                s_xyy_xxyy[j] = fr * s_yy_xxyy[j] + f2t * 2.0 * s_yy_xyy[j];

                s_xyy_xxyz[j] = fr * s_yy_xxyz[j] + f2t * 2.0 * s_yy_xyz[j];

                s_xyy_xxzz[j] = fr * s_yy_xxzz[j] + f2t * 2.0 * s_yy_xzz[j];

                s_xyy_xyyy[j] = fr * s_yy_xyyy[j] + f2t * s_yy_yyy[j];

                s_xyy_xyyz[j] = fr * s_yy_xyyz[j] + f2t * s_yy_yyz[j];

                s_xyy_xyzz[j] = fr * s_yy_xyzz[j] + f2t * s_yy_yzz[j];

                s_xyy_xzzz[j] = fr * s_yy_xzzz[j] + f2t * s_yy_zzz[j];

                s_xyy_yyyy[j] = fr * s_yy_yyyy[j];

                s_xyy_yyyz[j] = fr * s_yy_yyyz[j];

                s_xyy_yyzz[j] = fr * s_yy_yyzz[j];

                s_xyy_yzzz[j] = fr * s_yy_yzzz[j];

                s_xyy_zzzz[j] = fr * s_yy_zzzz[j];

                s_xyz_xxxx[j] = fr * s_yz_xxxx[j] + f2t * 4.0 * s_yz_xxx[j];

                s_xyz_xxxy[j] = fr * s_yz_xxxy[j] + f2t * 3.0 * s_yz_xxy[j];

                s_xyz_xxxz[j] = fr * s_yz_xxxz[j] + f2t * 3.0 * s_yz_xxz[j];

                s_xyz_xxyy[j] = fr * s_yz_xxyy[j] + f2t * 2.0 * s_yz_xyy[j];

                s_xyz_xxyz[j] = fr * s_yz_xxyz[j] + f2t * 2.0 * s_yz_xyz[j];

                s_xyz_xxzz[j] = fr * s_yz_xxzz[j] + f2t * 2.0 * s_yz_xzz[j];

                s_xyz_xyyy[j] = fr * s_yz_xyyy[j] + f2t * s_yz_yyy[j];

                s_xyz_xyyz[j] = fr * s_yz_xyyz[j] + f2t * s_yz_yyz[j];

                s_xyz_xyzz[j] = fr * s_yz_xyzz[j] + f2t * s_yz_yzz[j];

                s_xyz_xzzz[j] = fr * s_yz_xzzz[j] + f2t * s_yz_zzz[j];

                s_xyz_yyyy[j] = fr * s_yz_yyyy[j];

                s_xyz_yyyz[j] = fr * s_yz_yyyz[j];

                s_xyz_yyzz[j] = fr * s_yz_yyzz[j];

                s_xyz_yzzz[j] = fr * s_yz_yzzz[j];

                s_xyz_zzzz[j] = fr * s_yz_zzzz[j];

                s_xzz_xxxx[j] = fr * s_zz_xxxx[j] + f2t * 4.0 * s_zz_xxx[j];

                s_xzz_xxxy[j] = fr * s_zz_xxxy[j] + f2t * 3.0 * s_zz_xxy[j];

                s_xzz_xxxz[j] = fr * s_zz_xxxz[j] + f2t * 3.0 * s_zz_xxz[j];

                s_xzz_xxyy[j] = fr * s_zz_xxyy[j] + f2t * 2.0 * s_zz_xyy[j];

                s_xzz_xxyz[j] = fr * s_zz_xxyz[j] + f2t * 2.0 * s_zz_xyz[j];

                s_xzz_xxzz[j] = fr * s_zz_xxzz[j] + f2t * 2.0 * s_zz_xzz[j];

                s_xzz_xyyy[j] = fr * s_zz_xyyy[j] + f2t * s_zz_yyy[j];

                s_xzz_xyyz[j] = fr * s_zz_xyyz[j] + f2t * s_zz_yyz[j];

                s_xzz_xyzz[j] = fr * s_zz_xyzz[j] + f2t * s_zz_yzz[j];

                s_xzz_xzzz[j] = fr * s_zz_xzzz[j] + f2t * s_zz_zzz[j];

                s_xzz_yyyy[j] = fr * s_zz_yyyy[j];

                s_xzz_yyyz[j] = fr * s_zz_yyyz[j];

                s_xzz_yyzz[j] = fr * s_zz_yyzz[j];

                s_xzz_yzzz[j] = fr * s_zz_yzzz[j];

                s_xzz_zzzz[j] = fr * s_zz_zzzz[j];

                // leading y component

                fr = pay[j];

                s_yyy_xxxx[j] = fr * s_yy_xxxx[j] + f2t * 2.0 * s_y_xxxx[j];

                s_yyy_xxxy[j] = fr * s_yy_xxxy[j] + f2t * (2.0 * s_y_xxxy[j] + s_yy_xxx[j]);

                s_yyy_xxxz[j] = fr * s_yy_xxxz[j] + f2t * 2.0 * s_y_xxxz[j];

                s_yyy_xxyy[j] = fr * s_yy_xxyy[j] + f2t * (2.0 * s_y_xxyy[j] + 2.0 * s_yy_xxy[j]);

                s_yyy_xxyz[j] = fr * s_yy_xxyz[j] + f2t * (2.0 * s_y_xxyz[j] + s_yy_xxz[j]);

                s_yyy_xxzz[j] = fr * s_yy_xxzz[j] + f2t * 2.0 * s_y_xxzz[j];

                s_yyy_xyyy[j] = fr * s_yy_xyyy[j] + f2t * (2.0 * s_y_xyyy[j] + 3.0 * s_yy_xyy[j]);

                s_yyy_xyyz[j] = fr * s_yy_xyyz[j] + f2t * (2.0 * s_y_xyyz[j] + 2.0 * s_yy_xyz[j]);

                s_yyy_xyzz[j] = fr * s_yy_xyzz[j] + f2t * (2.0 * s_y_xyzz[j] + s_yy_xzz[j]);

                s_yyy_xzzz[j] = fr * s_yy_xzzz[j] + f2t * 2.0 * s_y_xzzz[j];

                s_yyy_yyyy[j] = fr * s_yy_yyyy[j] + f2t * (2.0 * s_y_yyyy[j] + 4.0 * s_yy_yyy[j]);

                s_yyy_yyyz[j] = fr * s_yy_yyyz[j] + f2t * (2.0 * s_y_yyyz[j] + 3.0 * s_yy_yyz[j]);

                s_yyy_yyzz[j] = fr * s_yy_yyzz[j] + f2t * (2.0 * s_y_yyzz[j] + 2.0 * s_yy_yzz[j]);

                s_yyy_yzzz[j] = fr * s_yy_yzzz[j] + f2t * (2.0 * s_y_yzzz[j] + s_yy_zzz[j]);

                s_yyy_zzzz[j] = fr * s_yy_zzzz[j] + f2t * 2.0 * s_y_zzzz[j];

                s_yyz_xxxx[j] = fr * s_yz_xxxx[j] + f2t * s_z_xxxx[j];

                s_yyz_xxxy[j] = fr * s_yz_xxxy[j] + f2t * (s_z_xxxy[j] + s_yz_xxx[j]);

                s_yyz_xxxz[j] = fr * s_yz_xxxz[j] + f2t * s_z_xxxz[j];

                s_yyz_xxyy[j] = fr * s_yz_xxyy[j] + f2t * (s_z_xxyy[j] + 2.0 * s_yz_xxy[j]);

                s_yyz_xxyz[j] = fr * s_yz_xxyz[j] + f2t * (s_z_xxyz[j] + s_yz_xxz[j]);

                s_yyz_xxzz[j] = fr * s_yz_xxzz[j] + f2t * s_z_xxzz[j];

                s_yyz_xyyy[j] = fr * s_yz_xyyy[j] + f2t * (s_z_xyyy[j] + 3.0 * s_yz_xyy[j]);

                s_yyz_xyyz[j] = fr * s_yz_xyyz[j] + f2t * (s_z_xyyz[j] + 2.0 * s_yz_xyz[j]);

                s_yyz_xyzz[j] = fr * s_yz_xyzz[j] + f2t * (s_z_xyzz[j] + s_yz_xzz[j]);

                s_yyz_xzzz[j] = fr * s_yz_xzzz[j] + f2t * s_z_xzzz[j];

                s_yyz_yyyy[j] = fr * s_yz_yyyy[j] + f2t * (s_z_yyyy[j] + 4.0 * s_yz_yyy[j]);

                s_yyz_yyyz[j] = fr * s_yz_yyyz[j] + f2t * (s_z_yyyz[j] + 3.0 * s_yz_yyz[j]);

                s_yyz_yyzz[j] = fr * s_yz_yyzz[j] + f2t * (s_z_yyzz[j] + 2.0 * s_yz_yzz[j]);

                s_yyz_yzzz[j] = fr * s_yz_yzzz[j] + f2t * (s_z_yzzz[j] + s_yz_zzz[j]);

                s_yyz_zzzz[j] = fr * s_yz_zzzz[j] + f2t * s_z_zzzz[j];

                s_yzz_xxxx[j] = fr * s_zz_xxxx[j];

                s_yzz_xxxy[j] = fr * s_zz_xxxy[j] + f2t * s_zz_xxx[j];

                s_yzz_xxxz[j] = fr * s_zz_xxxz[j];

                s_yzz_xxyy[j] = fr * s_zz_xxyy[j] + f2t * 2.0 * s_zz_xxy[j];

                s_yzz_xxyz[j] = fr * s_zz_xxyz[j] + f2t * s_zz_xxz[j];

                s_yzz_xxzz[j] = fr * s_zz_xxzz[j];

                s_yzz_xyyy[j] = fr * s_zz_xyyy[j] + f2t * 3.0 * s_zz_xyy[j];

                s_yzz_xyyz[j] = fr * s_zz_xyyz[j] + f2t * 2.0 * s_zz_xyz[j];

                s_yzz_xyzz[j] = fr * s_zz_xyzz[j] + f2t * s_zz_xzz[j];

                s_yzz_xzzz[j] = fr * s_zz_xzzz[j];

                s_yzz_yyyy[j] = fr * s_zz_yyyy[j] + f2t * 4.0 * s_zz_yyy[j];

                s_yzz_yyyz[j] = fr * s_zz_yyyz[j] + f2t * 3.0 * s_zz_yyz[j];

                s_yzz_yyzz[j] = fr * s_zz_yyzz[j] + f2t * 2.0 * s_zz_yzz[j];

                s_yzz_yzzz[j] = fr * s_zz_yzzz[j] + f2t * s_zz_zzz[j];

                s_yzz_zzzz[j] = fr * s_zz_zzzz[j];

                // leading z component

                fr = paz[j];

                s_zzz_xxxx[j] = fr * s_zz_xxxx[j] + f2t * 2.0 * s_z_xxxx[j];

                s_zzz_xxxy[j] = fr * s_zz_xxxy[j] + f2t * 2.0 * s_z_xxxy[j];

                s_zzz_xxxz[j] = fr * s_zz_xxxz[j] + f2t * (2.0 * s_z_xxxz[j] + s_zz_xxx[j]);

                s_zzz_xxyy[j] = fr * s_zz_xxyy[j] + f2t * 2.0 * s_z_xxyy[j];

                s_zzz_xxyz[j] = fr * s_zz_xxyz[j] + f2t * (2.0 * s_z_xxyz[j] + s_zz_xxy[j]);

                s_zzz_xxzz[j] = fr * s_zz_xxzz[j] + f2t * (2.0 * s_z_xxzz[j] + 2.0 * s_zz_xxz[j]);

                s_zzz_xyyy[j] = fr * s_zz_xyyy[j] + f2t * 2.0 * s_z_xyyy[j];

                s_zzz_xyyz[j] = fr * s_zz_xyyz[j] + f2t * (2.0 * s_z_xyyz[j] + s_zz_xyy[j]);

                s_zzz_xyzz[j] = fr * s_zz_xyzz[j] + f2t * (2.0 * s_z_xyzz[j] + 2.0 * s_zz_xyz[j]);

                s_zzz_xzzz[j] = fr * s_zz_xzzz[j] + f2t * (2.0 * s_z_xzzz[j] + 3.0 * s_zz_xzz[j]);

                s_zzz_yyyy[j] = fr * s_zz_yyyy[j] + f2t * 2.0 * s_z_yyyy[j];

                s_zzz_yyyz[j] = fr * s_zz_yyyz[j] + f2t * (2.0 * s_z_yyyz[j] + s_zz_yyy[j]);

                s_zzz_yyzz[j] = fr * s_zz_yyzz[j] + f2t * (2.0 * s_z_yyzz[j] + 2.0 * s_zz_yyz[j]);

                s_zzz_yzzz[j] = fr * s_zz_yzzz[j] + f2t * (2.0 * s_z_yzzz[j] + 3.0 * s_zz_yzz[j]);

                s_zzz_zzzz[j] = fr * s_zz_zzzz[j] + f2t * (2.0 * s_z_zzzz[j] + 4.0 * s_zz_zzz[j]);

                // electric dipole integrals

                // leading x component

                fr = pax[j];

                dx_xxxx_xxxx[j] = fr * dx_xxx_xxxx[j] + f2t * (3.0 * dx_xx_xxxx[j] + 4.0 * dx_xxx_xxx[j] + s_xxx_xxxx[j]);

                dy_xxxx_xxxx[j] = fr * dy_xxx_xxxx[j] + f2t * (3.0 * dy_xx_xxxx[j] + 4.0 * dy_xxx_xxx[j]);

                dz_xxxx_xxxx[j] = fr * dz_xxx_xxxx[j] + f2t * (3.0 * dz_xx_xxxx[j] + 4.0 * dz_xxx_xxx[j]);

                dx_xxxx_xxxy[j] = fr * dx_xxx_xxxy[j] + f2t * (3.0 * dx_xx_xxxy[j] + 3.0 * dx_xxx_xxy[j] + s_xxx_xxxy[j]);

                dy_xxxx_xxxy[j] = fr * dy_xxx_xxxy[j] + f2t * (3.0 * dy_xx_xxxy[j] + 3.0 * dy_xxx_xxy[j]);

                dz_xxxx_xxxy[j] = fr * dz_xxx_xxxy[j] + f2t * (3.0 * dz_xx_xxxy[j] + 3.0 * dz_xxx_xxy[j]);

                dx_xxxx_xxxz[j] = fr * dx_xxx_xxxz[j] + f2t * (3.0 * dx_xx_xxxz[j] + 3.0 * dx_xxx_xxz[j] + s_xxx_xxxz[j]);

                dy_xxxx_xxxz[j] = fr * dy_xxx_xxxz[j] + f2t * (3.0 * dy_xx_xxxz[j] + 3.0 * dy_xxx_xxz[j]);

                dz_xxxx_xxxz[j] = fr * dz_xxx_xxxz[j] + f2t * (3.0 * dz_xx_xxxz[j] + 3.0 * dz_xxx_xxz[j]);

                dx_xxxx_xxyy[j] = fr * dx_xxx_xxyy[j] + f2t * (3.0 * dx_xx_xxyy[j] + 2.0 * dx_xxx_xyy[j] + s_xxx_xxyy[j]);

                dy_xxxx_xxyy[j] = fr * dy_xxx_xxyy[j] + f2t * (3.0 * dy_xx_xxyy[j] + 2.0 * dy_xxx_xyy[j]);

                dz_xxxx_xxyy[j] = fr * dz_xxx_xxyy[j] + f2t * (3.0 * dz_xx_xxyy[j] + 2.0 * dz_xxx_xyy[j]);

                dx_xxxx_xxyz[j] = fr * dx_xxx_xxyz[j] + f2t * (3.0 * dx_xx_xxyz[j] + 2.0 * dx_xxx_xyz[j] + s_xxx_xxyz[j]);

                dy_xxxx_xxyz[j] = fr * dy_xxx_xxyz[j] + f2t * (3.0 * dy_xx_xxyz[j] + 2.0 * dy_xxx_xyz[j]);

                dz_xxxx_xxyz[j] = fr * dz_xxx_xxyz[j] + f2t * (3.0 * dz_xx_xxyz[j] + 2.0 * dz_xxx_xyz[j]);

                dx_xxxx_xxzz[j] = fr * dx_xxx_xxzz[j] + f2t * (3.0 * dx_xx_xxzz[j] + 2.0 * dx_xxx_xzz[j] + s_xxx_xxzz[j]);

                dy_xxxx_xxzz[j] = fr * dy_xxx_xxzz[j] + f2t * (3.0 * dy_xx_xxzz[j] + 2.0 * dy_xxx_xzz[j]);

                dz_xxxx_xxzz[j] = fr * dz_xxx_xxzz[j] + f2t * (3.0 * dz_xx_xxzz[j] + 2.0 * dz_xxx_xzz[j]);

                dx_xxxx_xyyy[j] = fr * dx_xxx_xyyy[j] + f2t * (3.0 * dx_xx_xyyy[j] + dx_xxx_yyy[j] + s_xxx_xyyy[j]);

                dy_xxxx_xyyy[j] = fr * dy_xxx_xyyy[j] + f2t * (3.0 * dy_xx_xyyy[j] + dy_xxx_yyy[j]);

                dz_xxxx_xyyy[j] = fr * dz_xxx_xyyy[j] + f2t * (3.0 * dz_xx_xyyy[j] + dz_xxx_yyy[j]);

                dx_xxxx_xyyz[j] = fr * dx_xxx_xyyz[j] + f2t * (3.0 * dx_xx_xyyz[j] + dx_xxx_yyz[j] + s_xxx_xyyz[j]);

                dy_xxxx_xyyz[j] = fr * dy_xxx_xyyz[j] + f2t * (3.0 * dy_xx_xyyz[j] + dy_xxx_yyz[j]);

                dz_xxxx_xyyz[j] = fr * dz_xxx_xyyz[j] + f2t * (3.0 * dz_xx_xyyz[j] + dz_xxx_yyz[j]);

                dx_xxxx_xyzz[j] = fr * dx_xxx_xyzz[j] + f2t * (3.0 * dx_xx_xyzz[j] + dx_xxx_yzz[j] + s_xxx_xyzz[j]);

                dy_xxxx_xyzz[j] = fr * dy_xxx_xyzz[j] + f2t * (3.0 * dy_xx_xyzz[j] + dy_xxx_yzz[j]);

                dz_xxxx_xyzz[j] = fr * dz_xxx_xyzz[j] + f2t * (3.0 * dz_xx_xyzz[j] + dz_xxx_yzz[j]);

                dx_xxxx_xzzz[j] = fr * dx_xxx_xzzz[j] + f2t * (3.0 * dx_xx_xzzz[j] + dx_xxx_zzz[j] + s_xxx_xzzz[j]);

                dy_xxxx_xzzz[j] = fr * dy_xxx_xzzz[j] + f2t * (3.0 * dy_xx_xzzz[j] + dy_xxx_zzz[j]);

                dz_xxxx_xzzz[j] = fr * dz_xxx_xzzz[j] + f2t * (3.0 * dz_xx_xzzz[j] + dz_xxx_zzz[j]);

                dx_xxxx_yyyy[j] = fr * dx_xxx_yyyy[j] + f2t * (3.0 * dx_xx_yyyy[j] + s_xxx_yyyy[j]);

                dy_xxxx_yyyy[j] = fr * dy_xxx_yyyy[j] + f2t * 3.0 * dy_xx_yyyy[j];

                dz_xxxx_yyyy[j] = fr * dz_xxx_yyyy[j] + f2t * 3.0 * dz_xx_yyyy[j];

                dx_xxxx_yyyz[j] = fr * dx_xxx_yyyz[j] + f2t * (3.0 * dx_xx_yyyz[j] + s_xxx_yyyz[j]);

                dy_xxxx_yyyz[j] = fr * dy_xxx_yyyz[j] + f2t * 3.0 * dy_xx_yyyz[j];

                dz_xxxx_yyyz[j] = fr * dz_xxx_yyyz[j] + f2t * 3.0 * dz_xx_yyyz[j];

                dx_xxxx_yyzz[j] = fr * dx_xxx_yyzz[j] + f2t * (3.0 * dx_xx_yyzz[j] + s_xxx_yyzz[j]);

                dy_xxxx_yyzz[j] = fr * dy_xxx_yyzz[j] + f2t * 3.0 * dy_xx_yyzz[j];

                dz_xxxx_yyzz[j] = fr * dz_xxx_yyzz[j] + f2t * 3.0 * dz_xx_yyzz[j];

                dx_xxxx_yzzz[j] = fr * dx_xxx_yzzz[j] + f2t * (3.0 * dx_xx_yzzz[j] + s_xxx_yzzz[j]);

                dy_xxxx_yzzz[j] = fr * dy_xxx_yzzz[j] + f2t * 3.0 * dy_xx_yzzz[j];

                dz_xxxx_yzzz[j] = fr * dz_xxx_yzzz[j] + f2t * 3.0 * dz_xx_yzzz[j];

                dx_xxxx_zzzz[j] = fr * dx_xxx_zzzz[j] + f2t * (3.0 * dx_xx_zzzz[j] + s_xxx_zzzz[j]);

                dy_xxxx_zzzz[j] = fr * dy_xxx_zzzz[j] + f2t * 3.0 * dy_xx_zzzz[j];

                dz_xxxx_zzzz[j] = fr * dz_xxx_zzzz[j] + f2t * 3.0 * dz_xx_zzzz[j];

                dx_xxxy_xxxx[j] = fr * dx_xxy_xxxx[j] + f2t * (2.0 * dx_xy_xxxx[j] + 4.0 * dx_xxy_xxx[j] + s_xxy_xxxx[j]);

                dy_xxxy_xxxx[j] = fr * dy_xxy_xxxx[j] + f2t * (2.0 * dy_xy_xxxx[j] + 4.0 * dy_xxy_xxx[j]);

                dz_xxxy_xxxx[j] = fr * dz_xxy_xxxx[j] + f2t * (2.0 * dz_xy_xxxx[j] + 4.0 * dz_xxy_xxx[j]);

                dx_xxxy_xxxy[j] = fr * dx_xxy_xxxy[j] + f2t * (2.0 * dx_xy_xxxy[j] + 3.0 * dx_xxy_xxy[j] + s_xxy_xxxy[j]);

                dy_xxxy_xxxy[j] = fr * dy_xxy_xxxy[j] + f2t * (2.0 * dy_xy_xxxy[j] + 3.0 * dy_xxy_xxy[j]);

                dz_xxxy_xxxy[j] = fr * dz_xxy_xxxy[j] + f2t * (2.0 * dz_xy_xxxy[j] + 3.0 * dz_xxy_xxy[j]);

                dx_xxxy_xxxz[j] = fr * dx_xxy_xxxz[j] + f2t * (2.0 * dx_xy_xxxz[j] + 3.0 * dx_xxy_xxz[j] + s_xxy_xxxz[j]);

                dy_xxxy_xxxz[j] = fr * dy_xxy_xxxz[j] + f2t * (2.0 * dy_xy_xxxz[j] + 3.0 * dy_xxy_xxz[j]);

                dz_xxxy_xxxz[j] = fr * dz_xxy_xxxz[j] + f2t * (2.0 * dz_xy_xxxz[j] + 3.0 * dz_xxy_xxz[j]);

                dx_xxxy_xxyy[j] = fr * dx_xxy_xxyy[j] + f2t * (2.0 * dx_xy_xxyy[j] + 2.0 * dx_xxy_xyy[j] + s_xxy_xxyy[j]);

                dy_xxxy_xxyy[j] = fr * dy_xxy_xxyy[j] + f2t * (2.0 * dy_xy_xxyy[j] + 2.0 * dy_xxy_xyy[j]);

                dz_xxxy_xxyy[j] = fr * dz_xxy_xxyy[j] + f2t * (2.0 * dz_xy_xxyy[j] + 2.0 * dz_xxy_xyy[j]);

                dx_xxxy_xxyz[j] = fr * dx_xxy_xxyz[j] + f2t * (2.0 * dx_xy_xxyz[j] + 2.0 * dx_xxy_xyz[j] + s_xxy_xxyz[j]);

                dy_xxxy_xxyz[j] = fr * dy_xxy_xxyz[j] + f2t * (2.0 * dy_xy_xxyz[j] + 2.0 * dy_xxy_xyz[j]);

                dz_xxxy_xxyz[j] = fr * dz_xxy_xxyz[j] + f2t * (2.0 * dz_xy_xxyz[j] + 2.0 * dz_xxy_xyz[j]);

                dx_xxxy_xxzz[j] = fr * dx_xxy_xxzz[j] + f2t * (2.0 * dx_xy_xxzz[j] + 2.0 * dx_xxy_xzz[j] + s_xxy_xxzz[j]);

                dy_xxxy_xxzz[j] = fr * dy_xxy_xxzz[j] + f2t * (2.0 * dy_xy_xxzz[j] + 2.0 * dy_xxy_xzz[j]);

                dz_xxxy_xxzz[j] = fr * dz_xxy_xxzz[j] + f2t * (2.0 * dz_xy_xxzz[j] + 2.0 * dz_xxy_xzz[j]);

                dx_xxxy_xyyy[j] = fr * dx_xxy_xyyy[j] + f2t * (2.0 * dx_xy_xyyy[j] + dx_xxy_yyy[j] + s_xxy_xyyy[j]);

                dy_xxxy_xyyy[j] = fr * dy_xxy_xyyy[j] + f2t * (2.0 * dy_xy_xyyy[j] + dy_xxy_yyy[j]);

                dz_xxxy_xyyy[j] = fr * dz_xxy_xyyy[j] + f2t * (2.0 * dz_xy_xyyy[j] + dz_xxy_yyy[j]);

                dx_xxxy_xyyz[j] = fr * dx_xxy_xyyz[j] + f2t * (2.0 * dx_xy_xyyz[j] + dx_xxy_yyz[j] + s_xxy_xyyz[j]);

                dy_xxxy_xyyz[j] = fr * dy_xxy_xyyz[j] + f2t * (2.0 * dy_xy_xyyz[j] + dy_xxy_yyz[j]);

                dz_xxxy_xyyz[j] = fr * dz_xxy_xyyz[j] + f2t * (2.0 * dz_xy_xyyz[j] + dz_xxy_yyz[j]);

                dx_xxxy_xyzz[j] = fr * dx_xxy_xyzz[j] + f2t * (2.0 * dx_xy_xyzz[j] + dx_xxy_yzz[j] + s_xxy_xyzz[j]);

                dy_xxxy_xyzz[j] = fr * dy_xxy_xyzz[j] + f2t * (2.0 * dy_xy_xyzz[j] + dy_xxy_yzz[j]);

                dz_xxxy_xyzz[j] = fr * dz_xxy_xyzz[j] + f2t * (2.0 * dz_xy_xyzz[j] + dz_xxy_yzz[j]);

                dx_xxxy_xzzz[j] = fr * dx_xxy_xzzz[j] + f2t * (2.0 * dx_xy_xzzz[j] + dx_xxy_zzz[j] + s_xxy_xzzz[j]);

                dy_xxxy_xzzz[j] = fr * dy_xxy_xzzz[j] + f2t * (2.0 * dy_xy_xzzz[j] + dy_xxy_zzz[j]);

                dz_xxxy_xzzz[j] = fr * dz_xxy_xzzz[j] + f2t * (2.0 * dz_xy_xzzz[j] + dz_xxy_zzz[j]);

                dx_xxxy_yyyy[j] = fr * dx_xxy_yyyy[j] + f2t * (2.0 * dx_xy_yyyy[j] + s_xxy_yyyy[j]);

                dy_xxxy_yyyy[j] = fr * dy_xxy_yyyy[j] + f2t * 2.0 * dy_xy_yyyy[j];

                dz_xxxy_yyyy[j] = fr * dz_xxy_yyyy[j] + f2t * 2.0 * dz_xy_yyyy[j];

                dx_xxxy_yyyz[j] = fr * dx_xxy_yyyz[j] + f2t * (2.0 * dx_xy_yyyz[j] + s_xxy_yyyz[j]);

                dy_xxxy_yyyz[j] = fr * dy_xxy_yyyz[j] + f2t * 2.0 * dy_xy_yyyz[j];

                dz_xxxy_yyyz[j] = fr * dz_xxy_yyyz[j] + f2t * 2.0 * dz_xy_yyyz[j];

                dx_xxxy_yyzz[j] = fr * dx_xxy_yyzz[j] + f2t * (2.0 * dx_xy_yyzz[j] + s_xxy_yyzz[j]);

                dy_xxxy_yyzz[j] = fr * dy_xxy_yyzz[j] + f2t * 2.0 * dy_xy_yyzz[j];

                dz_xxxy_yyzz[j] = fr * dz_xxy_yyzz[j] + f2t * 2.0 * dz_xy_yyzz[j];

                dx_xxxy_yzzz[j] = fr * dx_xxy_yzzz[j] + f2t * (2.0 * dx_xy_yzzz[j] + s_xxy_yzzz[j]);

                dy_xxxy_yzzz[j] = fr * dy_xxy_yzzz[j] + f2t * 2.0 * dy_xy_yzzz[j];

                dz_xxxy_yzzz[j] = fr * dz_xxy_yzzz[j] + f2t * 2.0 * dz_xy_yzzz[j];

                dx_xxxy_zzzz[j] = fr * dx_xxy_zzzz[j] + f2t * (2.0 * dx_xy_zzzz[j] + s_xxy_zzzz[j]);

                dy_xxxy_zzzz[j] = fr * dy_xxy_zzzz[j] + f2t * 2.0 * dy_xy_zzzz[j];

                dz_xxxy_zzzz[j] = fr * dz_xxy_zzzz[j] + f2t * 2.0 * dz_xy_zzzz[j];

                dx_xxxz_xxxx[j] = fr * dx_xxz_xxxx[j] + f2t * (2.0 * dx_xz_xxxx[j] + 4.0 * dx_xxz_xxx[j] + s_xxz_xxxx[j]);

                dy_xxxz_xxxx[j] = fr * dy_xxz_xxxx[j] + f2t * (2.0 * dy_xz_xxxx[j] + 4.0 * dy_xxz_xxx[j]);

                dz_xxxz_xxxx[j] = fr * dz_xxz_xxxx[j] + f2t * (2.0 * dz_xz_xxxx[j] + 4.0 * dz_xxz_xxx[j]);

                dx_xxxz_xxxy[j] = fr * dx_xxz_xxxy[j] + f2t * (2.0 * dx_xz_xxxy[j] + 3.0 * dx_xxz_xxy[j] + s_xxz_xxxy[j]);

                dy_xxxz_xxxy[j] = fr * dy_xxz_xxxy[j] + f2t * (2.0 * dy_xz_xxxy[j] + 3.0 * dy_xxz_xxy[j]);

                dz_xxxz_xxxy[j] = fr * dz_xxz_xxxy[j] + f2t * (2.0 * dz_xz_xxxy[j] + 3.0 * dz_xxz_xxy[j]);

                dx_xxxz_xxxz[j] = fr * dx_xxz_xxxz[j] + f2t * (2.0 * dx_xz_xxxz[j] + 3.0 * dx_xxz_xxz[j] + s_xxz_xxxz[j]);

                dy_xxxz_xxxz[j] = fr * dy_xxz_xxxz[j] + f2t * (2.0 * dy_xz_xxxz[j] + 3.0 * dy_xxz_xxz[j]);

                dz_xxxz_xxxz[j] = fr * dz_xxz_xxxz[j] + f2t * (2.0 * dz_xz_xxxz[j] + 3.0 * dz_xxz_xxz[j]);

                dx_xxxz_xxyy[j] = fr * dx_xxz_xxyy[j] + f2t * (2.0 * dx_xz_xxyy[j] + 2.0 * dx_xxz_xyy[j] + s_xxz_xxyy[j]);

                dy_xxxz_xxyy[j] = fr * dy_xxz_xxyy[j] + f2t * (2.0 * dy_xz_xxyy[j] + 2.0 * dy_xxz_xyy[j]);

                dz_xxxz_xxyy[j] = fr * dz_xxz_xxyy[j] + f2t * (2.0 * dz_xz_xxyy[j] + 2.0 * dz_xxz_xyy[j]);

                dx_xxxz_xxyz[j] = fr * dx_xxz_xxyz[j] + f2t * (2.0 * dx_xz_xxyz[j] + 2.0 * dx_xxz_xyz[j] + s_xxz_xxyz[j]);

                dy_xxxz_xxyz[j] = fr * dy_xxz_xxyz[j] + f2t * (2.0 * dy_xz_xxyz[j] + 2.0 * dy_xxz_xyz[j]);

                dz_xxxz_xxyz[j] = fr * dz_xxz_xxyz[j] + f2t * (2.0 * dz_xz_xxyz[j] + 2.0 * dz_xxz_xyz[j]);

                dx_xxxz_xxzz[j] = fr * dx_xxz_xxzz[j] + f2t * (2.0 * dx_xz_xxzz[j] + 2.0 * dx_xxz_xzz[j] + s_xxz_xxzz[j]);

                dy_xxxz_xxzz[j] = fr * dy_xxz_xxzz[j] + f2t * (2.0 * dy_xz_xxzz[j] + 2.0 * dy_xxz_xzz[j]);

                dz_xxxz_xxzz[j] = fr * dz_xxz_xxzz[j] + f2t * (2.0 * dz_xz_xxzz[j] + 2.0 * dz_xxz_xzz[j]);

                dx_xxxz_xyyy[j] = fr * dx_xxz_xyyy[j] + f2t * (2.0 * dx_xz_xyyy[j] + dx_xxz_yyy[j] + s_xxz_xyyy[j]);

                dy_xxxz_xyyy[j] = fr * dy_xxz_xyyy[j] + f2t * (2.0 * dy_xz_xyyy[j] + dy_xxz_yyy[j]);

                dz_xxxz_xyyy[j] = fr * dz_xxz_xyyy[j] + f2t * (2.0 * dz_xz_xyyy[j] + dz_xxz_yyy[j]);

                dx_xxxz_xyyz[j] = fr * dx_xxz_xyyz[j] + f2t * (2.0 * dx_xz_xyyz[j] + dx_xxz_yyz[j] + s_xxz_xyyz[j]);

                dy_xxxz_xyyz[j] = fr * dy_xxz_xyyz[j] + f2t * (2.0 * dy_xz_xyyz[j] + dy_xxz_yyz[j]);

                dz_xxxz_xyyz[j] = fr * dz_xxz_xyyz[j] + f2t * (2.0 * dz_xz_xyyz[j] + dz_xxz_yyz[j]);

                dx_xxxz_xyzz[j] = fr * dx_xxz_xyzz[j] + f2t * (2.0 * dx_xz_xyzz[j] + dx_xxz_yzz[j] + s_xxz_xyzz[j]);

                dy_xxxz_xyzz[j] = fr * dy_xxz_xyzz[j] + f2t * (2.0 * dy_xz_xyzz[j] + dy_xxz_yzz[j]);

                dz_xxxz_xyzz[j] = fr * dz_xxz_xyzz[j] + f2t * (2.0 * dz_xz_xyzz[j] + dz_xxz_yzz[j]);

                dx_xxxz_xzzz[j] = fr * dx_xxz_xzzz[j] + f2t * (2.0 * dx_xz_xzzz[j] + dx_xxz_zzz[j] + s_xxz_xzzz[j]);

                dy_xxxz_xzzz[j] = fr * dy_xxz_xzzz[j] + f2t * (2.0 * dy_xz_xzzz[j] + dy_xxz_zzz[j]);

                dz_xxxz_xzzz[j] = fr * dz_xxz_xzzz[j] + f2t * (2.0 * dz_xz_xzzz[j] + dz_xxz_zzz[j]);

                dx_xxxz_yyyy[j] = fr * dx_xxz_yyyy[j] + f2t * (2.0 * dx_xz_yyyy[j] + s_xxz_yyyy[j]);

                dy_xxxz_yyyy[j] = fr * dy_xxz_yyyy[j] + f2t * 2.0 * dy_xz_yyyy[j];

                dz_xxxz_yyyy[j] = fr * dz_xxz_yyyy[j] + f2t * 2.0 * dz_xz_yyyy[j];

                dx_xxxz_yyyz[j] = fr * dx_xxz_yyyz[j] + f2t * (2.0 * dx_xz_yyyz[j] + s_xxz_yyyz[j]);

                dy_xxxz_yyyz[j] = fr * dy_xxz_yyyz[j] + f2t * 2.0 * dy_xz_yyyz[j];

                dz_xxxz_yyyz[j] = fr * dz_xxz_yyyz[j] + f2t * 2.0 * dz_xz_yyyz[j];

                dx_xxxz_yyzz[j] = fr * dx_xxz_yyzz[j] + f2t * (2.0 * dx_xz_yyzz[j] + s_xxz_yyzz[j]);

                dy_xxxz_yyzz[j] = fr * dy_xxz_yyzz[j] + f2t * 2.0 * dy_xz_yyzz[j];

                dz_xxxz_yyzz[j] = fr * dz_xxz_yyzz[j] + f2t * 2.0 * dz_xz_yyzz[j];

                dx_xxxz_yzzz[j] = fr * dx_xxz_yzzz[j] + f2t * (2.0 * dx_xz_yzzz[j] + s_xxz_yzzz[j]);

                dy_xxxz_yzzz[j] = fr * dy_xxz_yzzz[j] + f2t * 2.0 * dy_xz_yzzz[j];

                dz_xxxz_yzzz[j] = fr * dz_xxz_yzzz[j] + f2t * 2.0 * dz_xz_yzzz[j];

                dx_xxxz_zzzz[j] = fr * dx_xxz_zzzz[j] + f2t * (2.0 * dx_xz_zzzz[j] + s_xxz_zzzz[j]);

                dy_xxxz_zzzz[j] = fr * dy_xxz_zzzz[j] + f2t * 2.0 * dy_xz_zzzz[j];

                dz_xxxz_zzzz[j] = fr * dz_xxz_zzzz[j] + f2t * 2.0 * dz_xz_zzzz[j];

                dx_xxyy_xxxx[j] = fr * dx_xyy_xxxx[j] + f2t * (dx_yy_xxxx[j] + 4.0 * dx_xyy_xxx[j] + s_xyy_xxxx[j]);

                dy_xxyy_xxxx[j] = fr * dy_xyy_xxxx[j] + f2t * (dy_yy_xxxx[j] + 4.0 * dy_xyy_xxx[j]);

                dz_xxyy_xxxx[j] = fr * dz_xyy_xxxx[j] + f2t * (dz_yy_xxxx[j] + 4.0 * dz_xyy_xxx[j]);

                dx_xxyy_xxxy[j] = fr * dx_xyy_xxxy[j] + f2t * (dx_yy_xxxy[j] + 3.0 * dx_xyy_xxy[j] + s_xyy_xxxy[j]);

                dy_xxyy_xxxy[j] = fr * dy_xyy_xxxy[j] + f2t * (dy_yy_xxxy[j] + 3.0 * dy_xyy_xxy[j]);

                dz_xxyy_xxxy[j] = fr * dz_xyy_xxxy[j] + f2t * (dz_yy_xxxy[j] + 3.0 * dz_xyy_xxy[j]);

                dx_xxyy_xxxz[j] = fr * dx_xyy_xxxz[j] + f2t * (dx_yy_xxxz[j] + 3.0 * dx_xyy_xxz[j] + s_xyy_xxxz[j]);

                dy_xxyy_xxxz[j] = fr * dy_xyy_xxxz[j] + f2t * (dy_yy_xxxz[j] + 3.0 * dy_xyy_xxz[j]);

                dz_xxyy_xxxz[j] = fr * dz_xyy_xxxz[j] + f2t * (dz_yy_xxxz[j] + 3.0 * dz_xyy_xxz[j]);

                dx_xxyy_xxyy[j] = fr * dx_xyy_xxyy[j] + f2t * (dx_yy_xxyy[j] + 2.0 * dx_xyy_xyy[j] + s_xyy_xxyy[j]);

                dy_xxyy_xxyy[j] = fr * dy_xyy_xxyy[j] + f2t * (dy_yy_xxyy[j] + 2.0 * dy_xyy_xyy[j]);

                dz_xxyy_xxyy[j] = fr * dz_xyy_xxyy[j] + f2t * (dz_yy_xxyy[j] + 2.0 * dz_xyy_xyy[j]);

                dx_xxyy_xxyz[j] = fr * dx_xyy_xxyz[j] + f2t * (dx_yy_xxyz[j] + 2.0 * dx_xyy_xyz[j] + s_xyy_xxyz[j]);

                dy_xxyy_xxyz[j] = fr * dy_xyy_xxyz[j] + f2t * (dy_yy_xxyz[j] + 2.0 * dy_xyy_xyz[j]);

                dz_xxyy_xxyz[j] = fr * dz_xyy_xxyz[j] + f2t * (dz_yy_xxyz[j] + 2.0 * dz_xyy_xyz[j]);

                dx_xxyy_xxzz[j] = fr * dx_xyy_xxzz[j] + f2t * (dx_yy_xxzz[j] + 2.0 * dx_xyy_xzz[j] + s_xyy_xxzz[j]);

                dy_xxyy_xxzz[j] = fr * dy_xyy_xxzz[j] + f2t * (dy_yy_xxzz[j] + 2.0 * dy_xyy_xzz[j]);

                dz_xxyy_xxzz[j] = fr * dz_xyy_xxzz[j] + f2t * (dz_yy_xxzz[j] + 2.0 * dz_xyy_xzz[j]);

                dx_xxyy_xyyy[j] = fr * dx_xyy_xyyy[j] + f2t * (dx_yy_xyyy[j] + dx_xyy_yyy[j] + s_xyy_xyyy[j]);

                dy_xxyy_xyyy[j] = fr * dy_xyy_xyyy[j] + f2t * (dy_yy_xyyy[j] + dy_xyy_yyy[j]);

                dz_xxyy_xyyy[j] = fr * dz_xyy_xyyy[j] + f2t * (dz_yy_xyyy[j] + dz_xyy_yyy[j]);

                dx_xxyy_xyyz[j] = fr * dx_xyy_xyyz[j] + f2t * (dx_yy_xyyz[j] + dx_xyy_yyz[j] + s_xyy_xyyz[j]);

                dy_xxyy_xyyz[j] = fr * dy_xyy_xyyz[j] + f2t * (dy_yy_xyyz[j] + dy_xyy_yyz[j]);

                dz_xxyy_xyyz[j] = fr * dz_xyy_xyyz[j] + f2t * (dz_yy_xyyz[j] + dz_xyy_yyz[j]);

                dx_xxyy_xyzz[j] = fr * dx_xyy_xyzz[j] + f2t * (dx_yy_xyzz[j] + dx_xyy_yzz[j] + s_xyy_xyzz[j]);

                dy_xxyy_xyzz[j] = fr * dy_xyy_xyzz[j] + f2t * (dy_yy_xyzz[j] + dy_xyy_yzz[j]);

                dz_xxyy_xyzz[j] = fr * dz_xyy_xyzz[j] + f2t * (dz_yy_xyzz[j] + dz_xyy_yzz[j]);

                dx_xxyy_xzzz[j] = fr * dx_xyy_xzzz[j] + f2t * (dx_yy_xzzz[j] + dx_xyy_zzz[j] + s_xyy_xzzz[j]);

                dy_xxyy_xzzz[j] = fr * dy_xyy_xzzz[j] + f2t * (dy_yy_xzzz[j] + dy_xyy_zzz[j]);

                dz_xxyy_xzzz[j] = fr * dz_xyy_xzzz[j] + f2t * (dz_yy_xzzz[j] + dz_xyy_zzz[j]);

                dx_xxyy_yyyy[j] = fr * dx_xyy_yyyy[j] + f2t * (dx_yy_yyyy[j] + s_xyy_yyyy[j]);

                dy_xxyy_yyyy[j] = fr * dy_xyy_yyyy[j] + f2t * dy_yy_yyyy[j];

                dz_xxyy_yyyy[j] = fr * dz_xyy_yyyy[j] + f2t * dz_yy_yyyy[j];

                dx_xxyy_yyyz[j] = fr * dx_xyy_yyyz[j] + f2t * (dx_yy_yyyz[j] + s_xyy_yyyz[j]);

                dy_xxyy_yyyz[j] = fr * dy_xyy_yyyz[j] + f2t * dy_yy_yyyz[j];

                dz_xxyy_yyyz[j] = fr * dz_xyy_yyyz[j] + f2t * dz_yy_yyyz[j];

                dx_xxyy_yyzz[j] = fr * dx_xyy_yyzz[j] + f2t * (dx_yy_yyzz[j] + s_xyy_yyzz[j]);

                dy_xxyy_yyzz[j] = fr * dy_xyy_yyzz[j] + f2t * dy_yy_yyzz[j];

                dz_xxyy_yyzz[j] = fr * dz_xyy_yyzz[j] + f2t * dz_yy_yyzz[j];

                dx_xxyy_yzzz[j] = fr * dx_xyy_yzzz[j] + f2t * (dx_yy_yzzz[j] + s_xyy_yzzz[j]);

                dy_xxyy_yzzz[j] = fr * dy_xyy_yzzz[j] + f2t * dy_yy_yzzz[j];

                dz_xxyy_yzzz[j] = fr * dz_xyy_yzzz[j] + f2t * dz_yy_yzzz[j];

                dx_xxyy_zzzz[j] = fr * dx_xyy_zzzz[j] + f2t * (dx_yy_zzzz[j] + s_xyy_zzzz[j]);

                dy_xxyy_zzzz[j] = fr * dy_xyy_zzzz[j] + f2t * dy_yy_zzzz[j];

                dz_xxyy_zzzz[j] = fr * dz_xyy_zzzz[j] + f2t * dz_yy_zzzz[j];

                dx_xxyz_xxxx[j] = fr * dx_xyz_xxxx[j] + f2t * (dx_yz_xxxx[j] + 4.0 * dx_xyz_xxx[j] + s_xyz_xxxx[j]);

                dy_xxyz_xxxx[j] = fr * dy_xyz_xxxx[j] + f2t * (dy_yz_xxxx[j] + 4.0 * dy_xyz_xxx[j]);

                dz_xxyz_xxxx[j] = fr * dz_xyz_xxxx[j] + f2t * (dz_yz_xxxx[j] + 4.0 * dz_xyz_xxx[j]);

                dx_xxyz_xxxy[j] = fr * dx_xyz_xxxy[j] + f2t * (dx_yz_xxxy[j] + 3.0 * dx_xyz_xxy[j] + s_xyz_xxxy[j]);

                dy_xxyz_xxxy[j] = fr * dy_xyz_xxxy[j] + f2t * (dy_yz_xxxy[j] + 3.0 * dy_xyz_xxy[j]);

                dz_xxyz_xxxy[j] = fr * dz_xyz_xxxy[j] + f2t * (dz_yz_xxxy[j] + 3.0 * dz_xyz_xxy[j]);

                dx_xxyz_xxxz[j] = fr * dx_xyz_xxxz[j] + f2t * (dx_yz_xxxz[j] + 3.0 * dx_xyz_xxz[j] + s_xyz_xxxz[j]);

                dy_xxyz_xxxz[j] = fr * dy_xyz_xxxz[j] + f2t * (dy_yz_xxxz[j] + 3.0 * dy_xyz_xxz[j]);

                dz_xxyz_xxxz[j] = fr * dz_xyz_xxxz[j] + f2t * (dz_yz_xxxz[j] + 3.0 * dz_xyz_xxz[j]);

                dx_xxyz_xxyy[j] = fr * dx_xyz_xxyy[j] + f2t * (dx_yz_xxyy[j] + 2.0 * dx_xyz_xyy[j] + s_xyz_xxyy[j]);

                dy_xxyz_xxyy[j] = fr * dy_xyz_xxyy[j] + f2t * (dy_yz_xxyy[j] + 2.0 * dy_xyz_xyy[j]);

                dz_xxyz_xxyy[j] = fr * dz_xyz_xxyy[j] + f2t * (dz_yz_xxyy[j] + 2.0 * dz_xyz_xyy[j]);

                dx_xxyz_xxyz[j] = fr * dx_xyz_xxyz[j] + f2t * (dx_yz_xxyz[j] + 2.0 * dx_xyz_xyz[j] + s_xyz_xxyz[j]);

                dy_xxyz_xxyz[j] = fr * dy_xyz_xxyz[j] + f2t * (dy_yz_xxyz[j] + 2.0 * dy_xyz_xyz[j]);

                dz_xxyz_xxyz[j] = fr * dz_xyz_xxyz[j] + f2t * (dz_yz_xxyz[j] + 2.0 * dz_xyz_xyz[j]);

                dx_xxyz_xxzz[j] = fr * dx_xyz_xxzz[j] + f2t * (dx_yz_xxzz[j] + 2.0 * dx_xyz_xzz[j] + s_xyz_xxzz[j]);

                dy_xxyz_xxzz[j] = fr * dy_xyz_xxzz[j] + f2t * (dy_yz_xxzz[j] + 2.0 * dy_xyz_xzz[j]);

                dz_xxyz_xxzz[j] = fr * dz_xyz_xxzz[j] + f2t * (dz_yz_xxzz[j] + 2.0 * dz_xyz_xzz[j]);

                dx_xxyz_xyyy[j] = fr * dx_xyz_xyyy[j] + f2t * (dx_yz_xyyy[j] + dx_xyz_yyy[j] + s_xyz_xyyy[j]);

                dy_xxyz_xyyy[j] = fr * dy_xyz_xyyy[j] + f2t * (dy_yz_xyyy[j] + dy_xyz_yyy[j]);

                dz_xxyz_xyyy[j] = fr * dz_xyz_xyyy[j] + f2t * (dz_yz_xyyy[j] + dz_xyz_yyy[j]);

                dx_xxyz_xyyz[j] = fr * dx_xyz_xyyz[j] + f2t * (dx_yz_xyyz[j] + dx_xyz_yyz[j] + s_xyz_xyyz[j]);

                dy_xxyz_xyyz[j] = fr * dy_xyz_xyyz[j] + f2t * (dy_yz_xyyz[j] + dy_xyz_yyz[j]);

                dz_xxyz_xyyz[j] = fr * dz_xyz_xyyz[j] + f2t * (dz_yz_xyyz[j] + dz_xyz_yyz[j]);

                dx_xxyz_xyzz[j] = fr * dx_xyz_xyzz[j] + f2t * (dx_yz_xyzz[j] + dx_xyz_yzz[j] + s_xyz_xyzz[j]);

                dy_xxyz_xyzz[j] = fr * dy_xyz_xyzz[j] + f2t * (dy_yz_xyzz[j] + dy_xyz_yzz[j]);

                dz_xxyz_xyzz[j] = fr * dz_xyz_xyzz[j] + f2t * (dz_yz_xyzz[j] + dz_xyz_yzz[j]);

                dx_xxyz_xzzz[j] = fr * dx_xyz_xzzz[j] + f2t * (dx_yz_xzzz[j] + dx_xyz_zzz[j] + s_xyz_xzzz[j]);

                dy_xxyz_xzzz[j] = fr * dy_xyz_xzzz[j] + f2t * (dy_yz_xzzz[j] + dy_xyz_zzz[j]);

                dz_xxyz_xzzz[j] = fr * dz_xyz_xzzz[j] + f2t * (dz_yz_xzzz[j] + dz_xyz_zzz[j]);

                dx_xxyz_yyyy[j] = fr * dx_xyz_yyyy[j] + f2t * (dx_yz_yyyy[j] + s_xyz_yyyy[j]);

                dy_xxyz_yyyy[j] = fr * dy_xyz_yyyy[j] + f2t * dy_yz_yyyy[j];

                dz_xxyz_yyyy[j] = fr * dz_xyz_yyyy[j] + f2t * dz_yz_yyyy[j];

                dx_xxyz_yyyz[j] = fr * dx_xyz_yyyz[j] + f2t * (dx_yz_yyyz[j] + s_xyz_yyyz[j]);

                dy_xxyz_yyyz[j] = fr * dy_xyz_yyyz[j] + f2t * dy_yz_yyyz[j];

                dz_xxyz_yyyz[j] = fr * dz_xyz_yyyz[j] + f2t * dz_yz_yyyz[j];

                dx_xxyz_yyzz[j] = fr * dx_xyz_yyzz[j] + f2t * (dx_yz_yyzz[j] + s_xyz_yyzz[j]);

                dy_xxyz_yyzz[j] = fr * dy_xyz_yyzz[j] + f2t * dy_yz_yyzz[j];

                dz_xxyz_yyzz[j] = fr * dz_xyz_yyzz[j] + f2t * dz_yz_yyzz[j];

                dx_xxyz_yzzz[j] = fr * dx_xyz_yzzz[j] + f2t * (dx_yz_yzzz[j] + s_xyz_yzzz[j]);

                dy_xxyz_yzzz[j] = fr * dy_xyz_yzzz[j] + f2t * dy_yz_yzzz[j];

                dz_xxyz_yzzz[j] = fr * dz_xyz_yzzz[j] + f2t * dz_yz_yzzz[j];

                dx_xxyz_zzzz[j] = fr * dx_xyz_zzzz[j] + f2t * (dx_yz_zzzz[j] + s_xyz_zzzz[j]);

                dy_xxyz_zzzz[j] = fr * dy_xyz_zzzz[j] + f2t * dy_yz_zzzz[j];

                dz_xxyz_zzzz[j] = fr * dz_xyz_zzzz[j] + f2t * dz_yz_zzzz[j];

                dx_xxzz_xxxx[j] = fr * dx_xzz_xxxx[j] + f2t * (dx_zz_xxxx[j] + 4.0 * dx_xzz_xxx[j] + s_xzz_xxxx[j]);

                dy_xxzz_xxxx[j] = fr * dy_xzz_xxxx[j] + f2t * (dy_zz_xxxx[j] + 4.0 * dy_xzz_xxx[j]);

                dz_xxzz_xxxx[j] = fr * dz_xzz_xxxx[j] + f2t * (dz_zz_xxxx[j] + 4.0 * dz_xzz_xxx[j]);

                dx_xxzz_xxxy[j] = fr * dx_xzz_xxxy[j] + f2t * (dx_zz_xxxy[j] + 3.0 * dx_xzz_xxy[j] + s_xzz_xxxy[j]);

                dy_xxzz_xxxy[j] = fr * dy_xzz_xxxy[j] + f2t * (dy_zz_xxxy[j] + 3.0 * dy_xzz_xxy[j]);

                dz_xxzz_xxxy[j] = fr * dz_xzz_xxxy[j] + f2t * (dz_zz_xxxy[j] + 3.0 * dz_xzz_xxy[j]);

                dx_xxzz_xxxz[j] = fr * dx_xzz_xxxz[j] + f2t * (dx_zz_xxxz[j] + 3.0 * dx_xzz_xxz[j] + s_xzz_xxxz[j]);

                dy_xxzz_xxxz[j] = fr * dy_xzz_xxxz[j] + f2t * (dy_zz_xxxz[j] + 3.0 * dy_xzz_xxz[j]);

                dz_xxzz_xxxz[j] = fr * dz_xzz_xxxz[j] + f2t * (dz_zz_xxxz[j] + 3.0 * dz_xzz_xxz[j]);

                dx_xxzz_xxyy[j] = fr * dx_xzz_xxyy[j] + f2t * (dx_zz_xxyy[j] + 2.0 * dx_xzz_xyy[j] + s_xzz_xxyy[j]);

                dy_xxzz_xxyy[j] = fr * dy_xzz_xxyy[j] + f2t * (dy_zz_xxyy[j] + 2.0 * dy_xzz_xyy[j]);

                dz_xxzz_xxyy[j] = fr * dz_xzz_xxyy[j] + f2t * (dz_zz_xxyy[j] + 2.0 * dz_xzz_xyy[j]);

                dx_xxzz_xxyz[j] = fr * dx_xzz_xxyz[j] + f2t * (dx_zz_xxyz[j] + 2.0 * dx_xzz_xyz[j] + s_xzz_xxyz[j]);

                dy_xxzz_xxyz[j] = fr * dy_xzz_xxyz[j] + f2t * (dy_zz_xxyz[j] + 2.0 * dy_xzz_xyz[j]);

                dz_xxzz_xxyz[j] = fr * dz_xzz_xxyz[j] + f2t * (dz_zz_xxyz[j] + 2.0 * dz_xzz_xyz[j]);

                dx_xxzz_xxzz[j] = fr * dx_xzz_xxzz[j] + f2t * (dx_zz_xxzz[j] + 2.0 * dx_xzz_xzz[j] + s_xzz_xxzz[j]);

                dy_xxzz_xxzz[j] = fr * dy_xzz_xxzz[j] + f2t * (dy_zz_xxzz[j] + 2.0 * dy_xzz_xzz[j]);

                dz_xxzz_xxzz[j] = fr * dz_xzz_xxzz[j] + f2t * (dz_zz_xxzz[j] + 2.0 * dz_xzz_xzz[j]);

                dx_xxzz_xyyy[j] = fr * dx_xzz_xyyy[j] + f2t * (dx_zz_xyyy[j] + dx_xzz_yyy[j] + s_xzz_xyyy[j]);

                dy_xxzz_xyyy[j] = fr * dy_xzz_xyyy[j] + f2t * (dy_zz_xyyy[j] + dy_xzz_yyy[j]);

                dz_xxzz_xyyy[j] = fr * dz_xzz_xyyy[j] + f2t * (dz_zz_xyyy[j] + dz_xzz_yyy[j]);

                dx_xxzz_xyyz[j] = fr * dx_xzz_xyyz[j] + f2t * (dx_zz_xyyz[j] + dx_xzz_yyz[j] + s_xzz_xyyz[j]);

                dy_xxzz_xyyz[j] = fr * dy_xzz_xyyz[j] + f2t * (dy_zz_xyyz[j] + dy_xzz_yyz[j]);

                dz_xxzz_xyyz[j] = fr * dz_xzz_xyyz[j] + f2t * (dz_zz_xyyz[j] + dz_xzz_yyz[j]);

                dx_xxzz_xyzz[j] = fr * dx_xzz_xyzz[j] + f2t * (dx_zz_xyzz[j] + dx_xzz_yzz[j] + s_xzz_xyzz[j]);

                dy_xxzz_xyzz[j] = fr * dy_xzz_xyzz[j] + f2t * (dy_zz_xyzz[j] + dy_xzz_yzz[j]);

                dz_xxzz_xyzz[j] = fr * dz_xzz_xyzz[j] + f2t * (dz_zz_xyzz[j] + dz_xzz_yzz[j]);

                dx_xxzz_xzzz[j] = fr * dx_xzz_xzzz[j] + f2t * (dx_zz_xzzz[j] + dx_xzz_zzz[j] + s_xzz_xzzz[j]);

                dy_xxzz_xzzz[j] = fr * dy_xzz_xzzz[j] + f2t * (dy_zz_xzzz[j] + dy_xzz_zzz[j]);

                dz_xxzz_xzzz[j] = fr * dz_xzz_xzzz[j] + f2t * (dz_zz_xzzz[j] + dz_xzz_zzz[j]);

                dx_xxzz_yyyy[j] = fr * dx_xzz_yyyy[j] + f2t * (dx_zz_yyyy[j] + s_xzz_yyyy[j]);

                dy_xxzz_yyyy[j] = fr * dy_xzz_yyyy[j] + f2t * dy_zz_yyyy[j];

                dz_xxzz_yyyy[j] = fr * dz_xzz_yyyy[j] + f2t * dz_zz_yyyy[j];

                dx_xxzz_yyyz[j] = fr * dx_xzz_yyyz[j] + f2t * (dx_zz_yyyz[j] + s_xzz_yyyz[j]);

                dy_xxzz_yyyz[j] = fr * dy_xzz_yyyz[j] + f2t * dy_zz_yyyz[j];

                dz_xxzz_yyyz[j] = fr * dz_xzz_yyyz[j] + f2t * dz_zz_yyyz[j];

                dx_xxzz_yyzz[j] = fr * dx_xzz_yyzz[j] + f2t * (dx_zz_yyzz[j] + s_xzz_yyzz[j]);

                dy_xxzz_yyzz[j] = fr * dy_xzz_yyzz[j] + f2t * dy_zz_yyzz[j];

                dz_xxzz_yyzz[j] = fr * dz_xzz_yyzz[j] + f2t * dz_zz_yyzz[j];

                dx_xxzz_yzzz[j] = fr * dx_xzz_yzzz[j] + f2t * (dx_zz_yzzz[j] + s_xzz_yzzz[j]);

                dy_xxzz_yzzz[j] = fr * dy_xzz_yzzz[j] + f2t * dy_zz_yzzz[j];

                dz_xxzz_yzzz[j] = fr * dz_xzz_yzzz[j] + f2t * dz_zz_yzzz[j];

                dx_xxzz_zzzz[j] = fr * dx_xzz_zzzz[j] + f2t * (dx_zz_zzzz[j] + s_xzz_zzzz[j]);

                dy_xxzz_zzzz[j] = fr * dy_xzz_zzzz[j] + f2t * dy_zz_zzzz[j];

                dz_xxzz_zzzz[j] = fr * dz_xzz_zzzz[j] + f2t * dz_zz_zzzz[j];

                dx_xyyy_xxxx[j] = fr * dx_yyy_xxxx[j] + f2t * (4.0 * dx_yyy_xxx[j] + s_yyy_xxxx[j]);

                dy_xyyy_xxxx[j] = fr * dy_yyy_xxxx[j] + f2t * 4.0 * dy_yyy_xxx[j];

                dz_xyyy_xxxx[j] = fr * dz_yyy_xxxx[j] + f2t * 4.0 * dz_yyy_xxx[j];

                dx_xyyy_xxxy[j] = fr * dx_yyy_xxxy[j] + f2t * (3.0 * dx_yyy_xxy[j] + s_yyy_xxxy[j]);

                dy_xyyy_xxxy[j] = fr * dy_yyy_xxxy[j] + f2t * 3.0 * dy_yyy_xxy[j];

                dz_xyyy_xxxy[j] = fr * dz_yyy_xxxy[j] + f2t * 3.0 * dz_yyy_xxy[j];

                dx_xyyy_xxxz[j] = fr * dx_yyy_xxxz[j] + f2t * (3.0 * dx_yyy_xxz[j] + s_yyy_xxxz[j]);

                dy_xyyy_xxxz[j] = fr * dy_yyy_xxxz[j] + f2t * 3.0 * dy_yyy_xxz[j];

                dz_xyyy_xxxz[j] = fr * dz_yyy_xxxz[j] + f2t * 3.0 * dz_yyy_xxz[j];

                dx_xyyy_xxyy[j] = fr * dx_yyy_xxyy[j] + f2t * (2.0 * dx_yyy_xyy[j] + s_yyy_xxyy[j]);

                dy_xyyy_xxyy[j] = fr * dy_yyy_xxyy[j] + f2t * 2.0 * dy_yyy_xyy[j];

                dz_xyyy_xxyy[j] = fr * dz_yyy_xxyy[j] + f2t * 2.0 * dz_yyy_xyy[j];

                dx_xyyy_xxyz[j] = fr * dx_yyy_xxyz[j] + f2t * (2.0 * dx_yyy_xyz[j] + s_yyy_xxyz[j]);

                dy_xyyy_xxyz[j] = fr * dy_yyy_xxyz[j] + f2t * 2.0 * dy_yyy_xyz[j];

                dz_xyyy_xxyz[j] = fr * dz_yyy_xxyz[j] + f2t * 2.0 * dz_yyy_xyz[j];

                dx_xyyy_xxzz[j] = fr * dx_yyy_xxzz[j] + f2t * (2.0 * dx_yyy_xzz[j] + s_yyy_xxzz[j]);

                dy_xyyy_xxzz[j] = fr * dy_yyy_xxzz[j] + f2t * 2.0 * dy_yyy_xzz[j];

                dz_xyyy_xxzz[j] = fr * dz_yyy_xxzz[j] + f2t * 2.0 * dz_yyy_xzz[j];

                dx_xyyy_xyyy[j] = fr * dx_yyy_xyyy[j] + f2t * (dx_yyy_yyy[j] + s_yyy_xyyy[j]);

                dy_xyyy_xyyy[j] = fr * dy_yyy_xyyy[j] + f2t * dy_yyy_yyy[j];

                dz_xyyy_xyyy[j] = fr * dz_yyy_xyyy[j] + f2t * dz_yyy_yyy[j];

                dx_xyyy_xyyz[j] = fr * dx_yyy_xyyz[j] + f2t * (dx_yyy_yyz[j] + s_yyy_xyyz[j]);

                dy_xyyy_xyyz[j] = fr * dy_yyy_xyyz[j] + f2t * dy_yyy_yyz[j];

                dz_xyyy_xyyz[j] = fr * dz_yyy_xyyz[j] + f2t * dz_yyy_yyz[j];

                dx_xyyy_xyzz[j] = fr * dx_yyy_xyzz[j] + f2t * (dx_yyy_yzz[j] + s_yyy_xyzz[j]);

                dy_xyyy_xyzz[j] = fr * dy_yyy_xyzz[j] + f2t * dy_yyy_yzz[j];

                dz_xyyy_xyzz[j] = fr * dz_yyy_xyzz[j] + f2t * dz_yyy_yzz[j];

                dx_xyyy_xzzz[j] = fr * dx_yyy_xzzz[j] + f2t * (dx_yyy_zzz[j] + s_yyy_xzzz[j]);

                dy_xyyy_xzzz[j] = fr * dy_yyy_xzzz[j] + f2t * dy_yyy_zzz[j];

                dz_xyyy_xzzz[j] = fr * dz_yyy_xzzz[j] + f2t * dz_yyy_zzz[j];

                dx_xyyy_yyyy[j] = fr * dx_yyy_yyyy[j] + f2t * s_yyy_yyyy[j];

                dy_xyyy_yyyy[j] = fr * dy_yyy_yyyy[j];

                dz_xyyy_yyyy[j] = fr * dz_yyy_yyyy[j];

                dx_xyyy_yyyz[j] = fr * dx_yyy_yyyz[j] + f2t * s_yyy_yyyz[j];

                dy_xyyy_yyyz[j] = fr * dy_yyy_yyyz[j];

                dz_xyyy_yyyz[j] = fr * dz_yyy_yyyz[j];

                dx_xyyy_yyzz[j] = fr * dx_yyy_yyzz[j] + f2t * s_yyy_yyzz[j];

                dy_xyyy_yyzz[j] = fr * dy_yyy_yyzz[j];

                dz_xyyy_yyzz[j] = fr * dz_yyy_yyzz[j];

                dx_xyyy_yzzz[j] = fr * dx_yyy_yzzz[j] + f2t * s_yyy_yzzz[j];

                dy_xyyy_yzzz[j] = fr * dy_yyy_yzzz[j];

                dz_xyyy_yzzz[j] = fr * dz_yyy_yzzz[j];

                dx_xyyy_zzzz[j] = fr * dx_yyy_zzzz[j] + f2t * s_yyy_zzzz[j];

                dy_xyyy_zzzz[j] = fr * dy_yyy_zzzz[j];

                dz_xyyy_zzzz[j] = fr * dz_yyy_zzzz[j];

                dx_xyyz_xxxx[j] = fr * dx_yyz_xxxx[j] + f2t * (4.0 * dx_yyz_xxx[j] + s_yyz_xxxx[j]);

                dy_xyyz_xxxx[j] = fr * dy_yyz_xxxx[j] + f2t * 4.0 * dy_yyz_xxx[j];

                dz_xyyz_xxxx[j] = fr * dz_yyz_xxxx[j] + f2t * 4.0 * dz_yyz_xxx[j];

                dx_xyyz_xxxy[j] = fr * dx_yyz_xxxy[j] + f2t * (3.0 * dx_yyz_xxy[j] + s_yyz_xxxy[j]);

                dy_xyyz_xxxy[j] = fr * dy_yyz_xxxy[j] + f2t * 3.0 * dy_yyz_xxy[j];

                dz_xyyz_xxxy[j] = fr * dz_yyz_xxxy[j] + f2t * 3.0 * dz_yyz_xxy[j];

                dx_xyyz_xxxz[j] = fr * dx_yyz_xxxz[j] + f2t * (3.0 * dx_yyz_xxz[j] + s_yyz_xxxz[j]);

                dy_xyyz_xxxz[j] = fr * dy_yyz_xxxz[j] + f2t * 3.0 * dy_yyz_xxz[j];

                dz_xyyz_xxxz[j] = fr * dz_yyz_xxxz[j] + f2t * 3.0 * dz_yyz_xxz[j];

                dx_xyyz_xxyy[j] = fr * dx_yyz_xxyy[j] + f2t * (2.0 * dx_yyz_xyy[j] + s_yyz_xxyy[j]);

                dy_xyyz_xxyy[j] = fr * dy_yyz_xxyy[j] + f2t * 2.0 * dy_yyz_xyy[j];

                dz_xyyz_xxyy[j] = fr * dz_yyz_xxyy[j] + f2t * 2.0 * dz_yyz_xyy[j];

                dx_xyyz_xxyz[j] = fr * dx_yyz_xxyz[j] + f2t * (2.0 * dx_yyz_xyz[j] + s_yyz_xxyz[j]);

                dy_xyyz_xxyz[j] = fr * dy_yyz_xxyz[j] + f2t * 2.0 * dy_yyz_xyz[j];

                dz_xyyz_xxyz[j] = fr * dz_yyz_xxyz[j] + f2t * 2.0 * dz_yyz_xyz[j];

                dx_xyyz_xxzz[j] = fr * dx_yyz_xxzz[j] + f2t * (2.0 * dx_yyz_xzz[j] + s_yyz_xxzz[j]);

                dy_xyyz_xxzz[j] = fr * dy_yyz_xxzz[j] + f2t * 2.0 * dy_yyz_xzz[j];

                dz_xyyz_xxzz[j] = fr * dz_yyz_xxzz[j] + f2t * 2.0 * dz_yyz_xzz[j];

                dx_xyyz_xyyy[j] = fr * dx_yyz_xyyy[j] + f2t * (dx_yyz_yyy[j] + s_yyz_xyyy[j]);

                dy_xyyz_xyyy[j] = fr * dy_yyz_xyyy[j] + f2t * dy_yyz_yyy[j];

                dz_xyyz_xyyy[j] = fr * dz_yyz_xyyy[j] + f2t * dz_yyz_yyy[j];

                dx_xyyz_xyyz[j] = fr * dx_yyz_xyyz[j] + f2t * (dx_yyz_yyz[j] + s_yyz_xyyz[j]);

                dy_xyyz_xyyz[j] = fr * dy_yyz_xyyz[j] + f2t * dy_yyz_yyz[j];

                dz_xyyz_xyyz[j] = fr * dz_yyz_xyyz[j] + f2t * dz_yyz_yyz[j];

                dx_xyyz_xyzz[j] = fr * dx_yyz_xyzz[j] + f2t * (dx_yyz_yzz[j] + s_yyz_xyzz[j]);

                dy_xyyz_xyzz[j] = fr * dy_yyz_xyzz[j] + f2t * dy_yyz_yzz[j];

                dz_xyyz_xyzz[j] = fr * dz_yyz_xyzz[j] + f2t * dz_yyz_yzz[j];

                dx_xyyz_xzzz[j] = fr * dx_yyz_xzzz[j] + f2t * (dx_yyz_zzz[j] + s_yyz_xzzz[j]);

                dy_xyyz_xzzz[j] = fr * dy_yyz_xzzz[j] + f2t * dy_yyz_zzz[j];

                dz_xyyz_xzzz[j] = fr * dz_yyz_xzzz[j] + f2t * dz_yyz_zzz[j];

                dx_xyyz_yyyy[j] = fr * dx_yyz_yyyy[j] + f2t * s_yyz_yyyy[j];

                dy_xyyz_yyyy[j] = fr * dy_yyz_yyyy[j];

                dz_xyyz_yyyy[j] = fr * dz_yyz_yyyy[j];

                dx_xyyz_yyyz[j] = fr * dx_yyz_yyyz[j] + f2t * s_yyz_yyyz[j];

                dy_xyyz_yyyz[j] = fr * dy_yyz_yyyz[j];

                dz_xyyz_yyyz[j] = fr * dz_yyz_yyyz[j];

                dx_xyyz_yyzz[j] = fr * dx_yyz_yyzz[j] + f2t * s_yyz_yyzz[j];

                dy_xyyz_yyzz[j] = fr * dy_yyz_yyzz[j];

                dz_xyyz_yyzz[j] = fr * dz_yyz_yyzz[j];

                dx_xyyz_yzzz[j] = fr * dx_yyz_yzzz[j] + f2t * s_yyz_yzzz[j];

                dy_xyyz_yzzz[j] = fr * dy_yyz_yzzz[j];

                dz_xyyz_yzzz[j] = fr * dz_yyz_yzzz[j];

                dx_xyyz_zzzz[j] = fr * dx_yyz_zzzz[j] + f2t * s_yyz_zzzz[j];

                dy_xyyz_zzzz[j] = fr * dy_yyz_zzzz[j];

                dz_xyyz_zzzz[j] = fr * dz_yyz_zzzz[j];

                dx_xyzz_xxxx[j] = fr * dx_yzz_xxxx[j] + f2t * (4.0 * dx_yzz_xxx[j] + s_yzz_xxxx[j]);

                dy_xyzz_xxxx[j] = fr * dy_yzz_xxxx[j] + f2t * 4.0 * dy_yzz_xxx[j];

                dz_xyzz_xxxx[j] = fr * dz_yzz_xxxx[j] + f2t * 4.0 * dz_yzz_xxx[j];

                dx_xyzz_xxxy[j] = fr * dx_yzz_xxxy[j] + f2t * (3.0 * dx_yzz_xxy[j] + s_yzz_xxxy[j]);

                dy_xyzz_xxxy[j] = fr * dy_yzz_xxxy[j] + f2t * 3.0 * dy_yzz_xxy[j];

                dz_xyzz_xxxy[j] = fr * dz_yzz_xxxy[j] + f2t * 3.0 * dz_yzz_xxy[j];

                dx_xyzz_xxxz[j] = fr * dx_yzz_xxxz[j] + f2t * (3.0 * dx_yzz_xxz[j] + s_yzz_xxxz[j]);

                dy_xyzz_xxxz[j] = fr * dy_yzz_xxxz[j] + f2t * 3.0 * dy_yzz_xxz[j];

                dz_xyzz_xxxz[j] = fr * dz_yzz_xxxz[j] + f2t * 3.0 * dz_yzz_xxz[j];

                dx_xyzz_xxyy[j] = fr * dx_yzz_xxyy[j] + f2t * (2.0 * dx_yzz_xyy[j] + s_yzz_xxyy[j]);

                dy_xyzz_xxyy[j] = fr * dy_yzz_xxyy[j] + f2t * 2.0 * dy_yzz_xyy[j];

                dz_xyzz_xxyy[j] = fr * dz_yzz_xxyy[j] + f2t * 2.0 * dz_yzz_xyy[j];

                dx_xyzz_xxyz[j] = fr * dx_yzz_xxyz[j] + f2t * (2.0 * dx_yzz_xyz[j] + s_yzz_xxyz[j]);

                dy_xyzz_xxyz[j] = fr * dy_yzz_xxyz[j] + f2t * 2.0 * dy_yzz_xyz[j];

                dz_xyzz_xxyz[j] = fr * dz_yzz_xxyz[j] + f2t * 2.0 * dz_yzz_xyz[j];

                dx_xyzz_xxzz[j] = fr * dx_yzz_xxzz[j] + f2t * (2.0 * dx_yzz_xzz[j] + s_yzz_xxzz[j]);

                dy_xyzz_xxzz[j] = fr * dy_yzz_xxzz[j] + f2t * 2.0 * dy_yzz_xzz[j];

                dz_xyzz_xxzz[j] = fr * dz_yzz_xxzz[j] + f2t * 2.0 * dz_yzz_xzz[j];

                dx_xyzz_xyyy[j] = fr * dx_yzz_xyyy[j] + f2t * (dx_yzz_yyy[j] + s_yzz_xyyy[j]);

                dy_xyzz_xyyy[j] = fr * dy_yzz_xyyy[j] + f2t * dy_yzz_yyy[j];

                dz_xyzz_xyyy[j] = fr * dz_yzz_xyyy[j] + f2t * dz_yzz_yyy[j];

                dx_xyzz_xyyz[j] = fr * dx_yzz_xyyz[j] + f2t * (dx_yzz_yyz[j] + s_yzz_xyyz[j]);

                dy_xyzz_xyyz[j] = fr * dy_yzz_xyyz[j] + f2t * dy_yzz_yyz[j];

                dz_xyzz_xyyz[j] = fr * dz_yzz_xyyz[j] + f2t * dz_yzz_yyz[j];

                dx_xyzz_xyzz[j] = fr * dx_yzz_xyzz[j] + f2t * (dx_yzz_yzz[j] + s_yzz_xyzz[j]);

                dy_xyzz_xyzz[j] = fr * dy_yzz_xyzz[j] + f2t * dy_yzz_yzz[j];

                dz_xyzz_xyzz[j] = fr * dz_yzz_xyzz[j] + f2t * dz_yzz_yzz[j];

                dx_xyzz_xzzz[j] = fr * dx_yzz_xzzz[j] + f2t * (dx_yzz_zzz[j] + s_yzz_xzzz[j]);

                dy_xyzz_xzzz[j] = fr * dy_yzz_xzzz[j] + f2t * dy_yzz_zzz[j];

                dz_xyzz_xzzz[j] = fr * dz_yzz_xzzz[j] + f2t * dz_yzz_zzz[j];

                dx_xyzz_yyyy[j] = fr * dx_yzz_yyyy[j] + f2t * s_yzz_yyyy[j];

                dy_xyzz_yyyy[j] = fr * dy_yzz_yyyy[j];

                dz_xyzz_yyyy[j] = fr * dz_yzz_yyyy[j];

                dx_xyzz_yyyz[j] = fr * dx_yzz_yyyz[j] + f2t * s_yzz_yyyz[j];

                dy_xyzz_yyyz[j] = fr * dy_yzz_yyyz[j];

                dz_xyzz_yyyz[j] = fr * dz_yzz_yyyz[j];

                dx_xyzz_yyzz[j] = fr * dx_yzz_yyzz[j] + f2t * s_yzz_yyzz[j];

                dy_xyzz_yyzz[j] = fr * dy_yzz_yyzz[j];

                dz_xyzz_yyzz[j] = fr * dz_yzz_yyzz[j];

                dx_xyzz_yzzz[j] = fr * dx_yzz_yzzz[j] + f2t * s_yzz_yzzz[j];

                dy_xyzz_yzzz[j] = fr * dy_yzz_yzzz[j];

                dz_xyzz_yzzz[j] = fr * dz_yzz_yzzz[j];

                dx_xyzz_zzzz[j] = fr * dx_yzz_zzzz[j] + f2t * s_yzz_zzzz[j];

                dy_xyzz_zzzz[j] = fr * dy_yzz_zzzz[j];

                dz_xyzz_zzzz[j] = fr * dz_yzz_zzzz[j];

                dx_xzzz_xxxx[j] = fr * dx_zzz_xxxx[j] + f2t * (4.0 * dx_zzz_xxx[j] + s_zzz_xxxx[j]);

                dy_xzzz_xxxx[j] = fr * dy_zzz_xxxx[j] + f2t * 4.0 * dy_zzz_xxx[j];

                dz_xzzz_xxxx[j] = fr * dz_zzz_xxxx[j] + f2t * 4.0 * dz_zzz_xxx[j];

                dx_xzzz_xxxy[j] = fr * dx_zzz_xxxy[j] + f2t * (3.0 * dx_zzz_xxy[j] + s_zzz_xxxy[j]);

                dy_xzzz_xxxy[j] = fr * dy_zzz_xxxy[j] + f2t * 3.0 * dy_zzz_xxy[j];

                dz_xzzz_xxxy[j] = fr * dz_zzz_xxxy[j] + f2t * 3.0 * dz_zzz_xxy[j];

                dx_xzzz_xxxz[j] = fr * dx_zzz_xxxz[j] + f2t * (3.0 * dx_zzz_xxz[j] + s_zzz_xxxz[j]);

                dy_xzzz_xxxz[j] = fr * dy_zzz_xxxz[j] + f2t * 3.0 * dy_zzz_xxz[j];

                dz_xzzz_xxxz[j] = fr * dz_zzz_xxxz[j] + f2t * 3.0 * dz_zzz_xxz[j];

                dx_xzzz_xxyy[j] = fr * dx_zzz_xxyy[j] + f2t * (2.0 * dx_zzz_xyy[j] + s_zzz_xxyy[j]);

                dy_xzzz_xxyy[j] = fr * dy_zzz_xxyy[j] + f2t * 2.0 * dy_zzz_xyy[j];

                dz_xzzz_xxyy[j] = fr * dz_zzz_xxyy[j] + f2t * 2.0 * dz_zzz_xyy[j];

                dx_xzzz_xxyz[j] = fr * dx_zzz_xxyz[j] + f2t * (2.0 * dx_zzz_xyz[j] + s_zzz_xxyz[j]);

                dy_xzzz_xxyz[j] = fr * dy_zzz_xxyz[j] + f2t * 2.0 * dy_zzz_xyz[j];

                dz_xzzz_xxyz[j] = fr * dz_zzz_xxyz[j] + f2t * 2.0 * dz_zzz_xyz[j];

                dx_xzzz_xxzz[j] = fr * dx_zzz_xxzz[j] + f2t * (2.0 * dx_zzz_xzz[j] + s_zzz_xxzz[j]);

                dy_xzzz_xxzz[j] = fr * dy_zzz_xxzz[j] + f2t * 2.0 * dy_zzz_xzz[j];

                dz_xzzz_xxzz[j] = fr * dz_zzz_xxzz[j] + f2t * 2.0 * dz_zzz_xzz[j];

                dx_xzzz_xyyy[j] = fr * dx_zzz_xyyy[j] + f2t * (dx_zzz_yyy[j] + s_zzz_xyyy[j]);

                dy_xzzz_xyyy[j] = fr * dy_zzz_xyyy[j] + f2t * dy_zzz_yyy[j];

                dz_xzzz_xyyy[j] = fr * dz_zzz_xyyy[j] + f2t * dz_zzz_yyy[j];

                dx_xzzz_xyyz[j] = fr * dx_zzz_xyyz[j] + f2t * (dx_zzz_yyz[j] + s_zzz_xyyz[j]);

                dy_xzzz_xyyz[j] = fr * dy_zzz_xyyz[j] + f2t * dy_zzz_yyz[j];

                dz_xzzz_xyyz[j] = fr * dz_zzz_xyyz[j] + f2t * dz_zzz_yyz[j];

                dx_xzzz_xyzz[j] = fr * dx_zzz_xyzz[j] + f2t * (dx_zzz_yzz[j] + s_zzz_xyzz[j]);

                dy_xzzz_xyzz[j] = fr * dy_zzz_xyzz[j] + f2t * dy_zzz_yzz[j];

                dz_xzzz_xyzz[j] = fr * dz_zzz_xyzz[j] + f2t * dz_zzz_yzz[j];

                dx_xzzz_xzzz[j] = fr * dx_zzz_xzzz[j] + f2t * (dx_zzz_zzz[j] + s_zzz_xzzz[j]);

                dy_xzzz_xzzz[j] = fr * dy_zzz_xzzz[j] + f2t * dy_zzz_zzz[j];

                dz_xzzz_xzzz[j] = fr * dz_zzz_xzzz[j] + f2t * dz_zzz_zzz[j];

                dx_xzzz_yyyy[j] = fr * dx_zzz_yyyy[j] + f2t * s_zzz_yyyy[j];

                dy_xzzz_yyyy[j] = fr * dy_zzz_yyyy[j];

                dz_xzzz_yyyy[j] = fr * dz_zzz_yyyy[j];

                dx_xzzz_yyyz[j] = fr * dx_zzz_yyyz[j] + f2t * s_zzz_yyyz[j];

                dy_xzzz_yyyz[j] = fr * dy_zzz_yyyz[j];

                dz_xzzz_yyyz[j] = fr * dz_zzz_yyyz[j];

                dx_xzzz_yyzz[j] = fr * dx_zzz_yyzz[j] + f2t * s_zzz_yyzz[j];

                dy_xzzz_yyzz[j] = fr * dy_zzz_yyzz[j];

                dz_xzzz_yyzz[j] = fr * dz_zzz_yyzz[j];

                dx_xzzz_yzzz[j] = fr * dx_zzz_yzzz[j] + f2t * s_zzz_yzzz[j];

                dy_xzzz_yzzz[j] = fr * dy_zzz_yzzz[j];

                dz_xzzz_yzzz[j] = fr * dz_zzz_yzzz[j];

                dx_xzzz_zzzz[j] = fr * dx_zzz_zzzz[j] + f2t * s_zzz_zzzz[j];

                dy_xzzz_zzzz[j] = fr * dy_zzz_zzzz[j];

                dz_xzzz_zzzz[j] = fr * dz_zzz_zzzz[j];

                // leading y component

                fr = pay[j];

                dx_yyyy_xxxx[j] = fr * dx_yyy_xxxx[j] + f2t * 3.0 * dx_yy_xxxx[j];

                dy_yyyy_xxxx[j] = fr * dy_yyy_xxxx[j] + f2t * (3.0 * dy_yy_xxxx[j] + s_yyy_xxxx[j]);

                dz_yyyy_xxxx[j] = fr * dz_yyy_xxxx[j] + f2t * 3.0 * dz_yy_xxxx[j];

                dx_yyyy_xxxy[j] = fr * dx_yyy_xxxy[j] + f2t * (3.0 * dx_yy_xxxy[j] + dx_yyy_xxx[j]);

                dy_yyyy_xxxy[j] = fr * dy_yyy_xxxy[j] + f2t * (3.0 * dy_yy_xxxy[j] + dy_yyy_xxx[j] + s_yyy_xxxy[j]);

                dz_yyyy_xxxy[j] = fr * dz_yyy_xxxy[j] + f2t * (3.0 * dz_yy_xxxy[j] + dz_yyy_xxx[j]);

                dx_yyyy_xxxz[j] = fr * dx_yyy_xxxz[j] + f2t * 3.0 * dx_yy_xxxz[j];

                dy_yyyy_xxxz[j] = fr * dy_yyy_xxxz[j] + f2t * (3.0 * dy_yy_xxxz[j] + s_yyy_xxxz[j]);

                dz_yyyy_xxxz[j] = fr * dz_yyy_xxxz[j] + f2t * 3.0 * dz_yy_xxxz[j];

                dx_yyyy_xxyy[j] = fr * dx_yyy_xxyy[j] + f2t * (3.0 * dx_yy_xxyy[j] + 2.0 * dx_yyy_xxy[j]);

                dy_yyyy_xxyy[j] = fr * dy_yyy_xxyy[j] + f2t * (3.0 * dy_yy_xxyy[j] + 2.0 * dy_yyy_xxy[j] + s_yyy_xxyy[j]);

                dz_yyyy_xxyy[j] = fr * dz_yyy_xxyy[j] + f2t * (3.0 * dz_yy_xxyy[j] + 2.0 * dz_yyy_xxy[j]);

                dx_yyyy_xxyz[j] = fr * dx_yyy_xxyz[j] + f2t * (3.0 * dx_yy_xxyz[j] + dx_yyy_xxz[j]);

                dy_yyyy_xxyz[j] = fr * dy_yyy_xxyz[j] + f2t * (3.0 * dy_yy_xxyz[j] + dy_yyy_xxz[j] + s_yyy_xxyz[j]);

                dz_yyyy_xxyz[j] = fr * dz_yyy_xxyz[j] + f2t * (3.0 * dz_yy_xxyz[j] + dz_yyy_xxz[j]);

                dx_yyyy_xxzz[j] = fr * dx_yyy_xxzz[j] + f2t * 3.0 * dx_yy_xxzz[j];

                dy_yyyy_xxzz[j] = fr * dy_yyy_xxzz[j] + f2t * (3.0 * dy_yy_xxzz[j] + s_yyy_xxzz[j]);

                dz_yyyy_xxzz[j] = fr * dz_yyy_xxzz[j] + f2t * 3.0 * dz_yy_xxzz[j];

                dx_yyyy_xyyy[j] = fr * dx_yyy_xyyy[j] + f2t * (3.0 * dx_yy_xyyy[j] + 3.0 * dx_yyy_xyy[j]);

                dy_yyyy_xyyy[j] = fr * dy_yyy_xyyy[j] + f2t * (3.0 * dy_yy_xyyy[j] + 3.0 * dy_yyy_xyy[j] + s_yyy_xyyy[j]);

                dz_yyyy_xyyy[j] = fr * dz_yyy_xyyy[j] + f2t * (3.0 * dz_yy_xyyy[j] + 3.0 * dz_yyy_xyy[j]);

                dx_yyyy_xyyz[j] = fr * dx_yyy_xyyz[j] + f2t * (3.0 * dx_yy_xyyz[j] + 2.0 * dx_yyy_xyz[j]);

                dy_yyyy_xyyz[j] = fr * dy_yyy_xyyz[j] + f2t * (3.0 * dy_yy_xyyz[j] + 2.0 * dy_yyy_xyz[j] + s_yyy_xyyz[j]);

                dz_yyyy_xyyz[j] = fr * dz_yyy_xyyz[j] + f2t * (3.0 * dz_yy_xyyz[j] + 2.0 * dz_yyy_xyz[j]);

                dx_yyyy_xyzz[j] = fr * dx_yyy_xyzz[j] + f2t * (3.0 * dx_yy_xyzz[j] + dx_yyy_xzz[j]);

                dy_yyyy_xyzz[j] = fr * dy_yyy_xyzz[j] + f2t * (3.0 * dy_yy_xyzz[j] + dy_yyy_xzz[j] + s_yyy_xyzz[j]);

                dz_yyyy_xyzz[j] = fr * dz_yyy_xyzz[j] + f2t * (3.0 * dz_yy_xyzz[j] + dz_yyy_xzz[j]);

                dx_yyyy_xzzz[j] = fr * dx_yyy_xzzz[j] + f2t * 3.0 * dx_yy_xzzz[j];

                dy_yyyy_xzzz[j] = fr * dy_yyy_xzzz[j] + f2t * (3.0 * dy_yy_xzzz[j] + s_yyy_xzzz[j]);

                dz_yyyy_xzzz[j] = fr * dz_yyy_xzzz[j] + f2t * 3.0 * dz_yy_xzzz[j];

                dx_yyyy_yyyy[j] = fr * dx_yyy_yyyy[j] + f2t * (3.0 * dx_yy_yyyy[j] + 4.0 * dx_yyy_yyy[j]);

                dy_yyyy_yyyy[j] = fr * dy_yyy_yyyy[j] + f2t * (3.0 * dy_yy_yyyy[j] + 4.0 * dy_yyy_yyy[j] + s_yyy_yyyy[j]);

                dz_yyyy_yyyy[j] = fr * dz_yyy_yyyy[j] + f2t * (3.0 * dz_yy_yyyy[j] + 4.0 * dz_yyy_yyy[j]);

                dx_yyyy_yyyz[j] = fr * dx_yyy_yyyz[j] + f2t * (3.0 * dx_yy_yyyz[j] + 3.0 * dx_yyy_yyz[j]);

                dy_yyyy_yyyz[j] = fr * dy_yyy_yyyz[j] + f2t * (3.0 * dy_yy_yyyz[j] + 3.0 * dy_yyy_yyz[j] + s_yyy_yyyz[j]);

                dz_yyyy_yyyz[j] = fr * dz_yyy_yyyz[j] + f2t * (3.0 * dz_yy_yyyz[j] + 3.0 * dz_yyy_yyz[j]);

                dx_yyyy_yyzz[j] = fr * dx_yyy_yyzz[j] + f2t * (3.0 * dx_yy_yyzz[j] + 2.0 * dx_yyy_yzz[j]);

                dy_yyyy_yyzz[j] = fr * dy_yyy_yyzz[j] + f2t * (3.0 * dy_yy_yyzz[j] + 2.0 * dy_yyy_yzz[j] + s_yyy_yyzz[j]);

                dz_yyyy_yyzz[j] = fr * dz_yyy_yyzz[j] + f2t * (3.0 * dz_yy_yyzz[j] + 2.0 * dz_yyy_yzz[j]);

                dx_yyyy_yzzz[j] = fr * dx_yyy_yzzz[j] + f2t * (3.0 * dx_yy_yzzz[j] + dx_yyy_zzz[j]);

                dy_yyyy_yzzz[j] = fr * dy_yyy_yzzz[j] + f2t * (3.0 * dy_yy_yzzz[j] + dy_yyy_zzz[j] + s_yyy_yzzz[j]);

                dz_yyyy_yzzz[j] = fr * dz_yyy_yzzz[j] + f2t * (3.0 * dz_yy_yzzz[j] + dz_yyy_zzz[j]);

                dx_yyyy_zzzz[j] = fr * dx_yyy_zzzz[j] + f2t * 3.0 * dx_yy_zzzz[j];

                dy_yyyy_zzzz[j] = fr * dy_yyy_zzzz[j] + f2t * (3.0 * dy_yy_zzzz[j] + s_yyy_zzzz[j]);

                dz_yyyy_zzzz[j] = fr * dz_yyy_zzzz[j] + f2t * 3.0 * dz_yy_zzzz[j];

                dx_yyyz_xxxx[j] = fr * dx_yyz_xxxx[j] + f2t * 2.0 * dx_yz_xxxx[j];

                dy_yyyz_xxxx[j] = fr * dy_yyz_xxxx[j] + f2t * (2.0 * dy_yz_xxxx[j] + s_yyz_xxxx[j]);

                dz_yyyz_xxxx[j] = fr * dz_yyz_xxxx[j] + f2t * 2.0 * dz_yz_xxxx[j];

                dx_yyyz_xxxy[j] = fr * dx_yyz_xxxy[j] + f2t * (2.0 * dx_yz_xxxy[j] + dx_yyz_xxx[j]);

                dy_yyyz_xxxy[j] = fr * dy_yyz_xxxy[j] + f2t * (2.0 * dy_yz_xxxy[j] + dy_yyz_xxx[j] + s_yyz_xxxy[j]);

                dz_yyyz_xxxy[j] = fr * dz_yyz_xxxy[j] + f2t * (2.0 * dz_yz_xxxy[j] + dz_yyz_xxx[j]);

                dx_yyyz_xxxz[j] = fr * dx_yyz_xxxz[j] + f2t * 2.0 * dx_yz_xxxz[j];

                dy_yyyz_xxxz[j] = fr * dy_yyz_xxxz[j] + f2t * (2.0 * dy_yz_xxxz[j] + s_yyz_xxxz[j]);

                dz_yyyz_xxxz[j] = fr * dz_yyz_xxxz[j] + f2t * 2.0 * dz_yz_xxxz[j];

                dx_yyyz_xxyy[j] = fr * dx_yyz_xxyy[j] + f2t * (2.0 * dx_yz_xxyy[j] + 2.0 * dx_yyz_xxy[j]);

                dy_yyyz_xxyy[j] = fr * dy_yyz_xxyy[j] + f2t * (2.0 * dy_yz_xxyy[j] + 2.0 * dy_yyz_xxy[j] + s_yyz_xxyy[j]);

                dz_yyyz_xxyy[j] = fr * dz_yyz_xxyy[j] + f2t * (2.0 * dz_yz_xxyy[j] + 2.0 * dz_yyz_xxy[j]);

                dx_yyyz_xxyz[j] = fr * dx_yyz_xxyz[j] + f2t * (2.0 * dx_yz_xxyz[j] + dx_yyz_xxz[j]);

                dy_yyyz_xxyz[j] = fr * dy_yyz_xxyz[j] + f2t * (2.0 * dy_yz_xxyz[j] + dy_yyz_xxz[j] + s_yyz_xxyz[j]);

                dz_yyyz_xxyz[j] = fr * dz_yyz_xxyz[j] + f2t * (2.0 * dz_yz_xxyz[j] + dz_yyz_xxz[j]);

                dx_yyyz_xxzz[j] = fr * dx_yyz_xxzz[j] + f2t * 2.0 * dx_yz_xxzz[j];

                dy_yyyz_xxzz[j] = fr * dy_yyz_xxzz[j] + f2t * (2.0 * dy_yz_xxzz[j] + s_yyz_xxzz[j]);

                dz_yyyz_xxzz[j] = fr * dz_yyz_xxzz[j] + f2t * 2.0 * dz_yz_xxzz[j];

                dx_yyyz_xyyy[j] = fr * dx_yyz_xyyy[j] + f2t * (2.0 * dx_yz_xyyy[j] + 3.0 * dx_yyz_xyy[j]);

                dy_yyyz_xyyy[j] = fr * dy_yyz_xyyy[j] + f2t * (2.0 * dy_yz_xyyy[j] + 3.0 * dy_yyz_xyy[j] + s_yyz_xyyy[j]);

                dz_yyyz_xyyy[j] = fr * dz_yyz_xyyy[j] + f2t * (2.0 * dz_yz_xyyy[j] + 3.0 * dz_yyz_xyy[j]);

                dx_yyyz_xyyz[j] = fr * dx_yyz_xyyz[j] + f2t * (2.0 * dx_yz_xyyz[j] + 2.0 * dx_yyz_xyz[j]);

                dy_yyyz_xyyz[j] = fr * dy_yyz_xyyz[j] + f2t * (2.0 * dy_yz_xyyz[j] + 2.0 * dy_yyz_xyz[j] + s_yyz_xyyz[j]);

                dz_yyyz_xyyz[j] = fr * dz_yyz_xyyz[j] + f2t * (2.0 * dz_yz_xyyz[j] + 2.0 * dz_yyz_xyz[j]);

                dx_yyyz_xyzz[j] = fr * dx_yyz_xyzz[j] + f2t * (2.0 * dx_yz_xyzz[j] + dx_yyz_xzz[j]);

                dy_yyyz_xyzz[j] = fr * dy_yyz_xyzz[j] + f2t * (2.0 * dy_yz_xyzz[j] + dy_yyz_xzz[j] + s_yyz_xyzz[j]);

                dz_yyyz_xyzz[j] = fr * dz_yyz_xyzz[j] + f2t * (2.0 * dz_yz_xyzz[j] + dz_yyz_xzz[j]);

                dx_yyyz_xzzz[j] = fr * dx_yyz_xzzz[j] + f2t * 2.0 * dx_yz_xzzz[j];

                dy_yyyz_xzzz[j] = fr * dy_yyz_xzzz[j] + f2t * (2.0 * dy_yz_xzzz[j] + s_yyz_xzzz[j]);

                dz_yyyz_xzzz[j] = fr * dz_yyz_xzzz[j] + f2t * 2.0 * dz_yz_xzzz[j];

                dx_yyyz_yyyy[j] = fr * dx_yyz_yyyy[j] + f2t * (2.0 * dx_yz_yyyy[j] + 4.0 * dx_yyz_yyy[j]);

                dy_yyyz_yyyy[j] = fr * dy_yyz_yyyy[j] + f2t * (2.0 * dy_yz_yyyy[j] + 4.0 * dy_yyz_yyy[j] + s_yyz_yyyy[j]);

                dz_yyyz_yyyy[j] = fr * dz_yyz_yyyy[j] + f2t * (2.0 * dz_yz_yyyy[j] + 4.0 * dz_yyz_yyy[j]);

                dx_yyyz_yyyz[j] = fr * dx_yyz_yyyz[j] + f2t * (2.0 * dx_yz_yyyz[j] + 3.0 * dx_yyz_yyz[j]);

                dy_yyyz_yyyz[j] = fr * dy_yyz_yyyz[j] + f2t * (2.0 * dy_yz_yyyz[j] + 3.0 * dy_yyz_yyz[j] + s_yyz_yyyz[j]);

                dz_yyyz_yyyz[j] = fr * dz_yyz_yyyz[j] + f2t * (2.0 * dz_yz_yyyz[j] + 3.0 * dz_yyz_yyz[j]);

                dx_yyyz_yyzz[j] = fr * dx_yyz_yyzz[j] + f2t * (2.0 * dx_yz_yyzz[j] + 2.0 * dx_yyz_yzz[j]);

                dy_yyyz_yyzz[j] = fr * dy_yyz_yyzz[j] + f2t * (2.0 * dy_yz_yyzz[j] + 2.0 * dy_yyz_yzz[j] + s_yyz_yyzz[j]);

                dz_yyyz_yyzz[j] = fr * dz_yyz_yyzz[j] + f2t * (2.0 * dz_yz_yyzz[j] + 2.0 * dz_yyz_yzz[j]);

                dx_yyyz_yzzz[j] = fr * dx_yyz_yzzz[j] + f2t * (2.0 * dx_yz_yzzz[j] + dx_yyz_zzz[j]);

                dy_yyyz_yzzz[j] = fr * dy_yyz_yzzz[j] + f2t * (2.0 * dy_yz_yzzz[j] + dy_yyz_zzz[j] + s_yyz_yzzz[j]);

                dz_yyyz_yzzz[j] = fr * dz_yyz_yzzz[j] + f2t * (2.0 * dz_yz_yzzz[j] + dz_yyz_zzz[j]);

                dx_yyyz_zzzz[j] = fr * dx_yyz_zzzz[j] + f2t * 2.0 * dx_yz_zzzz[j];

                dy_yyyz_zzzz[j] = fr * dy_yyz_zzzz[j] + f2t * (2.0 * dy_yz_zzzz[j] + s_yyz_zzzz[j]);

                dz_yyyz_zzzz[j] = fr * dz_yyz_zzzz[j] + f2t * 2.0 * dz_yz_zzzz[j];

                dx_yyzz_xxxx[j] = fr * dx_yzz_xxxx[j] + f2t * dx_zz_xxxx[j];

                dy_yyzz_xxxx[j] = fr * dy_yzz_xxxx[j] + f2t * (dy_zz_xxxx[j] + s_yzz_xxxx[j]);

                dz_yyzz_xxxx[j] = fr * dz_yzz_xxxx[j] + f2t * dz_zz_xxxx[j];

                dx_yyzz_xxxy[j] = fr * dx_yzz_xxxy[j] + f2t * (dx_zz_xxxy[j] + dx_yzz_xxx[j]);

                dy_yyzz_xxxy[j] = fr * dy_yzz_xxxy[j] + f2t * (dy_zz_xxxy[j] + dy_yzz_xxx[j] + s_yzz_xxxy[j]);

                dz_yyzz_xxxy[j] = fr * dz_yzz_xxxy[j] + f2t * (dz_zz_xxxy[j] + dz_yzz_xxx[j]);

                dx_yyzz_xxxz[j] = fr * dx_yzz_xxxz[j] + f2t * dx_zz_xxxz[j];

                dy_yyzz_xxxz[j] = fr * dy_yzz_xxxz[j] + f2t * (dy_zz_xxxz[j] + s_yzz_xxxz[j]);

                dz_yyzz_xxxz[j] = fr * dz_yzz_xxxz[j] + f2t * dz_zz_xxxz[j];

                dx_yyzz_xxyy[j] = fr * dx_yzz_xxyy[j] + f2t * (dx_zz_xxyy[j] + 2.0 * dx_yzz_xxy[j]);

                dy_yyzz_xxyy[j] = fr * dy_yzz_xxyy[j] + f2t * (dy_zz_xxyy[j] + 2.0 * dy_yzz_xxy[j] + s_yzz_xxyy[j]);

                dz_yyzz_xxyy[j] = fr * dz_yzz_xxyy[j] + f2t * (dz_zz_xxyy[j] + 2.0 * dz_yzz_xxy[j]);

                dx_yyzz_xxyz[j] = fr * dx_yzz_xxyz[j] + f2t * (dx_zz_xxyz[j] + dx_yzz_xxz[j]);

                dy_yyzz_xxyz[j] = fr * dy_yzz_xxyz[j] + f2t * (dy_zz_xxyz[j] + dy_yzz_xxz[j] + s_yzz_xxyz[j]);

                dz_yyzz_xxyz[j] = fr * dz_yzz_xxyz[j] + f2t * (dz_zz_xxyz[j] + dz_yzz_xxz[j]);

                dx_yyzz_xxzz[j] = fr * dx_yzz_xxzz[j] + f2t * dx_zz_xxzz[j];

                dy_yyzz_xxzz[j] = fr * dy_yzz_xxzz[j] + f2t * (dy_zz_xxzz[j] + s_yzz_xxzz[j]);

                dz_yyzz_xxzz[j] = fr * dz_yzz_xxzz[j] + f2t * dz_zz_xxzz[j];

                dx_yyzz_xyyy[j] = fr * dx_yzz_xyyy[j] + f2t * (dx_zz_xyyy[j] + 3.0 * dx_yzz_xyy[j]);

                dy_yyzz_xyyy[j] = fr * dy_yzz_xyyy[j] + f2t * (dy_zz_xyyy[j] + 3.0 * dy_yzz_xyy[j] + s_yzz_xyyy[j]);

                dz_yyzz_xyyy[j] = fr * dz_yzz_xyyy[j] + f2t * (dz_zz_xyyy[j] + 3.0 * dz_yzz_xyy[j]);

                dx_yyzz_xyyz[j] = fr * dx_yzz_xyyz[j] + f2t * (dx_zz_xyyz[j] + 2.0 * dx_yzz_xyz[j]);

                dy_yyzz_xyyz[j] = fr * dy_yzz_xyyz[j] + f2t * (dy_zz_xyyz[j] + 2.0 * dy_yzz_xyz[j] + s_yzz_xyyz[j]);

                dz_yyzz_xyyz[j] = fr * dz_yzz_xyyz[j] + f2t * (dz_zz_xyyz[j] + 2.0 * dz_yzz_xyz[j]);

                dx_yyzz_xyzz[j] = fr * dx_yzz_xyzz[j] + f2t * (dx_zz_xyzz[j] + dx_yzz_xzz[j]);

                dy_yyzz_xyzz[j] = fr * dy_yzz_xyzz[j] + f2t * (dy_zz_xyzz[j] + dy_yzz_xzz[j] + s_yzz_xyzz[j]);

                dz_yyzz_xyzz[j] = fr * dz_yzz_xyzz[j] + f2t * (dz_zz_xyzz[j] + dz_yzz_xzz[j]);

                dx_yyzz_xzzz[j] = fr * dx_yzz_xzzz[j] + f2t * dx_zz_xzzz[j];

                dy_yyzz_xzzz[j] = fr * dy_yzz_xzzz[j] + f2t * (dy_zz_xzzz[j] + s_yzz_xzzz[j]);

                dz_yyzz_xzzz[j] = fr * dz_yzz_xzzz[j] + f2t * dz_zz_xzzz[j];

                dx_yyzz_yyyy[j] = fr * dx_yzz_yyyy[j] + f2t * (dx_zz_yyyy[j] + 4.0 * dx_yzz_yyy[j]);

                dy_yyzz_yyyy[j] = fr * dy_yzz_yyyy[j] + f2t * (dy_zz_yyyy[j] + 4.0 * dy_yzz_yyy[j] + s_yzz_yyyy[j]);

                dz_yyzz_yyyy[j] = fr * dz_yzz_yyyy[j] + f2t * (dz_zz_yyyy[j] + 4.0 * dz_yzz_yyy[j]);

                dx_yyzz_yyyz[j] = fr * dx_yzz_yyyz[j] + f2t * (dx_zz_yyyz[j] + 3.0 * dx_yzz_yyz[j]);

                dy_yyzz_yyyz[j] = fr * dy_yzz_yyyz[j] + f2t * (dy_zz_yyyz[j] + 3.0 * dy_yzz_yyz[j] + s_yzz_yyyz[j]);

                dz_yyzz_yyyz[j] = fr * dz_yzz_yyyz[j] + f2t * (dz_zz_yyyz[j] + 3.0 * dz_yzz_yyz[j]);

                dx_yyzz_yyzz[j] = fr * dx_yzz_yyzz[j] + f2t * (dx_zz_yyzz[j] + 2.0 * dx_yzz_yzz[j]);

                dy_yyzz_yyzz[j] = fr * dy_yzz_yyzz[j] + f2t * (dy_zz_yyzz[j] + 2.0 * dy_yzz_yzz[j] + s_yzz_yyzz[j]);

                dz_yyzz_yyzz[j] = fr * dz_yzz_yyzz[j] + f2t * (dz_zz_yyzz[j] + 2.0 * dz_yzz_yzz[j]);

                dx_yyzz_yzzz[j] = fr * dx_yzz_yzzz[j] + f2t * (dx_zz_yzzz[j] + dx_yzz_zzz[j]);

                dy_yyzz_yzzz[j] = fr * dy_yzz_yzzz[j] + f2t * (dy_zz_yzzz[j] + dy_yzz_zzz[j] + s_yzz_yzzz[j]);

                dz_yyzz_yzzz[j] = fr * dz_yzz_yzzz[j] + f2t * (dz_zz_yzzz[j] + dz_yzz_zzz[j]);

                dx_yyzz_zzzz[j] = fr * dx_yzz_zzzz[j] + f2t * dx_zz_zzzz[j];

                dy_yyzz_zzzz[j] = fr * dy_yzz_zzzz[j] + f2t * (dy_zz_zzzz[j] + s_yzz_zzzz[j]);

                dz_yyzz_zzzz[j] = fr * dz_yzz_zzzz[j] + f2t * dz_zz_zzzz[j];

                dx_yzzz_xxxx[j] = fr * dx_zzz_xxxx[j];

                dy_yzzz_xxxx[j] = fr * dy_zzz_xxxx[j] + f2t * s_zzz_xxxx[j];

                dz_yzzz_xxxx[j] = fr * dz_zzz_xxxx[j];

                dx_yzzz_xxxy[j] = fr * dx_zzz_xxxy[j] + f2t * dx_zzz_xxx[j];

                dy_yzzz_xxxy[j] = fr * dy_zzz_xxxy[j] + f2t * (dy_zzz_xxx[j] + s_zzz_xxxy[j]);

                dz_yzzz_xxxy[j] = fr * dz_zzz_xxxy[j] + f2t * dz_zzz_xxx[j];

                dx_yzzz_xxxz[j] = fr * dx_zzz_xxxz[j];

                dy_yzzz_xxxz[j] = fr * dy_zzz_xxxz[j] + f2t * s_zzz_xxxz[j];

                dz_yzzz_xxxz[j] = fr * dz_zzz_xxxz[j];

                dx_yzzz_xxyy[j] = fr * dx_zzz_xxyy[j] + f2t * 2.0 * dx_zzz_xxy[j];

                dy_yzzz_xxyy[j] = fr * dy_zzz_xxyy[j] + f2t * (2.0 * dy_zzz_xxy[j] + s_zzz_xxyy[j]);

                dz_yzzz_xxyy[j] = fr * dz_zzz_xxyy[j] + f2t * 2.0 * dz_zzz_xxy[j];

                dx_yzzz_xxyz[j] = fr * dx_zzz_xxyz[j] + f2t * dx_zzz_xxz[j];

                dy_yzzz_xxyz[j] = fr * dy_zzz_xxyz[j] + f2t * (dy_zzz_xxz[j] + s_zzz_xxyz[j]);

                dz_yzzz_xxyz[j] = fr * dz_zzz_xxyz[j] + f2t * dz_zzz_xxz[j];

                dx_yzzz_xxzz[j] = fr * dx_zzz_xxzz[j];

                dy_yzzz_xxzz[j] = fr * dy_zzz_xxzz[j] + f2t * s_zzz_xxzz[j];

                dz_yzzz_xxzz[j] = fr * dz_zzz_xxzz[j];

                dx_yzzz_xyyy[j] = fr * dx_zzz_xyyy[j] + f2t * 3.0 * dx_zzz_xyy[j];

                dy_yzzz_xyyy[j] = fr * dy_zzz_xyyy[j] + f2t * (3.0 * dy_zzz_xyy[j] + s_zzz_xyyy[j]);

                dz_yzzz_xyyy[j] = fr * dz_zzz_xyyy[j] + f2t * 3.0 * dz_zzz_xyy[j];

                dx_yzzz_xyyz[j] = fr * dx_zzz_xyyz[j] + f2t * 2.0 * dx_zzz_xyz[j];

                dy_yzzz_xyyz[j] = fr * dy_zzz_xyyz[j] + f2t * (2.0 * dy_zzz_xyz[j] + s_zzz_xyyz[j]);

                dz_yzzz_xyyz[j] = fr * dz_zzz_xyyz[j] + f2t * 2.0 * dz_zzz_xyz[j];

                dx_yzzz_xyzz[j] = fr * dx_zzz_xyzz[j] + f2t * dx_zzz_xzz[j];

                dy_yzzz_xyzz[j] = fr * dy_zzz_xyzz[j] + f2t * (dy_zzz_xzz[j] + s_zzz_xyzz[j]);

                dz_yzzz_xyzz[j] = fr * dz_zzz_xyzz[j] + f2t * dz_zzz_xzz[j];

                dx_yzzz_xzzz[j] = fr * dx_zzz_xzzz[j];

                dy_yzzz_xzzz[j] = fr * dy_zzz_xzzz[j] + f2t * s_zzz_xzzz[j];

                dz_yzzz_xzzz[j] = fr * dz_zzz_xzzz[j];

                dx_yzzz_yyyy[j] = fr * dx_zzz_yyyy[j] + f2t * 4.0 * dx_zzz_yyy[j];

                dy_yzzz_yyyy[j] = fr * dy_zzz_yyyy[j] + f2t * (4.0 * dy_zzz_yyy[j] + s_zzz_yyyy[j]);

                dz_yzzz_yyyy[j] = fr * dz_zzz_yyyy[j] + f2t * 4.0 * dz_zzz_yyy[j];

                dx_yzzz_yyyz[j] = fr * dx_zzz_yyyz[j] + f2t * 3.0 * dx_zzz_yyz[j];

                dy_yzzz_yyyz[j] = fr * dy_zzz_yyyz[j] + f2t * (3.0 * dy_zzz_yyz[j] + s_zzz_yyyz[j]);

                dz_yzzz_yyyz[j] = fr * dz_zzz_yyyz[j] + f2t * 3.0 * dz_zzz_yyz[j];

                dx_yzzz_yyzz[j] = fr * dx_zzz_yyzz[j] + f2t * 2.0 * dx_zzz_yzz[j];

                dy_yzzz_yyzz[j] = fr * dy_zzz_yyzz[j] + f2t * (2.0 * dy_zzz_yzz[j] + s_zzz_yyzz[j]);

                dz_yzzz_yyzz[j] = fr * dz_zzz_yyzz[j] + f2t * 2.0 * dz_zzz_yzz[j];

                dx_yzzz_yzzz[j] = fr * dx_zzz_yzzz[j] + f2t * dx_zzz_zzz[j];

                dy_yzzz_yzzz[j] = fr * dy_zzz_yzzz[j] + f2t * (dy_zzz_zzz[j] + s_zzz_yzzz[j]);

                dz_yzzz_yzzz[j] = fr * dz_zzz_yzzz[j] + f2t * dz_zzz_zzz[j];

                dx_yzzz_zzzz[j] = fr * dx_zzz_zzzz[j];

                dy_yzzz_zzzz[j] = fr * dy_zzz_zzzz[j] + f2t * s_zzz_zzzz[j];

                dz_yzzz_zzzz[j] = fr * dz_zzz_zzzz[j];

                // leading z component

                fr = paz[j];

                dx_zzzz_xxxx[j] = fr * dx_zzz_xxxx[j] + f2t * 3.0 * dx_zz_xxxx[j];

                dy_zzzz_xxxx[j] = fr * dy_zzz_xxxx[j] + f2t * 3.0 * dy_zz_xxxx[j];

                dz_zzzz_xxxx[j] = fr * dz_zzz_xxxx[j] + f2t * (3.0 * dz_zz_xxxx[j] + s_zzz_xxxx[j]);

                dx_zzzz_xxxy[j] = fr * dx_zzz_xxxy[j] + f2t * 3.0 * dx_zz_xxxy[j];

                dy_zzzz_xxxy[j] = fr * dy_zzz_xxxy[j] + f2t * 3.0 * dy_zz_xxxy[j];

                dz_zzzz_xxxy[j] = fr * dz_zzz_xxxy[j] + f2t * (3.0 * dz_zz_xxxy[j] + s_zzz_xxxy[j]);

                dx_zzzz_xxxz[j] = fr * dx_zzz_xxxz[j] + f2t * (3.0 * dx_zz_xxxz[j] + dx_zzz_xxx[j]);

                dy_zzzz_xxxz[j] = fr * dy_zzz_xxxz[j] + f2t * (3.0 * dy_zz_xxxz[j] + dy_zzz_xxx[j]);

                dz_zzzz_xxxz[j] = fr * dz_zzz_xxxz[j] + f2t * (3.0 * dz_zz_xxxz[j] + dz_zzz_xxx[j] + s_zzz_xxxz[j]);

                dx_zzzz_xxyy[j] = fr * dx_zzz_xxyy[j] + f2t * 3.0 * dx_zz_xxyy[j];

                dy_zzzz_xxyy[j] = fr * dy_zzz_xxyy[j] + f2t * 3.0 * dy_zz_xxyy[j];

                dz_zzzz_xxyy[j] = fr * dz_zzz_xxyy[j] + f2t * (3.0 * dz_zz_xxyy[j] + s_zzz_xxyy[j]);

                dx_zzzz_xxyz[j] = fr * dx_zzz_xxyz[j] + f2t * (3.0 * dx_zz_xxyz[j] + dx_zzz_xxy[j]);

                dy_zzzz_xxyz[j] = fr * dy_zzz_xxyz[j] + f2t * (3.0 * dy_zz_xxyz[j] + dy_zzz_xxy[j]);

                dz_zzzz_xxyz[j] = fr * dz_zzz_xxyz[j] + f2t * (3.0 * dz_zz_xxyz[j] + dz_zzz_xxy[j] + s_zzz_xxyz[j]);

                dx_zzzz_xxzz[j] = fr * dx_zzz_xxzz[j] + f2t * (3.0 * dx_zz_xxzz[j] + 2.0 * dx_zzz_xxz[j]);

                dy_zzzz_xxzz[j] = fr * dy_zzz_xxzz[j] + f2t * (3.0 * dy_zz_xxzz[j] + 2.0 * dy_zzz_xxz[j]);

                dz_zzzz_xxzz[j] = fr * dz_zzz_xxzz[j] + f2t * (3.0 * dz_zz_xxzz[j] + 2.0 * dz_zzz_xxz[j] + s_zzz_xxzz[j]);

                dx_zzzz_xyyy[j] = fr * dx_zzz_xyyy[j] + f2t * 3.0 * dx_zz_xyyy[j];

                dy_zzzz_xyyy[j] = fr * dy_zzz_xyyy[j] + f2t * 3.0 * dy_zz_xyyy[j];

                dz_zzzz_xyyy[j] = fr * dz_zzz_xyyy[j] + f2t * (3.0 * dz_zz_xyyy[j] + s_zzz_xyyy[j]);

                dx_zzzz_xyyz[j] = fr * dx_zzz_xyyz[j] + f2t * (3.0 * dx_zz_xyyz[j] + dx_zzz_xyy[j]);

                dy_zzzz_xyyz[j] = fr * dy_zzz_xyyz[j] + f2t * (3.0 * dy_zz_xyyz[j] + dy_zzz_xyy[j]);

                dz_zzzz_xyyz[j] = fr * dz_zzz_xyyz[j] + f2t * (3.0 * dz_zz_xyyz[j] + dz_zzz_xyy[j] + s_zzz_xyyz[j]);

                dx_zzzz_xyzz[j] = fr * dx_zzz_xyzz[j] + f2t * (3.0 * dx_zz_xyzz[j] + 2.0 * dx_zzz_xyz[j]);

                dy_zzzz_xyzz[j] = fr * dy_zzz_xyzz[j] + f2t * (3.0 * dy_zz_xyzz[j] + 2.0 * dy_zzz_xyz[j]);

                dz_zzzz_xyzz[j] = fr * dz_zzz_xyzz[j] + f2t * (3.0 * dz_zz_xyzz[j] + 2.0 * dz_zzz_xyz[j] + s_zzz_xyzz[j]);

                dx_zzzz_xzzz[j] = fr * dx_zzz_xzzz[j] + f2t * (3.0 * dx_zz_xzzz[j] + 3.0 * dx_zzz_xzz[j]);

                dy_zzzz_xzzz[j] = fr * dy_zzz_xzzz[j] + f2t * (3.0 * dy_zz_xzzz[j] + 3.0 * dy_zzz_xzz[j]);

                dz_zzzz_xzzz[j] = fr * dz_zzz_xzzz[j] + f2t * (3.0 * dz_zz_xzzz[j] + 3.0 * dz_zzz_xzz[j] + s_zzz_xzzz[j]);

                dx_zzzz_yyyy[j] = fr * dx_zzz_yyyy[j] + f2t * 3.0 * dx_zz_yyyy[j];

                dy_zzzz_yyyy[j] = fr * dy_zzz_yyyy[j] + f2t * 3.0 * dy_zz_yyyy[j];

                dz_zzzz_yyyy[j] = fr * dz_zzz_yyyy[j] + f2t * (3.0 * dz_zz_yyyy[j] + s_zzz_yyyy[j]);

                dx_zzzz_yyyz[j] = fr * dx_zzz_yyyz[j] + f2t * (3.0 * dx_zz_yyyz[j] + dx_zzz_yyy[j]);

                dy_zzzz_yyyz[j] = fr * dy_zzz_yyyz[j] + f2t * (3.0 * dy_zz_yyyz[j] + dy_zzz_yyy[j]);

                dz_zzzz_yyyz[j] = fr * dz_zzz_yyyz[j] + f2t * (3.0 * dz_zz_yyyz[j] + dz_zzz_yyy[j] + s_zzz_yyyz[j]);

                dx_zzzz_yyzz[j] = fr * dx_zzz_yyzz[j] + f2t * (3.0 * dx_zz_yyzz[j] + 2.0 * dx_zzz_yyz[j]);

                dy_zzzz_yyzz[j] = fr * dy_zzz_yyzz[j] + f2t * (3.0 * dy_zz_yyzz[j] + 2.0 * dy_zzz_yyz[j]);

                dz_zzzz_yyzz[j] = fr * dz_zzz_yyzz[j] + f2t * (3.0 * dz_zz_yyzz[j] + 2.0 * dz_zzz_yyz[j] + s_zzz_yyzz[j]);

                dx_zzzz_yzzz[j] = fr * dx_zzz_yzzz[j] + f2t * (3.0 * dx_zz_yzzz[j] + 3.0 * dx_zzz_yzz[j]);

                dy_zzzz_yzzz[j] = fr * dy_zzz_yzzz[j] + f2t * (3.0 * dy_zz_yzzz[j] + 3.0 * dy_zzz_yzz[j]);

                dz_zzzz_yzzz[j] = fr * dz_zzz_yzzz[j] + f2t * (3.0 * dz_zz_yzzz[j] + 3.0 * dz_zzz_yzz[j] + s_zzz_yzzz[j]);

                dx_zzzz_zzzz[j] = fr * dx_zzz_zzzz[j] + f2t * (3.0 * dx_zz_zzzz[j] + 4.0 * dx_zzz_zzz[j]);

                dy_zzzz_zzzz[j] = fr * dy_zzz_zzzz[j] + f2t * (3.0 * dy_zz_zzzz[j] + 4.0 * dy_zzz_zzz[j]);

                dz_zzzz_zzzz[j] = fr * dz_zzz_zzzz[j] + f2t * (3.0 * dz_zz_zzzz[j] + 4.0 * dz_zzz_zzz[j] + s_zzz_zzzz[j]);
            }

            idx++;
        }
    }
    
} // ediprecfunc namespace
