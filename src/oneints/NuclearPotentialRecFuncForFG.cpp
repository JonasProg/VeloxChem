//
//                             VELOXCHEM
//      ---------------------------------------------------
//                     An Electronic Structure Code
//
//  Copyright Â© 2019 by VeloxChem developers. All rights reserved.
//  Contact: Zilvinas Rinkevicius (rinkevic@kth.se), KTH, Sweden.

#include "NuclearPotentialRecFuncForFG.hpp"

namespace npotrecfunc { // npotrecfunc namespace

    void
    compNuclearPotentialForFG(      CMemBlock2D<double>& primBuffer,
                              const CMemBlock2D<double>& auxBuffer,
                              const CMemBlock2D<double>& osFactors,
                              const CMemBlock2D<double>& paDistances,
                              const CMemBlock2D<double>& pbDistances,
                              const CMemBlock2D<double>& pcDistances,
                              const CGtoBlock&           braGtoBlock,
                              const CGtoBlock&           ketGtoBlock,
                              const int32_t              iContrGto)
    {
        npotrecfunc::compNuclearPotentialForFG_0_3(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_3_6(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_6_9(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                   braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_9_12(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                    braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_12_15(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_15_18(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_18_21(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_21_24(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_24_27(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_27_30(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_30_33(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_33_36(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_36_39(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_39_42(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_42_45(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_45_48(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_48_51(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_51_54(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_54_57(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_57_60(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_60_63(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_63_66(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_66_69(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_69_72(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_72_75(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_75_78(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_78_81(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_81_84(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_84_87(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_87_90(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_90_93(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_93_96(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_96_99(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                     braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_99_102(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                      braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_102_105(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_105_108(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_108_111(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_111_114(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_114_117(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_117_120(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_120_123(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_123_126(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_126_129(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_129_132(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_132_135(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_135_138(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_138_141(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_141_144(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_144_147(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 

        npotrecfunc::compNuclearPotentialForFG_147_150(primBuffer, auxBuffer, osFactors, paDistances, pbDistances, pcDistances, 
                                                       braGtoBlock, ketGtoBlock, iContrGto); 
    }

    void
    compNuclearPotentialForFG_0_3(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (0,3)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxx = pcDistances.data(119 * idx + 83);

            auto pc_xxxxxxy = pcDistances.data(119 * idx + 84);

            auto pc_xxxxxxz = pcDistances.data(119 * idx + 85);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxx_xxxx = primBuffer.data(150 * idx);

            auto t_xxx_xxxy = primBuffer.data(150 * idx + 1);

            auto t_xxx_xxxz = primBuffer.data(150 * idx + 2);

            // Batch of Integrals (0,3)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, pb_xxxz, pb_xxy, \
                                     pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxx, \
                                     pc_xxxxxxx, pc_xxxxxxy, pc_xxxxxxz, pc_xxxxxy, pc_xxxxxz, pc_xxxxy, pc_xxxxz, \
                                     pc_xxxy, pc_xxxz, pc_xxy, pc_xxz, pc_xy, pc_xz, pc_y, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxx_xxxx, t_xxx_xxxy, t_xxx_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxx_xxxx[j] = fl_s_0_0_0 * (5.625 * pa_x[j] * fl3_fx + 7.5 * fl3_fx * pb_x[j] + 0.75 * pa_xxx[j] * fl2_fx + 9.0 * pa_xx[j] * fl2_fx * pb_x[j] + 13.5 * pa_x[j] * fl2_fx * pb_xx[j] + 3.0 * fl2_fx * pb_xxx[j] + 3.0 * pa_xxx[j] * pb_xx[j] * fl1_fx + 6.0 * pa_xx[j] * fl1_fx * pb_xxx[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxxx[j] + pa_xxx[j] * pb_xxxx[j]);

                t_xxx_xxxx[j] += fl_s_0_0_1 * (-16.875 * pa_x[j] * fl3_fx - 13.125 * pc_x[j] * fl3_fx - 22.5 * fl3_fx * pb_x[j] - 1.5 * pa_xxx[j] * fl2_fx - 11.25 * pa_xx[j] * pc_x[j] * fl2_fx - 18.0 * pa_xx[j] * fl2_fx * pb_x[j] - 45.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 27.0 * pa_x[j] * fl2_fx * pb_xx[j] - 22.5 * pc_x[j] * fl2_fx * pb_xx[j] - 6.0 * fl2_fx * pb_xxx[j] - 3.0 * pa_xxx[j] * pb_xx[j] * fl1_fx - 6.0 * pa_xxx[j] * pb_x[j] * pc_x[j] * fl1_fx - 27.0 * pa_xx[j] * pc_x[j] * pb_xx[j] * fl1_fx - 6.0 * pa_xx[j] * fl1_fx * pb_xxx[j] - 18.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxxx[j] - 1.5 * pc_x[j] * fl1_fx * pb_xxxx[j] - 4.0 * pa_xxx[j] * pb_xxx[j] * pc_x[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xxxx[j]);

                t_xxx_xxxx[j] += fl_s_0_0_2 * (16.875 * pa_x[j] * fl3_fx + 39.375 * pc_x[j] * fl3_fx + 22.5 * fl3_fx * pb_x[j] + 0.75 * pa_xxx[j] * fl2_fx + 22.5 * pa_xx[j] * pc_x[j] * fl2_fx + 9.0 * pa_xx[j] * fl2_fx * pb_x[j] + 33.75 * pa_x[j] * pc_xx[j] * fl2_fx + 90.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 13.5 * pa_x[j] * fl2_fx * pb_xx[j] + 45.0 * pc_xx[j] * fl2_fx * pb_x[j] + 45.0 * pc_x[j] * fl2_fx * pb_xx[j] + 3.0 * fl2_fx * pb_xxx[j] + 6.0 * pa_xxx[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_xxx[j] * pc_xx[j] * fl1_fx + 27.0 * pa_xx[j] * pc_x[j] * pb_xx[j] * fl1_fx + 36.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx + 54.0 * pa_x[j] * pc_xx[j] * pb_xx[j] * fl1_fx + 18.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] + 12.0 * pc_xx[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_x[j] * fl1_fx * pb_xxxx[j] + 6.0 * pa_xxx[j] * pb_xx[j] * pc_xx[j] + 12.0 * pa_xx[j] * pc_xx[j] * pb_xxx[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xxxx[j]);

                t_xxx_xxxx[j] += fl_s_0_0_3 * (-5.625 * pa_x[j] * fl3_fx - 39.375 * pc_x[j] * fl3_fx - 7.5 * fl3_fx * pb_x[j] - 11.25 * pa_xx[j] * pc_x[j] * fl2_fx - 67.5 * pa_x[j] * pc_xx[j] * fl2_fx - 45.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 26.25 * pc_xxx[j] * fl2_fx - 90.0 * pc_xx[j] * fl2_fx * pb_x[j] - 22.5 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * pa_xxx[j] * pc_xx[j] * fl1_fx - 36.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx - 15.0 * pa_xx[j] * pc_xxx[j] * fl1_fx - 54.0 * pa_x[j] * pc_xx[j] * pb_xx[j] * fl1_fx - 60.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx - 30.0 * pc_xxx[j] * pb_xx[j] * fl1_fx - 12.0 * pc_xx[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_xxx[j] * pb_x[j] * pc_xxx[j] - 18.0 * pa_xx[j] * pc_xxx[j] * pb_xx[j] - 12.0 * pa_x[j] * pc_xxx[j] * pb_xxx[j] - pc_xxx[j] * pb_xxxx[j]);

                t_xxx_xxxx[j] += fl_s_0_0_4 * (13.125 * pc_x[j] * fl3_fx + 33.75 * pa_x[j] * pc_xx[j] * fl2_fx + 52.5 * pc_xxx[j] * fl2_fx + 45.0 * pc_xx[j] * fl2_fx * pb_x[j] + 15.0 * pa_xx[j] * pc_xxx[j] * fl1_fx + 60.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx + 22.5 * pa_x[j] * pc_xxxx[j] * fl1_fx + 30.0 * pc_xxx[j] * pb_xx[j] * fl1_fx + 30.0 * pc_xxxx[j] * pb_x[j] * fl1_fx + pa_xxx[j] * pc_xxxx[j] + 12.0 * pa_xx[j] * pc_xxxx[j] * pb_x[j] + 18.0 * pa_x[j] * pc_xxxx[j] * pb_xx[j] + 4.0 * pc_xxxx[j] * pb_xxx[j]);

                t_xxx_xxxx[j] += fl_s_0_0_5 * (-26.25 * pc_xxx[j] * fl2_fx - 22.5 * pa_x[j] * pc_xxxx[j] * fl1_fx - 30.0 * pc_xxxx[j] * pb_x[j] * fl1_fx - 10.5 * pc_xxxxx[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxxxx[j] - 12.0 * pa_x[j] * pc_xxxxx[j] * pb_x[j] - 6.0 * pc_xxxxx[j] * pb_xx[j]);

                t_xxx_xxxx[j] += fl_s_0_0_6 * (10.5 * pc_xxxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxxx[j] + 4.0 * pc_xxxxxx[j] * pb_x[j]);

                t_xxx_xxxx[j] += -fl_s_0_0_7 * pc_xxxxxxx[j];

                t_xxx_xxxy[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_y[j] + 2.25 * pa_xx[j] * fl2_fx * pb_y[j] + 6.75 * pa_x[j] * fl2_fx * pb_xy[j] + 2.25 * fl2_fx * pb_xxy[j] + 1.5 * pa_xxx[j] * pb_xy[j] * fl1_fx + 4.5 * pa_xx[j] * fl1_fx * pb_xxy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxxy[j] + pa_xxx[j] * pb_xxxy[j]);

                t_xxx_xxxy[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_y[j] - 5.625 * fl3_fx * pb_y[j] - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 4.5 * pa_xx[j] * fl2_fx * pb_y[j] - 11.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 6.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 13.5 * pa_x[j] * fl2_fx * pb_xy[j] - 11.25 * pc_x[j] * fl2_fx * pb_xy[j] - 2.25 * fl2_fx * pb_xx[j] * pc_y[j] - 4.5 * fl2_fx * pb_xxy[j] - 1.5 * pa_xxx[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_xxx[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_y[j] - 13.5 * pa_xx[j] * pc_x[j] * pb_xy[j] * fl1_fx - 4.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] - 4.5 * pa_xx[j] * fl1_fx * pb_xxy[j] - 13.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxxy[j] - 1.5 * pc_x[j] * fl1_fx * pb_xxxy[j] - pa_xxx[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_xxx[j] * pb_xxy[j] * pc_x[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xxxy[j]);

                t_xxx_xxxy[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_y[j] + 5.625 * fl3_fx * pb_y[j] + 4.5 * pa_xx[j] * fl2_fx * pc_y[j] + 2.25 * pa_xx[j] * fl2_fx * pb_y[j] + 11.25 * pa_x[j] * pc_xy[j] * fl2_fx + 22.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 13.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 6.75 * pa_x[j] * fl2_fx * pb_xy[j] + 11.25 * pc_xx[j] * fl2_fx * pb_y[j] + 11.25 * pc_xy[j] * fl2_fx * pb_x[j] + 22.5 * pc_x[j] * fl2_fx * pb_xy[j] + 4.5 * fl2_fx * pb_xx[j] * pc_y[j] + 2.25 * fl2_fx * pb_xxy[j] + 1.5 * pa_xxx[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_y[j] + 13.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + 13.5 * pa_xx[j] * pc_x[j] * pb_xy[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] + 4.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] + 27.0 * pa_x[j] * pc_xx[j] * pb_xy[j] * fl1_fx + 13.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 13.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] + 9.0 * pc_xx[j] * fl1_fx * pb_xxy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_y[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_x[j] * fl1_fx * pb_xxxy[j] + 3.0 * pa_xxx[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_xxx[j] * pb_xy[j] * pc_xx[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xxx[j] + 9.0 * pa_xx[j] * pc_xx[j] * pb_xxy[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xxxy[j]);

                t_xxx_xxxy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 1.875 * fl3_fx * pb_y[j] - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 22.5 * pa_x[j] * pc_xy[j] * fl2_fx - 11.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 6.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 11.25 * pc_xxy[j] * fl2_fx - 22.5 * pc_xx[j] * fl2_fx * pb_y[j] - 22.5 * pc_xy[j] * fl2_fx * pb_x[j] - 11.25 * pc_x[j] * fl2_fx * pb_xy[j] - 2.25 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx - 13.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_y[j] - 27.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 27.0 * pa_x[j] * pc_xx[j] * pb_xy[j] * fl1_fx - 15.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - 13.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 15.0 * pc_xxx[j] * pb_xy[j] * fl1_fx - 9.0 * pc_xxy[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xx[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xxx[j] * pb_x[j] * pc_xxy[j] - pa_xxx[j] * pc_xxx[j] * pb_y[j] - 9.0 * pa_xx[j] * pc_xxy[j] * pb_xx[j] - 9.0 * pa_xx[j] * pc_xxx[j] * pb_xy[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xxx[j] - 9.0 * pa_x[j] * pc_xxx[j] * pb_xxy[j] - pc_xxx[j] * pb_xxxy[j]);

                t_xxx_xxxy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 11.25 * pa_x[j] * pc_xy[j] * fl2_fx + 22.5 * pc_xxy[j] * fl2_fx + 11.25 * pc_xx[j] * fl2_fx * pb_y[j] + 11.25 * pc_xy[j] * fl2_fx * pb_x[j] + 9.0 * pa_xx[j] * pc_xxy[j] * fl1_fx + 27.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 15.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 15.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + 15.0 * pc_xxxy[j] * pb_x[j] * fl1_fx + 15.0 * pc_xxx[j] * pb_xy[j] * fl1_fx + 7.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxy[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxxy[j] + 9.0 * pa_xx[j] * pc_xxxy[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxxx[j] * pb_y[j] + 9.0 * pa_x[j] * pc_xxxy[j] * pb_xx[j] + 9.0 * pa_x[j] * pc_xxxx[j] * pb_xy[j] + pc_xxxy[j] * pb_xxx[j] + 3.0 * pc_xxxx[j] * pb_xxy[j]);

                t_xxx_xxxy[j] += fl_s_0_0_5 * (-11.25 * pc_xxy[j] * fl2_fx - 15.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 15.0 * pc_xxxy[j] * pb_x[j] * fl1_fx - 7.5 * pc_xxxxy[j] * fl1_fx - 7.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - 3.0 * pa_xx[j] * pc_xxxxy[j] - 9.0 * pa_x[j] * pc_xxxxy[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxxx[j] * pb_y[j] - 3.0 * pc_xxxxy[j] * pb_xx[j] - 3.0 * pc_xxxxx[j] * pb_xy[j]);

                t_xxx_xxxy[j] += fl_s_0_0_6 * (7.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxxy[j] + 3.0 * pc_xxxxxy[j] * pb_x[j] + pc_xxxxxx[j] * pb_y[j]);

                t_xxx_xxxy[j] += -fl_s_0_0_7 * pc_xxxxxxy[j];

                t_xxx_xxxz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_z[j] + 2.25 * pa_xx[j] * fl2_fx * pb_z[j] + 6.75 * pa_x[j] * fl2_fx * pb_xz[j] + 2.25 * fl2_fx * pb_xxz[j] + 1.5 * pa_xxx[j] * pb_xz[j] * fl1_fx + 4.5 * pa_xx[j] * fl1_fx * pb_xxz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxxz[j] + pa_xxx[j] * pb_xxxz[j]);

                t_xxx_xxxz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_z[j] - 5.625 * fl3_fx * pb_z[j] - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 4.5 * pa_xx[j] * fl2_fx * pb_z[j] - 11.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 6.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 13.5 * pa_x[j] * fl2_fx * pb_xz[j] - 11.25 * pc_x[j] * fl2_fx * pb_xz[j] - 2.25 * fl2_fx * pb_xx[j] * pc_z[j] - 4.5 * fl2_fx * pb_xxz[j] - 1.5 * pa_xxx[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_xxx[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] - 13.5 * pa_xx[j] * pc_x[j] * pb_xz[j] * fl1_fx - 4.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] - 4.5 * pa_xx[j] * fl1_fx * pb_xxz[j] - 13.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxxz[j] - 1.5 * pc_x[j] * fl1_fx * pb_xxxz[j] - pa_xxx[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_xxx[j] * pb_xxz[j] * pc_x[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xxxz[j]);

                t_xxx_xxxz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pb_z[j] + 4.5 * pa_xx[j] * fl2_fx * pc_z[j] + 2.25 * pa_xx[j] * fl2_fx * pb_z[j] + 11.25 * pa_x[j] * pc_xz[j] * fl2_fx + 22.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 13.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 6.75 * pa_x[j] * fl2_fx * pb_xz[j] + 11.25 * pc_xx[j] * fl2_fx * pb_z[j] + 11.25 * pc_xz[j] * fl2_fx * pb_x[j] + 22.5 * pc_x[j] * fl2_fx * pb_xz[j] + 4.5 * fl2_fx * pb_xx[j] * pc_z[j] + 2.25 * fl2_fx * pb_xxz[j] + 1.5 * pa_xxx[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] + 13.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + 13.5 * pa_xx[j] * pc_x[j] * pb_xz[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] + 27.0 * pa_x[j] * pc_xx[j] * pb_xz[j] * fl1_fx + 13.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 13.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] + 9.0 * pc_xx[j] * fl1_fx * pb_xxz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_z[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_x[j] * fl1_fx * pb_xxxz[j] + 3.0 * pa_xxx[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_xxx[j] * pb_xz[j] * pc_xx[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xxx[j] + 9.0 * pa_xx[j] * pc_xx[j] * pb_xxz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xxxz[j]);

                t_xxx_xxxz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pb_z[j] - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 22.5 * pa_x[j] * pc_xz[j] * fl2_fx - 11.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 6.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 11.25 * pc_xxz[j] * fl2_fx - 22.5 * pc_xx[j] * fl2_fx * pb_z[j] - 22.5 * pc_xz[j] * fl2_fx * pb_x[j] - 11.25 * pc_x[j] * fl2_fx * pb_xz[j] - 2.25 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx - 13.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] - 27.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 27.0 * pa_x[j] * pc_xx[j] * pb_xz[j] * fl1_fx - 15.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 13.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 15.0 * pc_xxx[j] * pb_xz[j] * fl1_fx - 9.0 * pc_xxz[j] * fl1_fx * pb_xx[j] - 9.0 * pc_xx[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xxx[j] * pb_x[j] * pc_xxz[j] - pa_xxx[j] * pc_xxx[j] * pb_z[j] - 9.0 * pa_xx[j] * pc_xxz[j] * pb_xx[j] - 9.0 * pa_xx[j] * pc_xxx[j] * pb_xz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xxx[j] - 9.0 * pa_x[j] * pc_xxx[j] * pb_xxz[j] - pc_xxx[j] * pb_xxxz[j]);

                t_xxx_xxxz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 11.25 * pa_x[j] * pc_xz[j] * fl2_fx + 22.5 * pc_xxz[j] * fl2_fx + 11.25 * pc_xx[j] * fl2_fx * pb_z[j] + 11.25 * pc_xz[j] * fl2_fx * pb_x[j] + 9.0 * pa_xx[j] * pc_xxz[j] * fl1_fx + 27.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 15.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 15.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 15.0 * pc_xxxz[j] * pb_x[j] * fl1_fx + 15.0 * pc_xxx[j] * pb_xz[j] * fl1_fx + 7.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxz[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxxz[j] + 9.0 * pa_xx[j] * pc_xxxz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxxx[j] * pb_z[j] + 9.0 * pa_x[j] * pc_xxxz[j] * pb_xx[j] + 9.0 * pa_x[j] * pc_xxxx[j] * pb_xz[j] + pc_xxxz[j] * pb_xxx[j] + 3.0 * pc_xxxx[j] * pb_xxz[j]);

                t_xxx_xxxz[j] += fl_s_0_0_5 * (-11.25 * pc_xxz[j] * fl2_fx - 15.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 15.0 * pc_xxxz[j] * pb_x[j] * fl1_fx - 7.5 * pc_xxxxz[j] * fl1_fx - 7.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xxxxz[j] - 9.0 * pa_x[j] * pc_xxxxz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxxx[j] * pb_z[j] - 3.0 * pc_xxxxz[j] * pb_xx[j] - 3.0 * pc_xxxxx[j] * pb_xz[j]);

                t_xxx_xxxz[j] += fl_s_0_0_6 * (7.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxxz[j] + 3.0 * pc_xxxxxz[j] * pb_x[j] + pc_xxxxxx[j] * pb_z[j]);

                t_xxx_xxxz[j] += -fl_s_0_0_7 * pc_xxxxxxz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_3_6(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (3,6)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyy = pcDistances.data(119 * idx + 86);

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            auto pc_xxxxxzz = pcDistances.data(119 * idx + 88);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxx_xxyy = primBuffer.data(150 * idx + 3);

            auto t_xxx_xxyz = primBuffer.data(150 * idx + 4);

            auto t_xxx_xxzz = primBuffer.data(150 * idx + 5);

            // Batch of Integrals (3,6)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, pb_xxz, pb_xxzz, \
                                     pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxx, pc_xxxxxy, pc_xxxxxyy, pc_xxxxxyz, pc_xxxxxz, \
                                     pc_xxxxxzz, pc_xxxxy, pc_xxxxyy, pc_xxxxyz, pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyy, \
                                     pc_xxxyz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, \
                                     pc_xyz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxx_xxyy, t_xxx_xxyz, t_xxx_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxx_xxyy[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pb_xyy[j] + 0.5 * pa_xxx[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xyy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxyy[j] + pa_xxx[j] * pb_xxyy[j]);

                t_xxx_xxyy[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 0.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 3.0 * pa_xx[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 4.5 * pa_x[j] * fl2_fx * pb_yy[j] - 3.75 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pb_xy[j] * pc_y[j] - 3.0 * fl2_fx * pb_xyy[j] - 0.5 * pa_xxx[j] * pb_xx[j] * fl1_fx - pa_xxx[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xxx[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xx[j] * pc_x[j] * pb_xx[j] * fl1_fx - 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] - 6.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xyy[j] - 9.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] - 3.0 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxyy[j] - 1.5 * pc_x[j] * fl1_fx * pb_xxyy[j] - 2.0 * pa_xxx[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_xxx[j] * pb_xyy[j] * pc_x[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xxyy[j]);

                t_xxx_xxyy[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pc_yy[j] + 9.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_yy[j] + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xy[j] * fl2_fx * pb_y[j] + 7.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pb_x[j] * pc_yy[j] + 6.0 * fl2_fx * pb_xy[j] * pc_y[j] + 1.5 * fl2_fx * pb_xyy[j] + pa_xxx[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pc_yy[j] + pa_xxx[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_xx[j] * pc_x[j] * pb_xx[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] + 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yy[j] + 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] + 6.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] + 1.5 * pa_x[j] * pc_xx[j] * pb_xx[j] * fl1_fx + 9.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + 18.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 9.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] + 6.0 * pc_xx[j] * fl1_fx * pb_xyy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_yy[j] + 3.0 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_y[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_x[j] * fl1_fx * pb_xxyy[j] + pa_xxx[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_xxx[j] * pb_xy[j] * pc_xy[j] + pa_xxx[j] * pc_xx[j] * pb_yy[j] + 6.0 * pa_xx[j] * pc_xy[j] * pb_xxy[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xyy[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xxyy[j]);

                t_xxx_xxyy[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * fl2_fx * pc_yy[j] - 4.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 2.5 * pc_xxx[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_x[j] - 3.75 * pc_xyy[j] * fl2_fx - 15.0 * pc_xy[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pb_x[j] * pc_yy[j] - 3.0 * fl2_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xxx[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xxx[j] * fl1_fx * pc_yy[j] - 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] - 1.5 * pa_x[j] * pc_xx[j] * pb_xx[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx - 18.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - 9.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 18.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxx[j] * pb_xx[j] * fl1_fx - 5.0 * pc_xxx[j] * fl1_fx * pb_yy[j] - 12.0 * pc_xxy[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xx[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_yy[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xxy[j] - 2.0 * pa_xxx[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_xxx[j] * pc_xxy[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_xx[j] - 12.0 * pa_xx[j] * pc_xxy[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xxx[j] * pb_yy[j] - 6.0 * pa_x[j] * pc_xxy[j] * pb_xxy[j] - 6.0 * pa_x[j] * pc_xxx[j] * pb_xyy[j] - pc_xxx[j] * pb_xxyy[j]);

                t_xxx_xxyy[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 2.25 * pa_x[j] * fl2_fx * pc_yy[j] + 5.0 * pc_xxx[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xyy[j] * fl2_fx + 7.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pb_x[j] * pc_yy[j] + 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 18.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 9.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * pb_xx[j] * fl1_fx + pc_xxxx[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxy[j] * fl1_fx * pb_y[j] + 5.0 * pc_xxx[j] * fl1_fx * pb_yy[j] + 6.0 * pc_xxyy[j] * fl1_fx * pb_x[j] + 12.0 * pc_xxy[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxyy[j] + 6.0 * pa_xx[j] * pc_xxyy[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxxy[j] * pb_y[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_xx[j] + 12.0 * pa_x[j] * pc_xxxy[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xxxx[j] * pb_yy[j] + 2.0 * pc_xxxy[j] * pb_xxy[j] + 2.0 * pc_xxxx[j] * pb_xyy[j]);

                t_xxx_xxyy[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xyy[j] * fl2_fx - 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx - 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - pc_xxxx[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxx[j] * fl1_fx - 5.0 * pc_xxxyy[j] * fl1_fx - 10.0 * pc_xxxy[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxyy[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxxyy[j] - 6.0 * pa_x[j] * pc_xxxyy[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxxxy[j] * pb_y[j] - pc_xxxyy[j] * pb_xx[j] - 4.0 * pc_xxxxy[j] * pb_xy[j] - pc_xxxxx[j] * pb_yy[j]);

                t_xxx_xxyy[j] += fl_s_0_0_6 * (0.5 * pc_xxxxx[j] * fl1_fx + 5.0 * pc_xxxyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxyy[j] + 2.0 * pc_xxxxyy[j] * pb_x[j] + 2.0 * pc_xxxxxy[j] * pb_y[j]);

                t_xxx_xxyy[j] += -fl_s_0_0_7 * pc_xxxxxyy[j];

                t_xxx_xxyz[j] = fl_s_0_0_0 * (2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xyz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxyz[j] + pa_xxx[j] * pb_xxyz[j]);

                t_xxx_xxyz[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_yz[j] - 3.75 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pb_xy[j] * pc_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_y[j] - 3.0 * fl2_fx * pb_xyz[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_xxx[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_yz[j] - 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xyz[j] - 9.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxyz[j] - 1.5 * pc_x[j] * fl1_fx * pb_xxyz[j] - pa_xxx[j] * pb_xxy[j] * pc_z[j] - pa_xxx[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_xxx[j] * pb_xyz[j] * pc_x[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xxyz[j]);

                t_xxx_xxyz[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 7.5 * pc_x[j] * fl2_fx * pb_yz[j] + 1.5 * fl2_fx * pb_x[j] * pc_yz[j] + 3.0 * fl2_fx * pb_xy[j] * pc_z[j] + 3.0 * fl2_fx * pb_xz[j] * pc_y[j] + 1.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_yz[j] + 0.5 * pa_xxx[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_xxx[j] * fl1_fx * pc_y[j] * pb_z[j] + 4.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_yz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] + 9.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 9.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] + 6.0 * pc_xx[j] * fl1_fx * pb_xyz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_yz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_y[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_x[j] * fl1_fx * pb_xxyz[j] + pa_xxx[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_xxx[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_xxx[j] * pb_xz[j] * pc_xy[j] + pa_xxx[j] * pc_xx[j] * pb_yz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xxy[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xxz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xyz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xxyz[j]);

                t_xxx_xxyz[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pb_yz[j] - 3.0 * fl2_fx * pb_x[j] * pc_yz[j] - 1.5 * fl2_fx * pb_xy[j] * pc_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_y[j] - 0.5 * pa_xxx[j] * fl1_fx * pc_yz[j] - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] - 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yz[j] - 9.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 5.0 * pc_xxx[j] * fl1_fx * pb_yz[j] - 6.0 * pc_xxz[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xxy[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xx[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - 2.0 * pa_xxx[j] * pb_x[j] * pc_xyz[j] - pa_xxx[j] * pc_xxz[j] * pb_y[j] - pa_xxx[j] * pc_xxy[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_xy[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xxx[j] * pb_yz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xxy[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xxz[j] - 6.0 * pa_x[j] * pc_xxx[j] * pb_xyz[j] - pc_xxx[j] * pb_xxyz[j]);

                t_xxx_xxyz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pb_x[j] * pc_yz[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 9.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] + 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] + 5.0 * pc_xxx[j] * fl1_fx * pb_yz[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xxz[j] * fl1_fx * pb_xy[j] + 6.0 * pc_xxy[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxyz[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxxz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_xxxy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxz[j] * pb_xy[j] + 6.0 * pa_x[j] * pc_xxxy[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xxxx[j] * pb_yz[j] + pc_xxxz[j] * pb_xxy[j] + pc_xxxy[j] * pb_xxz[j] + 2.0 * pc_xxxx[j] * pb_xyz[j]);

                t_xxx_xxyz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] - 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] - 6.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxxyz[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxxz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xxxxy[j] * pb_z[j] - pc_xxxyz[j] * pb_xx[j] - 2.0 * pc_xxxxz[j] * pb_xy[j] - 2.0 * pc_xxxxy[j] * pb_xz[j] - pc_xxxxx[j] * pb_yz[j]);

                t_xxx_xxyz[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxyz[j] + 2.0 * pc_xxxxyz[j] * pb_x[j] + pc_xxxxxz[j] * pb_y[j] + pc_xxxxxy[j] * pb_z[j]);

                t_xxx_xxyz[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];

                t_xxx_xxzz[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pb_xzz[j] + 0.5 * pa_xxx[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_xzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxzz[j] + pa_xxx[j] * pb_xxzz[j]);

                t_xxx_xxzz[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 0.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 3.0 * pa_xx[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_zz[j] - 3.75 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pb_xz[j] * pc_z[j] - 3.0 * fl2_fx * pb_xzz[j] - 0.5 * pa_xxx[j] * pb_xx[j] * fl1_fx - pa_xxx[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xx[j] * pc_x[j] * pb_xx[j] * fl1_fx - 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] - 6.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_xzz[j] - 9.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] - 3.0 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxzz[j] - 1.5 * pc_x[j] * fl1_fx * pb_xxzz[j] - 2.0 * pa_xxx[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_xxx[j] * pb_xzz[j] * pc_x[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xxzz[j]);

                t_xxx_xxzz[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.25 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 1.5 * pa_xx[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pc_zz[j] + 9.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_zz[j] + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xz[j] * fl2_fx * pb_z[j] + 7.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 1.5 * fl2_fx * pb_x[j] * pc_zz[j] + 6.0 * fl2_fx * pb_xz[j] * pc_z[j] + 1.5 * fl2_fx * pb_xzz[j] + pa_xxx[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pc_zz[j] + pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xx[j] * pc_x[j] * pb_xx[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx + 9.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] + 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] + 6.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] + 1.5 * pa_x[j] * pc_xx[j] * pb_xx[j] * fl1_fx + 9.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + 18.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 9.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] + 6.0 * pc_xx[j] * fl1_fx * pb_xzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_zz[j] + 3.0 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_z[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_x[j] * fl1_fx * pb_xxzz[j] + pa_xxx[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_xxx[j] * pb_xz[j] * pc_xz[j] + pa_xxx[j] * pc_xx[j] * pb_zz[j] + 6.0 * pa_xx[j] * pc_xz[j] * pb_xxz[j] + 6.0 * pa_xx[j] * pc_xx[j] * pb_xzz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xxzz[j]);

                t_xxx_xxzz[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 4.5 * pa_x[j] * fl2_fx * pc_zz[j] - 4.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 2.5 * pc_xxx[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_x[j] - 3.75 * pc_xzz[j] * fl2_fx - 15.0 * pc_xz[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * fl2_fx * pb_x[j] * pc_zz[j] - 3.0 * fl2_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xxx[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xxx[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xx[j] * pc_xx[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] - 1.5 * pa_x[j] * pc_xx[j] * pb_xx[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx - 18.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - 9.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 18.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxx[j] * pb_xx[j] * fl1_fx - 5.0 * pc_xxx[j] * fl1_fx * pb_zz[j] - 12.0 * pc_xxz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xx[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_zz[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xxz[j] - 2.0 * pa_xxx[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_xxx[j] * pc_xxz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_xx[j] - 12.0 * pa_xx[j] * pc_xxz[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xxx[j] * pb_zz[j] - 6.0 * pa_x[j] * pc_xxz[j] * pb_xxz[j] - 6.0 * pa_x[j] * pc_xxx[j] * pb_xzz[j] - pc_xxx[j] * pb_xxzz[j]);

                t_xxx_xxzz[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 4.5 * pa_x[j] * pc_xx[j] * fl2_fx + 2.25 * pa_x[j] * fl2_fx * pc_zz[j] + 5.0 * pc_xxx[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xzz[j] * fl2_fx + 7.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pb_x[j] * pc_zz[j] + 1.5 * pa_xx[j] * pc_xxx[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 18.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 9.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * pb_xx[j] * fl1_fx + pc_xxxx[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxz[j] * fl1_fx * pb_z[j] + 5.0 * pc_xxx[j] * fl1_fx * pb_zz[j] + 6.0 * pc_xxzz[j] * fl1_fx * pb_x[j] + 12.0 * pc_xxz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + pa_xxx[j] * pc_xxzz[j] + 6.0 * pa_xx[j] * pc_xxzz[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxxz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_xx[j] + 12.0 * pa_x[j] * pc_xxxz[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xxxx[j] * pb_zz[j] + 2.0 * pc_xxxz[j] * pb_xxz[j] + 2.0 * pc_xxxx[j] * pb_xzz[j]);

                t_xxx_xxzz[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xzz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xxxx[j] * fl1_fx - 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - pc_xxxx[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxx[j] * fl1_fx - 5.0 * pc_xxxzz[j] * fl1_fx - 10.0 * pc_xxxz[j] * fl1_fx * pb_z[j] - 6.0 * pc_xxzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxxzz[j] - 6.0 * pa_x[j] * pc_xxxzz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxxxz[j] * pb_z[j] - pc_xxxzz[j] * pb_xx[j] - 4.0 * pc_xxxxz[j] * pb_xz[j] - pc_xxxxx[j] * pb_zz[j]);

                t_xxx_xxzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxx[j] * fl1_fx + 5.0 * pc_xxxzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxxzz[j] + 2.0 * pc_xxxxzz[j] * pb_x[j] + 2.0 * pc_xxxxxz[j] * pb_z[j]);

                t_xxx_xxzz[j] += -fl_s_0_0_7 * pc_xxxxxzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_6_9(      CMemBlock2D<double>& primBuffer,
                                  const CMemBlock2D<double>& auxBuffer,
                                  const CMemBlock2D<double>& osFactors,
                                  const CMemBlock2D<double>& paDistances,
                                  const CMemBlock2D<double>& pbDistances,
                                  const CMemBlock2D<double>& pcDistances,
                                  const CGtoBlock&           braGtoBlock,
                                  const CGtoBlock&           ketGtoBlock,
                                  const int32_t              iContrGto)
    {
        // Batch of Integrals (6,9)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxx_xyyy = primBuffer.data(150 * idx + 6);

            auto t_xxx_xyyz = primBuffer.data(150 * idx + 7);

            auto t_xxx_xyzz = primBuffer.data(150 * idx + 8);

            // Batch of Integrals (6,9)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, pb_xyz, pb_xyzz, \
                                     pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, pc_x, pc_xx, \
                                     pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyy, pc_xxxxyyz, pc_xxxxyz, \
                                     pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyz, pc_xxxyz, \
                                     pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyz, pc_xxyz, pc_xxyzz, \
                                     pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxx_xyyy, t_xxx_xyyz, t_xxx_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxx_xyyy[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_y[j] + 2.25 * pa_xx[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pb_yyy[j] + 1.5 * pa_xxx[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_yyy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xyyy[j] + pa_xxx[j] * pb_xyyy[j]);

                t_xxx_xyyy[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_y[j] - 1.125 * fl3_fx * pc_y[j] - 4.5 * pa_xx[j] * fl2_fx * pb_y[j] - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 6.75 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 4.5 * pa_x[j] * fl2_fx * pb_xy[j] - 2.25 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_xxx[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xxx[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_x[j] * pb_xy[j] * fl1_fx - 4.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_xx[j] * fl1_fx * pb_yyy[j] - 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] - 4.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xyyy[j] - 1.5 * pc_x[j] * fl1_fx * pb_xyyy[j] - 3.0 * pa_xxx[j] * pb_xyy[j] * pc_y[j] - pa_xxx[j] * pc_x[j] * pb_yyy[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xyyy[j]);

                t_xxx_xyyy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_y[j] + 3.375 * fl3_fx * pb_y[j] + 4.5 * pa_xx[j] * fl2_fx * pc_y[j] + 2.25 * pa_xx[j] * fl2_fx * pb_y[j] + 13.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 6.75 * pa_x[j] * pc_xy[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_xy[j] + 4.5 * pc_x[j] * fl2_fx * pb_xy[j] + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 4.5 * fl2_fx * pb_yy[j] * pc_y[j] + 0.75 * fl2_fx * pb_yyy[j] + 1.5 * pa_xxx[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx + 4.5 * pa_xx[j] * pc_x[j] * pb_xy[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx + 4.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] + 4.5 * pa_x[j] * pc_xx[j] * pb_xy[j] * fl1_fx + 13.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] + 3.0 * pc_xx[j] * fl1_fx * pb_yyy[j] + 4.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_yy[j] + 4.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_y[j] + 4.5 * pc_xy[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_x[j] * fl1_fx * pb_xyyy[j] + 3.0 * pa_xxx[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_xxx[j] * pc_xy[j] * pb_yy[j] + 9.0 * pa_xx[j] * pc_xy[j] * pb_xyy[j] + 3.0 * pa_xx[j] * pc_xx[j] * pb_yyy[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xyyy[j]);

                t_xxx_xyyy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 2.25 * pa_xx[j] * fl2_fx * pc_y[j] - 13.5 * pa_x[j] * pc_xy[j] * fl2_fx - 6.75 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 9.0 * pc_xx[j] * fl2_fx * pb_y[j] - 4.5 * pc_xxy[j] * fl2_fx - 2.25 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_yyy[j] - 4.5 * fl2_fx * pb_y[j] * pc_yy[j] - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_xxx[j] * pc_xy[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_yyy[j] - 4.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] - 4.5 * pa_x[j] * pc_xx[j] * pb_xy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx - 13.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 13.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxx[j] * pb_xy[j] * fl1_fx - 9.0 * pc_xxy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xx[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yyy[j] - 4.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_yy[j] - 4.5 * pc_xyy[j] * fl1_fx * pb_xy[j] - 4.5 * pc_xy[j] * fl1_fx * pb_xyy[j] - pa_xxx[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_xxx[j] * pc_xyy[j] * pb_y[j] - 9.0 * pa_xx[j] * pc_xyy[j] * pb_xy[j] - 9.0 * pa_xx[j] * pc_xxy[j] * pb_yy[j] - 9.0 * pa_x[j] * pc_xxy[j] * pb_xyy[j] - 3.0 * pa_x[j] * pc_xxx[j] * pb_yyy[j] - pc_xxx[j] * pb_xyyy[j]);

                t_xxx_xyyy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 6.75 * pa_x[j] * pc_xy[j] * fl2_fx + 9.0 * pc_xxy[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyy[j] + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yyy[j] + 4.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 13.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxx[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xxxy[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxx[j] * pb_y[j] * fl1_fx + 9.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxy[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yyy[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyy[j] * fl1_fx * pb_xy[j] + pa_xxx[j] * pc_xyyy[j] + 3.0 * pa_xx[j] * pc_xyyy[j] * pb_x[j] + 9.0 * pa_xx[j] * pc_xxyy[j] * pb_y[j] + 9.0 * pa_x[j] * pc_xxyy[j] * pb_xy[j] + 9.0 * pa_x[j] * pc_xxxy[j] * pb_yy[j] + 3.0 * pc_xxxy[j] * pb_xyy[j] + pc_xxxx[j] * pb_yyy[j]);

                t_xxx_xyyy[j] += fl_s_0_0_5 * (-4.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yyy[j] - 4.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 1.5 * pc_xxxy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxx[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxxy[j] * fl1_fx - 3.0 * pc_xxyyy[j] * fl1_fx - 9.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyyy[j] - 3.0 * pa_x[j] * pc_xxyyy[j] * pb_x[j] - 9.0 * pa_x[j] * pc_xxxyy[j] * pb_y[j] - 3.0 * pc_xxxyy[j] * pb_xy[j] - 3.0 * pc_xxxxy[j] * pb_yy[j]);

                t_xxx_xyyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyyy[j] + pc_xxxyyy[j] * pb_x[j] + 3.0 * pc_xxxxyy[j] * pb_y[j]);

                t_xxx_xyyy[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];

                t_xxx_xyyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pb_yyz[j] + 0.5 * pa_xxx[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_yyz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xyyz[j] + pa_xxx[j] * pb_xyyz[j]);

                t_xxx_xyyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_xx[j] * fl2_fx * pb_z[j] - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * fl2_fx * pb_yz[j] * pc_y[j] - 1.5 * fl2_fx * pb_yyz[j] - 0.5 * pa_xxx[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxx[j] * pb_xz[j] * fl1_fx - 0.5 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_x[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] - 3.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] - 1.5 * pa_xx[j] * fl1_fx * pb_yyz[j] - 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_z[j] - 3.0 * pa_x[j] * fl1_fx * pb_xyz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xyyz[j] - 1.5 * pc_x[j] * fl1_fx * pb_xyyz[j] - pa_xxx[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_xxx[j] * pb_xyz[j] * pc_y[j] - pa_xxx[j] * pc_x[j] * pb_yyz[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xyyz[j]);

                t_xxx_xyyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pb_xz[j] + 1.5 * fl2_fx * pb_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pb_yy[j] * pc_z[j] + 3.0 * fl2_fx * pb_yz[j] * pc_y[j] + 0.75 * fl2_fx * pb_yyz[j] + 0.5 * pa_xxx[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxx[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_x[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] + 3.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yz[j] + 1.5 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] + 3.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] + 1.5 * pa_x[j] * pc_xx[j] * pb_xz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_yyz[j] + 3.0 * pa_x[j] * fl1_fx * pb_xy[j] * pc_yz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_yy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_z[j] + 3.0 * pa_x[j] * fl1_fx * pb_xyz[j] * pc_y[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_x[j] * fl1_fx * pb_xyyz[j] + 2.0 * pa_xxx[j] * pb_xy[j] * pc_yz[j] + pa_xxx[j] * pb_xz[j] * pc_yy[j] + pa_xxx[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_xxx[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xyy[j] + 6.0 * pa_xx[j] * pc_xy[j] * pb_xyz[j] + 3.0 * pa_xx[j] * pc_xx[j] * pb_yyz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xyyz[j]);

                t_xxx_xyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * pc_xz[j] * fl2_fx - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pb_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * fl2_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_xxx[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xx[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yyz[j] - 3.0 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yz[j] - 1.5 * pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] - 1.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_xx[j] * pb_xz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 9.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxx[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] - 6.0 * pc_xxy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_yyz[j] - 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yyz[j] - 3.0 * pa_x[j] * fl1_fx * pb_xy[j] * pc_yz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_yy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] - pa_xxx[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_xxx[j] * pc_xyz[j] * pb_y[j] - pa_xxx[j] * pc_xyy[j] * pb_z[j] - 6.0 * pa_xx[j] * pc_xyz[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xxz[j] * pb_yy[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_yz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_xyy[j] - 6.0 * pa_x[j] * pc_xxy[j] * pb_xyz[j] - 3.0 * pa_x[j] * pc_xxx[j] * pb_yyz[j] - pc_xxx[j] * pb_xyyz[j]);

                t_xxx_xyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pb_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yyz[j] + 1.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 4.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxx[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] + 6.0 * pc_xxy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yyz[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xz[j] + pa_xxx[j] * pc_xyyz[j] + 3.0 * pa_xx[j] * pc_xyyz[j] * pb_x[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_xxyy[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xxxz[j] * pb_yy[j] + 6.0 * pa_x[j] * pc_xxxy[j] * pb_yz[j] + pc_xxxz[j] * pb_xyy[j] + 2.0 * pc_xxxy[j] * pb_xyz[j] + pc_xxxx[j] * pb_yyz[j]);

                t_xxx_xyyz[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 0.5 * pc_xxxz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxz[j] * fl1_fx - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyyz[j] * fl1_fx - 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyyz[j] - 3.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xxxyy[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pb_xy[j] - pc_xxxyy[j] * pb_xz[j] - pc_xxxxz[j] * pb_yy[j] - 2.0 * pc_xxxxy[j] * pb_yz[j]);

                t_xxx_xyyz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyyz[j] + pc_xxxyyz[j] * pb_x[j] + 2.0 * pc_xxxxyz[j] * pb_y[j] + pc_xxxxyy[j] * pb_z[j]);

                t_xxx_xyyz[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];

                t_xxx_xyzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pb_yzz[j] + 0.5 * pa_xxx[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_yzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xyzz[j] + pa_xxx[j] * pb_xyzz[j]);

                t_xxx_xyzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xx[j] * fl2_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * fl2_fx * pb_yzz[j] - 0.5 * pa_xxx[j] * pb_xy[j] * fl1_fx - 0.5 * pa_xxx[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_x[j] * pb_xy[j] * fl1_fx - 3.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] - 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xx[j] * fl1_fx * pb_yzz[j] - 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] - 3.0 * pa_x[j] * fl1_fx * pb_xyz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xyzz[j] - 1.5 * pc_x[j] * fl1_fx * pb_xyzz[j] - 2.0 * pa_xxx[j] * pb_xyz[j] * pc_z[j] - pa_xxx[j] * pb_xzz[j] * pc_y[j] - pa_xxx[j] * pc_x[j] * pb_yzz[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xyzz[j]);

                t_xxx_xyzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_x[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pb_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * fl2_fx * pb_yz[j] * pc_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pb_yzz[j] + 0.5 * pa_xxx[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_x[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] + 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] + 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] + 1.5 * pa_x[j] * pc_xx[j] * pb_xy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_yzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_zz[j] + 3.0 * pa_x[j] * fl1_fx * pb_xz[j] * pc_yz[j] + 3.0 * pa_x[j] * fl1_fx * pb_xyz[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_y[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_x[j] * fl1_fx * pb_xyzz[j] + pa_xxx[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_xxx[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_xxx[j] * pc_xz[j] * pb_yz[j] + pa_xxx[j] * pc_xy[j] * pb_zz[j] + 6.0 * pa_xx[j] * pc_xz[j] * pb_xyz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xzz[j] + 3.0 * pa_xx[j] * pc_xx[j] * pb_yzz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xyzz[j]);

                t_xxx_xyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 4.5 * pa_x[j] * pc_xy[j] * fl2_fx - 2.25 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 1.5 * pc_xxy[j] * fl2_fx - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pb_y[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xxx[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xx[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_yzz[j] - 1.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] - 3.0 * pa_xx[j] * fl1_fx * pc_yz[j] * pb_z[j] - 1.5 * pa_x[j] * pc_xx[j] * pb_xy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxx[j] * pb_xy[j] * fl1_fx - 6.0 * pc_xxz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_zz[j] - 3.0 * pa_x[j] * fl1_fx * pb_xz[j] * pc_yz[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] - pa_xxx[j] * pb_x[j] * pc_yzz[j] - pa_xxx[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xxx[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_xy[j] - 6.0 * pa_xx[j] * pc_xyz[j] * pb_xz[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_yz[j] - 3.0 * pa_xx[j] * pc_xxy[j] * pb_zz[j] - 6.0 * pa_x[j] * pc_xxz[j] * pb_xyz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_xzz[j] - 3.0 * pa_x[j] * pc_xxx[j] * pb_yzz[j] - pc_xxx[j] * pb_xyzz[j]);

                t_xxx_xyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pb_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_yzz[j] + 1.5 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxx[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 9.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xxxy[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yzz[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + pa_xxx[j] * pc_xyzz[j] + 3.0 * pa_xx[j] * pc_xyzz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xxzz[j] * pb_y[j] + 6.0 * pa_xx[j] * pc_xxyz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_xy[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xz[j] + 6.0 * pa_x[j] * pc_xxxz[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_xxxy[j] * pb_zz[j] + 2.0 * pc_xxxz[j] * pb_xyz[j] + pc_xxxy[j] * pb_xzz[j] + pc_xxxx[j] * pb_yzz[j]);

                t_xxx_xyzz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_xxxy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxx[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxxxy[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxyzz[j] - 3.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xxxzz[j] * pb_y[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_z[j] - pc_xxxzz[j] * pb_xy[j] - 2.0 * pc_xxxyz[j] * pb_xz[j] - 2.0 * pc_xxxxz[j] * pb_yz[j] - pc_xxxxy[j] * pb_zz[j]);

                t_xxx_xyzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxyzz[j] + pc_xxxyzz[j] * pb_x[j] + pc_xxxxzz[j] * pb_y[j] + 2.0 * pc_xxxxyz[j] * pb_z[j]);

                t_xxx_xyzz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_9_12(      CMemBlock2D<double>& primBuffer,
                                   const CMemBlock2D<double>& auxBuffer,
                                   const CMemBlock2D<double>& osFactors,
                                   const CMemBlock2D<double>& paDistances,
                                   const CMemBlock2D<double>& pbDistances,
                                   const CMemBlock2D<double>& pcDistances,
                                   const CGtoBlock&           braGtoBlock,
                                   const CGtoBlock&           ketGtoBlock,
                                   const int32_t              iContrGto)
    {
        // Batch of Integrals (9,12)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxx_xzzz = primBuffer.data(150 * idx + 9);

            auto t_xxx_yyyy = primBuffer.data(150 * idx + 10);

            auto t_xxx_yyyz = primBuffer.data(150 * idx + 11);

            // Batch of Integrals (9,12)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, pb_yyy, \
                                     pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xx, pc_xxx, pc_xxxx, \
                                     pc_xxxxz, pc_xxxxzz, pc_xxxxzzz, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, \
                                     pc_xxxyyyz, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, pc_xxyy, \
                                     pc_xxyyy, pc_xxyyyy, pc_xxyyyz, pc_xxyyz, pc_xxyz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyz, pc_yyz, pc_yz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxx_xzzz, t_xxx_yyyy, \
                                     t_xxx_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxx_xzzz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_z[j] + 2.25 * pa_xx[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pb_zzz[j] + 1.5 * pa_xxx[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_zzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xzzz[j] + pa_xxx[j] * pb_xzzz[j]);

                t_xxx_xzzz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_z[j] - 1.125 * fl3_fx * pc_z[j] - 4.5 * pa_xx[j] * fl2_fx * pb_z[j] - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 6.75 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_xz[j] - 2.25 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * fl2_fx * pb_zzz[j] - 1.5 * pa_xxx[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xxx[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_x[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_x[j] * pb_xz[j] * fl1_fx - 4.5 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_xx[j] * fl1_fx * pb_zzz[j] - 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] - 4.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xzzz[j] - 1.5 * pc_x[j] * fl1_fx * pb_xzzz[j] - 3.0 * pa_xxx[j] * pb_xzz[j] * pc_z[j] - pa_xxx[j] * pc_x[j] * pb_zzz[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_xzzz[j]);

                t_xxx_xzzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 4.5 * pa_xx[j] * fl2_fx * pc_z[j] + 2.25 * pa_xx[j] * fl2_fx * pb_z[j] + 13.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 6.75 * pa_x[j] * pc_xz[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_z[j] + 4.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_xz[j] + 4.5 * pc_x[j] * fl2_fx * pb_xz[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 4.5 * fl2_fx * pb_zz[j] * pc_z[j] + 0.75 * fl2_fx * pb_zzz[j] + 1.5 * pa_xxx[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_x[j] * pb_xz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xx[j] * pb_z[j] * fl1_fx + 4.5 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] + 4.5 * pa_x[j] * pc_xx[j] * pb_xz[j] * fl1_fx + 13.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_xx[j] * fl1_fx * pb_zzz[j] + 4.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_zz[j] + 4.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_z[j] + 4.5 * pc_xz[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_x[j] * fl1_fx * pb_xzzz[j] + 3.0 * pa_xxx[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_xxx[j] * pc_xz[j] * pb_zz[j] + 9.0 * pa_xx[j] * pc_xz[j] * pb_xzz[j] + 3.0 * pa_xx[j] * pc_xx[j] * pb_zzz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_xzzz[j]);

                t_xxx_xzzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 2.25 * pa_xx[j] * fl2_fx * pc_z[j] - 13.5 * pa_x[j] * pc_xz[j] * fl2_fx - 6.75 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 9.0 * pc_xx[j] * fl2_fx * pb_z[j] - 4.5 * pc_xxz[j] * fl2_fx - 2.25 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * fl2_fx * pb_z[j] * pc_zz[j] - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_xxx[j] * pc_xz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xx[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_zzz[j] - 4.5 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] - 4.5 * pa_x[j] * pc_xx[j] * pb_xz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxx[j] * pb_z[j] * fl1_fx - 13.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 13.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxx[j] * pb_xz[j] * fl1_fx - 9.0 * pc_xxz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xx[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_zzz[j] - 4.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_zz[j] - 4.5 * pc_xzz[j] * fl1_fx * pb_xz[j] - 4.5 * pc_xz[j] * fl1_fx * pb_xzz[j] - pa_xxx[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_xxx[j] * pc_xzz[j] * pb_z[j] - 9.0 * pa_xx[j] * pc_xzz[j] * pb_xz[j] - 9.0 * pa_xx[j] * pc_xxz[j] * pb_zz[j] - 9.0 * pa_x[j] * pc_xxz[j] * pb_xzz[j] - 3.0 * pa_x[j] * pc_xxx[j] * pb_zzz[j] - pc_xxx[j] * pb_xzzz[j]);

                t_xxx_xzzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 6.75 * pa_x[j] * pc_xz[j] * fl2_fx + 9.0 * pc_xxz[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_zzz[j] + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_zzz[j] + 4.5 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxx[j] * pb_z[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxxz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xzzz[j] * fl1_fx + 13.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxx[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xxxz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxx[j] * pb_z[j] * fl1_fx + 9.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_zzz[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xzz[j] * fl1_fx * pb_xz[j] + pa_xxx[j] * pc_xzzz[j] + 3.0 * pa_xx[j] * pc_xzzz[j] * pb_x[j] + 9.0 * pa_xx[j] * pc_xxzz[j] * pb_z[j] + 9.0 * pa_x[j] * pc_xxzz[j] * pb_xz[j] + 9.0 * pa_x[j] * pc_xxxz[j] * pb_zz[j] + 3.0 * pc_xxxz[j] * pb_xzz[j] + pc_xxxx[j] * pb_zzz[j]);

                t_xxx_xzzz[j] += fl_s_0_0_5 * (-4.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * pa_x[j] * pc_xxxz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xzzz[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxx[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxxxz[j] * fl1_fx - 3.0 * pc_xxzzz[j] * fl1_fx - 9.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xzzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_xx[j] * pc_xxzzz[j] - 3.0 * pa_x[j] * pc_xxzzz[j] * pb_x[j] - 9.0 * pa_x[j] * pc_xxxzz[j] * pb_z[j] - 3.0 * pc_xxxzz[j] * pb_xz[j] - 3.0 * pc_xxxxz[j] * pb_zz[j]);

                t_xxx_xzzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxzzz[j] + pc_xxxzzz[j] * pb_x[j] + 3.0 * pc_xxxxzz[j] * pb_z[j]);

                t_xxx_xzzz[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];

                t_xxx_yyyy[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pb_yy[j] + 3.0 * pa_xxx[j] * pb_yy[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pb_yyyy[j] + pa_xxx[j] * pb_yyyy[j]);

                t_xxx_yyyy[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * fl2_fx * pb_yy[j] - 9.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 4.5 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xxx[j] * pb_yy[j] * fl1_fx - 6.0 * pa_xxx[j] * pb_y[j] * pc_y[j] * fl1_fx - 9.0 * pa_xx[j] * pc_x[j] * pb_yy[j] * fl1_fx - 6.0 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_yyyy[j] - 1.5 * pc_x[j] * fl1_fx * pb_yyyy[j] - 4.0 * pa_xxx[j] * pb_yyy[j] * pc_y[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_yyyy[j]);

                t_xxx_yyyy[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 18.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 4.5 * pa_x[j] * fl2_fx * pc_yy[j] + 4.5 * pa_x[j] * fl2_fx * pb_yy[j] + 9.0 * pc_x[j] * fl2_fx * pb_yy[j] + 9.0 * pc_xy[j] * fl2_fx * pb_y[j] + 6.0 * pa_xxx[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_xxx[j] * pc_yy[j] * fl1_fx + 9.0 * pa_xx[j] * pc_x[j] * pb_yy[j] * fl1_fx + 18.0 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx + 9.0 * pa_x[j] * pc_xx[j] * pb_yy[j] * fl1_fx + 9.0 * pa_x[j] * fl1_fx * pb_yy[j] * pc_yy[j] + 6.0 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_y[j] + 6.0 * pc_xy[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_x[j] * fl1_fx * pb_yyyy[j] + 6.0 * pa_xxx[j] * pb_yy[j] * pc_yy[j] + 12.0 * pa_xx[j] * pc_xy[j] * pb_yyy[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_yyyy[j]);

                t_xxx_yyyy[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_xx[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 9.0 * pa_x[j] * fl2_fx * pc_yy[j] - 9.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 18.0 * pc_xy[j] * fl2_fx * pb_y[j] - 4.5 * pc_xyy[j] * fl2_fx - 4.5 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xxx[j] * pc_yy[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_x[j] * pc_xx[j] * pb_yy[j] * fl1_fx - 18.0 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxx[j] * pb_yy[j] * fl1_fx - 6.0 * pa_x[j] * fl1_fx * pb_y[j] * pc_yyy[j] - 9.0 * pa_x[j] * fl1_fx * pb_yy[j] * pc_yy[j] - 9.0 * pc_xyy[j] * fl1_fx * pb_yy[j] - 6.0 * pc_xy[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_xxx[j] * pb_y[j] * pc_yyy[j] - 18.0 * pa_xx[j] * pc_xyy[j] * pb_yy[j] - 12.0 * pa_x[j] * pc_xxy[j] * pb_yyy[j] - pc_xxx[j] * pb_yyyy[j]);

                t_xxx_yyyy[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pc_xxx[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_yy[j] + 9.0 * pc_xyy[j] * fl2_fx + 9.0 * pc_xy[j] * fl2_fx * pb_y[j] + 9.0 * pa_xx[j] * pc_xyy[j] * fl1_fx + 18.0 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 3.0 * pc_xxx[j] * pb_yy[j] * fl1_fx + 6.0 * pc_xxxy[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pc_yyyy[j] + 6.0 * pa_x[j] * fl1_fx * pb_y[j] * pc_yyy[j] + 6.0 * pc_xyyy[j] * fl1_fx * pb_y[j] + 9.0 * pc_xyy[j] * fl1_fx * pb_yy[j] + pa_xxx[j] * pc_yyyy[j] + 12.0 * pa_xx[j] * pc_xyyy[j] * pb_y[j] + 18.0 * pa_x[j] * pc_xxyy[j] * pb_yy[j] + 4.0 * pc_xxxy[j] * pb_yyy[j]);

                t_xxx_yyyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xyy[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 6.0 * pc_xxxy[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxxyy[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_yyyy[j] - 1.5 * pc_xyyyy[j] * fl1_fx - 6.0 * pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_xx[j] * pc_xyyyy[j] - 12.0 * pa_x[j] * pc_xxyyy[j] * pb_y[j] - 6.0 * pc_xxxyy[j] * pb_yy[j]);

                t_xxx_yyyy[j] += fl_s_0_0_6 * (3.0 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyyy[j] + 4.0 * pc_xxxyyy[j] * pb_y[j]);

                t_xxx_yyyy[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];

                t_xxx_yyyz[j] = fl_s_0_0_0 * (2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xxx[j] * pb_yz[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pb_yyyz[j] + pa_xxx[j] * pb_yyyz[j]);

                t_xxx_yyyz[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_yz[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xxx[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_xxx[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_z[j] - 4.5 * pa_xx[j] * pc_x[j] * pb_yz[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_z[j] - 4.5 * pa_x[j] * fl1_fx * pb_yyz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_yyyz[j] - 1.5 * pc_x[j] * fl1_fx * pb_yyyz[j] - pa_xxx[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_xxx[j] * pb_yyz[j] * pc_y[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_yyyz[j]);

                t_xxx_yyyz[j] += fl_s_0_0_2 * (4.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pb_yz[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xxx[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_y[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xx[j] * pc_x[j] * pb_yz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_xx[j] * pb_yz[j] * fl1_fx + 4.5 * pa_x[j] * fl1_fx * pb_yy[j] * pc_yz[j] + 4.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_yy[j] + 1.5 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_z[j] + 4.5 * pa_x[j] * fl1_fx * pb_yyz[j] * pc_y[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 4.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_x[j] * fl1_fx * pb_yyyz[j] + 3.0 * pa_xxx[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_xxx[j] * pb_yz[j] * pc_yy[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_yyy[j] + 9.0 * pa_xx[j] * pc_xy[j] * pb_yyz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_yyyz[j]);

                t_xxx_yyyz[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_xx[j] * pb_yz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxx[j] * pb_yz[j] * fl1_fx - 4.5 * pa_x[j] * fl1_fx * pb_y[j] * pc_yyz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] - 4.5 * pa_x[j] * fl1_fx * pb_yy[j] * pc_yz[j] - 4.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_yy[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - 4.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_xxx[j] * pb_y[j] * pc_yyz[j] - pa_xxx[j] * pc_yyy[j] * pb_z[j] - 9.0 * pa_xx[j] * pc_xyz[j] * pb_yy[j] - 9.0 * pa_xx[j] * pc_xyy[j] * pb_yz[j] - 3.0 * pa_x[j] * pc_xxz[j] * pb_yyy[j] - 9.0 * pa_x[j] * pc_xxy[j] * pb_yyz[j] - pc_xxx[j] * pb_yyyz[j]);

                t_xxx_yyyz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxx[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyyz[j] + 4.5 * pa_x[j] * fl1_fx * pb_y[j] * pc_yyz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] + 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 4.5 * pc_xyy[j] * fl1_fx * pb_yz[j] + pa_xxx[j] * pc_yyyz[j] + 9.0 * pa_xx[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_xyyy[j] * pb_z[j] + 9.0 * pa_x[j] * pc_xxyz[j] * pb_yy[j] + 9.0 * pa_x[j] * pc_xxyy[j] * pb_yz[j] + pc_xxxz[j] * pb_yyy[j] + 3.0 * pc_xxxy[j] * pb_yyz[j]);

                t_xxx_yyyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyyz[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyyyz[j] - 9.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_xxyyy[j] * pb_z[j] - 3.0 * pc_xxxyz[j] * pb_yy[j] - 3.0 * pc_xxxyy[j] * pb_yz[j]);

                t_xxx_yyyz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyyz[j] + 3.0 * pc_xxxyyz[j] * pb_y[j] + pc_xxxyyy[j] * pb_z[j]);

                t_xxx_yyyz[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_12_15(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (12,15)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxx = paDistances.data(19 * idx + 9);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxx_yyzz = primBuffer.data(150 * idx + 12);

            auto t_xxx_yzzz = primBuffer.data(150 * idx + 13);

            auto t_xxx_zzzz = primBuffer.data(150 * idx + 14);

            // Batch of Integrals (12,15)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxx, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, pb_yzzz, \
                                     pb_z, pb_zz, pb_zzz, pb_zzzz, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, \
                                     pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, \
                                     pc_xxxzzzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, \
                                     pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xxx_yyzz, t_xxx_yzzz, t_xxx_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxx_yyzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.25 * pa_xxx[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xxx[j] * pb_yy[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pb_yyzz[j] + pa_xxx[j] * pb_yyzz[j]);

                t_xxx_yyzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.5 * pa_xxx[j] * fl2_fx - 0.75 * pa_xx[j] * pc_x[j] * fl2_fx - 1.5 * pa_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xxx[j] * pb_yy[j] * fl1_fx - pa_xxx[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xxx[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xx[j] * pc_x[j] * pb_yy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] - 3.0 * pa_x[j] * fl1_fx * pb_yyz[j] * pc_z[j] - 3.0 * pa_x[j] * fl1_fx * pb_yzz[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_yyzz[j] - 1.5 * pc_x[j] * fl1_fx * pb_yyzz[j] - 2.0 * pa_xxx[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_xxx[j] * pb_yzz[j] * pc_y[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_yyzz[j]);

                t_xxx_yyzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.25 * pa_xxx[j] * fl2_fx + 1.5 * pa_xx[j] * pc_x[j] * fl2_fx + 0.75 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + pa_xxx[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_xxx[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xxx[j] * fl1_fx * pc_zz[j] + pa_xxx[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xx[j] * pc_x[j] * pb_yy[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_x[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_xx[j] * pb_yy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pb_yy[j] * pc_zz[j] + 6.0 * pa_x[j] * fl1_fx * pb_yz[j] * pc_yz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] + 3.0 * pa_x[j] * fl1_fx * pb_yyz[j] * pc_z[j] + 3.0 * pa_x[j] * fl1_fx * pb_yzz[j] * pc_y[j] + 3.0 * pc_xz[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_xy[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_x[j] * fl1_fx * pb_yyzz[j] + pa_xxx[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_xxx[j] * pb_yz[j] * pc_yz[j] + pa_xxx[j] * pc_yy[j] * pb_zz[j] + 6.0 * pa_xx[j] * pc_xz[j] * pb_yyz[j] + 6.0 * pa_xx[j] * pc_xy[j] * pb_yzz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_yyzz[j]);

                t_xxx_yyzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.75 * pa_xx[j] * pc_x[j] * fl2_fx - 1.5 * pa_x[j] * pc_xx[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 1.5 * pa_x[j] * fl2_fx * pc_yy[j] - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xxx[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xxx[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_xx[j] * pb_yy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxx[j] * pb_yy[j] * fl1_fx - 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - 3.0 * pa_x[j] * fl1_fx * pb_y[j] * pc_yzz[j] - 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_yy[j] * pc_zz[j] - 6.0 * pa_x[j] * fl1_fx * pb_yz[j] * pc_yz[j] - 1.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_yyz[j] - 3.0 * pc_xy[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_xxx[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_xxx[j] * pc_yyz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_yy[j] - 12.0 * pa_xx[j] * pc_xyz[j] * pb_yz[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_zz[j] - 6.0 * pa_x[j] * pc_xxz[j] * pb_yyz[j] - 6.0 * pa_x[j] * pc_xxy[j] * pb_yzz[j] - pc_xxx[j] * pb_yyzz[j]);

                t_xxx_yyzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pc_xxx[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pb_yy[j] * fl1_fx + pc_xxxy[j] * pb_y[j] * fl1_fx + pc_xxxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_yyzz[j] + 3.0 * pa_x[j] * fl1_fx * pb_y[j] * pc_yzz[j] + 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + pa_xxx[j] * pc_yyzz[j] + 6.0 * pa_xx[j] * pc_xyzz[j] * pb_y[j] + 6.0 * pa_xx[j] * pc_xyyz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_yy[j] + 12.0 * pa_x[j] * pc_xxyz[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_zz[j] + 2.0 * pc_xxxz[j] * pb_yyz[j] + 2.0 * pc_xxxy[j] * pb_yzz[j]);

                t_xxx_yyzz[j] += fl_s_0_0_5 * (-0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xxyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxzz[j] * fl1_fx - pc_xxxy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - pc_xxxz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_yyzz[j] - 1.5 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyyzz[j] - 6.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - 6.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxxzz[j] * pb_yy[j] - 4.0 * pc_xxxyz[j] * pb_yz[j] - pc_xxxyy[j] * pb_zz[j]);

                t_xxx_yyzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyyzz[j] + 2.0 * pc_xxxyzz[j] * pb_y[j] + 2.0 * pc_xxxyyz[j] * pb_z[j]);

                t_xxx_yyzz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];

                t_xxx_yzzz[j] = fl_s_0_0_0 * (2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xxx[j] * pb_yz[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pb_yzzz[j] + pa_xxx[j] * pb_yzzz[j]);

                t_xxx_yzzz[j] += fl_s_0_0_1 * (-4.5 * pa_x[j] * fl2_fx * pb_yz[j] - 2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xxx[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xxx[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_xxx[j] * pc_y[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_x[j] * pb_yz[j] * fl1_fx - 4.5 * pa_x[j] * fl1_fx * pb_yzz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_yzzz[j] - 1.5 * pc_x[j] * fl1_fx * pb_yzzz[j] - 3.0 * pa_xxx[j] * pb_yzz[j] * pc_z[j] - pa_xxx[j] * pc_y[j] * pb_zzz[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_yzzz[j]);

                t_xxx_yzzz[j] += fl_s_0_0_2 * (4.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 4.5 * pc_x[j] * fl2_fx * pb_yz[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xxx[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_x[j] * pb_yz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xy[j] * pb_z[j] * fl1_fx + 4.5 * pa_x[j] * pc_xx[j] * pb_yz[j] * fl1_fx + 4.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_zz[j] + 4.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] + 4.5 * pa_x[j] * fl1_fx * pb_yzz[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] + 4.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * fl1_fx * pb_yzzz[j] + 3.0 * pa_xxx[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_xxx[j] * pc_yz[j] * pb_zz[j] + 9.0 * pa_xx[j] * pc_xz[j] * pb_yzz[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_zzz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_yzzz[j]);

                t_xxx_yzzz[j] += fl_s_0_0_3 * (-4.5 * pa_x[j] * fl2_fx * pc_yz[j] - 2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xxx[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xx[j] * pb_yz[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_xxy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxx[j] * pb_yz[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pb_y[j] * pc_zzz[j] - 4.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] - 4.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_zz[j] - 4.5 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] - 4.5 * pc_xzz[j] * fl1_fx * pb_yz[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - pa_xxx[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_xxx[j] * pc_yzz[j] * pb_z[j] - 9.0 * pa_xx[j] * pc_xzz[j] * pb_yz[j] - 9.0 * pa_xx[j] * pc_xyz[j] * pb_zz[j] - 9.0 * pa_x[j] * pc_xxz[j] * pb_yzz[j] - 3.0 * pa_x[j] * pc_xxy[j] * pb_zzz[j] - pc_xxx[j] * pb_yzzz[j]);

                t_xxx_yzzz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxy[j] * pb_z[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 1.5 * pc_xxx[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxxy[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pc_yzzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_y[j] * pc_zzz[j] + 4.5 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xzz[j] * fl1_fx * pb_yz[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_xxx[j] * pc_yzzz[j] + 3.0 * pa_xx[j] * pc_xzzz[j] * pb_y[j] + 9.0 * pa_xx[j] * pc_xyzz[j] * pb_z[j] + 9.0 * pa_x[j] * pc_xxzz[j] * pb_yz[j] + 9.0 * pa_x[j] * pc_xxyz[j] * pb_zz[j] + 3.0 * pc_xxxz[j] * pb_yzz[j] + pc_xxxy[j] * pb_zzz[j]);

                t_xxx_yzzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_yzzz[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xyzzz[j] - 3.0 * pa_x[j] * pc_xxzzz[j] * pb_y[j] - 9.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - 3.0 * pc_xxxzz[j] * pb_yz[j] - 3.0 * pc_xxxyz[j] * pb_zz[j]);

                t_xxx_yzzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyzzz[j] + pc_xxxzzz[j] * pb_y[j] + 3.0 * pc_xxxyzz[j] * pb_z[j]);

                t_xxx_yzzz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];

                t_xxx_zzzz[j] = fl_s_0_0_0 * (1.125 * pa_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pb_zz[j] + 3.0 * pa_xxx[j] * pb_zz[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pb_zzzz[j] + pa_xxx[j] * pb_zzzz[j]);

                t_xxx_zzzz[j] += fl_s_0_0_1 * (-3.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xxx[j] * fl2_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * fl2_fx * pb_zz[j] - 9.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 4.5 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xxx[j] * pb_zz[j] * fl1_fx - 6.0 * pa_xxx[j] * pb_z[j] * pc_z[j] * fl1_fx - 9.0 * pa_xx[j] * pc_x[j] * pb_zz[j] * fl1_fx - 6.0 * pa_x[j] * fl1_fx * pb_zzz[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_zzzz[j] - 1.5 * pc_x[j] * fl1_fx * pb_zzzz[j] - 4.0 * pa_xxx[j] * pb_zzz[j] * pc_z[j] - 3.0 * pa_xx[j] * pc_x[j] * pb_zzzz[j]);

                t_xxx_zzzz[j] += fl_s_0_0_2 * (3.375 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 0.75 * pa_xxx[j] * fl2_fx + 4.5 * pa_xx[j] * pc_x[j] * fl2_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 18.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_zz[j] + 4.5 * pa_x[j] * fl2_fx * pb_zz[j] + 9.0 * pc_x[j] * fl2_fx * pb_zz[j] + 9.0 * pc_xz[j] * fl2_fx * pb_z[j] + 6.0 * pa_xxx[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_xxx[j] * pc_zz[j] * fl1_fx + 9.0 * pa_xx[j] * pc_x[j] * pb_zz[j] * fl1_fx + 18.0 * pa_xx[j] * pc_xz[j] * pb_z[j] * fl1_fx + 9.0 * pa_x[j] * pc_xx[j] * pb_zz[j] * fl1_fx + 9.0 * pa_x[j] * fl1_fx * pb_zz[j] * pc_zz[j] + 6.0 * pa_x[j] * fl1_fx * pb_zzz[j] * pc_z[j] + 6.0 * pc_xz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * fl1_fx * pb_zzzz[j] + 6.0 * pa_xxx[j] * pb_zz[j] * pc_zz[j] + 12.0 * pa_xx[j] * pc_xz[j] * pb_zzz[j] + 3.0 * pa_x[j] * pc_xx[j] * pb_zzzz[j]);

                t_xxx_zzzz[j] += fl_s_0_0_3 * (-1.125 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 2.25 * pa_xx[j] * pc_x[j] * fl2_fx - 4.5 * pa_x[j] * pc_xx[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 9.0 * pa_x[j] * fl2_fx * pc_zz[j] - 9.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 18.0 * pc_xz[j] * fl2_fx * pb_z[j] - 4.5 * pc_xzz[j] * fl2_fx - 4.5 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xxx[j] * pc_zz[j] * fl1_fx - 18.0 * pa_xx[j] * pc_xz[j] * pb_z[j] * fl1_fx - 9.0 * pa_xx[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_x[j] * pc_xx[j] * pb_zz[j] * fl1_fx - 18.0 * pa_x[j] * pc_xxz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxx[j] * pb_zz[j] * fl1_fx - 6.0 * pa_x[j] * fl1_fx * pb_z[j] * pc_zzz[j] - 9.0 * pa_x[j] * fl1_fx * pb_zz[j] * pc_zz[j] - 9.0 * pc_xzz[j] * fl1_fx * pb_zz[j] - 6.0 * pc_xz[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_xxx[j] * pb_z[j] * pc_zzz[j] - 18.0 * pa_xx[j] * pc_xzz[j] * pb_zz[j] - 12.0 * pa_x[j] * pc_xxz[j] * pb_zzz[j] - pc_xxx[j] * pb_zzzz[j]);

                t_xxx_zzzz[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 2.25 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pc_xxx[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_zz[j] + 9.0 * pc_xzz[j] * fl2_fx + 9.0 * pc_xz[j] * fl2_fx * pb_z[j] + 9.0 * pa_xx[j] * pc_xzz[j] * fl1_fx + 18.0 * pa_x[j] * pc_xxz[j] * pb_z[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 3.0 * pc_xxx[j] * pb_zz[j] * fl1_fx + 6.0 * pc_xxxz[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pc_zzzz[j] + 6.0 * pa_x[j] * fl1_fx * pb_z[j] * pc_zzz[j] + 6.0 * pc_xzzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_xzz[j] * fl1_fx * pb_zz[j] + pa_xxx[j] * pc_zzzz[j] + 12.0 * pa_xx[j] * pc_xzzz[j] * pb_z[j] + 18.0 * pa_x[j] * pc_xxzz[j] * pb_zz[j] + 4.0 * pc_xxxz[j] * pb_zzz[j]);

                t_xxx_zzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xzz[j] * fl2_fx - 9.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 6.0 * pc_xxxz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxxzz[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_zzzz[j] - 1.5 * pc_xzzzz[j] * fl1_fx - 6.0 * pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_xx[j] * pc_xzzzz[j] - 12.0 * pa_x[j] * pc_xxzzz[j] * pb_z[j] - 6.0 * pc_xxxzz[j] * pb_zz[j]);

                t_xxx_zzzz[j] += fl_s_0_0_6 * (3.0 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxzzzz[j] + 4.0 * pc_xxxzzz[j] * pb_z[j]);

                t_xxx_zzzz[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_15_18(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (15,18)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xy = paDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxy = pcDistances.data(119 * idx + 84);

            auto pc_xxxxxyy = pcDistances.data(119 * idx + 86);

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxy_xxxx = primBuffer.data(150 * idx + 15);

            auto t_xxy_xxxy = primBuffer.data(150 * idx + 16);

            auto t_xxy_xxxz = primBuffer.data(150 * idx + 17);

            // Batch of Integrals (15,18)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xy, pa_y, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, \
                                     pb_xxxz, pb_xxy, pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, \
                                     pc_xxxxxx, pc_xxxxxxy, pc_xxxxxy, pc_xxxxxyy, pc_xxxxxyz, pc_xxxxxz, pc_xxxxy, \
                                     pc_xxxxyy, pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, \
                                     pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyz, pc_xz, pc_y, pc_yy, pc_yz, pc_z, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxy_xxxx, t_xxy_xxxy, \
                                     t_xxy_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxy_xxxx[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pa_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 6.0 * pa_xy[j] * fl2_fx * pb_x[j] + 4.5 * fl2_fx * pa_y[j] * pb_xx[j] + 3.0 * pa_xxy[j] * pb_xx[j] * fl1_fx + 4.0 * pa_xy[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxxx[j] + pa_xxy[j] * pb_xxxx[j]);

                t_xxy_xxxx[j] += fl_s_0_0_1 * (-5.625 * fl3_fx * pa_y[j] - 1.875 * fl3_fx * pc_y[j] - 1.5 * pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 7.5 * pa_xy[j] * pc_x[j] * fl2_fx - 12.0 * pa_xy[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 15.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 4.5 * fl2_fx * pc_y[j] * pb_xx[j] - 9.0 * fl2_fx * pa_y[j] * pb_xx[j] - 3.0 * pa_xxy[j] * pb_xx[j] * fl1_fx - 6.0 * pa_xxy[j] * pb_x[j] * pc_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_y[j] * pb_xx[j] * fl1_fx - 18.0 * pa_xy[j] * pc_x[j] * pb_xx[j] * fl1_fx - 4.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxx[j] - 4.0 * pa_xy[j] * fl1_fx * pb_xxx[j] - 6.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxx[j] - 0.5 * fl1_fx * pc_y[j] * pb_xxxx[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxxx[j] - 4.0 * pa_xxy[j] * pb_xxx[j] * pc_x[j] - pa_xx[j] * pc_y[j] * pb_xxxx[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xxxx[j]);

                t_xxy_xxxx[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_y[j] + 5.625 * fl3_fx * pa_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 15.0 * pa_xy[j] * pc_x[j] * fl2_fx + 7.5 * pa_x[j] * pc_xy[j] * fl2_fx + 12.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + 6.0 * pa_xy[j] * fl2_fx * pb_x[j] + 11.25 * pc_xx[j] * pa_y[j] * fl2_fx + 30.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 15.0 * pc_xy[j] * fl2_fx * pb_x[j] + 9.0 * fl2_fx * pc_y[j] * pb_xx[j] + 4.5 * fl2_fx * pa_y[j] * pb_xx[j] + 6.0 * pa_xxy[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_xx[j] * fl1_fx + 3.0 * pa_xx[j] * pc_y[j] * pb_xx[j] * fl1_fx + 6.0 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + 18.0 * pa_xy[j] * pc_x[j] * pb_xx[j] * fl1_fx + 24.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx + 18.0 * pa_x[j] * pc_xy[j] * pb_xx[j] * fl1_fx + 4.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxx[j] + 18.0 * pc_xx[j] * pa_y[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xy[j] * fl1_fx * pb_xxx[j] + 6.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxx[j] + 0.5 * fl1_fx * pc_y[j] * pb_xxxx[j] + 6.0 * pa_xxy[j] * pb_xx[j] * pc_xx[j] + 4.0 * pa_xx[j] * pc_xy[j] * pb_xxx[j] + 8.0 * pa_xy[j] * pc_xx[j] * pb_xxx[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xxxx[j] + pc_xx[j] * pa_y[j] * pb_xxxx[j]);

                t_xxy_xxxx[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 1.875 * fl3_fx * pa_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 7.5 * pa_xy[j] * pc_x[j] * fl2_fx - 15.0 * pa_x[j] * pc_xy[j] * fl2_fx - 6.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 22.5 * pc_xx[j] * pa_y[j] * fl2_fx - 11.25 * pc_xxy[j] * fl2_fx - 30.0 * pc_xy[j] * fl2_fx * pb_x[j] - 15.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 4.5 * fl2_fx * pc_y[j] * pb_xx[j] - 3.0 * pa_xxy[j] * pc_xx[j] * fl1_fx - 6.0 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxy[j] * fl1_fx - 24.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx - 10.0 * pa_xy[j] * pc_xxx[j] * fl1_fx - 18.0 * pa_x[j] * pc_xy[j] * pb_xx[j] * fl1_fx - 24.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 18.0 * pc_xx[j] * pa_y[j] * pb_xx[j] * fl1_fx - 20.0 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx - 18.0 * pc_xxy[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xy[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_xxy[j] * pb_x[j] * pc_xxx[j] - 6.0 * pa_xx[j] * pc_xxy[j] * pb_xx[j] - 12.0 * pa_xy[j] * pc_xxx[j] * pb_xx[j] - 8.0 * pa_x[j] * pc_xxy[j] * pb_xxx[j] - 4.0 * pc_xxx[j] * pa_y[j] * pb_xxx[j] - pc_xxy[j] * pb_xxxx[j]);

                t_xxy_xxxx[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 7.5 * pa_x[j] * pc_xy[j] * fl2_fx + 11.25 * pc_xx[j] * pa_y[j] * fl2_fx + 22.5 * pc_xxy[j] * fl2_fx + 15.0 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * pa_xx[j] * pc_xxy[j] * fl1_fx + 10.0 * pa_xy[j] * pc_xxx[j] * fl1_fx + 24.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 10.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 20.0 * pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx + 7.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 18.0 * pc_xxy[j] * pb_xx[j] * fl1_fx + 20.0 * pc_xxxy[j] * pb_x[j] * fl1_fx + pa_xxy[j] * pc_xxxx[j] + 4.0 * pa_xx[j] * pc_xxxy[j] * pb_x[j] + 8.0 * pa_xy[j] * pc_xxxx[j] * pb_x[j] + 12.0 * pa_x[j] * pc_xxxy[j] * pb_xx[j] + 6.0 * pc_xxxx[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxxy[j] * pb_xxx[j]);

                t_xxy_xxxx[j] += fl_s_0_0_5 * (-11.25 * pc_xxy[j] * fl2_fx - 10.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 7.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 20.0 * pc_xxxy[j] * pb_x[j] * fl1_fx - 7.5 * pc_xxxxy[j] * fl1_fx - pa_xx[j] * pc_xxxxy[j] - 2.0 * pa_xy[j] * pc_xxxxx[j] - 8.0 * pa_x[j] * pc_xxxxy[j] * pb_x[j] - 4.0 * pc_xxxxx[j] * pa_y[j] * pb_x[j] - 6.0 * pc_xxxxy[j] * pb_xx[j]);

                t_xxy_xxxx[j] += fl_s_0_0_6 * (7.5 * pc_xxxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxxy[j] + pc_xxxxxx[j] * pa_y[j] + 4.0 * pc_xxxxxy[j] * pb_x[j]);

                t_xxy_xxxx[j] += -fl_s_0_0_7 * pc_xxxxxxy[j];

                t_xxy_xxxy[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 2.25 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_xxy[j] * pb_xy[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxxy[j] + pa_xxy[j] * pb_xxxy[j]);

                t_xxy_xxxy[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 3.375 * fl3_fx * pb_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 1.5 * pa_xy[j] * fl2_fx * pc_y[j] - 3.0 * pa_xy[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pb_xx[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 2.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 2.25 * fl2_fx * pc_y[j] * pb_xy[j] - 4.5 * fl2_fx * pa_y[j] * pb_xy[j] - 0.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_xxy[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_xxy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_y[j] - 1.5 * pa_xx[j] * pc_y[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] - 9.0 * pa_xy[j] * pc_x[j] * pb_xy[j] * fl1_fx - pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] - 3.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxy[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xxy[j] - 4.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxy[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxx[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_xxxy[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxxy[j] - pa_xxy[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_xxy[j] * pb_xxy[j] * pc_x[j] - pa_xx[j] * pc_y[j] * pb_xxxy[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xxxy[j]);

                t_xxy_xxxy[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 3.375 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_xy[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yy[j] + 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 1.5 * pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pa_y[j] + 7.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pb_xx[j] + 2.25 * fl2_fx * pc_yy[j] * pb_x[j] + 4.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] + 4.5 * fl2_fx * pc_y[j] * pb_xy[j] + 2.25 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_xxy[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_xxy[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_y[j] + 1.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_y[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] + 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] + 9.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 9.0 * pa_xy[j] * pc_x[j] * pb_xy[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] + 9.0 * pa_x[j] * pc_xy[j] * pb_xy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xx[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] + 3.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxy[j] + 9.0 * pc_xx[j] * pa_y[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xx[j] + 4.5 * pc_xy[j] * fl1_fx * pb_xxy[j] + 4.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxy[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xxx[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxx[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_xxxy[j] + 3.0 * pa_xxy[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_xxy[j] * pb_xy[j] * pc_xx[j] + pa_xx[j] * pc_yy[j] * pb_xxx[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xxy[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_xxx[j] + 6.0 * pa_xy[j] * pc_xx[j] * pb_xxy[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xxxy[j] + pc_xx[j] * pa_y[j] * pb_xxxy[j]);

                t_xxy_xxxy[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 6.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_yy[j] - 1.5 * pa_xy[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 9.0 * pc_xx[j] * fl2_fx * pb_x[j] - 2.5 * pc_xxx[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pa_y[j] - 3.75 * pc_xyy[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 4.5 * fl2_fx * pc_yy[j] * pb_x[j] - 2.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 2.25 * fl2_fx * pc_y[j] * pb_xy[j] - 1.5 * pa_xxy[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] - 9.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xy[j] * pb_xy[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] - 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xx[j] - 9.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xx[j] * pa_y[j] * pb_xy[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 9.0 * pc_xxy[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xx[j] - 4.5 * pc_xy[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xxx[j] - 3.0 * pa_xxy[j] * pb_x[j] * pc_xxy[j] - pa_xxy[j] * pc_xxx[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_xx[j] - 3.0 * pa_xx[j] * pc_xxy[j] * pb_xy[j] - 6.0 * pa_xy[j] * pc_xxy[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xxx[j] * pb_xy[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xxx[j] - 6.0 * pa_x[j] * pc_xxy[j] * pb_xxy[j] - pc_xxy[j] * pa_y[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_y[j] * pb_xxy[j] - pc_xxy[j] * pb_xxxy[j]);

                t_xxy_xxxy[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pc_yy[j] + 5.0 * pc_xxx[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xyy[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pc_yy[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] + 6.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + pa_x[j] * pc_xxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] + 9.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxy[j] * pa_y[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxyy[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxy[j] * pb_xy[j] * fl1_fx + 5.0 * pc_xxxy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] + 4.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + pa_xxy[j] * pc_xxxy[j] + 3.0 * pa_xx[j] * pc_xxyy[j] * pb_x[j] + pa_xx[j] * pc_xxxy[j] * pb_y[j] + 6.0 * pa_xy[j] * pc_xxxy[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxxx[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xxyy[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxy[j] * pb_xy[j] + 3.0 * pc_xxxy[j] * pa_y[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_y[j] * pb_xy[j] + pc_xxyy[j] * pb_xxx[j] + 3.0 * pc_xxxy[j] * pb_xxy[j]);

                t_xxy_xxxy[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xyy[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - pa_x[j] * pc_xxxx[j] * fl1_fx - 5.0 * pc_xxxy[j] * pa_y[j] * fl1_fx - 9.0 * pc_xxyy[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxyy[j] * fl1_fx - 5.0 * pc_xxxy[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxxxx[j] * fl1_fx - 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxxyy[j] - 2.0 * pa_xy[j] * pc_xxxxy[j] - 6.0 * pa_x[j] * pc_xxxyy[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxxy[j] * pb_y[j] - 3.0 * pc_xxxxy[j] * pa_y[j] * pb_x[j] - pc_xxxxx[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxxyy[j] * pb_xx[j] - 3.0 * pc_xxxxy[j] * pb_xy[j]);

                t_xxy_xxxy[j] += fl_s_0_0_6 * (5.0 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxyy[j] + pc_xxxxxy[j] * pa_y[j] + 3.0 * pc_xxxxyy[j] * pb_x[j] + pc_xxxxxy[j] * pb_y[j]);

                t_xxy_xxxy[j] += -fl_s_0_0_7 * pc_xxxxxyy[j];

                t_xxy_xxxz[j] = fl_s_0_0_0 * (1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 2.25 * fl2_fx * pa_y[j] * pb_xz[j] + 1.5 * pa_xxy[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xy[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxxz[j] + pa_xxy[j] * pb_xxxz[j]);

                t_xxy_xxxz[j] += fl_s_0_0_1 * (-1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 3.0 * pa_xy[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 2.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 2.25 * fl2_fx * pc_y[j] * pb_xz[j] - 4.5 * fl2_fx * pa_y[j] * pb_xz[j] - 1.5 * pa_xxy[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_xxy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_y[j] * pb_xz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_x[j] * pb_xz[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] - 3.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxz[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xxz[j] - 4.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxx[j] * pc_z[j] - 0.5 * fl1_fx * pc_y[j] * pb_xxxz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxxz[j] - pa_xxy[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_xxy[j] * pb_xxz[j] * pc_x[j] - pa_xx[j] * pc_y[j] * pb_xxxz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xxxz[j]);

                t_xxy_xxxz[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 3.75 * pc_xz[j] * fl2_fx * pa_y[j] + 7.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_x[j] + 4.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] + 4.5 * fl2_fx * pc_y[j] * pb_xz[j] + 2.25 * fl2_fx * pa_y[j] * pb_xz[j] + 1.5 * pa_xxy[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_y[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + 9.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + 9.0 * pa_xy[j] * pc_x[j] * pb_xz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] + 9.0 * pa_x[j] * pc_xy[j] * pb_xz[j] * fl1_fx + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] + 3.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xxz[j] + 9.0 * pc_xx[j] * pa_y[j] * pb_xz[j] * fl1_fx + 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xx[j] + 4.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + 4.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_xxz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xxx[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxx[j] * pc_z[j] + 0.5 * fl1_fx * pc_y[j] * pb_xxxz[j] + 3.0 * pa_xxy[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_xxy[j] * pb_xz[j] * pc_xx[j] + pa_xx[j] * pc_yz[j] * pb_xxx[j] + 3.0 * pa_xx[j] * pc_xy[j] * pb_xxz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xxx[j] + 6.0 * pa_xy[j] * pc_xx[j] * pb_xxz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xxxz[j] + pc_xx[j] * pa_y[j] * pb_xxxz[j]);

                t_xxy_xxxz[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 7.5 * pc_xz[j] * fl2_fx * pa_y[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 4.5 * fl2_fx * pc_yz[j] * pb_x[j] - 2.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 2.25 * fl2_fx * pc_y[j] * pb_xz[j] - 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - 9.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xxz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xy[j] * pb_xz[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] - 9.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xx[j] * pa_y[j] * pb_xz[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - 9.0 * pc_xxy[j] * pb_xz[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xx[j] - 4.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xxx[j] - 3.0 * pa_xxy[j] * pb_x[j] * pc_xxz[j] - pa_xxy[j] * pc_xxx[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xx[j] - 3.0 * pa_xx[j] * pc_xxy[j] * pb_xz[j] - 6.0 * pa_xy[j] * pc_xxz[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xxx[j] * pb_xz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xxx[j] - 6.0 * pa_x[j] * pc_xxy[j] * pb_xxz[j] - pc_xxz[j] * pa_y[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_y[j] * pb_xxz[j] - pc_xxy[j] * pb_xxxz[j]);

                t_xxy_xxxz[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pa_y[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xxz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxyz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxy[j] * pb_xz[j] * fl1_fx + 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + pa_xxy[j] * pc_xxxz[j] + 3.0 * pa_xx[j] * pc_xxyz[j] * pb_x[j] + pa_xx[j] * pc_xxxy[j] * pb_z[j] + 6.0 * pa_xy[j] * pc_xxxz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxxx[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxy[j] * pb_xz[j] + 3.0 * pc_xxxz[j] * pa_y[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_y[j] * pb_xz[j] + pc_xxyz[j] * pb_xxx[j] + 3.0 * pc_xxxy[j] * pb_xxz[j]);

                t_xxy_xxxz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx - 9.0 * pc_xxyz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - 5.0 * pc_xxxy[j] * fl1_fx * pb_z[j] - pa_xx[j] * pc_xxxyz[j] - 2.0 * pa_xy[j] * pc_xxxxz[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxxy[j] * pb_z[j] - 3.0 * pc_xxxxz[j] * pa_y[j] * pb_x[j] - pc_xxxxx[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxxyz[j] * pb_xx[j] - 3.0 * pc_xxxxy[j] * pb_xz[j]);

                t_xxy_xxxz[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxyz[j] + pc_xxxxxz[j] * pa_y[j] + 3.0 * pc_xxxxyz[j] * pb_x[j] + pc_xxxxxy[j] * pb_z[j]);

                t_xxy_xxxz[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_18_21(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (18,21)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xy = paDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxy_xxyy = primBuffer.data(150 * idx + 18);

            auto t_xxy_xxyz = primBuffer.data(150 * idx + 19);

            auto t_xxy_xxzz = primBuffer.data(150 * idx + 20);

            // Batch of Integrals (18,21)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xy, pa_y, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, \
                                     pb_xxz, pb_xxzz, pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyy, pc_xxxxyyz, \
                                     pc_xxxxyz, pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyz, \
                                     pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyz, pc_xxyz, \
                                     pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyz, pc_xyz, pc_xyzz, pc_xz, \
                                     pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxy_xxyy, t_xxy_xxyz, \
                                     t_xxy_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxy_xxyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_y[j] + pa_xy[j] * fl2_fx * pb_x[j] + 2.0 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_y[j] * pb_yy[j] + 0.25 * fl2_fx * pa_y[j] * pb_xx[j] + 0.5 * fl2_fx * pb_xxy[j] + 0.5 * pa_xxy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xxy[j] * fl1_fx * pb_yy[j] + pa_xx[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxyy[j] + pa_xxy[j] * pb_xxyy[j]);

                t_xxy_xxyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 1.125 * fl3_fx * pc_y[j] - 2.25 * fl3_fx * pb_y[j] - 0.5 * pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - pa_xx[j] * fl2_fx * pb_y[j] - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 2.0 * pa_xy[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 4.0 * pa_x[j] * fl2_fx * pb_xy[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_y[j] * pb_yy[j] - 1.5 * fl2_fx * pa_y[j] * pb_yy[j] - 0.5 * fl2_fx * pa_y[j] * pb_xx[j] - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - fl2_fx * pb_xxy[j] - 0.5 * pa_xxy[j] * pb_xx[j] * fl1_fx - pa_xxy[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xxy[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xx[j] * pc_y[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yy[j] - 2.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] - pa_xx[j] * fl1_fx * pb_xxy[j] - pa_xy[j] * pc_x[j] * pb_xx[j] * fl1_fx - 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] - 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] - 4.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyy[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xyy[j] - 3.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyy[j] - fl1_fx * pa_y[j] * pb_xxy[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_xxyy[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxyy[j] - 2.0 * pa_xxy[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_xxy[j] * pb_xyy[j] * pc_x[j] - pa_xx[j] * pc_y[j] * pb_xxyy[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xxyy[j]);

                t_xxy_xxyy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pa_y[j] + 2.25 * fl3_fx * pb_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_x[j] * fl2_fx + 4.5 * pa_x[j] * pc_xy[j] * fl2_fx + 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 6.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + pa_xy[j] * fl2_fx * pb_x[j] + 2.0 * pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 4.5 * pc_xy[j] * fl2_fx * pb_x[j] + 6.0 * pc_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_y[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yy[j] * pb_y[j] + 3.0 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] + 1.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.75 * fl2_fx * pa_y[j] * pb_yy[j] + 1.5 * fl2_fx * pc_y[j] * pb_xx[j] + 0.25 * fl2_fx * pa_y[j] * pb_xx[j] + 0.5 * fl2_fx * pb_xxy[j] + pa_xxy[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xxy[j] * fl1_fx * pc_yy[j] + pa_xxy[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_xx[j] * pc_y[j] * pb_xx[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + pa_xx[j] * pc_yy[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yy[j] + pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] + 2.0 * pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] + pa_xy[j] * pc_x[j] * pb_xx[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yy[j] + 3.0 * pa_x[j] * pc_xy[j] * pb_xx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 4.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] + 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] + 4.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xy[j] + 4.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyy[j] + 0.5 * pc_xx[j] * pa_y[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] + pc_xx[j] * fl1_fx * pb_xxy[j] + 6.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyy[j] + 0.5 * fl1_fx * pa_y[j] * pb_xx[j] * pc_yy[j] + fl1_fx * pc_yy[j] * pb_xxy[j] + fl1_fx * pa_y[j] * pb_xxy[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_xxyy[j] + pa_xxy[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_xxy[j] * pb_xy[j] * pc_xy[j] + pa_xxy[j] * pc_xx[j] * pb_yy[j] + 2.0 * pa_xx[j] * pc_yy[j] * pb_xxy[j] + 2.0 * pa_xx[j] * pc_xy[j] * pb_xyy[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xxy[j] + 4.0 * pa_xy[j] * pc_xx[j] * pb_xyy[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xxyy[j] + pc_xx[j] * pa_y[j] * pb_xxyy[j]);

                t_xxy_xxyy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xy[j] * fl2_fx - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 3.0 * pc_xx[j] * pa_y[j] * fl2_fx - 4.5 * pc_xxy[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_y[j] - 9.0 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_yyy[j] - 1.5 * fl2_fx * pa_y[j] * pc_yy[j] - 3.0 * fl2_fx * pc_yy[j] * pb_y[j] - 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_y[j] * pb_yy[j] - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - 0.5 * pa_xxy[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xxy[j] * fl1_fx * pc_yy[j] - 3.0 * pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx - pa_xx[j] * pc_yy[j] * fl1_fx * pb_y[j] - pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] - 2.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx - pa_xy[j] * pc_xxx[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xy[j] * pb_xx[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 2.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - 4.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_x[j] - 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] - 4.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xy[j] - 0.5 * pc_xx[j] * pa_y[j] * pb_xx[j] * fl1_fx - pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxy[j] * pb_xx[j] * fl1_fx - 3.0 * pc_xxy[j] * fl1_fx * pb_yy[j] - 2.0 * pc_xxx[j] * fl1_fx * pb_xy[j] - pc_xx[j] * fl1_fx * pb_xxy[j] - 3.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_x[j] - 6.0 * pc_xyy[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_xx[j] - 0.5 * fl1_fx * pa_y[j] * pb_xx[j] * pc_yy[j] - fl1_fx * pc_yy[j] * pb_xxy[j] - 2.0 * pa_xxy[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_xxy[j] * pc_xxy[j] * pb_y[j] - pa_xx[j] * pc_yyy[j] * pb_xx[j] - 4.0 * pa_xx[j] * pc_xyy[j] * pb_xy[j] - pa_xx[j] * pc_xxy[j] * pb_yy[j] - 2.0 * pa_xy[j] * pc_xyy[j] * pb_xx[j] - 8.0 * pa_xy[j] * pc_xxy[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_xxx[j] * pb_yy[j] - 4.0 * pa_x[j] * pc_xyy[j] * pb_xxy[j] - 4.0 * pa_x[j] * pc_xxy[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xxy[j] - 2.0 * pc_xxx[j] * pa_y[j] * pb_xyy[j] - pc_xxy[j] * pb_xxyy[j]);

                t_xxy_xxyy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 4.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 9.0 * pc_xxy[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_y[j] + 4.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyy[j] + 0.75 * fl2_fx * pa_y[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx + pa_xy[j] * pc_xxx[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_x[j] + pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxy[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xxxy[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_yy[j] + pc_xxxx[j] * fl1_fx * pb_y[j] + 2.0 * pc_xxx[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyyy[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_x[j] + 6.0 * pc_xyy[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_xx[j] + pa_xxy[j] * pc_xxyy[j] + 2.0 * pa_xx[j] * pc_xyyy[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xxyy[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_xxyy[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxxy[j] * pb_y[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_xx[j] + 8.0 * pa_x[j] * pc_xxyy[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xxxy[j] * pb_yy[j] + pc_xxyy[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxxy[j] * pa_y[j] * pb_xy[j] + pc_xxxx[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xxyy[j] * pb_xxy[j] + 2.0 * pc_xxxy[j] * pb_xyy[j]);

                t_xxy_xxyy[j] += fl_s_0_0_5 * (-4.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yyy[j] - 3.0 * pa_x[j] * pc_xxxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxxy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxxy[j] * fl1_fx - 3.0 * pc_xxyyy[j] * fl1_fx - 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - pc_xxxx[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyyy[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxyyy[j] - 2.0 * pa_xy[j] * pc_xxxyy[j] - 4.0 * pa_x[j] * pc_xxyyy[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxxyy[j] * pb_y[j] - 2.0 * pc_xxxyy[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_y[j] * pb_y[j] - pc_xxyyy[j] * pb_xx[j] - 4.0 * pc_xxxyy[j] * pb_xy[j] - pc_xxxxy[j] * pb_yy[j]);

                t_xxy_xxyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyyy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyyy[j] + pc_xxxxyy[j] * pa_y[j] + 2.0 * pc_xxxyyy[j] * pb_x[j] + 2.0 * pc_xxxxyy[j] * pb_y[j]);

                t_xxy_xxyy[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];

                t_xxy_xxyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_xxy[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxyz[j] + pa_xxy[j] * pb_xxyz[j]);

                t_xxy_xxyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.25 * pa_xx[j] * fl2_fx * pc_z[j] - 0.5 * pa_xx[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.0 * pa_x[j] * fl2_fx * pb_xz[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 1.5 * fl2_fx * pa_y[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xx[j] * pc_z[j] - 0.5 * fl2_fx * pb_xxz[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_xxy[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] - pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xyz[j] - 3.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxy[j] * pc_z[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxz[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_xxyz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxyz[j] - pa_xxy[j] * pb_xxy[j] * pc_z[j] - pa_xxy[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_xxy[j] * pb_xyz[j] * pc_x[j] - pa_xx[j] * pc_y[j] * pb_xxyz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xxyz[j]);

                t_xxy_xxyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 0.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.25 * pa_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 2.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + pa_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * pc_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_yz[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.5 * fl2_fx * pb_xx[j] * pc_z[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_xxy[j] * fl1_fx * pc_yz[j] + 0.5 * pa_xxy[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_xxy[j] * fl1_fx * pc_y[j] * pb_z[j] + 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_yz[j] + pa_xx[j] * fl1_fx * pb_x[j] * pc_xz[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_z[j] + pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] + 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_yz[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yz[j] + 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] + 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xyz[j] + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xz[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xx[j] * pc_yz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xxy[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxy[j] * pc_z[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxz[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_xxyz[j] + pa_xxy[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_xxy[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_xxy[j] * pb_xz[j] * pc_xy[j] + pa_xxy[j] * pc_xx[j] * pb_yz[j] + pa_xx[j] * pc_yz[j] * pb_xxy[j] + pa_xx[j] * pc_yy[j] * pb_xxz[j] + 2.0 * pa_xx[j] * pc_xy[j] * pb_xyz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xxy[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_xxz[j] + 4.0 * pa_xy[j] * pc_xx[j] * pb_xyz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xxyz[j] + pc_xx[j] * pa_y[j] * pb_xxyz[j]);

                t_xxy_xxyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.25 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xx[j] * pc_z[j] - 0.5 * pa_xxy[j] * fl1_fx * pc_yz[j] - 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxz[j] - pa_xx[j] * fl1_fx * pb_x[j] * pc_xz[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] - 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - pc_xxx[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxz[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_xz[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_y[j] * pb_xx[j] * pc_yz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xxy[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xxz[j] - 2.0 * pa_xxy[j] * pb_x[j] * pc_xyz[j] - pa_xxy[j] * pc_xxz[j] * pb_y[j] - pa_xxy[j] * pc_xxy[j] * pb_z[j] - pa_xx[j] * pc_yyz[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_xx[j] * pc_xyy[j] * pb_xz[j] - pa_xx[j] * pc_xxy[j] * pb_yz[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xxz[j] * pb_xy[j] - 4.0 * pa_xy[j] * pc_xxy[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xxx[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xxy[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xxz[j] - 4.0 * pa_x[j] * pc_xxy[j] * pb_xyz[j] - pc_xxz[j] * pa_y[j] * pb_xxy[j] - pc_xxy[j] * pa_y[j] * pb_xxz[j] - 2.0 * pc_xxx[j] * pa_y[j] * pb_xyz[j] - pc_xxy[j] * pb_xxyz[j]);

                t_xxy_xxyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xxz[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] + pc_xxxz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + pc_xxx[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] + pa_xxy[j] * pc_xxyz[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_x[j] + pa_xx[j] * pc_xxyz[j] * pb_y[j] + pa_xx[j] * pc_xxyy[j] * pb_z[j] + 4.0 * pa_xy[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxxz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xxxy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxyz[j] * pb_xy[j] + 4.0 * pa_x[j] * pc_xxyy[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxxy[j] * pb_yz[j] + pc_xxyz[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxxz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_xz[j] + pc_xxxx[j] * pa_y[j] * pb_yz[j] + pc_xxyz[j] * pb_xxy[j] + pc_xxyy[j] * pb_xxz[j] + 2.0 * pc_xxxy[j] * pb_xyz[j]);

                t_xxy_xxyz[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - pa_x[j] * pc_xxxz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxxz[j] * fl1_fx - pc_xxxz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxyyz[j] - 2.0 * pa_xy[j] * pc_xxxyz[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxyz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxxyy[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_x[j] - pc_xxxxz[j] * pa_y[j] * pb_y[j] - pc_xxxxy[j] * pa_y[j] * pb_z[j] - pc_xxyyz[j] * pb_xx[j] - 2.0 * pc_xxxyz[j] * pb_xy[j] - 2.0 * pc_xxxyy[j] * pb_xz[j] - pc_xxxxy[j] * pb_yz[j]);

                t_xxy_xxyz[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyyz[j] + pc_xxxxyz[j] * pa_y[j] + 2.0 * pc_xxxyyz[j] * pb_x[j] + pc_xxxxyz[j] * pb_y[j] + pc_xxxxyy[j] * pb_z[j]);

                t_xxy_xxyz[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];

                t_xxy_xxzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.25 * pa_xxy[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 0.25 * fl2_fx * pa_y[j] * pb_xx[j] + 0.5 * pa_xxy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xxy[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xxzz[j] + pa_xxy[j] * pb_xxzz[j]);

                t_xxy_xxzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.5 * pa_xxy[j] * fl2_fx - 0.25 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 2.0 * pa_xy[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * fl2_fx * pa_y[j] * pb_zz[j] - 0.5 * fl2_fx * pa_y[j] * pb_xx[j] - 0.25 * fl2_fx * pc_y[j] * pb_xx[j] - 0.5 * pa_xxy[j] * pb_xx[j] * fl1_fx - pa_xxy[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_zz[j] - 0.5 * pa_xx[j] * pc_y[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] - pa_xy[j] * pc_x[j] * pb_xx[j] * fl1_fx - 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] - 4.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] - 2.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xzz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xzz[j] - 3.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xzz[j] - fl1_fx * pa_y[j] * pb_xxz[j] * pc_z[j] - 0.5 * fl1_fx * pc_y[j] * pb_xxzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xxzz[j] - 2.0 * pa_xxy[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_xxy[j] * pb_xzz[j] * pc_x[j] - pa_xx[j] * pc_y[j] * pb_xxzz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xxzz[j]);

                t_xxy_xxzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pa_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 0.5 * pa_xx[j] * pc_y[j] * fl2_fx + 3.0 * pa_xy[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 2.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] + pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * fl2_fx * pc_y[j] * pb_xx[j] + 0.25 * fl2_fx * pa_y[j] * pb_xx[j] + pa_xxy[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xxy[j] * fl1_fx * pc_zz[j] + pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] + 0.5 * pa_xx[j] * pc_y[j] * pb_xx[j] * fl1_fx + pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx + pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] + pa_xy[j] * pc_x[j] * pb_xx[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_xy[j] * pb_xx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] + 4.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] + 4.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_y[j] * pb_xzz[j] + 0.5 * pc_xx[j] * pa_y[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + 6.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xz[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_x[j] * fl1_fx * pa_y[j] * pb_xzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xx[j] * pc_zz[j] + fl1_fx * pc_yz[j] * pb_xxz[j] + fl1_fx * pa_y[j] * pb_xxz[j] * pc_z[j] + 0.5 * fl1_fx * pc_y[j] * pb_xxzz[j] + pa_xxy[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_xxy[j] * pb_xz[j] * pc_xz[j] + pa_xxy[j] * pc_xx[j] * pb_zz[j] + 2.0 * pa_xx[j] * pc_yz[j] * pb_xxz[j] + 2.0 * pa_xx[j] * pc_xy[j] * pb_xzz[j] + 4.0 * pa_xy[j] * pc_xz[j] * pb_xxz[j] + 4.0 * pa_xy[j] * pc_xx[j] * pb_xzz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xxzz[j] + pc_xx[j] * pa_y[j] * pb_xxzz[j]);

                t_xxy_xxzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.25 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - pa_x[j] * fl2_fx * pc_y[j] * pb_x[j] - 3.0 * pc_xx[j] * pa_y[j] * fl2_fx - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_x[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pa_y[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 0.25 * fl2_fx * pc_y[j] * pb_xx[j] - 0.5 * pa_xxy[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xxy[j] * fl1_fx * pc_zz[j] - pa_xx[j] * pc_xy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xxy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_xx[j] * pb_x[j] * fl1_fx - pa_xy[j] * pc_xxx[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xy[j] * pb_xx[j] * fl1_fx - 2.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] - 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] - 4.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] - 0.5 * pc_xx[j] * pa_y[j] * pb_xx[j] * fl1_fx - pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxy[j] * pb_xx[j] * fl1_fx - 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_x[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_xz[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_y[j] * pb_xx[j] * pc_zz[j] - fl1_fx * pc_yz[j] * pb_xxz[j] - 2.0 * pa_xxy[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_xxy[j] * pc_xxz[j] * pb_z[j] - pa_xx[j] * pc_yzz[j] * pb_xx[j] - 4.0 * pa_xx[j] * pc_xyz[j] * pb_xz[j] - pa_xx[j] * pc_xxy[j] * pb_zz[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_xx[j] - 8.0 * pa_xy[j] * pc_xxz[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xxx[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xyz[j] * pb_xxz[j] - 4.0 * pa_x[j] * pc_xxy[j] * pb_xzz[j] - 2.0 * pc_xxz[j] * pa_y[j] * pb_xxz[j] - 2.0 * pc_xxx[j] * pa_y[j] * pb_xzz[j] - pc_xxy[j] * pb_xxzz[j]);

                t_xxy_xxzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * pa_xx[j] * pc_xxy[j] * fl1_fx + 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + pa_xy[j] * pc_xxx[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxy[j] * pb_x[j] * fl1_fx + pa_x[j] * pc_xxxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] + pc_xxx[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pb_xx[j] * fl1_fx + pc_xxxy[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_x[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] + pa_xxy[j] * pc_xxzz[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xxyz[j] * pb_z[j] + 4.0 * pa_xy[j] * pc_xxzz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxxz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xx[j] + 8.0 * pa_x[j] * pc_xxyz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxxy[j] * pb_zz[j] + pc_xxzz[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxxz[j] * pa_y[j] * pb_xz[j] + pc_xxxx[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xxyz[j] * pb_xxz[j] + 2.0 * pc_xxxy[j] * pb_xzz[j]);

                t_xxy_xxzz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - pa_x[j] * pc_xxxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - pc_xxxy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxy[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 6.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxyzz[j] - 2.0 * pa_xy[j] * pc_xxxzz[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxxyz[j] * pb_z[j] - 2.0 * pc_xxxzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_y[j] * pb_z[j] - pc_xxyzz[j] * pb_xx[j] - 4.0 * pc_xxxyz[j] * pb_xz[j] - pc_xxxxy[j] * pb_zz[j]);

                t_xxy_xxzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyzz[j] + pc_xxxxzz[j] * pa_y[j] + 2.0 * pc_xxxyzz[j] * pb_x[j] + 2.0 * pc_xxxxyz[j] * pb_z[j]);

                t_xxy_xxzz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_21_24(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (21,24)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xy = paDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxy_xyyy = primBuffer.data(150 * idx + 21);

            auto t_xxy_xyyz = primBuffer.data(150 * idx + 22);

            auto t_xxy_xyzz = primBuffer.data(150 * idx + 23);

            // Batch of Integrals (21,24)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xy, pa_y, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, \
                                     pb_xyz, pb_xyzz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, pc_xxxyyyz, \
                                     pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, \
                                     pc_xxyyy, pc_xxyyyy, pc_xxyyyz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, \
                                     pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyz, pc_xyyz, pc_xyyzz, pc_xyz, \
                                     pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyz, pc_yyz, pc_yyzz, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xxy_xyyy, t_xxy_xyyz, t_xxy_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxy_xyyy[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 0.375 * fl3_fx * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_yy[j] + 0.75 * fl2_fx * pa_y[j] * pb_xy[j] + 0.75 * fl2_fx * pb_xyy[j] + 1.5 * pa_xxy[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_xyy[j] + pa_xy[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_y[j] * pb_xyyy[j] + pa_xxy[j] * pb_xyyy[j]);

                t_xxy_xyyy[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 3.0 * pa_xy[j] * fl2_fx * pb_y[j] - 1.5 * pa_xy[j] * fl2_fx * pc_y[j] - 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pb_yy[j] - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * fl2_fx * pa_y[j] * pb_xy[j] - 0.75 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 2.25 * fl2_fx * pc_y[j] * pb_xy[j] - 1.5 * fl2_fx * pb_xyy[j] - 1.5 * pa_xxy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xxy[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_y[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_xx[j] * fl1_fx * pb_xyy[j] - 3.0 * pa_xy[j] * pc_x[j] * pb_xy[j] * fl1_fx - 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] - 3.0 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] - pa_x[j] * fl1_fx * pc_y[j] * pb_yyy[j] - pa_xy[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyy[j] - 1.5 * fl1_fx * pa_y[j] * pb_xyy[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_xyyy[j] - 0.5 * fl1_fx * pa_y[j] * pb_xyyy[j] - 3.0 * pa_xxy[j] * pb_xyy[j] * pc_y[j] - pa_xxy[j] * pc_x[j] * pb_yyy[j] - pa_xx[j] * pc_y[j] * pb_xyyy[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xyyy[j]);

                t_xxy_xyyy[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_xy[j] * fl2_fx * pc_y[j] + 9.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 3.0 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_yy[j] + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pa_y[j] + 6.75 * pc_xy[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] + 4.5 * fl2_fx * pc_y[j] * pb_xy[j] + 1.5 * fl2_fx * pc_yy[j] * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pb_xy[j] + 0.75 * fl2_fx * pb_xyy[j] + 1.5 * pa_xxy[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_xy[j] * fl1_fx + 4.5 * pa_xx[j] * pc_y[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] + 3.0 * pa_xy[j] * pc_x[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx + 9.0 * pa_x[j] * pc_xy[j] * pb_xy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] + 3.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yy[j] + 3.0 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] + pa_x[j] * fl1_fx * pc_y[j] * pb_yyy[j] + 1.5 * pc_xx[j] * pa_y[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xx[j] * fl1_fx * pb_xyy[j] + 4.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_y[j] * pb_xy[j] * pc_yy[j] + 1.5 * fl1_fx * pc_yy[j] * pb_xyy[j] + 1.5 * fl1_fx * pa_y[j] * pb_xyy[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_xyyy[j] + 3.0 * pa_xxy[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_xxy[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_xx[j] * pc_yy[j] * pb_xyy[j] + pa_xx[j] * pc_xy[j] * pb_yyy[j] + 6.0 * pa_xy[j] * pc_xy[j] * pb_xyy[j] + 2.0 * pa_xy[j] * pc_xx[j] * pb_yyy[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xyyy[j] + pc_xx[j] * pa_y[j] * pb_xyyy[j]);

                t_xxy_xyyy[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_yy[j] - 1.5 * pa_xy[j] * fl2_fx * pc_y[j] - 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - 1.5 * pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pa_y[j] - 13.5 * pc_xy[j] * fl2_fx * pb_y[j] - 4.5 * pc_xyy[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pc_yy[j] * pb_x[j] - 0.75 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 2.25 * fl2_fx * pc_y[j] * pb_xy[j] - 1.5 * pa_xxy[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_x[j] * pc_xy[j] * pb_xy[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - pa_xy[j] * fl1_fx * pc_yyy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_y[j] - 3.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yy[j] - 1.5 * pc_xx[j] * pa_y[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx - 4.5 * pc_xxy[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xx[j] * fl1_fx * pb_xyy[j] - 4.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_y[j] - 4.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] - 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_yyy[j] - 1.5 * fl1_fx * pc_yyy[j] * pb_xy[j] - 1.5 * fl1_fx * pa_y[j] * pb_xy[j] * pc_yy[j] - 1.5 * fl1_fx * pc_yy[j] * pb_xyy[j] - pa_xxy[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_xxy[j] * pc_xyy[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_yyy[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xyy[j] * pb_yy[j] - 6.0 * pa_xy[j] * pc_xyy[j] * pb_xy[j] - 6.0 * pa_xy[j] * pc_xxy[j] * pb_yy[j] - 6.0 * pa_x[j] * pc_xyy[j] * pb_xyy[j] - 2.0 * pa_x[j] * pc_xxy[j] * pb_yyy[j] - 3.0 * pc_xxy[j] * pa_y[j] * pb_xyy[j] - pc_xxx[j] * pa_y[j] * pb_yyy[j] - pc_xxy[j] * pb_xyyy[j]);

                t_xxy_xyyy[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xxx[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 9.0 * pc_xyy[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_y[j] + 6.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * fl1_fx * pc_yyyy[j] + pa_xy[j] * fl1_fx * pc_yyy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_y[j] + 1.5 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + 4.5 * pc_xxy[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xxyy[j] * pb_x[j] * fl1_fx + 4.5 * pc_xxxy[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xyyy[j] * fl1_fx * pa_y[j] + 4.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_y[j] + 4.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pc_yyyy[j] * pb_x[j] + 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_yyy[j] + 1.5 * fl1_fx * pc_yyy[j] * pb_xy[j] + pa_xxy[j] * pc_xyyy[j] + pa_xx[j] * pc_yyyy[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xyyy[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xyyy[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xxyy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xyyy[j] * pb_xy[j] + 6.0 * pa_x[j] * pc_xxyy[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_y[j] * pb_xy[j] + 3.0 * pc_xxxy[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pb_xyy[j] + pc_xxxy[j] * pb_yyy[j]);

                t_xxy_xyyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xyy[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyyy[j] - 1.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxxy[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxxyy[j] * fl1_fx - 1.5 * pc_xyyyy[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pa_y[j] - 4.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyy[j] * pb_x[j] - pa_xx[j] * pc_xyyyy[j] - 2.0 * pa_xy[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyy[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxyyy[j] * pb_y[j] - pc_xxyyy[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxyy[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxyyy[j] * pb_xy[j] - 3.0 * pc_xxxyy[j] * pb_yy[j]);

                t_xxy_xyyy[j] += fl_s_0_0_6 * (3.0 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyyy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyyy[j] + pc_xxxyyy[j] * pa_y[j] + pc_xxyyyy[j] * pb_x[j] + 3.0 * pc_xxxyyy[j] * pb_y[j]);

                t_xxy_xyyy[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];

                t_xxy_xyyz[j] = fl_s_0_0_0 * (0.5 * pa_xy[j] * fl2_fx * pb_z[j] + pa_x[j] * fl2_fx * pb_yz[j] + 0.25 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xxy[j] * pb_xz[j] * fl1_fx + pa_xx[j] * fl1_fx * pb_xyz[j] + pa_xy[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xyyz[j] + pa_xxy[j] * pb_xyyz[j]);

                t_xxy_xyyz[j] += fl_s_0_0_1 * (-0.5 * pa_xy[j] * fl2_fx * pc_z[j] - pa_xy[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 2.0 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_xz[j] - 0.75 * fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_z[j] - fl2_fx * pb_xyz[j] - 0.5 * pa_xxy[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxy[j] * pb_xz[j] * fl1_fx - 0.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_y[j] * pb_xz[j] * fl1_fx - pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] - pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] - pa_xx[j] * fl1_fx * pb_xyz[j] - pa_xy[j] * pc_x[j] * pb_xz[j] * fl1_fx - 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] - pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] - pa_x[j] * fl1_fx * pc_y[j] * pb_yyz[j] - pa_xy[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xyy[j] * pc_z[j] - fl1_fx * pa_y[j] * pb_xyz[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_xyyz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xyyz[j] - pa_xxy[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_xxy[j] * pb_xyz[j] * pc_y[j] - pa_xxy[j] * pc_x[j] * pb_yyz[j] - pa_xx[j] * pc_y[j] * pb_xyyz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xyyz[j]);

                t_xxy_xyyz[j] += fl_s_0_0_2 * (pa_xy[j] * fl2_fx * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 0.5 * pa_xy[j] * fl2_fx * pb_z[j] + pa_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xz[j] * fl2_fx * pa_y[j] + 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * fl2_fx * pc_y[j] * pb_xz[j] + fl2_fx * pb_xy[j] * pc_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xxy[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_y[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] + pa_xx[j] * fl1_fx * pc_xz[j] * pb_y[j] + pa_xx[j] * fl1_fx * pb_xy[j] * pc_z[j] + pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] + pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_xy[j] * pc_x[j] * pb_xz[j] * fl1_fx + pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xy[j] * pb_xz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yz[j] + pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] + 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yz[j] + pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] + 2.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] + pa_x[j] * fl1_fx * pc_y[j] * pb_yyz[j] + 0.5 * pc_xx[j] * pa_y[j] * pb_xz[j] * fl1_fx + pc_xx[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yyz[j] + fl1_fx * pa_y[j] * pb_xy[j] * pc_yz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xz[j] * pc_yy[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xyy[j] + fl1_fx * pc_yy[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xyy[j] * pc_z[j] + fl1_fx * pa_y[j] * pb_xyz[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_xyyz[j] + 2.0 * pa_xxy[j] * pb_xy[j] * pc_yz[j] + pa_xxy[j] * pb_xz[j] * pc_yy[j] + pa_xxy[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_xxy[j] * pc_xy[j] * pb_yz[j] + pa_xx[j] * pc_yz[j] * pb_xyy[j] + 2.0 * pa_xx[j] * pc_yy[j] * pb_xyz[j] + pa_xx[j] * pc_xy[j] * pb_yyz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xyy[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xyz[j] + 2.0 * pa_xy[j] * pc_xx[j] * pb_yyz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xyyz[j] + pc_xx[j] * pa_y[j] * pb_xyyz[j]);

                t_xxy_xyyz[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 0.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 1.5 * pc_xz[j] * fl2_fx * pa_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_z[j] - 0.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * fl1_fx * pb_z[j] - pa_xx[j] * fl1_fx * pc_xz[j] * pb_y[j] - pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - pa_xy[j] * pc_xxz[j] * fl1_fx - pa_xy[j] * pc_xx[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xy[j] * pb_xz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - pa_xy[j] * fl1_fx * pc_yyz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] - 2.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yz[j] - pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yy[j] * pb_yz[j] - 0.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 0.5 * pc_xx[j] * pa_y[j] * pb_xz[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxy[j] * pb_xz[j] * fl1_fx - pc_xxz[j] * fl1_fx * pb_xy[j] - pc_xxx[j] * fl1_fx * pb_yz[j] - pc_xx[j] * fl1_fx * pb_xyz[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_z[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_y[j] * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_yyz[j] - fl1_fx * pc_yyz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_xz[j] - fl1_fx * pa_y[j] * pb_xy[j] * pc_yz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xz[j] * pc_yy[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xyy[j] - fl1_fx * pc_yy[j] * pb_xyz[j] - pa_xxy[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_xxy[j] * pc_xyz[j] * pb_y[j] - pa_xxy[j] * pc_xyy[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_yyz[j] * pb_xy[j] - pa_xx[j] * pc_yyy[j] * pb_xz[j] - pa_xx[j] * pc_xyz[j] * pb_yy[j] - 2.0 * pa_xx[j] * pc_xyy[j] * pb_yz[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_xyy[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xxz[j] * pb_yy[j] - 4.0 * pa_xy[j] * pc_xxy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xyy[j] - 4.0 * pa_x[j] * pc_xyy[j] * pb_xyz[j] - 2.0 * pa_x[j] * pc_xxy[j] * pb_yyz[j] - pc_xxz[j] * pa_y[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_xyz[j] - pc_xxx[j] * pa_y[j] * pb_yyz[j] - pc_xxy[j] * pb_xyyz[j]);

                t_xxy_xyyz[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + pa_xy[j] * pc_xxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_yyyz[j] + pa_xy[j] * fl1_fx * pc_yyz[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] + 0.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxy[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + pc_xxxz[j] * fl1_fx * pb_y[j] + pc_xxz[j] * fl1_fx * pb_xy[j] + pc_xxx[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyyz[j] * fl1_fx * pa_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_y[j] * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] + 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_yyz[j] + fl1_fx * pc_yyz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_xz[j] + pa_xxy[j] * pc_xyyz[j] + pa_xx[j] * pc_yyyz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_y[j] + pa_xx[j] * pc_xyyy[j] * pb_z[j] + 2.0 * pa_xy[j] * pc_xyyz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xxyy[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxyz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_xxyy[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_xy[j] + pc_xxyy[j] * pa_y[j] * pb_xz[j] + pc_xxxz[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_yz[j] + pc_xxyz[j] * pb_xyy[j] + 2.0 * pc_xxyy[j] * pb_xyz[j] + pc_xxxy[j] * pb_yyz[j]);

                t_xxy_xyyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyyz[j] - 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - pc_xxxz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pa_y[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] - pa_xx[j] * pc_xyyyz[j] - 2.0 * pa_xy[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxyyy[j] * pb_z[j] - pc_xxyyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_y[j] - pc_xxxyy[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxyyz[j] * pb_xy[j] - pc_xxyyy[j] * pb_xz[j] - pc_xxxyz[j] * pb_yy[j] - 2.0 * pc_xxxyy[j] * pb_yz[j]);

                t_xxy_xyyz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyyz[j] + pc_xxxyyz[j] * pa_y[j] + pc_xxyyyz[j] * pb_x[j] + 2.0 * pc_xxxyyz[j] * pb_y[j] + pc_xxxyyy[j] * pb_z[j]);

                t_xxy_xyyz[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];

                t_xxy_xyzz[j] = fl_s_0_0_0 * (0.25 * pa_x[j] * fl3_fx + 0.125 * fl3_fx * pb_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_xy[j] * fl2_fx * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_zz[j] + 0.25 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_xxy[j] * pb_xy[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pb_xzz[j] + pa_xy[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xyzz[j] + pa_xxy[j] * pb_xyzz[j]);

                t_xxy_xyzz[j] += fl_s_0_0_1 * (-0.75 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.375 * fl3_fx * pb_x[j] - 0.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_xy[j] * fl2_fx * pb_y[j] - 0.5 * pa_xy[j] * fl2_fx * pc_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * fl2_fx * pa_y[j] * pb_xy[j] - 0.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 0.25 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.5 * fl2_fx * pb_xzz[j] - 0.5 * pa_xxy[j] * pb_xy[j] * fl1_fx - 0.5 * pa_xxy[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx - 0.5 * pa_xx[j] * pc_y[j] * pb_xy[j] * fl1_fx - pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xzz[j] - pa_xy[j] * pc_x[j] * pb_xy[j] * fl1_fx - pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] - pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] - pa_x[j] * fl1_fx * pc_y[j] * pb_yzz[j] - pa_xy[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yzz[j] - fl1_fx * pa_y[j] * pb_xyz[j] * pc_z[j] - 0.5 * fl1_fx * pa_y[j] * pb_xzz[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_xyzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xyzz[j] - 2.0 * pa_xxy[j] * pb_xyz[j] * pc_z[j] - pa_xxy[j] * pb_xzz[j] * pc_y[j] - pa_xxy[j] * pc_x[j] * pb_yzz[j] - pa_xx[j] * pc_y[j] * pb_xyzz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xyzz[j]);

                t_xxy_xyzz[j] += fl_s_0_0_2 * (0.75 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.375 * fl3_fx * pb_x[j] + 0.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + pa_xy[j] * fl2_fx * pc_y[j] + pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 2.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.5 * pa_xy[j] * fl2_fx * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_zz[j] + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pa_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] + 0.5 * fl2_fx * pc_y[j] * pb_xy[j] + 0.25 * fl2_fx * pc_yy[j] * pb_x[j] + 0.25 * fl2_fx * pb_x[j] * pc_zz[j] + fl2_fx * pb_xz[j] * pc_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_xxy[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_xy[j] * fl1_fx + 0.5 * pa_xx[j] * pc_y[j] * pb_xy[j] * fl1_fx + 0.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx + 0.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] + pa_xx[j] * fl1_fx * pc_xz[j] * pb_z[j] + pa_xx[j] * fl1_fx * pb_xz[j] * pc_z[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] + pa_xy[j] * pc_x[j] * pb_xy[j] * fl1_fx + pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx + pa_x[j] * pc_xy[j] * pb_xy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] + pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] + pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] + pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] + pa_x[j] * fl1_fx * pc_y[j] * pb_yzz[j] + 0.5 * pc_xx[j] * pa_y[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xx[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_zz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_yzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xy[j] * pc_zz[j] + fl1_fx * pa_y[j] * pb_xz[j] * pc_yz[j] + fl1_fx * pc_yz[j] * pb_xyz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_xzz[j] + fl1_fx * pa_y[j] * pb_xyz[j] * pc_z[j] + 0.5 * fl1_fx * pa_y[j] * pb_xzz[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_xyzz[j] + pa_xxy[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_xxy[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_xxy[j] * pc_xz[j] * pb_yz[j] + pa_xxy[j] * pc_xy[j] * pb_zz[j] + 2.0 * pa_xx[j] * pc_yz[j] * pb_xyz[j] + pa_xx[j] * pc_yy[j] * pb_xzz[j] + pa_xx[j] * pc_xy[j] * pb_yzz[j] + 4.0 * pa_xy[j] * pc_xz[j] * pb_xyz[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_xzz[j] + 2.0 * pa_xy[j] * pc_xx[j] * pb_yzz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xyzz[j] + pc_xx[j] * pa_y[j] * pb_xyzz[j]);

                t_xxy_xyzz[j] += fl_s_0_0_3 * (-0.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.125 * fl3_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - pa_x[j] * pc_xx[j] * fl2_fx - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_yy[j] - pa_x[j] * fl2_fx * pc_zz[j] - 0.5 * pa_xy[j] * fl2_fx * pc_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_y[j] - pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 0.5 * pc_xx[j] * fl2_fx * pb_x[j] - 0.25 * pc_xxx[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pa_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_y[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * fl2_fx * pc_yy[j] * pb_x[j] - 0.5 * fl2_fx * pb_x[j] * pc_zz[j] - 0.25 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 0.25 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xxy[j] * pc_xy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xyy[j] * fl1_fx - 0.5 * pa_xx[j] * fl1_fx * pc_xzz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_zz[j] - pa_xx[j] * fl1_fx * pc_xz[j] * pb_z[j] - pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - pa_xy[j] * pc_xx[j] * pb_y[j] * fl1_fx - pa_xy[j] * pc_xxy[j] * fl1_fx - pa_x[j] * pc_xy[j] * pb_xy[j] * fl1_fx - pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx - pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] - 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - pa_xy[j] * fl1_fx * pc_yzz[j] - pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] - pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] - 2.0 * pa_xy[j] * fl1_fx * pc_yz[j] * pb_z[j] - 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] - pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] - 0.5 * pc_xx[j] * pa_y[j] * pb_xy[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxy[j] * pb_xy[j] * fl1_fx - pc_xxz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_y[j] * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_y[j] * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_yzz[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_xy[j] - fl1_fx * pc_yyz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xy[j] * pc_zz[j] - fl1_fx * pa_y[j] * pb_xz[j] * pc_yz[j] - fl1_fx * pc_yz[j] * pb_xyz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_xzz[j] - pa_xxy[j] * pb_x[j] * pc_yzz[j] - pa_xxy[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xxy[j] * pc_xyz[j] * pb_z[j] - pa_xx[j] * pc_yzz[j] * pb_xy[j] - 2.0 * pa_xx[j] * pc_yyz[j] * pb_xz[j] - 2.0 * pa_xx[j] * pc_xyz[j] * pb_yz[j] - pa_xx[j] * pc_xyy[j] * pb_zz[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xz[j] - 4.0 * pa_xy[j] * pc_xxz[j] * pb_yz[j] - 2.0 * pa_xy[j] * pc_xxy[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xyz[j] * pb_xyz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xzz[j] - 2.0 * pa_x[j] * pc_xxy[j] * pb_yzz[j] - 2.0 * pc_xxz[j] * pa_y[j] * pb_xyz[j] - pc_xxy[j] * pa_y[j] * pb_xzz[j] - pc_xxx[j] * pa_y[j] * pb_yzz[j] - pc_xxy[j] * pb_xyzz[j]);

                t_xxy_xyzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pc_xxx[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xzz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_x[j] + 0.25 * fl2_fx * pb_x[j] * pc_zz[j] + 0.5 * pa_xx[j] * pc_xyy[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xzz[j] + pa_xy[j] * pc_xxy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + pa_x[j] * pc_xxy[j] * pb_y[j] * fl1_fx + pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * pc_xxzz[j] * fl1_fx + pa_x[j] * pc_xzz[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + pa_x[j] * fl1_fx * pc_yyzz[j] + pa_xy[j] * fl1_fx * pc_yzz[j] + pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] + 0.5 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxx[j] * pa_y[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxy[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xxyy[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxy[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxzz[j] * fl1_fx * pb_x[j] + pc_xxxz[j] * fl1_fx * pb_z[j] + pc_xxz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_y[j] * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_yzz[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_xy[j] + fl1_fx * pc_yyz[j] * pb_xz[j] + pa_xxy[j] * pc_xyzz[j] + pa_xx[j] * pc_yyzz[j] * pb_x[j] + pa_xx[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxzz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xy[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_xz[j] + 4.0 * pa_x[j] * pc_xxyz[j] * pb_yz[j] + 2.0 * pa_x[j] * pc_xxyy[j] * pb_zz[j] + pc_xxzz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_y[j] * pb_yz[j] + pc_xxxy[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xxyz[j] * pb_xyz[j] + pc_xxyy[j] * pb_xzz[j] + pc_xxxy[j] * pb_yzz[j]);

                t_xxy_xyzz[j] += fl_s_0_0_5 * (-0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - pa_x[j] * pc_xxyy[j] * fl1_fx - pa_x[j] * pc_xxzz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyzz[j] - 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * fl1_fx * pb_x[j] - pc_xxxz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_y[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] - pa_xx[j] * pc_xyyzz[j] - 2.0 * pa_xy[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxyzz[j] * pa_y[j] * pb_x[j] - pc_xxxzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_z[j] - pc_xxyzz[j] * pb_xy[j] - 2.0 * pc_xxyyz[j] * pb_xz[j] - 2.0 * pc_xxxyz[j] * pb_yz[j] - pc_xxxyy[j] * pb_zz[j]);

                t_xxy_xyzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyzz[j] + pc_xxxyzz[j] * pa_y[j] + pc_xxyyzz[j] * pb_x[j] + pc_xxxyzz[j] * pb_y[j] + 2.0 * pc_xxxyyz[j] * pb_z[j]);

                t_xxy_xyzz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_24_27(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (24,27)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xy = paDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            auto pc_xxyyyyy = pcDistances.data(119 * idx + 98);

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxy_xzzz = primBuffer.data(150 * idx + 24);

            auto t_xxy_yyyy = primBuffer.data(150 * idx + 25);

            auto t_xxy_yyyz = primBuffer.data(150 * idx + 26);

            // Batch of Integrals (24,27)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xy, pa_y, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, \
                                     pb_yyy, pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xx, pc_xxx, \
                                     pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyy, pc_xxyyyyz, pc_xxyyyz, pc_xxyyz, \
                                     pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyy, \
                                     pc_xyyyy, pc_xyyyyy, pc_xyyyyz, pc_xyyyz, pc_xyyz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, \
                                     pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyz, pc_yyyz, pc_yyz, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxy_xzzz, t_xxy_yyyy, t_xxy_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxy_xzzz[j] = fl_s_0_0_0 * (1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_xz[j] + 1.5 * pa_xxy[j] * pb_xz[j] * fl1_fx + pa_xy[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_xzzz[j] + pa_xxy[j] * pb_xzzz[j]);

                t_xxy_xzzz[j] += fl_s_0_0_1 * (-3.0 * pa_xy[j] * fl2_fx * pb_z[j] - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_xz[j] - 0.75 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_xz[j] - 1.5 * pa_xxy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xxy[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_x[j] * pb_z[j] * fl1_fx - 1.5 * pa_xx[j] * pc_y[j] * pb_xz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_x[j] * pb_xz[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] - pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] - pa_xy[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_zzz[j] - 1.5 * fl1_fx * pa_y[j] * pb_xzz[j] * pc_z[j] - 0.5 * fl1_fx * pc_y[j] * pb_xzzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_xzzz[j] - 3.0 * pa_xxy[j] * pb_xzz[j] * pc_z[j] - pa_xxy[j] * pc_x[j] * pb_zzz[j] - pa_xx[j] * pc_y[j] * pb_xzzz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_xzzz[j]);

                t_xxy_xzzz[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + 3.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_xz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 0.75 * fl2_fx * pa_y[j] * pb_xz[j] + 1.5 * pa_xxy[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_y[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xy[j] * pb_z[j] * fl1_fx + 3.0 * pa_xy[j] * pc_x[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xx[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] + 3.0 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] + pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] + 1.5 * pc_xx[j] * pa_y[j] * pb_xz[j] * fl1_fx + 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_zz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_y[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_y[j] * pb_xz[j] * pc_zz[j] + 1.5 * fl1_fx * pc_yz[j] * pb_xzz[j] + 1.5 * fl1_fx * pa_y[j] * pb_xzz[j] * pc_z[j] + 0.5 * fl1_fx * pc_y[j] * pb_xzzz[j] + 3.0 * pa_xxy[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_xxy[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_yz[j] * pb_xzz[j] + pa_xx[j] * pc_xy[j] * pb_zzz[j] + 6.0 * pa_xy[j] * pc_xz[j] * pb_xzz[j] + 2.0 * pa_xy[j] * pc_xx[j] * pb_zzz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_xzzz[j] + pc_xx[j] * pa_y[j] * pb_xzzz[j]);

                t_xxy_xzzz[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pa_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_y[j] * pb_z[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.75 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_xz[j] - 1.5 * pa_xxy[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xx[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xy[j] * pb_xz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxy[j] * pb_z[j] * fl1_fx - pa_xy[j] * fl1_fx * pc_zzz[j] - 3.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] - 3.0 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] - 1.5 * pc_xx[j] * pa_y[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxx[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxy[j] * pb_xz[j] * fl1_fx - 4.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_z[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xz[j] * fl1_fx * pa_y[j] * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_zzz[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_xz[j] - 1.5 * fl1_fx * pa_y[j] * pb_xz[j] * pc_zz[j] - 1.5 * fl1_fx * pc_yz[j] * pb_xzz[j] - pa_xxy[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_xxy[j] * pc_xzz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_yzz[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_zz[j] - 6.0 * pa_xy[j] * pc_xzz[j] * pb_xz[j] - 6.0 * pa_xy[j] * pc_xxz[j] * pb_zz[j] - 6.0 * pa_x[j] * pc_xyz[j] * pb_xzz[j] - 2.0 * pa_x[j] * pc_xxy[j] * pb_zzz[j] - 3.0 * pc_xxz[j] * pa_y[j] * pb_xzz[j] - pc_xxx[j] * pa_y[j] * pb_zzz[j] - pc_xxy[j] * pb_xzzz[j]);

                t_xxy_xzzz[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pa_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxy[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + pa_x[j] * fl1_fx * pc_yzzz[j] + pa_xy[j] * fl1_fx * pc_zzz[j] + 3.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] + 1.5 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_y[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxy[j] * pb_z[j] * fl1_fx + 1.5 * pc_xzzz[j] * fl1_fx * pa_y[j] + 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xzz[j] * fl1_fx * pa_y[j] * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_y[j] * pb_x[j] * pc_zzz[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_xz[j] + pa_xxy[j] * pc_xzzz[j] + pa_xx[j] * pc_yzzz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_xy[j] * pc_xzzz[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xxzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xyzz[j] * pb_xz[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pa_y[j] * pb_xz[j] + 3.0 * pc_xxxz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xxyz[j] * pb_xzz[j] + pc_xxxy[j] * pb_zzz[j]);

                t_xxy_xzzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yzzz[j] - 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pa_y[j] - 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] - pa_xx[j] * pc_xyzzz[j] - 2.0 * pa_xy[j] * pc_xxzzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - pc_xxzzz[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxxzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pb_xz[j] - 3.0 * pc_xxxyz[j] * pb_zz[j]);

                t_xxy_xzzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyzzz[j] + pc_xxxzzz[j] * pa_y[j] + pc_xxyzzz[j] * pb_x[j] + 3.0 * pc_xxxyzz[j] * pb_z[j]);

                t_xxy_xzzz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];

                t_xxy_yyyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 1.5 * fl3_fx * pb_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 3.0 * pa_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_yy[j] + fl2_fx * pb_yyy[j] + 3.0 * pa_xxy[j] * pb_yy[j] * fl1_fx + 2.0 * pa_xx[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_y[j] * pb_yyyy[j] + pa_xxy[j] * pb_yyyy[j]);

                t_xxy_yyyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 1.875 * fl3_fx * pc_y[j] - 4.5 * fl3_fx * pb_y[j] - 1.5 * pa_xxy[j] * fl2_fx - 3.75 * pa_xx[j] * pc_y[j] * fl2_fx - 6.0 * pa_xx[j] * fl2_fx * pb_y[j] - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 3.0 * fl2_fx * pa_y[j] * pb_yy[j] - 3.0 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 4.5 * fl2_fx * pc_y[j] * pb_yy[j] - 2.0 * fl2_fx * pb_yyy[j] - 3.0 * pa_xxy[j] * pb_yy[j] * fl1_fx - 6.0 * pa_xxy[j] * pb_y[j] * pc_y[j] * fl1_fx - 9.0 * pa_xx[j] * pc_y[j] * pb_yy[j] * fl1_fx - 2.0 * pa_xx[j] * fl1_fx * pb_yyy[j] - 6.0 * pa_xy[j] * pc_x[j] * pb_yy[j] * fl1_fx - 4.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] - 2.0 * fl1_fx * pa_y[j] * pb_yyy[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_yyyy[j] - 0.5 * fl1_fx * pa_y[j] * pb_yyyy[j] - 4.0 * pa_xxy[j] * pb_yyy[j] * pc_y[j] - pa_xx[j] * pc_y[j] * pb_yyyy[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_yyyy[j]);

                t_xxy_yyyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 5.625 * fl3_fx * pc_y[j] + 4.5 * fl3_fx * pb_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 7.5 * pa_xx[j] * pc_y[j] * fl2_fx + 3.0 * pa_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_x[j] * fl2_fx + 7.5 * pa_x[j] * pc_xy[j] * fl2_fx + 12.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_y[j] + 6.0 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_yy[j] + 9.0 * fl2_fx * pc_y[j] * pb_yy[j] + 6.0 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_yy[j] + fl2_fx * pb_yyy[j] + 6.0 * pa_xxy[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_yy[j] * fl1_fx + 9.0 * pa_xx[j] * pc_y[j] * pb_yy[j] * fl1_fx + 12.0 * pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx + 6.0 * pa_xy[j] * pc_x[j] * pb_yy[j] * fl1_fx + 12.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx + 18.0 * pa_x[j] * pc_xy[j] * pb_yy[j] * fl1_fx + 4.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] + 3.0 * pc_xx[j] * pa_y[j] * pb_yy[j] * fl1_fx + 2.0 * pc_xx[j] * fl1_fx * pb_yyy[j] + 3.0 * fl1_fx * pa_y[j] * pb_yy[j] * pc_yy[j] + 2.0 * fl1_fx * pc_yy[j] * pb_yyy[j] + 2.0 * fl1_fx * pa_y[j] * pb_yyy[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_yyyy[j] + 6.0 * pa_xxy[j] * pb_yy[j] * pc_yy[j] + 4.0 * pa_xx[j] * pc_yy[j] * pb_yyy[j] + 8.0 * pa_xy[j] * pc_xy[j] * pb_yyy[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_yyyy[j] + pc_xx[j] * pa_y[j] * pb_yyyy[j]);

                t_xxy_yyyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 1.5 * fl3_fx * pb_y[j] - 3.75 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 15.0 * pa_x[j] * pc_xy[j] * fl2_fx - 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pc_xx[j] * pa_y[j] * fl2_fx - 3.75 * pc_xxy[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_y[j] - 3.0 * fl2_fx * pa_y[j] * pc_yy[j] - 12.0 * fl2_fx * pc_yy[j] * pb_y[j] - 2.5 * fl2_fx * pc_yyy[j] - 3.0 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 4.5 * fl2_fx * pc_y[j] * pb_yy[j] - 3.0 * pa_xxy[j] * pc_yy[j] * fl1_fx - 12.0 * pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx - 5.0 * pa_xx[j] * pc_yyy[j] * fl1_fx - 12.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 18.0 * pa_x[j] * pc_xy[j] * pb_yy[j] * fl1_fx - 24.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 3.0 * pc_xx[j] * pa_y[j] * pb_yy[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx - 9.0 * pc_xxy[j] * pb_yy[j] * fl1_fx - 2.0 * pc_xx[j] * fl1_fx * pb_yyy[j] - 2.0 * fl1_fx * pa_y[j] * pb_y[j] * pc_yyy[j] - 3.0 * fl1_fx * pc_yyy[j] * pb_yy[j] - 3.0 * fl1_fx * pa_y[j] * pb_yy[j] * pc_yy[j] - 2.0 * fl1_fx * pc_yy[j] * pb_yyy[j] - 4.0 * pa_xxy[j] * pb_y[j] * pc_yyy[j] - 6.0 * pa_xx[j] * pc_yyy[j] * pb_yy[j] - 12.0 * pa_xy[j] * pc_xyy[j] * pb_yy[j] - 8.0 * pa_x[j] * pc_xyy[j] * pb_yyy[j] - 4.0 * pc_xxy[j] * pa_y[j] * pb_yyy[j] - pc_xxy[j] * pb_yyyy[j]);

                t_xxy_yyyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 7.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 7.5 * pc_xxy[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_y[j] + 5.0 * fl2_fx * pc_yyy[j] + 1.5 * fl2_fx * pa_y[j] * pc_yy[j] + 6.0 * fl2_fx * pc_yy[j] * pb_y[j] + 5.0 * pa_xx[j] * pc_yyy[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + 24.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx + 10.0 * pa_x[j] * pc_xyyy[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 9.0 * pc_xxy[j] * pb_yy[j] * fl1_fx + 12.0 * pc_xxyy[j] * pb_y[j] * fl1_fx + 0.5 * fl1_fx * pa_y[j] * pc_yyyy[j] + 2.0 * fl1_fx * pc_yyyy[j] * pb_y[j] + 2.0 * fl1_fx * pa_y[j] * pb_y[j] * pc_yyy[j] + 3.0 * fl1_fx * pc_yyy[j] * pb_yy[j] + pa_xxy[j] * pc_yyyy[j] + 4.0 * pa_xx[j] * pc_yyyy[j] * pb_y[j] + 8.0 * pa_xy[j] * pc_xyyy[j] * pb_y[j] + 12.0 * pa_x[j] * pc_xyyy[j] * pb_yy[j] + 6.0 * pc_xxyy[j] * pa_y[j] * pb_yy[j] + 4.0 * pc_xxyy[j] * pb_yyy[j]);

                t_xxy_yyyy[j] += fl_s_0_0_5 * (-3.75 * pc_xxy[j] * fl2_fx - 2.5 * fl2_fx * pc_yyy[j] - 10.0 * pa_x[j] * pc_xyyy[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - 12.0 * pc_xxyy[j] * pb_y[j] * fl1_fx - 5.0 * pc_xxyyy[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyyy[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyyy[j] - 2.0 * fl1_fx * pc_yyyy[j] * pb_y[j] - pa_xx[j] * pc_yyyyy[j] - 2.0 * pa_xy[j] * pc_xyyyy[j] - 8.0 * pa_x[j] * pc_xyyyy[j] * pb_y[j] - 4.0 * pc_xxyyy[j] * pa_y[j] * pb_y[j] - 6.0 * pc_xxyyy[j] * pb_yy[j]);

                t_xxy_yyyy[j] += fl_s_0_0_6 * (5.0 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyy[j] + 2.0 * pa_x[j] * pc_xyyyyy[j] + pc_xxyyyy[j] * pa_y[j] + 4.0 * pc_xxyyyy[j] * pb_y[j]);

                t_xxy_yyyy[j] += -fl_s_0_0_7 * pc_xxyyyyy[j];

                t_xxy_yyyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.75 * fl2_fx * pb_yyz[j] + 1.5 * pa_xxy[j] * pb_yz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_y[j] * pb_yyyz[j] + pa_xxy[j] * pb_yyyz[j]);

                t_xxy_yyyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_xx[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_yz[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 2.25 * fl2_fx * pc_y[j] * pb_yz[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * fl2_fx * pb_yyz[j] - 1.5 * pa_xxy[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_xxy[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_y[j] * fl1_fx * pb_z[j] - 4.5 * pa_xx[j] * pc_y[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] - 1.5 * pa_xx[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_xy[j] * pc_x[j] * pb_yz[j] * fl1_fx - 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_y[j] * pb_yyy[j] * pc_z[j] - 1.5 * fl1_fx * pa_y[j] * pb_yyz[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_yyyz[j] - 0.5 * fl1_fx * pa_y[j] * pb_yyyz[j] - pa_xxy[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_xxy[j] * pb_yyz[j] * pc_y[j] - pa_xx[j] * pc_y[j] * pb_yyyz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_yyyz[j]);

                t_xxy_yyyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_y[j] + 4.5 * fl2_fx * pc_y[j] * pb_yz[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pb_yy[j] * pc_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.75 * fl2_fx * pb_yyz[j] + 1.5 * pa_xxy[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_y[j] * fl1_fx * pb_z[j] + 4.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xx[j] * pc_y[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_z[j] + 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xy[j] * pc_x[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 9.0 * pa_x[j] * pc_xy[j] * pb_yz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_xx[j] * pa_y[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xx[j] * fl1_fx * pb_yyz[j] + 1.5 * fl1_fx * pa_y[j] * pb_yy[j] * pc_yz[j] + 1.5 * fl1_fx * pa_y[j] * pb_yz[j] * pc_yy[j] + 0.5 * fl1_fx * pc_yz[j] * pb_yyy[j] + 1.5 * fl1_fx * pc_yy[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_y[j] * pb_yyy[j] * pc_z[j] + 1.5 * fl1_fx * pa_y[j] * pb_yyz[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_yyyz[j] + 3.0 * pa_xxy[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_xxy[j] * pb_yz[j] * pc_yy[j] + pa_xx[j] * pc_yz[j] * pb_yyy[j] + 3.0 * pa_xx[j] * pc_yy[j] * pb_yyz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_yyy[j] + 6.0 * pa_xy[j] * pc_xy[j] * pb_yyz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_yyyz[j] + pc_xx[j] * pa_y[j] * pb_yyyz[j]);

                t_xxy_yyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * pc_xx[j] * fl2_fx * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 4.5 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 2.25 * fl2_fx * pc_y[j] * pb_yz[j] - 0.75 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx - 4.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yy[j] * fl1_fx * pb_z[j] - 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 9.0 * pa_x[j] * pc_xy[j] * pb_yz[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx - 1.5 * pc_xx[j] * pa_y[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 4.5 * pc_xxy[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xx[j] * fl1_fx * pb_yyz[j] - 1.5 * fl1_fx * pa_y[j] * pb_y[j] * pc_yyz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_yy[j] - 1.5 * fl1_fx * pc_yyy[j] * pb_yz[j] - 1.5 * fl1_fx * pa_y[j] * pb_yy[j] * pc_yz[j] - 1.5 * fl1_fx * pa_y[j] * pb_yz[j] * pc_yy[j] - 0.5 * fl1_fx * pc_yz[j] * pb_yyy[j] - 1.5 * fl1_fx * pc_yy[j] * pb_yyz[j] - 3.0 * pa_xxy[j] * pb_y[j] * pc_yyz[j] - pa_xxy[j] * pc_yyy[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_yyz[j] * pb_yy[j] - 3.0 * pa_xx[j] * pc_yyy[j] * pb_yz[j] - 6.0 * pa_xy[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_xy[j] * pc_xyy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_yyy[j] - 6.0 * pa_x[j] * pc_xyy[j] * pb_yyz[j] - pc_xxz[j] * pa_y[j] * pb_yyy[j] - 3.0 * pc_xxy[j] * pa_y[j] * pb_yyz[j] - pc_xxy[j] * pb_yyyz[j]);

                t_xxy_yyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 2.25 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 4.5 * pc_xxyz[j] * pb_y[j] * fl1_fx + 4.5 * pc_xxy[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyyz[j] + 1.5 * fl1_fx * pc_yyyz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] + 1.5 * fl1_fx * pa_y[j] * pb_y[j] * pc_yyz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_yy[j] + 1.5 * fl1_fx * pc_yyy[j] * pb_yz[j] + pa_xxy[j] * pc_yyyz[j] + 3.0 * pa_xx[j] * pc_yyyz[j] * pb_y[j] + pa_xx[j] * pc_yyyy[j] * pb_z[j] + 6.0 * pa_xy[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xyyy[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xyyz[j] * pb_yy[j] + 6.0 * pa_x[j] * pc_xyyy[j] * pb_yz[j] + 3.0 * pc_xxyz[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_y[j] * pb_yz[j] + pc_xxyz[j] * pb_yyy[j] + 3.0 * pc_xxyy[j] * pb_yyz[j]);

                t_xxy_yyyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pc_yyz[j] - 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - 4.5 * pc_xxyz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyyyz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyyz[j] - 1.5 * fl1_fx * pc_yyyz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] - pa_xx[j] * pc_yyyyz[j] - 2.0 * pa_xy[j] * pc_xyyyz[j] - 6.0 * pa_x[j] * pc_xyyyz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyyyy[j] * pb_z[j] - 3.0 * pc_xxyyz[j] * pa_y[j] * pb_y[j] - pc_xxyyy[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxyyz[j] * pb_yy[j] - 3.0 * pc_xxyyy[j] * pb_yz[j]);

                t_xxy_yyyz[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + 2.0 * pa_x[j] * pc_xyyyyz[j] + pc_xxyyyz[j] * pa_y[j] + 3.0 * pc_xxyyyz[j] * pb_y[j] + pc_xxyyyy[j] * pb_z[j]);

                t_xxy_yyyz[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_27_30(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (27,30)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xy = paDistances.data(19 * idx + 4);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxy = paDistances.data(19 * idx + 10);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxy_yyzz = primBuffer.data(150 * idx + 27);

            auto t_xxy_yzzz = primBuffer.data(150 * idx + 28);

            auto t_xxy_zzzz = primBuffer.data(150 * idx + 29);

            // Batch of Integrals (27,30)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxy, pa_xy, pa_y, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, \
                                     pb_yzzz, pb_z, pb_zz, pb_zzz, pb_zzzz, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, \
                                     pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, \
                                     pc_xxyzzz, pc_xxyzzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyy, pc_xyyy, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, \
                                     pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, \
                                     pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xxy_yyzz, t_xxy_yzzz, t_xxy_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxy_yyzz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_y[j] + 0.25 * fl3_fx * pb_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.25 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * fl2_fx * pb_yzz[j] + 0.5 * pa_xxy[j] * pb_yy[j] * fl1_fx + 0.5 * pa_xxy[j] * fl1_fx * pb_zz[j] + pa_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_yyzz[j] + pa_xxy[j] * pb_yyzz[j]);

                t_xxy_yyzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pb_y[j] - 0.5 * pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - pa_xx[j] * fl2_fx * pb_y[j] - 0.5 * pa_xy[j] * pc_x[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_yy[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_zz[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - fl2_fx * pb_yz[j] * pc_z[j] - fl2_fx * pb_yzz[j] - 0.5 * pa_xxy[j] * pb_yy[j] * fl1_fx - pa_xxy[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xxy[j] * fl1_fx * pb_zz[j] - 0.5 * pa_xx[j] * pc_y[j] * pb_yy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] - 2.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] - pa_xx[j] * fl1_fx * pb_yzz[j] - pa_xy[j] * pc_x[j] * pb_yy[j] * fl1_fx - pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] - 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] - fl1_fx * pa_y[j] * pb_yyz[j] * pc_z[j] - fl1_fx * pa_y[j] * pb_yzz[j] * pc_y[j] - 0.5 * fl1_fx * pc_y[j] * pb_yyzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_yyzz[j] - 2.0 * pa_xxy[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_xxy[j] * pb_yzz[j] * pc_y[j] - pa_xx[j] * pc_y[j] * pb_yyzz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_yyzz[j]);

                t_xxy_yyzz[j] += fl_s_0_0_2 * (0.375 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_y[j] + pa_xy[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 2.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] + 0.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.5 * fl2_fx * pb_y[j] * pc_zz[j] + 2.0 * fl2_fx * pb_yz[j] * pc_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.25 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * fl2_fx * pb_yzz[j] + pa_xxy[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_xxy[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xxy[j] * fl1_fx * pc_zz[j] + pa_xxy[j] * fl1_fx * pb_z[j] * pc_z[j] + 0.5 * pa_xx[j] * pc_y[j] * pb_yy[j] * fl1_fx + pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx + 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_y[j] * fl1_fx * pb_zz[j] + pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] + 2.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_z[j] + pa_xy[j] * pc_x[j] * pb_yy[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + pa_xy[j] * pc_x[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_xy[j] * pb_yy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 4.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_xx[j] * pa_y[j] * pb_yy[j] * fl1_fx + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + pc_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_yy[j] * pc_zz[j] + 2.0 * fl1_fx * pa_y[j] * pb_yz[j] * pc_yz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] + fl1_fx * pc_yz[j] * pb_yyz[j] + fl1_fx * pc_yy[j] * pb_yzz[j] + fl1_fx * pa_y[j] * pb_yyz[j] * pc_z[j] + fl1_fx * pa_y[j] * pb_yzz[j] * pc_y[j] + 0.5 * fl1_fx * pc_y[j] * pb_yyzz[j] + pa_xxy[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_xxy[j] * pb_yz[j] * pc_yz[j] + pa_xxy[j] * pc_yy[j] * pb_zz[j] + 2.0 * pa_xx[j] * pc_yz[j] * pb_yyz[j] + 2.0 * pa_xx[j] * pc_yy[j] * pb_yzz[j] + 4.0 * pa_xy[j] * pc_xz[j] * pb_yyz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_yzz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_yyzz[j] + pc_xx[j] * pa_y[j] * pb_yyzz[j]);

                t_xxy_yyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.125 * fl3_fx * pa_y[j] - 0.25 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 0.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_yy[j] - 0.5 * fl2_fx * pa_y[j] * pc_zz[j] - fl2_fx * pc_yy[j] * pb_y[j] - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - fl2_fx * pb_y[j] * pc_zz[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - fl2_fx * pb_yz[j] * pc_z[j] - 0.5 * pa_xxy[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xxy[j] * fl1_fx * pc_zz[j] - pa_xx[j] * pc_yy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xx[j] * fl1_fx * pb_y[j] * pc_zz[j] - 2.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx - pa_xy[j] * pc_xyy[j] * fl1_fx - pa_xy[j] * pc_xzz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xy[j] * pb_yy[j] * fl1_fx - 2.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 4.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xx[j] * pa_y[j] * pb_yy[j] * fl1_fx - pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx - pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xxy[j] * pb_yy[j] * fl1_fx - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xxz[j] * fl1_fx * pb_yz[j] - pc_xx[j] * fl1_fx * pb_yzz[j] - fl1_fx * pa_y[j] * pb_y[j] * pc_yzz[j] - fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] - 2.0 * fl1_fx * pc_yyz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] - 0.5 * fl1_fx * pa_y[j] * pb_yy[j] * pc_zz[j] - 2.0 * fl1_fx * pa_y[j] * pb_yz[j] * pc_yz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] - fl1_fx * pc_yz[j] * pb_yyz[j] - fl1_fx * pc_yy[j] * pb_yzz[j] - 2.0 * pa_xxy[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_xxy[j] * pc_yyz[j] * pb_z[j] - pa_xx[j] * pc_yzz[j] * pb_yy[j] - 4.0 * pa_xx[j] * pc_yyz[j] * pb_yz[j] - pa_xx[j] * pc_yyy[j] * pb_zz[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_yy[j] - 8.0 * pa_xy[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_xy[j] * pc_xyy[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xyz[j] * pb_yyz[j] - 4.0 * pa_x[j] * pc_xyy[j] * pb_yzz[j] - 2.0 * pc_xxz[j] * pa_y[j] * pb_yyz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_yzz[j] - pc_xxy[j] * pb_yyzz[j]);

                t_xxy_yyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pc_yyy[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * fl2_fx * pb_y[j] * pc_zz[j] + 0.5 * pa_xx[j] * pc_yyy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + pa_xy[j] * pc_xyy[j] * fl1_fx + pa_xy[j] * pc_xzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx + pa_x[j] * pc_xyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx + pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pb_yy[j] * fl1_fx + pc_xxyy[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + pc_xxzz[j] * fl1_fx * pb_y[j] + 2.0 * pc_xxz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] + fl1_fx * pc_yyzz[j] * pb_y[j] + fl1_fx * pc_yyyz[j] * pb_z[j] + fl1_fx * pa_y[j] * pb_y[j] * pc_yzz[j] + fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] + 2.0 * fl1_fx * pc_yyz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] + pa_xxy[j] * pc_yyzz[j] + 2.0 * pa_xx[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xx[j] * pc_yyyz[j] * pb_z[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_yy[j] + 8.0 * pa_x[j] * pc_xyyz[j] * pb_yz[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_zz[j] + pc_xxzz[j] * pa_y[j] * pb_yy[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_yz[j] + pc_xxyy[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xxyz[j] * pb_yyz[j] + 2.0 * pc_xxyy[j] * pb_yzz[j]);

                t_xxy_yyzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pc_yzz[j] - pa_x[j] * pc_xyyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx - pc_xxyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - pc_xxzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] - fl1_fx * pc_yyzz[j] * pb_y[j] - fl1_fx * pc_yyyz[j] * pb_z[j] - pa_xx[j] * pc_yyyzz[j] - 2.0 * pa_xy[j] * pc_xyyzz[j] - 4.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xyyyz[j] * pb_z[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_y[j] * pb_z[j] - pc_xxyzz[j] * pb_yy[j] - 4.0 * pc_xxyyz[j] * pb_yz[j] - pc_xxyyy[j] * pb_zz[j]);

                t_xxy_yyzz[j] += fl_s_0_0_6 * (0.5 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 2.0 * pa_x[j] * pc_xyyyzz[j] + pc_xxyyzz[j] * pa_y[j] + 2.0 * pc_xxyyzz[j] * pb_y[j] + 2.0 * pc_xxyyyz[j] * pb_z[j]);

                t_xxy_yyzz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];

                t_xxy_yzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_xxy[j] * pb_yz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_y[j] * pb_yzzz[j] + pa_xxy[j] * pb_yzzz[j]);

                t_xxy_yzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_xx[j] * fl2_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_yz[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 0.75 * fl2_fx * pb_zz[j] * pc_z[j] - 0.5 * fl2_fx * pb_zzz[j] - 1.5 * pa_xxy[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xxy[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_xxy[j] * pc_y[j] * pb_z[j] * fl1_fx - 1.5 * pa_xx[j] * pc_y[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] - 0.5 * pa_xx[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_xy[j] * pc_x[j] * pb_yz[j] * fl1_fx - pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] - 1.5 * fl1_fx * pa_y[j] * pb_yzz[j] * pc_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_y[j] * pb_zzz[j] - 0.5 * fl1_fx * pc_y[j] * pb_yzzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_yzzz[j] - 3.0 * pa_xxy[j] * pb_yzz[j] * pc_z[j] - pa_xxy[j] * pc_y[j] * pb_zzz[j] - pa_xx[j] * pc_y[j] * pb_yzzz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_yzzz[j]);

                t_xxy_yzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xx[j] * fl2_fx * pc_z[j] + 0.75 * pa_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pc_y[j] * pb_yz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * fl2_fx * pb_z[j] * pc_zz[j] + 1.5 * fl2_fx * pb_zz[j] * pc_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_xxy[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_y[j] * pb_yz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yy[j] * pb_z[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] + 1.5 * pa_xx[j] * fl1_fx * pb_zz[j] * pc_z[j] + 3.0 * pa_xy[j] * pc_x[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xy[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * pb_yz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_xx[j] * pa_y[j] * pb_yz[j] * fl1_fx + 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] + 1.5 * fl1_fx * pa_y[j] * pb_yz[j] * pc_zz[j] + 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] + 1.5 * fl1_fx * pc_yz[j] * pb_yzz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_y[j] * pb_yzz[j] * pc_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_y[j] * pb_zzz[j] + 0.5 * fl1_fx * pc_y[j] * pb_yzzz[j] + 3.0 * pa_xxy[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_xxy[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_yz[j] * pb_yzz[j] + pa_xx[j] * pc_yy[j] * pb_zzz[j] + 6.0 * pa_xy[j] * pc_xz[j] * pb_yzz[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_zzz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_yzzz[j] + pc_xx[j] * pa_y[j] * pb_yzzz[j]);

                t_xxy_yzzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * fl2_fx * pc_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pc_xx[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 0.25 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pb_z[j] * pc_zz[j] - 0.75 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_yz[j] - 0.75 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_xxy[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xx[j] * fl1_fx * pc_zzz[j] - 1.5 * pa_xx[j] * fl1_fx * pb_z[j] * pc_zz[j] - 3.0 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xy[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xy[j] * pb_yz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyy[j] * pb_z[j] * fl1_fx - 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xx[j] * pa_y[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxy[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_y[j] * pc_zzz[j] - 1.5 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_yz[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_y[j] * pb_yz[j] * pc_zz[j] - 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] - 1.5 * fl1_fx * pc_yz[j] * pb_yzz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_zzz[j] - pa_xxy[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_xxy[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_yzz[j] * pb_yz[j] - 3.0 * pa_xx[j] * pc_yyz[j] * pb_zz[j] - 6.0 * pa_xy[j] * pc_xzz[j] * pb_yz[j] - 6.0 * pa_xy[j] * pc_xyz[j] * pb_zz[j] - 6.0 * pa_x[j] * pc_xyz[j] * pb_yzz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_zzz[j] - 3.0 * pc_xxz[j] * pa_y[j] * pb_yzz[j] - pc_xxy[j] * pa_y[j] * pb_zzz[j] - pc_xxy[j] * pb_yzzz[j]);

                t_xxy_yzzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * fl2_fx * pb_z[j] * pc_zz[j] + 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_zzz[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyy[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + pa_x[j] * pc_xzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_y[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxyy[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] + 1.5 * fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_y[j] * pb_y[j] * pc_zzz[j] + 1.5 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_yz[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_zz[j] + pa_xxy[j] * pc_yzzz[j] + pa_xx[j] * pc_yzzz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_yyzz[j] * pb_z[j] + 2.0 * pa_xy[j] * pc_xzzz[j] * pb_y[j] + 6.0 * pa_xy[j] * pc_xyzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xyzz[j] * pb_yz[j] + 6.0 * pa_x[j] * pc_xyyz[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pa_y[j] * pb_yz[j] + 3.0 * pc_xxyz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xxyz[j] * pb_yzz[j] + pc_xxyy[j] * pb_zzz[j]);

                t_xxy_yzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 0.25 * fl2_fx * pc_zzz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - pa_x[j] * pc_xzzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 0.5 * pc_xxzzz[j] * fl1_fx - 1.5 * pc_xxzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] - 1.5 * fl1_fx * pc_yyzz[j] * pb_z[j] - pa_xx[j] * pc_yyzzz[j] - 2.0 * pa_xy[j] * pc_xyzzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_y[j] - 6.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxzzz[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxyzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pb_yz[j] - 3.0 * pc_xxyyz[j] * pb_zz[j]);

                t_xxy_yzzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 2.0 * pa_x[j] * pc_xyyzzz[j] + pc_xxyzzz[j] * pa_y[j] + pc_xxyzzz[j] * pb_y[j] + 3.0 * pc_xxyyzz[j] * pb_z[j]);

                t_xxy_yzzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];

                t_xxy_zzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 1.5 * fl2_fx * pa_y[j] * pb_zz[j] + 3.0 * pa_xxy[j] * pb_zz[j] * fl1_fx + 0.5 * fl1_fx * pa_y[j] * pb_zzzz[j] + pa_xxy[j] * pb_zzzz[j]);

                t_xxy_zzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xxy[j] * fl2_fx - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * fl2_fx * pa_y[j] * pb_zz[j] - 3.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_xxy[j] * pb_zz[j] * fl1_fx - 6.0 * pa_xxy[j] * pb_z[j] * pc_z[j] * fl1_fx - 3.0 * pa_xx[j] * pc_y[j] * pb_zz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_x[j] * pb_zz[j] * fl1_fx - 2.0 * fl1_fx * pa_y[j] * pb_zzz[j] * pc_z[j] - 0.5 * fl1_fx * pc_y[j] * pb_zzzz[j] - 0.5 * fl1_fx * pa_y[j] * pb_zzzz[j] - 4.0 * pa_xxy[j] * pb_zzz[j] * pc_z[j] - pa_xx[j] * pc_y[j] * pb_zzzz[j] - 2.0 * pa_xy[j] * pc_x[j] * pb_zzzz[j]);

                t_xxy_zzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.75 * pa_xxy[j] * fl2_fx + 1.5 * pa_xx[j] * pc_y[j] * fl2_fx + 3.0 * pa_xy[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 6.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 3.0 * fl2_fx * pc_y[j] * pb_zz[j] + 3.0 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pb_zz[j] + 6.0 * pa_xxy[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_xxy[j] * pc_zz[j] * fl1_fx + 3.0 * pa_xx[j] * pc_y[j] * pb_zz[j] * fl1_fx + 6.0 * pa_xx[j] * pc_yz[j] * pb_z[j] * fl1_fx + 6.0 * pa_xy[j] * pc_x[j] * pb_zz[j] * fl1_fx + 12.0 * pa_xy[j] * pc_xz[j] * pb_z[j] * fl1_fx + 6.0 * pa_x[j] * pc_xy[j] * pb_zz[j] * fl1_fx + 3.0 * pc_xx[j] * pa_y[j] * pb_zz[j] * fl1_fx + 3.0 * fl1_fx * pa_y[j] * pb_zz[j] * pc_zz[j] + 2.0 * fl1_fx * pc_yz[j] * pb_zzz[j] + 2.0 * fl1_fx * pa_y[j] * pb_zzz[j] * pc_z[j] + 0.5 * fl1_fx * pc_y[j] * pb_zzzz[j] + 6.0 * pa_xxy[j] * pb_zz[j] * pc_zz[j] + 4.0 * pa_xx[j] * pc_yz[j] * pb_zzz[j] + 8.0 * pa_xy[j] * pc_xz[j] * pb_zzz[j] + 2.0 * pa_x[j] * pc_xy[j] * pb_zzzz[j] + pc_xx[j] * pa_y[j] * pb_zzzz[j]);

                t_xxy_zzzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * pa_xx[j] * pc_y[j] * fl2_fx - 1.5 * pa_xy[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * fl2_fx * pa_y[j] * pc_zz[j] - 6.0 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_xxy[j] * pc_zz[j] * fl1_fx - 6.0 * pa_xx[j] * pc_yz[j] * pb_z[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx - 12.0 * pa_xy[j] * pc_xz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xzz[j] * fl1_fx - 6.0 * pa_x[j] * pc_xy[j] * pb_zz[j] * fl1_fx - 12.0 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xx[j] * pa_y[j] * pb_zz[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_y[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxy[j] * pb_zz[j] * fl1_fx - 2.0 * fl1_fx * pa_y[j] * pb_z[j] * pc_zzz[j] - 3.0 * fl1_fx * pc_yzz[j] * pb_zz[j] - 3.0 * fl1_fx * pa_y[j] * pb_zz[j] * pc_zz[j] - 2.0 * fl1_fx * pc_yz[j] * pb_zzz[j] - 4.0 * pa_xxy[j] * pb_z[j] * pc_zzz[j] - 6.0 * pa_xx[j] * pc_yzz[j] * pb_zz[j] - 12.0 * pa_xy[j] * pc_xzz[j] * pb_zz[j] - 8.0 * pa_x[j] * pc_xyz[j] * pb_zzz[j] - 4.0 * pc_xxz[j] * pa_y[j] * pb_zzz[j] - pc_xxy[j] * pb_zzzz[j]);

                t_xxy_zzzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 3.0 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 3.0 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xzz[j] * fl1_fx + 12.0 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_y[j] * pb_z[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxy[j] * pb_zz[j] * fl1_fx + 6.0 * pc_xxyz[j] * pb_z[j] * fl1_fx + 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] + 2.0 * fl1_fx * pc_yzzz[j] * pb_z[j] + 2.0 * fl1_fx * pa_y[j] * pb_z[j] * pc_zzz[j] + 3.0 * fl1_fx * pc_yzz[j] * pb_zz[j] + pa_xxy[j] * pc_zzzz[j] + 4.0 * pa_xx[j] * pc_yzzz[j] * pb_z[j] + 8.0 * pa_xy[j] * pc_xzzz[j] * pb_z[j] + 12.0 * pa_x[j] * pc_xyzz[j] * pb_zz[j] + 6.0 * pc_xxzz[j] * pa_y[j] * pb_zz[j] + 4.0 * pc_xxyz[j] * pb_zzz[j]);

                t_xxy_zzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pc_yzz[j] - 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - 6.0 * pc_xxyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 0.5 * fl1_fx * pc_yzzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] - 2.0 * fl1_fx * pc_yzzz[j] * pb_z[j] - pa_xx[j] * pc_yzzzz[j] - 2.0 * pa_xy[j] * pc_xzzzz[j] - 8.0 * pa_x[j] * pc_xyzzz[j] * pb_z[j] - 4.0 * pc_xxzzz[j] * pa_y[j] * pb_z[j] - 6.0 * pc_xxyzz[j] * pb_zz[j]);

                t_xxy_zzzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + 2.0 * pa_x[j] * pc_xyzzzz[j] + pc_xxzzzz[j] * pa_y[j] + 4.0 * pc_xxyzzz[j] * pb_z[j]);

                t_xxy_zzzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_30_33(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (30,33)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xz = paDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxx = pcDistances.data(119 * idx + 55);

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxxz = pcDistances.data(119 * idx + 85);

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            auto pc_xxxxxzz = pcDistances.data(119 * idx + 88);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxz_xxxx = primBuffer.data(150 * idx + 30);

            auto t_xxz_xxxy = primBuffer.data(150 * idx + 31);

            auto t_xxz_xxxz = primBuffer.data(150 * idx + 32);

            // Batch of Integrals (30,33)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xz, pa_z, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, \
                                     pb_xxxz, pb_xxy, pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, \
                                     pc_xxxxxx, pc_xxxxxxz, pc_xxxxxy, pc_xxxxxyz, pc_xxxxxz, pc_xxxxxzz, pc_xxxxy, \
                                     pc_xxxxyz, pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyz, \
                                     pc_xxz, pc_xxzz, pc_xy, pc_xyz, pc_xz, pc_xzz, pc_y, pc_yz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxz_xxxx, \
                                     t_xxz_xxxy, t_xxz_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxz_xxxx[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pa_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 6.0 * pa_xz[j] * fl2_fx * pb_x[j] + 4.5 * fl2_fx * pa_z[j] * pb_xx[j] + 3.0 * pa_xxz[j] * pb_xx[j] * fl1_fx + 4.0 * pa_xz[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxxx[j] + pa_xxz[j] * pb_xxxx[j]);

                t_xxz_xxxx[j] += fl_s_0_0_1 * (-5.625 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 1.5 * pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 7.5 * pa_xz[j] * pc_x[j] * fl2_fx - 12.0 * pa_xz[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 15.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 4.5 * fl2_fx * pc_z[j] * pb_xx[j] - 9.0 * fl2_fx * pa_z[j] * pb_xx[j] - 3.0 * pa_xxz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_xxz[j] * pb_x[j] * pc_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_z[j] * pb_xx[j] * fl1_fx - 18.0 * pa_xz[j] * pc_x[j] * pb_xx[j] * fl1_fx - 4.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] - 4.0 * pa_xz[j] * fl1_fx * pb_xxx[j] - 6.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxxx[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxxx[j] - 4.0 * pa_xxz[j] * pb_xxx[j] * pc_x[j] - pa_xx[j] * pc_z[j] * pb_xxxx[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xxxx[j]);

                t_xxz_xxxx[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pa_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * pc_z[j] * fl2_fx + 15.0 * pa_xz[j] * pc_x[j] * fl2_fx + 7.5 * pa_x[j] * pc_xz[j] * fl2_fx + 12.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 6.0 * pa_xz[j] * fl2_fx * pb_x[j] + 11.25 * pc_xx[j] * pa_z[j] * fl2_fx + 30.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 15.0 * pc_xz[j] * fl2_fx * pb_x[j] + 9.0 * fl2_fx * pc_z[j] * pb_xx[j] + 4.5 * fl2_fx * pa_z[j] * pb_xx[j] + 6.0 * pa_xxz[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_xx[j] * fl1_fx + 3.0 * pa_xx[j] * pc_z[j] * pb_xx[j] * fl1_fx + 6.0 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + 18.0 * pa_xz[j] * pc_x[j] * pb_xx[j] * fl1_fx + 24.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx + 18.0 * pa_x[j] * pc_xz[j] * pb_xx[j] * fl1_fx + 4.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] + 18.0 * pc_xx[j] * pa_z[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xz[j] * fl1_fx * pb_xxx[j] + 6.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxxx[j] + 6.0 * pa_xxz[j] * pb_xx[j] * pc_xx[j] + 4.0 * pa_xx[j] * pc_xz[j] * pb_xxx[j] + 8.0 * pa_xz[j] * pc_xx[j] * pb_xxx[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xxxx[j] + pc_xx[j] * pa_z[j] * pb_xxxx[j]);

                t_xxz_xxxx[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pa_z[j] - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 7.5 * pa_xz[j] * pc_x[j] * fl2_fx - 15.0 * pa_x[j] * pc_xz[j] * fl2_fx - 6.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 22.5 * pc_xx[j] * pa_z[j] * fl2_fx - 11.25 * pc_xxz[j] * fl2_fx - 30.0 * pc_xz[j] * fl2_fx * pb_x[j] - 15.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 4.5 * fl2_fx * pc_z[j] * pb_xx[j] - 3.0 * pa_xxz[j] * pc_xx[j] * fl1_fx - 6.0 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xxz[j] * fl1_fx - 24.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx - 10.0 * pa_xz[j] * pc_xxx[j] * fl1_fx - 18.0 * pa_x[j] * pc_xz[j] * pb_xx[j] * fl1_fx - 24.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 18.0 * pc_xx[j] * pa_z[j] * pb_xx[j] * fl1_fx - 20.0 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx - 18.0 * pc_xxz[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xz[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_xxz[j] * pb_x[j] * pc_xxx[j] - 6.0 * pa_xx[j] * pc_xxz[j] * pb_xx[j] - 12.0 * pa_xz[j] * pc_xxx[j] * pb_xx[j] - 8.0 * pa_x[j] * pc_xxz[j] * pb_xxx[j] - 4.0 * pc_xxx[j] * pa_z[j] * pb_xxx[j] - pc_xxz[j] * pb_xxxx[j]);

                t_xxz_xxxx[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 7.5 * pa_x[j] * pc_xz[j] * fl2_fx + 11.25 * pc_xx[j] * pa_z[j] * fl2_fx + 22.5 * pc_xxz[j] * fl2_fx + 15.0 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * pa_xx[j] * pc_xxz[j] * fl1_fx + 10.0 * pa_xz[j] * pc_xxx[j] * fl1_fx + 24.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 10.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 20.0 * pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx + 7.5 * pc_xxxx[j] * pa_z[j] * fl1_fx + 18.0 * pc_xxz[j] * pb_xx[j] * fl1_fx + 20.0 * pc_xxxz[j] * pb_x[j] * fl1_fx + pa_xxz[j] * pc_xxxx[j] + 4.0 * pa_xx[j] * pc_xxxz[j] * pb_x[j] + 8.0 * pa_xz[j] * pc_xxxx[j] * pb_x[j] + 12.0 * pa_x[j] * pc_xxxz[j] * pb_xx[j] + 6.0 * pc_xxxx[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxxz[j] * pb_xxx[j]);

                t_xxz_xxxx[j] += fl_s_0_0_5 * (-11.25 * pc_xxz[j] * fl2_fx - 10.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 7.5 * pc_xxxx[j] * pa_z[j] * fl1_fx - 20.0 * pc_xxxz[j] * pb_x[j] * fl1_fx - 7.5 * pc_xxxxz[j] * fl1_fx - pa_xx[j] * pc_xxxxz[j] - 2.0 * pa_xz[j] * pc_xxxxx[j] - 8.0 * pa_x[j] * pc_xxxxz[j] * pb_x[j] - 4.0 * pc_xxxxx[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxxxz[j] * pb_xx[j]);

                t_xxz_xxxx[j] += fl_s_0_0_6 * (7.5 * pc_xxxxz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxxz[j] + pc_xxxxxx[j] * pa_z[j] + 4.0 * pc_xxxxxz[j] * pb_x[j]);

                t_xxz_xxxx[j] += -fl_s_0_0_7 * pc_xxxxxxz[j];

                t_xxz_xxxy[j] = fl_s_0_0_0 * (1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_xxz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xz[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxxy[j] + pa_xxz[j] * pb_xxxy[j]);

                t_xxz_xxxy[j] += fl_s_0_0_1 * (-1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 3.0 * pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 2.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 2.25 * fl2_fx * pc_z[j] * pb_xy[j] - 4.5 * fl2_fx * pa_z[j] * pb_xy[j] - 1.5 * pa_xxz[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_xxz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_y[j] - 1.5 * pa_xx[j] * pc_z[j] * pb_xy[j] * fl1_fx - 9.0 * pa_xz[j] * pc_x[j] * pb_xy[j] * fl1_fx - 3.0 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 3.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xxy[j] - 4.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxxy[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxxy[j] - pa_xxz[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_xxz[j] * pb_xxy[j] * pc_x[j] - pa_xx[j] * pc_z[j] * pb_xxxy[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xxxy[j]);

                t_xxz_xxxy[j] += fl_s_0_0_2 * (3.0 * pa_xz[j] * fl2_fx * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 7.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pc_yz[j] * pb_x[j] + 4.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] + 4.5 * fl2_fx * pc_z[j] * pb_xy[j] + 2.25 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_xxz[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_y[j] + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] + 9.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 9.0 * pa_xz[j] * pc_x[j] * pb_xy[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] + 9.0 * pa_x[j] * pc_xz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 3.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] + 9.0 * pc_xx[j] * pa_z[j] * pb_xy[j] * fl1_fx + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] + 4.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + 4.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xxx[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxxy[j] + 3.0 * pa_xxz[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_xxz[j] * pb_xy[j] * pc_xx[j] + pa_xx[j] * pc_yz[j] * pb_xxx[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xxy[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xxx[j] + 6.0 * pa_xz[j] * pc_xx[j] * pb_xxy[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xxxy[j] + pc_xx[j] * pa_z[j] * pb_xxxy[j]);

                t_xxz_xxxy[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 7.5 * pc_xy[j] * fl2_fx * pa_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 4.5 * fl2_fx * pc_yz[j] * pb_x[j] - 2.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 2.25 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_y[j] - 9.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xxy[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_y[j] - 9.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xz[j] * pb_xy[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xx[j] - 9.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xx[j] * pa_z[j] * pb_xy[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] - 9.0 * pc_xxz[j] * pb_xy[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] - 4.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xxx[j] - 3.0 * pa_xxz[j] * pb_x[j] * pc_xxy[j] - pa_xxz[j] * pc_xxx[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_xx[j] - 3.0 * pa_xx[j] * pc_xxz[j] * pb_xy[j] - 6.0 * pa_xz[j] * pc_xxy[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxx[j] * pb_xy[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xxx[j] - 6.0 * pa_x[j] * pc_xxz[j] * pb_xxy[j] - pc_xxy[j] * pa_z[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_z[j] * pb_xxy[j] - pc_xxz[j] * pb_xxxy[j]);

                t_xxz_xxxy[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xxy[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxyz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxz[j] * pb_xy[j] * fl1_fx + 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + pa_xxz[j] * pc_xxxy[j] + 3.0 * pa_xx[j] * pc_xxyz[j] * pb_x[j] + pa_xx[j] * pc_xxxz[j] * pb_y[j] + 6.0 * pa_xz[j] * pc_xxxy[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxxx[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxz[j] * pb_xy[j] + 3.0 * pc_xxxy[j] * pa_z[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_z[j] * pb_xy[j] + pc_xxyz[j] * pb_xxx[j] + 3.0 * pc_xxxz[j] * pb_xxy[j]);

                t_xxz_xxxy[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx - 9.0 * pc_xxyz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * fl1_fx * pb_y[j] - pa_xx[j] * pc_xxxyz[j] - 2.0 * pa_xz[j] * pc_xxxxy[j] - 6.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxxz[j] * pb_y[j] - 3.0 * pc_xxxxy[j] * pa_z[j] * pb_x[j] - pc_xxxxx[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxxyz[j] * pb_xx[j] - 3.0 * pc_xxxxz[j] * pb_xy[j]);

                t_xxz_xxxy[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxyz[j] + pc_xxxxxy[j] * pa_z[j] + 3.0 * pc_xxxxyz[j] * pb_x[j] + pc_xxxxxz[j] * pb_y[j]);

                t_xxz_xxxy[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];

                t_xxz_xxxz[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 2.25 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_xxz[j] * pb_xz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxxz[j] + pa_xxz[j] * pb_xxxz[j]);

                t_xxz_xxxz[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 3.375 * fl3_fx * pb_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 3.0 * pa_xz[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 3.0 * pa_x[j] * fl2_fx * pb_xx[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 2.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_xz[j] - 4.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_xxz[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_xxz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_z[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxx[j] - 9.0 * pa_xz[j] * pc_x[j] * pb_xz[j] * fl1_fx - pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] - 3.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xxz[j] - 4.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxxz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxxz[j] - pa_xxz[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_xxz[j] * pb_xxz[j] * pc_x[j] - pa_xx[j] * pc_z[j] * pb_xxxz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xxxz[j]);

                t_xxz_xxxz[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 3.375 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 9.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_xz[j] * fl2_fx * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 1.5 * pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 3.75 * pc_xz[j] * fl2_fx * pa_z[j] + 7.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 3.75 * pc_xz[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * fl2_fx * pb_xx[j] + 2.25 * fl2_fx * pc_zz[j] * pb_x[j] + 4.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_xz[j] + 2.25 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_xxz[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_xxz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_z[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_x[j] + 9.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 9.0 * pa_xz[j] * pc_x[j] * pb_xz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] + 9.0 * pa_x[j] * pc_xz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxx[j] + 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] + 3.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] + 9.0 * pc_xx[j] * pa_z[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] + 4.5 * pc_xz[j] * fl1_fx * pb_xxz[j] + 4.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxxz[j] + 3.0 * pa_xxz[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_xxz[j] * pb_xz[j] * pc_xx[j] + pa_xx[j] * pc_zz[j] * pb_xxx[j] + 3.0 * pa_xx[j] * pc_xz[j] * pb_xxz[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_xxx[j] + 6.0 * pa_xz[j] * pc_xx[j] * pb_xxz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xxxz[j] + pc_xx[j] * pa_z[j] * pb_xxxz[j]);

                t_xxz_xxxz[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 6.0 * pa_x[j] * pc_xx[j] * fl2_fx - 4.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 9.0 * pc_xx[j] * fl2_fx * pb_x[j] - 2.5 * pc_xxx[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pa_z[j] - 3.75 * pc_xzz[j] * fl2_fx - 7.5 * pc_xz[j] * fl2_fx * pb_z[j] - 3.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xx[j] - 4.5 * fl2_fx * pc_zz[j] * pb_x[j] - 2.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * pa_xxz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_xx[j] - 9.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xz[j] * pb_xz[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xx[j] - 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] - 9.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xx[j] * pa_z[j] * pb_xz[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_xxz[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] - 4.5 * pc_xz[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] - 3.0 * pa_xxz[j] * pb_x[j] * pc_xxz[j] - pa_xxz[j] * pc_xxx[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_xx[j] - 3.0 * pa_xx[j] * pc_xxz[j] * pb_xz[j] - 6.0 * pa_xz[j] * pc_xxz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxx[j] * pb_xz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xxx[j] - 6.0 * pa_x[j] * pc_xxz[j] * pb_xxz[j] - pc_xxz[j] * pa_z[j] * pb_xxx[j] - 3.0 * pc_xxx[j] * pa_z[j] * pb_xxz[j] - pc_xxz[j] * pb_xxxz[j]);

                t_xxz_xxxz[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 3.0 * pa_x[j] * pc_xx[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 5.0 * pc_xxx[j] * fl2_fx + 4.5 * pc_xx[j] * fl2_fx * pb_x[j] + 7.5 * pc_xzz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pa_z[j] + 3.75 * pc_xz[j] * fl2_fx * pb_z[j] + 2.25 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xxx[j] + 6.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + 9.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xxxx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_x[j] + 9.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxz[j] * pa_z[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxzz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxz[j] * pb_xz[j] * fl1_fx + 5.0 * pc_xxxz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xx[j] + 4.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + pa_xxz[j] * pc_xxxz[j] + 3.0 * pa_xx[j] * pc_xxzz[j] * pb_x[j] + pa_xx[j] * pc_xxxz[j] * pb_z[j] + 6.0 * pa_xz[j] * pc_xxxz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxxx[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xxzz[j] * pb_xx[j] + 6.0 * pa_x[j] * pc_xxxz[j] * pb_xz[j] + 3.0 * pc_xxxz[j] * pa_z[j] * pb_xx[j] + 3.0 * pc_xxxx[j] * pa_z[j] * pb_xz[j] + pc_xxzz[j] * pb_xxx[j] + 3.0 * pc_xxxz[j] * pb_xxz[j]);

                t_xxz_xxxz[j] += fl_s_0_0_5 * (-2.5 * pc_xxx[j] * fl2_fx - 3.75 * pc_xzz[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - pa_x[j] * pc_xxxx[j] * fl1_fx - 5.0 * pc_xxxz[j] * pa_z[j] * fl1_fx - 9.0 * pc_xxzz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxzz[j] * fl1_fx - 5.0 * pc_xxxz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxxx[j] * fl1_fx - 1.5 * pc_xxxx[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxxzz[j] - 2.0 * pa_xz[j] * pc_xxxxz[j] - 6.0 * pa_x[j] * pc_xxxzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxxz[j] * pb_z[j] - 3.0 * pc_xxxxz[j] * pa_z[j] * pb_x[j] - pc_xxxxx[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxxzz[j] * pb_xx[j] - 3.0 * pc_xxxxz[j] * pb_xz[j]);

                t_xxz_xxxz[j] += fl_s_0_0_6 * (5.0 * pc_xxxzz[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxxzz[j] + pc_xxxxxz[j] * pa_z[j] + 3.0 * pc_xxxxzz[j] * pb_x[j] + pc_xxxxxz[j] * pb_z[j]);

                t_xxz_xxxz[j] += -fl_s_0_0_7 * pc_xxxxxzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_33_36(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (33,36)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xz = paDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxz_xxyy = primBuffer.data(150 * idx + 33);

            auto t_xxz_xxyz = primBuffer.data(150 * idx + 34);

            auto t_xxz_xxzz = primBuffer.data(150 * idx + 35);

            // Batch of Integrals (33,36)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xz, pa_z, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, \
                                     pb_xxz, pb_xxzz, pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, pc_xxxxyyz, pc_xxxxyz, \
                                     pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, pc_xxxxzzz, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyz, \
                                     pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyz, pc_xxyzz, \
                                     pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_y, pc_yy, pc_yyz, pc_yz, pc_yzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxz_xxyy, t_xxz_xxyz, \
                                     t_xxz_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxz_xxyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.25 * pa_xxz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_xxz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xxz[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxyy[j] + pa_xxz[j] * pb_xxyy[j]);

                t_xxz_xxyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.5 * pa_xxz[j] * fl2_fx - 0.25 * pa_xx[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 2.0 * pa_xz[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * fl2_fx * pa_z[j] * pb_yy[j] - 0.5 * fl2_fx * pa_z[j] * pb_xx[j] - 0.25 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_xxz[j] * pb_xx[j] * fl1_fx - pa_xxz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xxz[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_yy[j] - 0.5 * pa_xx[j] * pc_z[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yy[j] - pa_xz[j] * pc_x[j] * pb_xx[j] * fl1_fx - 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] - 4.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xyy[j] - 3.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] - fl1_fx * pa_z[j] * pb_xxy[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxyy[j] - 2.0 * pa_xxz[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_xxz[j] * pb_xyy[j] * pc_x[j] - pa_xx[j] * pc_z[j] * pb_xxyy[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xxyy[j]);

                t_xxz_xxyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 0.5 * pa_xx[j] * pc_z[j] * fl2_fx + 3.0 * pa_xz[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 2.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + pa_xxz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xxz[j] * fl1_fx * pc_yy[j] + pa_xxz[j] * fl1_fx * pb_y[j] * pc_y[j] + 0.5 * pa_xx[j] * pc_z[j] * pb_xx[j] * fl1_fx + pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yy[j] + pa_xz[j] * pc_x[j] * pb_xx[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yy[j] + pa_x[j] * pc_xz[j] * pb_xx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 4.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] + 4.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] + 0.5 * pc_xx[j] * pa_z[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] + 6.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] + 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_yy[j] + fl1_fx * pc_yz[j] * pb_xxy[j] + fl1_fx * pa_z[j] * pb_xxy[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxyy[j] + pa_xxz[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_xxz[j] * pb_xy[j] * pc_xy[j] + pa_xxz[j] * pc_xx[j] * pb_yy[j] + 2.0 * pa_xx[j] * pc_yz[j] * pb_xxy[j] + 2.0 * pa_xx[j] * pc_xz[j] * pb_xyy[j] + 4.0 * pa_xz[j] * pc_xy[j] * pb_xxy[j] + 4.0 * pa_xz[j] * pc_xx[j] * pb_xyy[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xxyy[j] + pc_xx[j] * pa_z[j] * pb_xxyy[j]);

                t_xxz_xxyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.25 * pa_xx[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pc_xx[j] * pa_z[j] * fl2_fx - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pa_z[j] * pc_yy[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.25 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_xxz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xxz[j] * fl1_fx * pc_yy[j] - pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - pa_xx[j] * pc_yz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx - pa_xz[j] * pc_xxx[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xz[j] * pb_xx[j] * fl1_fx - 2.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] - 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 4.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xy[j] - 0.5 * pc_xx[j] * pa_z[j] * pb_xx[j] * fl1_fx - pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xxz[j] * pb_xx[j] * fl1_fx - 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_yy[j] - fl1_fx * pc_yz[j] * pb_xxy[j] - 2.0 * pa_xxz[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_xxz[j] * pc_xxy[j] * pb_y[j] - pa_xx[j] * pc_yyz[j] * pb_xx[j] - 4.0 * pa_xx[j] * pc_xyz[j] * pb_xy[j] - pa_xx[j] * pc_xxz[j] * pb_yy[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_xx[j] - 8.0 * pa_xz[j] * pc_xxy[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xxx[j] * pb_yy[j] - 4.0 * pa_x[j] * pc_xyz[j] * pb_xxy[j] - 4.0 * pa_x[j] * pc_xxz[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_z[j] * pb_xxy[j] - 2.0 * pc_xxx[j] * pa_z[j] * pb_xyy[j] - pc_xxz[j] * pb_xxyy[j]);

                t_xxz_xxyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_z[j] * pc_yy[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + pa_xz[j] * pc_xxx[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + pa_x[j] * pc_xxxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_x[j] + pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * pb_xx[j] * fl1_fx + pc_xxxz[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_x[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_xx[j] + pa_xxz[j] * pc_xxyy[j] + 2.0 * pa_xx[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xxyz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xxyy[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxxy[j] * pb_y[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xx[j] + 8.0 * pa_x[j] * pc_xxyz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xxxz[j] * pb_yy[j] + pc_xxyy[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxxy[j] * pa_z[j] * pb_xy[j] + pc_xxxx[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xxyz[j] * pb_xxy[j] + 2.0 * pc_xxxz[j] * pb_xyy[j]);

                t_xxz_xxyy[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - pa_x[j] * pc_xxxz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - pc_xxxz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxxz[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 6.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxyyz[j] - 2.0 * pa_xz[j] * pc_xxxyy[j] - 4.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxxyz[j] * pb_y[j] - 2.0 * pc_xxxyy[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_z[j] * pb_y[j] - pc_xxyyz[j] * pb_xx[j] - 4.0 * pc_xxxyz[j] * pb_xy[j] - pc_xxxxz[j] * pb_yy[j]);

                t_xxz_xxyy[j] += fl_s_0_0_6 * (0.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyyz[j] + pc_xxxxyy[j] * pa_z[j] + 2.0 * pc_xxxyyz[j] * pb_x[j] + 2.0 * pc_xxxxyz[j] * pb_y[j]);

                t_xxz_xxyy[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];

                t_xxz_xxyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_xxz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxyz[j] + pa_xxz[j] * pb_xxyz[j]);

                t_xxz_xxyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.25 * pa_xx[j] * fl2_fx * pc_y[j] - 0.5 * pa_xx[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.0 * pa_x[j] * fl2_fx * pb_xy[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xx[j] * pc_y[j] - 0.5 * fl2_fx * pb_xxy[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_xxz[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] - pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] - pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xyz[j] - 3.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxy[j] * pc_z[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxz[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxyz[j] - pa_xxz[j] * pb_xxy[j] * pc_z[j] - pa_xxz[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_xxz[j] * pb_xyz[j] * pc_x[j] - pa_xx[j] * pc_z[j] * pb_xxyz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xxyz[j]);

                t_xxz_xxyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 0.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.25 * pa_xx[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 2.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * pc_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * fl2_fx * pb_xx[j] * pc_y[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_xxz[j] * fl1_fx * pc_yz[j] + 0.5 * pa_xxz[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_xxz[j] * fl1_fx * pc_y[j] * pb_z[j] + 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_yz[j] + pa_xx[j] * fl1_fx * pb_x[j] * pc_xy[j] + 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_xx[j] * fl1_fx * pb_xx[j] * pc_y[j] + pa_xx[j] * fl1_fx * pb_xy[j] * pc_x[j] + 3.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_yz[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yz[j] + 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] + 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_yz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxy[j] * pc_z[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxz[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxyz[j] + pa_xxz[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_xxz[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_xxz[j] * pb_xz[j] * pc_xy[j] + pa_xxz[j] * pc_xx[j] * pb_yz[j] + pa_xx[j] * pc_zz[j] * pb_xxy[j] + pa_xx[j] * pc_yz[j] * pb_xxz[j] + 2.0 * pa_xx[j] * pc_xz[j] * pb_xyz[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_xxy[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xxz[j] + 4.0 * pa_xz[j] * pc_xx[j] * pb_xyz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xxyz[j] + pc_xx[j] * pa_z[j] * pb_xxyz[j]);

                t_xxz_xxyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.25 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_yz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 0.25 * fl2_fx * pb_xx[j] * pc_y[j] - 0.5 * pa_xxz[j] * fl1_fx * pc_yz[j] - 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xxy[j] - pa_xx[j] * fl1_fx * pb_x[j] * pc_xy[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xx[j] * pb_y[j] - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] - 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_yz[j] - 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - pc_xxx[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xxy[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_yz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xxz[j] - 2.0 * pa_xxz[j] * pb_x[j] * pc_xyz[j] - pa_xxz[j] * pc_xxz[j] * pb_y[j] - pa_xxz[j] * pc_xxy[j] * pb_z[j] - pa_xx[j] * pc_yzz[j] * pb_xx[j] - 2.0 * pa_xx[j] * pc_xzz[j] * pb_xy[j] - 2.0 * pa_xx[j] * pc_xyz[j] * pb_xz[j] - pa_xx[j] * pc_xxz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xxz[j] * pb_xy[j] - 4.0 * pa_xz[j] * pc_xxy[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xxx[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xxy[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xxz[j] - 4.0 * pa_x[j] * pc_xxz[j] * pb_xyz[j] - pc_xxz[j] * pa_z[j] * pb_xxy[j] - pc_xxy[j] * pa_z[j] * pb_xxz[j] - 2.0 * pc_xxx[j] * pa_z[j] * pb_xyz[j] - pc_xxz[j] * pb_xxyz[j]);

                t_xxz_xxyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xxy[j] + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xxx[j] * fl1_fx * pb_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_x[j] + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] + pc_xxxy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + pc_xxx[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_xx[j] + pa_xxz[j] * pc_xxyz[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_x[j] + pa_xx[j] * pc_xxzz[j] * pb_y[j] + pa_xx[j] * pc_xxyz[j] * pb_z[j] + 4.0 * pa_xz[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxxz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xxxy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xxzz[j] * pb_xy[j] + 4.0 * pa_x[j] * pc_xxyz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxxz[j] * pb_yz[j] + pc_xxyz[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxxy[j] * pa_z[j] * pb_xz[j] + pc_xxxx[j] * pa_z[j] * pb_yz[j] + pc_xxzz[j] * pb_xxy[j] + pc_xxyz[j] * pb_xxz[j] + 2.0 * pc_xxxz[j] * pb_xyz[j]);

                t_xxz_xxyz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - pa_x[j] * pc_xxxy[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxxy[j] * fl1_fx - pc_xxxy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxyzz[j] - 2.0 * pa_xz[j] * pc_xxxyz[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxxzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxxyz[j] * pb_z[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_x[j] - pc_xxxxz[j] * pa_z[j] * pb_y[j] - pc_xxxxy[j] * pa_z[j] * pb_z[j] - pc_xxyzz[j] * pb_xx[j] - 2.0 * pc_xxxzz[j] * pb_xy[j] - 2.0 * pc_xxxyz[j] * pb_xz[j] - pc_xxxxz[j] * pb_yz[j]);

                t_xxz_xxyz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxxxy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxyzz[j] + pc_xxxxyz[j] * pa_z[j] + 2.0 * pc_xxxyzz[j] * pb_x[j] + pc_xxxxzz[j] * pb_y[j] + pc_xxxxyz[j] * pb_z[j]);

                t_xxz_xxyz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];

                t_xxz_xxzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_z[j] + pa_xz[j] * fl2_fx * pb_x[j] + 2.0 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * fl2_fx * pb_xxz[j] + 0.5 * pa_xxz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xxz[j] * fl1_fx * pb_zz[j] + pa_xx[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxzz[j] + pa_xxz[j] * pb_xxzz[j]);

                t_xxz_xxzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 2.25 * fl3_fx * pb_z[j] - 0.5 * pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - pa_xx[j] * fl2_fx * pb_z[j] - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 2.0 * pa_xz[j] * fl2_fx * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 4.0 * pa_x[j] * fl2_fx * pb_xz[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.5 * fl2_fx * pa_z[j] * pb_xx[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - fl2_fx * pb_xxz[j] - 0.5 * pa_xxz[j] * pb_xx[j] * fl1_fx - pa_xxz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xx[j] * pc_z[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_zz[j] - 2.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] - pa_xx[j] * fl1_fx * pb_xxz[j] - pa_xz[j] * pc_x[j] * pb_xx[j] * fl1_fx - 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] - 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] - 4.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] - 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xzz[j] - 3.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] - fl1_fx * pa_z[j] * pb_xxz[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxzz[j] - 2.0 * pa_xxz[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_xxz[j] * pb_xzz[j] * pc_x[j] - pa_xx[j] * pc_z[j] * pb_xxzz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xxzz[j]);

                t_xxz_xxzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 2.25 * fl3_fx * pb_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * pc_z[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_x[j] * fl2_fx + 4.5 * pa_x[j] * pc_xz[j] * fl2_fx + 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 6.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + pa_xz[j] * fl2_fx * pb_x[j] + 2.0 * pa_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 4.5 * pc_xz[j] * fl2_fx * pb_x[j] + 6.0 * pc_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * fl2_fx * pb_xxz[j] + pa_xxz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xxz[j] * fl1_fx * pc_zz[j] + pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xx[j] * pc_z[j] * pb_xx[j] * fl1_fx + 3.0 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_zz[j] + pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] + 2.0 * pa_xx[j] * fl1_fx * pb_xz[j] * pc_x[j] + pa_xz[j] * pc_x[j] * pb_xx[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] + 3.0 * pa_x[j] * pc_xz[j] * pb_xx[j] * fl1_fx + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] + 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xxz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] + 4.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] + 4.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] + 0.5 * pc_xx[j] * pa_z[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] + pc_xx[j] * fl1_fx * pb_xxz[j] + 6.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_zz[j] + fl1_fx * pc_zz[j] * pb_xxz[j] + fl1_fx * pa_z[j] * pb_xxz[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxzz[j] + pa_xxz[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_xxz[j] * pb_xz[j] * pc_xz[j] + pa_xxz[j] * pc_xx[j] * pb_zz[j] + 2.0 * pa_xx[j] * pc_zz[j] * pb_xxz[j] + 2.0 * pa_xx[j] * pc_xz[j] * pb_xzz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xxz[j] + 4.0 * pa_xz[j] * pc_xx[j] * pb_xzz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xxzz[j] + pc_xx[j] * pa_z[j] * pb_xxzz[j]);

                t_xxz_xxzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 9.0 * pa_x[j] * pc_xz[j] * fl2_fx - 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pc_xx[j] * pa_z[j] * fl2_fx - 4.5 * pc_xxz[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_z[j] - 9.0 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 3.0 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.5 * pa_xxz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xxz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xx[j] * pc_xz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx - pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] - pa_xx[j] * fl1_fx * pc_xx[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_xx[j] * pb_x[j] * fl1_fx - pa_xz[j] * pc_xxx[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx - 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 2.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] - 4.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_xz[j] - 2.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] - 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] - 4.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] - 0.5 * pc_xx[j] * pa_z[j] * pb_xx[j] * fl1_fx - pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxz[j] * pb_xx[j] * fl1_fx - 3.0 * pc_xxz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xxx[j] * fl1_fx * pb_xz[j] - pc_xx[j] * fl1_fx * pb_xxz[j] - 3.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] - 6.0 * pc_xzz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_zz[j] - fl1_fx * pc_zz[j] * pb_xxz[j] - 2.0 * pa_xxz[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_xxz[j] * pc_xxz[j] * pb_z[j] - pa_xx[j] * pc_zzz[j] * pb_xx[j] - 4.0 * pa_xx[j] * pc_xzz[j] * pb_xz[j] - pa_xx[j] * pc_xxz[j] * pb_zz[j] - 2.0 * pa_xz[j] * pc_xzz[j] * pb_xx[j] - 8.0 * pa_xz[j] * pc_xxz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xxx[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xzz[j] * pb_xxz[j] - 4.0 * pa_x[j] * pc_xxz[j] * pb_xzz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xxz[j] - 2.0 * pc_xxx[j] * pa_z[j] * pb_xzz[j] - pc_xxz[j] * pb_xxzz[j]);

                t_xxz_xxzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 4.5 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 9.0 * pc_xxz[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_z[j] + 4.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx + pa_xz[j] * pc_xxx[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxxz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * pc_xxx[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] + pc_xxx[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xxxz[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_zz[j] + pc_xxxx[j] * fl1_fx * pb_z[j] + 2.0 * pc_xxx[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xzzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] + 6.0 * pc_xzz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + pa_xxz[j] * pc_xxzz[j] + 2.0 * pa_xx[j] * pc_xzzz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xxzz[j] * pb_z[j] + 4.0 * pa_xz[j] * pc_xxzz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxxz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_xx[j] + 8.0 * pa_x[j] * pc_xxzz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxxz[j] * pb_zz[j] + pc_xxzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxxz[j] * pa_z[j] * pb_xz[j] + pc_xxxx[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xxzz[j] * pb_xxz[j] + 2.0 * pc_xxxz[j] * pb_xzz[j]);

                t_xxz_xxzz[j] += fl_s_0_0_5 * (-4.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 3.0 * pa_x[j] * pc_xxxz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xzzz[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxxz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxxz[j] * fl1_fx - 3.0 * pc_xxzzz[j] * fl1_fx - 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - pc_xxxx[j] * fl1_fx * pb_z[j] - 3.0 * pc_xzzz[j] * fl1_fx * pb_x[j] - pa_xx[j] * pc_xxzzz[j] - 2.0 * pa_xz[j] * pc_xxxzz[j] - 4.0 * pa_x[j] * pc_xxzzz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxxzz[j] * pb_z[j] - 2.0 * pc_xxxzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_z[j] * pb_z[j] - pc_xxzzz[j] * pb_xx[j] - 4.0 * pc_xxxzz[j] * pb_xz[j] - pc_xxxxz[j] * pb_zz[j]);

                t_xxz_xxzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pc_xxzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxxzzz[j] + pc_xxxxzz[j] * pa_z[j] + 2.0 * pc_xxxzzz[j] * pb_x[j] + 2.0 * pc_xxxxzz[j] * pb_z[j]);

                t_xxz_xxzz[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_36_39(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (36,39)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xz = paDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxz_xyyy = primBuffer.data(150 * idx + 36);

            auto t_xxz_xyyz = primBuffer.data(150 * idx + 37);

            auto t_xxz_xyzz = primBuffer.data(150 * idx + 38);

            // Batch of Integrals (36,39)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xz, pa_z, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, \
                                     pb_xyz, pb_xyzz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyz, pc_xxxyyz, \
                                     pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, \
                                     pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyyzz, \
                                     pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, \
                                     pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xxz_xyyy, t_xxz_xyyz, \
                                     t_xxz_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxz_xyyy[j] = fl_s_0_0_0 * (1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_xxz[j] * pb_xy[j] * fl1_fx + pa_xz[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyyy[j] + pa_xxz[j] * pb_xyyy[j]);

                t_xxz_xyyy[j] += fl_s_0_0_1 * (-3.0 * pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_xxz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xxz[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_z[j] * pb_xy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_x[j] * pb_xy[j] * fl1_fx - 3.0 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] - pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] - pa_xz[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] - 1.5 * fl1_fx * pa_z[j] * pb_xyy[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_xyyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyyy[j] - 3.0 * pa_xxz[j] * pb_xyy[j] * pc_y[j] - pa_xxz[j] * pc_x[j] * pb_yyy[j] - pa_xx[j] * pc_z[j] * pb_xyyy[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xyyy[j]);

                t_xxz_xyyy[j] += fl_s_0_0_2 * (3.0 * pa_xz[j] * fl2_fx * pc_y[j] + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_xy[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_xxz[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xz[j] * pc_x[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] + 3.0 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] + pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] + 1.5 * pc_xx[j] * pa_z[j] * pb_xy[j] * fl1_fx + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_yy[j] + 1.5 * fl1_fx * pc_yz[j] * pb_xyy[j] + 1.5 * fl1_fx * pa_z[j] * pb_xyy[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_xyyy[j] + 3.0 * pa_xxz[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_xxz[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_xx[j] * pc_yz[j] * pb_xyy[j] + pa_xx[j] * pc_xz[j] * pb_yyy[j] + 6.0 * pa_xz[j] * pc_xy[j] * pb_xyy[j] + 2.0 * pa_xz[j] * pc_xx[j] * pb_yyy[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xyyy[j] + pc_xx[j] * pa_z[j] * pb_xyyy[j]);

                t_xxz_xyyy[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xz[j] * pb_xy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx - pa_xz[j] * fl1_fx * pc_yyy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] - 3.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 3.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yy[j] - 1.5 * pc_xx[j] * pa_z[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxz[j] * pb_xy[j] * fl1_fx - 4.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_yyy[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_xy[j] - 1.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_yy[j] - 1.5 * fl1_fx * pc_yz[j] * pb_xyy[j] - pa_xxz[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_xxz[j] * pc_xyy[j] * pb_y[j] - 3.0 * pa_xx[j] * pc_yyz[j] * pb_xy[j] - 3.0 * pa_xx[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_xyy[j] * pb_xy[j] - 6.0 * pa_xz[j] * pc_xxy[j] * pb_yy[j] - 6.0 * pa_x[j] * pc_xyz[j] * pb_xyy[j] - 2.0 * pa_x[j] * pc_xxz[j] * pb_yyy[j] - 3.0 * pc_xxy[j] * pa_z[j] * pb_xyy[j] - pc_xxx[j] * pa_z[j] * pb_yyy[j] - pc_xxz[j] * pb_xyyy[j]);

                t_xxz_xyyy[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + pa_x[j] * fl1_fx * pc_yyyz[j] + pa_xz[j] * fl1_fx * pc_yyy[j] + 3.0 * pa_x[j] * fl1_fx * pc_yyz[j] * pb_y[j] + 1.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyyy[j] * fl1_fx * pa_z[j] + 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_y[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] + 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_yyy[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_xy[j] + pa_xxz[j] * pc_xyyy[j] + pa_xx[j] * pc_yyyz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyy[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xxyy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_xyyz[j] * pb_xy[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_xy[j] + 3.0 * pc_xxxy[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_xxyz[j] * pb_xyy[j] + pc_xxxz[j] * pb_yyy[j]);

                t_xxz_xyyy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyyz[j] - 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pa_z[j] - 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_x[j] - pa_xx[j] * pc_xyyyz[j] - 2.0 * pa_xz[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - pc_xxyyy[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxxyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxyyz[j] * pb_xy[j] - 3.0 * pc_xxxyz[j] * pb_yy[j]);

                t_xxz_xyyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyyz[j] + pc_xxxyyy[j] * pa_z[j] + pc_xxyyyz[j] * pb_x[j] + 3.0 * pc_xxxyyz[j] * pb_y[j]);

                t_xxz_xyyy[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];

                t_xxz_xyyz[j] = fl_s_0_0_0 * (0.25 * pa_x[j] * fl3_fx + 0.125 * fl3_fx * pb_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + 0.5 * pa_xz[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_yy[j] + 0.25 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_xxz[j] * pb_xz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pb_xyy[j] + pa_xz[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyyz[j] + pa_xxz[j] * pb_xyyz[j]);

                t_xxz_xyyz[j] += fl_s_0_0_1 * (-0.75 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.375 * fl3_fx * pb_x[j] - 0.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 0.5 * pa_xz[j] * fl2_fx * pc_z[j] - pa_xz[j] * fl2_fx * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.25 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.5 * fl2_fx * pb_xyy[j] - 0.5 * pa_xxz[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_xxz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * pc_z[j] * pb_xz[j] * fl1_fx - pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_xx[j] * fl1_fx * pb_xyy[j] - pa_xz[j] * pc_x[j] * pb_xz[j] * fl1_fx - pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] - pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] - 2.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] - pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] - pa_xz[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyy[j] * pc_z[j] - fl1_fx * pa_z[j] * pb_xyz[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_xyyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyyz[j] - pa_xxz[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_xxz[j] * pb_xyz[j] * pc_y[j] - pa_xxz[j] * pc_x[j] * pb_yyz[j] - pa_xx[j] * pc_z[j] * pb_xyyz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xyyz[j]);

                t_xxz_xyyz[j] += fl_s_0_0_2 * (0.75 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.375 * fl3_fx * pb_x[j] + 0.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.25 * pa_xx[j] * fl2_fx * pb_x[j] + pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + pa_xz[j] * fl2_fx * pc_z[j] + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 2.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.5 * pa_xz[j] * fl2_fx * pb_z[j] + 0.5 * pa_x[j] * fl2_fx * pb_yy[j] + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 0.25 * fl2_fx * pc_zz[j] * pb_x[j] + 0.5 * fl2_fx * pc_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_x[j] * pc_yy[j] + fl2_fx * pb_xy[j] * pc_y[j] + 0.25 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_xxz[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_xxz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_x[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx + 0.5 * pa_xx[j] * pc_z[j] * pb_xz[j] * fl1_fx + 0.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] + pa_xx[j] * fl1_fx * pc_xy[j] * pb_y[j] + pa_xx[j] * fl1_fx * pb_xy[j] * pc_y[j] + 0.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_yy[j] + pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_xz[j] * pc_x[j] * pb_xz[j] * fl1_fx + pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xz[j] * pb_xz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_xyy[j] + 2.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yz[j] + pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] + pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] + 2.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] + pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] + 0.5 * pc_xx[j] * pa_z[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xx[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] + fl1_fx * pa_z[j] * pb_xy[j] * pc_yz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_yy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] + fl1_fx * pc_yz[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyy[j] * pc_z[j] + fl1_fx * pa_z[j] * pb_xyz[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_xyyz[j] + 2.0 * pa_xxz[j] * pb_xy[j] * pc_yz[j] + pa_xxz[j] * pb_xz[j] * pc_yy[j] + pa_xxz[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_xxz[j] * pc_xy[j] * pb_yz[j] + pa_xx[j] * pc_zz[j] * pb_xyy[j] + 2.0 * pa_xx[j] * pc_yz[j] * pb_xyz[j] + pa_xx[j] * pc_xz[j] * pb_yyz[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_xyy[j] + 4.0 * pa_xz[j] * pc_xy[j] * pb_xyz[j] + 2.0 * pa_xz[j] * pc_xx[j] * pb_yyz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xyyz[j] + pc_xx[j] * pa_z[j] * pb_xyyz[j]);

                t_xxz_xyyz[j] += fl_s_0_0_3 * (-0.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.125 * fl3_fx * pb_x[j] - 0.25 * pa_xx[j] * fl2_fx * pc_x[j] - pa_x[j] * pc_xx[j] * fl2_fx - 0.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - pa_x[j] * fl2_fx * pc_zz[j] - pa_x[j] * fl2_fx * pc_yy[j] - 0.5 * pa_xz[j] * fl2_fx * pc_z[j] - 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 0.5 * pc_xx[j] * fl2_fx * pb_x[j] - 0.25 * pc_xxx[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.5 * fl2_fx * pb_x[j] * pc_yy[j] - 0.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xxz[j] * pc_xz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xzz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_xz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_xyy[j] - 0.5 * pa_xx[j] * fl1_fx * pb_x[j] * pc_yy[j] - pa_xx[j] * fl1_fx * pc_xy[j] * pb_y[j] - pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - pa_xz[j] * pc_xxz[j] * fl1_fx - pa_xz[j] * pc_xx[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_xz[j] * pb_xz[j] * fl1_fx - pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - pa_x[j] * pc_xx[j] * fl1_fx * pb_yy[j] - pa_xz[j] * fl1_fx * pc_yyz[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] - 2.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yz[j] - pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 2.0 * pa_x[j] * fl1_fx * pc_yz[j] * pb_yz[j] - 0.5 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 0.5 * pc_xx[j] * pa_z[j] * pb_xz[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxz[j] * pb_xz[j] * fl1_fx - pc_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_xyy[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_yyz[j] - fl1_fx * pc_yzz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_xz[j] - fl1_fx * pa_z[j] * pb_xy[j] * pc_yz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_yy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] - fl1_fx * pc_yz[j] * pb_xyz[j] - pa_xxz[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_xxz[j] * pc_xyz[j] * pb_y[j] - pa_xxz[j] * pc_xyy[j] * pb_z[j] - 2.0 * pa_xx[j] * pc_yzz[j] * pb_xy[j] - pa_xx[j] * pc_yyz[j] * pb_xz[j] - pa_xx[j] * pc_xzz[j] * pb_yy[j] - 2.0 * pa_xx[j] * pc_xyz[j] * pb_yz[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xxz[j] * pb_yy[j] - 4.0 * pa_xz[j] * pc_xxy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xyy[j] - 4.0 * pa_x[j] * pc_xyz[j] * pb_xyz[j] - 2.0 * pa_x[j] * pc_xxz[j] * pb_yyz[j] - pc_xxz[j] * pa_z[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_z[j] * pb_xyz[j] - pc_xxx[j] * pa_z[j] * pb_yyz[j] - pc_xxz[j] * pb_xyyz[j]);

                t_xxz_xyyz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.5 * pa_x[j] * pc_xx[j] * fl2_fx + 0.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pa_x[j] * fl2_fx * pc_yy[j] + 0.5 * pc_xxx[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pc_zz[j] * pb_x[j] + 0.25 * fl2_fx * pb_x[j] * pc_yy[j] + 0.5 * pa_xx[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_xyy[j] + pa_xz[j] * pc_xxz[j] * fl1_fx + pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + pa_x[j] * pc_xxzz[j] * fl1_fx + pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_yyzz[j] + pa_xz[j] * fl1_fx * pc_yyz[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_yyz[j] * pb_z[j] + 0.5 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxz[j] * pa_z[j] * fl1_fx + 0.5 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxz[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_x[j] + pc_xxxy[j] * fl1_fx * pb_y[j] + pc_xxy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xyyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_yyz[j] + fl1_fx * pc_yzz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_xz[j] + pa_xxz[j] * pc_xyyz[j] + pa_xx[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_y[j] + pa_xx[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xxyy[j] * pb_z[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xxzz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_xxyz[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_xy[j] + pc_xxyy[j] * pa_z[j] * pb_xz[j] + pc_xxxz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xxxy[j] * pa_z[j] * pb_yz[j] + pc_xxzz[j] * pb_xyy[j] + 2.0 * pc_xxyz[j] * pb_xyz[j] + pc_xxxz[j] * pb_yyz[j]);

                t_xxz_xyyz[j] += fl_s_0_0_5 * (-0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - pa_x[j] * pc_xxzz[j] * fl1_fx - pa_x[j] * pc_xxyy[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yyzz[j] - 0.5 * pc_xxxz[j] * pa_z[j] * fl1_fx - 0.5 * pc_xxzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxyy[j] * fl1_fx - 0.5 * pc_xxyy[j] * fl1_fx * pb_x[j] - pc_xxxy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_x[j] - pa_xx[j] * pc_xyyzz[j] - 2.0 * pa_xz[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxyyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_y[j] - pc_xxxyy[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xxyzz[j] * pb_xy[j] - pc_xxyyz[j] * pb_xz[j] - pc_xxxzz[j] * pb_yy[j] - 2.0 * pc_xxxyz[j] * pb_yz[j]);

                t_xxz_xyyz[j] += fl_s_0_0_6 * (0.5 * pc_xxxzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyyzz[j] + pc_xxxyyz[j] * pa_z[j] + pc_xxyyzz[j] * pb_x[j] + 2.0 * pc_xxxyzz[j] * pb_y[j] + pc_xxxyyz[j] * pb_z[j]);

                t_xxz_xyyz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];

                t_xxz_xyzz[j] = fl_s_0_0_0 * (0.5 * pa_xz[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xxz[j] * pb_xy[j] * fl1_fx + pa_xx[j] * fl1_fx * pb_xyz[j] + pa_xz[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyzz[j] + pa_xxz[j] * pb_xyzz[j]);

                t_xxz_xyzz[j] += fl_s_0_0_1 * (-pa_xz[j] * fl2_fx * pb_y[j] - 0.5 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 2.0 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pa_z[j] * pb_xy[j] - 0.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * fl2_fx * pb_xz[j] * pc_y[j] - fl2_fx * pb_xyz[j] - 0.5 * pa_xxz[j] * pb_xy[j] * fl1_fx - 0.5 * pa_xxz[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_z[j] * pb_xy[j] * fl1_fx - pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] - pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] - pa_xx[j] * fl1_fx * pb_xyz[j] - pa_xz[j] * pc_x[j] * pb_xy[j] * fl1_fx - 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] - 2.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] - pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] - pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] - pa_xz[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] - fl1_fx * pa_z[j] * pb_xyz[j] * pc_z[j] - 0.5 * fl1_fx * pa_z[j] * pb_xzz[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_xyzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyzz[j] - 2.0 * pa_xxz[j] * pb_xyz[j] * pc_z[j] - pa_xxz[j] * pb_xzz[j] * pc_y[j] - pa_xxz[j] * pc_x[j] * pb_yzz[j] - pa_xx[j] * pc_z[j] * pb_xyzz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xyzz[j]);

                t_xxz_xyzz[j] += fl_s_0_0_2 * (pa_xz[j] * fl2_fx * pc_y[j] + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 2.0 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.5 * pa_xz[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pc_x[j] * fl2_fx * pb_yz[j] + 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_xy[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + fl2_fx * pb_xz[j] * pc_y[j] + 0.25 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xxz[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx + pa_xx[j] * fl1_fx * pc_xy[j] * pb_z[j] + pa_xx[j] * fl1_fx * pb_xz[j] * pc_y[j] + pa_xx[j] * fl1_fx * pc_x[j] * pb_yz[j] + pa_xz[j] * pc_x[j] * pb_xy[j] * fl1_fx + pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xz[j] * pb_xy[j] * fl1_fx + 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] + 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xyz[j] + pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] + 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] + pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] + pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] + pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] + 0.5 * pc_xx[j] * pa_z[j] * pb_xy[j] * fl1_fx + pc_xx[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_zz[j] + fl1_fx * pa_z[j] * pb_xz[j] * pc_yz[j] + fl1_fx * pc_zz[j] * pb_xyz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_xzz[j] + fl1_fx * pa_z[j] * pb_xyz[j] * pc_z[j] + 0.5 * fl1_fx * pa_z[j] * pb_xzz[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_xyzz[j] + pa_xxz[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_xxz[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_xxz[j] * pc_xz[j] * pb_yz[j] + pa_xxz[j] * pc_xy[j] * pb_zz[j] + 2.0 * pa_xx[j] * pc_zz[j] * pb_xyz[j] + pa_xx[j] * pc_yz[j] * pb_xzz[j] + pa_xx[j] * pc_xz[j] * pb_yzz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xyz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xzz[j] + 2.0 * pa_xz[j] * pc_xx[j] * pb_yzz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xyzz[j] + pc_xx[j] * pa_z[j] * pb_xyzz[j]);

                t_xxz_xyzz[j] += fl_s_0_0_3 * (-3.0 * pa_x[j] * fl2_fx * pc_yz[j] - 0.5 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_x[j] - 0.25 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * fl2_fx * pb_xz[j] * pc_y[j] - 0.5 * pa_xxz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx - pa_xx[j] * fl1_fx * pc_xy[j] * pb_z[j] - pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - pa_xz[j] * pc_xx[j] * pb_y[j] * fl1_fx - pa_xz[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xz[j] * pb_xy[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx - 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 2.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_yz[j] - pa_xz[j] * fl1_fx * pc_yzz[j] - pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] - pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yz[j] * pb_z[j] - 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] - pa_x[j] * fl1_fx * pc_yz[j] * pb_zz[j] - 0.5 * pc_xx[j] * pa_z[j] * pb_xy[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxz[j] * pb_xy[j] * fl1_fx - pc_xxy[j] * fl1_fx * pb_xz[j] - pc_xxx[j] * fl1_fx * pb_yz[j] - pc_xx[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_yzz[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] - fl1_fx * pc_yzz[j] * pb_xz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_zz[j] - fl1_fx * pa_z[j] * pb_xz[j] * pc_yz[j] - fl1_fx * pc_zz[j] * pb_xyz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_xzz[j] - pa_xxz[j] * pb_x[j] * pc_yzz[j] - pa_xxz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xxz[j] * pc_xyz[j] * pb_z[j] - pa_xx[j] * pc_zzz[j] * pb_xy[j] - 2.0 * pa_xx[j] * pc_yzz[j] * pb_xz[j] - 2.0 * pa_xx[j] * pc_xzz[j] * pb_yz[j] - pa_xx[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_xz[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xz[j] - 4.0 * pa_xz[j] * pc_xxz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_xxy[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xzz[j] * pb_xyz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xzz[j] - 2.0 * pa_x[j] * pc_xxz[j] * pb_yzz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_xyz[j] - pc_xxy[j] * pa_z[j] * pb_xzz[j] - pc_xxx[j] * pa_z[j] * pb_yzz[j] - pc_xxz[j] * pb_xyzz[j]);

                t_xxz_xyzz[j] += fl_s_0_0_4 * (1.5 * pa_x[j] * fl2_fx * pc_yz[j] + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xx[j] * pc_xyz[j] * fl1_fx + pa_xz[j] * pc_xxy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + pa_x[j] * fl1_fx * pc_yzzz[j] + pa_xz[j] * fl1_fx * pc_yzz[j] + pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_yzz[j] * pb_z[j] + 0.5 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxx[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx + pc_xxxy[j] * fl1_fx * pb_z[j] + pc_xxy[j] * fl1_fx * pb_xz[j] + pc_xxx[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_yzz[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] + fl1_fx * pc_yzz[j] * pb_xz[j] + pa_xxz[j] * pc_xyzz[j] + pa_xx[j] * pc_yzzz[j] * pb_x[j] + pa_xx[j] * pc_xzzz[j] * pb_y[j] + 2.0 * pa_xx[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_xy[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_xz[j] + 4.0 * pa_x[j] * pc_xxzz[j] * pb_yz[j] + 2.0 * pa_x[j] * pc_xxyz[j] * pb_zz[j] + pc_xxzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_yz[j] + pc_xxxy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xxzz[j] * pb_xyz[j] + pc_xxyz[j] * pb_xzz[j] + pc_xxxz[j] * pb_yzz[j]);

                t_xxz_xyzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_yzzz[j] - 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - pc_xxxy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_x[j] - pa_xx[j] * pc_xyzzz[j] - 2.0 * pa_xz[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxzzz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - pc_xxyzz[j] * pa_z[j] * pb_x[j] - pc_xxxzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - pc_xxzzz[j] * pb_xy[j] - 2.0 * pc_xxyzz[j] * pb_xz[j] - 2.0 * pc_xxxzz[j] * pb_yz[j] - pc_xxxyz[j] * pb_zz[j]);

                t_xxz_xyzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxyzzz[j] + pc_xxxyzz[j] * pa_z[j] + pc_xxyzzz[j] * pb_x[j] + pc_xxxzzz[j] * pb_y[j] + 2.0 * pc_xxxyzz[j] * pb_z[j]);

                t_xxz_xyzz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_39_42(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (39,42)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xz = paDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxz_xzzz = primBuffer.data(150 * idx + 39);

            auto t_xxz_yyyy = primBuffer.data(150 * idx + 40);

            auto t_xxz_yyyz = primBuffer.data(150 * idx + 41);

            // Batch of Integrals (39,42)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xz, pa_z, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, \
                                     pb_yyy, pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xx, pc_xxx, \
                                     pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxxzzzz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, \
                                     pc_xxyyyyz, pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyz, \
                                     pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, \
                                     pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xxz_xzzz, t_xxz_yyyy, t_xxz_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxz_xzzz[j] = fl_s_0_0_0 * (0.75 * pa_x[j] * fl3_fx + 0.375 * fl3_fx * pb_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 1.5 * pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.75 * fl2_fx * pb_xzz[j] + 1.5 * pa_xxz[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_xzz[j] + pa_xz[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xzzz[j] + pa_xxz[j] * pb_xzzz[j]);

                t_xxz_xzzz[j] += fl_s_0_0_1 * (-2.25 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.125 * fl3_fx * pb_x[j] - 1.5 * pa_xx[j] * fl2_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 3.0 * pa_xz[j] * fl2_fx * pb_z[j] - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 3.0 * pa_x[j] * fl2_fx * pb_zz[j] - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * fl2_fx * pb_xzz[j] - 1.5 * pa_xxz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xxz[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_x[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_z[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_xx[j] * fl1_fx * pb_xzz[j] - 3.0 * pa_xz[j] * pc_x[j] * pb_xz[j] * fl1_fx - 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] - 3.0 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] - pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] - pa_xz[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] - 1.5 * fl1_fx * pa_z[j] * pb_xzz[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_xzzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xzzz[j] - 3.0 * pa_xxz[j] * pb_xzz[j] * pc_z[j] - pa_xxz[j] * pc_x[j] * pb_zzz[j] - pa_xx[j] * pc_z[j] * pb_xzzz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_xzzz[j]);

                t_xxz_xzzz[j] += fl_s_0_0_2 * (2.25 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_xx[j] * fl2_fx * pc_x[j] + 0.75 * pa_xx[j] * fl2_fx * pb_x[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_xz[j] * fl2_fx * pc_z[j] + 9.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 3.0 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_zz[j] + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pa_z[j] + 6.75 * pc_xz[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * fl2_fx * pb_zz[j] + 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_xz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.75 * fl2_fx * pb_xzz[j] + 1.5 * pa_xxz[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_xz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_z[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx + 4.5 * pa_xx[j] * pc_xz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_x[j] * pb_zz[j] + 3.0 * pa_xz[j] * pc_x[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xx[j] * pb_z[j] * fl1_fx + 9.0 * pa_x[j] * pc_xz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] + 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_xzz[j] + 3.0 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] + 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 3.0 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] + pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] + 1.5 * pc_xx[j] * pa_z[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xx[j] * fl1_fx * pb_xzz[j] + 4.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_zz[j] + 1.5 * fl1_fx * pc_zz[j] * pb_xzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_xzz[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_xzzz[j] + 3.0 * pa_xxz[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_xxz[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_zz[j] * pb_xzz[j] + pa_xx[j] * pc_xz[j] * pb_zzz[j] + 6.0 * pa_xz[j] * pc_xz[j] * pb_xzz[j] + 2.0 * pa_xz[j] * pc_xx[j] * pb_zzz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_xzzz[j] + pc_xx[j] * pa_z[j] * pb_xzzz[j]);

                t_xxz_xzzz[j] += fl_s_0_0_3 * (-0.75 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_xx[j] * fl2_fx * pc_x[j] - 3.0 * pa_x[j] * pc_xx[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_x[j] - 6.0 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_xz[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xz[j] * fl2_fx * pa_z[j] - 13.5 * pc_xz[j] * fl2_fx * pb_z[j] - 4.5 * pc_xzz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_x[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * pa_xxz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_zz[j] * pb_x[j] * fl1_fx - 4.5 * pa_xx[j] * pc_xz[j] * pb_z[j] * fl1_fx - 3.0 * pa_xx[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xx[j] * pb_z[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_x[j] * pc_xz[j] * pb_xz[j] * fl1_fx - 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xxz[j] * pb_z[j] * fl1_fx - 3.0 * pa_x[j] * pc_xx[j] * fl1_fx * pb_zz[j] - pa_xz[j] * fl1_fx * pc_zzz[j] - 3.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] - 3.0 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] - 3.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 1.5 * pc_xx[j] * pa_z[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxx[j] * pa_z[j] * pb_z[j] * fl1_fx - 4.5 * pc_xxz[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xx[j] * fl1_fx * pb_xzz[j] - 4.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 4.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_zzz[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_xz[j] - 1.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_zz[j] - 1.5 * fl1_fx * pc_zz[j] * pb_xzz[j] - pa_xxz[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_xxz[j] * pc_xzz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_zzz[j] * pb_xz[j] - 3.0 * pa_xx[j] * pc_xzz[j] * pb_zz[j] - 6.0 * pa_xz[j] * pc_xzz[j] * pb_xz[j] - 6.0 * pa_xz[j] * pc_xxz[j] * pb_zz[j] - 6.0 * pa_x[j] * pc_xzz[j] * pb_xzz[j] - 2.0 * pa_x[j] * pc_xxz[j] * pb_zzz[j] - 3.0 * pc_xxz[j] * pa_z[j] * pb_xzz[j] - pc_xxx[j] * pa_z[j] * pb_zzz[j] - pc_xxz[j] * pb_xzzz[j]);

                t_xxz_xzzz[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_xx[j] * fl2_fx + 3.0 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xxx[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_x[j] + 9.0 * pc_xzz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pa_z[j] + 6.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 9.0 * pa_x[j] * pc_xxz[j] * pb_z[j] * fl1_fx + 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + pa_x[j] * fl1_fx * pc_zzzz[j] + pa_xz[j] * fl1_fx * pc_zzz[j] + 3.0 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 1.5 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxxz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xxz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xxzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xxxz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xzzz[j] * fl1_fx * pa_z[j] + 4.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 4.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_zzz[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_xz[j] + pa_xxz[j] * pc_xzzz[j] + pa_xx[j] * pc_zzzz[j] * pb_x[j] + 3.0 * pa_xx[j] * pc_xzzz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xzzz[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xxzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xzzz[j] * pb_xz[j] + 6.0 * pa_x[j] * pc_xxzz[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pa_z[j] * pb_xz[j] + 3.0 * pc_xxxz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pb_xzz[j] + pc_xxxz[j] * pb_zzz[j]);

                t_xxz_xzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxx[j] * fl2_fx - 4.5 * pc_xzz[j] * fl2_fx - 6.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - pa_x[j] * fl1_fx * pc_zzzz[j] - 1.5 * pc_xxxz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxzz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxxz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxxzz[j] * fl1_fx - 1.5 * pc_xzzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pa_z[j] - 4.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] - pa_xx[j] * pc_xzzzz[j] - 2.0 * pa_xz[j] * pc_xxzzz[j] - 2.0 * pa_x[j] * pc_xzzzz[j] * pb_x[j] - 6.0 * pa_x[j] * pc_xxzzz[j] * pb_z[j] - pc_xxzzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxxzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxzzz[j] * pb_xz[j] - 3.0 * pc_xxxzz[j] * pb_zz[j]);

                t_xxz_xzzz[j] += fl_s_0_0_6 * (3.0 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xzzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xxzzzz[j] + pc_xxxzzz[j] * pa_z[j] + pc_xxzzzz[j] * pb_x[j] + 3.0 * pc_xxxzzz[j] * pb_z[j]);

                t_xxz_xzzz[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];

                t_xxz_yyyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 1.5 * fl2_fx * pa_z[j] * pb_yy[j] + 3.0 * pa_xxz[j] * pb_yy[j] * fl1_fx + 0.5 * fl1_fx * pa_z[j] * pb_yyyy[j] + pa_xxz[j] * pb_yyyy[j]);

                t_xxz_yyyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pb_yy[j] - 3.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_yy[j] - 3.0 * pa_xxz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_xxz[j] * pb_y[j] * pc_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_z[j] * pb_yy[j] * fl1_fx - 6.0 * pa_xz[j] * pc_x[j] * pb_yy[j] * fl1_fx - 2.0 * fl1_fx * pa_z[j] * pb_yyy[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_yyyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyyy[j] - 4.0 * pa_xxz[j] * pb_yyy[j] * pc_y[j] - pa_xx[j] * pc_z[j] * pb_yyyy[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_yyyy[j]);

                t_xxz_yyyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * pc_z[j] * fl2_fx + 3.0 * pa_xz[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.75 * pc_xx[j] * pa_z[j] * fl2_fx + 6.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_yy[j] + 3.0 * fl2_fx * pc_z[j] * pb_yy[j] + 3.0 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pb_yy[j] + 6.0 * pa_xxz[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_yy[j] * fl1_fx + 3.0 * pa_xx[j] * pc_z[j] * pb_yy[j] * fl1_fx + 6.0 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx + 6.0 * pa_xz[j] * pc_x[j] * pb_yy[j] * fl1_fx + 12.0 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 6.0 * pa_x[j] * pc_xz[j] * pb_yy[j] * fl1_fx + 3.0 * pc_xx[j] * pa_z[j] * pb_yy[j] * fl1_fx + 3.0 * fl1_fx * pa_z[j] * pb_yy[j] * pc_yy[j] + 2.0 * fl1_fx * pc_yz[j] * pb_yyy[j] + 2.0 * fl1_fx * pa_z[j] * pb_yyy[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_yyyy[j] + 6.0 * pa_xxz[j] * pb_yy[j] * pc_yy[j] + 4.0 * pa_xx[j] * pc_yz[j] * pb_yyy[j] + 8.0 * pa_xz[j] * pc_xy[j] * pb_yyy[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_yyyy[j] + pc_xx[j] * pa_z[j] * pb_yyyy[j]);

                t_xxz_yyyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - 1.5 * pc_xx[j] * pa_z[j] * fl2_fx - 0.75 * pc_xxz[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pc_yy[j] - 6.0 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_yy[j] - 3.0 * pa_xxz[j] * pc_yy[j] * fl1_fx - 6.0 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx - 12.0 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xyy[j] * fl1_fx - 6.0 * pa_x[j] * pc_xz[j] * pb_yy[j] * fl1_fx - 12.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xx[j] * pa_z[j] * pb_yy[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxz[j] * pb_yy[j] * fl1_fx - 2.0 * fl1_fx * pa_z[j] * pb_y[j] * pc_yyy[j] - 3.0 * fl1_fx * pc_yyz[j] * pb_yy[j] - 3.0 * fl1_fx * pa_z[j] * pb_yy[j] * pc_yy[j] - 2.0 * fl1_fx * pc_yz[j] * pb_yyy[j] - 4.0 * pa_xxz[j] * pb_y[j] * pc_yyy[j] - 6.0 * pa_xx[j] * pc_yyz[j] * pb_yy[j] - 12.0 * pa_xz[j] * pc_xyy[j] * pb_yy[j] - 8.0 * pa_x[j] * pc_xyz[j] * pb_yyy[j] - 4.0 * pc_xxy[j] * pa_z[j] * pb_yyy[j] - pc_xxz[j] * pb_yyyy[j]);

                t_xxz_yyyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.75 * pc_xx[j] * pa_z[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 3.0 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_z[j] * pc_yy[j] + 3.0 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xyy[j] * fl1_fx + 12.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxz[j] * pb_yy[j] * fl1_fx + 6.0 * pc_xxyz[j] * pb_y[j] * fl1_fx + 0.5 * fl1_fx * pa_z[j] * pc_yyyy[j] + 2.0 * fl1_fx * pc_yyyz[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pb_y[j] * pc_yyy[j] + 3.0 * fl1_fx * pc_yyz[j] * pb_yy[j] + pa_xxz[j] * pc_yyyy[j] + 4.0 * pa_xx[j] * pc_yyyz[j] * pb_y[j] + 8.0 * pa_xz[j] * pc_xyyy[j] * pb_y[j] + 12.0 * pa_x[j] * pc_xyyz[j] * pb_yy[j] + 6.0 * pc_xxyy[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xxyz[j] * pb_yyy[j]);

                t_xxz_yyyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pc_yyz[j] - 6.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 6.0 * pc_xxyz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyyz[j] - 0.5 * fl1_fx * pa_z[j] * pc_yyyy[j] - 2.0 * fl1_fx * pc_yyyz[j] * pb_y[j] - pa_xx[j] * pc_yyyyz[j] - 2.0 * pa_xz[j] * pc_xyyyy[j] - 8.0 * pa_x[j] * pc_xyyyz[j] * pb_y[j] - 4.0 * pc_xxyyy[j] * pa_z[j] * pb_y[j] - 6.0 * pc_xxyyz[j] * pb_yy[j]);

                t_xxz_yyyy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + 2.0 * pa_x[j] * pc_xyyyyz[j] + pc_xxyyyy[j] * pa_z[j] + 4.0 * pc_xxyyyz[j] * pb_y[j]);

                t_xxz_yyyy[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];

                t_xxz_yyyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_xxz[j] * pb_yz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_z[j] * pb_yyyz[j] + pa_xxz[j] * pb_yyyz[j]);

                t_xxz_yyyz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xx[j] * fl2_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 0.75 * fl2_fx * pb_yy[j] * pc_y[j] - 0.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_xxz[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_xxz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_z[j] - 1.5 * pa_xx[j] * pc_z[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] - 0.5 * pa_xx[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_xz[j] * pc_x[j] * pb_yz[j] * fl1_fx - pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyy[j] * pc_z[j] - 1.5 * fl1_fx * pa_z[j] * pb_yyz[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_yyyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyyz[j] - pa_xxz[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_xxz[j] * pb_yyz[j] * pc_y[j] - pa_xx[j] * pc_z[j] * pb_yyyz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_yyyz[j]);

                t_xxz_yyyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 1.5 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yz[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.75 * fl2_fx * pb_y[j] * pc_yy[j] + 1.5 * fl2_fx * pb_yy[j] * pc_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_xxz[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_y[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xx[j] * pc_z[j] * pb_yz[j] * fl1_fx + 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] + 1.5 * pa_xx[j] * fl1_fx * pb_yy[j] * pc_y[j] + 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xz[j] * pc_x[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xz[j] * pb_yz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + pa_x[j] * pc_x[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_xx[j] * pa_z[j] * pb_yz[j] * fl1_fx + 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] + 1.5 * fl1_fx * pa_z[j] * pb_yy[j] * pc_yz[j] + 1.5 * fl1_fx * pa_z[j] * pb_yz[j] * pc_yy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] + 1.5 * fl1_fx * pc_yz[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yyy[j] * pc_z[j] + 1.5 * fl1_fx * pa_z[j] * pb_yyz[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_yyyz[j] + 3.0 * pa_xxz[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_xxz[j] * pb_yz[j] * pc_yy[j] + pa_xx[j] * pc_zz[j] * pb_yyy[j] + 3.0 * pa_xx[j] * pc_yz[j] * pb_yyz[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_yyy[j] + 6.0 * pa_xz[j] * pc_xy[j] * pb_yyz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_yyyz[j] + pc_xx[j] * pa_z[j] * pb_yyyz[j]);

                t_xxz_yyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pa_z[j] * pc_yz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pc_yyy[j] - 1.5 * fl2_fx * pb_y[j] * pc_yy[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yz[j] - 0.75 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xx[j] * fl1_fx * pc_yyy[j] - 1.5 * pa_xx[j] * fl1_fx * pb_y[j] * pc_yy[j] - 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xz[j] * pb_yz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xx[j] * pa_z[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxz[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] - 1.5 * fl1_fx * pa_z[j] * pb_y[j] * pc_yyz[j] - 0.5 * fl1_fx * pa_z[j] * pc_yyy[j] * pb_z[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_yy[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_yz[j] - 1.5 * fl1_fx * pa_z[j] * pb_yy[j] * pc_yz[j] - 1.5 * fl1_fx * pa_z[j] * pb_yz[j] * pc_yy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] - 1.5 * fl1_fx * pc_yz[j] * pb_yyz[j] - 3.0 * pa_xxz[j] * pb_y[j] * pc_yyz[j] - pa_xxz[j] * pc_yyy[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_yzz[j] * pb_yy[j] - 3.0 * pa_xx[j] * pc_yyz[j] * pb_yz[j] - 6.0 * pa_xz[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_xyy[j] * pb_yz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_yyy[j] - 6.0 * pa_x[j] * pc_xyz[j] * pb_yyz[j] - pc_xxz[j] * pa_z[j] * pb_yyy[j] - 3.0 * pc_xxy[j] * pa_z[j] * pb_yyz[j] - pc_xxz[j] * pb_yyyz[j]);

                t_xxz_yyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.5 * fl2_fx * pc_yyy[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.75 * fl2_fx * pb_y[j] * pc_yy[j] + 1.5 * pa_xx[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_xx[j] * fl1_fx * pc_yyy[j] + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxzz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pa_z[j] * pc_yyyz[j] + 1.5 * fl1_fx * pc_yyzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] + 1.5 * fl1_fx * pa_z[j] * pb_y[j] * pc_yyz[j] + 0.5 * fl1_fx * pa_z[j] * pc_yyy[j] * pb_z[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_yy[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_yz[j] + pa_xxz[j] * pc_yyyz[j] + 3.0 * pa_xx[j] * pc_yyzz[j] * pb_y[j] + pa_xx[j] * pc_yyyz[j] * pb_z[j] + 6.0 * pa_xz[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyy[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xyzz[j] * pb_yy[j] + 6.0 * pa_x[j] * pc_xyyz[j] * pb_yz[j] + 3.0 * pc_xxyz[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_yz[j] + pc_xxzz[j] * pb_yyy[j] + 3.0 * pc_xxyz[j] * pb_yyz[j]);

                t_xxz_yyyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 0.25 * fl2_fx * pc_yyy[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - pa_x[j] * pc_xyyy[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xxzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxyyy[j] * fl1_fx - 1.5 * pc_xxyy[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_yyyz[j] - 1.5 * fl1_fx * pc_yyzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] - pa_xx[j] * pc_yyyzz[j] - 2.0 * pa_xz[j] * pc_xyyyz[j] - 6.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_z[j] - 3.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - pc_xxyyy[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pb_yy[j] - 3.0 * pc_xxyyz[j] * pb_yz[j]);

                t_xxz_yyyz[j] += fl_s_0_0_6 * (1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 2.0 * pa_x[j] * pc_xyyyzz[j] + pc_xxyyyz[j] * pa_z[j] + 3.0 * pc_xxyyzz[j] * pb_y[j] + pc_xxyyyz[j] * pb_z[j]);

                t_xxz_yyyz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_42_45(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (42,45)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xx = paDistances.data(19 * idx + 3);

            auto pa_xz = paDistances.data(19 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xxz = paDistances.data(19 * idx + 11);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            auto pc_xxzzzzz = pcDistances.data(119 * idx + 103);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xxz_yyzz = primBuffer.data(150 * idx + 42);

            auto t_xxz_yzzz = primBuffer.data(150 * idx + 43);

            auto t_xxz_zzzz = primBuffer.data(150 * idx + 44);

            // Batch of Integrals (42,45)

            #pragma omp simd aligned(fx, pa_x, pa_xx, pa_xxz, pa_xz, pa_z, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, \
                                     pb_yzzz, pb_z, pb_zz, pb_zzz, pb_zzzz, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, pc_xxz, pc_xxzz, \
                                     pc_xxzzz, pc_xxzzzz, pc_xxzzzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, \
                                     pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_y, \
                                     pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, \
                                     pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xxz_yyzz, t_xxz_yzzz, t_xxz_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xxz_yyzz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_z[j] + 0.25 * fl3_fx * pb_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * fl2_fx * pb_yyz[j] + 0.5 * pa_xxz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_xxz[j] * fl1_fx * pb_zz[j] + pa_xx[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yyzz[j] + pa_xxz[j] * pb_yyzz[j]);

                t_xxz_yyzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pb_z[j] - 0.5 * pa_xxz[j] * fl2_fx - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - pa_xx[j] * fl2_fx * pb_z[j] - 0.5 * pa_xz[j] * pc_x[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_yy[j] - 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - fl2_fx * pb_yz[j] * pc_y[j] - fl2_fx * pb_yyz[j] - 0.5 * pa_xxz[j] * pb_yy[j] * fl1_fx - pa_xxz[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xxz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xx[j] * pc_z[j] * pb_yy[j] * fl1_fx - 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_zz[j] - 2.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] - pa_xx[j] * fl1_fx * pb_yyz[j] - pa_xz[j] * pc_x[j] * pb_yy[j] * fl1_fx - pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] - 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] - fl1_fx * pa_z[j] * pb_yyz[j] * pc_z[j] - fl1_fx * pa_z[j] * pb_yzz[j] * pc_y[j] - 0.5 * fl1_fx * pc_z[j] * pb_yyzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyzz[j] - 2.0 * pa_xxz[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_xxz[j] * pb_yzz[j] * pc_y[j] - pa_xx[j] * pc_z[j] * pb_yyzz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_yyzz[j]);

                t_xxz_yyzz[j] += fl_s_0_0_2 * (0.375 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.75 * fl3_fx * pb_z[j] + 0.25 * pa_xxz[j] * fl2_fx + 1.5 * pa_xx[j] * pc_z[j] * fl2_fx + 0.5 * pa_xx[j] * fl2_fx * pb_z[j] + pa_xz[j] * pc_x[j] * fl2_fx + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 2.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 0.25 * pc_xx[j] * pa_z[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] + 0.25 * fl2_fx * pa_z[j] * pc_yy[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + 0.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + 2.0 * fl2_fx * pb_yz[j] * pc_y[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * fl2_fx * pb_yyz[j] + pa_xxz[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_xxz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xxz[j] * fl1_fx * pc_zz[j] + pa_xxz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xx[j] * pc_z[j] * pb_yy[j] * fl1_fx + 3.0 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx + pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xx[j] * pc_z[j] * fl1_fx * pb_zz[j] + pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] + 2.0 * pa_xx[j] * fl1_fx * pb_yz[j] * pc_y[j] + pa_xz[j] * pc_x[j] * pb_yy[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + pa_xz[j] * pc_x[j] * fl1_fx * pb_zz[j] + 3.0 * pa_x[j] * pc_xz[j] * pb_yy[j] * fl1_fx + pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 2.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_xx[j] * pa_z[j] * pb_yy[j] * fl1_fx + 0.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] + pc_xx[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yy[j] * pc_zz[j] + 2.0 * fl1_fx * pa_z[j] * pb_yz[j] * pc_yz[j] + 0.5 * fl1_fx * pa_z[j] * pc_yy[j] * pb_zz[j] + fl1_fx * pc_zz[j] * pb_yyz[j] + fl1_fx * pc_yz[j] * pb_yzz[j] + fl1_fx * pa_z[j] * pb_yyz[j] * pc_z[j] + fl1_fx * pa_z[j] * pb_yzz[j] * pc_y[j] + 0.5 * fl1_fx * pc_z[j] * pb_yyzz[j] + pa_xxz[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_xxz[j] * pb_yz[j] * pc_yz[j] + pa_xxz[j] * pc_yy[j] * pb_zz[j] + 2.0 * pa_xx[j] * pc_zz[j] * pb_yyz[j] + 2.0 * pa_xx[j] * pc_yz[j] * pb_yzz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_yyz[j] + 4.0 * pa_xz[j] * pc_xy[j] * pb_yzz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_yyzz[j] + pc_xx[j] * pa_z[j] * pb_yyzz[j]);

                t_xxz_yyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.125 * fl3_fx * pa_z[j] - 0.25 * fl3_fx * pb_z[j] - 0.75 * pa_xx[j] * pc_z[j] * fl2_fx - 0.5 * pa_xz[j] * pc_x[j] * fl2_fx - 3.0 * pa_x[j] * pc_xz[j] * fl2_fx - pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 0.5 * pc_xx[j] * pa_z[j] * fl2_fx - 0.75 * pc_xxz[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_yy[j] - 0.5 * fl2_fx * pa_z[j] * pc_zz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 0.75 * fl2_fx * pc_yyz[j] - 0.25 * fl2_fx * pc_zzz[j] - fl2_fx * pc_zz[j] * pb_z[j] - fl2_fx * pc_yy[j] * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - fl2_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_xxz[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xxz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xx[j] * pc_yz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx - pa_xx[j] * pc_zz[j] * fl1_fx * pb_z[j] - pa_xx[j] * fl1_fx * pc_yy[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx - pa_xz[j] * pc_xyy[j] * fl1_fx - pa_xz[j] * pc_xzz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 2.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 4.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xx[j] * pa_z[j] * pb_yy[j] * fl1_fx - pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx - pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xxz[j] * pb_yy[j] * fl1_fx - 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xxy[j] * fl1_fx * pb_yz[j] - pc_xx[j] * fl1_fx * pb_yyz[j] - fl1_fx * pa_z[j] * pb_y[j] * pc_yzz[j] - fl1_fx * pa_z[j] * pc_yyz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - 2.0 * fl1_fx * pc_yzz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yy[j] * pc_zz[j] - 2.0 * fl1_fx * pa_z[j] * pb_yz[j] * pc_yz[j] - 0.5 * fl1_fx * pa_z[j] * pc_yy[j] * pb_zz[j] - fl1_fx * pc_zz[j] * pb_yyz[j] - fl1_fx * pc_yz[j] * pb_yzz[j] - 2.0 * pa_xxz[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_xxz[j] * pc_yyz[j] * pb_z[j] - pa_xx[j] * pc_zzz[j] * pb_yy[j] - 4.0 * pa_xx[j] * pc_yzz[j] * pb_yz[j] - pa_xx[j] * pc_yyz[j] * pb_zz[j] - 2.0 * pa_xz[j] * pc_xzz[j] * pb_yy[j] - 8.0 * pa_xz[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_xzz[j] * pb_yyz[j] - 4.0 * pa_x[j] * pc_xyz[j] * pb_yzz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_yyz[j] - 2.0 * pc_xxy[j] * pa_z[j] * pb_yzz[j] - pc_xxz[j] * pb_yyzz[j]);

                t_xxz_yyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.25 * pc_xx[j] * pa_z[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.25 * fl2_fx * pa_z[j] * pc_yy[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * pa_xx[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_xx[j] * pc_zzz[j] * fl1_fx + pa_xz[j] * pc_xyy[j] * fl1_fx + pa_xz[j] * pc_xzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + pa_x[j] * pc_xzzz[j] * fl1_fx + 2.0 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 2.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx + 0.5 * pc_xxzz[j] * pa_z[j] * fl1_fx + pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * pb_yy[j] * fl1_fx + 3.0 * pc_xxyz[j] * pb_y[j] * fl1_fx + pc_xxzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + pc_xxyy[j] * fl1_fx * pb_z[j] + 2.0 * pc_xxy[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_z[j] * pc_yyzz[j] + fl1_fx * pc_yzzz[j] * pb_y[j] + fl1_fx * pc_yyzz[j] * pb_z[j] + fl1_fx * pa_z[j] * pb_y[j] * pc_yzz[j] + fl1_fx * pa_z[j] * pc_yyz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + 2.0 * fl1_fx * pc_yzz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] + pa_xxz[j] * pc_yyzz[j] + 2.0 * pa_xx[j] * pc_yzzz[j] * pb_y[j] + 2.0 * pa_xx[j] * pc_yyzz[j] * pb_z[j] + 4.0 * pa_xz[j] * pc_xyzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_yy[j] + 8.0 * pa_x[j] * pc_xyzz[j] * pb_yz[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_zz[j] + pc_xxzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_yz[j] + pc_xxyy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xxzz[j] * pb_yyz[j] + 2.0 * pc_xxyz[j] * pb_yzz[j]);

                t_xxz_yyzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 0.25 * fl2_fx * pc_zzz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - pa_x[j] * pc_xzzz[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_xxzz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 0.5 * pc_xxzzz[j] * fl1_fx - pc_xxzz[j] * fl1_fx * pb_z[j] - pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_yyzz[j] - fl1_fx * pc_yzzz[j] * pb_y[j] - fl1_fx * pc_yyzz[j] * pb_z[j] - pa_xx[j] * pc_yyzzz[j] - 2.0 * pa_xz[j] * pc_xyyzz[j] - 4.0 * pa_x[j] * pc_xyzzz[j] * pb_y[j] - 4.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - 2.0 * pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - pc_xxzzz[j] * pb_yy[j] - 4.0 * pc_xxyzz[j] * pb_yz[j] - pc_xxyyz[j] * pb_zz[j]);

                t_xxz_yyzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 2.0 * pa_x[j] * pc_xyyzzz[j] + pc_xxyyzz[j] * pa_z[j] + 2.0 * pc_xxyzzz[j] * pb_y[j] + 2.0 * pc_xxyyzz[j] * pb_z[j]);

                t_xxz_yyzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];

                t_xxz_yzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.75 * fl2_fx * pb_yzz[j] + 1.5 * pa_xxz[j] * pb_yz[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yzzz[j] + pa_xxz[j] * pb_yzzz[j]);

                t_xxz_yzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xx[j] * fl2_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_yz[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * fl2_fx * pb_yzz[j] - 1.5 * pa_xxz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xxz[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_xxz[j] * pc_y[j] * pb_z[j] * fl1_fx - 4.5 * pa_xx[j] * pc_z[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xx[j] * fl1_fx * pb_yzz[j] - 3.0 * pa_xz[j] * pc_x[j] * pb_yz[j] * fl1_fx - 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] - 1.5 * fl1_fx * pa_z[j] * pb_yzz[j] * pc_z[j] - 0.5 * fl1_fx * pa_z[j] * pc_y[j] * pb_zzz[j] - 0.5 * fl1_fx * pc_z[j] * pb_yzzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yzzz[j] - 3.0 * pa_xxz[j] * pb_yzz[j] * pc_z[j] - pa_xxz[j] * pc_y[j] * pb_zzz[j] - pa_xx[j] * pc_z[j] * pb_yzzz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_yzzz[j]);

                t_xxz_yzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xx[j] * fl2_fx * pc_y[j] + 0.75 * pa_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 4.5 * fl2_fx * pc_z[j] * pb_yz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 2.25 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.75 * fl2_fx * pb_yzz[j] + 1.5 * pa_xxz[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xx[j] * pc_z[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xx[j] * pc_yz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xx[j] * fl1_fx * pc_y[j] * pb_zz[j] + 3.0 * pa_xz[j] * pc_x[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xy[j] * pb_z[j] * fl1_fx + 9.0 * pa_x[j] * pc_xz[j] * pb_yz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 3.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_xx[j] * pa_z[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xx[j] * fl1_fx * pb_yzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_yz[j] * pc_zz[j] + 1.5 * fl1_fx * pa_z[j] * pc_yz[j] * pb_zz[j] + 1.5 * fl1_fx * pc_zz[j] * pb_yzz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_yzz[j] * pc_z[j] + 0.5 * fl1_fx * pa_z[j] * pc_y[j] * pb_zzz[j] + 0.5 * fl1_fx * pc_z[j] * pb_yzzz[j] + 3.0 * pa_xxz[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_xxz[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_xx[j] * pc_zz[j] * pb_yzz[j] + pa_xx[j] * pc_yz[j] * pb_zzz[j] + 6.0 * pa_xz[j] * pc_xz[j] * pb_yzz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_zzz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_yzzz[j] + pc_xx[j] * pa_z[j] * pb_yzzz[j]);

                t_xxz_yzzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_xx[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_xy[j] * fl2_fx - 1.5 * pa_x[j] * pc_x[j] * fl2_fx * pb_y[j] - 1.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pa_z[j] * pc_yz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_y[j] - 4.5 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pc_yzz[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_yz[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xxz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xx[j] * pc_zz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xx[j] * pc_yz[j] * pb_z[j] * fl1_fx - 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xy[j] * pb_z[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 9.0 * pa_x[j] * pc_xz[j] * pb_yz[j] * fl1_fx - 6.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xx[j] * pa_z[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_z[j] * pb_z[j] * fl1_fx - 4.5 * pc_xxz[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xx[j] * fl1_fx * pb_yzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_y[j] * pc_zzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_yz[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_z[j] * pb_yz[j] * pc_zz[j] - 1.5 * fl1_fx * pa_z[j] * pc_yz[j] * pb_zz[j] - 1.5 * fl1_fx * pc_zz[j] * pb_yzz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_zzz[j] - pa_xxz[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_xxz[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_xx[j] * pc_zzz[j] * pb_yz[j] - 3.0 * pa_xx[j] * pc_yzz[j] * pb_zz[j] - 6.0 * pa_xz[j] * pc_xzz[j] * pb_yz[j] - 6.0 * pa_xz[j] * pc_xyz[j] * pb_zz[j] - 6.0 * pa_x[j] * pc_xzz[j] * pb_yzz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_zzz[j] - 3.0 * pc_xxz[j] * pa_z[j] * pb_yzz[j] - pc_xxy[j] * pa_z[j] * pb_zzz[j] - pc_xxz[j] * pb_yzzz[j]);

                t_xxz_yzzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_yz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 2.25 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xx[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xxz[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xxzz[j] * pb_y[j] * fl1_fx + 4.5 * pc_xxyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_z[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] + 1.5 * fl1_fx * pc_yzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_z[j] * pb_y[j] * pc_zzz[j] + 1.5 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_yz[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_zz[j] + pa_xxz[j] * pc_yzzz[j] + pa_xx[j] * pc_zzzz[j] * pb_y[j] + 3.0 * pa_xx[j] * pc_yzzz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xzzz[j] * pb_y[j] + 6.0 * pa_xz[j] * pc_xyzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_xzzz[j] * pb_yz[j] + 6.0 * pa_x[j] * pc_xyzz[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pa_z[j] * pb_yz[j] + 3.0 * pc_xxyz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_xxzz[j] * pb_yzz[j] + pc_xxyz[j] * pb_zzz[j]);

                t_xxz_yzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pc_yzz[j] - 6.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxzz[j] * pb_y[j] * fl1_fx - 4.5 * pc_xxyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 0.5 * fl1_fx * pc_yzzzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] - 1.5 * fl1_fx * pc_yzzz[j] * pb_z[j] - pa_xx[j] * pc_yzzzz[j] - 2.0 * pa_xz[j] * pc_xyzzz[j] - 2.0 * pa_x[j] * pc_xzzzz[j] * pb_y[j] - 6.0 * pa_x[j] * pc_xyzzz[j] * pb_z[j] - pc_xxzzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxzzz[j] * pb_yz[j] - 3.0 * pc_xxyzz[j] * pb_zz[j]);

                t_xxz_yzzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + 2.0 * pa_x[j] * pc_xyzzzz[j] + pc_xxyzzz[j] * pa_z[j] + pc_xxzzzz[j] * pb_y[j] + 3.0 * pc_xxyzzz[j] * pb_z[j]);

                t_xxz_yzzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];

                t_xxz_zzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 1.5 * fl3_fx * pb_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 3.0 * pa_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + fl2_fx * pb_zzz[j] + 3.0 * pa_xxz[j] * pb_zz[j] * fl1_fx + 2.0 * pa_xx[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_zzzz[j] + pa_xxz[j] * pb_zzzz[j]);

                t_xxz_zzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 4.5 * fl3_fx * pb_z[j] - 1.5 * pa_xxz[j] * fl2_fx - 3.75 * pa_xx[j] * pc_z[j] * fl2_fx - 6.0 * pa_xx[j] * fl2_fx * pb_z[j] - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_zz[j] - 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 4.5 * fl2_fx * pc_z[j] * pb_zz[j] - 2.0 * fl2_fx * pb_zzz[j] - 3.0 * pa_xxz[j] * pb_zz[j] * fl1_fx - 6.0 * pa_xxz[j] * pb_z[j] * pc_z[j] * fl1_fx - 9.0 * pa_xx[j] * pc_z[j] * pb_zz[j] * fl1_fx - 2.0 * pa_xx[j] * fl1_fx * pb_zzz[j] - 6.0 * pa_xz[j] * pc_x[j] * pb_zz[j] * fl1_fx - 4.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] - 2.0 * fl1_fx * pa_z[j] * pb_zzz[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_zzzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_zzzz[j] - 4.0 * pa_xxz[j] * pb_zzz[j] * pc_z[j] - pa_xx[j] * pc_z[j] * pb_zzzz[j] - 2.0 * pa_xz[j] * pc_x[j] * pb_zzzz[j]);

                t_xxz_zzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 4.5 * fl3_fx * pb_z[j] + 0.75 * pa_xxz[j] * fl2_fx + 7.5 * pa_xx[j] * pc_z[j] * fl2_fx + 3.0 * pa_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_x[j] * fl2_fx + 7.5 * pa_x[j] * pc_xz[j] * fl2_fx + 12.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] + 0.75 * pc_xx[j] * pa_z[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_z[j] + 6.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 9.0 * fl2_fx * pc_z[j] * pb_zz[j] + 6.0 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + fl2_fx * pb_zzz[j] + 6.0 * pa_xxz[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_xxz[j] * pc_zz[j] * fl1_fx + 9.0 * pa_xx[j] * pc_z[j] * pb_zz[j] * fl1_fx + 12.0 * pa_xx[j] * pc_zz[j] * pb_z[j] * fl1_fx + 6.0 * pa_xz[j] * pc_x[j] * pb_zz[j] * fl1_fx + 12.0 * pa_xz[j] * pc_xz[j] * pb_z[j] * fl1_fx + 18.0 * pa_x[j] * pc_xz[j] * pb_zz[j] * fl1_fx + 4.0 * pa_x[j] * pc_x[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_xx[j] * pa_z[j] * pb_zz[j] * fl1_fx + 2.0 * pc_xx[j] * fl1_fx * pb_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pb_zz[j] * pc_zz[j] + 2.0 * fl1_fx * pc_zz[j] * pb_zzz[j] + 2.0 * fl1_fx * pa_z[j] * pb_zzz[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_zzzz[j] + 6.0 * pa_xxz[j] * pb_zz[j] * pc_zz[j] + 4.0 * pa_xx[j] * pc_zz[j] * pb_zzz[j] + 8.0 * pa_xz[j] * pc_xz[j] * pb_zzz[j] + 2.0 * pa_x[j] * pc_xz[j] * pb_zzzz[j] + pc_xx[j] * pa_z[j] * pb_zzzz[j]);

                t_xxz_zzzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 1.5 * fl3_fx * pb_z[j] - 3.75 * pa_xx[j] * pc_z[j] * fl2_fx - 1.5 * pa_xz[j] * pc_x[j] * fl2_fx - 15.0 * pa_x[j] * pc_xz[j] * fl2_fx - 6.0 * pa_x[j] * pc_x[j] * fl2_fx * pb_z[j] - 1.5 * pc_xx[j] * pa_z[j] * fl2_fx - 3.75 * pc_xxz[j] * fl2_fx - 6.0 * pc_xx[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pc_zz[j] - 12.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.5 * fl2_fx * pc_zzz[j] - 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 4.5 * fl2_fx * pc_z[j] * pb_zz[j] - 3.0 * pa_xxz[j] * pc_zz[j] * fl1_fx - 12.0 * pa_xx[j] * pc_zz[j] * pb_z[j] * fl1_fx - 5.0 * pa_xx[j] * pc_zzz[j] * fl1_fx - 12.0 * pa_xz[j] * pc_xz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 18.0 * pa_x[j] * pc_xz[j] * pb_zz[j] * fl1_fx - 24.0 * pa_x[j] * pc_xzz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xx[j] * pa_z[j] * pb_zz[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_z[j] * pb_z[j] * fl1_fx - 9.0 * pc_xxz[j] * pb_zz[j] * fl1_fx - 2.0 * pc_xx[j] * fl1_fx * pb_zzz[j] - 2.0 * fl1_fx * pa_z[j] * pb_z[j] * pc_zzz[j] - 3.0 * fl1_fx * pc_zzz[j] * pb_zz[j] - 3.0 * fl1_fx * pa_z[j] * pb_zz[j] * pc_zz[j] - 2.0 * fl1_fx * pc_zz[j] * pb_zzz[j] - 4.0 * pa_xxz[j] * pb_z[j] * pc_zzz[j] - 6.0 * pa_xx[j] * pc_zzz[j] * pb_zz[j] - 12.0 * pa_xz[j] * pc_xzz[j] * pb_zz[j] - 8.0 * pa_x[j] * pc_xzz[j] * pb_zzz[j] - 4.0 * pc_xxz[j] * pa_z[j] * pb_zzz[j] - pc_xxz[j] * pb_zzzz[j]);

                t_xxz_zzzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 7.5 * pa_x[j] * pc_xz[j] * fl2_fx + 0.75 * pc_xx[j] * pa_z[j] * fl2_fx + 7.5 * pc_xxz[j] * fl2_fx + 3.0 * pc_xx[j] * fl2_fx * pb_z[j] + 5.0 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 6.0 * fl2_fx * pc_zz[j] * pb_z[j] + 5.0 * pa_xx[j] * pc_zzz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + 24.0 * pa_x[j] * pc_xzz[j] * pb_z[j] * fl1_fx + 10.0 * pa_x[j] * pc_xzzz[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_z[j] * pb_z[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xxz[j] * pb_zz[j] * fl1_fx + 12.0 * pc_xxzz[j] * pb_z[j] * fl1_fx + 0.5 * fl1_fx * pa_z[j] * pc_zzzz[j] + 2.0 * fl1_fx * pc_zzzz[j] * pb_z[j] + 2.0 * fl1_fx * pa_z[j] * pb_z[j] * pc_zzz[j] + 3.0 * fl1_fx * pc_zzz[j] * pb_zz[j] + pa_xxz[j] * pc_zzzz[j] + 4.0 * pa_xx[j] * pc_zzzz[j] * pb_z[j] + 8.0 * pa_xz[j] * pc_xzzz[j] * pb_z[j] + 12.0 * pa_x[j] * pc_xzzz[j] * pb_zz[j] + 6.0 * pc_xxzz[j] * pa_z[j] * pb_zz[j] + 4.0 * pc_xxzz[j] * pb_zzz[j]);

                t_xxz_zzzz[j] += fl_s_0_0_5 * (-3.75 * pc_xxz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 10.0 * pa_x[j] * pc_xzzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - 12.0 * pc_xxzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_xxzzz[j] * fl1_fx - 0.5 * fl1_fx * pc_zzzzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_zzzz[j] - 2.0 * fl1_fx * pc_zzzz[j] * pb_z[j] - pa_xx[j] * pc_zzzzz[j] - 2.0 * pa_xz[j] * pc_xzzzz[j] - 8.0 * pa_x[j] * pc_xzzzz[j] * pb_z[j] - 4.0 * pc_xxzzz[j] * pa_z[j] * pb_z[j] - 6.0 * pc_xxzzz[j] * pb_zz[j]);

                t_xxz_zzzz[j] += fl_s_0_0_6 * (5.0 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + 2.0 * pa_x[j] * pc_xzzzzz[j] + pc_xxzzzz[j] * pa_z[j] + 4.0 * pc_xxzzzz[j] * pb_z[j]);

                t_xxz_zzzz[j] += -fl_s_0_0_7 * pc_xxzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_45_48(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (45,48)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyy = pcDistances.data(119 * idx + 86);

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyy_xxxx = primBuffer.data(150 * idx + 45);

            auto t_xyy_xxxy = primBuffer.data(150 * idx + 46);

            auto t_xyy_xxxz = primBuffer.data(150 * idx + 47);

            // Batch of Integrals (45,48)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, \
                                     pb_xxxz, pb_xxy, pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, \
                                     pc_xxxxxy, pc_xxxxxyy, pc_xxxxy, pc_xxxxyy, pc_xxxxyyy, pc_xxxxyyz, pc_xxxxyz, \
                                     pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyz, pc_xxxyz, pc_xxxz, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xxyyz, pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyz, pc_xyz, \
                                     pc_xz, pc_y, pc_yy, pc_yyy, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyy_xxxx, t_xyy_xxxy, t_xyy_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyy_xxxx[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 1.5 * fl3_fx * pb_x[j] + 0.75 * pa_xyy[j] * fl2_fx + 3.0 * fl2_fx * pa_yy[j] * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + fl2_fx * pb_xxx[j] + 3.0 * pa_xyy[j] * pb_xx[j] * fl1_fx + 2.0 * fl1_fx * pa_yy[j] * pb_xxx[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxxx[j] + pa_xyy[j] * pb_xxxx[j]);

                t_xyy_xxxx[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 4.5 * fl3_fx * pb_x[j] - 1.5 * pa_xyy[j] * fl2_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 3.75 * pc_x[j] * pa_yy[j] * fl2_fx - 6.0 * fl2_fx * pa_yy[j] * pb_x[j] - 6.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pb_xx[j] - 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 4.5 * pc_x[j] * fl2_fx * pb_xx[j] - 2.0 * fl2_fx * pb_xxx[j] - 3.0 * pa_xyy[j] * pb_xx[j] * fl1_fx - 6.0 * pa_xyy[j] * pb_x[j] * pc_x[j] * fl1_fx - 6.0 * pa_xy[j] * pc_y[j] * pb_xx[j] * fl1_fx - 9.0 * pc_x[j] * pa_yy[j] * pb_xx[j] * fl1_fx - 4.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xxx[j] - 2.0 * fl1_fx * pa_yy[j] * pb_xxx[j] - 2.0 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxxx[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxxx[j] - 4.0 * pa_xyy[j] * pb_xxx[j] * pc_x[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xxxx[j] - pc_x[j] * pa_yy[j] * pb_xxxx[j]);

                t_xyy_xxxx[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 4.5 * fl3_fx * pb_x[j] + 0.75 * pa_xyy[j] * fl2_fx + 3.0 * pa_xy[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 7.5 * pc_x[j] * pa_yy[j] * fl2_fx + 7.5 * pc_xy[j] * pa_y[j] * fl2_fx + 12.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 3.0 * fl2_fx * pc_yy[j] * pb_x[j] + 3.0 * fl2_fx * pa_yy[j] * pb_x[j] + 6.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_xx[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 9.0 * pc_x[j] * fl2_fx * pb_xx[j] + 6.0 * pc_xx[j] * fl2_fx * pb_x[j] + fl2_fx * pb_xxx[j] + 6.0 * pa_xyy[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_xx[j] * fl1_fx + 6.0 * pa_xy[j] * pc_y[j] * pb_xx[j] * fl1_fx + 12.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_yy[j] * pb_xx[j] * fl1_fx + 9.0 * pc_x[j] * pa_yy[j] * pb_xx[j] * fl1_fx + 12.0 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx + 18.0 * pc_xy[j] * pa_y[j] * pb_xx[j] * fl1_fx + 2.0 * fl1_fx * pc_yy[j] * pb_xxx[j] + 4.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xxx[j] + 3.0 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xx[j] + 2.0 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_x[j] + 2.0 * pc_xx[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxxx[j] + 6.0 * pa_xyy[j] * pb_xx[j] * pc_xx[j] + 8.0 * pa_xy[j] * pc_xy[j] * pb_xxx[j] + pa_x[j] * pc_yy[j] * pb_xxxx[j] + 4.0 * pc_xx[j] * pa_yy[j] * pb_xxx[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xxxx[j]);

                t_xyy_xxxx[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 1.5 * fl3_fx * pb_x[j] - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_yy[j] * fl2_fx - 3.75 * pc_x[j] * pa_yy[j] * fl2_fx - 15.0 * pc_xy[j] * pa_y[j] * fl2_fx - 3.75 * pc_xyy[j] * fl2_fx - 6.0 * fl2_fx * pc_yy[j] * pb_x[j] - 6.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_xx[j] - 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 12.0 * pc_xx[j] * fl2_fx * pb_x[j] - 2.5 * pc_xxx[j] * fl2_fx - 4.5 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * pa_xyy[j] * pc_xx[j] * fl1_fx - 12.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yy[j] * pb_xx[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 12.0 * pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_yy[j] * fl1_fx - 18.0 * pc_xy[j] * pa_y[j] * pb_xx[j] * fl1_fx - 24.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyy[j] * pb_xx[j] * fl1_fx - 2.0 * fl1_fx * pc_yy[j] * pb_xxx[j] - 2.0 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxx[j] - 3.0 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xx[j] - 3.0 * pc_xxx[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xx[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_xyy[j] * pb_x[j] * pc_xxx[j] - 12.0 * pa_xy[j] * pc_xxy[j] * pb_xx[j] - 4.0 * pa_x[j] * pc_xyy[j] * pb_xxx[j] - 6.0 * pc_xxx[j] * pa_yy[j] * pb_xx[j] - 8.0 * pc_xxy[j] * pa_y[j] * pb_xxx[j] - pc_xyy[j] * pb_xxxx[j]);

                t_xyy_xxxx[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 7.5 * pc_xy[j] * pa_y[j] * fl2_fx + 7.5 * pc_xyy[j] * fl2_fx + 3.0 * fl2_fx * pc_yy[j] * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_xx[j] + 5.0 * pc_xxx[j] * fl2_fx + 6.0 * pc_xx[j] * fl2_fx * pb_x[j] + 6.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_yy[j] * fl1_fx + 24.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxy[j] * pa_y[j] * fl1_fx + 9.0 * pc_xyy[j] * pb_xx[j] * fl1_fx + 12.0 * pc_xxyy[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * fl1_fx * pc_xxxx[j] + 2.0 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxx[j] + 2.0 * pc_xxxx[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxx[j] * fl1_fx * pb_xx[j] + pa_xyy[j] * pc_xxxx[j] + 8.0 * pa_xy[j] * pc_xxxy[j] * pb_x[j] + 6.0 * pa_x[j] * pc_xxyy[j] * pb_xx[j] + 4.0 * pc_xxxx[j] * pa_yy[j] * pb_x[j] + 12.0 * pc_xxxy[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxyy[j] * pb_xxx[j]);

                t_xyy_xxxx[j] += fl_s_0_0_5 * (-3.75 * pc_xyy[j] * fl2_fx - 2.5 * pc_xxx[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 10.0 * pc_xxxy[j] * pa_y[j] * fl1_fx - 12.0 * pc_xxyy[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxyy[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xxxx[j] - 0.5 * pc_xxxxx[j] * fl1_fx - 2.0 * pc_xxxx[j] * fl1_fx * pb_x[j] - 2.0 * pa_xy[j] * pc_xxxxy[j] - 4.0 * pa_x[j] * pc_xxxyy[j] * pb_x[j] - pc_xxxxx[j] * pa_yy[j] - 8.0 * pc_xxxxy[j] * pa_y[j] * pb_x[j] - 6.0 * pc_xxxyy[j] * pb_xx[j]);

                t_xyy_xxxx[j] += fl_s_0_0_6 * (5.0 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + pa_x[j] * pc_xxxxyy[j] + 2.0 * pc_xxxxxy[j] * pa_y[j] + 4.0 * pc_xxxxyy[j] * pb_x[j]);

                t_xyy_xxxx[j] += -fl_s_0_0_7 * pc_xxxxxyy[j];

                t_xyy_xxxy[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_y[j] + 0.375 * fl3_fx * pb_y[j] + 1.5 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_xx[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xxy[j] + 1.5 * pa_xyy[j] * pb_xy[j] * fl1_fx + pa_xy[j] * fl1_fx * pb_xxx[j] + 1.5 * fl1_fx * pa_yy[j] * pb_xxy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxxy[j] + pa_xyy[j] * pb_xxxy[j]);

                t_xyy_xxxy[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_y[j] - 1.125 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 3.0 * pa_xy[j] * fl2_fx * pb_x[j] - 1.5 * pa_xy[j] * fl2_fx * pc_x[j] - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 1.5 * fl2_fx * pa_yy[j] * pb_y[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 3.0 * fl2_fx * pa_y[j] * pb_xx[j] - 2.25 * fl2_fx * pc_y[j] * pb_xx[j] - 1.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pb_xxy[j] - 1.5 * pa_xyy[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_xyy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_y[j] - 3.0 * pa_xy[j] * pc_y[j] * pb_xy[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] - pa_xy[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_x[j] * pa_yy[j] * pb_xy[j] * fl1_fx - pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_y[j] - 3.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xxy[j] - 1.5 * fl1_fx * pa_yy[j] * pb_xxy[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxxy[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxxy[j] - pa_xyy[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_xyy[j] * pb_xxy[j] * pc_x[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xxxy[j] - pc_x[j] * pa_yy[j] * pb_xxxy[j]);

                t_xyy_xxxy[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_y[j] + 3.375 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 3.0 * pa_xy[j] * fl2_fx * pc_x[j] + 1.5 * pa_xy[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 9.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 3.0 * pc_xx[j] * pa_y[j] * fl2_fx + 6.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_yy[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_yy[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pb_y[j] + 4.5 * fl2_fx * pc_y[j] * pb_xx[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 4.5 * pc_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pb_xxy[j] + 1.5 * pa_xyy[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_xyy[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 3.0 * pa_xy[j] * pc_y[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 3.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 3.0 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 1.5 * pa_x[j] * pc_yy[j] * pb_xy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_yy[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] + 9.0 * pc_xy[j] * pa_y[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] + pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] + 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xx[j] + 1.5 * fl1_fx * pc_yy[j] * pb_xxy[j] + 1.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_y[j] + 3.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xxy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_xx[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_x[j] + 1.5 * pc_xx[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxxy[j] + 3.0 * pa_xyy[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_xyy[j] * pb_xy[j] * pc_xx[j] + 2.0 * pa_xy[j] * pc_yy[j] * pb_xxx[j] + 6.0 * pa_xy[j] * pc_xy[j] * pb_xxy[j] + pa_x[j] * pc_yy[j] * pb_xxxy[j] + pc_xy[j] * pa_yy[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_yy[j] * pb_xxy[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xxxy[j]);

                t_xyy_xxxy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pb_y[j] - 1.5 * pa_xy[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_xy[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 6.0 * pc_xx[j] * pa_y[j] * fl2_fx - 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 13.5 * pc_xy[j] * fl2_fx * pb_x[j] - 4.5 * pc_xxy[j] * fl2_fx - 3.0 * fl2_fx * pa_y[j] * pc_yy[j] - 0.75 * fl2_fx * pc_yyy[j] - 1.5 * fl2_fx * pc_yy[j] * pb_y[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 2.25 * fl2_fx * pc_y[j] * pb_xx[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * pa_xyy[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_y[j] - pa_xy[j] * fl1_fx * pc_xxx[j] - 3.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 1.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_yy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_y[j] - 9.0 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xy[j] * pa_y[j] * pb_xy[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xyy[j] * pb_xy[j] * fl1_fx - 4.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pc_yyy[j] * pb_xx[j] - 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xx[j] - 1.5 * fl1_fx * pc_yy[j] * pb_xxy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_xx[j] - 1.5 * pc_xxx[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xx[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_xyy[j] * pb_x[j] * pc_xxy[j] - pa_xyy[j] * pc_xxx[j] * pb_y[j] - 6.0 * pa_xy[j] * pc_xyy[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xxy[j] * pb_xy[j] - pa_x[j] * pc_yyy[j] * pb_xxx[j] - 3.0 * pa_x[j] * pc_xyy[j] * pb_xxy[j] - 3.0 * pc_xxy[j] * pa_yy[j] * pb_xx[j] - 3.0 * pc_xxx[j] * pa_yy[j] * pb_xy[j] - 2.0 * pc_xyy[j] * pa_y[j] * pb_xxx[j] - 6.0 * pc_xxy[j] * pa_y[j] * pb_xxy[j] - pc_xyy[j] * pb_xxxy[j]);

                t_xyy_xxxy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 2.25 * pa_x[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xx[j] * pa_y[j] * fl2_fx + 9.0 * pc_xxy[j] * fl2_fx + 6.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyy[j] + 1.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.75 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxy[j] * pa_yy[j] * fl1_fx + 9.0 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + pc_xxxx[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyyy[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyy[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 4.5 * pc_xxxy[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + 1.5 * fl1_fx * pc_yyy[j] * pb_xx[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_y[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xy[j] + pa_xyy[j] * pc_xxxy[j] + 6.0 * pa_xy[j] * pc_xxyy[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxxy[j] * pb_y[j] + 3.0 * pa_x[j] * pc_xyyy[j] * pb_xx[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_xy[j] + 3.0 * pc_xxxy[j] * pa_yy[j] * pb_x[j] + pc_xxxx[j] * pa_yy[j] * pb_y[j] + 6.0 * pc_xxyy[j] * pa_y[j] * pb_xx[j] + 6.0 * pc_xxxy[j] * pa_y[j] * pb_xy[j] + pc_xyyy[j] * pb_xxx[j] + 3.0 * pc_xxyy[j] * pb_xxy[j]);

                t_xyy_xxxy[j] += fl_s_0_0_5 * (-4.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yyy[j] - 1.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - pc_xxxx[j] * pa_y[j] * fl1_fx - 4.5 * pc_xyyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyy[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxxxy[j] * fl1_fx - 4.5 * pc_xxxy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_xxxyy[j] - 3.0 * pa_x[j] * pc_xxyyy[j] * pb_x[j] - pa_x[j] * pc_xxxyy[j] * pb_y[j] - pc_xxxxy[j] * pa_yy[j] - 6.0 * pc_xxxyy[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxyyy[j] * pb_xx[j] - 3.0 * pc_xxxyy[j] * pb_xy[j]);

                t_xyy_xxxy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxxxy[j] * fl1_fx + pa_x[j] * pc_xxxyyy[j] + 2.0 * pc_xxxxyy[j] * pa_y[j] + 3.0 * pc_xxxyyy[j] * pb_x[j] + pc_xxxxyy[j] * pb_y[j]);

                t_xyy_xxxy[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];

                t_xyy_xxxz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pb_xxz[j] + 1.5 * pa_xyy[j] * pb_xz[j] * fl1_fx + 1.5 * fl1_fx * pa_yy[j] * pb_xxz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxxz[j] + pa_xyy[j] * pb_xxxz[j]);

                t_xyy_xxxz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_yy[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * fl2_fx * pb_xxz[j] - 1.5 * pa_xyy[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_xyy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] - 3.0 * pa_xy[j] * pc_y[j] * pb_xz[j] * fl1_fx - 4.5 * pc_x[j] * pa_yy[j] * pb_xz[j] * fl1_fx - 1.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_z[j] - 3.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xxz[j] - 1.5 * fl1_fx * pa_yy[j] * pb_xxz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxxz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxxz[j] - pa_xyy[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_xyy[j] * pb_xxz[j] * pc_x[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xxxz[j] - pc_x[j] * pa_yy[j] * pb_xxxz[j]);

                t_xyy_xxxz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * fl2_fx * pa_yy[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pb_xx[j] * pc_z[j] + 0.75 * fl2_fx * pb_xxz[j] + 1.5 * pa_xyy[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xy[j] * pc_y[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yy[j] * pb_xz[j] * fl1_fx + 4.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_yy[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] + 9.0 * pc_xy[j] * pa_y[j] * pb_xz[j] * fl1_fx + 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] + 1.5 * fl1_fx * pc_yy[j] * pb_xxz[j] + 1.5 * fl1_fx * pa_yy[j] * pb_xx[j] * pc_z[j] + 3.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xxz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_xx[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_x[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xx[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxxz[j] + 3.0 * pa_xyy[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_xyy[j] * pb_xz[j] * pc_xx[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xxx[j] + 6.0 * pa_xy[j] * pc_xy[j] * pb_xxz[j] + pa_x[j] * pc_yy[j] * pb_xxxz[j] + pc_xz[j] * pa_yy[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_yy[j] * pb_xxz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xxxz[j]);

                t_xyy_xxxz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xxz[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_yy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 4.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] - 9.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xy[j] * pa_y[j] * pb_xz[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 4.5 * pc_xyy[j] * pb_xz[j] * fl1_fx - 1.5 * fl1_fx * pc_yyz[j] * pb_xx[j] - 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] - 1.5 * fl1_fx * pc_yy[j] * pb_xxz[j] - 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_xx[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxx[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_xx[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_xyy[j] * pb_x[j] * pc_xxz[j] - pa_xyy[j] * pc_xxx[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_xy[j] * pc_xxy[j] * pb_xz[j] - pa_x[j] * pc_yyz[j] * pb_xxx[j] - 3.0 * pa_x[j] * pc_xyy[j] * pb_xxz[j] - 3.0 * pc_xxz[j] * pa_yy[j] * pb_xx[j] - 3.0 * pc_xxx[j] * pa_yy[j] * pb_xz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xxx[j] - 6.0 * pc_xxy[j] * pa_y[j] * pb_xxz[j] - pc_xyy[j] * pb_xxxz[j]);

                t_xyy_xxxz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 3.0 * pc_xxz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxz[j] * pa_yy[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyyz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyy[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_xx[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxxz[j] + 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_z[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xz[j] + pa_xyy[j] * pc_xxxz[j] + 6.0 * pa_xy[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxxy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xyyz[j] * pb_xx[j] + 3.0 * pa_x[j] * pc_xxyy[j] * pb_xz[j] + 3.0 * pc_xxxz[j] * pa_yy[j] * pb_x[j] + pc_xxxx[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xxyz[j] * pa_y[j] * pb_xx[j] + 6.0 * pc_xxxy[j] * pa_y[j] * pb_xz[j] + pc_xyyz[j] * pb_xxx[j] + 3.0 * pc_xxyy[j] * pb_xxz[j]);

                t_xyy_xxxz[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yyz[j] - 1.5 * pc_xxz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 6.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 4.5 * pc_xyyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxxz[j] - 0.5 * pc_xxxxz[j] * fl1_fx - 1.5 * pc_xxxz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_xxxyz[j] - 3.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - pa_x[j] * pc_xxxyy[j] * pb_z[j] - pc_xxxxz[j] * pa_yy[j] - 6.0 * pc_xxxyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxxy[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxyyz[j] * pb_xx[j] - 3.0 * pc_xxxyy[j] * pb_xz[j]);

                t_xyy_xxxz[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxxxz[j] * fl1_fx + pa_x[j] * pc_xxxyyz[j] + 2.0 * pc_xxxxyz[j] * pa_y[j] + 3.0 * pc_xxxyyz[j] * pb_x[j] + pc_xxxxyy[j] * pb_z[j]);

                t_xyy_xxxz[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_48_51(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (48,51)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyy_xxyy = primBuffer.data(150 * idx + 48);

            auto t_xyy_xxyz = primBuffer.data(150 * idx + 49);

            auto t_xyy_xxzz = primBuffer.data(150 * idx + 50);

            // Batch of Integrals (48,51)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, \
                                     pb_xxz, pb_xxzz, pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, pc_xxxyyyz, \
                                     pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, \
                                     pc_xxyyy, pc_xxyyyy, pc_xxyyyz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, \
                                     pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyz, pc_xyyz, pc_xyyzz, pc_xyz, \
                                     pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyz, pc_yyz, pc_yyzz, pc_yz, \
                                     pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xyy_xxyy, t_xyy_xxyz, t_xyy_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyy_xxyy[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xyy[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 0.5 * fl2_fx * pa_yy[j] * pb_x[j] + 2.0 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pb_xyy[j] + 0.5 * pa_xyy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xyy[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_yy[j] * pb_xyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxyy[j] + pa_xyy[j] * pb_xxyy[j]);

                t_xyy_xxyy[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 0.5 * pa_xyy[j] * fl2_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 2.0 * pa_xy[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - fl2_fx * pa_yy[j] * pb_x[j] - 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 4.0 * fl2_fx * pa_y[j] * pb_xy[j] - 3.0 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - fl2_fx * pb_xyy[j] - 0.5 * pa_xyy[j] * pb_xx[j] * fl1_fx - pa_xyy[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xyy[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_yy[j] - 3.0 * pa_xy[j] * pc_y[j] * pb_xx[j] * fl1_fx - pa_xy[j] * pc_y[j] * fl1_fx * pb_yy[j] - 4.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] - 0.5 * pc_x[j] * pa_yy[j] * pb_xx[j] * fl1_fx - 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yy[j] - 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] - 2.0 * fl1_fx * pa_yy[j] * pb_xy[j] * pc_y[j] - 2.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xyy[j] - fl1_fx * pa_yy[j] * pb_xyy[j] - pa_x[j] * fl1_fx * pb_xyy[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxyy[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxyy[j] - 2.0 * pa_xyy[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_xyy[j] * pb_xyy[j] * pc_x[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xxyy[j] - pc_x[j] * pa_yy[j] * pb_xxyy[j]);

                t_xyy_xxyy[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.25 * pa_xyy[j] * fl2_fx + 3.0 * pa_xy[j] * pc_y[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 3.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pc_x[j] * pa_yy[j] * fl2_fx + 4.5 * pc_xy[j] * pa_y[j] * fl2_fx + 6.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 4.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 6.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 3.0 * fl2_fx * pc_yy[j] * pb_x[j] + 6.0 * fl2_fx * pc_y[j] * pb_xy[j] + 0.5 * fl2_fx * pa_yy[j] * pb_x[j] + 2.0 * fl2_fx * pa_y[j] * pb_xy[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pb_xyy[j] + pa_xyy[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xyy[j] * fl1_fx * pc_yy[j] + pa_xyy[j] * fl1_fx * pb_y[j] * pc_y[j] + 3.0 * pa_xy[j] * pc_y[j] * pb_xx[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 2.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_y[j] + pa_xy[j] * pc_y[j] * fl1_fx * pb_yy[j] + 2.0 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 4.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] + 3.0 * pa_x[j] * pc_yy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 3.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_x[j] * pa_yy[j] * pb_xx[j] * fl1_fx + pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_y[j] + 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xy[j] * pa_y[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] + 4.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] + 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_yy[j] * pb_x[j] * pc_yy[j] + 4.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xy[j] + fl1_fx * pc_yy[j] * pb_xyy[j] + 2.0 * fl1_fx * pa_yy[j] * pb_xy[j] * pc_y[j] + 2.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xyy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yy[j] + pa_x[j] * fl1_fx * pb_xyy[j] * pc_x[j] + pc_xx[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxyy[j] + pa_xyy[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_xyy[j] * pb_xy[j] * pc_xy[j] + pa_xyy[j] * pc_xx[j] * pb_yy[j] + 4.0 * pa_xy[j] * pc_yy[j] * pb_xxy[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xyy[j] + pa_x[j] * pc_yy[j] * pb_xxyy[j] + 2.0 * pc_xy[j] * pa_yy[j] * pb_xxy[j] + 2.0 * pc_xx[j] * pa_yy[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xxyy[j]);

                t_xyy_xxyy[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 3.0 * pa_x[j] * pc_yy[j] * fl2_fx - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_xx[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 9.0 * pc_xy[j] * pa_y[j] * fl2_fx - 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 4.5 * pc_xyy[j] * fl2_fx - 9.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxx[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 6.0 * fl2_fx * pc_yy[j] * pb_x[j] - 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 3.0 * fl2_fx * pc_y[j] * pb_xy[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xyy[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xyy[j] * fl1_fx * pc_yy[j] - 6.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xxy[j] * fl1_fx - pa_xy[j] * pc_yyy[j] * fl1_fx - 2.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] - 3.0 * pa_x[j] * pc_yy[j] * pb_xx[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xy[j] * pa_y[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 6.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] - 2.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 4.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyy[j] * pb_xx[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 6.0 * pc_xxy[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xxy[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_x[j] - 2.0 * fl1_fx * pc_yyy[j] * pb_xy[j] - fl1_fx * pa_yy[j] * pb_x[j] * pc_yy[j] - 4.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xy[j] - fl1_fx * pc_yy[j] * pb_xyy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yy[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - pc_xx[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_xyy[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_xyy[j] * pc_xxy[j] * pb_y[j] - 2.0 * pa_xy[j] * pc_yyy[j] * pb_xx[j] - 8.0 * pa_xy[j] * pc_xyy[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_xxy[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_yyy[j] * pb_xxy[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xyy[j] - pc_xyy[j] * pa_yy[j] * pb_xx[j] - 4.0 * pc_xxy[j] * pa_yy[j] * pb_xy[j] - pc_xxx[j] * pa_yy[j] * pb_yy[j] - 4.0 * pc_xyy[j] * pa_y[j] * pb_xxy[j] - 4.0 * pc_xxy[j] * pa_y[j] * pb_xyy[j] - pc_xyy[j] * pb_xxyy[j]);

                t_xyy_xxyy[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 4.5 * pc_xy[j] * pa_y[j] * fl2_fx + 9.0 * pc_xyy[j] * fl2_fx + 4.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xxx[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_yy[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xxy[j] * fl1_fx + pa_xy[j] * pc_yyy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 3.0 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_yy[j] * fl1_fx + 6.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxxy[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyyy[j] * pa_y[j] * fl1_fx + 6.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] + 2.0 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyy[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xxyy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xxxy[j] * fl1_fx * pb_y[j] + 6.0 * pc_xxy[j] * fl1_fx * pb_xy[j] + fl1_fx * pc_yyyy[j] * pb_x[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_x[j] + 2.0 * fl1_fx * pc_yyy[j] * pb_xy[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + pa_xyy[j] * pc_xxyy[j] + 4.0 * pa_xy[j] * pc_xyyy[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxyy[j] * pb_y[j] + pa_x[j] * pc_yyyy[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xyyy[j] * pb_xy[j] + pa_x[j] * pc_xxyy[j] * pb_yy[j] + 2.0 * pc_xxyy[j] * pa_yy[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_yy[j] * pb_y[j] + 2.0 * pc_xyyy[j] * pa_y[j] * pb_xx[j] + 8.0 * pc_xxyy[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xyyy[j] * pb_xxy[j] + 2.0 * pc_xxyy[j] * pb_xyy[j]);

                t_xyy_xxyy[j] += fl_s_0_0_5 * (-4.5 * pc_xyy[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyy[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 3.0 * pc_xxxy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyyy[j] * pa_y[j] * fl1_fx - 6.0 * pc_xxyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxxyy[j] * fl1_fx - 1.5 * pc_xyyyy[j] * fl1_fx - 3.0 * pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxxy[j] * fl1_fx * pb_y[j] - fl1_fx * pc_yyyy[j] * pb_x[j] - 2.0 * pa_xy[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyy[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyyy[j] * pb_y[j] - pc_xxxyy[j] * pa_yy[j] - 4.0 * pc_xxyyy[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxxyy[j] * pa_y[j] * pb_y[j] - pc_xyyyy[j] * pb_xx[j] - 4.0 * pc_xxyyy[j] * pb_xy[j] - pc_xxxyy[j] * pb_yy[j]);

                t_xyy_xxyy[j] += fl_s_0_0_6 * (3.0 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyyy[j] * fl1_fx + pa_x[j] * pc_xxyyyy[j] + 2.0 * pc_xxxyyy[j] * pa_y[j] + 2.0 * pc_xxyyyy[j] * pb_x[j] + 2.0 * pc_xxxyyy[j] * pb_y[j]);

                t_xyy_xxyy[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];

                t_xyy_xxyz[j] = fl_s_0_0_0 * (0.5 * pa_xy[j] * fl2_fx * pb_z[j] + fl2_fx * pa_y[j] * pb_xz[j] + 0.25 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xyy[j] * fl1_fx * pb_yz[j] + pa_xy[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_yy[j] * pb_xyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxyz[j] + pa_xyy[j] * pb_xxyz[j]);

                t_xyy_xxyz[j] += fl_s_0_0_1 * (-0.5 * pa_xy[j] * fl2_fx * pc_z[j] - pa_xy[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 2.0 * fl2_fx * pa_y[j] * pb_xz[j] - 1.5 * fl2_fx * pc_y[j] * pb_xz[j] - 0.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_z[j] - fl2_fx * pb_xyz[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_xyy[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_yz[j] - pa_xy[j] * pc_y[j] * fl1_fx * pb_yz[j] - pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] - pa_xy[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yz[j] - pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] - fl1_fx * pa_yy[j] * pb_xy[j] * pc_z[j] - fl1_fx * pa_yy[j] * pb_xz[j] * pc_y[j] - 2.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xyz[j] - fl1_fx * pa_yy[j] * pb_xyz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_z[j] - pa_x[j] * fl1_fx * pb_xyz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxyz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxyz[j] - pa_xyy[j] * pb_xxy[j] * pc_z[j] - pa_xyy[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_xyy[j] * pb_xyz[j] * pc_x[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xxyz[j] - pc_x[j] * pa_yy[j] * pb_xxyz[j]);

                t_xyy_xxyz[j] += fl_s_0_0_2 * (pa_xy[j] * fl2_fx * pc_z[j] + 0.5 * pa_xy[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 2.0 * fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pc_y[j] * pb_xz[j] + fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yz[j] + fl2_fx * pb_xy[j] * pc_z[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xyy[j] * fl1_fx * pc_yz[j] + 0.5 * pa_xyy[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_xyy[j] * fl1_fx * pc_y[j] * pb_z[j] + pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] + pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] + pa_xy[j] * pc_y[j] * fl1_fx * pb_yz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xz[j] + pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] + pa_xy[j] * fl1_fx * pb_xx[j] * pc_z[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] + pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] + 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] + pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_yy[j] * pb_x[j] * pc_yz[j] + 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] + 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xz[j] + fl1_fx * pc_yy[j] * pb_xyz[j] + fl1_fx * pa_yy[j] * pb_xy[j] * pc_z[j] + fl1_fx * pa_yy[j] * pb_xz[j] * pc_y[j] + 2.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xyz[j] + pa_x[j] * fl1_fx * pb_xy[j] * pc_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_z[j] + pa_x[j] * fl1_fx * pb_xyz[j] * pc_x[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + pc_xx[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxyz[j] + pa_xyy[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_xyy[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_xyy[j] * pb_xz[j] * pc_xy[j] + pa_xyy[j] * pc_xx[j] * pb_yz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xxy[j] + 2.0 * pa_xy[j] * pc_yy[j] * pb_xxz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xyz[j] + pa_x[j] * pc_yy[j] * pb_xxyz[j] + pc_xz[j] * pa_yy[j] * pb_xxy[j] + pc_xy[j] * pa_yy[j] * pb_xxz[j] + 2.0 * pc_xx[j] * pa_yy[j] * pb_xyz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xxyz[j]);

                t_xyy_xxyz[j] += fl_s_0_0_3 * (-0.5 * pa_xy[j] * fl2_fx * pc_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - fl2_fx * pa_y[j] * pb_x[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_xz[j] - 0.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_z[j] - 0.5 * pa_xyy[j] * fl1_fx * pc_yz[j] - pa_xy[j] * pc_yyz[j] * fl1_fx - pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] - pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] - pa_xy[j] * fl1_fx * pc_xxz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xz[j] - pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] - 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] - 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xz[j] * pa_y[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] - fl1_fx * pc_yyz[j] * pb_xy[j] - fl1_fx * pc_yyy[j] * pb_xz[j] - fl1_fx * pa_yy[j] * pb_x[j] * pc_yz[j] - 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] - 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_xz[j] - fl1_fx * pc_yy[j] * pb_xyz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_y[j] - pa_x[j] * fl1_fx * pb_xy[j] * pc_xz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yz[j] - pc_xxz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - pc_xx[j] * fl1_fx * pb_xyz[j] - 2.0 * pa_xyy[j] * pb_x[j] * pc_xyz[j] - pa_xyy[j] * pc_xxz[j] * pb_y[j] - pa_xyy[j] * pc_xxy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yyz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xy[j] - 4.0 * pa_xy[j] * pc_xyy[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xxy[j] * pb_yz[j] - pa_x[j] * pc_yyz[j] * pb_xxy[j] - pa_x[j] * pc_yyy[j] * pb_xxz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xyz[j] - pc_xyz[j] * pa_yy[j] * pb_xx[j] - 2.0 * pc_xxz[j] * pa_yy[j] * pb_xy[j] - 2.0 * pc_xxy[j] * pa_yy[j] * pb_xz[j] - pc_xxx[j] * pa_yy[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xxy[j] - 2.0 * pc_xyy[j] * pa_y[j] * pb_xxz[j] - 4.0 * pc_xxy[j] * pa_y[j] * pb_xyz[j] - pc_xyy[j] * pb_xxyz[j]);

                t_xyy_xxyz[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + pa_xy[j] * pc_yyz[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_xxz[j] + 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xxxz[j] * pa_y[j] * fl1_fx + 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_x[j] + pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_xz[j] + fl1_fx * pc_yyyz[j] * pb_x[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] + fl1_fx * pc_yyz[j] * pb_xy[j] + fl1_fx * pc_yyy[j] * pb_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_y[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_y[j] + pc_xxz[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] + pa_xyy[j] * pc_xxyz[j] + 4.0 * pa_xy[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xxyy[j] * pb_z[j] + pa_x[j] * pc_yyyz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_xz[j] + pa_x[j] * pc_xxyy[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_yy[j] * pb_x[j] + pc_xxxz[j] * pa_yy[j] * pb_y[j] + pc_xxxy[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xyyz[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_xy[j] + 4.0 * pc_xxyy[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pb_xxy[j] + pc_xyyy[j] * pb_xxz[j] + 2.0 * pc_xxyy[j] * pb_xyz[j]);

                t_xyy_xxyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - fl1_fx * pc_yyyz[j] * pb_x[j] - 0.5 * pc_xxxz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - pa_x[j] * pc_xxyyz[j] * pb_y[j] - pa_x[j] * pc_xxyyy[j] * pb_z[j] - pc_xxxyz[j] * pa_yy[j] - 4.0 * pc_xxyyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxxyy[j] * pa_y[j] * pb_z[j] - pc_xyyyz[j] * pb_xx[j] - 2.0 * pc_xxyyz[j] * pb_xy[j] - 2.0 * pc_xxyyy[j] * pb_xz[j] - pc_xxxyy[j] * pb_yz[j]);

                t_xyy_xxyz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_x[j] * pc_xxyyyz[j] + 2.0 * pc_xxxyyz[j] * pa_y[j] + 2.0 * pc_xxyyyz[j] * pb_x[j] + pc_xxxyyz[j] * pb_y[j] + pc_xxxyyy[j] * pb_z[j]);

                t_xyy_xxyz[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];

                t_xyy_xxzz[j] = fl_s_0_0_0 * (0.125 * pa_x[j] * fl3_fx + 0.25 * fl3_fx * pb_x[j] + 0.25 * pa_xyy[j] * fl2_fx + 0.5 * fl2_fx * pa_yy[j] * pb_x[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * fl2_fx * pb_xzz[j] + 0.5 * pa_xyy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xyy[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_yy[j] * pb_xzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxzz[j] + pa_xyy[j] * pb_xxzz[j]);

                t_xyy_xxzz[j] += fl_s_0_0_1 * (-0.375 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 0.5 * pa_xyy[j] * fl2_fx - 0.5 * pa_xy[j] * pc_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - fl2_fx * pa_yy[j] * pb_x[j] - fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - fl2_fx * pb_xz[j] * pc_z[j] - fl2_fx * pb_xzz[j] - 0.5 * pa_xyy[j] * pb_xx[j] * fl1_fx - pa_xyy[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_zz[j] - pa_xy[j] * pc_y[j] * pb_xx[j] * fl1_fx - pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_x[j] * pa_yy[j] * pb_xx[j] * fl1_fx - 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] - 2.0 * fl1_fx * pa_yy[j] * pb_xz[j] * pc_z[j] - 2.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xzz[j] - fl1_fx * pa_yy[j] * pb_xzz[j] - pa_x[j] * fl1_fx * pb_xxz[j] * pc_z[j] - pa_x[j] * fl1_fx * pb_xzz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxzz[j] - 2.0 * pa_xyy[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_xyy[j] * pb_xzz[j] * pc_x[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xxzz[j] - pc_x[j] * pa_yy[j] * pb_xxzz[j]);

                t_xyy_xxzz[j] += fl_s_0_0_2 * (0.375 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xyy[j] * fl2_fx + pa_xy[j] * pc_y[j] * fl2_fx + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_x[j] * pa_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 2.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + 0.5 * fl2_fx * pa_yy[j] * pb_x[j] + pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pc_x[j] * fl2_fx * pb_xx[j] + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.5 * fl2_fx * pb_x[j] * pc_zz[j] + 2.0 * fl2_fx * pb_xz[j] * pc_z[j] + 0.5 * fl2_fx * pb_xzz[j] + pa_xyy[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xyy[j] * fl1_fx * pc_zz[j] + pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] + pa_xy[j] * pc_y[j] * pb_xx[j] * fl1_fx + 2.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 2.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 0.5 * pa_x[j] * pc_yy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 0.5 * pc_x[j] * pa_yy[j] * pb_xx[j] * fl1_fx + pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] + pc_xy[j] * pa_y[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_yy[j] * pb_x[j] * pc_zz[j] + 4.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] + fl1_fx * pc_yy[j] * pb_xzz[j] + 2.0 * fl1_fx * pa_yy[j] * pb_xz[j] * pc_z[j] + 2.0 * fl1_fx * pa_y[j] * pc_y[j] * pb_xzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_zz[j] + 2.0 * pa_x[j] * fl1_fx * pb_xz[j] * pc_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_zz[j] + pa_x[j] * fl1_fx * pb_xxz[j] * pc_z[j] + pa_x[j] * fl1_fx * pb_xzz[j] * pc_x[j] + pc_xz[j] * fl1_fx * pb_xxz[j] + pc_xx[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxzz[j] + pa_xyy[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_xyy[j] * pb_xz[j] * pc_xz[j] + pa_xyy[j] * pc_xx[j] * pb_zz[j] + 4.0 * pa_xy[j] * pc_yz[j] * pb_xxz[j] + 4.0 * pa_xy[j] * pc_xy[j] * pb_xzz[j] + pa_x[j] * pc_yy[j] * pb_xxzz[j] + 2.0 * pc_xz[j] * pa_yy[j] * pb_xxz[j] + 2.0 * pc_xx[j] * pa_yy[j] * pb_xzz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xxzz[j]);

                t_xyy_xxzz[j] += fl_s_0_0_3 * (-0.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.25 * fl3_fx * pb_x[j] - 0.5 * pa_xy[j] * pc_y[j] * fl2_fx - 0.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - fl2_fx * pc_yy[j] * pb_x[j] - fl2_fx * pa_y[j] * pc_y[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_xx[j] - 0.5 * pa_x[j] * fl2_fx * pc_zz[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - pc_xx[j] * fl2_fx * pb_x[j] - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - fl2_fx * pb_x[j] * pc_zz[j] - fl2_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xyy[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xyy[j] * fl1_fx * pc_zz[j] - 2.0 * pa_xy[j] * pc_xy[j] * pb_x[j] * fl1_fx - pa_xy[j] * pc_xxy[j] * fl1_fx - pa_xy[j] * pc_yzz[j] * fl1_fx - 2.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yy[j] * pb_xx[j] * fl1_fx - pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] - pc_xx[j] * pa_yy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] - pc_xy[j] * pa_y[j] * pb_xx[j] * fl1_fx - 2.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xyy[j] * pb_xx[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 2.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] - 2.0 * fl1_fx * pc_yyz[j] * pb_xz[j] - fl1_fx * pa_yy[j] * pb_x[j] * pc_zz[j] - 4.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] - fl1_fx * pc_yy[j] * pb_xzz[j] - pa_x[j] * fl1_fx * pb_x[j] * pc_xzz[j] - pa_x[j] * fl1_fx * pc_xxz[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_zz[j] - 2.0 * pa_x[j] * fl1_fx * pb_xz[j] * pc_xz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_zz[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xxz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - pc_xz[j] * fl1_fx * pb_xxz[j] - pc_xx[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_xyy[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_xyy[j] * pc_xxz[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_xx[j] - 8.0 * pa_xy[j] * pc_xyz[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xxy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_yyz[j] * pb_xxz[j] - 2.0 * pa_x[j] * pc_xyy[j] * pb_xzz[j] - pc_xzz[j] * pa_yy[j] * pb_xx[j] - 4.0 * pc_xxz[j] * pa_yy[j] * pb_xz[j] - pc_xxx[j] * pa_yy[j] * pb_zz[j] - 4.0 * pc_xyz[j] * pa_y[j] * pb_xxz[j] - 4.0 * pc_xxy[j] * pa_y[j] * pb_xzz[j] - pc_xyy[j] * pb_xxzz[j]);

                t_xyy_xxzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pc_xxx[j] * fl2_fx + 1.5 * pc_xzz[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pb_x[j] * pc_zz[j] + pa_xy[j] * pc_xxy[j] * fl1_fx + pa_xy[j] * pc_yzz[j] * fl1_fx + pa_x[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx + pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_yy[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_yy[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_y[j] * pb_x[j] * fl1_fx + pc_xxxy[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pb_xx[j] * fl1_fx + pc_xxyy[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + fl1_fx * pc_yyzz[j] * pb_x[j] + 2.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] + 2.0 * fl1_fx * pc_yyz[j] * pb_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] + pa_x[j] * fl1_fx * pb_x[j] * pc_xzz[j] + pa_x[j] * fl1_fx * pc_xxz[j] * pb_z[j] + pc_xxzz[j] * fl1_fx * pb_x[j] + pc_xxxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + 2.0 * pc_xxz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + pa_xyy[j] * pc_xxzz[j] + 4.0 * pa_xy[j] * pc_xyzz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xxyz[j] * pb_z[j] + pa_x[j] * pc_yyzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_xz[j] + pa_x[j] * pc_xxyy[j] * pb_zz[j] + 2.0 * pc_xxzz[j] * pa_yy[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_xx[j] + 8.0 * pc_xxyz[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxxy[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xyyz[j] * pb_xxz[j] + 2.0 * pc_xxyy[j] * pb_xzz[j]);

                t_xyy_xxzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx - pc_xxxy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - pc_xxyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxyy[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - fl1_fx * pc_yyzz[j] * pb_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] - 0.5 * pc_xxxzz[j] * fl1_fx - pc_xxzz[j] * fl1_fx * pb_x[j] - pc_xxxz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxxzz[j] * pa_yy[j] - 4.0 * pc_xxyzz[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxxyz[j] * pa_y[j] * pb_z[j] - pc_xyyzz[j] * pb_xx[j] - 4.0 * pc_xxyyz[j] * pb_xz[j] - pc_xxxyy[j] * pb_zz[j]);

                t_xyy_xxzz[j] += fl_s_0_0_6 * (0.5 * pc_xxxyy[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + pa_x[j] * pc_xxyyzz[j] + 2.0 * pc_xxxyzz[j] * pa_y[j] + 2.0 * pc_xxyyzz[j] * pb_x[j] + 2.0 * pc_xxxyyz[j] * pb_z[j]);

                t_xyy_xxzz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_51_54(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (51,54)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyy = pcDistances.data(119 * idx + 98);

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyy_xyyy = primBuffer.data(150 * idx + 51);

            auto t_xyy_xyyz = primBuffer.data(150 * idx + 52);

            auto t_xyy_xyzz = primBuffer.data(150 * idx + 53);

            // Batch of Integrals (51,54)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, \
                                     pb_xyz, pb_xyzz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyy, pc_xxyyyyz, \
                                     pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyz, pc_xyyyz, pc_xyyyzz, pc_xyyz, \
                                     pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, \
                                     pc_yyyyz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyy_xyyy, \
                                     t_xyy_xyyz, t_xyy_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyy_xyyy[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_xy[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_yy[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_xyy[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xy[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xyyy[j] + pa_xyy[j] * pb_xyyy[j]);

                t_xyy_xyyy[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_y[j] - 1.875 * fl3_fx * pc_y[j] - 3.375 * fl3_fx * pb_y[j] - 3.0 * pa_xy[j] * fl2_fx * pb_x[j] - 1.5 * pa_xy[j] * fl2_fx * pc_x[j] - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 2.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 4.5 * pa_x[j] * fl2_fx * pb_xy[j] - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pa_yy[j] * pb_y[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 3.0 * fl2_fx * pa_y[j] * pb_yy[j] - 2.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_xyy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xyy[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx - 9.0 * pa_xy[j] * pc_y[j] * pb_xy[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 3.0 * pa_xy[j] * fl1_fx * pb_xyy[j] - 4.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_x[j] * pa_yy[j] * pb_xy[j] * fl1_fx - 3.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] - 1.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_yyy[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yyy[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyy[j] - 0.5 * pa_x[j] * fl1_fx * pb_xyyy[j] - 0.5 * pc_x[j] * fl1_fx * pb_xyyy[j] - 3.0 * pa_xyy[j] * pb_xyy[j] * pc_y[j] - pa_xyy[j] * pc_x[j] * pb_yyy[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xyyy[j] - pc_x[j] * pa_yy[j] * pb_xyyy[j]);

                t_xyy_xyyy[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_y[j] + 5.625 * fl3_fx * pc_y[j] + 3.375 * fl3_fx * pb_y[j] + 3.0 * pa_xy[j] * fl2_fx * pc_x[j] + 1.5 * pa_xy[j] * fl2_fx * pb_x[j] + 7.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 3.75 * pa_x[j] * pc_xy[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_xy[j] + 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pb_x[j] + 2.25 * pc_xx[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pb_xy[j] + 1.5 * fl2_fx * pa_yy[j] * pc_y[j] + 9.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 3.0 * fl2_fx * pa_y[j] * pc_yy[j] + 4.5 * fl2_fx * pc_yy[j] * pb_y[j] + 4.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.75 * fl2_fx * pa_yy[j] * pb_y[j] + 1.5 * fl2_fx * pa_y[j] * pb_yy[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_xyy[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_xy[j] * fl1_fx + 9.0 * pa_xy[j] * pc_y[j] * pb_xy[j] * fl1_fx + 6.0 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 9.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx + 3.0 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] + 9.0 * pa_x[j] * pc_yy[j] * pb_xy[j] * fl1_fx + 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 4.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_x[j] * pa_yy[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx + 1.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx + 9.0 * pc_xy[j] * pa_y[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] + 3.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] + 4.5 * pc_xy[j] * fl1_fx * pb_xyy[j] + 1.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_yy[j] + 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yy[j] + 0.5 * fl1_fx * pc_yy[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_yyy[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_x[j] * fl1_fx * pb_xyyy[j] + 3.0 * pa_xyy[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_xyy[j] * pc_xy[j] * pb_yy[j] + 6.0 * pa_xy[j] * pc_yy[j] * pb_xyy[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_yyy[j] + pa_x[j] * pc_yy[j] * pb_xyyy[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_xyy[j] + pc_xx[j] * pa_yy[j] * pb_yyy[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xyyy[j]);

                t_xyy_xyyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pa_y[j] - 1.125 * fl3_fx * pb_y[j] - 1.5 * pa_xy[j] * fl2_fx * pc_x[j] - 7.5 * pa_x[j] * pc_xy[j] * fl2_fx - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 2.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.0 * pc_xx[j] * pa_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 7.5 * pc_xy[j] * fl2_fx * pb_x[j] - 3.75 * pc_xxy[j] * fl2_fx - 4.5 * pc_xx[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 6.0 * fl2_fx * pa_y[j] * pc_yy[j] - 9.0 * fl2_fx * pc_yy[j] * pb_y[j] - 2.5 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pa_yy[j] * pc_y[j] - 4.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - 2.25 * fl2_fx * pc_y[j] * pb_yy[j] - 1.5 * pa_xyy[j] * pc_xy[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 9.0 * pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_x[j] * pc_yy[j] * pb_xy[j] * fl1_fx - 5.0 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_yy[j] * fl1_fx - 9.0 * pc_xy[j] * pa_y[j] * pb_xy[j] * fl1_fx - 6.0 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx - 3.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] - 9.0 * pc_xyy[j] * pb_xy[j] * fl1_fx - 4.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yyy[j] - 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_y[j] - 1.5 * fl1_fx * pc_yyy[j] * pb_yy[j] - 1.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_yy[j] - 3.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yy[j] - 0.5 * fl1_fx * pc_yy[j] * pb_yyy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] - pa_xyy[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_xyy[j] * pc_xyy[j] * pb_y[j] - 6.0 * pa_xy[j] * pc_yyy[j] * pb_xy[j] - 6.0 * pa_xy[j] * pc_xyy[j] * pb_yy[j] - 3.0 * pa_x[j] * pc_yyy[j] * pb_xyy[j] - pa_x[j] * pc_xyy[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_yy[j] * pb_xy[j] - 3.0 * pc_xxy[j] * pa_yy[j] * pb_yy[j] - 6.0 * pc_xyy[j] * pa_y[j] * pb_xyy[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_yyy[j] - pc_xyy[j] * pb_xyyy[j]);

                t_xyy_xyyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 3.75 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 7.5 * pc_xxy[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pb_x[j] + 2.25 * pc_xx[j] * fl2_fx * pb_y[j] + 5.0 * fl2_fx * pc_yyy[j] + 3.0 * fl2_fx * pa_y[j] * pc_yy[j] + 4.5 * fl2_fx * pc_yy[j] * pb_y[j] + 6.0 * pa_xy[j] * pc_xyy[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 9.0 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx + 5.0 * pa_x[j] * pc_xyyy[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_yy[j] * fl1_fx + 6.0 * pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx + 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx + 9.0 * pc_xyy[j] * pb_xy[j] * fl1_fx + 5.0 * pc_xyyy[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxyy[j] * pb_y[j] * fl1_fx + 4.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_y[j] * pc_yyyy[j] + 1.5 * fl1_fx * pc_yyyy[j] * pb_y[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yyy[j] + 3.0 * fl1_fx * pa_y[j] * pc_yyy[j] * pb_y[j] + 1.5 * fl1_fx * pc_yyy[j] * pb_yy[j] + pa_xyy[j] * pc_xyyy[j] + 2.0 * pa_xy[j] * pc_yyyy[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xyyy[j] * pb_y[j] + 3.0 * pa_x[j] * pc_yyyy[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xyyy[j] * pb_yy[j] + pc_xyyy[j] * pa_yy[j] * pb_x[j] + 3.0 * pc_xxyy[j] * pa_yy[j] * pb_y[j] + 6.0 * pc_xyyy[j] * pa_y[j] * pb_xy[j] + 6.0 * pc_xxyy[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xyyy[j] * pb_xyy[j] + pc_xxyy[j] * pb_yyy[j]);

                t_xyy_xyyy[j] += fl_s_0_0_5 * (-3.75 * pc_xxy[j] * fl2_fx - 2.5 * fl2_fx * pc_yyy[j] - 5.0 * pa_x[j] * pc_xyyy[j] * fl1_fx - 6.0 * pc_xxyy[j] * pa_y[j] * fl1_fx - 5.0 * pc_xyyy[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxyy[j] * pb_y[j] * fl1_fx - 5.0 * pc_xxyyy[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyyy[j] - fl1_fx * pa_y[j] * pc_yyyy[j] - 1.5 * fl1_fx * pc_yyyy[j] * pb_y[j] - 2.0 * pa_xy[j] * pc_xyyyy[j] - pa_x[j] * pc_yyyyy[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xyyyy[j] * pb_y[j] - pc_xxyyy[j] * pa_yy[j] - 2.0 * pc_xyyyy[j] * pa_y[j] * pb_x[j] - 6.0 * pc_xxyyy[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xyyyy[j] * pb_xy[j] - 3.0 * pc_xxyyy[j] * pb_yy[j]);

                t_xyy_xyyy[j] += fl_s_0_0_6 * (5.0 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyy[j] + pa_x[j] * pc_xyyyyy[j] + 2.0 * pc_xxyyyy[j] * pa_y[j] + pc_xyyyyy[j] * pb_x[j] + 3.0 * pc_xxyyyy[j] * pb_y[j]);

                t_xyy_xyyy[j] += -fl_s_0_0_7 * pc_xxyyyyy[j];

                t_xyy_xyyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pa_yy[j] * pb_z[j] + fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xyy[j] * pb_xz[j] * fl1_fx + 2.0 * pa_xy[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xyyz[j] + pa_xyy[j] * pb_xyyz[j]);

                t_xyy_xyyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.25 * fl2_fx * pa_yy[j] * pc_z[j] - 0.5 * fl2_fx * pa_yy[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 2.0 * fl2_fx * pa_y[j] * pb_yz[j] - 1.5 * fl2_fx * pc_y[j] * pb_yz[j] - 0.25 * fl2_fx * pb_yy[j] * pc_z[j] - 0.5 * fl2_fx * pb_yyz[j] - 0.5 * pa_xyy[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyy[j] * pb_xz[j] * fl1_fx - 0.5 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] - 3.0 * pa_xy[j] * pc_y[j] * pb_xz[j] * fl1_fx - 2.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xyz[j] - 3.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_x[j] * pa_yy[j] * pb_xz[j] * fl1_fx - 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_z[j] - fl1_fx * pa_yy[j] * pb_yz[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yyz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xyyz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xyyz[j] - pa_xyy[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_xyy[j] * pb_xyz[j] * pc_y[j] - pa_xyy[j] * pc_x[j] * pb_yyz[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xyyz[j] - pc_x[j] * pa_yy[j] * pb_xyyz[j]);

                t_xyy_xyyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_xz[j] + 0.5 * fl2_fx * pa_yy[j] * pc_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 2.0 * fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * fl2_fx * pc_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_yy[j] * pb_z[j] + fl2_fx * pa_y[j] * pb_yz[j] + 0.5 * fl2_fx * pb_yy[j] * pc_z[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xyy[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_xyy[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_x[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xy[j] * pc_y[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_y[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xy[j] * pc_z[j] + 2.0 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_yy[j] * pb_xz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 3.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx + 0.5 * pc_x[j] * pa_yy[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xy[j] * pa_y[j] * pb_xz[j] * fl1_fx + 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] + 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] + 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] + fl1_fx * pa_yy[j] * pb_y[j] * pc_yz[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_z[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] + 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yy[j] * pc_z[j] + fl1_fx * pa_yy[j] * pb_yz[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xyyz[j] + 2.0 * pa_xyy[j] * pb_xy[j] * pc_yz[j] + pa_xyy[j] * pb_xz[j] * pc_yy[j] + pa_xyy[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_xyy[j] * pc_xy[j] * pb_yz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xyy[j] + 4.0 * pa_xy[j] * pc_yy[j] * pb_xyz[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_yyz[j] + pa_x[j] * pc_yy[j] * pb_xyyz[j] + pc_xz[j] * pa_yy[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_yy[j] * pb_xyz[j] + pc_xx[j] * pa_yy[j] * pb_yyz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xyyz[j]);

                t_xyy_xyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yy[j] * pb_z[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 0.25 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - fl2_fx * pa_y[j] * pb_y[j] * pc_z[j] - 1.5 * fl2_fx * pc_y[j] * pb_yz[j] - 0.25 * fl2_fx * pb_yy[j] * pc_z[j] - 0.5 * pa_xyy[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_yy[j] * pb_xz[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 3.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxz[j] * pa_yy[j] * fl1_fx - 0.5 * pc_xx[j] * pa_yy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 3.0 * pc_xy[j] * pa_y[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xy[j] - 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xyy[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yyz[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] - fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_yy[j] - fl1_fx * pc_yyy[j] * pb_yz[j] - fl1_fx * pa_yy[j] * pb_y[j] * pc_yz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yy[j] * pb_z[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] - 2.0 * fl1_fx * pa_y[j] * pc_yy[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_yyz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yy[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xyy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] - pa_xyy[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_xyy[j] * pc_xyz[j] * pb_y[j] - pa_xyy[j] * pc_xyy[j] * pb_z[j] - 4.0 * pa_xy[j] * pc_yyz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_yyy[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_yy[j] - 4.0 * pa_xy[j] * pc_xyy[j] * pb_yz[j] - pa_x[j] * pc_yyz[j] * pb_xyy[j] - 2.0 * pa_x[j] * pc_yyy[j] * pb_xyz[j] - pa_x[j] * pc_xyy[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_yy[j] * pb_xy[j] - pc_xyy[j] * pa_yy[j] * pb_xz[j] - pc_xxz[j] * pa_yy[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_yy[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xyy[j] - 4.0 * pc_xyy[j] * pa_y[j] * pb_xyz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_yyz[j] - pc_xyy[j] * pb_xyyz[j]);

                t_xyy_xyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyy[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_yz[j] + fl1_fx * pa_y[j] * pc_yyyz[j] + fl1_fx * pc_yyyz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yyz[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] + fl1_fx * pa_y[j] * pc_yyy[j] * pb_z[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_yy[j] + fl1_fx * pc_yyy[j] * pb_yz[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + pa_xyy[j] * pc_xyyz[j] + 2.0 * pa_xy[j] * pc_yyyz[j] * pb_x[j] + 4.0 * pa_xy[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xyyy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yyyz[j] * pb_xy[j] + pa_x[j] * pc_yyyy[j] * pb_xz[j] + pa_x[j] * pc_xyyz[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_xyyy[j] * pb_yz[j] + pc_xyyz[j] * pa_yy[j] * pb_x[j] + 2.0 * pc_xxyz[j] * pa_yy[j] * pb_y[j] + pc_xxyy[j] * pa_yy[j] * pb_z[j] + 4.0 * pc_xyyz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xyyy[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_yy[j] + 4.0 * pc_xxyy[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pb_xyy[j] + 2.0 * pc_xyyy[j] * pb_xyz[j] + pc_xxyy[j] * pb_yyz[j]);

                t_xyy_xyyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyyz[j] - fl1_fx * pa_y[j] * pc_yyyz[j] - fl1_fx * pc_yyyz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_xyyyz[j] - pa_x[j] * pc_yyyyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_y[j] - pa_x[j] * pc_xyyyy[j] * pb_z[j] - pc_xxyyz[j] * pa_yy[j] - 2.0 * pc_xyyyz[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxyyz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyyy[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xyyyz[j] * pb_xy[j] - pc_xyyyy[j] * pb_xz[j] - pc_xxyyz[j] * pb_yy[j] - 2.0 * pc_xxyyy[j] * pb_yz[j]);

                t_xyy_xyyz[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + pa_x[j] * pc_xyyyyz[j] + 2.0 * pc_xxyyyz[j] * pa_y[j] + pc_xyyyyz[j] * pb_x[j] + 2.0 * pc_xxyyyz[j] * pb_y[j] + pc_xxyyyy[j] * pb_z[j]);

                t_xyy_xyyz[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];

                t_xyy_xyzz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_y[j] + 0.125 * fl3_fx * pb_y[j] + 0.5 * pa_xy[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_yy[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_zz[j] + 0.25 * pa_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xyy[j] * pb_xy[j] * fl1_fx + pa_xy[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xyzz[j] + pa_xyy[j] * pb_xyzz[j]);

                t_xyy_xyzz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - pa_xy[j] * fl2_fx * pb_x[j] - 0.5 * pa_xy[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.5 * fl2_fx * pa_yy[j] * pb_y[j] - 0.25 * fl2_fx * pa_yy[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - fl2_fx * pa_y[j] * pb_zz[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.25 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.5 * fl2_fx * pb_yzz[j] - 0.5 * pa_xyy[j] * pb_xy[j] * fl1_fx - 0.5 * pa_xyy[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx - pa_xy[j] * pc_y[j] * pb_xy[j] * fl1_fx - 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] - pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] - pa_xy[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_x[j] * pa_yy[j] * pb_xy[j] * fl1_fx - pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] - fl1_fx * pa_yy[j] * pb_yz[j] * pc_z[j] - 0.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_zz[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_yzz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_yzz[j] - pa_x[j] * fl1_fx * pb_xyz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xyzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xyzz[j] - 2.0 * pa_xyy[j] * pb_xyz[j] * pc_z[j] - pa_xyy[j] * pb_xzz[j] * pc_y[j] - pa_xyy[j] * pc_x[j] * pb_yzz[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xyzz[j] - pc_x[j] * pa_yy[j] * pb_xyzz[j]);

                t_xyy_xyzz[j] += fl_s_0_0_2 * (0.75 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.375 * fl3_fx * pb_y[j] + pa_xy[j] * fl2_fx * pc_x[j] + 0.5 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pa_yy[j] * pc_y[j] + fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.5 * fl2_fx * pa_y[j] * pc_zz[j] + 2.0 * fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.25 * fl2_fx * pa_yy[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_zz[j] + 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.25 * pa_x[j] * fl2_fx * pb_xy[j] + 0.5 * pc_x[j] * fl2_fx * pb_xy[j] + 0.25 * pc_xx[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pb_y[j] * pc_zz[j] + fl2_fx * pb_yz[j] * pc_z[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xyy[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_xy[j] * fl1_fx + pa_xy[j] * pc_y[j] * pb_xy[j] * fl1_fx + pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx + pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx + pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_z[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_z[j] + pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] + 0.5 * pa_x[j] * pc_yy[j] * pb_xy[j] * fl1_fx + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_x[j] * pa_yy[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx + pc_xy[j] * pa_y[j] * pb_xy[j] * fl1_fx + 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] + pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_zz[j] + fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] + 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] + fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_yzz[j] + fl1_fx * pa_yy[j] * pb_yz[j] * pc_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_y[j] * pb_zz[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_zz[j] + pa_x[j] * fl1_fx * pc_xz[j] * pb_yz[j] + pa_x[j] * fl1_fx * pb_xyz[j] * pc_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yzz[j] + pc_xz[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xyzz[j] + pa_xyy[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_xyy[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_xyy[j] * pc_xz[j] * pb_yz[j] + pa_xyy[j] * pc_xy[j] * pb_zz[j] + 4.0 * pa_xy[j] * pc_yz[j] * pb_xyz[j] + 2.0 * pa_xy[j] * pc_yy[j] * pb_xzz[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_yzz[j] + pa_x[j] * pc_yy[j] * pb_xyzz[j] + 2.0 * pc_xz[j] * pa_yy[j] * pb_xyz[j] + pc_xy[j] * pa_yy[j] * pb_xzz[j] + pc_xx[j] * pa_yy[j] * pb_yzz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xyzz[j]);

                t_xyy_xyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.25 * fl3_fx * pa_y[j] - 0.125 * fl3_fx * pb_y[j] - 0.5 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - pc_xx[j] * pa_y[j] * fl2_fx - 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - fl2_fx * pa_y[j] * pc_yy[j] - fl2_fx * pa_y[j] * pc_zz[j] - 0.5 * fl2_fx * pc_yy[j] * pb_y[j] - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pa_yy[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_y[j] - fl2_fx * pa_y[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.25 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pb_y[j] * pc_zz[j] - 0.5 * fl2_fx * pb_yz[j] * pc_z[j] - 0.5 * pa_xyy[j] * pc_xy[j] * fl1_fx - pa_xy[j] * pc_yy[j] * pb_x[j] * fl1_fx - pa_xy[j] * pc_xy[j] * pb_y[j] * fl1_fx - pa_xy[j] * pc_xyy[j] * fl1_fx - pa_xy[j] * fl1_fx * pc_xzz[j] - pa_xy[j] * fl1_fx * pb_x[j] * pc_zz[j] - 2.0 * pa_xy[j] * fl1_fx * pc_xz[j] * pb_z[j] - 0.5 * pa_x[j] * pc_yy[j] * pb_xy[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 0.5 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * pa_yy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xx[j] * pa_yy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_yy[j] * fl1_fx - pc_xy[j] * pa_y[j] * pb_xy[j] * fl1_fx - pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx - pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx - pc_xzz[j] * pa_y[j] * fl1_fx * pb_x[j] - 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_xz[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xyy[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pa_yy[j] * pc_yzz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] - 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] - fl1_fx * pc_yyz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_y[j] * pc_zz[j] - fl1_fx * pa_yy[j] * pc_yz[j] * pb_z[j] - 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] - fl1_fx * pa_y[j] * pc_yy[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_yzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] - 0.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_zz[j] - pa_x[j] * fl1_fx * pc_xz[j] * pb_yz[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_xy[j] - pc_xxz[j] * fl1_fx * pb_yz[j] - pc_xz[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] - pa_xyy[j] * pb_x[j] * pc_yzz[j] - pa_xyy[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xyy[j] * pc_xyz[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_xy[j] - 4.0 * pa_xy[j] * pc_yyz[j] * pb_xz[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_xy[j] * pc_xyy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_yyz[j] * pb_xyz[j] - pa_x[j] * pc_yyy[j] * pb_xzz[j] - pa_x[j] * pc_xyy[j] * pb_yzz[j] - pc_xzz[j] * pa_yy[j] * pb_xy[j] - 2.0 * pc_xyz[j] * pa_yy[j] * pb_xz[j] - 2.0 * pc_xxz[j] * pa_yy[j] * pb_yz[j] - pc_xxy[j] * pa_yy[j] * pb_zz[j] - 4.0 * pc_xyz[j] * pa_y[j] * pb_xyz[j] - 2.0 * pc_xyy[j] * pa_y[j] * pb_xzz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_yzz[j] - pc_xyy[j] * pb_xyzz[j]);

                t_xyy_xyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 0.5 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pc_yyy[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.5 * fl2_fx * pa_y[j] * pc_yy[j] + 0.5 * fl2_fx * pa_y[j] * pc_zz[j] + 0.25 * fl2_fx * pc_yy[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 0.25 * pc_xx[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pb_y[j] * pc_zz[j] + pa_xy[j] * pc_xyy[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_xzz[j] + 0.5 * pa_x[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * pc_xyy[j] * pb_y[j] * fl1_fx + 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_yy[j] * fl1_fx + pc_xyy[j] * pa_y[j] * pb_x[j] * fl1_fx + pc_xxy[j] * pa_y[j] * pb_y[j] * fl1_fx + pc_xxyy[j] * pa_y[j] * fl1_fx + pc_xxzz[j] * pa_y[j] * fl1_fx + pc_xzz[j] * pa_y[j] * fl1_fx * pb_x[j] + 2.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xyyy[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxyy[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_y[j] * pc_yyzz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_y[j] + fl1_fx * pc_yyyz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_yzz[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] + 2.0 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] + fl1_fx * pc_yyz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yyy[j] * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] + 0.5 * pc_xxzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_xy[j] + pc_xxz[j] * fl1_fx * pb_yz[j] + pa_xyy[j] * pc_xyzz[j] + 2.0 * pa_xy[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_xyyz[j] * pb_z[j] + pa_x[j] * pc_yyzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_yyyz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_yz[j] + pa_x[j] * pc_xyyy[j] * pb_zz[j] + pc_xyzz[j] * pa_yy[j] * pb_x[j] + pc_xxzz[j] * pa_yy[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_xy[j] + 4.0 * pc_xyyz[j] * pa_y[j] * pb_xz[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_yz[j] + 2.0 * pc_xxyy[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xyyz[j] * pb_xyz[j] + pc_xyyy[j] * pb_xzz[j] + pc_xxyy[j] * pb_yzz[j]);

                t_xyy_xyzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.25 * fl2_fx * pc_yyy[j] - 0.75 * fl2_fx * pc_yzz[j] - 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - pc_xxyy[j] * pa_y[j] * fl1_fx - pc_xxzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xyyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyyzz[j] - fl1_fx * pa_y[j] * pc_yyzz[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_y[j] - fl1_fx * pc_yyyz[j] * pb_z[j] - 0.5 * pc_xxzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_xyyzz[j] - pa_x[j] * pc_yyyzz[j] * pb_x[j] - pa_x[j] * pc_xyyzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_z[j] - pc_xxyzz[j] * pa_yy[j] - 2.0 * pc_xyyzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_y[j] - 4.0 * pc_xxyyz[j] * pa_y[j] * pb_z[j] - pc_xyyzz[j] * pb_xy[j] - 2.0 * pc_xyyyz[j] * pb_xz[j] - 2.0 * pc_xxyyz[j] * pb_yz[j] - pc_xxyyy[j] * pb_zz[j]);

                t_xyy_xyzz[j] += fl_s_0_0_6 * (0.5 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + pa_x[j] * pc_xyyyzz[j] + 2.0 * pc_xxyyzz[j] * pa_y[j] + pc_xyyyzz[j] * pb_x[j] + pc_xxyyzz[j] * pb_y[j] + 2.0 * pc_xxyyyz[j] * pb_z[j]);

                t_xyy_xyzz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_54_57(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (54,57)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            auto pc_xyyyyyy = pcDistances.data(119 * idx + 104);

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyy_xzzz = primBuffer.data(150 * idx + 54);

            auto t_xyy_yyyy = primBuffer.data(150 * idx + 55);

            auto t_xyy_yyyz = primBuffer.data(150 * idx + 56);

            // Batch of Integrals (54,57)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_y, pa_yy, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, \
                                     pb_yyy, pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xx, pc_xxy, \
                                     pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyy, \
                                     pc_xyyyyyz, pc_xyyyyz, pc_xyyyz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, \
                                     pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyy, \
                                     pc_yyyyyz, pc_yyyyz, pc_yyyz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, \
                                     pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xyy_xzzz, t_xyy_yyyy, t_xyy_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyy_xzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_xyy[j] * pb_xz[j] * fl1_fx + 0.5 * fl1_fx * pa_yy[j] * pb_zzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xzzz[j] + pa_xyy[j] * pb_xzzz[j]);

                t_xyy_xzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * fl2_fx * pa_yy[j] * pb_z[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pb_zz[j] * pc_z[j] - 0.5 * fl2_fx * pb_zzz[j] - 1.5 * pa_xyy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xyy[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_x[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_y[j] * pb_xz[j] * fl1_fx - 1.5 * pc_x[j] * pa_yy[j] * pb_xz[j] * fl1_fx - 1.5 * fl1_fx * pa_yy[j] * pb_zz[j] * pc_z[j] - fl1_fx * pa_y[j] * pc_y[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_yy[j] * pb_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_zzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xzzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xzzz[j] - 3.0 * pa_xyy[j] * pb_xzz[j] * pc_z[j] - pa_xyy[j] * pc_x[j] * pb_zzz[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_xzzz[j] - pc_x[j] * pa_yy[j] * pb_xzzz[j]);

                t_xyy_xzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * fl2_fx * pa_yy[j] * pc_z[j] + 3.0 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * fl2_fx * pa_yy[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_x[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pb_z[j] * pc_zz[j] + 1.5 * fl2_fx * pb_zz[j] * pc_z[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_xyy[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_y[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xy[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * pc_yy[j] * pb_xz[j] * fl1_fx + 1.5 * pc_x[j] * pa_yy[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx + 1.5 * pc_xx[j] * pa_yy[j] * pb_z[j] * fl1_fx + 3.0 * pc_xy[j] * pa_y[j] * pb_xz[j] * fl1_fx + 1.5 * fl1_fx * pa_yy[j] * pb_z[j] * pc_zz[j] + 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yy[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_yy[j] * pb_zz[j] * pc_z[j] + fl1_fx * pa_y[j] * pc_y[j] * pb_zzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_zz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_zzz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xzzz[j] + 3.0 * pa_xyy[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_xyy[j] * pc_xz[j] * pb_zz[j] + 6.0 * pa_xy[j] * pc_yz[j] * pb_xzz[j] + 2.0 * pa_xy[j] * pc_xy[j] * pb_zzz[j] + pa_x[j] * pc_yy[j] * pb_xzzz[j] + 3.0 * pc_xz[j] * pa_yy[j] * pb_xzz[j] + pc_xx[j] * pa_yy[j] * pb_zzz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_xzzz[j]);

                t_xyy_xzzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 3.0 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 0.75 * fl2_fx * pa_yy[j] * pc_z[j] - 1.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxz[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pb_xz[j] - 0.25 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pb_z[j] * pc_zz[j] - 0.75 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_xyy[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xy[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xx[j] * pa_yy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xy[j] * pa_y[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyy[j] * pb_xz[j] * fl1_fx - 0.5 * fl1_fx * pa_yy[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_yy[j] * pb_z[j] * pc_zz[j] - 3.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yy[j] * pb_zzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_zz[j] - 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_zz[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] - pa_xyy[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_xyy[j] * pc_xzz[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_yzz[j] * pb_xz[j] - 6.0 * pa_xy[j] * pc_xyz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_yyz[j] * pb_xzz[j] - pa_x[j] * pc_xyy[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_yy[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_yy[j] * pb_zz[j] - 6.0 * pc_xyz[j] * pa_y[j] * pb_xzz[j] - 2.0 * pc_xxy[j] * pa_y[j] * pb_zzz[j] - pc_xyy[j] * pb_xzzz[j]);

                t_xyy_xzzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 1.5 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pb_z[j] * pc_zz[j] + 3.0 * pa_xy[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyy[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_y[j] * pb_z[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyy[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xyyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxyy[j] * pb_z[j] * fl1_fx + fl1_fx * pa_y[j] * pc_yzzz[j] + 1.5 * fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yy[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_zzz[j] + 1.5 * pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] + 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + pa_xyy[j] * pc_xzzz[j] + 2.0 * pa_xy[j] * pc_yzzz[j] * pb_x[j] + 6.0 * pa_xy[j] * pc_xyzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xyyz[j] * pb_zz[j] + pc_xzzz[j] * pa_yy[j] * pb_x[j] + 3.0 * pc_xxzz[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xyzz[j] * pa_y[j] * pb_xz[j] + 6.0 * pc_xxyz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xyyz[j] * pb_xzz[j] + pc_xxyy[j] * pb_zzz[j]);

                t_xyy_xzzz[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yyz[j] - 0.75 * pc_xxz[j] * fl2_fx - 0.25 * fl2_fx * pc_zzz[j] - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 0.5 * fl1_fx * pc_yyzzz[j] - fl1_fx * pa_y[j] * pc_yzzz[j] - 1.5 * fl1_fx * pc_yyzz[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxzz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_xyzzz[j] - pa_x[j] * pc_yyzzz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxzzz[j] * pa_yy[j] - 2.0 * pc_xyzzz[j] * pa_y[j] * pb_x[j] - 6.0 * pc_xxyzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pb_xz[j] - 3.0 * pc_xxyyz[j] * pb_zz[j]);

                t_xyy_xzzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + 0.5 * pc_xxzzz[j] * fl1_fx + pa_x[j] * pc_xyyzzz[j] + 2.0 * pc_xxyzzz[j] * pa_y[j] + pc_xyyzzz[j] * pb_x[j] + 3.0 * pc_xxyyzz[j] * pb_z[j]);

                t_xyy_xzzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];

                t_xyy_yyyy[j] = fl_s_0_0_0 * (1.875 * pa_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 6.0 * pa_xy[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * fl2_fx * pb_yy[j] + 3.0 * pa_xyy[j] * pb_yy[j] * fl1_fx + 4.0 * pa_xy[j] * fl1_fx * pb_yyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_yyyy[j] + pa_xyy[j] * pb_yyyy[j]);

                t_xyy_yyyy[j] += fl_s_0_0_1 * (-5.625 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 1.5 * pa_xyy[j] * fl2_fx - 7.5 * pa_xy[j] * pc_y[j] * fl2_fx - 12.0 * pa_xy[j] * fl2_fx * pb_y[j] - 15.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 9.0 * pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 6.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 4.5 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xyy[j] * pb_yy[j] * fl1_fx - 6.0 * pa_xyy[j] * pb_y[j] * pc_y[j] * fl1_fx - 18.0 * pa_xy[j] * pc_y[j] * pb_yy[j] * fl1_fx - 4.0 * pa_xy[j] * fl1_fx * pb_yyy[j] - 6.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] - 3.0 * pc_x[j] * pa_yy[j] * pb_yy[j] * fl1_fx - 4.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] - 0.5 * pa_x[j] * fl1_fx * pb_yyyy[j] - 0.5 * pc_x[j] * fl1_fx * pb_yyyy[j] - 4.0 * pa_xyy[j] * pb_yyy[j] * pc_y[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_yyyy[j] - pc_x[j] * pa_yy[j] * pb_yyyy[j]);

                t_xyy_yyyy[j] += fl_s_0_0_2 * (5.625 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 15.0 * pa_xy[j] * pc_y[j] * fl2_fx + 6.0 * pa_xy[j] * fl2_fx * pb_y[j] + 11.25 * pa_x[j] * pc_yy[j] * fl2_fx + 30.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_yy[j] * fl2_fx + 7.5 * pc_xy[j] * pa_y[j] * fl2_fx + 12.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 15.0 * pc_xy[j] * fl2_fx * pb_y[j] + 9.0 * pc_x[j] * fl2_fx * pb_yy[j] + 6.0 * pa_xyy[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_yy[j] * fl1_fx + 18.0 * pa_xy[j] * pc_y[j] * pb_yy[j] * fl1_fx + 24.0 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 18.0 * pa_x[j] * pc_yy[j] * pb_yy[j] * fl1_fx + 6.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 3.0 * pc_x[j] * pa_yy[j] * pb_yy[j] * fl1_fx + 6.0 * pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx + 18.0 * pc_xy[j] * pa_y[j] * pb_yy[j] * fl1_fx + 4.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] + 6.0 * pc_xy[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_x[j] * fl1_fx * pb_yyyy[j] + 6.0 * pa_xyy[j] * pb_yy[j] * pc_yy[j] + 8.0 * pa_xy[j] * pc_yy[j] * pb_yyy[j] + pa_x[j] * pc_yy[j] * pb_yyyy[j] + 4.0 * pc_xy[j] * pa_yy[j] * pb_yyy[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_yyyy[j]);

                t_xyy_yyyy[j] += fl_s_0_0_3 * (-1.875 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 7.5 * pa_xy[j] * pc_y[j] * fl2_fx - 22.5 * pa_x[j] * pc_yy[j] * fl2_fx - 15.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 15.0 * pc_xy[j] * pa_y[j] * fl2_fx - 6.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 11.25 * pc_xyy[j] * fl2_fx - 30.0 * pc_xy[j] * fl2_fx * pb_y[j] - 4.5 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xyy[j] * pc_yy[j] * fl1_fx - 24.0 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx - 10.0 * pa_xy[j] * pc_yyy[j] * fl1_fx - 18.0 * pa_x[j] * pc_yy[j] * pb_yy[j] * fl1_fx - 20.0 * pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 6.0 * pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_yy[j] * fl1_fx - 18.0 * pc_xy[j] * pa_y[j] * pb_yy[j] * fl1_fx - 24.0 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx - 18.0 * pc_xyy[j] * pb_yy[j] * fl1_fx - 6.0 * pc_xy[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_xyy[j] * pb_y[j] * pc_yyy[j] - 12.0 * pa_xy[j] * pc_yyy[j] * pb_yy[j] - 4.0 * pa_x[j] * pc_yyy[j] * pb_yyy[j] - 6.0 * pc_xyy[j] * pa_yy[j] * pb_yy[j] - 8.0 * pc_xyy[j] * pa_y[j] * pb_yyy[j] - pc_xyy[j] * pb_yyyy[j]);

                t_xyy_yyyy[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 11.25 * pa_x[j] * pc_yy[j] * fl2_fx + 7.5 * pc_xy[j] * pa_y[j] * fl2_fx + 22.5 * pc_xyy[j] * fl2_fx + 15.0 * pc_xy[j] * fl2_fx * pb_y[j] + 10.0 * pa_xy[j] * pc_yyy[j] * fl1_fx + 20.0 * pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 7.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_yy[j] * fl1_fx + 24.0 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx + 10.0 * pc_xyyy[j] * pa_y[j] * fl1_fx + 18.0 * pc_xyy[j] * pb_yy[j] * fl1_fx + 20.0 * pc_xyyy[j] * pb_y[j] * fl1_fx + pa_xyy[j] * pc_yyyy[j] + 8.0 * pa_xy[j] * pc_yyyy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_yyyy[j] * pb_yy[j] + 4.0 * pc_xyyy[j] * pa_yy[j] * pb_y[j] + 12.0 * pc_xyyy[j] * pa_y[j] * pb_yy[j] + 4.0 * pc_xyyy[j] * pb_yyy[j]);

                t_xyy_yyyy[j] += fl_s_0_0_5 * (-11.25 * pc_xyy[j] * fl2_fx - 7.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 10.0 * pc_xyyy[j] * pa_y[j] * fl1_fx - 20.0 * pc_xyyy[j] * pb_y[j] * fl1_fx - 7.5 * pc_xyyyy[j] * fl1_fx - 2.0 * pa_xy[j] * pc_yyyyy[j] - 4.0 * pa_x[j] * pc_yyyyy[j] * pb_y[j] - pc_xyyyy[j] * pa_yy[j] - 8.0 * pc_xyyyy[j] * pa_y[j] * pb_y[j] - 6.0 * pc_xyyyy[j] * pb_yy[j]);

                t_xyy_yyyy[j] += fl_s_0_0_6 * (7.5 * pc_xyyyy[j] * fl1_fx + pa_x[j] * pc_yyyyyy[j] + 2.0 * pc_xyyyyy[j] * pa_y[j] + 4.0 * pc_xyyyyy[j] * pb_y[j]);

                t_xyy_yyyy[j] += -fl_s_0_0_7 * pc_xyyyyyy[j];

                t_xyy_yyyz[j] = fl_s_0_0_0 * (1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xyy[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xy[j] * fl1_fx * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_yyyz[j] + pa_xyy[j] * pb_yyyz[j]);

                t_xyy_yyyz[j] += fl_s_0_0_1 * (-1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 3.0 * pa_xy[j] * fl2_fx * pb_z[j] - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_yz[j] - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xyy[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_xyy[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_z[j] - 9.0 * pa_xy[j] * pc_y[j] * pb_yz[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] - 3.0 * pa_xy[j] * fl1_fx * pb_yyz[j] - 4.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * pa_yy[j] * pb_yz[j] * fl1_fx - 3.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] - 0.5 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pb_yyyz[j] - 0.5 * pc_x[j] * fl1_fx * pb_yyyz[j] - pa_xyy[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_xyy[j] * pb_yyz[j] * pc_y[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_yyyz[j] - pc_x[j] * pa_yy[j] * pb_yyyz[j]);

                t_xyy_yyyz[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + 1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 7.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 4.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pc_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xyy[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_y[j] * fl1_fx * pb_z[j] + 9.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 9.0 * pa_xy[j] * pc_y[j] * pb_yz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_z[j] + 9.0 * pa_x[j] * pc_yy[j] * pb_yz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 4.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx + 1.5 * pc_x[j] * pa_yy[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] + 9.0 * pc_xy[j] * pa_y[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] + 3.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] + 4.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_z[j] + 0.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_x[j] * fl1_fx * pb_yyyz[j] + 3.0 * pa_xyy[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_xyy[j] * pb_yz[j] * pc_yy[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_yyy[j] + 6.0 * pa_xy[j] * pc_yy[j] * pb_yyz[j] + pa_x[j] * pc_yy[j] * pb_yyyz[j] + pc_xz[j] * pa_yy[j] * pb_yyy[j] + 3.0 * pc_xy[j] * pa_yy[j] * pb_yyz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_yyyz[j]);

                t_xyy_yyyz[j] += fl_s_0_0_3 * (-1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 2.25 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - 9.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yyz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 9.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 9.0 * pa_x[j] * pc_yy[j] * pb_yz[j] * fl1_fx - 5.0 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 1.5 * pc_xy[j] * pa_yy[j] * fl1_fx * pb_z[j] - 9.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx - 9.0 * pc_xy[j] * pa_y[j] * pb_yz[j] * fl1_fx - 6.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] - 9.0 * pc_xyy[j] * pb_yz[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_xyy[j] * pb_y[j] * pc_yyz[j] - pa_xyy[j] * pc_yyy[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_yyz[j] * pb_yy[j] - 6.0 * pa_xy[j] * pc_yyy[j] * pb_yz[j] - pa_x[j] * pc_yyz[j] * pb_yyy[j] - 3.0 * pa_x[j] * pc_yyy[j] * pb_yyz[j] - 3.0 * pc_xyz[j] * pa_yy[j] * pb_yy[j] - 3.0 * pc_xyy[j] * pa_yy[j] * pb_yz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_yyy[j] - 6.0 * pc_xyy[j] * pa_y[j] * pb_yyz[j] - pc_xyy[j] * pb_yyyz[j]);

                t_xyy_yyyz[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 6.0 * pa_xy[j] * pc_yyz[j] * fl1_fx + 9.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + 6.0 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] + 9.0 * pc_xyyz[j] * pb_y[j] * fl1_fx + 9.0 * pc_xyy[j] * pb_yz[j] * fl1_fx + 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pa_xyy[j] * pc_yyyz[j] + 6.0 * pa_xy[j] * pc_yyyz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_yyyy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yyyz[j] * pb_yy[j] + 3.0 * pa_x[j] * pc_yyyy[j] * pb_yz[j] + 3.0 * pc_xyyz[j] * pa_yy[j] * pb_y[j] + pc_xyyy[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xyyz[j] * pa_y[j] * pb_yy[j] + 6.0 * pc_xyyy[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pb_yyy[j] + 3.0 * pc_xyyy[j] * pb_yyz[j]);

                t_xyy_yyyz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx - 6.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - 9.0 * pc_xyyz[j] * pb_y[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_yyyyz[j] - 3.0 * pa_x[j] * pc_yyyyz[j] * pb_y[j] - pa_x[j] * pc_yyyyy[j] * pb_z[j] - pc_xyyyz[j] * pa_yy[j] - 6.0 * pc_xyyyz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xyyyy[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xyyyz[j] * pb_yy[j] - 3.0 * pc_xyyyy[j] * pb_yz[j]);

                t_xyy_yyyz[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_yyyyyz[j] + 2.0 * pc_xyyyyz[j] * pa_y[j] + 3.0 * pc_xyyyyz[j] * pb_y[j] + pc_xyyyyy[j] * pb_z[j]);

                t_xyy_yyyz[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_57_60(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (57,60)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyy = paDistances.data(19 * idx + 12);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyy_yyzz = primBuffer.data(150 * idx + 57);

            auto t_xyy_yzzz = primBuffer.data(150 * idx + 58);

            auto t_xyy_zzzz = primBuffer.data(150 * idx + 59);

            // Batch of Integrals (57,60)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyy, pa_y, pa_yy, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, \
                                     pb_yzzz, pb_z, pb_zz, pb_zzz, pb_zzzz, pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, \
                                     pc_xyyyyz, pc_xyyyyzz, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyyzzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, \
                                     pc_xzzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, \
                                     pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyy_yyzz, t_xyy_yzzz, t_xyy_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyy_yyzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.25 * pa_xyy[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pa_xyy[j] * pb_yy[j] * fl1_fx + 0.5 * pa_xyy[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_yyzz[j] + pa_xyy[j] * pb_yyzz[j]);

                t_xyy_yyzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.5 * pa_xyy[j] * fl2_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 2.0 * pa_xy[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.25 * pc_x[j] * pa_yy[j] * fl2_fx - pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.25 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xyy[j] * pb_yy[j] * fl1_fx - pa_xyy[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xyy[j] * fl1_fx * pb_zz[j] - pa_xy[j] * pc_y[j] * pb_yy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 4.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] - 2.0 * pa_xy[j] * fl1_fx * pb_yzz[j] - 3.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] - 0.5 * pc_x[j] * pa_yy[j] * pb_yy[j] * fl1_fx - 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] - 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] - pa_x[j] * fl1_fx * pb_yyz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pb_yyzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_yyzz[j] - 2.0 * pa_xyy[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_xyy[j] * pb_yzz[j] * pc_y[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_yyzz[j] - pc_x[j] * pa_yy[j] * pb_yyzz[j]);

                t_xyy_yyzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.25 * pa_xyy[j] * fl2_fx + 3.0 * pa_xy[j] * pc_y[j] * fl2_fx + pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 3.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pc_x[j] * pa_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 2.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pc_x[j] * fl2_fx * pb_yy[j] + pa_xyy[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_xyy[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xyy[j] * fl1_fx * pc_zz[j] + pa_xyy[j] * fl1_fx * pb_z[j] * pc_z[j] + pa_xy[j] * pc_y[j] * pb_yy[j] * fl1_fx + 2.0 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 6.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] + 4.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_z[j] + 0.5 * pa_x[j] * pc_yy[j] * pb_yy[j] * fl1_fx + 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 6.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_x[j] * pa_yy[j] * pb_yy[j] * fl1_fx + pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx + pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] + 0.5 * pc_x[j] * pa_yy[j] * fl1_fx * pb_zz[j] + pc_xy[j] * pa_y[j] * pb_yy[j] * fl1_fx + 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] + 4.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] + 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] + 3.0 * pc_xy[j] * fl1_fx * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_yy[j] * pc_zz[j] + pa_x[j] * fl1_fx * pb_yyz[j] * pc_z[j] + pc_xz[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_x[j] * fl1_fx * pb_yyzz[j] + pa_xyy[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_xyy[j] * pb_yz[j] * pc_yz[j] + pa_xyy[j] * pc_yy[j] * pb_zz[j] + 4.0 * pa_xy[j] * pc_yz[j] * pb_yyz[j] + 4.0 * pa_xy[j] * pc_yy[j] * pb_yzz[j] + pa_x[j] * pc_yy[j] * pb_yyzz[j] + 2.0 * pc_xz[j] * pa_yy[j] * pb_yyz[j] + 2.0 * pc_xy[j] * pa_yy[j] * pb_yzz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_yyzz[j]);

                t_xyy_yyzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 3.0 * pa_x[j] * pc_yy[j] * fl2_fx - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 1.5 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 0.25 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pc_xy[j] * pa_y[j] * fl2_fx - pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.25 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_xyy[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xyy[j] * fl1_fx * pc_zz[j] - 2.0 * pa_xy[j] * pc_yy[j] * pb_y[j] * fl1_fx - pa_xy[j] * pc_yyy[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * fl1_fx * pb_y[j] * pc_zz[j] - 0.5 * pa_x[j] * pc_yy[j] * pb_yy[j] * fl1_fx - pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 6.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 6.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] - pc_xy[j] * pa_yy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_yy[j] * fl1_fx - 0.5 * pc_xzz[j] * pa_yy[j] * fl1_fx - pc_xz[j] * pa_yy[j] * fl1_fx * pb_z[j] - pc_xy[j] * pa_y[j] * pb_yy[j] * fl1_fx - 2.0 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] - 4.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xyy[j] * pb_yy[j] * fl1_fx - 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xy[j] * fl1_fx * pb_yzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_yy[j] * pc_zz[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - pc_xz[j] * fl1_fx * pb_yyz[j] - 2.0 * pa_xyy[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_xyy[j] * pc_yyz[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_yy[j] - 8.0 * pa_xy[j] * pc_yyz[j] * pb_yz[j] - 2.0 * pa_xy[j] * pc_yyy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_yyz[j] * pb_yyz[j] - 2.0 * pa_x[j] * pc_yyy[j] * pb_yzz[j] - pc_xzz[j] * pa_yy[j] * pb_yy[j] - 4.0 * pc_xyz[j] * pa_yy[j] * pb_yz[j] - pc_xyy[j] * pa_yy[j] * pb_zz[j] - 4.0 * pc_xyz[j] * pa_y[j] * pb_yyz[j] - 4.0 * pc_xyy[j] * pa_y[j] * pb_yzz[j] - pc_xyy[j] * pb_yyzz[j]);

                t_xyy_yyzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + pa_xy[j] * pc_yyy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx + pa_x[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyy[j] * pa_yy[j] * fl1_fx + 0.5 * pc_xzz[j] * pa_yy[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_y[j] * pb_y[j] * fl1_fx + pc_xyyy[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + 2.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyy[j] * pb_yy[j] * fl1_fx + pc_xyyy[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + pa_xyy[j] * pc_yyzz[j] + 4.0 * pa_xy[j] * pc_yyzz[j] * pb_y[j] + 4.0 * pa_xy[j] * pc_yyyz[j] * pb_z[j] + pa_x[j] * pc_yyzz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_yyyz[j] * pb_yz[j] + pa_x[j] * pc_yyyy[j] * pb_zz[j] + 2.0 * pc_xyzz[j] * pa_yy[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_yy[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_yy[j] + 8.0 * pc_xyyz[j] * pa_y[j] * pb_yz[j] + 2.0 * pc_xyyy[j] * pa_y[j] * pb_zz[j] + 2.0 * pc_xyyz[j] * pb_yyz[j] + 2.0 * pc_xyyy[j] * pb_yzz[j]);

                t_xyy_yyzz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - pc_xyyy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - pc_xyyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyyyy[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_yyyzz[j] - 2.0 * pa_x[j] * pc_yyyzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_yyyyz[j] * pb_z[j] - pc_xyyzz[j] * pa_yy[j] - 4.0 * pc_xyyzz[j] * pa_y[j] * pb_y[j] - 4.0 * pc_xyyyz[j] * pa_y[j] * pb_z[j] - pc_xyyzz[j] * pb_yy[j] - 4.0 * pc_xyyyz[j] * pb_yz[j] - pc_xyyyy[j] * pb_zz[j]);

                t_xyy_yyzz[j] += fl_s_0_0_6 * (0.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + pa_x[j] * pc_yyyyzz[j] + 2.0 * pc_xyyyzz[j] * pa_y[j] + 2.0 * pc_xyyyzz[j] * pb_y[j] + 2.0 * pc_xyyyyz[j] * pb_z[j]);

                t_xyy_yyzz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];

                t_xyy_yzzz[j] = fl_s_0_0_0 * (1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xyy[j] * pb_yz[j] * fl1_fx + pa_xy[j] * fl1_fx * pb_zzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_yzzz[j] + pa_xyy[j] * pb_yzzz[j]);

                t_xyy_yzzz[j] += fl_s_0_0_1 * (-3.0 * pa_xy[j] * fl2_fx * pb_z[j] - 1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xyy[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xyy[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_xyy[j] * pc_y[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_y[j] * pb_yz[j] * fl1_fx - 3.0 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] - pa_xy[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * pa_yy[j] * pb_yz[j] * fl1_fx - pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_yzz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pb_yzzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_yzzz[j] - 3.0 * pa_xyy[j] * pb_yzz[j] * pc_z[j] - pa_xyy[j] * pc_y[j] * pb_zzz[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_yzzz[j] - pc_x[j] * pa_yy[j] * pb_yzzz[j]);

                t_xyy_yzzz[j] += fl_s_0_0_2 * (3.0 * pa_xy[j] * fl2_fx * pc_z[j] + 1.5 * pa_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pc_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_xyy[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_y[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yy[j] * pb_z[j] * fl1_fx + 3.0 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] + 3.0 * pa_xy[j] * fl1_fx * pb_zz[j] * pc_z[j] + 1.5 * pa_x[j] * pc_yy[j] * pb_yz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_x[j] * pa_yy[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yy[j] * pb_z[j] * fl1_fx + 3.0 * pc_xy[j] * pa_y[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] + pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 1.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_zz[j] + 1.5 * pa_x[j] * fl1_fx * pb_yzz[j] * pc_z[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_yzzz[j] + 3.0 * pa_xyy[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_xyy[j] * pc_yz[j] * pb_zz[j] + 6.0 * pa_xy[j] * pc_yz[j] * pb_yzz[j] + 2.0 * pa_xy[j] * pc_yy[j] * pb_zzz[j] + pa_x[j] * pc_yy[j] * pb_yzzz[j] + 3.0 * pc_xz[j] * pa_yy[j] * pb_yzz[j] + pc_xy[j] * pa_yy[j] * pb_zzz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_yzzz[j]);

                t_xyy_yzzz[j] += fl_s_0_0_3 * (-1.5 * pa_xy[j] * fl2_fx * pc_z[j] - 4.5 * pa_x[j] * pc_yz[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 0.75 * pa_x[j] * fl2_fx * pb_y[j] * pc_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xyy[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yy[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yyz[j] * fl1_fx - pa_xy[j] * fl1_fx * pc_zzz[j] - 3.0 * pa_xy[j] * fl1_fx * pb_z[j] * pc_zz[j] - 1.5 * pa_x[j] * pc_yy[j] * pb_yz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyy[j] * pb_z[j] * fl1_fx - 4.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * pa_yy[j] * pb_y[j] * fl1_fx - 1.5 * pc_xy[j] * pa_yy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx - 3.0 * pc_xy[j] * pa_y[j] * pb_yz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_y[j] * pb_z[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xyy[j] * pb_yz[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_y[j] * pc_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_zz[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - pa_xyy[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_xyy[j] * pc_yzz[j] * pb_z[j] - 6.0 * pa_xy[j] * pc_yzz[j] * pb_yz[j] - 6.0 * pa_xy[j] * pc_yyz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_yyz[j] * pb_yzz[j] - pa_x[j] * pc_yyy[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_yy[j] * pb_yz[j] - 3.0 * pc_xyz[j] * pa_yy[j] * pb_zz[j] - 6.0 * pc_xyz[j] * pa_y[j] * pb_yzz[j] - 2.0 * pc_xyy[j] * pa_y[j] * pb_zzz[j] - pc_xyy[j] * pb_yzzz[j]);

                t_xyy_yzzz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_y[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_yyz[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_zzz[j] + 1.5 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyy[j] * pb_z[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * pa_yy[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_y[j] * pb_z[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + pc_xzzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyy[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xyyz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyyy[j] * pb_z[j] * fl1_fx + 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pb_y[j] * pc_zzz[j] + 0.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yz[j] + pa_xyy[j] * pc_yzzz[j] + 2.0 * pa_xy[j] * pc_yzzz[j] * pb_y[j] + 6.0 * pa_xy[j] * pc_yyzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_yyyz[j] * pb_zz[j] + pc_xzzz[j] * pa_yy[j] * pb_y[j] + 3.0 * pc_xyzz[j] * pa_yy[j] * pb_z[j] + 6.0 * pc_xyzz[j] * pa_y[j] * pb_yz[j] + 6.0 * pc_xyyz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xyyz[j] * pb_yzz[j] + pc_xyyy[j] * pb_zzz[j]);

                t_xyy_yzzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - pc_xzzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 2.0 * pa_xy[j] * pc_yyzzz[j] - pa_x[j] * pc_yyzzz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_yyyzz[j] * pb_z[j] - pc_xyzzz[j] * pa_yy[j] - 2.0 * pc_xyzzz[j] * pa_y[j] * pb_y[j] - 6.0 * pc_xyyzz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pb_yz[j] - 3.0 * pc_xyyyz[j] * pb_zz[j]);

                t_xyy_yzzz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yyyzzz[j] + 2.0 * pc_xyyzzz[j] * pa_y[j] + pc_xyyzzz[j] * pb_y[j] + 3.0 * pc_xyyyzz[j] * pb_z[j]);

                t_xyy_yzzz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];

                t_xyy_zzzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pb_zz[j] + 3.0 * pa_xyy[j] * pb_zz[j] * fl1_fx + 0.5 * pa_x[j] * fl1_fx * pb_zzzz[j] + pa_xyy[j] * pb_zzzz[j]);

                t_xyy_zzzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xyy[j] * fl2_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 1.5 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xyy[j] * pb_zz[j] * fl1_fx - 6.0 * pa_xyy[j] * pb_z[j] * pc_z[j] * fl1_fx - 6.0 * pa_xy[j] * pc_y[j] * pb_zz[j] * fl1_fx - 3.0 * pc_x[j] * pa_yy[j] * pb_zz[j] * fl1_fx - 2.0 * pa_x[j] * fl1_fx * pb_zzz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pb_zzzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_zzzz[j] - 4.0 * pa_xyy[j] * pb_zzz[j] * pc_z[j] - 2.0 * pa_xy[j] * pc_y[j] * pb_zzzz[j] - pc_x[j] * pa_yy[j] * pb_zzzz[j]);

                t_xyy_zzzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * pa_xyy[j] * fl2_fx + 3.0 * pa_xy[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_x[j] * pa_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 6.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pa_x[j] * fl2_fx * pb_zz[j] + 3.0 * pc_x[j] * fl2_fx * pb_zz[j] + 3.0 * pc_xz[j] * fl2_fx * pb_z[j] + 6.0 * pa_xyy[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_xyy[j] * pc_zz[j] * fl1_fx + 6.0 * pa_xy[j] * pc_y[j] * pb_zz[j] * fl1_fx + 12.0 * pa_xy[j] * pc_yz[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_yy[j] * pb_zz[j] * fl1_fx + 3.0 * pc_x[j] * pa_yy[j] * pb_zz[j] * fl1_fx + 6.0 * pc_xz[j] * pa_yy[j] * pb_z[j] * fl1_fx + 6.0 * pc_xy[j] * pa_y[j] * pb_zz[j] * fl1_fx + 3.0 * pa_x[j] * fl1_fx * pb_zz[j] * pc_zz[j] + 2.0 * pa_x[j] * fl1_fx * pb_zzz[j] * pc_z[j] + 2.0 * pc_xz[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_zzzz[j] + 6.0 * pa_xyy[j] * pb_zz[j] * pc_zz[j] + 8.0 * pa_xy[j] * pc_yz[j] * pb_zzz[j] + pa_x[j] * pc_yy[j] * pb_zzzz[j] + 4.0 * pc_xz[j] * pa_yy[j] * pb_zzz[j] + 2.0 * pc_xy[j] * pa_y[j] * pb_zzzz[j]);

                t_xyy_zzzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xy[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.75 * pc_x[j] * pa_yy[j] * fl2_fx - 3.0 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pc_zz[j] - 3.0 * pa_x[j] * fl2_fx * pb_z[j] * pc_z[j] - 6.0 * pc_xz[j] * fl2_fx * pb_z[j] - 1.5 * pc_xzz[j] * fl2_fx - 1.5 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xyy[j] * pc_zz[j] * fl1_fx - 12.0 * pa_xy[j] * pc_yz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_x[j] * pc_yy[j] * pb_zz[j] * fl1_fx - 6.0 * pa_x[j] * pc_yyz[j] * pb_z[j] * fl1_fx - 6.0 * pc_xz[j] * pa_yy[j] * pb_z[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_yy[j] * fl1_fx - 6.0 * pc_xy[j] * pa_y[j] * pb_zz[j] * fl1_fx - 12.0 * pc_xyz[j] * pa_y[j] * pb_z[j] * fl1_fx - 3.0 * pc_xyy[j] * pb_zz[j] * fl1_fx - 2.0 * pa_x[j] * fl1_fx * pb_z[j] * pc_zzz[j] - 3.0 * pa_x[j] * fl1_fx * pb_zz[j] * pc_zz[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xz[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_xyy[j] * pb_z[j] * pc_zzz[j] - 12.0 * pa_xy[j] * pc_yzz[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_yyz[j] * pb_zzz[j] - 6.0 * pc_xzz[j] * pa_yy[j] * pb_zz[j] - 8.0 * pc_xyz[j] * pa_y[j] * pb_zzz[j] - pc_xyy[j] * pb_zzzz[j]);

                t_xyy_zzzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 3.0 * pc_xzz[j] * fl2_fx + 3.0 * pc_xz[j] * fl2_fx * pb_z[j] + 6.0 * pa_xy[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_yyz[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_yy[j] * fl1_fx + 12.0 * pc_xyz[j] * pa_y[j] * pb_z[j] * fl1_fx + 6.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyy[j] * pb_zz[j] * fl1_fx + 6.0 * pc_xyyz[j] * pb_z[j] * fl1_fx + 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] + 2.0 * pa_x[j] * fl1_fx * pb_z[j] * pc_zzz[j] + 2.0 * pc_xzzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_zz[j] + pa_xyy[j] * pc_zzzz[j] + 8.0 * pa_xy[j] * pc_yzzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_yyzz[j] * pb_zz[j] + 4.0 * pc_xzzz[j] * pa_yy[j] * pb_z[j] + 12.0 * pc_xyzz[j] * pa_y[j] * pb_zz[j] + 4.0 * pc_xyyz[j] * pb_zzz[j]);

                t_xyy_zzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xzz[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - 6.0 * pc_xyyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] - 0.5 * pc_xzzzz[j] * fl1_fx - 2.0 * pc_xzzz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xy[j] * pc_yzzzz[j] - 4.0 * pa_x[j] * pc_yyzzz[j] * pb_z[j] - pc_xzzzz[j] * pa_yy[j] - 8.0 * pc_xyzzz[j] * pa_y[j] * pb_z[j] - 6.0 * pc_xyyzz[j] * pb_zz[j]);

                t_xyy_zzzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_yyzzzz[j] + 2.0 * pc_xyzzzz[j] * pa_y[j] + 4.0 * pc_xyyzzz[j] * pb_z[j]);

                t_xyy_zzzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_60_63(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (60,63)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxy = pcDistances.data(119 * idx + 56);

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxyz = pcDistances.data(119 * idx + 87);

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyz_xxxx = primBuffer.data(150 * idx + 60);

            auto t_xyz_xxxy = primBuffer.data(150 * idx + 61);

            auto t_xyz_xxxz = primBuffer.data(150 * idx + 62);

            // Batch of Integrals (60,63)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, pb_x, pb_xx, pb_xxx, pb_xxxx, \
                                     pb_xxxy, pb_xxxz, pb_xxy, pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, \
                                     pc_xxxxx, pc_xxxxxy, pc_xxxxxyz, pc_xxxxxz, pc_xxxxy, pc_xxxxyy, pc_xxxxyyz, \
                                     pc_xxxxyz, pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyz, \
                                     pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyz, pc_xxyzz, pc_xxz, \
                                     pc_xxzz, pc_xy, pc_xyy, pc_xyyz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyz, \
                                     pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xyz_xxxx, t_xyz_xxxy, t_xyz_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyz_xxxx[j] = fl_s_0_0_0 * (0.75 * pa_xyz[j] * fl2_fx + 3.0 * fl2_fx * pa_yz[j] * pb_x[j] + 3.0 * pa_xyz[j] * pb_xx[j] * fl1_fx + 2.0 * fl1_fx * pa_yz[j] * pb_xxx[j] + pa_xyz[j] * pb_xxxx[j]);

                t_xyz_xxxx[j] += fl_s_0_0_1 * (-1.5 * pa_xyz[j] * fl2_fx - 0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 3.75 * pc_x[j] * pa_yz[j] * fl2_fx - 6.0 * fl2_fx * pa_yz[j] * pb_x[j] - 3.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 3.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 3.0 * pa_xyz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_xyz[j] * pb_x[j] * pc_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_z[j] * pb_xx[j] * fl1_fx - 3.0 * pa_xz[j] * pc_y[j] * pb_xx[j] * fl1_fx - 9.0 * pc_x[j] * pa_yz[j] * pb_xx[j] * fl1_fx - 2.0 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxx[j] - 2.0 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxx[j] - 2.0 * fl1_fx * pa_yz[j] * pb_xxx[j] - 4.0 * pa_xyz[j] * pb_xxx[j] * pc_x[j] - pa_xy[j] * pc_z[j] * pb_xxxx[j] - pa_xz[j] * pc_y[j] * pb_xxxx[j] - pc_x[j] * pa_yz[j] * pb_xxxx[j]);

                t_xyz_xxxx[j] += fl_s_0_0_2 * (0.75 * pa_xyz[j] * fl2_fx + 1.5 * pa_xy[j] * pc_z[j] * fl2_fx + 1.5 * pa_xz[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 7.5 * pc_x[j] * pa_yz[j] * fl2_fx + 3.75 * pc_xz[j] * pa_y[j] * fl2_fx + 3.75 * pc_xy[j] * pa_z[j] * fl2_fx + 6.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + 6.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + 3.0 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pa_yz[j] * pb_x[j] + 6.0 * pa_xyz[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_xx[j] * fl1_fx + 3.0 * pa_xy[j] * pc_z[j] * pb_xx[j] * fl1_fx + 6.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_y[j] * pb_xx[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_yz[j] * pb_xx[j] * fl1_fx + 9.0 * pc_x[j] * pa_yz[j] * pb_xx[j] * fl1_fx + 12.0 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xz[j] * pa_y[j] * pb_xx[j] * fl1_fx + 9.0 * pc_xy[j] * pa_z[j] * pb_xx[j] * fl1_fx + 2.0 * fl1_fx * pc_yz[j] * pb_xxx[j] + 2.0 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxx[j] + 2.0 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxx[j] + 6.0 * pa_xyz[j] * pb_xx[j] * pc_xx[j] + 4.0 * pa_xy[j] * pc_xz[j] * pb_xxx[j] + 4.0 * pa_xz[j] * pc_xy[j] * pb_xxx[j] + pa_x[j] * pc_yz[j] * pb_xxxx[j] + 4.0 * pc_xx[j] * pa_yz[j] * pb_xxx[j] + pc_xz[j] * pa_y[j] * pb_xxxx[j] + pc_xy[j] * pa_z[j] * pb_xxxx[j]);

                t_xyz_xxxx[j] += fl_s_0_0_3 * (-0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.75 * pc_x[j] * pa_yz[j] * fl2_fx - 7.5 * pc_xz[j] * pa_y[j] * fl2_fx - 7.5 * pc_xy[j] * pa_z[j] * fl2_fx - 3.75 * pc_xyz[j] * fl2_fx - 6.0 * fl2_fx * pc_yz[j] * pb_x[j] - 3.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 3.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - 3.0 * pa_xyz[j] * pc_xx[j] * fl1_fx - 6.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xxz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xxy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 12.0 * pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_yz[j] * fl1_fx - 9.0 * pc_xz[j] * pa_y[j] * pb_xx[j] * fl1_fx - 12.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 9.0 * pc_xy[j] * pa_z[j] * pb_xx[j] * fl1_fx - 12.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyz[j] * pb_xx[j] * fl1_fx - 2.0 * fl1_fx * pc_yz[j] * pb_xxx[j] - 4.0 * pa_xyz[j] * pb_x[j] * pc_xxx[j] - 6.0 * pa_xy[j] * pc_xxz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxy[j] * pb_xx[j] - 4.0 * pa_x[j] * pc_xyz[j] * pb_xxx[j] - 6.0 * pc_xxx[j] * pa_yz[j] * pb_xx[j] - 4.0 * pc_xxz[j] * pa_y[j] * pb_xxx[j] - 4.0 * pc_xxy[j] * pa_z[j] * pb_xxx[j] - pc_xyz[j] * pb_xxxx[j]);

                t_xyz_xxxx[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 3.75 * pc_xz[j] * pa_y[j] * fl2_fx + 3.75 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.0 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xxz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xxy[j] * fl1_fx + 6.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_yz[j] * fl1_fx + 12.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx + 12.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyz[j] * pb_xx[j] * fl1_fx + 12.0 * pc_xxyz[j] * pb_x[j] * fl1_fx + pa_xyz[j] * pc_xxxx[j] + 4.0 * pa_xy[j] * pc_xxxz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxxy[j] * pb_x[j] + 6.0 * pa_x[j] * pc_xxyz[j] * pb_xx[j] + 4.0 * pc_xxxx[j] * pa_yz[j] * pb_x[j] + 6.0 * pc_xxxz[j] * pa_y[j] * pb_xx[j] + 6.0 * pc_xxxy[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pb_xxx[j]);

                t_xyz_xxxx[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxyz[j] * fl1_fx - 5.0 * pc_xxxz[j] * pa_y[j] * fl1_fx - 5.0 * pc_xxxy[j] * pa_z[j] * fl1_fx - 12.0 * pc_xxyz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxyz[j] * fl1_fx - pa_xy[j] * pc_xxxxz[j] - pa_xz[j] * pc_xxxxy[j] - 4.0 * pa_x[j] * pc_xxxyz[j] * pb_x[j] - pc_xxxxx[j] * pa_yz[j] - 4.0 * pc_xxxxz[j] * pa_y[j] * pb_x[j] - 4.0 * pc_xxxxy[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxxyz[j] * pb_xx[j]);

                t_xyz_xxxx[j] += fl_s_0_0_6 * (5.0 * pc_xxxyz[j] * fl1_fx + pa_x[j] * pc_xxxxyz[j] + pc_xxxxxz[j] * pa_y[j] + pc_xxxxxy[j] * pa_z[j] + 4.0 * pc_xxxxyz[j] * pb_x[j]);

                t_xyz_xxxx[j] += -fl_s_0_0_7 * pc_xxxxxyz[j];

                t_xyz_xxxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xyz[j] * pb_xy[j] * fl1_fx + 0.5 * pa_xz[j] * fl1_fx * pb_xxx[j] + 1.5 * fl1_fx * pa_yz[j] * pb_xxy[j] + pa_xyz[j] * pb_xxxy[j]);

                t_xyz_xxxy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 1.5 * fl2_fx * pa_yz[j] * pb_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * fl2_fx * pa_z[j] * pb_xx[j] - 1.5 * pa_xyz[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_xyz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_y[j] - 1.5 * pa_xy[j] * pc_z[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xz[j] * pc_y[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_x[j] * pa_yz[j] * pb_xy[j] * fl1_fx - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] - 1.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_y[j] - 1.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxy[j] - 1.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxy[j] - 1.5 * fl1_fx * pa_yz[j] * pb_xxy[j] - pa_xyz[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_xyz[j] * pb_xxy[j] * pc_x[j] - pa_xy[j] * pc_z[j] * pb_xxxy[j] - pa_xz[j] * pc_y[j] * pb_xxxy[j] - pc_x[j] * pa_yz[j] * pb_xxxy[j]);

                t_xyz_xxxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 1.5 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_yz[j] * pc_y[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 0.75 * fl2_fx * pc_yy[j] * pa_z[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_xyz[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_xyz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_y[j] + 1.5 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xy[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 1.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 1.5 * pa_xz[j] * pc_y[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 1.5 * pa_x[j] * pc_yz[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_xx[j] + 1.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxx[j] + 4.5 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_yz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xz[j] * pa_y[j] * pb_xy[j] * fl1_fx + 4.5 * pc_xy[j] * pa_z[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxx[j] + 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] + 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xx[j] + 1.5 * fl1_fx * pc_yz[j] * pb_xxy[j] + 1.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_y[j] + 1.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxy[j] + 1.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxy[j] + 3.0 * pa_xyz[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_xyz[j] * pb_xy[j] * pc_xx[j] + pa_xy[j] * pc_yz[j] * pb_xxx[j] + 3.0 * pa_xy[j] * pc_xz[j] * pb_xxy[j] + pa_xz[j] * pc_yy[j] * pb_xxx[j] + 3.0 * pa_xz[j] * pc_xy[j] * pb_xxy[j] + pa_x[j] * pc_yz[j] * pb_xxxy[j] + pc_xy[j] * pa_yz[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_yz[j] * pb_xxy[j] + pc_xz[j] * pa_y[j] * pb_xxxy[j] + pc_xy[j] * pa_z[j] * pb_xxxy[j]);

                t_xyz_xxxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.0 * pc_xx[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xxz[j] * fl2_fx - 2.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 1.5 * fl2_fx * pc_yy[j] * pa_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * pa_xyz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_y[j] - 1.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_yz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_x[j] - 1.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_xx[j] - 4.5 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_y[j] - 4.5 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_xz[j] * pa_y[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] - 4.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 4.5 * pc_xy[j] * pa_z[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_xyz[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xx[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_xx[j] - 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xx[j] - 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xx[j] - 1.5 * fl1_fx * pc_yz[j] * pb_xxy[j] - 3.0 * pa_xyz[j] * pb_x[j] * pc_xxy[j] - pa_xyz[j] * pc_xxx[j] * pb_y[j] - 3.0 * pa_xy[j] * pc_xyz[j] * pb_xx[j] - 3.0 * pa_xy[j] * pc_xxz[j] * pb_xy[j] - 3.0 * pa_xz[j] * pc_xyy[j] * pb_xx[j] - 3.0 * pa_xz[j] * pc_xxy[j] * pb_xy[j] - pa_x[j] * pc_yyz[j] * pb_xxx[j] - 3.0 * pa_x[j] * pc_xyz[j] * pb_xxy[j] - 3.0 * pc_xxy[j] * pa_yz[j] * pb_xx[j] - 3.0 * pc_xxx[j] * pa_yz[j] * pb_xy[j] - pc_xyz[j] * pa_y[j] * pb_xxx[j] - 3.0 * pc_xxz[j] * pa_y[j] * pb_xxy[j] - pc_xyy[j] * pa_z[j] * pb_xxx[j] - 3.0 * pc_xxy[j] * pa_z[j] * pb_xxy[j] - pc_xyz[j] * pb_xxxy[j]);

                t_xyz_xxxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 3.0 * pc_xxz[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.75 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxxz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_x[j] + 3.0 * pc_xxy[j] * pa_yz[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyyz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxxx[j] * fl1_fx * pa_z[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_xx[j] + pa_xyz[j] * pc_xxxy[j] + 3.0 * pa_xy[j] * pc_xxyz[j] * pb_x[j] + pa_xy[j] * pc_xxxz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_xxyy[j] * pb_x[j] + pa_xz[j] * pc_xxxy[j] * pb_y[j] + 3.0 * pa_x[j] * pc_xyyz[j] * pb_xx[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_xy[j] + 3.0 * pc_xxxy[j] * pa_yz[j] * pb_x[j] + pc_xxxx[j] * pa_yz[j] * pb_y[j] + 3.0 * pc_xxyz[j] * pa_y[j] * pb_xx[j] + 3.0 * pc_xxxz[j] * pa_y[j] * pb_xy[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_xx[j] + 3.0 * pc_xxxy[j] * pa_z[j] * pb_xy[j] + pc_xyyz[j] * pb_xxx[j] + 3.0 * pc_xxyz[j] * pb_xxy[j]);

                t_xyz_xxxy[j] += fl_s_0_0_5 * (-1.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xxxz[j] - 3.0 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxxxz[j] * fl1_fx - 0.5 * pc_xxxx[j] * fl1_fx * pa_z[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_x[j] - pa_xy[j] * pc_xxxyz[j] - pa_xz[j] * pc_xxxyy[j] - 3.0 * pa_x[j] * pc_xxyyz[j] * pb_x[j] - pa_x[j] * pc_xxxyz[j] * pb_y[j] - pc_xxxxy[j] * pa_yz[j] - 3.0 * pc_xxxyz[j] * pa_y[j] * pb_x[j] - pc_xxxxz[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xxxyy[j] * pa_z[j] * pb_x[j] - pc_xxxxy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxyyz[j] * pb_xx[j] - 3.0 * pc_xxxyz[j] * pb_xy[j]);

                t_xyz_xxxy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxxxz[j] * fl1_fx + pa_x[j] * pc_xxxyyz[j] + pc_xxxxyz[j] * pa_y[j] + pc_xxxxyy[j] * pa_z[j] + 3.0 * pc_xxxyyz[j] * pb_x[j] + pc_xxxxyz[j] * pb_y[j]);

                t_xyz_xxxy[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];

                t_xyz_xxxz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xyz[j] * pb_xz[j] * fl1_fx + 0.5 * pa_xy[j] * fl1_fx * pb_xxx[j] + 1.5 * fl1_fx * pa_yz[j] * pb_xxz[j] + pa_xyz[j] * pb_xxxz[j]);

                t_xyz_xxxz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 1.5 * fl2_fx * pa_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_xx[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - 1.5 * pa_xyz[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_xyz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_xy[j] * pc_z[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_xz[j] * pc_y[j] * pb_xz[j] * fl1_fx - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_x[j] * pa_yz[j] * pb_xz[j] * fl1_fx - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_z[j] - 1.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxz[j] - 1.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxz[j] - 1.5 * fl1_fx * pa_yz[j] * pb_xxz[j] - pa_xyz[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_xyz[j] * pb_xxz[j] * pc_x[j] - pa_xy[j] * pc_z[j] * pb_xxxz[j] - pa_xz[j] * pc_y[j] * pb_xxxz[j] - pc_x[j] * pa_yz[j] * pb_xxxz[j]);

                t_xyz_xxxz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 1.5 * pa_xy[j] * fl2_fx * pc_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 4.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_yz[j] * pc_z[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_xx[j] + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_xx[j] + 1.5 * pa_xyz[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_xyz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xy[j] * pc_z[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 1.5 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xz[j] * pc_y[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yz[j] * pb_xz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_yz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xz[j] * pa_y[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xy[j] * pa_z[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xy[j] * fl1_fx * pb_xxx[j] + 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xx[j] + 1.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xx[j] + 1.5 * fl1_fx * pc_yz[j] * pb_xxz[j] + 1.5 * fl1_fx * pa_yz[j] * pb_xx[j] * pc_z[j] + 1.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_xxz[j] + 1.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_xxz[j] + 3.0 * pa_xyz[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_xyz[j] * pb_xz[j] * pc_xx[j] + pa_xy[j] * pc_zz[j] * pb_xxx[j] + 3.0 * pa_xy[j] * pc_xz[j] * pb_xxz[j] + pa_xz[j] * pc_yz[j] * pb_xxx[j] + 3.0 * pa_xz[j] * pc_xy[j] * pb_xxz[j] + pa_x[j] * pc_yz[j] * pb_xxxz[j] + pc_xz[j] * pa_yz[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_yz[j] * pb_xxz[j] + pc_xz[j] * pa_y[j] * pb_xxxz[j] + pc_xy[j] * pa_z[j] * pb_xxxz[j]);

                t_xyz_xxxz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 3.0 * pc_xx[j] * pa_y[j] * fl2_fx - 2.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 4.5 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pa_y[j] * pc_zz[j] - 1.5 * fl2_fx * pc_yz[j] * pa_z[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_xx[j] - 1.5 * pa_xyz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 1.5 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_yz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] - 4.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_xz[j] * pa_y[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 4.5 * pc_xy[j] * pa_z[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 4.5 * pc_xyz[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_xx[j] - 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xx[j] - 1.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xx[j] - 1.5 * fl1_fx * pc_yz[j] * pb_xxz[j] - 3.0 * pa_xyz[j] * pb_x[j] * pc_xxz[j] - pa_xyz[j] * pc_xxx[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_xzz[j] * pb_xx[j] - 3.0 * pa_xy[j] * pc_xxz[j] * pb_xz[j] - 3.0 * pa_xz[j] * pc_xyz[j] * pb_xx[j] - 3.0 * pa_xz[j] * pc_xxy[j] * pb_xz[j] - pa_x[j] * pc_yzz[j] * pb_xxx[j] - 3.0 * pa_x[j] * pc_xyz[j] * pb_xxz[j] - 3.0 * pc_xxz[j] * pa_yz[j] * pb_xx[j] - 3.0 * pc_xxx[j] * pa_yz[j] * pb_xz[j] - pc_xzz[j] * pa_y[j] * pb_xxx[j] - 3.0 * pc_xxz[j] * pa_y[j] * pb_xxz[j] - pc_xyz[j] * pa_z[j] * pb_xxx[j] - 3.0 * pc_xxy[j] * pa_z[j] * pb_xxz[j] - pc_xyz[j] * pb_xxxz[j]);

                t_xyz_xxxz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xx[j] * pa_y[j] * fl2_fx + 3.0 * pc_xxy[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_zz[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * pa_xy[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_xy[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_xxxy[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxz[j] * pa_yz[j] * fl1_fx + 4.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx + 1.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_xx[j] + pa_xyz[j] * pc_xxxz[j] + 3.0 * pa_xy[j] * pc_xxzz[j] * pb_x[j] + pa_xy[j] * pc_xxxz[j] * pb_z[j] + 3.0 * pa_xz[j] * pc_xxyz[j] * pb_x[j] + pa_xz[j] * pc_xxxy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xyzz[j] * pb_xx[j] + 3.0 * pa_x[j] * pc_xxyz[j] * pb_xz[j] + 3.0 * pc_xxxz[j] * pa_yz[j] * pb_x[j] + pc_xxxx[j] * pa_yz[j] * pb_z[j] + 3.0 * pc_xxzz[j] * pa_y[j] * pb_xx[j] + 3.0 * pc_xxxz[j] * pa_y[j] * pb_xz[j] + 3.0 * pc_xxyz[j] * pa_z[j] * pb_xx[j] + 3.0 * pc_xxxy[j] * pa_z[j] * pb_xz[j] + pc_xyzz[j] * pb_xxx[j] + 3.0 * pc_xxyz[j] * pb_xxz[j]);

                t_xyz_xxxz[j] += fl_s_0_0_5 * (-1.5 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_xxxy[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxx[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxxy[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pb_x[j] - pa_xy[j] * pc_xxxzz[j] - pa_xz[j] * pc_xxxyz[j] - 3.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - pa_x[j] * pc_xxxyz[j] * pb_z[j] - pc_xxxxz[j] * pa_yz[j] - 3.0 * pc_xxxzz[j] * pa_y[j] * pb_x[j] - pc_xxxxz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xxxyz[j] * pa_z[j] * pb_x[j] - pc_xxxxy[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxyzz[j] * pb_xx[j] - 3.0 * pc_xxxyz[j] * pb_xz[j]);

                t_xyz_xxxz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxxxy[j] * fl1_fx + pa_x[j] * pc_xxxyzz[j] + pc_xxxxzz[j] * pa_y[j] + pc_xxxxyz[j] * pa_z[j] + 3.0 * pc_xxxyzz[j] * pb_x[j] + pc_xxxxyz[j] * pb_z[j]);

                t_xyz_xxxz[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_63_66(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (63,66)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyz_xxyy = primBuffer.data(150 * idx + 63);

            auto t_xyz_xxyz = primBuffer.data(150 * idx + 64);

            auto t_xyz_xxzz = primBuffer.data(150 * idx + 65);

            // Batch of Integrals (63,66)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, pb_x, pb_xx, pb_xxy, pb_xxyy, \
                                     pb_xxyz, pb_xxz, pb_xxzz, pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyz, pc_xxxyyz, \
                                     pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, \
                                     pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyyzz, \
                                     pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, \
                                     pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyz_xxyy, t_xyz_xxyz, \
                                     t_xyz_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyz_xxyy[j] = fl_s_0_0_0 * (0.25 * pa_xyz[j] * fl2_fx + 0.5 * pa_xz[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pa_yz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_xyz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xyz[j] * fl1_fx * pb_yy[j] + pa_xz[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_yz[j] * pb_xyy[j] + pa_xyz[j] * pb_xxyy[j]);

                t_xyz_xxyy[j] += fl_s_0_0_1 * (-0.5 * pa_xyz[j] * fl2_fx - 0.25 * pa_xy[j] * pc_z[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - pa_xz[j] * fl2_fx * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - fl2_fx * pa_yz[j] * pb_x[j] - 0.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - fl2_fx * pc_z[j] * pb_xy[j] - 2.0 * fl2_fx * pa_z[j] * pb_xy[j] - 0.5 * pa_xyz[j] * pb_xx[j] * fl1_fx - pa_xyz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xyz[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xyz[j] * fl1_fx * pb_yy[j] - 0.5 * pa_xy[j] * pc_z[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yy[j] - 1.5 * pa_xz[j] * pc_y[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yy[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] - pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] - pa_xz[j] * fl1_fx * pb_xxy[j] - 0.5 * pc_x[j] * pa_yz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yy[j] - pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] - 2.0 * fl1_fx * pa_yz[j] * pb_xy[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_z[j] * pb_xyy[j] - fl1_fx * pc_y[j] * pa_z[j] * pb_xyy[j] - fl1_fx * pa_yz[j] * pb_xyy[j] - 2.0 * pa_xyz[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_xyz[j] * pb_xyy[j] * pc_x[j] - pa_xy[j] * pc_z[j] * pb_xxyy[j] - pa_xz[j] * pc_y[j] * pb_xxyy[j] - pc_x[j] * pa_yz[j] * pb_xxyy[j]);

                t_xyz_xxyy[j] += fl_s_0_0_2 * (0.25 * pa_xyz[j] * fl2_fx + 0.5 * pa_xy[j] * pc_z[j] * fl2_fx + 1.5 * pa_xz[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 0.5 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * pa_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + 3.0 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 2.0 * fl2_fx * pc_z[j] * pb_xy[j] + 0.5 * fl2_fx * pa_yz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xy[j] + pa_xyz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xyz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xyz[j] * fl1_fx * pc_yy[j] + pa_xyz[j] * fl1_fx * pb_y[j] * pc_y[j] + 0.5 * pa_xy[j] * pc_z[j] * pb_xx[j] * fl1_fx + pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yy[j] + 1.5 * pa_xz[j] * pc_y[j] * pb_xx[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + pa_xz[j] * pc_yy[j] * fl1_fx * pb_y[j] + 0.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_yz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] + pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] + 2.0 * pa_x[j] * fl1_fx * pc_xz[j] * pb_xy[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] + pa_x[j] * fl1_fx * pc_z[j] * pb_xxy[j] + 0.5 * pc_x[j] * pa_yz[j] * pb_xx[j] * fl1_fx + pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_y[j] + 1.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yy[j] + 0.5 * pc_xz[j] * pa_y[j] * pb_xx[j] * fl1_fx + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xy[j] * pa_z[j] * pb_xx[j] * fl1_fx + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] + 2.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] + pc_xz[j] * fl1_fx * pb_xxy[j] + pc_x[j] * fl1_fx * pa_z[j] * pb_xxy[j] + fl1_fx * pa_yz[j] * pb_x[j] * pc_yy[j] + 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] + 2.0 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xy[j] + fl1_fx * pc_yz[j] * pb_xyy[j] + 2.0 * fl1_fx * pa_yz[j] * pb_xy[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_z[j] * pb_xyy[j] + fl1_fx * pc_y[j] * pa_z[j] * pb_xyy[j] + pa_xyz[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_xyz[j] * pb_xy[j] * pc_xy[j] + pa_xyz[j] * pc_xx[j] * pb_yy[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xxy[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xyy[j] + 2.0 * pa_xz[j] * pc_yy[j] * pb_xxy[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xyy[j] + pa_x[j] * pc_yz[j] * pb_xxyy[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xxy[j] + 2.0 * pc_xx[j] * pa_yz[j] * pb_xyy[j] + pc_xz[j] * pa_y[j] * pb_xxyy[j] + pc_xy[j] * pa_z[j] * pb_xxyy[j]);

                t_xyz_xxyy[j] += fl_s_0_0_3 * (-0.25 * pa_xy[j] * pc_z[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 1.5 * pc_xz[j] * pa_y[j] * fl2_fx - 4.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - 0.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_xyz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xyz[j] * fl1_fx * pc_yy[j] - pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xy[j] * pc_xxz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_yyz[j] * fl1_fx - pa_xy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xxy[j] * fl1_fx - 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx - pa_xz[j] * pc_yy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yz[j] * pb_xx[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] - pa_x[j] * fl1_fx * pc_xxz[j] * pb_y[j] - pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 2.0 * pa_x[j] * fl1_fx * pc_xz[j] * pb_xy[j] - pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xz[j] * pa_y[j] * pb_xx[j] * fl1_fx - pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * pa_z[j] * pb_xx[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - pc_xxx[j] * fl1_fx * pa_z[j] * pb_y[j] - 2.0 * pc_xxz[j] * fl1_fx * pb_xy[j] - 2.0 * pc_xx[j] * fl1_fx * pa_z[j] * pb_xy[j] - pc_xz[j] * fl1_fx * pb_xxy[j] - fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] - fl1_fx * pc_yyy[j] * pa_z[j] * pb_x[j] - 2.0 * fl1_fx * pc_yyz[j] * pb_xy[j] - fl1_fx * pa_yz[j] * pb_x[j] * pc_yy[j] - 2.0 * fl1_fx * pa_y[j] * pc_yz[j] * pb_xy[j] - 2.0 * fl1_fx * pc_yy[j] * pa_z[j] * pb_xy[j] - fl1_fx * pc_yz[j] * pb_xyy[j] - 2.0 * pa_xyz[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_xyz[j] * pc_xxy[j] * pb_y[j] - pa_xy[j] * pc_yyz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xyz[j] * pb_xy[j] - pa_xy[j] * pc_xxz[j] * pb_yy[j] - pa_xz[j] * pc_yyy[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xyy[j] * pb_xy[j] - pa_xz[j] * pc_xxy[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_yyz[j] * pb_xxy[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xyy[j] - pc_xyy[j] * pa_yz[j] * pb_xx[j] - 4.0 * pc_xxy[j] * pa_yz[j] * pb_xy[j] - pc_xxx[j] * pa_yz[j] * pb_yy[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xxy[j] - 2.0 * pc_xxz[j] * pa_y[j] * pb_xyy[j] - 2.0 * pc_xyy[j] * pa_z[j] * pb_xxy[j] - 2.0 * pc_xxy[j] * pa_z[j] * pb_xyy[j] - pc_xyz[j] * pb_xxyy[j]);

                t_xyz_xxyy[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 0.5 * pa_xy[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_xy[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xxy[j] * fl1_fx + 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_xxz[j] * pb_y[j] + 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_yz[j] * fl1_fx + pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xxyz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pc_xxxz[j] * fl1_fx * pb_y[j] + pc_xxx[j] * fl1_fx * pa_z[j] * pb_y[j] + 2.0 * pc_xxz[j] * fl1_fx * pb_xy[j] + fl1_fx * pc_yyyz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_yyz[j] * pb_x[j] + fl1_fx * pc_yyy[j] * pa_z[j] * pb_x[j] + 2.0 * fl1_fx * pc_yyz[j] * pb_xy[j] + pa_xyz[j] * pc_xxyy[j] + 2.0 * pa_xy[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyy[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxyy[j] * pb_y[j] + pa_x[j] * pc_yyyz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xyyz[j] * pb_xy[j] + pa_x[j] * pc_xxyz[j] * pb_yy[j] + 2.0 * pc_xxyy[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_yz[j] * pb_y[j] + pc_xyyz[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pa_y[j] * pb_xy[j] + pc_xxxz[j] * pa_y[j] * pb_yy[j] + pc_xyyy[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxyy[j] * pa_z[j] * pb_xy[j] + pc_xxxy[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xyyz[j] * pb_xxy[j] + 2.0 * pc_xxyz[j] * pb_xyy[j]);

                t_xyz_xxyy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 0.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - pc_xxxz[j] * fl1_fx * pb_y[j] - fl1_fx * pc_yyyz[j] * pb_x[j] - pa_xy[j] * pc_xxyyz[j] - pa_xz[j] * pc_xxyyy[j] - 2.0 * pa_x[j] * pc_xyyyz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyyz[j] * pb_y[j] - pc_xxxyy[j] * pa_yz[j] - 2.0 * pc_xxyyz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyyy[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyy[j] * pa_z[j] * pb_y[j] - pc_xyyyz[j] * pb_xx[j] - 4.0 * pc_xxyyz[j] * pb_xy[j] - pc_xxxyz[j] * pb_yy[j]);

                t_xyz_xxyy[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_xxyyyz[j] + pc_xxxyyz[j] * pa_y[j] + pc_xxxyyy[j] * pa_z[j] + 2.0 * pc_xxyyyz[j] * pb_x[j] + 2.0 * pc_xxxyyz[j] * pb_y[j]);

                t_xyz_xxyy[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];

                t_xyz_xxyz[j] = fl_s_0_0_0 * (0.125 * pa_x[j] * fl3_fx + 0.25 * fl3_fx * pb_x[j] + 0.25 * pa_xy[j] * fl2_fx * pb_y[j] + 0.25 * pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xxy[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_yz[j] * pb_xyz[j] + pa_xyz[j] * pb_xxyz[j]);

                t_xyz_xxyz[j] += fl_s_0_0_1 * (-0.375 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 0.25 * pa_xy[j] * fl2_fx * pc_y[j] - 0.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.25 * pa_xz[j] * fl2_fx * pc_z[j] - 0.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - fl2_fx * pa_y[j] * pb_xy[j] - 0.5 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_xz[j] - fl2_fx * pa_z[j] * pb_xz[j] - 0.5 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_xyz[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_xyz[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] - pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xxy[j] - 0.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yz[j] - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] - pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] - fl1_fx * pa_yz[j] * pb_xy[j] * pc_z[j] - fl1_fx * pa_yz[j] * pb_xz[j] * pc_y[j] - fl1_fx * pa_y[j] * pc_z[j] * pb_xyz[j] - fl1_fx * pc_y[j] * pa_z[j] * pb_xyz[j] - fl1_fx * pa_yz[j] * pb_xyz[j] - pa_xyz[j] * pb_xxy[j] * pc_z[j] - pa_xyz[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_xyz[j] * pb_xyz[j] * pc_x[j] - pa_xy[j] * pc_z[j] * pb_xxyz[j] - pa_xz[j] * pc_y[j] * pb_xxyz[j] - pc_x[j] * pa_yz[j] * pb_xxyz[j]);

                t_xyz_xxyz[j] += fl_s_0_0_2 * (0.375 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.5 * pa_xy[j] * fl2_fx * pc_y[j] + 0.25 * pa_xy[j] * fl2_fx * pb_y[j] + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 0.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.5 * pa_xz[j] * fl2_fx * pc_z[j] + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + 0.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.25 * pa_xz[j] * fl2_fx * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 0.5 * pc_x[j] * fl2_fx * pb_xx[j] + fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + fl2_fx * pc_y[j] * pb_xy[j] + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + fl2_fx * pc_z[j] * pb_xz[j] + 0.5 * fl2_fx * pa_y[j] * pb_xy[j] + 0.5 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * pa_xyz[j] * fl1_fx * pc_yz[j] + 0.5 * pa_xyz[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_xyz[j] * fl1_fx * pc_y[j] * pb_z[j] + 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_yz[j] + pa_xy[j] * fl1_fx * pb_x[j] * pc_xy[j] + 0.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_xy[j] * fl1_fx * pb_xx[j] * pc_y[j] + pa_xy[j] * fl1_fx * pb_xy[j] * pc_x[j] + 0.5 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 0.5 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 0.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_yz[j] + 0.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xxy[j] + pa_xz[j] * fl1_fx * pb_x[j] * pc_xz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] + pa_x[j] * fl1_fx * pc_xz[j] * pb_xz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_z[j] + pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xxz[j] + 1.5 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] + pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] + pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xxz[j] + fl1_fx * pa_yz[j] * pb_x[j] * pc_yz[j] + fl1_fx * pa_y[j] * pc_zz[j] * pb_xy[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] + fl1_fx * pc_yz[j] * pa_z[j] * pb_xy[j] + fl1_fx * pc_yy[j] * pa_z[j] * pb_xz[j] + fl1_fx * pc_yz[j] * pb_xyz[j] + fl1_fx * pa_yz[j] * pb_xy[j] * pc_z[j] + fl1_fx * pa_yz[j] * pb_xz[j] * pc_y[j] + fl1_fx * pa_y[j] * pc_z[j] * pb_xyz[j] + fl1_fx * pc_y[j] * pa_z[j] * pb_xyz[j] + pa_xyz[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_xyz[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_xyz[j] * pb_xz[j] * pc_xy[j] + pa_xyz[j] * pc_xx[j] * pb_yz[j] + pa_xy[j] * pc_zz[j] * pb_xxy[j] + pa_xy[j] * pc_yz[j] * pb_xxz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xyz[j] + pa_xz[j] * pc_yz[j] * pb_xxy[j] + pa_xz[j] * pc_yy[j] * pb_xxz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xyz[j] + pa_x[j] * pc_yz[j] * pb_xxyz[j] + pc_xz[j] * pa_yz[j] * pb_xxy[j] + pc_xy[j] * pa_yz[j] * pb_xxz[j] + 2.0 * pc_xx[j] * pa_yz[j] * pb_xyz[j] + pc_xz[j] * pa_y[j] * pb_xxyz[j] + pc_xy[j] * pa_z[j] * pb_xxyz[j]);

                t_xyz_xxyz[j] += fl_s_0_0_3 * (-0.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.25 * fl3_fx * pb_x[j] - 0.25 * pa_xy[j] * fl2_fx * pc_y[j] - 0.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.5 * pa_x[j] * fl2_fx * pc_zz[j] - 0.5 * pa_x[j] * fl2_fx * pc_xx[j] - 0.25 * pa_xz[j] * fl2_fx * pc_z[j] - 0.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.25 * pc_xxx[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - fl2_fx * pc_yy[j] * pb_x[j] - fl2_fx * pc_zz[j] * pb_x[j] - 0.5 * fl2_fx * pa_y[j] * pb_x[j] * pc_y[j] - 0.5 * fl2_fx * pc_y[j] * pb_xy[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_xyz[j] * fl1_fx * pc_yz[j] - 0.5 * pa_xy[j] * pc_yzz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xxy[j] - pa_xy[j] * fl1_fx * pb_x[j] * pc_xy[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xx[j] * pb_y[j] - 0.5 * pa_xz[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] - 0.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_xx[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xxz[j] - pa_x[j] * fl1_fx * pc_xzz[j] * pb_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_z[j] - pa_xz[j] * fl1_fx * pb_x[j] * pc_xz[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_xx[j] - pa_x[j] * fl1_fx * pc_xz[j] * pb_xz[j] - 1.5 * pc_xyz[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_yz[j] - pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] - 0.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_xx[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - pc_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xxy[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] - 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_z[j] - 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] - pc_xxz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_xx[j] - pc_xx[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xxz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] - fl1_fx * pc_yzz[j] * pb_xy[j] - fl1_fx * pc_yyz[j] * pb_xz[j] - fl1_fx * pa_yz[j] * pb_x[j] * pc_yz[j] - fl1_fx * pa_y[j] * pc_zz[j] * pb_xy[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_xz[j] - fl1_fx * pc_yz[j] * pa_z[j] * pb_xy[j] - fl1_fx * pc_yy[j] * pa_z[j] * pb_xz[j] - fl1_fx * pc_yz[j] * pb_xyz[j] - 2.0 * pa_xyz[j] * pb_x[j] * pc_xyz[j] - pa_xyz[j] * pc_xxz[j] * pb_y[j] - pa_xyz[j] * pc_xxy[j] * pb_z[j] - pa_xy[j] * pc_yzz[j] * pb_xx[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_xz[j] - pa_xy[j] * pc_xxz[j] * pb_yz[j] - pa_xz[j] * pc_yyz[j] * pb_xx[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_xz[j] - pa_xz[j] * pc_xxy[j] * pb_yz[j] - pa_x[j] * pc_yzz[j] * pb_xxy[j] - pa_x[j] * pc_yyz[j] * pb_xxz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xyz[j] - pc_xyz[j] * pa_yz[j] * pb_xx[j] - 2.0 * pc_xxz[j] * pa_yz[j] * pb_xy[j] - 2.0 * pc_xxy[j] * pa_yz[j] * pb_xz[j] - pc_xxx[j] * pa_yz[j] * pb_yz[j] - pc_xzz[j] * pa_y[j] * pb_xxy[j] - pc_xyz[j] * pa_y[j] * pb_xxz[j] - 2.0 * pc_xxz[j] * pa_y[j] * pb_xyz[j] - pc_xyz[j] * pa_z[j] * pb_xxy[j] - pc_xyy[j] * pa_z[j] * pb_xxz[j] - 2.0 * pc_xxy[j] * pa_z[j] * pb_xyz[j] - pc_xyz[j] * pb_xxyz[j]);

                t_xyz_xxyz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.25 * pa_x[j] * pc_yy[j] * fl2_fx + 0.25 * pa_x[j] * fl2_fx * pc_zz[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xzz[j] * fl2_fx + 0.5 * pc_xxx[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pc_yy[j] * pb_x[j] + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + 0.5 * pa_xy[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_xy[j] * fl1_fx * pc_xxy[j] + 0.5 * pa_xz[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_x[j] + 0.5 * pa_x[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xxz[j] + pa_x[j] * fl1_fx * pc_xzz[j] * pb_x[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxz[j] * pb_z[j] + 1.5 * pc_xyz[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx + pc_xxy[j] * pa_y[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxx[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yz[j] + pc_xxyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + pc_xxy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxxz[j] * fl1_fx * pa_z[j] + pc_xxzz[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_x[j] + 0.5 * pc_xxx[j] * fl1_fx * pa_z[j] * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_xx[j] + pc_xxz[j] * fl1_fx * pb_xz[j] + fl1_fx * pc_yyzz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_x[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_x[j] + fl1_fx * pc_yzz[j] * pb_xy[j] + fl1_fx * pc_yyz[j] * pb_xz[j] + pa_xyz[j] * pc_xxyz[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_x[j] + pa_xy[j] * pc_xxzz[j] * pb_y[j] + pa_xy[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_x[j] + pa_xz[j] * pc_xxyz[j] * pb_y[j] + pa_xz[j] * pc_xxyy[j] * pb_z[j] + pa_x[j] * pc_yyzz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_xz[j] + pa_x[j] * pc_xxyz[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_yz[j] * pb_x[j] + pc_xxxz[j] * pa_yz[j] * pb_y[j] + pc_xxxy[j] * pa_yz[j] * pb_z[j] + pc_xyzz[j] * pa_y[j] * pb_xx[j] + 2.0 * pc_xxzz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_xz[j] + pc_xxxz[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxyy[j] * pa_z[j] * pb_xz[j] + pc_xxxy[j] * pa_z[j] * pb_yz[j] + pc_xyzz[j] * pb_xxy[j] + pc_xyyz[j] * pb_xxz[j] + 2.0 * pc_xxyz[j] * pb_xyz[j]);

                t_xyz_xxyz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_xxyy[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xxzz[j] - 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxy[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxyy[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] - 0.5 * pc_xxxzz[j] * fl1_fx - 0.5 * pc_xxxz[j] * fl1_fx * pa_z[j] - pc_xxzz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxz[j] * fl1_fx * pb_z[j] - fl1_fx * pc_yyzz[j] * pb_x[j] - pa_xy[j] * pc_xxyzz[j] - pa_xz[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - pa_x[j] * pc_xxyzz[j] * pb_y[j] - pa_x[j] * pc_xxyyz[j] * pb_z[j] - pc_xxxyz[j] * pa_yz[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_x[j] - pc_xxxzz[j] * pa_y[j] * pb_y[j] - pc_xxxyz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - pc_xxxyz[j] * pa_z[j] * pb_y[j] - pc_xxxyy[j] * pa_z[j] * pb_z[j] - pc_xyyzz[j] * pb_xx[j] - 2.0 * pc_xxyzz[j] * pb_xy[j] - 2.0 * pc_xxyyz[j] * pb_xz[j] - pc_xxxyz[j] * pb_yz[j]);

                t_xyz_xxyz[j] += fl_s_0_0_6 * (1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * pc_xxxzz[j] * fl1_fx + pa_x[j] * pc_xxyyzz[j] + pc_xxxyzz[j] * pa_y[j] + pc_xxxyyz[j] * pa_z[j] + 2.0 * pc_xxyyzz[j] * pb_x[j] + pc_xxxyzz[j] * pb_y[j] + pc_xxxyyz[j] * pb_z[j]);

                t_xyz_xxyz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];

                t_xyz_xxzz[j] = fl_s_0_0_0 * (0.25 * pa_xyz[j] * fl2_fx + 0.5 * pa_xy[j] * fl2_fx * pb_z[j] + 0.5 * fl2_fx * pa_yz[j] * pb_x[j] + fl2_fx * pa_y[j] * pb_xz[j] + 0.5 * pa_xyz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xyz[j] * fl1_fx * pb_zz[j] + pa_xy[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_yz[j] * pb_xzz[j] + pa_xyz[j] * pb_xxzz[j]);

                t_xyz_xxzz[j] += fl_s_0_0_1 * (-0.5 * pa_xyz[j] * fl2_fx - 0.75 * pa_xy[j] * pc_z[j] * fl2_fx - pa_xy[j] * fl2_fx * pb_z[j] - 0.25 * pa_xz[j] * pc_y[j] * fl2_fx - 0.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - fl2_fx * pa_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 2.0 * fl2_fx * pa_y[j] * pb_xz[j] - 0.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * pa_xyz[j] * pb_xx[j] * fl1_fx - pa_xyz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xy[j] * pc_z[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_zz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] - pa_xy[j] * fl1_fx * pb_xxz[j] - 0.5 * pa_xz[j] * pc_y[j] * pb_xx[j] * fl1_fx - 0.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] - pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] - 0.5 * pc_x[j] * pa_yz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] - pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] - 2.0 * fl1_fx * pa_yz[j] * pb_xz[j] * pc_z[j] - fl1_fx * pa_y[j] * pc_z[j] * pb_xzz[j] - fl1_fx * pc_y[j] * pa_z[j] * pb_xzz[j] - fl1_fx * pa_yz[j] * pb_xzz[j] - 2.0 * pa_xyz[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_xyz[j] * pb_xzz[j] * pc_x[j] - pa_xy[j] * pc_z[j] * pb_xxzz[j] - pa_xz[j] * pc_y[j] * pb_xxzz[j] - pc_x[j] * pa_yz[j] * pb_xxzz[j]);

                t_xyz_xxzz[j] += fl_s_0_0_2 * (0.25 * pa_xyz[j] * fl2_fx + 1.5 * pa_xy[j] * pc_z[j] * fl2_fx + 0.5 * pa_xy[j] * fl2_fx * pb_z[j] + 0.5 * pa_xz[j] * pc_y[j] * fl2_fx + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 0.75 * pc_xy[j] * pa_z[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] + fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 2.0 * fl2_fx * pc_y[j] * pb_xz[j] + 0.5 * fl2_fx * pa_yz[j] * pb_x[j] + fl2_fx * pa_y[j] * pb_xz[j] + pa_xyz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xyz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xyz[j] * fl1_fx * pc_zz[j] + pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xy[j] * pc_z[j] * pb_xx[j] * fl1_fx + 3.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_zz[j] + pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] + 2.0 * pa_xy[j] * fl1_fx * pb_xz[j] * pc_x[j] + 0.5 * pa_xz[j] * pc_y[j] * pb_xx[j] * fl1_fx + pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx + pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_yz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_y[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_x[j] * pa_yz[j] * pb_xx[j] * fl1_fx + pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xz[j] * pa_y[j] * pb_xx[j] * fl1_fx + 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] + 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] + pc_x[j] * pa_y[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_xy[j] * pa_z[j] * pb_xx[j] * fl1_fx + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] + pc_xy[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_yz[j] * pb_x[j] * pc_zz[j] + 2.0 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xz[j] + 2.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xz[j] + fl1_fx * pc_yz[j] * pb_xzz[j] + 2.0 * fl1_fx * pa_yz[j] * pb_xz[j] * pc_z[j] + fl1_fx * pa_y[j] * pc_z[j] * pb_xzz[j] + fl1_fx * pc_y[j] * pa_z[j] * pb_xzz[j] + pa_xyz[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_xyz[j] * pb_xz[j] * pc_xz[j] + pa_xyz[j] * pc_xx[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_zz[j] * pb_xxz[j] + 2.0 * pa_xy[j] * pc_xz[j] * pb_xzz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xxz[j] + 2.0 * pa_xz[j] * pc_xy[j] * pb_xzz[j] + pa_x[j] * pc_yz[j] * pb_xxzz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xxz[j] + 2.0 * pc_xx[j] * pa_yz[j] * pb_xzz[j] + pc_xz[j] * pa_y[j] * pb_xxzz[j] + pc_xy[j] * pa_z[j] * pb_xxzz[j]);

                t_xyz_xxzz[j] += fl_s_0_0_3 * (-0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 0.25 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 4.5 * pc_xz[j] * pa_y[j] * fl2_fx - 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_x[j] - 0.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_x[j] - fl2_fx * pc_y[j] * pb_xz[j] - 0.5 * pa_xyz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xyz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xxz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx - pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] - pa_xy[j] * fl1_fx * pc_xx[j] * pb_z[j] - pa_xz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xz[j] * pc_xxy[j] * fl1_fx - 0.5 * pa_xz[j] * pc_yzz[j] * fl1_fx - pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * pb_xx[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_xy[j] * fl1_fx * pb_xz[j] - pc_xx[j] * pa_yz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xz[j] * pa_y[j] * pb_xx[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] - 1.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] - pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xx[j] * pa_y[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xy[j] * pa_z[j] * pb_xx[j] * fl1_fx - pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xyz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xxy[j] * fl1_fx * pb_xz[j] - pc_xy[j] * fl1_fx * pb_xxz[j] - fl1_fx * pa_y[j] * pc_zzz[j] * pb_x[j] - fl1_fx * pc_yzz[j] * pa_z[j] * pb_x[j] - 2.0 * fl1_fx * pc_yzz[j] * pb_xz[j] - fl1_fx * pa_yz[j] * pb_x[j] * pc_zz[j] - 2.0 * fl1_fx * pa_y[j] * pc_zz[j] * pb_xz[j] - 2.0 * fl1_fx * pc_yz[j] * pa_z[j] * pb_xz[j] - fl1_fx * pc_yz[j] * pb_xzz[j] - 2.0 * pa_xyz[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_xyz[j] * pc_xxz[j] * pb_z[j] - pa_xy[j] * pc_zzz[j] * pb_xx[j] - 4.0 * pa_xy[j] * pc_xzz[j] * pb_xz[j] - pa_xy[j] * pc_xxz[j] * pb_zz[j] - pa_xz[j] * pc_yzz[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xz[j] - pa_xz[j] * pc_xxy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_yzz[j] * pb_xxz[j] - 2.0 * pa_x[j] * pc_xyz[j] * pb_xzz[j] - pc_xzz[j] * pa_yz[j] * pb_xx[j] - 4.0 * pc_xxz[j] * pa_yz[j] * pb_xz[j] - pc_xxx[j] * pa_yz[j] * pb_zz[j] - 2.0 * pc_xzz[j] * pa_y[j] * pb_xxz[j] - 2.0 * pc_xxz[j] * pa_y[j] * pb_xzz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xxz[j] - 2.0 * pc_xxy[j] * pa_z[j] * pb_xzz[j] - pc_xyz[j] * pb_xxzz[j]);

                t_xyz_xxzz[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 2.25 * pc_xz[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 1.5 * pa_xy[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx + 0.5 * pa_xz[j] * pc_xxy[j] * fl1_fx + 0.5 * pa_xz[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_y[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xzzz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xxx[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xxy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xxyz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pc_xxxy[j] * fl1_fx * pb_z[j] + 2.0 * pc_xxy[j] * fl1_fx * pb_xz[j] + fl1_fx * pc_yzzz[j] * pb_x[j] + fl1_fx * pa_y[j] * pc_zzz[j] * pb_x[j] + fl1_fx * pc_yzz[j] * pa_z[j] * pb_x[j] + 2.0 * fl1_fx * pc_yzz[j] * pb_xz[j] + pa_xyz[j] * pc_xxzz[j] + 2.0 * pa_xy[j] * pc_xzzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xxzz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxyz[j] * pb_z[j] + pa_x[j] * pc_yzzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_xz[j] + pa_x[j] * pc_xxyz[j] * pb_zz[j] + 2.0 * pc_xxzz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_yz[j] * pb_z[j] + pc_xzzz[j] * pa_y[j] * pb_xx[j] + 4.0 * pc_xxzz[j] * pa_y[j] * pb_xz[j] + pc_xxxz[j] * pa_y[j] * pb_zz[j] + pc_xyzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_xz[j] + pc_xxxy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xyzz[j] * pb_xxz[j] + 2.0 * pc_xxyz[j] * pb_xzz[j]);

                t_xyz_xxzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 1.5 * pc_xxxz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xzzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xxyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - pc_xxxy[j] * fl1_fx * pb_z[j] - fl1_fx * pc_yzzz[j] * pb_x[j] - pa_xy[j] * pc_xxzzz[j] - pa_xz[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyzz[j] * pb_z[j] - pc_xxxzz[j] * pa_yz[j] - 2.0 * pc_xxzzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxxzz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xxyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - pc_xyzzz[j] * pb_xx[j] - 4.0 * pc_xxyzz[j] * pb_xz[j] - pc_xxxyz[j] * pb_zz[j]);

                t_xyz_xxzz[j] += fl_s_0_0_6 * (1.5 * pc_xxxyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_xxyzzz[j] + pc_xxxzzz[j] * pa_y[j] + pc_xxxyzz[j] * pa_z[j] + 2.0 * pc_xxyzzz[j] * pb_x[j] + 2.0 * pc_xxxyzz[j] * pb_z[j]);

                t_xyz_xxzz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_66_69(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (66,69)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyz_xyyy = primBuffer.data(150 * idx + 66);

            auto t_xyz_xyyz = primBuffer.data(150 * idx + 67);

            auto t_xyz_xyzz = primBuffer.data(150 * idx + 68);

            // Batch of Integrals (66,69)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, pb_x, pb_xy, pb_xyy, pb_xyyy, \
                                     pb_xyyz, pb_xyz, pb_xyzz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, \
                                     pb_zz, pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyz, pc_xxyyyz, \
                                     pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyz, pc_xyyyzz, \
                                     pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyz_xyyy, t_xyz_xyyz, t_xyz_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyz_xyyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_xyz[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xz[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yyy[j] + pa_xyz[j] * pb_xyyy[j]);

                t_xyz_xyyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_yz[j] * pb_y[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 2.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * fl2_fx * pa_z[j] * pb_yy[j] - 1.5 * pa_xyz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xyz[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_z[j] * pb_xy[j] * fl1_fx - 4.5 * pa_xz[j] * pc_y[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_x[j] * pa_yz[j] * pb_xy[j] * fl1_fx - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] - 1.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yyy[j] - 3.0 * pa_xyz[j] * pb_xyy[j] * pc_y[j] - pa_xyz[j] * pc_x[j] * pb_yyy[j] - pa_xy[j] * pc_z[j] * pb_xyyy[j] - pa_xz[j] * pc_y[j] * pb_xyyy[j] - pc_x[j] * pa_yz[j] * pb_xyyy[j]);

                t_xyz_xyyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 1.5 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 0.75 * pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 4.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.75 * fl2_fx * pa_yz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_xyz[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xy[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xz[j] * pc_y[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 4.5 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * pb_xy[j] * fl1_fx + 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xyy[j] + 1.5 * pc_x[j] * pa_yz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xz[j] * pa_y[j] * pb_xy[j] * fl1_fx + 4.5 * pc_xy[j] * pa_z[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xyy[j] + 1.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_yy[j] + 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] + 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yy[j] + 0.5 * fl1_fx * pc_yz[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyy[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyy[j] + 3.0 * pa_xyz[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_xyz[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_xy[j] * pc_yz[j] * pb_xyy[j] + pa_xy[j] * pc_xz[j] * pb_yyy[j] + 3.0 * pa_xz[j] * pc_yy[j] * pb_xyy[j] + pa_xz[j] * pc_xy[j] * pb_yyy[j] + pa_x[j] * pc_yz[j] * pb_xyyy[j] + 3.0 * pc_xy[j] * pa_yz[j] * pb_xyy[j] + pc_xx[j] * pa_yz[j] * pb_yyy[j] + pc_xz[j] * pa_y[j] * pb_xyyy[j] + pc_xy[j] * pa_z[j] * pb_xyyy[j]);

                t_xyz_xyyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 1.5 * pc_xx[j] * fl2_fx * pa_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxz[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 3.0 * fl2_fx * pc_yy[j] * pa_z[j] - 4.5 * fl2_fx * pc_yz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yyz[j] - 0.75 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 2.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_xyz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 4.5 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx - 4.5 * pa_x[j] * pc_yz[j] * pb_xy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 1.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_yy[j] - 1.5 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_y[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx - 4.5 * pc_xy[j] * pa_z[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx - 4.5 * pc_xyz[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yyy[j] - 1.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] - 1.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_y[j] - 1.5 * fl1_fx * pc_yyz[j] * pb_yy[j] - 1.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_yy[j] - 1.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_yy[j] - 1.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_yy[j] - 0.5 * fl1_fx * pc_yz[j] * pb_yyy[j] - pa_xyz[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_xyz[j] * pc_xyy[j] * pb_y[j] - 3.0 * pa_xy[j] * pc_yyz[j] * pb_xy[j] - 3.0 * pa_xy[j] * pc_xyz[j] * pb_yy[j] - 3.0 * pa_xz[j] * pc_yyy[j] * pb_xy[j] - 3.0 * pa_xz[j] * pc_xyy[j] * pb_yy[j] - 3.0 * pa_x[j] * pc_yyz[j] * pb_xyy[j] - pa_x[j] * pc_xyz[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_yz[j] * pb_xy[j] - 3.0 * pc_xxy[j] * pa_yz[j] * pb_yy[j] - 3.0 * pc_xyz[j] * pa_y[j] * pb_xyy[j] - pc_xxz[j] * pa_y[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_z[j] * pb_xyy[j] - pc_xxy[j] * pa_z[j] * pb_yyy[j] - pc_xyz[j] * pb_xyyy[j]);

                t_xyz_xyyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_yyz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 1.5 * fl2_fx * pc_yy[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 4.5 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 4.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xxyz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyyz[j] + 0.5 * fl1_fx * pc_yyyy[j] * pa_z[j] + 1.5 * fl1_fx * pc_yyyz[j] * pb_y[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yyy[j] + 1.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_y[j] + 1.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_y[j] + 1.5 * fl1_fx * pc_yyz[j] * pb_yy[j] + pa_xyz[j] * pc_xyyy[j] + pa_xy[j] * pc_yyyz[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xyyz[j] * pb_y[j] + pa_xz[j] * pc_yyyy[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xyyy[j] * pb_y[j] + 3.0 * pa_x[j] * pc_yyyz[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xyyz[j] * pb_yy[j] + pc_xyyy[j] * pa_yz[j] * pb_x[j] + 3.0 * pc_xxyy[j] * pa_yz[j] * pb_y[j] + 3.0 * pc_xyyz[j] * pa_y[j] * pb_xy[j] + 3.0 * pc_xxyz[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xyyy[j] * pa_z[j] * pb_xy[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_xyyz[j] * pb_xyy[j] + pc_xxyz[j] * pb_yyy[j]);

                t_xyz_xyyy[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 1.5 * fl2_fx * pc_yyz[j] - 3.0 * pa_x[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxyz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyyz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyyz[j] - 0.5 * fl1_fx * pc_yyyy[j] * pa_z[j] - 1.5 * fl1_fx * pc_yyyz[j] * pb_y[j] - pa_xy[j] * pc_xyyyz[j] - pa_xz[j] * pc_xyyyy[j] - pa_x[j] * pc_yyyyz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xyyyz[j] * pb_y[j] - pc_xxyyy[j] * pa_yz[j] - pc_xyyyz[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxyyz[j] * pa_y[j] * pb_y[j] - pc_xyyyy[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxyyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyyz[j] * pb_xy[j] - 3.0 * pc_xxyyz[j] * pb_yy[j]);

                t_xyz_xyyy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyyz[j] + pa_x[j] * pc_xyyyyz[j] + pc_xxyyyz[j] * pa_y[j] + pc_xxyyyy[j] * pa_z[j] + pc_xyyyyz[j] * pb_x[j] + 3.0 * pc_xxyyyz[j] * pb_y[j]);

                t_xyz_xyyy[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];

                t_xyz_xyyz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_y[j] + 0.25 * fl3_fx * pb_y[j] + 0.25 * pa_xy[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pa_yz[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xyz[j] * pb_xz[j] * fl1_fx + 0.5 * pa_xy[j] * fl1_fx * pb_xyy[j] + pa_xz[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yyz[j] + pa_xyz[j] * pb_xyyz[j]);

                t_xyz_xyyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 0.75 * fl3_fx * pb_y[j] - 0.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.25 * pa_xy[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - pa_x[j] * fl2_fx * pb_xy[j] - 0.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.25 * fl2_fx * pa_yz[j] * pc_z[j] - 0.5 * fl2_fx * pa_yz[j] * pb_z[j] - 0.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.5 * fl2_fx * pa_y[j] * pb_yy[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_yz[j] - fl2_fx * pa_z[j] * pb_yz[j] - 0.5 * pa_xyz[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_xyz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] - 0.5 * pa_xy[j] * pc_z[j] * pb_xz[j] * fl1_fx - pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_xy[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_xz[j] * pc_y[j] * pb_xz[j] * fl1_fx - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] - pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] - pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] - pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] - pa_xz[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_x[j] * pa_yz[j] * pb_xz[j] * fl1_fx - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] - pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_z[j] - fl1_fx * pa_yz[j] * pb_yz[j] * pc_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yyz[j] - pa_xyz[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_xyz[j] * pb_xyz[j] * pc_y[j] - pa_xyz[j] * pc_x[j] * pb_yyz[j] - pa_xy[j] * pc_z[j] * pb_xyyz[j] - pa_xz[j] * pc_y[j] * pb_xyyz[j] - pc_x[j] * pa_yz[j] * pb_xyyz[j]);

                t_xyz_xyyz[j] += fl_s_0_0_2 * (0.375 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 0.75 * fl3_fx * pb_y[j] + 0.5 * pa_xy[j] * fl2_fx * pc_x[j] + 0.25 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.5 * pa_x[j] * fl2_fx * pb_xy[j] + 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + pc_x[j] * fl2_fx * pb_xy[j] + 0.5 * fl2_fx * pa_yz[j] * pc_z[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + 0.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 0.5 * fl2_fx * pc_y[j] * pb_yy[j] + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + fl2_fx * pc_z[j] * pb_yz[j] + 0.25 * fl2_fx * pa_yz[j] * pb_z[j] + 0.25 * fl2_fx * pa_y[j] * pb_yy[j] + 0.5 * fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * pa_xyz[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_xyz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xyz[j] * pc_x[j] * fl1_fx * pb_z[j] + 0.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 0.5 * pa_xy[j] * pc_z[j] * pb_xz[j] * fl1_fx + 0.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] + pa_xy[j] * fl1_fx * pc_xy[j] * pb_y[j] + pa_xy[j] * fl1_fx * pb_xy[j] * pc_y[j] + 0.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_yy[j] + 1.5 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xz[j] * pc_y[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yz[j] * pb_xz[j] * fl1_fx + pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] + 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xyy[j] + pa_xz[j] * fl1_fx * pc_xz[j] * pb_y[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] + pa_x[j] * fl1_fx * pc_xz[j] * pb_yz[j] + pa_xz[j] * fl1_fx * pb_xy[j] * pc_z[j] + pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] + pa_x[j] * fl1_fx * pc_z[j] * pb_xyz[j] + 0.5 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx + 0.5 * pc_x[j] * pa_yz[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xz[j] * pa_y[j] * pb_xz[j] * fl1_fx + pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xy[j] * pa_z[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xy[j] * fl1_fx * pb_xyy[j] + pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] + pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] + pc_xz[j] * fl1_fx * pb_xyz[j] + pc_x[j] * fl1_fx * pa_z[j] * pb_xyz[j] + fl1_fx * pa_yz[j] * pb_y[j] * pc_yz[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yy[j] + fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_yy[j] + fl1_fx * pc_yy[j] * pa_z[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yy[j] * pc_z[j] + fl1_fx * pa_yz[j] * pb_yz[j] * pc_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yyz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yyz[j] + 2.0 * pa_xyz[j] * pb_xy[j] * pc_yz[j] + pa_xyz[j] * pb_xz[j] * pc_yy[j] + pa_xyz[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_xyz[j] * pc_xy[j] * pb_yz[j] + pa_xy[j] * pc_zz[j] * pb_xyy[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_xyz[j] + pa_xy[j] * pc_xz[j] * pb_yyz[j] + pa_xz[j] * pc_yz[j] * pb_xyy[j] + 2.0 * pa_xz[j] * pc_yy[j] * pb_xyz[j] + pa_xz[j] * pc_xy[j] * pb_yyz[j] + pa_x[j] * pc_yz[j] * pb_xyyz[j] + pc_xz[j] * pa_yz[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_xyz[j] + pc_xx[j] * pa_yz[j] * pb_yyz[j] + pc_xz[j] * pa_y[j] * pb_xyyz[j] + pc_xy[j] * pa_z[j] * pb_xyyz[j]);

                t_xyz_xyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.125 * fl3_fx * pa_y[j] - 0.25 * fl3_fx * pb_y[j] - 0.25 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.25 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_y[j] - 0.5 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pa_y[j] * pc_zz[j] - 0.5 * fl2_fx * pa_y[j] * pc_yy[j] - 1.5 * fl2_fx * pc_yz[j] * pa_z[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pc_yyy[j] - fl2_fx * pc_yy[j] * pb_y[j] - fl2_fx * pc_zz[j] * pb_y[j] - 0.25 * fl2_fx * pa_yz[j] * pc_z[j] - 0.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.5 * fl2_fx * pa_y[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pb_yy[j] - 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_xyz[j] * pc_xz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 0.5 * pa_xy[j] * pc_xzz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_xz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xy[j] * fl1_fx * pc_xyy[j] - 0.5 * pa_xy[j] * fl1_fx * pb_x[j] * pc_yy[j] - pa_xy[j] * fl1_fx * pc_xy[j] * pb_y[j] - 1.5 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_yz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_x[j] - pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] - pa_x[j] * pc_yy[j] * fl1_fx * pb_xy[j] - 0.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_yy[j] - pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] - pa_xz[j] * fl1_fx * pc_xz[j] * pb_y[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_xy[j] - pa_x[j] * fl1_fx * pc_xz[j] * pb_yz[j] - 0.5 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxz[j] * pa_yz[j] * fl1_fx - 0.5 * pc_xx[j] * pa_yz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx - 0.5 * pc_xz[j] * pa_y[j] * pb_xz[j] * fl1_fx - 0.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_x[j] - pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] - pc_xy[j] * pa_y[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_xy[j] * pa_z[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyz[j] * pb_xz[j] * fl1_fx - pc_xyy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xyy[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] - pc_xzz[j] * fl1_fx * pb_xy[j] - pc_xxz[j] * fl1_fx * pb_yz[j] - pc_xz[j] * fl1_fx * pa_z[j] * pb_xy[j] - pc_xx[j] * fl1_fx * pa_z[j] * pb_yz[j] - pc_xz[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yyz[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] - fl1_fx * pc_yyz[j] * pb_yz[j] - fl1_fx * pa_yz[j] * pb_y[j] * pc_yz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yy[j] * pb_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_yy[j] - fl1_fx * pa_y[j] * pc_yz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_yy[j] - fl1_fx * pc_yy[j] * pa_z[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_yyz[j] - pa_xyz[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_xyz[j] * pc_xyz[j] * pb_y[j] - pa_xyz[j] * pc_xyy[j] * pb_z[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_xy[j] - pa_xy[j] * pc_yyz[j] * pb_xz[j] - pa_xy[j] * pc_xzz[j] * pb_yy[j] - 2.0 * pa_xy[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_xy[j] - pa_xz[j] * pc_yyy[j] * pb_xz[j] - pa_xz[j] * pc_xyz[j] * pb_yy[j] - 2.0 * pa_xz[j] * pc_xyy[j] * pb_yz[j] - pa_x[j] * pc_yzz[j] * pb_xyy[j] - 2.0 * pa_x[j] * pc_yyz[j] * pb_xyz[j] - pa_x[j] * pc_xyz[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_xy[j] - pc_xyy[j] * pa_yz[j] * pb_xz[j] - pc_xxz[j] * pa_yz[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_yz[j] * pb_yz[j] - pc_xzz[j] * pa_y[j] * pb_xyy[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_xyz[j] - pc_xxz[j] * pa_y[j] * pb_yyz[j] - pc_xyz[j] * pa_z[j] * pb_xyy[j] - 2.0 * pc_xyy[j] * pa_z[j] * pb_xyz[j] - pc_xxy[j] * pa_z[j] * pb_yyz[j] - pc_xyz[j] * pb_xyyz[j]);

                t_xyz_xyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 0.25 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 0.5 * fl2_fx * pc_yyy[j] + 0.25 * fl2_fx * pa_y[j] * pc_zz[j] + 0.25 * fl2_fx * pa_y[j] * pc_yy[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_z[j] + 0.5 * fl2_fx * pc_yy[j] * pb_y[j] + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + 0.5 * pa_xy[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_xy[j] * fl1_fx * pc_xyy[j] + 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_x[j] + pa_x[j] * pc_xyy[j] * fl1_fx * pb_y[j] + pa_x[j] * fl1_fx * pc_xzz[j] * pb_y[j] + 0.5 * pc_xxz[j] * pa_yz[j] * fl1_fx + 0.5 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx + 0.5 * pc_xxz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx + 0.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_x[j] + pc_xxy[j] * pa_y[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xyz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] + pc_xxyy[j] * fl1_fx * pb_y[j] + pc_xyy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + pc_xxzz[j] * fl1_fx * pb_y[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_y[j] + pc_xzz[j] * fl1_fx * pb_xy[j] + pc_xxz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] + 0.5 * fl1_fx * pc_yyyz[j] * pa_z[j] + fl1_fx * pc_yyzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yyz[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_y[j] * pc_yyz[j] * pb_z[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyy[j] * pa_z[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_yy[j] + fl1_fx * pc_yyz[j] * pb_yz[j] + pa_xyz[j] * pc_xyyz[j] + pa_xy[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_y[j] + pa_xy[j] * pc_xyyz[j] * pb_z[j] + pa_xz[j] * pc_yyyz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_y[j] + pa_xz[j] * pc_xyyy[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yyzz[j] * pb_xy[j] + pa_x[j] * pc_yyyz[j] * pb_xz[j] + pa_x[j] * pc_xyzz[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_xyyz[j] * pb_yz[j] + pc_xyyz[j] * pa_yz[j] * pb_x[j] + 2.0 * pc_xxyz[j] * pa_yz[j] * pb_y[j] + pc_xxyy[j] * pa_yz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_xy[j] + pc_xyyz[j] * pa_y[j] * pb_xz[j] + pc_xxzz[j] * pa_y[j] * pb_yy[j] + 2.0 * pc_xxyz[j] * pa_y[j] * pb_yz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xy[j] + pc_xyyy[j] * pa_z[j] * pb_xz[j] + pc_xxyz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xxyy[j] * pa_z[j] * pb_yz[j] + pc_xyzz[j] * pb_xyy[j] + 2.0 * pc_xyyz[j] * pb_xyz[j] + pc_xxyz[j] * pb_yyz[j]);

                t_xyz_xyyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 0.75 * fl2_fx * pc_yzz[j] - 0.25 * fl2_fx * pc_yyy[j] - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_xyyy[j] * fl1_fx - 0.5 * pc_xxzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxyyy[j] * fl1_fx - 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] - pc_xxyy[j] * fl1_fx * pb_y[j] - pc_xxzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyyzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yyzz[j] - 0.5 * fl1_fx * pc_yyyz[j] * pa_z[j] - fl1_fx * pc_yyzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyyz[j] * pb_z[j] - pa_xy[j] * pc_xyyzz[j] - pa_xz[j] * pc_xyyyz[j] - pa_x[j] * pc_yyyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - pa_x[j] * pc_xyyyz[j] * pb_z[j] - pc_xxyyz[j] * pa_yz[j] - pc_xyyzz[j] * pa_y[j] * pb_x[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_y[j] - pc_xxyyz[j] * pa_y[j] * pb_z[j] - pc_xyyyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - pc_xxyyy[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xyyzz[j] * pb_xy[j] - pc_xyyyz[j] * pb_xz[j] - pc_xxyzz[j] * pb_yy[j] - 2.0 * pc_xxyyz[j] * pb_yz[j]);

                t_xyz_xyyz[j] += fl_s_0_0_6 * (1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + pa_x[j] * pc_xyyyzz[j] + pc_xxyyzz[j] * pa_y[j] + pc_xxyyyz[j] * pa_z[j] + pc_xyyyzz[j] * pb_x[j] + 2.0 * pc_xxyyzz[j] * pb_y[j] + pc_xxyyyz[j] * pb_z[j]);

                t_xyz_xyyz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];

                t_xyz_xyzz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_z[j] + 0.25 * fl3_fx * pb_z[j] + 0.25 * pa_xz[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pa_yz[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xyz[j] * pb_xy[j] * fl1_fx + pa_xy[j] * fl1_fx * pb_xyz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_yzz[j] + pa_xyz[j] * pb_xyzz[j]);

                t_xyz_xyzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pb_z[j] - 0.5 * pa_xz[j] * fl2_fx * pb_x[j] - 0.25 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - pa_x[j] * fl2_fx * pb_xz[j] - 0.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pa_yz[j] * pb_y[j] - 0.25 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - fl2_fx * pa_y[j] * pb_yz[j] - 0.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_y[j] * pb_yz[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.5 * pa_xyz[j] * pb_xy[j] * fl1_fx - 0.5 * pa_xyz[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_z[j] * pb_xy[j] * fl1_fx - pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] - pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] - pa_xy[j] * fl1_fx * pb_xyz[j] - 0.5 * pa_xz[j] * pc_y[j] * pb_xy[j] * fl1_fx - pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] - pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] - 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_x[j] * pa_yz[j] * pb_xy[j] * fl1_fx - pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] - fl1_fx * pa_yz[j] * pb_yz[j] * pc_z[j] - 0.5 * fl1_fx * pa_yz[j] * pc_y[j] * pb_zz[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yzz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yzz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_yzz[j] - 2.0 * pa_xyz[j] * pb_xyz[j] * pc_z[j] - pa_xyz[j] * pb_xzz[j] * pc_y[j] - pa_xyz[j] * pc_x[j] * pb_yzz[j] - pa_xy[j] * pc_z[j] * pb_xyzz[j] - pa_xz[j] * pc_y[j] * pb_xyzz[j] - pc_x[j] * pa_yz[j] * pb_xyzz[j]);

                t_xyz_xyzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 0.375 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 0.5 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.25 * pa_xz[j] * fl2_fx * pb_x[j] + 0.5 * pa_x[j] * fl2_fx * pb_xz[j] + 0.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.25 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + pc_x[j] * fl2_fx * pb_xz[j] + 0.5 * fl2_fx * pa_yz[j] * pc_y[j] + 1.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] + 0.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] + 0.25 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + fl2_fx * pc_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 0.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.25 * fl2_fx * pa_yz[j] * pb_y[j] + 0.5 * fl2_fx * pa_y[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * pa_xyz[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_xyz[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_xyz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xy[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx + pa_xy[j] * fl1_fx * pc_xy[j] * pb_z[j] + pa_xy[j] * fl1_fx * pb_xz[j] * pc_y[j] + pa_xy[j] * fl1_fx * pc_x[j] * pb_yz[j] + 0.5 * pa_xz[j] * pc_y[j] * pb_xy[j] * fl1_fx + 0.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 0.5 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_yz[j] * pb_xy[j] * fl1_fx + pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] + pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_y[j] * fl1_fx * pb_xyz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] + pa_xz[j] * fl1_fx * pc_xz[j] * pb_z[j] + pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_zz[j] + pa_xz[j] * fl1_fx * pb_xz[j] * pc_z[j] + 0.5 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_xzz[j] + 0.5 * pc_x[j] * pa_yz[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xz[j] * pa_y[j] * pb_xy[j] * fl1_fx + pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] + pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] + pc_x[j] * pa_y[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xy[j] * pa_z[j] * pb_xy[j] * fl1_fx + pc_xy[j] * fl1_fx * pb_xyz[j] + pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_xzz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_zz[j] + fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] + fl1_fx * pa_y[j] * pc_zz[j] * pb_yz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] + fl1_fx * pc_yz[j] * pa_z[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_yzz[j] + fl1_fx * pa_yz[j] * pb_yz[j] * pc_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_y[j] * pb_zz[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_yzz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_yzz[j] + pa_xyz[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_xyz[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_xyz[j] * pc_xz[j] * pb_yz[j] + pa_xyz[j] * pc_xy[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_zz[j] * pb_xyz[j] + pa_xy[j] * pc_yz[j] * pb_xzz[j] + pa_xy[j] * pc_xz[j] * pb_yzz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xyz[j] + pa_xz[j] * pc_yy[j] * pb_xzz[j] + pa_xz[j] * pc_xy[j] * pb_yzz[j] + pa_x[j] * pc_yz[j] * pb_xyzz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_xyz[j] + pc_xy[j] * pa_yz[j] * pb_xzz[j] + pc_xx[j] * pa_yz[j] * pb_yzz[j] + pc_xz[j] * pa_y[j] * pb_xyzz[j] + pc_xy[j] * pa_z[j] * pb_xyzz[j]);

                t_xyz_xyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.125 * fl3_fx * pa_z[j] - 0.25 * fl3_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xz[j] - 0.25 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.5 * pc_xx[j] * fl2_fx * pa_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxz[j] * fl2_fx - pc_xx[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pa_z[j] * pb_x[j] - 0.5 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pa_y[j] * pc_yz[j] - 0.5 * fl2_fx * pc_yy[j] * pa_z[j] - 1.5 * fl2_fx * pc_yz[j] * pb_y[j] - 0.75 * fl2_fx * pc_yyz[j] - fl2_fx * pc_yy[j] * pb_z[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.5 * fl2_fx * pa_z[j] * pc_zz[j] - fl2_fx * pc_zz[j] * pb_z[j] - 0.25 * fl2_fx * pa_yz[j] * pc_y[j] - 0.75 * fl2_fx * pa_y[j] * pc_z[j] * pb_y[j] - 0.5 * fl2_fx * pa_y[j] * pc_y[j] * pb_z[j] - 0.25 * fl2_fx * pc_y[j] * pa_z[j] * pb_y[j] - 0.5 * fl2_fx * pc_y[j] * pb_yz[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * pa_xyz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx - pa_xy[j] * fl1_fx * pc_xy[j] * pb_z[j] - 0.5 * pa_xz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 0.5 * pa_xz[j] * pc_xy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xz[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_x[j] * pc_yz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx - pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] - pa_x[j] * pc_yy[j] * fl1_fx * pb_xz[j] - pa_x[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 0.5 * pa_xz[j] * fl1_fx * pc_xzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] - pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] - 0.5 * pa_xz[j] * fl1_fx * pb_x[j] * pc_zz[j] - pa_xz[j] * fl1_fx * pc_xz[j] * pb_z[j] - pa_x[j] * fl1_fx * pc_zz[j] * pb_xz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xz[j] * pb_zz[j] - 0.5 * pc_xy[j] * pa_yz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xx[j] * pa_yz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_y[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx - pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] - pc_xy[j] * pa_y[j] * fl1_fx * pb_xz[j] - pc_xx[j] * pa_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * pa_z[j] * pb_xy[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyz[j] * pb_xy[j] * fl1_fx - pc_xyy[j] * fl1_fx * pb_xz[j] - pc_xxy[j] * fl1_fx * pb_yz[j] - pc_xy[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] - pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] - pc_xzz[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - pc_xz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 0.5 * pc_xx[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_yzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_y[j] - fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] - 0.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_y[j] - fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] - fl1_fx * pc_yzz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_y[j] * pc_zz[j] - fl1_fx * pa_yz[j] * pc_yz[j] * pb_z[j] - fl1_fx * pa_y[j] * pc_zz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yz[j] * pb_zz[j] - fl1_fx * pc_yz[j] * pa_z[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yy[j] * pa_z[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_yzz[j] - pa_xyz[j] * pb_x[j] * pc_yzz[j] - pa_xyz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xyz[j] * pc_xyz[j] * pb_z[j] - pa_xy[j] * pc_zzz[j] * pb_xy[j] - 2.0 * pa_xy[j] * pc_yzz[j] * pb_xz[j] - 2.0 * pa_xy[j] * pc_xzz[j] * pb_yz[j] - pa_xy[j] * pc_xyz[j] * pb_zz[j] - pa_xz[j] * pc_yzz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_yz[j] - pa_xz[j] * pc_xyy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_yzz[j] * pb_xyz[j] - pa_x[j] * pc_yyz[j] * pb_xzz[j] - pa_x[j] * pc_xyz[j] * pb_yzz[j] - pc_xzz[j] * pa_yz[j] * pb_xy[j] - 2.0 * pc_xyz[j] * pa_yz[j] * pb_xz[j] - 2.0 * pc_xxz[j] * pa_yz[j] * pb_yz[j] - pc_xxy[j] * pa_yz[j] * pb_zz[j] - 2.0 * pc_xzz[j] * pa_y[j] * pb_xyz[j] - pc_xyz[j] * pa_y[j] * pb_xzz[j] - pc_xxz[j] * pa_y[j] * pb_yzz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xyz[j] - pc_xyy[j] * pa_z[j] * pb_xzz[j] - pc_xxy[j] * pa_z[j] * pb_yzz[j] - pc_xyz[j] * pb_xyzz[j]);

                t_xyz_xyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xz[j] + 1.5 * pc_xxz[j] * fl2_fx + 0.25 * pc_xx[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_y[j] * pc_yz[j] + 0.25 * fl2_fx * pc_yy[j] * pa_z[j] + 0.75 * fl2_fx * pc_yz[j] * pb_y[j] + 0.5 * fl2_fx * pc_yy[j] * pb_z[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pa_xy[j] * pc_xyz[j] * fl1_fx + 0.5 * pa_xz[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + pa_x[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_xzz[j] + 0.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_x[j] + pa_x[j] * fl1_fx * pc_xzz[j] * pb_z[j] + 0.5 * pc_xxy[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_y[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx + pc_xxy[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xyyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxyz[j] * pb_y[j] * fl1_fx + pc_xxyy[j] * fl1_fx * pb_z[j] + pc_xyy[j] * fl1_fx * pb_xz[j] + pc_xxy[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xxzz[j] * fl1_fx * pa_z[j] + 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] + pc_xxzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_x[j] + pc_xxz[j] * fl1_fx * pa_z[j] * pb_z[j] + pc_xzz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_yyzz[j] * pa_z[j] + 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] + fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_yzz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_y[j] + fl1_fx * pa_y[j] * pc_yzz[j] * pb_z[j] + 0.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_y[j] + fl1_fx * pc_yyz[j] * pa_z[j] * pb_z[j] + fl1_fx * pc_yzz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yyz[j] * pb_zz[j] + pa_xyz[j] * pc_xyzz[j] + pa_xy[j] * pc_yzzz[j] * pb_x[j] + pa_xy[j] * pc_xzzz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_xyzz[j] * pb_z[j] + pa_xz[j] * pc_yyzz[j] * pb_x[j] + pa_xz[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_z[j] + pa_x[j] * pc_yzzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_yyzz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_yz[j] + pa_x[j] * pc_xyyz[j] * pb_zz[j] + pc_xyzz[j] * pa_yz[j] * pb_x[j] + pc_xxzz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_yz[j] * pb_z[j] + pc_xzzz[j] * pa_y[j] * pb_xy[j] + 2.0 * pc_xyzz[j] * pa_y[j] * pb_xz[j] + 2.0 * pc_xxzz[j] * pa_y[j] * pb_yz[j] + pc_xxyz[j] * pa_y[j] * pb_zz[j] + pc_xyzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_yz[j] + pc_xxyy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xyzz[j] * pb_xyz[j] + pc_xyyz[j] * pb_xzz[j] + pc_xxyz[j] * pb_yzz[j]);

                t_xyz_xyzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyz[j] - 0.25 * fl2_fx * pc_zzz[j] - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xzzz[j] - 1.5 * pc_xxyz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * fl1_fx * pa_z[j] - 0.5 * pc_xzzz[j] * fl1_fx * pb_x[j] - pc_xxzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yyzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_yyzz[j] * pa_z[j] - 0.5 * fl1_fx * pc_yzzz[j] * pb_y[j] - fl1_fx * pc_yyzz[j] * pb_z[j] - pa_xy[j] * pc_xyzzz[j] - pa_xz[j] * pc_xyyzz[j] - pa_x[j] * pc_yyzzz[j] * pb_x[j] - pa_x[j] * pc_xyzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxyzz[j] * pa_yz[j] - pc_xyzzz[j] * pa_y[j] * pb_x[j] - pc_xxzzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xxyzz[j] * pa_y[j] * pb_z[j] - pc_xyyzz[j] * pa_z[j] * pb_x[j] - pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - pc_xyzzz[j] * pb_xy[j] - 2.0 * pc_xyyzz[j] * pb_xz[j] - 2.0 * pc_xxyzz[j] * pb_yz[j] - pc_xxyyz[j] * pb_zz[j]);

                t_xyz_xyzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + pa_x[j] * pc_xyyzzz[j] + pc_xxyzzz[j] * pa_y[j] + pc_xxyyzz[j] * pa_z[j] + pc_xyyzzz[j] * pb_x[j] + pc_xxyzzz[j] * pb_y[j] + 2.0 * pc_xxyyzz[j] * pb_z[j]);

                t_xyz_xyzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_69_72(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (69,72)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyz_xzzz = primBuffer.data(150 * idx + 69);

            auto t_xyz_yyyy = primBuffer.data(150 * idx + 70);

            auto t_xyz_yyyz = primBuffer.data(150 * idx + 71);

            // Batch of Integrals (69,72)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, pb_x, pb_xz, pb_xzz, pb_xzzz, \
                                     pb_y, pb_yy, pb_yyy, pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xx, \
                                     pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, pc_xxz, pc_xxzz, pc_xxzzz, \
                                     pc_xxzzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyz, pc_xyyyyz, \
                                     pc_xyyyyzz, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xyzzz, \
                                     pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, \
                                     pc_yyyyyz, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, \
                                     pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xyz_xzzz, t_xyz_yyyy, t_xyz_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyz_xzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 1.5 * pa_xyz[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xy[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_yz[j] * pb_zzz[j] + pa_xyz[j] * pb_xzzz[j]);

                t_xyz_xzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * pa_xy[j] * fl2_fx * pb_x[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * fl2_fx * pa_yz[j] * pb_z[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 2.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 1.5 * fl2_fx * pa_y[j] * pb_zz[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xyz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xyz[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_xyz[j] * pc_x[j] * pb_z[j] * fl1_fx - 4.5 * pa_xy[j] * pc_z[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_xz[j] * pc_y[j] * pb_xz[j] * fl1_fx - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_x[j] * pa_yz[j] * pb_xz[j] * fl1_fx - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] - 1.5 * fl1_fx * pa_yz[j] * pb_zz[j] * pc_z[j] - 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_yz[j] * pb_zzz[j] - 3.0 * pa_xyz[j] * pb_xzz[j] * pc_z[j] - pa_xyz[j] * pc_x[j] * pb_zzz[j] - pa_xy[j] * pc_z[j] * pb_xzzz[j] - pa_xz[j] * pc_y[j] * pb_xzzz[j] - pc_x[j] * pa_yz[j] * pb_xzzz[j]);

                t_xyz_xzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_y[j] + 1.125 * fl3_fx * pc_y[j] + 1.5 * pa_xy[j] * fl2_fx * pc_x[j] + 0.75 * pa_xy[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_yz[j] * pc_z[j] + 4.5 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 1.5 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_z[j] + 1.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.75 * fl2_fx * pa_yz[j] * pb_z[j] + 0.75 * fl2_fx * pa_y[j] * pb_zz[j] + 1.5 * pa_xyz[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_xz[j] * fl1_fx + 4.5 * pa_xy[j] * pc_z[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 4.5 * pa_xy[j] * pc_xz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xy[j] * fl1_fx * pc_x[j] * pb_zz[j] + 1.5 * pa_xz[j] * pc_y[j] * pb_xz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xy[j] * pb_z[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * pb_xz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_x[j] * pa_yz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xx[j] * pa_yz[j] * pb_z[j] * fl1_fx + 4.5 * pc_xz[j] * pa_y[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xy[j] * pa_z[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] + 1.5 * fl1_fx * pa_yz[j] * pb_z[j] * pc_zz[j] + 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_zz[j] + 1.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_zz[j] + 0.5 * fl1_fx * pc_yz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_yz[j] * pb_zz[j] * pc_z[j] + 0.5 * fl1_fx * pa_y[j] * pc_z[j] * pb_zzz[j] + 0.5 * fl1_fx * pc_y[j] * pa_z[j] * pb_zzz[j] + 3.0 * pa_xyz[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_xyz[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_xy[j] * pc_zz[j] * pb_xzz[j] + pa_xy[j] * pc_xz[j] * pb_zzz[j] + 3.0 * pa_xz[j] * pc_yz[j] * pb_xzz[j] + pa_xz[j] * pc_xy[j] * pb_zzz[j] + pa_x[j] * pc_yz[j] * pb_xzzz[j] + 3.0 * pc_xz[j] * pa_yz[j] * pb_xzz[j] + pc_xx[j] * pa_yz[j] * pb_zzz[j] + pc_xz[j] * pa_y[j] * pb_xzzz[j] + pc_xy[j] * pa_z[j] * pb_xzzz[j]);

                t_xyz_xzzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pa_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * fl2_fx * pa_y[j] * pc_zz[j] - 1.5 * fl2_fx * pc_yz[j] * pa_z[j] - 4.5 * fl2_fx * pc_yz[j] * pb_z[j] - 1.5 * fl2_fx * pc_yzz[j] - 0.75 * fl2_fx * pa_yz[j] * pc_z[j] - 2.25 * fl2_fx * pa_y[j] * pc_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pa_z[j] * pb_z[j] - 0.75 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xyz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 4.5 * pa_xy[j] * pc_xz[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_x[j] * pc_yz[j] * pb_xz[j] * fl1_fx - 3.0 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 4.5 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx - 1.5 * pa_x[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * pa_yz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xx[j] * pa_yz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_yz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_y[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxz[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pc_xx[j] * pa_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * pa_z[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_z[j] * pb_z[j] * fl1_fx - 4.5 * pc_xyz[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pa_yz[j] * pc_zzz[j] - 1.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_z[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_yz[j] * pb_z[j] * pc_zz[j] - 1.5 * fl1_fx * pa_y[j] * pc_zz[j] * pb_zz[j] - 1.5 * fl1_fx * pc_yz[j] * pa_z[j] * pb_zz[j] - 0.5 * fl1_fx * pc_yz[j] * pb_zzz[j] - pa_xyz[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_xyz[j] * pc_xzz[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_zzz[j] * pb_xz[j] - 3.0 * pa_xy[j] * pc_xzz[j] * pb_zz[j] - 3.0 * pa_xz[j] * pc_yzz[j] * pb_xz[j] - 3.0 * pa_xz[j] * pc_xyz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_yzz[j] * pb_xzz[j] - pa_x[j] * pc_xyz[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_yz[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_yz[j] * pb_zz[j] - 3.0 * pc_xzz[j] * pa_y[j] * pb_xzz[j] - pc_xxz[j] * pa_y[j] * pb_zzz[j] - 3.0 * pc_xyz[j] * pa_z[j] * pb_xzz[j] - pc_xxy[j] * pa_z[j] * pb_zzz[j] - pc_xyz[j] * pb_xzzz[j]);

                t_xyz_xzzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.75 * pa_x[j] * pc_xy[j] * fl2_fx + 0.75 * pc_xx[j] * pa_y[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_y[j] * pc_zz[j] + 0.75 * fl2_fx * pc_yz[j] * pa_z[j] + 2.25 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xy[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 4.5 * pa_x[j] * pc_xyz[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_y[j] * pb_x[j] * fl1_fx + 4.5 * pc_xxz[j] * pa_y[j] * pb_z[j] * fl1_fx + 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xxyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] + 0.5 * fl1_fx * pc_yzzz[j] * pa_z[j] + 1.5 * fl1_fx * pc_yzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_yz[j] * pc_zzz[j] + 1.5 * fl1_fx * pa_y[j] * pc_zzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_yzz[j] * pa_z[j] * pb_z[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_zz[j] + pa_xyz[j] * pc_xzzz[j] + pa_xy[j] * pc_zzzz[j] * pb_x[j] + 3.0 * pa_xy[j] * pc_xzzz[j] * pb_z[j] + pa_xz[j] * pc_yzzz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xyzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yzzz[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xyzz[j] * pb_zz[j] + pc_xzzz[j] * pa_yz[j] * pb_x[j] + 3.0 * pc_xxzz[j] * pa_yz[j] * pb_z[j] + 3.0 * pc_xzzz[j] * pa_y[j] * pb_xz[j] + 3.0 * pc_xxzz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_xz[j] + 3.0 * pc_xxyz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_xyzz[j] * pb_xzz[j] + pc_xxyz[j] * pb_zzz[j]);

                t_xyz_xzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xxyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 0.5 * fl1_fx * pc_yzzzz[j] - 0.5 * fl1_fx * pa_y[j] * pc_zzzz[j] - 0.5 * fl1_fx * pc_yzzz[j] * pa_z[j] - 1.5 * fl1_fx * pc_yzzz[j] * pb_z[j] - pa_xy[j] * pc_xzzzz[j] - pa_xz[j] * pc_xyzzz[j] - pa_x[j] * pc_yzzzz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xyzzz[j] * pb_z[j] - pc_xxzzz[j] * pa_yz[j] - pc_xzzzz[j] * pa_y[j] * pb_x[j] - 3.0 * pc_xxzzz[j] * pa_y[j] * pb_z[j] - pc_xyzzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pb_xz[j] - 3.0 * pc_xxyzz[j] * pb_zz[j]);

                t_xyz_xzzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + pa_x[j] * pc_xyzzzz[j] + pc_xxzzzz[j] * pa_y[j] + pc_xxyzzz[j] * pa_z[j] + pc_xyzzzz[j] * pb_x[j] + 3.0 * pc_xxyzzz[j] * pb_z[j]);

                t_xyz_xzzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];

                t_xyz_yyyy[j] = fl_s_0_0_0 * (0.75 * pa_xyz[j] * fl2_fx + 3.0 * pa_xz[j] * fl2_fx * pb_y[j] + 3.0 * pa_xyz[j] * pb_yy[j] * fl1_fx + 2.0 * pa_xz[j] * fl1_fx * pb_yyy[j] + pa_xyz[j] * pb_yyyy[j]);

                t_xyz_yyyy[j] += fl_s_0_0_1 * (-1.5 * pa_xyz[j] * fl2_fx - 0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 3.75 * pa_xz[j] * pc_y[j] * fl2_fx - 6.0 * pa_xz[j] * fl2_fx * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 3.0 * pa_xyz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_xyz[j] * pb_y[j] * pc_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_z[j] * pb_yy[j] * fl1_fx - 9.0 * pa_xz[j] * pc_y[j] * pb_yy[j] * fl1_fx - 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] - 2.0 * pa_xz[j] * fl1_fx * pb_yyy[j] - 3.0 * pc_x[j] * pa_yz[j] * pb_yy[j] * fl1_fx - 2.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] - 4.0 * pa_xyz[j] * pb_yyy[j] * pc_y[j] - pa_xy[j] * pc_z[j] * pb_yyyy[j] - pa_xz[j] * pc_y[j] * pb_yyyy[j] - pc_x[j] * pa_yz[j] * pb_yyyy[j]);

                t_xyz_yyyy[j] += fl_s_0_0_2 * (0.75 * pa_xyz[j] * fl2_fx + 1.5 * pa_xy[j] * pc_z[j] * fl2_fx + 7.5 * pa_xz[j] * pc_y[j] * fl2_fx + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 6.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 3.0 * pa_xz[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * pa_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + 3.75 * pc_xy[j] * pa_z[j] * fl2_fx + 6.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 3.0 * pc_xz[j] * fl2_fx * pb_y[j] + 6.0 * pa_xyz[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_yy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_z[j] * pb_yy[j] * fl1_fx + 6.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 9.0 * pa_xz[j] * pc_y[j] * pb_yy[j] * fl1_fx + 12.0 * pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx + 9.0 * pa_x[j] * pc_yz[j] * pb_yy[j] * fl1_fx + 2.0 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyy[j] + 3.0 * pc_x[j] * pa_yz[j] * pb_yy[j] * fl1_fx + 6.0 * pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xz[j] * pa_y[j] * pb_yy[j] * fl1_fx + 9.0 * pc_xy[j] * pa_z[j] * pb_yy[j] * fl1_fx + 2.0 * pc_xz[j] * fl1_fx * pb_yyy[j] + 2.0 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyy[j] + 6.0 * pa_xyz[j] * pb_yy[j] * pc_yy[j] + 4.0 * pa_xy[j] * pc_yz[j] * pb_yyy[j] + 4.0 * pa_xz[j] * pc_yy[j] * pb_yyy[j] + pa_x[j] * pc_yz[j] * pb_yyyy[j] + 4.0 * pc_xy[j] * pa_yz[j] * pb_yyy[j] + pc_xz[j] * pa_y[j] * pb_yyyy[j] + pc_xy[j] * pa_z[j] * pb_yyyy[j]);

                t_xyz_yyyy[j] += fl_s_0_0_3 * (-0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 3.75 * pa_xz[j] * pc_y[j] * fl2_fx - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 1.5 * pc_xz[j] * pa_y[j] * fl2_fx - 7.5 * pc_xy[j] * pa_z[j] * fl2_fx - 3.75 * pc_xyz[j] * fl2_fx - 6.0 * pc_xz[j] * fl2_fx * pb_y[j] - 3.0 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - 3.0 * pa_xyz[j] * pc_yy[j] * fl1_fx - 6.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yyz[j] * fl1_fx - 12.0 * pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx - 5.0 * pa_xz[j] * pc_yyy[j] * fl1_fx - 9.0 * pa_x[j] * pc_yz[j] * pb_yy[j] * fl1_fx - 12.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 6.0 * pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_yz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_y[j] * pb_yy[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx - 9.0 * pc_xy[j] * pa_z[j] * pb_yy[j] * fl1_fx - 12.0 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_xyz[j] * pb_yy[j] * fl1_fx - 2.0 * pc_xz[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_xyz[j] * pb_y[j] * pc_yyy[j] - 6.0 * pa_xy[j] * pc_yyz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_yyy[j] * pb_yy[j] - 4.0 * pa_x[j] * pc_yyz[j] * pb_yyy[j] - 6.0 * pc_xyy[j] * pa_yz[j] * pb_yy[j] - 4.0 * pc_xyz[j] * pa_y[j] * pb_yyy[j] - 4.0 * pc_xyy[j] * pa_z[j] * pb_yyy[j] - pc_xyz[j] * pb_yyyy[j]);

                t_xyz_yyyy[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + 3.75 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.0 * pc_xz[j] * fl2_fx * pb_y[j] + 3.0 * pa_xy[j] * pc_yyz[j] * fl1_fx + 5.0 * pa_xz[j] * pc_yyy[j] * fl1_fx + 12.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_yz[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx + 12.0 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyz[j] * pb_yy[j] * fl1_fx + 12.0 * pc_xyyz[j] * pb_y[j] * fl1_fx + pa_xyz[j] * pc_yyyy[j] + 4.0 * pa_xy[j] * pc_yyyz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_yyyy[j] * pb_y[j] + 6.0 * pa_x[j] * pc_yyyz[j] * pb_yy[j] + 4.0 * pc_xyyy[j] * pa_yz[j] * pb_y[j] + 6.0 * pc_xyyz[j] * pa_y[j] * pb_yy[j] + 6.0 * pc_xyyy[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xyyz[j] * pb_yyy[j]);

                t_xyz_yyyy[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_y[j] * fl1_fx - 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx - 12.0 * pc_xyyz[j] * pb_y[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - pa_xy[j] * pc_yyyyz[j] - pa_xz[j] * pc_yyyyy[j] - 4.0 * pa_x[j] * pc_yyyyz[j] * pb_y[j] - pc_xyyyy[j] * pa_yz[j] - 4.0 * pc_xyyyz[j] * pa_y[j] * pb_y[j] - 4.0 * pc_xyyyy[j] * pa_z[j] * pb_y[j] - 6.0 * pc_xyyyz[j] * pb_yy[j]);

                t_xyz_yyyy[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_yyyyyz[j] + pc_xyyyyz[j] * pa_y[j] + pc_xyyyyy[j] * pa_z[j] + 4.0 * pc_xyyyyz[j] * pb_y[j]);

                t_xyz_yyyy[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];

                t_xyz_yyyz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xyz[j] * pb_yz[j] * fl1_fx + 0.5 * pa_xy[j] * fl1_fx * pb_yyy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_yyz[j] + pa_xyz[j] * pb_yyyz[j]);

                t_xyz_yyyz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 1.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_xyz[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_xyz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xyz[j] * pc_y[j] * fl1_fx * pb_z[j] - 1.5 * pa_xy[j] * pc_z[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] - 0.5 * pa_xy[j] * fl1_fx * pb_yyy[j] - 4.5 * pa_xz[j] * pc_y[j] * pb_yz[j] * fl1_fx - 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] - 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_x[j] * pa_yz[j] * pb_yz[j] * fl1_fx - 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] - pa_xyz[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_xyz[j] * pb_yyz[j] * pc_y[j] - pa_xy[j] * pc_z[j] * pb_yyyz[j] - pa_xz[j] * pc_y[j] * pb_yyyz[j] - pc_x[j] * pa_yz[j] * pb_yyyz[j]);

                t_xyz_yyyz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 1.5 * pa_xy[j] * fl2_fx * pc_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pa_xz[j] * fl2_fx * pc_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 1.5 * pa_xyz[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_xyz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_y[j] * fl1_fx * pb_z[j] + 1.5 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xy[j] * pc_z[j] * pb_yz[j] * fl1_fx + 1.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] + 1.5 * pa_xy[j] * fl1_fx * pb_yy[j] * pc_y[j] + 4.5 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xz[j] * pc_y[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 4.5 * pa_x[j] * pc_yz[j] * pb_yz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 0.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 1.5 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_z[j] + 1.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_yyz[j] + 1.5 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx + 1.5 * pc_x[j] * pa_yz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xz[j] * pa_y[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] + 0.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yyy[j] + 4.5 * pc_xy[j] * pa_z[j] * pb_yz[j] * fl1_fx + 0.5 * pc_xy[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_yyz[j] + 3.0 * pa_xyz[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_xyz[j] * pb_yz[j] * pc_yy[j] + pa_xy[j] * pc_zz[j] * pb_yyy[j] + 3.0 * pa_xy[j] * pc_yz[j] * pb_yyz[j] + pa_xz[j] * pc_yz[j] * pb_yyy[j] + 3.0 * pa_xz[j] * pc_yy[j] * pb_yyz[j] + pa_x[j] * pc_yz[j] * pb_yyyz[j] + pc_xz[j] * pa_yz[j] * pb_yyy[j] + 3.0 * pc_xy[j] * pa_yz[j] * pb_yyz[j] + pc_xz[j] * pa_y[j] * pb_yyyz[j] + pc_xy[j] * pa_z[j] * pb_yyyz[j]);

                t_xyz_yyyz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 3.0 * pa_x[j] * pc_yy[j] * fl2_fx - 2.25 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_zz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 0.75 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_y[j] - 1.5 * pc_xyy[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 1.5 * pa_xyz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_xy[j] * fl1_fx * pc_yyy[j] - 1.5 * pa_xy[j] * fl1_fx * pb_y[j] * pc_yy[j] - 4.5 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_yz[j] * pb_yz[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 1.5 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_yz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_yz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx - 1.5 * pc_xz[j] * pa_y[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 4.5 * pc_xy[j] * pa_z[j] * pb_yz[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 4.5 * pc_xyz[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_xyz[j] * pb_y[j] * pc_yyz[j] - pa_xyz[j] * pc_yyy[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_yzz[j] * pb_yy[j] - 3.0 * pa_xy[j] * pc_yyz[j] * pb_yz[j] - 3.0 * pa_xz[j] * pc_yyz[j] * pb_yy[j] - 3.0 * pa_xz[j] * pc_yyy[j] * pb_yz[j] - pa_x[j] * pc_yzz[j] * pb_yyy[j] - 3.0 * pa_x[j] * pc_yyz[j] * pb_yyz[j] - 3.0 * pc_xyz[j] * pa_yz[j] * pb_yy[j] - 3.0 * pc_xyy[j] * pa_yz[j] * pb_yz[j] - pc_xzz[j] * pa_y[j] * pb_yyy[j] - 3.0 * pc_xyz[j] * pa_y[j] * pb_yyz[j] - pc_xyz[j] * pa_z[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_z[j] * pb_yyz[j] - pc_xyz[j] * pb_yyyz[j]);

                t_xyz_yyyz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_yy[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_xzz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_xy[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_xy[j] * fl1_fx * pc_yyy[j] + 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pa_yz[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_y[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyyy[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_y[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyzz[j] * pb_y[j] * fl1_fx + 4.5 * pc_xyz[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + pa_xyz[j] * pc_yyyz[j] + 3.0 * pa_xy[j] * pc_yyzz[j] * pb_y[j] + pa_xy[j] * pc_yyyz[j] * pb_z[j] + 3.0 * pa_xz[j] * pc_yyyz[j] * pb_y[j] + pa_xz[j] * pc_yyyy[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_yy[j] + 3.0 * pa_x[j] * pc_yyyz[j] * pb_yz[j] + 3.0 * pc_xyyz[j] * pa_yz[j] * pb_y[j] + pc_xyyy[j] * pa_yz[j] * pb_z[j] + 3.0 * pc_xyzz[j] * pa_y[j] * pb_yy[j] + 3.0 * pc_xyyz[j] * pa_y[j] * pb_yz[j] + 3.0 * pc_xyyz[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_xyyy[j] * pa_z[j] * pb_yz[j] + pc_xyzz[j] * pb_yyy[j] + 3.0 * pc_xyyz[j] * pb_yyz[j]);

                t_xyz_yyyz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyyy[j] * fl1_fx - 1.5 * pc_xyzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xyyy[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyyyy[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - pa_xy[j] * pc_yyyzz[j] - pa_xz[j] * pc_yyyyz[j] - 3.0 * pa_x[j] * pc_yyyzz[j] * pb_y[j] - pa_x[j] * pc_yyyyz[j] * pb_z[j] - pc_xyyyz[j] * pa_yz[j] - 3.0 * pc_xyyzz[j] * pa_y[j] * pb_y[j] - pc_xyyyz[j] * pa_y[j] * pb_z[j] - 3.0 * pc_xyyyz[j] * pa_z[j] * pb_y[j] - pc_xyyyy[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pb_yy[j] - 3.0 * pc_xyyyz[j] * pb_yz[j]);

                t_xyz_yyyz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xyyyy[j] * fl1_fx + pa_x[j] * pc_yyyyzz[j] + pc_xyyyzz[j] * pa_y[j] + pc_xyyyyz[j] * pa_z[j] + 3.0 * pc_xyyyzz[j] * pb_y[j] + pc_xyyyyz[j] * pb_z[j]);

                t_xyz_yyyz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_72_75(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (72,75)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xy = paDistances.data(19 * idx + 4);

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xyz = paDistances.data(19 * idx + 13);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xyz_yyzz = primBuffer.data(150 * idx + 72);

            auto t_xyz_yzzz = primBuffer.data(150 * idx + 73);

            auto t_xyz_zzzz = primBuffer.data(150 * idx + 74);

            // Batch of Integrals (72,75)

            #pragma omp simd aligned(fx, pa_x, pa_xy, pa_xyz, pa_xz, pa_y, pa_yz, pa_z, pb_y, pb_yy, pb_yyz, pb_yyzz, \
                                     pb_yz, pb_yzz, pb_yzzz, pb_z, pb_zz, pb_zzz, pb_zzzz, pc_x, pc_xy, pc_xyy, pc_xyyy, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, pc_xyz, \
                                     pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, \
                                     pc_xzzzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, \
                                     pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_xyz_yyzz, t_xyz_yzzz, t_xyz_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xyz_yyzz[j] = fl_s_0_0_0 * (0.25 * pa_xyz[j] * fl2_fx + 0.5 * pa_xy[j] * fl2_fx * pb_z[j] + 0.5 * pa_xz[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pa_xyz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_xyz[j] * fl1_fx * pb_zz[j] + pa_xy[j] * fl1_fx * pb_yyz[j] + pa_xz[j] * fl1_fx * pb_yzz[j] + pa_xyz[j] * pb_yyzz[j]);

                t_xyz_yyzz[j] += fl_s_0_0_1 * (-0.5 * pa_xyz[j] * fl2_fx - 0.75 * pa_xy[j] * pc_z[j] * fl2_fx - pa_xy[j] * fl2_fx * pb_z[j] - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 2.0 * pa_x[j] * fl2_fx * pb_yz[j] - 0.25 * pc_x[j] * pa_yz[j] * fl2_fx - 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 0.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xyz[j] * pb_yy[j] * fl1_fx - pa_xyz[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_xy[j] * pc_z[j] * pb_yy[j] * fl1_fx - 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_zz[j] - 2.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] - pa_xy[j] * fl1_fx * pb_yyz[j] - 0.5 * pa_xz[j] * pc_y[j] * pb_yy[j] * fl1_fx - 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] - pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] - 2.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] - pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] - pa_xz[j] * fl1_fx * pb_yzz[j] - 0.5 * pc_x[j] * pa_yz[j] * pb_yy[j] * fl1_fx - 0.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] - pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] - pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] - 2.0 * pa_xyz[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_xyz[j] * pb_yzz[j] * pc_y[j] - pa_xy[j] * pc_z[j] * pb_yyzz[j] - pa_xz[j] * pc_y[j] * pb_yyzz[j] - pc_x[j] * pa_yz[j] * pb_yyzz[j]);

                t_xyz_yyzz[j] += fl_s_0_0_2 * (0.25 * pa_xyz[j] * fl2_fx + 1.5 * pa_xy[j] * pc_z[j] * fl2_fx + 0.5 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xz[j] * pc_y[j] * fl2_fx + 2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 3.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 3.0 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] + 0.5 * pa_xz[j] * fl2_fx * pb_y[j] + pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * pc_x[j] * pa_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 0.75 * pc_xy[j] * pa_z[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 2.0 * pc_x[j] * fl2_fx * pb_yz[j] + pa_xyz[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_xyz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xyz[j] * fl1_fx * pc_zz[j] + pa_xyz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_xy[j] * pc_z[j] * pb_yy[j] * fl1_fx + 3.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx + pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 0.5 * pa_xy[j] * pc_z[j] * fl1_fx * pb_zz[j] + pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] + 2.0 * pa_xy[j] * fl1_fx * pb_yz[j] * pc_y[j] + 0.5 * pa_xz[j] * pc_y[j] * pb_yy[j] * fl1_fx + pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_xz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_yz[j] * pb_yy[j] * fl1_fx + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 2.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] + pa_x[j] * pc_y[j] * fl1_fx * pb_yyz[j] + pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] + 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_z[j] + pa_x[j] * fl1_fx * pc_z[j] * pb_yzz[j] + 0.5 * pc_x[j] * pa_yz[j] * pb_yy[j] * fl1_fx + pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx + pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] + 0.5 * pc_x[j] * pa_yz[j] * fl1_fx * pb_zz[j] + 1.5 * pc_xz[j] * pa_y[j] * pb_yy[j] * fl1_fx + 0.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] + 2.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] + pc_x[j] * pa_y[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_xy[j] * pa_z[j] * pb_yy[j] * fl1_fx + 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] + pc_xy[j] * fl1_fx * pb_yyz[j] + 2.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] + pc_xz[j] * fl1_fx * pb_yzz[j] + pc_x[j] * fl1_fx * pa_z[j] * pb_yzz[j] + pa_xyz[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_xyz[j] * pb_yz[j] * pc_yz[j] + pa_xyz[j] * pc_yy[j] * pb_zz[j] + 2.0 * pa_xy[j] * pc_zz[j] * pb_yyz[j] + 2.0 * pa_xy[j] * pc_yz[j] * pb_yzz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_yyz[j] + 2.0 * pa_xz[j] * pc_yy[j] * pb_yzz[j] + pa_x[j] * pc_yz[j] * pb_yyzz[j] + 2.0 * pc_xz[j] * pa_yz[j] * pb_yyz[j] + 2.0 * pc_xy[j] * pa_yz[j] * pb_yzz[j] + pc_xz[j] * pa_y[j] * pb_yyzz[j] + pc_xy[j] * pa_z[j] * pb_yyzz[j]);

                t_xyz_yyzz[j] += fl_s_0_0_3 * (-0.75 * pa_xy[j] * pc_z[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 4.5 * pa_x[j] * pc_yz[j] * fl2_fx - 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_y[j] - 0.25 * pc_x[j] * pa_yz[j] * fl2_fx - 1.5 * pc_xz[j] * pa_y[j] * fl2_fx - 0.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_xy[j] * pa_z[j] * fl2_fx - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 3.0 * pc_xz[j] * fl2_fx * pb_y[j] - 0.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_y[j] - pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * pa_xyz[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xyz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_xy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xy[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx - pa_xy[j] * pc_zz[j] * fl1_fx * pb_z[j] - pa_xy[j] * fl1_fx * pc_yy[j] * pb_z[j] - pa_xz[j] * pc_yy[j] * pb_y[j] * fl1_fx - 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * pb_yy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_x[j] * pc_yy[j] * fl1_fx * pb_yz[j] - pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] - pa_xz[j] * fl1_fx * pb_y[j] * pc_zz[j] - 2.0 * pa_x[j] * fl1_fx * pc_zz[j] * pb_yz[j] - pc_xy[j] * pa_yz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_yz[j] * fl1_fx - 0.5 * pc_xzz[j] * pa_yz[j] * fl1_fx - pc_xz[j] * pa_yz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xz[j] * pa_y[j] * pb_yy[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx - pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] - 0.5 * pc_xz[j] * pa_y[j] * fl1_fx * pb_zz[j] - pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] - 2.0 * pc_xy[j] * pa_y[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * pa_z[j] * pb_yy[j] * fl1_fx - pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xyz[j] * pb_yy[j] * fl1_fx - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xyy[j] * fl1_fx * pb_yz[j] - pc_xy[j] * fl1_fx * pb_yyz[j] - pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] - 2.0 * pc_xzz[j] * fl1_fx * pb_yz[j] - 2.0 * pc_xz[j] * fl1_fx * pa_z[j] * pb_yz[j] - pc_xz[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_xyz[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_xyz[j] * pc_yyz[j] * pb_z[j] - pa_xy[j] * pc_zzz[j] * pb_yy[j] - 4.0 * pa_xy[j] * pc_yzz[j] * pb_yz[j] - pa_xy[j] * pc_yyz[j] * pb_zz[j] - pa_xz[j] * pc_yzz[j] * pb_yy[j] - 4.0 * pa_xz[j] * pc_yyz[j] * pb_yz[j] - pa_xz[j] * pc_yyy[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_yzz[j] * pb_yyz[j] - 2.0 * pa_x[j] * pc_yyz[j] * pb_yzz[j] - pc_xzz[j] * pa_yz[j] * pb_yy[j] - 4.0 * pc_xyz[j] * pa_yz[j] * pb_yz[j] - pc_xyy[j] * pa_yz[j] * pb_zz[j] - 2.0 * pc_xzz[j] * pa_y[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_y[j] * pb_yzz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_yyz[j] - 2.0 * pc_xyy[j] * pa_z[j] * pb_yzz[j] - pc_xyz[j] * pb_yyzz[j]);

                t_xyz_yyzz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 0.75 * pc_xz[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_xy[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_xy[j] * pc_zzz[j] * fl1_fx + 0.5 * pa_xz[j] * pc_yyy[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + pa_x[j] * pc_yyy[j] * fl1_fx * pb_z[j] + pa_x[j] * fl1_fx * pc_zzz[j] * pb_y[j] + 0.5 * pc_xyy[j] * pa_yz[j] * fl1_fx + 0.5 * pc_xzz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_y[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyyz[j] * pa_y[j] * fl1_fx + 0.5 * pc_xzzz[j] * pa_y[j] * fl1_fx + pc_xzz[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xyy[j] * pa_y[j] * fl1_fx * pb_z[j] + pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * pb_yy[j] * fl1_fx + 3.0 * pc_xyyz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pc_xyyy[j] * fl1_fx * pb_z[j] + 2.0 * pc_xyy[j] * fl1_fx * pb_yz[j] + pc_xzzz[j] * fl1_fx * pb_y[j] + pc_xzz[j] * fl1_fx * pa_z[j] * pb_y[j] + 2.0 * pc_xzz[j] * fl1_fx * pb_yz[j] + pa_xyz[j] * pc_yyzz[j] + 2.0 * pa_xy[j] * pc_yzzz[j] * pb_y[j] + 2.0 * pa_xy[j] * pc_yyzz[j] * pb_z[j] + 2.0 * pa_xz[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_yyyz[j] * pb_z[j] + pa_x[j] * pc_yzzz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_yyzz[j] * pb_yz[j] + pa_x[j] * pc_yyyz[j] * pb_zz[j] + 2.0 * pc_xyzz[j] * pa_yz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_yz[j] * pb_z[j] + pc_xzzz[j] * pa_y[j] * pb_yy[j] + 4.0 * pc_xyzz[j] * pa_y[j] * pb_yz[j] + pc_xyyz[j] * pa_y[j] * pb_zz[j] + pc_xyzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_yz[j] + pc_xyyy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xyzz[j] * pb_yyz[j] + 2.0 * pc_xyyz[j] * pb_yzz[j]);

                t_xyz_yyzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xzzz[j] * pa_y[j] * fl1_fx - 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - pc_xyyy[j] * fl1_fx * pb_z[j] - pc_xzzz[j] * fl1_fx * pb_y[j] - pa_xy[j] * pc_yyzzz[j] - pa_xz[j] * pc_yyyzz[j] - 2.0 * pa_x[j] * pc_yyzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_yyyzz[j] * pb_z[j] - pc_xyyzz[j] * pa_yz[j] - 2.0 * pc_xyzzz[j] * pa_y[j] * pb_y[j] - 2.0 * pc_xyyzz[j] * pa_y[j] * pb_z[j] - 2.0 * pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - pc_xyzzz[j] * pb_yy[j] - 4.0 * pc_xyyzz[j] * pb_yz[j] - pc_xyyyz[j] * pb_zz[j]);

                t_xyz_yyzz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yyyzzz[j] + pc_xyyzzz[j] * pa_y[j] + pc_xyyyzz[j] * pa_z[j] + 2.0 * pc_xyyzzz[j] * pb_y[j] + 2.0 * pc_xyyyzz[j] * pb_z[j]);

                t_xyz_yyzz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];

                t_xyz_yzzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xyz[j] * pb_yz[j] * fl1_fx + 1.5 * pa_xy[j] * fl1_fx * pb_yzz[j] + 0.5 * pa_xz[j] * fl1_fx * pb_zzz[j] + pa_xyz[j] * pb_yzzz[j]);

                t_xyz_yzzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xy[j] * fl2_fx * pb_y[j] - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_xz[j] * fl2_fx * pb_z[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * pa_xyz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xyz[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_xyz[j] * pc_y[j] * pb_z[j] * fl1_fx - 4.5 * pa_xy[j] * pc_z[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_xy[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_xz[j] * pc_y[j] * pb_yz[j] * fl1_fx - 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] - 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] - 0.5 * pa_xz[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_x[j] * pa_yz[j] * pb_yz[j] * fl1_fx - 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] - 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] - 3.0 * pa_xyz[j] * pb_yzz[j] * pc_z[j] - pa_xyz[j] * pc_y[j] * pb_zzz[j] - pa_xy[j] * pc_z[j] * pb_yzzz[j] - pa_xz[j] * pc_y[j] * pb_yzzz[j] - pc_x[j] * pa_yz[j] * pb_yzzz[j]);

                t_xyz_yzzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 1.5 * pa_xy[j] * fl2_fx * pc_y[j] + 0.75 * pa_xy[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pa_xz[j] * fl2_fx * pc_z[j] + 4.5 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 1.5 * pa_xyz[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xyz[j] * pc_yz[j] * fl1_fx + 4.5 * pa_xy[j] * pc_z[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 4.5 * pa_xy[j] * pc_yz[j] * pb_z[j] * fl1_fx + 1.5 * pa_xy[j] * fl1_fx * pc_y[j] * pb_zz[j] + 1.5 * pa_xz[j] * pc_y[j] * pb_yz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yy[j] * pb_z[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * pb_yz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_x[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 1.5 * pa_xz[j] * fl1_fx * pb_zz[j] * pc_z[j] + 0.5 * pa_x[j] * fl1_fx * pc_z[j] * pb_zzz[j] + 1.5 * pc_x[j] * pa_yz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xy[j] * pa_yz[j] * pb_z[j] * fl1_fx + 4.5 * pc_xz[j] * pa_y[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_y[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_xy[j] * pa_z[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 0.5 * pc_xz[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * fl1_fx * pa_z[j] * pb_zzz[j] + 3.0 * pa_xyz[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_xyz[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_xy[j] * pc_zz[j] * pb_yzz[j] + pa_xy[j] * pc_yz[j] * pb_zzz[j] + 3.0 * pa_xz[j] * pc_yz[j] * pb_yzz[j] + pa_xz[j] * pc_yy[j] * pb_zzz[j] + pa_x[j] * pc_yz[j] * pb_yzzz[j] + 3.0 * pc_xz[j] * pa_yz[j] * pb_yzz[j] + pc_xy[j] * pa_yz[j] * pb_zzz[j] + pc_xz[j] * pa_y[j] * pb_yzzz[j] + pc_xy[j] * pa_z[j] * pb_yzzz[j]);

                t_xyz_yzzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.75 * pa_xy[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * pc_yy[j] * fl2_fx - 0.75 * pa_x[j] * pc_y[j] * fl2_fx * pb_y[j] - 3.0 * pa_x[j] * fl2_fx * pc_zz[j] - 0.75 * pa_xz[j] * fl2_fx * pc_z[j] - 2.25 * pa_x[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pc_xy[j] * pa_y[j] * fl2_fx - 0.75 * pc_x[j] * pa_y[j] * fl2_fx * pb_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xz[j] * fl2_fx * pa_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_z[j] - 1.5 * pc_xzz[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 1.5 * pa_xyz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 4.5 * pa_xy[j] * pc_yz[j] * pb_z[j] * fl1_fx - 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yy[j] * pb_z[j] * fl1_fx - 1.5 * pa_xz[j] * pc_yyz[j] * fl1_fx - 4.5 * pa_x[j] * pc_yz[j] * pb_yz[j] * fl1_fx - 3.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 4.5 * pa_x[j] * pc_yyz[j] * pb_z[j] * fl1_fx - 1.5 * pa_x[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 0.5 * pa_xz[j] * fl1_fx * pc_zzz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] - 1.5 * pa_xz[j] * fl1_fx * pb_z[j] * pc_zz[j] - 1.5 * pa_x[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 1.5 * pc_xz[j] * pa_yz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xy[j] * pa_yz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_yz[j] * fl1_fx - 4.5 * pc_xz[j] * pa_y[j] * pb_yz[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx - 4.5 * pc_xyz[j] * pa_y[j] * pb_z[j] * fl1_fx - 1.5 * pc_xy[j] * pa_y[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * pa_z[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_z[j] * pb_z[j] * fl1_fx - 4.5 * pc_xyz[j] * pb_yz[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * fl1_fx * pa_z[j] * pb_zz[j] - 0.5 * pc_xz[j] * fl1_fx * pb_zzz[j] - pa_xyz[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_xyz[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_xy[j] * pc_zzz[j] * pb_yz[j] - 3.0 * pa_xy[j] * pc_yzz[j] * pb_zz[j] - 3.0 * pa_xz[j] * pc_yzz[j] * pb_yz[j] - 3.0 * pa_xz[j] * pc_yyz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_yzz[j] * pb_yzz[j] - pa_x[j] * pc_yyz[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_yz[j] * pb_yz[j] - 3.0 * pc_xyz[j] * pa_yz[j] * pb_zz[j] - 3.0 * pc_xzz[j] * pa_y[j] * pb_yzz[j] - pc_xyz[j] * pa_y[j] * pb_zzz[j] - 3.0 * pc_xyz[j] * pa_z[j] * pb_yzz[j] - pc_xyy[j] * pa_z[j] * pb_zzz[j] - pc_xyz[j] * pb_yzzz[j]);

                t_xyz_yzzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_yy[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pc_zz[j] + 0.75 * pc_xy[j] * pa_y[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * pc_xzz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pa_z[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 3.0 * pa_xy[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_xz[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 4.5 * pa_x[j] * pc_yyz[j] * pb_z[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] + 0.5 * pa_xz[j] * fl1_fx * pc_zzz[j] + 1.5 * pa_x[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 1.5 * pc_xyz[j] * pa_yz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_y[j] * pb_y[j] * fl1_fx + 4.5 * pc_xyz[j] * pa_y[j] * pb_z[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_xyz[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xyzz[j] * pb_y[j] * fl1_fx + 4.5 * pc_xyyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + 0.5 * pc_xzzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + pa_xyz[j] * pc_yzzz[j] + pa_xy[j] * pc_zzzz[j] * pb_y[j] + 3.0 * pa_xy[j] * pc_yzzz[j] * pb_z[j] + pa_xz[j] * pc_yzzz[j] * pb_y[j] + 3.0 * pa_xz[j] * pc_yyzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yzzz[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_zz[j] + pc_xzzz[j] * pa_yz[j] * pb_y[j] + 3.0 * pc_xyzz[j] * pa_yz[j] * pb_z[j] + 3.0 * pc_xzzz[j] * pa_y[j] * pb_yz[j] + 3.0 * pc_xyzz[j] * pa_y[j] * pb_zz[j] + 3.0 * pc_xyzz[j] * pa_z[j] * pb_yz[j] + 3.0 * pc_xyyz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_xyzz[j] * pb_yzz[j] + pc_xyyz[j] * pb_zzz[j]);

                t_xyz_yzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xzz[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_zzzz[j] - 3.0 * pc_xyzz[j] * pa_y[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyzz[j] * pb_y[j] * fl1_fx - 4.5 * pc_xyyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * pc_xzzzz[j] * fl1_fx - 0.5 * pc_xzzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - pa_xy[j] * pc_yzzzz[j] - pa_xz[j] * pc_yyzzz[j] - pa_x[j] * pc_yzzzz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_yyzzz[j] * pb_z[j] - pc_xyzzz[j] * pa_yz[j] - pc_xzzzz[j] * pa_y[j] * pb_y[j] - 3.0 * pc_xyzzz[j] * pa_y[j] * pb_z[j] - pc_xyzzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pb_yz[j] - 3.0 * pc_xyyzz[j] * pb_zz[j]);

                t_xyz_yzzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_yyzzzz[j] + pc_xyzzzz[j] * pa_y[j] + pc_xyyzzz[j] * pa_z[j] + pc_xyzzzz[j] * pb_y[j] + 3.0 * pc_xyyzzz[j] * pb_z[j]);

                t_xyz_yzzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];

                t_xyz_zzzz[j] = fl_s_0_0_0 * (0.75 * pa_xyz[j] * fl2_fx + 3.0 * pa_xy[j] * fl2_fx * pb_z[j] + 3.0 * pa_xyz[j] * pb_zz[j] * fl1_fx + 2.0 * pa_xy[j] * fl1_fx * pb_zzz[j] + pa_xyz[j] * pb_zzzz[j]);

                t_xyz_zzzz[j] += fl_s_0_0_1 * (-1.5 * pa_xyz[j] * fl2_fx - 3.75 * pa_xy[j] * pc_z[j] * fl2_fx - 6.0 * pa_xy[j] * fl2_fx * pb_z[j] - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 3.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 3.0 * pa_xyz[j] * pb_zz[j] * fl1_fx - 6.0 * pa_xyz[j] * pb_z[j] * pc_z[j] * fl1_fx - 9.0 * pa_xy[j] * pc_z[j] * pb_zz[j] * fl1_fx - 2.0 * pa_xy[j] * fl1_fx * pb_zzz[j] - 3.0 * pa_xz[j] * pc_y[j] * pb_zz[j] * fl1_fx - 2.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 3.0 * pc_x[j] * pa_yz[j] * pb_zz[j] * fl1_fx - 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_xyz[j] * pb_zzz[j] * pc_z[j] - pa_xy[j] * pc_z[j] * pb_zzzz[j] - pa_xz[j] * pc_y[j] * pb_zzzz[j] - pc_x[j] * pa_yz[j] * pb_zzzz[j]);

                t_xyz_zzzz[j] += fl_s_0_0_2 * (0.75 * pa_xyz[j] * fl2_fx + 7.5 * pa_xy[j] * pc_z[j] * fl2_fx + 3.0 * pa_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xz[j] * pc_y[j] * fl2_fx + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 6.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * pa_yz[j] * fl2_fx + 3.75 * pc_xz[j] * pa_y[j] * fl2_fx + 6.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] + 0.75 * pc_xy[j] * pa_z[j] * fl2_fx + 3.0 * pc_xy[j] * fl2_fx * pb_z[j] + 6.0 * pa_xyz[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_xyz[j] * pc_zz[j] * fl1_fx + 9.0 * pa_xy[j] * pc_z[j] * pb_zz[j] * fl1_fx + 12.0 * pa_xy[j] * pc_zz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xz[j] * pc_y[j] * pb_zz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_yz[j] * pb_z[j] * fl1_fx + 9.0 * pa_x[j] * pc_yz[j] * pb_zz[j] * fl1_fx + 2.0 * pa_x[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_x[j] * pa_yz[j] * pb_zz[j] * fl1_fx + 6.0 * pc_xz[j] * pa_yz[j] * pb_z[j] * fl1_fx + 9.0 * pc_xz[j] * pa_y[j] * pb_zz[j] * fl1_fx + 2.0 * pc_x[j] * pa_y[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_xy[j] * pa_z[j] * pb_zz[j] * fl1_fx + 2.0 * pc_xy[j] * fl1_fx * pb_zzz[j] + 6.0 * pa_xyz[j] * pb_zz[j] * pc_zz[j] + 4.0 * pa_xy[j] * pc_zz[j] * pb_zzz[j] + 4.0 * pa_xz[j] * pc_yz[j] * pb_zzz[j] + pa_x[j] * pc_yz[j] * pb_zzzz[j] + 4.0 * pc_xz[j] * pa_yz[j] * pb_zzz[j] + pc_xz[j] * pa_y[j] * pb_zzzz[j] + pc_xy[j] * pa_z[j] * pb_zzzz[j]);

                t_xyz_zzzz[j] += fl_s_0_0_3 * (-3.75 * pa_xy[j] * pc_z[j] * fl2_fx - 0.75 * pa_xz[j] * pc_y[j] * fl2_fx - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.0 * pa_x[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * pa_yz[j] * fl2_fx - 7.5 * pc_xz[j] * pa_y[j] * fl2_fx - 3.0 * pc_x[j] * pa_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_xy[j] * pa_z[j] * fl2_fx - 3.75 * pc_xyz[j] * fl2_fx - 6.0 * pc_xy[j] * fl2_fx * pb_z[j] - 3.0 * pa_xyz[j] * pc_zz[j] * fl1_fx - 12.0 * pa_xy[j] * pc_zz[j] * pb_z[j] * fl1_fx - 5.0 * pa_xy[j] * pc_zzz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_yz[j] * pb_z[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_x[j] * pc_yz[j] * pb_zz[j] * fl1_fx - 12.0 * pa_x[j] * pc_yzz[j] * pb_z[j] * fl1_fx - 6.0 * pc_xz[j] * pa_yz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_yz[j] * fl1_fx - 9.0 * pc_xz[j] * pa_y[j] * pb_zz[j] * fl1_fx - 12.0 * pc_xzz[j] * pa_y[j] * pb_z[j] * fl1_fx - 3.0 * pc_xy[j] * pa_z[j] * pb_zz[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx - 9.0 * pc_xyz[j] * pb_zz[j] * fl1_fx - 2.0 * pc_xy[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_xyz[j] * pb_z[j] * pc_zzz[j] - 6.0 * pa_xy[j] * pc_zzz[j] * pb_zz[j] - 6.0 * pa_xz[j] * pc_yzz[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_yzz[j] * pb_zzz[j] - 6.0 * pc_xzz[j] * pa_yz[j] * pb_zz[j] - 4.0 * pc_xzz[j] * pa_y[j] * pb_zzz[j] - 4.0 * pc_xyz[j] * pa_z[j] * pb_zzz[j] - pc_xyz[j] * pb_zzzz[j]);

                t_xyz_zzzz[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 3.75 * pc_xz[j] * pa_y[j] * fl2_fx + 0.75 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.0 * pc_xy[j] * fl2_fx * pb_z[j] + 5.0 * pa_xy[j] * pc_zzz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yzz[j] * fl1_fx + 12.0 * pa_x[j] * pc_yzz[j] * pb_z[j] * fl1_fx + 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_yz[j] * fl1_fx + 12.0 * pc_xzz[j] * pa_y[j] * pb_z[j] * fl1_fx + 5.0 * pc_xzzz[j] * pa_y[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xyz[j] * pb_zz[j] * fl1_fx + 12.0 * pc_xyzz[j] * pb_z[j] * fl1_fx + pa_xyz[j] * pc_zzzz[j] + 4.0 * pa_xy[j] * pc_zzzz[j] * pb_z[j] + 4.0 * pa_xz[j] * pc_yzzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_yzzz[j] * pb_zz[j] + 4.0 * pc_xzzz[j] * pa_yz[j] * pb_z[j] + 6.0 * pc_xzzz[j] * pa_y[j] * pb_zz[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_zz[j] + 4.0 * pc_xyzz[j] * pb_zzz[j]);

                t_xyz_zzzz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx - 5.0 * pc_xzzz[j] * pa_y[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - 12.0 * pc_xyzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - pa_xy[j] * pc_zzzzz[j] - pa_xz[j] * pc_yzzzz[j] - 4.0 * pa_x[j] * pc_yzzzz[j] * pb_z[j] - pc_xzzzz[j] * pa_yz[j] - 4.0 * pc_xzzzz[j] * pa_y[j] * pb_z[j] - 4.0 * pc_xyzzz[j] * pa_z[j] * pb_z[j] - 6.0 * pc_xyzzz[j] * pb_zz[j]);

                t_xyz_zzzz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yzzzzz[j] + pc_xzzzzz[j] * pa_y[j] + pc_xyzzzz[j] * pa_z[j] + 4.0 * pc_xyzzzz[j] * pb_z[j]);

                t_xyz_zzzz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_75_78(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (75,78)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxx = pcDistances.data(119 * idx + 34);

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxxz = pcDistances.data(119 * idx + 57);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxxzz = pcDistances.data(119 * idx + 88);

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzz_xxxx = primBuffer.data(150 * idx + 75);

            auto t_xzz_xxxy = primBuffer.data(150 * idx + 76);

            auto t_xzz_xxxz = primBuffer.data(150 * idx + 77);

            // Batch of Integrals (75,78)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, \
                                     pb_xxxz, pb_xxy, pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxx, \
                                     pc_xxxxxz, pc_xxxxxzz, pc_xxxxy, pc_xxxxyz, pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, \
                                     pc_xxxxzzz, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, \
                                     pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xy, pc_xyz, pc_xyzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_y, pc_yz, pc_yzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xzz_xxxx, t_xzz_xxxy, t_xzz_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzz_xxxx[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 1.5 * fl3_fx * pb_x[j] + 0.75 * pa_xzz[j] * fl2_fx + 3.0 * fl2_fx * pa_zz[j] * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + fl2_fx * pb_xxx[j] + 3.0 * pa_xzz[j] * pb_xx[j] * fl1_fx + 2.0 * fl1_fx * pa_zz[j] * pb_xxx[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxxx[j] + pa_xzz[j] * pb_xxxx[j]);

                t_xzz_xxxx[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 4.5 * fl3_fx * pb_x[j] - 1.5 * pa_xzz[j] * fl2_fx - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 3.75 * pc_x[j] * pa_zz[j] * fl2_fx - 6.0 * fl2_fx * pa_zz[j] * pb_x[j] - 6.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pb_xx[j] - 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 4.5 * pc_x[j] * fl2_fx * pb_xx[j] - 2.0 * fl2_fx * pb_xxx[j] - 3.0 * pa_xzz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_xzz[j] * pb_x[j] * pc_x[j] * fl1_fx - 6.0 * pa_xz[j] * pc_z[j] * pb_xx[j] * fl1_fx - 9.0 * pc_x[j] * pa_zz[j] * pb_xx[j] * fl1_fx - 4.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] - 2.0 * fl1_fx * pa_zz[j] * pb_xxx[j] - 2.0 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxxx[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxxx[j] - 4.0 * pa_xzz[j] * pb_xxx[j] * pc_x[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xxxx[j] - pc_x[j] * pa_zz[j] * pb_xxxx[j]);

                t_xzz_xxxx[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 4.5 * fl3_fx * pb_x[j] + 0.75 * pa_xzz[j] * fl2_fx + 3.0 * pa_xz[j] * pc_z[j] * fl2_fx + 0.75 * pa_x[j] * pc_zz[j] * fl2_fx + 7.5 * pc_x[j] * pa_zz[j] * fl2_fx + 7.5 * pc_xz[j] * pa_z[j] * fl2_fx + 12.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 3.0 * fl2_fx * pc_zz[j] * pb_x[j] + 3.0 * fl2_fx * pa_zz[j] * pb_x[j] + 6.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_xx[j] + 1.5 * pa_x[j] * fl2_fx * pb_xx[j] + 9.0 * pc_x[j] * fl2_fx * pb_xx[j] + 6.0 * pc_xx[j] * fl2_fx * pb_x[j] + fl2_fx * pb_xxx[j] + 6.0 * pa_xzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_xx[j] * fl1_fx + 6.0 * pa_xz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 12.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 9.0 * pc_x[j] * pa_zz[j] * pb_xx[j] * fl1_fx + 12.0 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx + 18.0 * pc_xz[j] * pa_z[j] * pb_xx[j] * fl1_fx + 2.0 * fl1_fx * pc_zz[j] * pb_xxx[j] + 4.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] + 3.0 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xx[j] + 2.0 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_x[j] + 2.0 * pc_xx[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxxx[j] + 6.0 * pa_xzz[j] * pb_xx[j] * pc_xx[j] + 8.0 * pa_xz[j] * pc_xz[j] * pb_xxx[j] + pa_x[j] * pc_zz[j] * pb_xxxx[j] + 4.0 * pc_xx[j] * pa_zz[j] * pb_xxx[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xxxx[j]);

                t_xzz_xxxx[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 1.5 * fl3_fx * pb_x[j] - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 1.5 * pa_x[j] * pc_zz[j] * fl2_fx - 3.75 * pc_x[j] * pa_zz[j] * fl2_fx - 15.0 * pc_xz[j] * pa_z[j] * fl2_fx - 3.75 * pc_xzz[j] * fl2_fx - 6.0 * fl2_fx * pc_zz[j] * pb_x[j] - 6.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 3.0 * pa_x[j] * fl2_fx * pc_xx[j] - 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 12.0 * pc_xx[j] * fl2_fx * pb_x[j] - 2.5 * pc_xxx[j] * fl2_fx - 4.5 * pc_x[j] * fl2_fx * pb_xx[j] - 3.0 * pa_xzz[j] * pc_xx[j] * fl1_fx - 12.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_x[j] * pc_zz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 12.0 * pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxx[j] * pa_zz[j] * fl1_fx - 18.0 * pc_xz[j] * pa_z[j] * pb_xx[j] * fl1_fx - 24.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xzz[j] * pb_xx[j] * fl1_fx - 2.0 * fl1_fx * pc_zz[j] * pb_xxx[j] - 2.0 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxx[j] - 3.0 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xx[j] - 3.0 * pc_xxx[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xx[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_xzz[j] * pb_x[j] * pc_xxx[j] - 12.0 * pa_xz[j] * pc_xxz[j] * pb_xx[j] - 4.0 * pa_x[j] * pc_xzz[j] * pb_xxx[j] - 6.0 * pc_xxx[j] * pa_zz[j] * pb_xx[j] - 8.0 * pc_xxz[j] * pa_z[j] * pb_xxx[j] - pc_xzz[j] * pb_xxxx[j]);

                t_xzz_xxxx[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_zz[j] * fl2_fx + 7.5 * pc_xz[j] * pa_z[j] * fl2_fx + 7.5 * pc_xzz[j] * fl2_fx + 3.0 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * pa_x[j] * fl2_fx * pc_xx[j] + 5.0 * pc_xxx[j] * fl2_fx + 6.0 * pc_xx[j] * fl2_fx * pb_x[j] + 6.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 5.0 * pc_xxx[j] * pa_zz[j] * fl1_fx + 24.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + 10.0 * pc_xxxz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xzz[j] * pb_xx[j] * fl1_fx + 12.0 * pc_xxzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * fl1_fx * pc_xxxx[j] + 2.0 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxx[j] + 2.0 * pc_xxxx[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxx[j] * fl1_fx * pb_xx[j] + pa_xzz[j] * pc_xxxx[j] + 8.0 * pa_xz[j] * pc_xxxz[j] * pb_x[j] + 6.0 * pa_x[j] * pc_xxzz[j] * pb_xx[j] + 4.0 * pc_xxxx[j] * pa_zz[j] * pb_x[j] + 12.0 * pc_xxxz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxzz[j] * pb_xxx[j]);

                t_xzz_xxxx[j] += fl_s_0_0_5 * (-3.75 * pc_xzz[j] * fl2_fx - 2.5 * pc_xxx[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 10.0 * pc_xxxz[j] * pa_z[j] * fl1_fx - 12.0 * pc_xxzz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxxzz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_xxxx[j] - 0.5 * pc_xxxxx[j] * fl1_fx - 2.0 * pc_xxxx[j] * fl1_fx * pb_x[j] - 2.0 * pa_xz[j] * pc_xxxxz[j] - 4.0 * pa_x[j] * pc_xxxzz[j] * pb_x[j] - pc_xxxxx[j] * pa_zz[j] - 8.0 * pc_xxxxz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxxzz[j] * pb_xx[j]);

                t_xzz_xxxx[j] += fl_s_0_0_6 * (5.0 * pc_xxxzz[j] * fl1_fx + 0.5 * pc_xxxxx[j] * fl1_fx + pa_x[j] * pc_xxxxzz[j] + 2.0 * pc_xxxxxz[j] * pa_z[j] + 4.0 * pc_xxxxzz[j] * pb_x[j]);

                t_xzz_xxxx[j] += -fl_s_0_0_7 * pc_xxxxxzz[j];

                t_xzz_xxxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xxy[j] + 1.5 * pa_xzz[j] * pb_xy[j] * fl1_fx + 1.5 * fl1_fx * pa_zz[j] * pb_xxy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxxy[j] + pa_xzz[j] * pb_xxxy[j]);

                t_xzz_xxxy[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_zz[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * fl2_fx * pb_xxy[j] - 1.5 * pa_xzz[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_xzz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_y[j] - 3.0 * pa_xz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 4.5 * pc_x[j] * pa_zz[j] * pb_xy[j] * fl1_fx - 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_y[j] - 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] - 1.5 * fl1_fx * pa_zz[j] * pb_xxy[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxxy[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxxy[j] - pa_xzz[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_xzz[j] * pb_xxy[j] * pc_x[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xxxy[j] - pc_x[j] * pa_zz[j] * pb_xxxy[j]);

                t_xzz_xxxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * fl2_fx * pa_zz[j] * pc_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 4.5 * pc_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pb_xx[j] * pc_y[j] + 0.75 * fl2_fx * pb_xxy[j] + 1.5 * pa_xzz[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_y[j] + 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 1.5 * pa_x[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 4.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_zz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_y[j] + 9.0 * pc_xz[j] * pa_z[j] * pb_xy[j] * fl1_fx + 3.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xx[j] + 1.5 * fl1_fx * pc_zz[j] * pb_xxy[j] + 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_y[j] + 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_xx[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxx[j] * pc_y[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxy[j] * pc_x[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xx[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxxy[j] + 3.0 * pa_xzz[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_xzz[j] * pb_xy[j] * pc_xx[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xxx[j] + 6.0 * pa_xz[j] * pc_xz[j] * pb_xxy[j] + pa_x[j] * pc_zz[j] * pb_xxxy[j] + pc_xy[j] * pa_zz[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_zz[j] * pb_xxy[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xxxy[j]);

                t_xzz_xxxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 3.0 * fl2_fx * pa_z[j] * pc_yz[j] - 0.75 * fl2_fx * pc_yzz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_xy[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 4.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_y[j] - 9.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xz[j] * pa_z[j] * pb_xy[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] - 4.5 * pc_xzz[j] * pb_xy[j] * fl1_fx - 1.5 * fl1_fx * pc_yzz[j] * pb_xx[j] - 3.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xx[j] - 1.5 * fl1_fx * pc_zz[j] * pb_xxy[j] - 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_xy[j] - 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_xx[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxx[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_xx[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_xzz[j] * pb_x[j] * pc_xxy[j] - pa_xzz[j] * pc_xxx[j] * pb_y[j] - 6.0 * pa_xz[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxz[j] * pb_xy[j] - pa_x[j] * pc_yzz[j] * pb_xxx[j] - 3.0 * pa_x[j] * pc_xzz[j] * pb_xxy[j] - 3.0 * pc_xxy[j] * pa_zz[j] * pb_xx[j] - 3.0 * pc_xxx[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xxx[j] - 6.0 * pc_xxz[j] * pa_z[j] * pb_xxy[j] - pc_xzz[j] * pb_xxxy[j]);

                t_xzz_xxxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 3.0 * pc_xxy[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xzz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_xx[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxxy[j] + 1.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_xxy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_y[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xy[j] + pa_xzz[j] * pc_xxxy[j] + 6.0 * pa_xz[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxxz[j] * pb_y[j] + 3.0 * pa_x[j] * pc_xyzz[j] * pb_xx[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_xy[j] + 3.0 * pc_xxxy[j] * pa_zz[j] * pb_x[j] + pc_xxxx[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_xxyz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xxxz[j] * pa_z[j] * pb_xy[j] + pc_xyzz[j] * pb_xxx[j] + 3.0 * pc_xxzz[j] * pb_xxy[j]);

                t_xzz_xxxy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yzz[j] - 1.5 * pc_xxy[j] * fl2_fx - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 4.5 * pc_xyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxxy[j] - 0.5 * pc_xxxxy[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_xxxyz[j] - 3.0 * pa_x[j] * pc_xxyzz[j] * pb_x[j] - pa_x[j] * pc_xxxzz[j] * pb_y[j] - pc_xxxxy[j] * pa_zz[j] - 6.0 * pc_xxxyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xxyzz[j] * pb_xx[j] - 3.0 * pc_xxxzz[j] * pb_xy[j]);

                t_xzz_xxxy[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxxxy[j] * fl1_fx + pa_x[j] * pc_xxxyzz[j] + 2.0 * pc_xxxxyz[j] * pa_z[j] + 3.0 * pc_xxxyzz[j] * pb_x[j] + pc_xxxxzz[j] * pb_y[j]);

                t_xzz_xxxy[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];

                t_xzz_xxxz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 0.375 * fl3_fx * pb_z[j] + 1.5 * pa_xz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_xx[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pb_xxz[j] + 1.5 * pa_xzz[j] * pb_xz[j] * fl1_fx + pa_xz[j] * fl1_fx * pb_xxx[j] + 1.5 * fl1_fx * pa_zz[j] * pb_xxz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxxz[j] + pa_xzz[j] * pb_xxxz[j]);

                t_xzz_xxxz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 3.0 * pa_xz[j] * fl2_fx * pb_x[j] - 1.5 * pa_xz[j] * fl2_fx * pc_x[j] - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_xx[j] - 2.25 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pb_xxz[j] - 1.5 * pa_xzz[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_xzz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 3.0 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] - pa_xz[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_x[j] * pa_zz[j] * pb_xz[j] * fl1_fx - pc_x[j] * pa_z[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] - 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_xxz[j] - 1.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxxz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxxz[j] - pa_xzz[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_xzz[j] * pb_xxz[j] * pc_x[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xxxz[j] - pc_x[j] * pa_zz[j] * pb_xxxz[j]);

                t_xzz_xxxz[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_z[j] + 3.375 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 3.0 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_xz[j] * fl2_fx * pb_x[j] + 4.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 9.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] + 3.0 * pc_xx[j] * pa_z[j] * fl2_fx + 6.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_xx[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xz[j] + 4.5 * pc_x[j] * fl2_fx * pb_xz[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pb_xxz[j] + 1.5 * pa_xzz[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_xzz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_z[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 3.0 * pa_xz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 1.5 * pa_x[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 4.5 * pc_x[j] * pa_zz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] + 9.0 * pc_xz[j] * pa_z[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xx[j] + pc_x[j] * pa_z[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] + 1.5 * fl1_fx * pc_zz[j] * pb_xxz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] + 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] + 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_xx[j] + 1.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_x[j] + 1.5 * pc_xx[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxxz[j] + 3.0 * pa_xzz[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_xzz[j] * pb_xz[j] * pc_xx[j] + 2.0 * pa_xz[j] * pc_zz[j] * pb_xxx[j] + 6.0 * pa_xz[j] * pc_xz[j] * pb_xxz[j] + pa_x[j] * pc_zz[j] * pb_xxxz[j] + pc_xz[j] * pa_zz[j] * pb_xxx[j] + 3.0 * pc_xx[j] * pa_zz[j] * pb_xxz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xxxz[j]);

                t_xzz_xxxz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pb_z[j] - 1.5 * pa_xz[j] * fl2_fx * pc_x[j] - 4.5 * pa_x[j] * pc_xz[j] * fl2_fx - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 6.0 * pc_xx[j] * pa_z[j] * fl2_fx - 4.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 13.5 * pc_xz[j] * fl2_fx * pb_x[j] - 4.5 * pc_xxz[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pc_zz[j] - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_xx[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pc_xx[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * pa_xzz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_xz[j] * fl1_fx * pc_xxx[j] - 3.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 1.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] - 9.0 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xz[j] * pa_z[j] * pb_xz[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_x[j] - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xzz[j] * pb_xz[j] * fl1_fx - 4.5 * pc_xxz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] - 1.5 * fl1_fx * pc_zz[j] * pb_xxz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_xx[j] - 1.5 * pc_xxx[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xx[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_xzz[j] * pb_x[j] * pc_xxz[j] - pa_xzz[j] * pc_xxx[j] * pb_z[j] - 6.0 * pa_xz[j] * pc_xzz[j] * pb_xx[j] - 6.0 * pa_xz[j] * pc_xxz[j] * pb_xz[j] - pa_x[j] * pc_zzz[j] * pb_xxx[j] - 3.0 * pa_x[j] * pc_xzz[j] * pb_xxz[j] - 3.0 * pc_xxz[j] * pa_zz[j] * pb_xx[j] - 3.0 * pc_xxx[j] * pa_zz[j] * pb_xz[j] - 2.0 * pc_xzz[j] * pa_z[j] * pb_xxx[j] - 6.0 * pc_xxz[j] * pa_z[j] * pb_xxz[j] - pc_xzz[j] * pb_xxxz[j]);

                t_xzz_xxxz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 2.25 * pa_x[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xx[j] * pa_z[j] * fl2_fx + 9.0 * pc_xxz[j] * fl2_fx + 6.75 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + pa_xz[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xzzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxxx[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_x[j] + 4.5 * pc_xzzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xzz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xxxz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxz[j] * fl1_fx * pb_xx[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxx[j] * pb_z[j] + 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxx[j] * fl1_fx * pb_xz[j] + pa_xzz[j] * pc_xxxz[j] + 6.0 * pa_xz[j] * pc_xxzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxxz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_xzzz[j] * pb_xx[j] + 3.0 * pa_x[j] * pc_xxzz[j] * pb_xz[j] + 3.0 * pc_xxxz[j] * pa_zz[j] * pb_x[j] + pc_xxxx[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xxzz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xxxz[j] * pa_z[j] * pb_xz[j] + pc_xzzz[j] * pb_xxx[j] + 3.0 * pc_xxzz[j] * pb_xxz[j]);

                t_xzz_xxxz[j] += fl_s_0_0_5 * (-4.5 * pc_xxz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * pa_x[j] * pc_xzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxxz[j] * fl1_fx - 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - pc_xxxx[j] * pa_z[j] * fl1_fx - 4.5 * pc_xzzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxzzz[j] * fl1_fx - 3.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxxxz[j] * fl1_fx - 4.5 * pc_xxxz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxx[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_xxxzz[j] - 3.0 * pa_x[j] * pc_xxzzz[j] * pb_x[j] - pa_x[j] * pc_xxxzz[j] * pb_z[j] - pc_xxxxz[j] * pa_zz[j] - 6.0 * pc_xxxzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxxz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xxzzz[j] * pb_xx[j] - 3.0 * pc_xxxzz[j] * pb_xz[j]);

                t_xzz_xxxz[j] += fl_s_0_0_6 * (3.0 * pc_xxzzz[j] * fl1_fx + 1.5 * pc_xxxxz[j] * fl1_fx + pa_x[j] * pc_xxxzzz[j] + 2.0 * pc_xxxxzz[j] * pa_z[j] + 3.0 * pc_xxxzzz[j] * pb_x[j] + pc_xxxxzz[j] * pb_z[j]);

                t_xzz_xxxz[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_78_81(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (78,81)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzz_xxyy = primBuffer.data(150 * idx + 78);

            auto t_xzz_xxyz = primBuffer.data(150 * idx + 79);

            auto t_xzz_xxzz = primBuffer.data(150 * idx + 80);

            // Batch of Integrals (78,81)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, \
                                     pb_xxz, pb_xxzz, pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxx, pc_xxxy, pc_xxxyy, pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, \
                                     pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxxzzzz, pc_xxy, pc_xxyy, \
                                     pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, \
                                     pc_xxzzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, \
                                     pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_xzz_xxyy, t_xzz_xxyz, t_xzz_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzz_xxyy[j] = fl_s_0_0_0 * (0.125 * pa_x[j] * fl3_fx + 0.25 * fl3_fx * pb_x[j] + 0.25 * pa_xzz[j] * fl2_fx + 0.5 * fl2_fx * pa_zz[j] * pb_x[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pb_xyy[j] + 0.5 * pa_xzz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xzz[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_zz[j] * pb_xyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxyy[j] + pa_xzz[j] * pb_xxyy[j]);

                t_xzz_xxyy[j] += fl_s_0_0_1 * (-0.375 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 0.5 * pa_xzz[j] * fl2_fx - 0.5 * pa_xz[j] * pc_z[j] * fl2_fx - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - fl2_fx * pa_zz[j] * pb_x[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 0.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - fl2_fx * pb_xy[j] * pc_y[j] - fl2_fx * pb_xyy[j] - 0.5 * pa_xzz[j] * pb_xx[j] * fl1_fx - pa_xzz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xzz[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_yy[j] - pa_xz[j] * pc_z[j] * pb_xx[j] * fl1_fx - pa_xz[j] * pc_z[j] * fl1_fx * pb_yy[j] - 0.5 * pc_x[j] * pa_zz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yy[j] - 2.0 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_y[j] - 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] - fl1_fx * pa_zz[j] * pb_xyy[j] - pa_x[j] * fl1_fx * pb_xxy[j] * pc_y[j] - pa_x[j] * fl1_fx * pb_xyy[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxyy[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxyy[j] - 2.0 * pa_xzz[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_xzz[j] * pb_xyy[j] * pc_x[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xxyy[j] - pc_x[j] * pa_zz[j] * pb_xxyy[j]);

                t_xzz_xxyy[j] += fl_s_0_0_2 * (0.375 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xzz[j] * fl2_fx + pa_xz[j] * pc_z[j] * fl2_fx + 0.25 * pa_x[j] * pc_zz[j] * fl2_fx + 1.5 * pc_x[j] * pa_zz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_z[j] * fl2_fx + 2.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + 0.5 * fl2_fx * pa_zz[j] * pb_x[j] + pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + 0.25 * pa_x[j] * fl2_fx * pc_yy[j] + pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.25 * pa_x[j] * fl2_fx * pb_xx[j] + 0.25 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pc_x[j] * fl2_fx * pb_xx[j] + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pb_x[j] * pc_yy[j] + 2.0 * fl2_fx * pb_xy[j] * pc_y[j] + 0.5 * fl2_fx * pb_xyy[j] + pa_xzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xzz[j] * fl1_fx * pc_yy[j] + pa_xzz[j] * fl1_fx * pb_y[j] * pc_y[j] + pa_xz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 2.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] + pa_xz[j] * pc_z[j] * fl1_fx * pb_yy[j] + 0.5 * pa_x[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yy[j] + 0.5 * pc_x[j] * pa_zz[j] * pb_xx[j] * fl1_fx + pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] + 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yy[j] + pc_xz[j] * pa_z[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_zz[j] * pb_x[j] * pc_yy[j] + 4.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xy[j] + fl1_fx * pc_zz[j] * pb_xyy[j] + 2.0 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_yy[j] + 2.0 * pa_x[j] * fl1_fx * pb_xy[j] * pc_xy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yy[j] + pa_x[j] * fl1_fx * pb_xxy[j] * pc_y[j] + pa_x[j] * fl1_fx * pb_xyy[j] * pc_x[j] + pc_xy[j] * fl1_fx * pb_xxy[j] + pc_xx[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxyy[j] + pa_xzz[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_xzz[j] * pb_xy[j] * pc_xy[j] + pa_xzz[j] * pc_xx[j] * pb_yy[j] + 4.0 * pa_xz[j] * pc_yz[j] * pb_xxy[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xyy[j] + pa_x[j] * pc_zz[j] * pb_xxyy[j] + 2.0 * pc_xy[j] * pa_zz[j] * pb_xxy[j] + 2.0 * pc_xx[j] * pa_zz[j] * pb_xyy[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xxyy[j]);

                t_xzz_xxyy[j] += fl_s_0_0_3 * (-0.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 0.25 * fl3_fx * pb_x[j] - 0.5 * pa_xz[j] * pc_z[j] * fl2_fx - 0.5 * pa_x[j] * pc_zz[j] * fl2_fx - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 3.0 * pc_xz[j] * pa_z[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - fl2_fx * pc_zz[j] * pb_x[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.5 * pa_x[j] * fl2_fx * pc_xx[j] - 0.5 * pa_x[j] * fl2_fx * pc_yy[j] - 0.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - pc_xx[j] * fl2_fx * pb_x[j] - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.25 * pc_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - fl2_fx * pb_x[j] * pc_yy[j] - fl2_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_xzz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xzz[j] * fl1_fx * pc_yy[j] - 2.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - pa_xz[j] * pc_xxz[j] * fl1_fx - pa_xz[j] * pc_yyz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_zz[j] * pb_xx[j] * fl1_fx - pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yy[j] - pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] - pc_xz[j] * pa_z[j] * pb_xx[j] * fl1_fx - 2.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xzz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] - 2.0 * fl1_fx * pa_z[j] * pc_yyz[j] * pb_x[j] - 2.0 * fl1_fx * pc_yzz[j] * pb_xy[j] - fl1_fx * pa_zz[j] * pb_x[j] * pc_yy[j] - 4.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xy[j] - fl1_fx * pc_zz[j] * pb_xyy[j] - pa_x[j] * fl1_fx * pb_x[j] * pc_xyy[j] - pa_x[j] * fl1_fx * pc_xxy[j] * pb_y[j] - 0.5 * pa_x[j] * fl1_fx * pb_xx[j] * pc_yy[j] - 2.0 * pa_x[j] * fl1_fx * pb_xy[j] * pc_xy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yy[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] - pc_xy[j] * fl1_fx * pb_xxy[j] - pc_xx[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_xzz[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_xzz[j] * pc_xxy[j] * pb_y[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_xx[j] - 8.0 * pa_xz[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_xxz[j] * pb_yy[j] - 2.0 * pa_x[j] * pc_yzz[j] * pb_xxy[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xyy[j] - pc_xyy[j] * pa_zz[j] * pb_xx[j] - 4.0 * pc_xxy[j] * pa_zz[j] * pb_xy[j] - pc_xxx[j] * pa_zz[j] * pb_yy[j] - 4.0 * pc_xyz[j] * pa_z[j] * pb_xxy[j] - 4.0 * pc_xxz[j] * pa_z[j] * pb_xyy[j] - pc_xzz[j] * pb_xxyy[j]);

                t_xzz_xxyy[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.25 * pa_x[j] * pc_zz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_z[j] * fl2_fx + 1.5 * pc_xzz[j] * fl2_fx + 0.5 * fl2_fx * pc_zz[j] * pb_x[j] + 0.25 * pa_x[j] * fl2_fx * pc_xx[j] + 0.25 * pa_x[j] * fl2_fx * pc_yy[j] + 0.5 * pc_xxx[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pb_x[j] * pc_yy[j] + pa_xz[j] * pc_xxz[j] * fl1_fx + pa_xz[j] * pc_yyz[j] * fl1_fx + pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * pc_xxzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx + pa_x[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 2.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + pc_xxxz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_xzz[j] * pb_xx[j] * fl1_fx + pc_xxzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yy[j] + fl1_fx * pc_yyzz[j] * pb_x[j] + 2.0 * fl1_fx * pa_z[j] * pc_yyz[j] * pb_x[j] + 2.0 * fl1_fx * pc_yzz[j] * pb_xy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxyy[j] + pa_x[j] * fl1_fx * pb_x[j] * pc_xyy[j] + pa_x[j] * fl1_fx * pc_xxy[j] * pb_y[j] + pc_xxyy[j] * fl1_fx * pb_x[j] + pc_xxxy[j] * fl1_fx * pb_y[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + 2.0 * pc_xxy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yy[j] + pa_xzz[j] * pc_xxyy[j] + 4.0 * pa_xz[j] * pc_xyyz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxyz[j] * pb_y[j] + pa_x[j] * pc_yyzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xyzz[j] * pb_xy[j] + pa_x[j] * pc_xxzz[j] * pb_yy[j] + 2.0 * pc_xxyy[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxxy[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xx[j] + 8.0 * pc_xxyz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xyzz[j] * pb_xxy[j] + 2.0 * pc_xxzz[j] * pb_xyy[j]);

                t_xzz_xxyy[j] += fl_s_0_0_5 * (-0.75 * pc_xzz[j] * fl2_fx - 0.25 * pc_xxx[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 0.5 * pa_x[j] * pc_xxzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_yyzz[j] * fl1_fx - pc_xxxz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - pc_xxzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxxzz[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - fl1_fx * pc_yyzz[j] * pb_x[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxyy[j] - 0.5 * pc_xxxyy[j] * fl1_fx - pc_xxyy[j] * fl1_fx * pb_x[j] - pc_xxxy[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_xxyyz[j] - 2.0 * pa_x[j] * pc_xyyzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxyzz[j] * pb_y[j] - pc_xxxyy[j] * pa_zz[j] - 4.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxxyz[j] * pa_z[j] * pb_y[j] - pc_xyyzz[j] * pb_xx[j] - 4.0 * pc_xxyzz[j] * pb_xy[j] - pc_xxxzz[j] * pb_yy[j]);

                t_xzz_xxyy[j] += fl_s_0_0_6 * (0.5 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + pa_x[j] * pc_xxyyzz[j] + 2.0 * pc_xxxyyz[j] * pa_z[j] + 2.0 * pc_xxyyzz[j] * pb_x[j] + 2.0 * pc_xxxyzz[j] * pb_y[j]);

                t_xzz_xxyy[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];

                t_xzz_xxyz[j] = fl_s_0_0_0 * (0.5 * pa_xz[j] * fl2_fx * pb_y[j] + fl2_fx * pa_z[j] * pb_xy[j] + 0.25 * pa_x[j] * fl2_fx * pb_yz[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xzz[j] * fl1_fx * pb_yz[j] + pa_xz[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_zz[j] * pb_xyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxyz[j] + pa_xzz[j] * pb_xxyz[j]);

                t_xzz_xxyz[j] += fl_s_0_0_1 * (-0.5 * pa_xz[j] * fl2_fx * pc_y[j] - pa_xz[j] * fl2_fx * pb_y[j] - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 2.0 * fl2_fx * pa_z[j] * pb_xy[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 0.5 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pb_xz[j] * pc_y[j] - fl2_fx * pb_xyz[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_xzz[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_yz[j] - pa_xz[j] * pc_z[j] * fl1_fx * pb_yz[j] - pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] - pa_xz[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxy[j] - 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yz[j] - pc_x[j] * pa_z[j] * fl1_fx * pb_xxy[j] - fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] - fl1_fx * pa_zz[j] * pb_xz[j] * pc_y[j] - 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] - fl1_fx * pa_zz[j] * pb_xyz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_y[j] - pa_x[j] * fl1_fx * pb_xyz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxyz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxyz[j] - pa_xzz[j] * pb_xxy[j] * pc_z[j] - pa_xzz[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_xzz[j] * pb_xyz[j] * pc_x[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xxyz[j] - pc_x[j] * pa_zz[j] * pb_xxyz[j]);

                t_xzz_xxyz[j] += fl_s_0_0_2 * (pa_xz[j] * fl2_fx * pc_y[j] + 0.5 * pa_xz[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 3.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 2.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 3.0 * fl2_fx * pc_z[j] * pb_xy[j] + fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pc_x[j] * fl2_fx * pb_yz[j] + fl2_fx * pb_xz[j] * pc_y[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_xzz[j] * fl1_fx * pc_yz[j] + 0.5 * pa_xzz[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_xzz[j] * fl1_fx * pc_y[j] * pb_z[j] + pa_xz[j] * pc_zz[j] * fl1_fx * pb_y[j] + pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + pa_xz[j] * pc_z[j] * fl1_fx * pb_yz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xy[j] + pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] + pa_xz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yz[j] + pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] + 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xy[j] + pc_x[j] * pa_z[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_zz[j] * pb_x[j] * pc_yz[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] + 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xz[j] + fl1_fx * pc_zz[j] * pb_xyz[j] + fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] + fl1_fx * pa_zz[j] * pb_xz[j] * pc_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] + pa_x[j] * fl1_fx * pb_xz[j] * pc_xy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxz[j] * pc_y[j] + pa_x[j] * fl1_fx * pb_xyz[j] * pc_x[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + pc_xx[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxyz[j] + pa_xzz[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_xzz[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_xzz[j] * pb_xz[j] * pc_xy[j] + pa_xzz[j] * pc_xx[j] * pb_yz[j] + 2.0 * pa_xz[j] * pc_zz[j] * pb_xxy[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xxz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xyz[j] + pa_x[j] * pc_zz[j] * pb_xxyz[j] + pc_xz[j] * pa_zz[j] * pb_xxy[j] + pc_xy[j] * pa_zz[j] * pb_xxz[j] + 2.0 * pc_xx[j] * pa_zz[j] * pb_xyz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xxyz[j]);

                t_xzz_xxyz[j] += fl_s_0_0_3 * (-0.5 * pa_xz[j] * fl2_fx * pc_y[j] - 1.5 * pa_x[j] * pc_yz[j] * fl2_fx - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 3.0 * fl2_fx * pc_yz[j] * pb_x[j] - fl2_fx * pa_z[j] * pb_x[j] * pc_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pb_xz[j] * pc_y[j] - 0.5 * pa_xzz[j] * fl1_fx * pc_yz[j] - pa_xz[j] * pc_yzz[j] * fl1_fx - pa_xz[j] * pc_zz[j] * fl1_fx * pb_y[j] - pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xz[j] * fl1_fx * pc_xxy[j] - 2.0 * pa_xz[j] * fl1_fx * pb_x[j] * pc_xy[j] - pa_xz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_y[j] - 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_yz[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 1.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_yz[j] - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xzz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_x[j] - fl1_fx * pc_zzz[j] * pb_xy[j] - fl1_fx * pc_yzz[j] * pb_xz[j] - fl1_fx * pa_zz[j] * pb_x[j] * pc_yz[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] - 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_xz[j] - fl1_fx * pc_zz[j] * pb_xyz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xxy[j] * pb_z[j] - pa_x[j] * fl1_fx * pb_xz[j] * pc_xy[j] - 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_yz[j] - pc_xxy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - pc_xx[j] * fl1_fx * pb_xyz[j] - 2.0 * pa_xzz[j] * pb_x[j] * pc_xyz[j] - pa_xzz[j] * pc_xxz[j] * pb_y[j] - pa_xzz[j] * pc_xxy[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_yzz[j] * pb_xx[j] - 4.0 * pa_xz[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xxz[j] * pb_yz[j] - pa_x[j] * pc_zzz[j] * pb_xxy[j] - pa_x[j] * pc_yzz[j] * pb_xxz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xyz[j] - pc_xyz[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xxz[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_xxy[j] * pa_zz[j] * pb_xz[j] - pc_xxx[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_xzz[j] * pa_z[j] * pb_xxy[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xxz[j] - 4.0 * pc_xxz[j] * pa_z[j] * pb_xyz[j] - pc_xzz[j] * pb_xxyz[j]);

                t_xzz_xxyz[j] += fl_s_0_0_4 * (0.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + pa_xz[j] * pc_yzz[j] * fl1_fx + pa_xz[j] * fl1_fx * pc_xxy[j] + 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzz[j] * fl1_fx * pb_y[j] + 0.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 1.5 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxxy[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] + pc_xxx[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_xy[j] + fl1_fx * pc_yzzz[j] * pb_x[j] + 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_x[j] + fl1_fx * pc_zzz[j] * pb_xy[j] + fl1_fx * pc_yzz[j] * pb_xz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xxy[j] * pb_z[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + pc_xxy[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_yz[j] + pa_xzz[j] * pc_xxyz[j] + 4.0 * pa_xz[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xxzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xxyz[j] * pb_z[j] + pa_x[j] * pc_yzzz[j] * pb_xx[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_xz[j] + pa_x[j] * pc_xxzz[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_x[j] + pc_xxxz[j] * pa_zz[j] * pb_y[j] + pc_xxxy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xyzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xxzz[j] * pa_z[j] * pb_xy[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_yz[j] + pc_xzzz[j] * pb_xxy[j] + pc_xyzz[j] * pb_xxz[j] + 2.0 * pc_xxzz[j] * pb_xyz[j]);

                t_xzz_xxyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xxyz[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] - fl1_fx * pc_yzzz[j] * pb_x[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_xxyzz[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_x[j] - pa_x[j] * pc_xxzzz[j] * pb_y[j] - pa_x[j] * pc_xxyzz[j] * pb_z[j] - pc_xxxyz[j] * pa_zz[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - pc_xyzzz[j] * pb_xx[j] - 2.0 * pc_xxzzz[j] * pb_xy[j] - 2.0 * pc_xxyzz[j] * pb_xz[j] - pc_xxxzz[j] * pb_yz[j]);

                t_xzz_xxyz[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_x[j] * pc_xxyzzz[j] + 2.0 * pc_xxxyzz[j] * pa_z[j] + 2.0 * pc_xxyzzz[j] * pb_x[j] + pc_xxxzzz[j] * pb_y[j] + pc_xxxyzz[j] * pb_z[j]);

                t_xzz_xxyz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];

                t_xzz_xxzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * fl3_fx * pb_x[j] + 0.25 * pa_xzz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 0.5 * fl2_fx * pa_zz[j] * pb_x[j] + 2.0 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * fl2_fx * pb_xzz[j] + 0.5 * pa_xzz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_xzz[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_zz[j] * pb_xzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xxzz[j] + pa_xzz[j] * pb_xxzz[j]);

                t_xzz_xxzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 2.25 * fl3_fx * pb_x[j] - 0.5 * pa_xzz[j] * fl2_fx - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 2.0 * pa_xz[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_x[j] * fl2_fx * pb_xx[j] - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 3.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - fl2_fx * pa_zz[j] * pb_x[j] - 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 4.0 * fl2_fx * pa_z[j] * pb_xz[j] - 3.0 * fl2_fx * pc_z[j] * pb_xz[j] - 0.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - fl2_fx * pb_xzz[j] - 0.5 * pa_xzz[j] * pb_xx[j] * fl1_fx - pa_xzz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xz[j] * pc_z[j] * pb_xx[j] * fl1_fx - pa_xz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 4.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxz[j] - 0.5 * pc_x[j] * pa_zz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxz[j] - 2.0 * fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] - 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] - fl1_fx * pa_zz[j] * pb_xzz[j] - pa_x[j] * fl1_fx * pb_xzz[j] * pc_x[j] - 0.5 * pa_x[j] * fl1_fx * pb_xxzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xxzz[j] - 2.0 * pa_xzz[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_xzz[j] * pb_xzz[j] * pc_x[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xxzz[j] - pc_x[j] * pa_zz[j] * pb_xxzz[j]);

                t_xzz_xxzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 3.375 * pc_x[j] * fl3_fx + 2.25 * fl3_fx * pb_x[j] + 0.25 * pa_xzz[j] * fl2_fx + 3.0 * pa_xz[j] * pc_z[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 3.0 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 3.0 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_x[j] * fl2_fx * pb_xx[j] + 1.5 * pc_x[j] * pa_zz[j] * fl2_fx + 4.5 * pc_xz[j] * pa_z[j] * fl2_fx + 6.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] + 4.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 1.5 * pc_x[j] * fl2_fx * pb_xx[j] + 6.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 3.0 * fl2_fx * pc_zz[j] * pb_x[j] + 6.0 * fl2_fx * pc_z[j] * pb_xz[j] + 0.5 * fl2_fx * pa_zz[j] * pb_x[j] + 2.0 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * fl2_fx * pb_zz[j] + 0.5 * fl2_fx * pb_xzz[j] + pa_xzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_xzz[j] * fl1_fx * pc_zz[j] + pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 3.0 * pa_xz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 6.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 2.0 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] + pa_xz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 4.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 3.0 * pa_x[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 3.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_x[j] * pa_zz[j] * pb_xx[j] * fl1_fx + pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 1.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xz[j] * pa_z[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_zz[j] + 4.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xz[j] + 2.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xxz[j] + fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] + 4.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] + fl1_fx * pc_zz[j] * pb_xzz[j] + 2.0 * fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] + 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_zz[j] + pa_x[j] * fl1_fx * pb_xzz[j] * pc_x[j] + pc_xx[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xxzz[j] + pa_xzz[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_xzz[j] * pb_xz[j] * pc_xz[j] + pa_xzz[j] * pc_xx[j] * pb_zz[j] + 4.0 * pa_xz[j] * pc_zz[j] * pb_xxz[j] + 4.0 * pa_xz[j] * pc_xz[j] * pb_xzz[j] + pa_x[j] * pc_zz[j] * pb_xxzz[j] + 2.0 * pc_xz[j] * pa_zz[j] * pb_xxz[j] + 2.0 * pc_xx[j] * pa_zz[j] * pb_xzz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xxzz[j]);

                t_xzz_xxzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 3.375 * pc_x[j] * fl3_fx - 0.75 * fl3_fx * pb_x[j] - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 3.0 * pa_x[j] * pc_zz[j] * fl2_fx - 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_xx[j] - 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 9.0 * pc_xz[j] * pa_z[j] * fl2_fx - 3.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pc_xzz[j] * fl2_fx - 9.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxx[j] * fl2_fx - 3.0 * pc_xx[j] * fl2_fx * pb_x[j] - 0.75 * pc_x[j] * fl2_fx * pb_xx[j] - 6.0 * fl2_fx * pc_zz[j] * pb_x[j] - 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 3.0 * fl2_fx * pc_z[j] * pb_xz[j] - 0.75 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xzz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_xzz[j] * fl1_fx * pc_zz[j] - 6.0 * pa_xz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xxz[j] * fl1_fx - pa_xz[j] * pc_zzz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 3.0 * pa_x[j] * pc_zz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx - pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_xz[j] - pc_xx[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xzz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_z[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx - 6.0 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_z[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] - 4.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xzz[j] * pb_xx[j] * fl1_fx - 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - 6.0 * pc_xxz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xxz[j] - 2.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] - 2.0 * fl1_fx * pc_zzz[j] * pb_xz[j] - fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] - 4.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] - fl1_fx * pc_zz[j] * pb_xzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xx[j] * pb_zz[j] - 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] - pc_xx[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_xzz[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_xzz[j] * pc_xxz[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_zzz[j] * pb_xx[j] - 8.0 * pa_xz[j] * pc_xzz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xxz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_zzz[j] * pb_xxz[j] - 2.0 * pa_x[j] * pc_xzz[j] * pb_xzz[j] - pc_xzz[j] * pa_zz[j] * pb_xx[j] - 4.0 * pc_xxz[j] * pa_zz[j] * pb_xz[j] - pc_xxx[j] * pa_zz[j] * pb_zz[j] - 4.0 * pc_xzz[j] * pa_z[j] * pb_xxz[j] - 4.0 * pc_xxz[j] * pa_z[j] * pb_xzz[j] - pc_xzz[j] * pb_xxzz[j]);

                t_xzz_xxzz[j] += fl_s_0_0_4 * (1.125 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_xx[j] + 4.5 * pc_xz[j] * pa_z[j] * fl2_fx + 9.0 * pc_xzz[j] * fl2_fx + 4.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xxx[j] * fl2_fx + 1.5 * pc_xx[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_zz[j] * pb_x[j] + 3.0 * pa_xz[j] * pc_xxz[j] * fl1_fx + pa_xz[j] * pc_zzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xxzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx + pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxx[j] * pa_zz[j] * fl1_fx + 1.5 * pc_xzz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xxz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxxz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xzzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 2.0 * pc_xxx[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xzz[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xxzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xzzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xxxz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xxz[j] * fl1_fx * pb_xz[j] + fl1_fx * pc_zzzz[j] * pb_x[j] + 2.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] + 2.0 * fl1_fx * pc_zzz[j] * pb_xz[j] + 0.5 * pc_xxx[j] * fl1_fx * pb_zz[j] + pa_xzz[j] * pc_xxzz[j] + 4.0 * pa_xz[j] * pc_xzzz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xxzz[j] * pb_z[j] + pa_x[j] * pc_zzzz[j] * pb_xx[j] + 4.0 * pa_x[j] * pc_xzzz[j] * pb_xz[j] + pa_x[j] * pc_xxzz[j] * pb_zz[j] + 2.0 * pc_xxzz[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxxz[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xzzz[j] * pa_z[j] * pb_xx[j] + 8.0 * pc_xxzz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxxz[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xzzz[j] * pb_xxz[j] + 2.0 * pc_xxzz[j] * pb_xzz[j]);

                t_xzz_xxzz[j] += fl_s_0_0_5 * (-4.5 * pc_xzz[j] * fl2_fx - 0.75 * pc_xxx[j] * fl2_fx - 3.0 * pa_x[j] * pc_xxzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx - 3.0 * pc_xxxz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xzzz[j] * pa_z[j] * fl1_fx - 6.0 * pc_xxzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxxzz[j] * fl1_fx - 1.5 * pc_xzzzz[j] * fl1_fx - 3.0 * pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxxz[j] * fl1_fx * pb_z[j] - fl1_fx * pc_zzzz[j] * pb_x[j] - 2.0 * pa_xz[j] * pc_xxzzz[j] - 2.0 * pa_x[j] * pc_xzzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xxzzz[j] * pb_z[j] - pc_xxxzz[j] * pa_zz[j] - 4.0 * pc_xxzzz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxxzz[j] * pa_z[j] * pb_z[j] - pc_xzzzz[j] * pb_xx[j] - 4.0 * pc_xxzzz[j] * pb_xz[j] - pc_xxxzz[j] * pb_zz[j]);

                t_xzz_xxzz[j] += fl_s_0_0_6 * (3.0 * pc_xxxzz[j] * fl1_fx + 1.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_xxzzzz[j] + 2.0 * pc_xxxzzz[j] * pa_z[j] + 2.0 * pc_xxzzzz[j] * pb_x[j] + 2.0 * pc_xxxzzz[j] * pb_z[j]);

                t_xzz_xxzz[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_81_84(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (81,84)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzz_xyyy = primBuffer.data(150 * idx + 81);

            auto t_xzz_xyyz = primBuffer.data(150 * idx + 82);

            auto t_xzz_xyzz = primBuffer.data(150 * idx + 83);

            // Batch of Integrals (81,84)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, \
                                     pb_xyz, pb_xyzz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, pc_xxz, pc_xxzz, \
                                     pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, \
                                     pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_xzz_xyyy, t_xzz_xyyz, t_xzz_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzz_xyyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_xzz[j] * pb_xy[j] * fl1_fx + 0.5 * fl1_fx * pa_zz[j] * pb_yyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_xyyy[j] + pa_xzz[j] * pb_xyyy[j]);

                t_xzz_xyyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_y[j] - 0.375 * fl3_fx * pc_y[j] - 1.5 * fl2_fx * pa_zz[j] * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pb_yy[j] * pc_y[j] - 0.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_xzz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_xzz[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 1.5 * pc_x[j] * pa_zz[j] * pb_xy[j] * fl1_fx - 1.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_y[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yyy[j] - 1.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_y[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyy[j] - 0.5 * pa_x[j] * fl1_fx * pb_xyyy[j] - 0.5 * pc_x[j] * fl1_fx * pb_xyyy[j] - 3.0 * pa_xzz[j] * pb_xyy[j] * pc_y[j] - pa_xzz[j] * pc_x[j] * pb_yyy[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xyyy[j] - pc_x[j] * pa_zz[j] * pb_xyyy[j]);

                t_xzz_xyyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * fl2_fx * pa_zz[j] * pc_y[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 1.5 * pc_x[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pb_y[j] * pc_yy[j] + 1.5 * fl2_fx * pb_yy[j] * pc_y[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_xzz[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_x[j] * pa_zz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xz[j] * pa_z[j] * pb_xy[j] * fl1_fx + 1.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_yy[j] + 3.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] + 1.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_y[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_yy[j] + 1.5 * pa_x[j] * fl1_fx * pc_xy[j] * pb_yy[j] + 1.5 * pa_x[j] * fl1_fx * pb_xyy[j] * pc_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_x[j] * fl1_fx * pb_xyyy[j] + 3.0 * pa_xzz[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_xzz[j] * pc_xy[j] * pb_yy[j] + 6.0 * pa_xz[j] * pc_yz[j] * pb_xyy[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_yyy[j] + pa_x[j] * pc_zz[j] * pb_xyyy[j] + 3.0 * pc_xy[j] * pa_zz[j] * pb_xyy[j] + pc_xx[j] * pa_zz[j] * pb_yyy[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xyyy[j]);

                t_xzz_xyyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 3.0 * fl2_fx * pa_z[j] * pc_yz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.75 * fl2_fx * pc_yzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_xy[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 0.25 * fl2_fx * pc_yyy[j] - 1.5 * fl2_fx * pb_y[j] * pc_yy[j] - 0.75 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_xzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_x[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_z[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_xzz[j] * pb_xy[j] * fl1_fx - 0.5 * fl1_fx * pa_zz[j] * pc_yyy[j] - 3.0 * fl1_fx * pa_z[j] * pc_yyz[j] * pb_y[j] - 1.5 * fl1_fx * pc_yzz[j] * pb_yy[j] - 1.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_yy[j] - 3.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] - 0.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yyy[j] - 1.5 * pa_x[j] * fl1_fx * pc_xyy[j] * pb_y[j] - 1.5 * pa_x[j] * fl1_fx * pb_xy[j] * pc_yy[j] - 1.5 * pa_x[j] * fl1_fx * pc_xy[j] * pb_yy[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xyy[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyy[j] - pa_xzz[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_xzz[j] * pc_xyy[j] * pb_y[j] - 6.0 * pa_xz[j] * pc_yyz[j] * pb_xy[j] - 6.0 * pa_xz[j] * pc_xyz[j] * pb_yy[j] - 3.0 * pa_x[j] * pc_yzz[j] * pb_xyy[j] - pa_x[j] * pc_xzz[j] * pb_yyy[j] - 3.0 * pc_xyy[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_xxy[j] * pa_zz[j] * pb_yy[j] - 6.0 * pc_xyz[j] * pa_z[j] * pb_xyy[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_yyy[j] - pc_xzz[j] * pb_xyyy[j]);

                t_xzz_xyyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 1.5 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pc_yyy[j] + 0.75 * fl2_fx * pb_y[j] * pc_yy[j] + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xzz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xyzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xxzz[j] * pb_y[j] * fl1_fx + fl1_fx * pa_z[j] * pc_yyyz[j] + 1.5 * fl1_fx * pc_yyzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yyy[j] + 3.0 * fl1_fx * pa_z[j] * pc_yyz[j] * pb_y[j] + 1.5 * fl1_fx * pc_yzz[j] * pb_yy[j] + 0.5 * pa_x[j] * fl1_fx * pc_xyyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_x[j] * pc_yyy[j] + 1.5 * pa_x[j] * fl1_fx * pc_xyy[j] * pb_y[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + pa_xzz[j] * pc_xyyy[j] + 2.0 * pa_xz[j] * pc_yyyz[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_xy[j] + 3.0 * pa_x[j] * pc_xyzz[j] * pb_yy[j] + pc_xyyy[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xxyy[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_xyyz[j] * pa_z[j] * pb_xy[j] + 6.0 * pc_xxyz[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_xyzz[j] * pb_xyy[j] + pc_xxzz[j] * pb_yyy[j]);

                t_xzz_xyyy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_yzz[j] - 0.75 * pc_xxy[j] * fl2_fx - 0.25 * fl2_fx * pc_yyy[j] - 1.5 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_xyzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 0.5 * fl1_fx * pc_yyyzz[j] - fl1_fx * pa_z[j] * pc_yyyz[j] - 1.5 * fl1_fx * pc_yyzz[j] * pb_y[j] - 0.5 * pa_x[j] * fl1_fx * pc_xyyy[j] - 0.5 * pc_xxyyy[j] * fl1_fx - 0.5 * pc_xyyy[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_xyyyz[j] - pa_x[j] * pc_yyyzz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xyyzz[j] * pb_y[j] - pc_xxyyy[j] * pa_zz[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyzz[j] * pb_xy[j] - 3.0 * pc_xxyzz[j] * pb_yy[j]);

                t_xzz_xyyy[j] += fl_s_0_0_6 * (1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyyzz[j] + 0.5 * pc_xxyyy[j] * fl1_fx + pa_x[j] * pc_xyyyzz[j] + 2.0 * pc_xxyyyz[j] * pa_z[j] + pc_xyyyzz[j] * pb_x[j] + 3.0 * pc_xxyyzz[j] * pb_y[j]);

                t_xzz_xyyy[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];

                t_xzz_xyyz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_z[j] + 0.125 * fl3_fx * pb_z[j] + 0.5 * pa_xz[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_yy[j] + 0.25 * pa_x[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xzz[j] * pb_xz[j] * fl1_fx + pa_xz[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xyyz[j] + pa_xzz[j] * pb_xyyz[j]);

                t_xzz_xyyz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - pa_xz[j] * fl2_fx * pb_x[j] - 0.5 * pa_xz[j] * fl2_fx * pc_x[j] - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 0.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - fl2_fx * pa_z[j] * pb_yy[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_x[j] * fl2_fx * pb_xz[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pb_yz[j] * pc_y[j] - 0.5 * fl2_fx * pb_yyz[j] - 0.5 * pa_xzz[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_xzz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] - pa_xz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] - pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] - pa_xz[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyy[j] - 0.5 * pc_x[j] * pa_zz[j] * pb_xz[j] * fl1_fx - pc_x[j] * pa_z[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] - fl1_fx * pa_zz[j] * pb_yz[j] * pc_y[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yyz[j] - pa_x[j] * fl1_fx * pb_xyz[j] * pc_y[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xyyz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xyyz[j] - pa_xzz[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_xzz[j] * pb_xyz[j] * pc_y[j] - pa_xzz[j] * pc_x[j] * pb_yyz[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xyyz[j] - pc_x[j] * pa_zz[j] * pb_xyyz[j]);

                t_xzz_xyyz[j] += fl_s_0_0_2 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.375 * fl3_fx * pb_z[j] + pa_xz[j] * fl2_fx * pc_x[j] + 0.5 * pa_xz[j] * fl2_fx * pb_x[j] + 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] + 0.75 * pa_x[j] * pc_xz[j] * fl2_fx + pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] + 0.5 * pc_xx[j] * pa_z[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pa_zz[j] * pc_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_yy[j] + 2.0 * fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.25 * pa_x[j] * fl2_fx * pb_xz[j] + 0.5 * pc_x[j] * fl2_fx * pb_xz[j] + 0.25 * pc_xx[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_z[j] + fl2_fx * pb_yz[j] * pc_y[j] + 0.25 * fl2_fx * pb_yyz[j] + 0.5 * pa_xzz[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_xzz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_x[j] * fl1_fx * pb_z[j] + pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx + pa_xz[j] * pc_z[j] * pb_xz[j] * fl1_fx + pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] + pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 2.0 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_y[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xy[j] * pc_y[j] + pa_xz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 0.5 * pa_x[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 0.5 * pc_x[j] * pa_zz[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] + pc_xz[j] * pa_z[j] * pb_xz[j] * fl1_fx + 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] + pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] + pc_x[j] * pa_z[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] + fl1_fx * pa_zz[j] * pb_y[j] * pc_yz[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yy[j] * pb_z[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] + 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] + fl1_fx * pa_zz[j] * pb_yz[j] * pc_y[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_yy[j] + pa_x[j] * fl1_fx * pc_xy[j] * pb_yz[j] + pa_x[j] * fl1_fx * pb_xyz[j] * pc_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yyz[j] + pc_xy[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xyyz[j] + 2.0 * pa_xzz[j] * pb_xy[j] * pc_yz[j] + pa_xzz[j] * pb_xz[j] * pc_yy[j] + pa_xzz[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_xzz[j] * pc_xy[j] * pb_yz[j] + 2.0 * pa_xz[j] * pc_zz[j] * pb_xyy[j] + 4.0 * pa_xz[j] * pc_yz[j] * pb_xyz[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_yyz[j] + pa_x[j] * pc_zz[j] * pb_xyyz[j] + pc_xz[j] * pa_zz[j] * pb_xyy[j] + 2.0 * pc_xy[j] * pa_zz[j] * pb_xyz[j] + pc_xx[j] * pa_zz[j] * pb_yyz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xyyz[j]);

                t_xzz_xyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.25 * fl3_fx * pa_z[j] - 0.125 * fl3_fx * pb_z[j] - 0.5 * pa_xz[j] * fl2_fx * pc_x[j] - 1.5 * pa_x[j] * pc_xz[j] * fl2_fx - 0.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - pc_xx[j] * pa_z[j] * fl2_fx - 0.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 1.5 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxz[j] * fl2_fx - fl2_fx * pa_z[j] * pc_zz[j] - fl2_fx * pa_z[j] * pc_yy[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pc_yyz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_y[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_y[j] * pc_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.5 * pc_xx[j] * fl2_fx * pb_z[j] - 0.25 * pc_x[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pc_yy[j] * pb_z[j] - 0.5 * fl2_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_xzz[j] * pc_xz[j] * fl1_fx - pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx - pa_xz[j] * pc_xzz[j] * fl1_fx - pa_xz[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_xz[j] * fl1_fx * pc_xyy[j] - pa_xz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 2.0 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_y[j] - 0.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_x[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxz[j] * pa_zz[j] * fl1_fx - 0.5 * pc_xx[j] * pa_zz[j] * fl1_fx * pb_z[j] - pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_xz[j] * pa_z[j] * pb_xz[j] * fl1_fx - pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] - pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] - pc_xx[j] * pa_z[j] * fl1_fx * pb_yy[j] - 0.5 * pc_xzz[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pa_zz[j] * pc_yyz[j] - 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_y[j] - fl1_fx * pa_z[j] * pc_yyz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - fl1_fx * pc_yzz[j] * pb_yz[j] - fl1_fx * pa_zz[j] * pb_y[j] * pc_yz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_yy[j] * pb_z[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] - 2.0 * fl1_fx * pa_z[j] * pc_yz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xyy[j] * pb_z[j] - 0.5 * pa_x[j] * fl1_fx * pb_xz[j] * pc_yy[j] - pa_x[j] * fl1_fx * pc_xy[j] * pb_yz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_xz[j] - pc_xxy[j] * fl1_fx * pb_yz[j] - pc_xy[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yyz[j] - pa_xzz[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_xzz[j] * pc_xyz[j] * pb_y[j] - pa_xzz[j] * pc_xyy[j] * pb_z[j] - 4.0 * pa_xz[j] * pc_yzz[j] * pb_xy[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_xz[j] - 2.0 * pa_xz[j] * pc_xzz[j] * pb_yy[j] - 4.0 * pa_xz[j] * pc_xyz[j] * pb_yz[j] - pa_x[j] * pc_zzz[j] * pb_xyy[j] - 2.0 * pa_x[j] * pc_yzz[j] * pb_xyz[j] - pa_x[j] * pc_xzz[j] * pb_yyz[j] - 2.0 * pc_xyz[j] * pa_zz[j] * pb_xy[j] - pc_xyy[j] * pa_zz[j] * pb_xz[j] - pc_xxz[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xxy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_xzz[j] * pa_z[j] * pb_xyy[j] - 4.0 * pc_xyz[j] * pa_z[j] * pb_xyz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_yyz[j] - pc_xzz[j] * pb_xyyz[j]);

                t_xzz_xyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_x[j] * pc_xz[j] * fl2_fx + 0.5 * pc_xx[j] * pa_z[j] * fl2_fx + 1.5 * pc_xxz[j] * fl2_fx + 0.75 * pc_xz[j] * fl2_fx * pb_x[j] + 0.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pc_yyz[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pa_z[j] * pc_yy[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_yz[j] * pb_y[j] + 0.25 * pc_xx[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pc_yy[j] * pb_z[j] + pa_xz[j] * pc_xzz[j] * fl1_fx + pa_xz[j] * fl1_fx * pc_xyy[j] + 0.5 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_x[j] * pc_xzzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_xxz[j] * pa_zz[j] * fl1_fx + pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx + pc_xxzz[j] * pa_z[j] * fl1_fx + pc_xxz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxyy[j] * pa_z[j] * fl1_fx + pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_xzzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xzz[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xxzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_z[j] * pc_yyzz[j] + fl1_fx * pc_yzzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_yyzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yyz[j] + 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_y[j] + fl1_fx * pa_z[j] * pc_yyz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + fl1_fx * pc_yzz[j] * pb_yz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xyy[j] * pb_z[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_xz[j] + pc_xxy[j] * fl1_fx * pb_yz[j] + pa_xzz[j] * pc_xyyz[j] + 2.0 * pa_xz[j] * pc_yyzz[j] * pb_x[j] + 4.0 * pa_xz[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_x[j] * pc_yzzz[j] * pb_xy[j] + pa_x[j] * pc_yyzz[j] * pb_xz[j] + pa_x[j] * pc_xzzz[j] * pb_yy[j] + 2.0 * pa_x[j] * pc_xyzz[j] * pb_yz[j] + pc_xyyz[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_y[j] + pc_xxyy[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_xyzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xxyz[j] * pa_z[j] * pb_yz[j] + pc_xzzz[j] * pb_xyy[j] + 2.0 * pc_xyzz[j] * pb_xyz[j] + pc_xxzz[j] * pb_yyz[j]);

                t_xzz_xyyz[j] += fl_s_0_0_5 * (-0.75 * pc_xxz[j] * fl2_fx - 0.25 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pc_yyz[j] - 0.5 * pa_x[j] * pc_xzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_xyyz[j] * fl1_fx - pc_xxzz[j] * pa_z[j] * fl1_fx - pc_xxyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_xzzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_xxzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_yyzzz[j] - fl1_fx * pa_z[j] * pc_yyzz[j] - fl1_fx * pc_yzzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_yyzz[j] * pb_z[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_xyyzz[j] - pa_x[j] * pc_yyzzz[j] * pb_x[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_y[j] - pa_x[j] * pc_xyyzz[j] * pb_z[j] - pc_xxyyz[j] * pa_zz[j] - 2.0 * pc_xyyzz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_xyzzz[j] * pb_xy[j] - pc_xyyzz[j] * pb_xz[j] - pc_xxzzz[j] * pb_yy[j] - 2.0 * pc_xxyzz[j] * pb_yz[j]);

                t_xzz_xyyz[j] += fl_s_0_0_6 * (0.5 * pc_xxzzz[j] * fl1_fx + 1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_yyzzz[j] + pa_x[j] * pc_xyyzzz[j] + 2.0 * pc_xxyyzz[j] * pa_z[j] + pc_xyyzzz[j] * pb_x[j] + 2.0 * pc_xxyzzz[j] * pb_y[j] + pc_xxyyzz[j] * pb_z[j]);

                t_xzz_xyyz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];

                t_xzz_xyzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xzz[j] * pb_xy[j] * fl1_fx + 2.0 * pa_xz[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xyzz[j] + pa_xzz[j] * pb_xyzz[j]);

                t_xzz_xyzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_xy[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pa_zz[j] * pb_y[j] - 0.25 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 2.0 * fl2_fx * pa_z[j] * pb_yz[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.25 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * fl2_fx * pb_yzz[j] - 0.5 * pa_xzz[j] * pb_xy[j] * fl1_fx - 0.5 * pa_xzz[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 2.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 2.0 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 2.0 * pa_xz[j] * fl1_fx * pb_xyz[j] - 3.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_x[j] * pa_zz[j] * pb_xy[j] * fl1_fx - 2.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_xyz[j] - fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] - 0.5 * fl1_fx * pa_zz[j] * pc_y[j] * pb_zz[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_yzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_y[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xyzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xyzz[j] - 2.0 * pa_xzz[j] * pb_xyz[j] * pc_z[j] - pa_xzz[j] * pb_xzz[j] * pc_y[j] - pa_xzz[j] * pc_x[j] * pb_yzz[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xyzz[j] - pc_x[j] * pa_zz[j] * pb_xyzz[j]);

                t_xzz_xyzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 1.5 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_xy[j] + 0.5 * fl2_fx * pa_zz[j] * pc_y[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 2.0 * fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * fl2_fx * pc_z[j] * pb_yz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_y[j] + fl2_fx * pa_z[j] * pb_yz[j] + 0.5 * fl2_fx * pc_y[j] * pb_zz[j] + 0.25 * fl2_fx * pb_yzz[j] + 0.5 * pa_xzz[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 2.0 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_z[j] + 2.0 * pa_xz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 2.0 * pa_xz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_x[j] * pa_zz[j] * pb_xy[j] * fl1_fx + 0.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xz[j] * pa_z[j] * pb_xy[j] * fl1_fx + 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] + 2.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] + fl1_fx * pa_zz[j] * pc_yz[j] * pb_z[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] + fl1_fx * pa_z[j] * pc_yz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yzz[j] + fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_y[j] * pb_zz[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pc_xy[j] * pb_zz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xzz[j] * pc_y[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_yzz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xyzz[j] + pa_xzz[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_xzz[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_xzz[j] * pc_xz[j] * pb_yz[j] + pa_xzz[j] * pc_xy[j] * pb_zz[j] + 4.0 * pa_xz[j] * pc_zz[j] * pb_xyz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_xzz[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_yzz[j] + pa_x[j] * pc_zz[j] * pb_xyzz[j] + 2.0 * pc_xz[j] * pa_zz[j] * pb_xyz[j] + pc_xy[j] * pa_zz[j] * pb_xzz[j] + pc_xx[j] * pa_zz[j] * pb_yzz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xyzz[j]);

                t_xzz_xyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pc_xy[j] - 0.75 * pa_x[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_x[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.75 * pc_xxy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xx[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_xy[j] - 3.0 * fl2_fx * pa_z[j] * pc_yz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_y[j] - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * fl2_fx * pc_yz[j] * pb_z[j] - 0.25 * fl2_fx * pa_zz[j] * pc_y[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - fl2_fx * pa_z[j] * pc_y[j] * pb_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_yz[j] - 0.25 * fl2_fx * pc_y[j] * pb_zz[j] - 0.5 * pa_xzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx - 2.0 * pa_xz[j] * fl1_fx * pc_xy[j] * pb_z[j] - 3.0 * pa_x[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 3.0 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 3.0 * pa_x[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xx[j] * pa_zz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_xz[j] * pa_z[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 2.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xzz[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_yzz[j] - fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] - 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] - fl1_fx * pc_zzz[j] * pb_yz[j] - 0.5 * fl1_fx * pc_yzz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] - fl1_fx * pa_zz[j] * pc_yz[j] * pb_z[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] - fl1_fx * pa_z[j] * pc_yz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_xy[j] * pb_zz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_yzz[j] - pa_xzz[j] * pb_x[j] * pc_yzz[j] - pa_xzz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_xzz[j] * pc_xyz[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_zzz[j] * pb_xy[j] - 4.0 * pa_xz[j] * pc_yzz[j] * pb_xz[j] - 4.0 * pa_xz[j] * pc_xzz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_zzz[j] * pb_xyz[j] - pa_x[j] * pc_yzz[j] * pb_xzz[j] - pa_x[j] * pc_xzz[j] * pb_yzz[j] - pc_xzz[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_xyz[j] * pa_zz[j] * pb_xz[j] - 2.0 * pc_xxz[j] * pa_zz[j] * pb_yz[j] - pc_xxy[j] * pa_zz[j] * pb_zz[j] - 4.0 * pc_xzz[j] * pa_z[j] * pb_xyz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_xzz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_yzz[j] - pc_xzz[j] * pb_xyzz[j]);

                t_xzz_xyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 0.75 * pa_x[j] * fl2_fx * pc_xy[j] + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xx[j] * fl2_fx * pb_y[j] + 3.0 * fl2_fx * pc_yzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_yz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * fl2_fx * pc_yz[j] * pb_z[j] + 3.0 * pa_xz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_x[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_x[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_x[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xzz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxzz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xxz[j] * fl1_fx * pb_yz[j] + fl1_fx * pa_z[j] * pc_yzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] + fl1_fx * pc_yzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_yzz[j] + fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_yzz[j] * pb_z[j] + fl1_fx * pc_zzz[j] * pb_yz[j] + 0.5 * fl1_fx * pc_yzz[j] * pb_zz[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + pa_xzz[j] * pc_xyzz[j] + 2.0 * pa_xz[j] * pc_yzzz[j] * pb_x[j] + 2.0 * pa_xz[j] * pc_xzzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_xyzz[j] * pb_z[j] + pa_x[j] * pc_zzzz[j] * pb_xy[j] + 2.0 * pa_x[j] * pc_yzzz[j] * pb_xz[j] + 2.0 * pa_x[j] * pc_xzzz[j] * pb_yz[j] + pa_x[j] * pc_xyzz[j] * pb_zz[j] + pc_xyzz[j] * pa_zz[j] * pb_x[j] + pc_xxzz[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xzzz[j] * pa_z[j] * pb_xy[j] + 4.0 * pc_xyzz[j] * pa_z[j] * pb_xz[j] + 4.0 * pc_xxzz[j] * pa_z[j] * pb_yz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xzzz[j] * pb_xyz[j] + pc_xyzz[j] * pb_xzz[j] + pc_xxzz[j] * pb_yzz[j]);

                t_xzz_xyzz[j] += fl_s_0_0_5 * (-0.75 * pc_xxy[j] * fl2_fx - 1.5 * fl2_fx * pc_yzz[j] - 3.0 * pa_x[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_yzzzz[j] - fl1_fx * pa_z[j] * pc_yzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] - fl1_fx * pc_yzzz[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_xyzzz[j] - pa_x[j] * pc_yzzzz[j] * pb_x[j] - pa_x[j] * pc_xzzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_xyzzz[j] * pb_z[j] - pc_xxyzz[j] * pa_zz[j] - 2.0 * pc_xyzzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxzzz[j] * pa_z[j] * pb_y[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - pc_xzzzz[j] * pb_xy[j] - 2.0 * pc_xyzzz[j] * pb_xz[j] - 2.0 * pc_xxzzz[j] * pb_yz[j] - pc_xxyzz[j] * pb_zz[j]);

                t_xzz_xyzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_yzzzz[j] + pa_x[j] * pc_xyzzzz[j] + 2.0 * pc_xxyzzz[j] * pa_z[j] + pc_xyzzzz[j] * pb_x[j] + pc_xxzzzz[j] * pb_y[j] + 2.0 * pc_xxyzzz[j] * pb_z[j]);

                t_xzz_xyzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_84_87(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (84,87)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxzzzzz = pcDistances.data(119 * idx + 103);

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzz_xzzz = primBuffer.data(150 * idx + 84);

            auto t_xzz_yyyy = primBuffer.data(150 * idx + 85);

            auto t_xzz_yyyz = primBuffer.data(150 * idx + 86);

            // Batch of Integrals (84,87)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_z, pa_zz, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, \
                                     pb_yyy, pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xx, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xxzzzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, \
                                     pc_xyyyyz, pc_xyyyyzz, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_xzz_xzzz, \
                                     t_xzz_yyyy, t_xzz_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzz_xzzz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_xz[j] * fl2_fx * pb_x[j] + 2.25 * pa_x[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_xzz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_xz[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_xzzz[j] + pa_xzz[j] * pb_xzzz[j]);

                t_xzz_xzzz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 3.375 * fl3_fx * pb_z[j] - 3.0 * pa_xz[j] * fl2_fx * pb_x[j] - 1.5 * pa_xz[j] * fl2_fx * pc_x[j] - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_xz[j] - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_zz[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * fl2_fx * pb_zzz[j] - 1.5 * pa_xzz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_xzz[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_x[j] * pb_z[j] * fl1_fx - 9.0 * pa_xz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 3.0 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 3.0 * pa_xz[j] * fl1_fx * pb_xzz[j] - 4.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_x[j] * pa_zz[j] * pb_xz[j] * fl1_fx - 3.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_xzz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_zzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_xzzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_xzzz[j] - 3.0 * pa_xzz[j] * pb_xzz[j] * pc_z[j] - pa_xzz[j] * pc_x[j] * pb_zzz[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_xzzz[j] - pc_x[j] * pa_zz[j] * pb_xzzz[j]);

                t_xzz_xzzz[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 3.0 * pa_xz[j] * fl2_fx * pc_x[j] + 1.5 * pa_xz[j] * fl2_fx * pb_x[j] + 7.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] + 3.75 * pa_x[j] * pc_xz[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_xz[j] + 3.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xx[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * fl2_fx * pb_xz[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_xzz[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_xz[j] * fl1_fx + 9.0 * pa_xz[j] * pc_z[j] * pb_xz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 9.0 * pa_xz[j] * pc_xz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 9.0 * pa_x[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_x[j] * pa_zz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xx[j] * pa_zz[j] * pb_z[j] * fl1_fx + 9.0 * pc_xz[j] * pa_z[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] + 3.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_xzz[j] + 4.5 * pc_xz[j] * fl1_fx * pb_xzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] + 0.5 * pa_x[j] * fl1_fx * pc_x[j] * pb_zzz[j] + 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_xzzz[j] + 3.0 * pa_xzz[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_xzz[j] * pc_xz[j] * pb_zz[j] + 6.0 * pa_xz[j] * pc_zz[j] * pb_xzz[j] + 2.0 * pa_xz[j] * pc_xz[j] * pb_zzz[j] + pa_x[j] * pc_zz[j] * pb_xzzz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_xzz[j] + pc_xx[j] * pa_zz[j] * pb_zzz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_xzzz[j]);

                t_xzz_xzzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pb_z[j] - 1.5 * pa_xz[j] * fl2_fx * pc_x[j] - 7.5 * pa_x[j] * pc_xz[j] * fl2_fx - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pa_x[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pc_xx[j] * pa_z[j] * fl2_fx - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_x[j] - 7.5 * pc_xz[j] * fl2_fx * pb_x[j] - 3.75 * pc_xxz[j] * fl2_fx - 4.5 * pc_xx[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_xz[j] - 6.0 * fl2_fx * pa_z[j] * pc_zz[j] - 9.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.5 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_xzz[j] * pc_xz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 9.0 * pa_xz[j] * pc_xz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xz[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_x[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 5.0 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 9.0 * pa_x[j] * pc_xzz[j] * pb_z[j] * fl1_fx - 4.5 * pa_x[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xx[j] * pa_zz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xxz[j] * pa_zz[j] * fl1_fx - 9.0 * pc_xz[j] * pa_z[j] * pb_xz[j] * fl1_fx - 6.0 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxz[j] * pa_z[j] * pb_z[j] * fl1_fx - 3.0 * pc_xx[j] * pa_z[j] * fl1_fx * pb_zz[j] - 9.0 * pc_xzz[j] * pb_xz[j] * fl1_fx - 4.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xz[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] - 0.5 * pc_xx[j] * fl1_fx * pb_zzz[j] - pa_xzz[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_xzz[j] * pc_xzz[j] * pb_z[j] - 6.0 * pa_xz[j] * pc_zzz[j] * pb_xz[j] - 6.0 * pa_xz[j] * pc_xzz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_zzz[j] * pb_xzz[j] - pa_x[j] * pc_xzz[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_xxz[j] * pa_zz[j] * pb_zz[j] - 6.0 * pc_xzz[j] * pa_z[j] * pb_xzz[j] - 2.0 * pc_xxz[j] * pa_z[j] * pb_zzz[j] - pc_xzz[j] * pb_xzzz[j]);

                t_xzz_xzzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 3.75 * pa_x[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xx[j] * pa_z[j] * fl2_fx + 7.5 * pc_xxz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xx[j] * fl2_fx * pb_z[j] + 5.0 * fl2_fx * pc_zzz[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 6.0 * pa_xz[j] * pc_xzz[j] * fl1_fx + 5.0 * pa_x[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 9.0 * pa_x[j] * pc_xzz[j] * pb_z[j] * fl1_fx + 5.0 * pa_x[j] * pc_xzzz[j] * fl1_fx + 1.5 * pc_xxz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxz[j] * pa_z[j] * pb_z[j] * fl1_fx + 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xzz[j] * pb_xz[j] * fl1_fx + 5.0 * pc_xzzz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xxzz[j] * pb_z[j] * fl1_fx + 4.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_z[j] * pc_zzzz[j] + 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] + pa_xzz[j] * pc_xzzz[j] + 2.0 * pa_xz[j] * pc_zzzz[j] * pb_x[j] + 6.0 * pa_xz[j] * pc_xzzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_zzzz[j] * pb_xz[j] + 3.0 * pa_x[j] * pc_xzzz[j] * pb_zz[j] + pc_xzzz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xxzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xzzz[j] * pa_z[j] * pb_xz[j] + 6.0 * pc_xxzz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_xzzz[j] * pb_xzz[j] + pc_xxzz[j] * pb_zzz[j]);

                t_xzz_xzzz[j] += fl_s_0_0_5 * (-3.75 * pc_xxz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 5.0 * pa_x[j] * pc_xzzz[j] * fl1_fx - 6.0 * pc_xxzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_xzzz[j] * pb_x[j] * fl1_fx - 9.0 * pc_xxzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_xxzzz[j] * fl1_fx - 0.5 * fl1_fx * pc_zzzzz[j] - fl1_fx * pa_z[j] * pc_zzzz[j] - 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_xzzzz[j] - pa_x[j] * pc_zzzzz[j] * pb_x[j] - 3.0 * pa_x[j] * pc_xzzzz[j] * pb_z[j] - pc_xxzzz[j] * pa_zz[j] - 2.0 * pc_xzzzz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xzzzz[j] * pb_xz[j] - 3.0 * pc_xxzzz[j] * pb_zz[j]);

                t_xzz_xzzz[j] += fl_s_0_0_6 * (5.0 * pc_xxzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + pa_x[j] * pc_xzzzzz[j] + 2.0 * pc_xxzzzz[j] * pa_z[j] + pc_xzzzzz[j] * pb_x[j] + 3.0 * pc_xxzzzz[j] * pb_z[j]);

                t_xzz_xzzz[j] += -fl_s_0_0_7 * pc_xxzzzzz[j];

                t_xzz_yyyy[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.75 * pa_xzz[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pb_yy[j] + 3.0 * pa_xzz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_x[j] * fl1_fx * pb_yyyy[j] + pa_xzz[j] * pb_yyyy[j]);

                t_xzz_yyyy[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 1.5 * pa_xzz[j] * fl2_fx - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xzz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_xzz[j] * pb_y[j] * pc_y[j] * fl1_fx - 6.0 * pa_xz[j] * pc_z[j] * pb_yy[j] * fl1_fx - 3.0 * pc_x[j] * pa_zz[j] * pb_yy[j] * fl1_fx - 2.0 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_y[j] - 0.5 * pa_x[j] * fl1_fx * pb_yyyy[j] - 0.5 * pc_x[j] * fl1_fx * pb_yyyy[j] - 4.0 * pa_xzz[j] * pb_yyy[j] * pc_y[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_yyyy[j] - pc_x[j] * pa_zz[j] * pb_yyyy[j]);

                t_xzz_yyyy[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.75 * pa_xzz[j] * fl2_fx + 3.0 * pa_xz[j] * pc_z[j] * fl2_fx + 0.75 * pa_x[j] * pc_zz[j] * fl2_fx + 1.5 * pc_x[j] * pa_zz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_z[j] * fl2_fx + 6.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pa_x[j] * fl2_fx * pb_yy[j] + 3.0 * pc_x[j] * fl2_fx * pb_yy[j] + 3.0 * pc_xy[j] * fl2_fx * pb_y[j] + 6.0 * pa_xzz[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_yy[j] * fl1_fx + 6.0 * pa_xz[j] * pc_z[j] * pb_yy[j] * fl1_fx + 12.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_zz[j] * pb_yy[j] * fl1_fx + 3.0 * pc_x[j] * pa_zz[j] * pb_yy[j] * fl1_fx + 6.0 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 6.0 * pc_xz[j] * pa_z[j] * pb_yy[j] * fl1_fx + 3.0 * pa_x[j] * fl1_fx * pb_yy[j] * pc_yy[j] + 2.0 * pa_x[j] * fl1_fx * pb_yyy[j] * pc_y[j] + 2.0 * pc_xy[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_x[j] * fl1_fx * pb_yyyy[j] + 6.0 * pa_xzz[j] * pb_yy[j] * pc_yy[j] + 8.0 * pa_xz[j] * pc_yz[j] * pb_yyy[j] + pa_x[j] * pc_zz[j] * pb_yyyy[j] + 4.0 * pc_xy[j] * pa_zz[j] * pb_yyy[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_yyyy[j]);

                t_xzz_yyyy[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 1.5 * pa_x[j] * pc_zz[j] * fl2_fx - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 3.0 * pc_xz[j] * pa_z[j] * fl2_fx - 0.75 * pc_xzz[j] * fl2_fx - 3.0 * pa_x[j] * fl2_fx * pc_yy[j] - 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 6.0 * pc_xy[j] * fl2_fx * pb_y[j] - 1.5 * pc_xyy[j] * fl2_fx - 1.5 * pc_x[j] * fl2_fx * pb_yy[j] - 3.0 * pa_xzz[j] * pc_yy[j] * fl1_fx - 12.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 6.0 * pa_xz[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_x[j] * pc_zz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 6.0 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx - 6.0 * pc_xz[j] * pa_z[j] * pb_yy[j] * fl1_fx - 12.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 3.0 * pc_xzz[j] * pb_yy[j] * fl1_fx - 2.0 * pa_x[j] * fl1_fx * pb_y[j] * pc_yyy[j] - 3.0 * pa_x[j] * fl1_fx * pb_yy[j] * pc_yy[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_yy[j] - 2.0 * pc_xy[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_xzz[j] * pb_y[j] * pc_yyy[j] - 12.0 * pa_xz[j] * pc_yyz[j] * pb_yy[j] - 4.0 * pa_x[j] * pc_yzz[j] * pb_yyy[j] - 6.0 * pc_xyy[j] * pa_zz[j] * pb_yy[j] - 8.0 * pc_xyz[j] * pa_z[j] * pb_yyy[j] - pc_xzz[j] * pb_yyyy[j]);

                t_xzz_yyyy[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 0.75 * pa_x[j] * pc_zz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_z[j] * fl2_fx + 1.5 * pc_xzz[j] * fl2_fx + 1.5 * pa_x[j] * fl2_fx * pc_yy[j] + 3.0 * pc_xyy[j] * fl2_fx + 3.0 * pc_xy[j] * fl2_fx * pb_y[j] + 6.0 * pa_xz[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx + 12.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xzz[j] * pb_yy[j] * fl1_fx + 6.0 * pc_xyzz[j] * pb_y[j] * fl1_fx + 0.5 * pa_x[j] * fl1_fx * pc_yyyy[j] + 2.0 * pa_x[j] * fl1_fx * pb_y[j] * pc_yyy[j] + 2.0 * pc_xyyy[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_yy[j] + pa_xzz[j] * pc_yyyy[j] + 8.0 * pa_xz[j] * pc_yyyz[j] * pb_y[j] + 6.0 * pa_x[j] * pc_yyzz[j] * pb_yy[j] + 4.0 * pc_xyyy[j] * pa_zz[j] * pb_y[j] + 12.0 * pc_xyyz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xyzz[j] * pb_yyy[j]);

                t_xzz_yyyy[j] += fl_s_0_0_5 * (-0.75 * pc_xzz[j] * fl2_fx - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 6.0 * pc_xyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * pa_x[j] * fl1_fx * pc_yyyy[j] - 0.5 * pc_xyyyy[j] * fl1_fx - 2.0 * pc_xyyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_xz[j] * pc_yyyyz[j] - 4.0 * pa_x[j] * pc_yyyzz[j] * pb_y[j] - pc_xyyyy[j] * pa_zz[j] - 8.0 * pc_xyyyz[j] * pa_z[j] * pb_y[j] - 6.0 * pc_xyyzz[j] * pb_yy[j]);

                t_xzz_yyyy[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xyyyy[j] * fl1_fx + pa_x[j] * pc_yyyyzz[j] + 2.0 * pc_xyyyyz[j] * pa_z[j] + 4.0 * pc_xyyyzz[j] * pb_y[j]);

                t_xzz_yyyy[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];

                t_xzz_yyyz[j] = fl_s_0_0_0 * (1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xzz[j] * pb_yz[j] * fl1_fx + pa_xz[j] * fl1_fx * pb_yyy[j] + 0.5 * pa_x[j] * fl1_fx * pb_yyyz[j] + pa_xzz[j] * pb_yyyz[j]);

                t_xzz_yyyz[j] += fl_s_0_0_1 * (-3.0 * pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_yz[j] - 0.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xzz[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_xzz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_z[j] - 3.0 * pa_xz[j] * pc_z[j] * pb_yz[j] * fl1_fx - 3.0 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] - pa_xz[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyy[j] - 1.5 * pc_x[j] * pa_zz[j] * pb_yz[j] * fl1_fx - pc_x[j] * pa_z[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_x[j] * fl1_fx * pb_yyz[j] * pc_y[j] - 0.5 * pa_x[j] * fl1_fx * pb_yyyz[j] - 0.5 * pc_x[j] * fl1_fx * pb_yyyz[j] - pa_xzz[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_xzz[j] * pb_yyz[j] * pc_y[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_yyyz[j] - pc_x[j] * pa_zz[j] * pb_yyyz[j]);

                t_xzz_yyyz[j] += fl_s_0_0_2 * (3.0 * pa_xz[j] * fl2_fx * pc_y[j] + 1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 4.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 3.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pc_x[j] * fl2_fx * pb_yz[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_xzz[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_y[j] * fl1_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 3.0 * pa_xz[j] * pc_z[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 3.0 * pa_xz[j] * fl1_fx * pb_yy[j] * pc_y[j] + 1.5 * pa_x[j] * pc_zz[j] * pb_yz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 1.5 * pc_x[j] * pa_zz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xz[j] * pa_z[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] + pc_x[j] * pa_z[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 1.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_yy[j] + 1.5 * pa_x[j] * fl1_fx * pb_yyz[j] * pc_y[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_x[j] * fl1_fx * pb_yyyz[j] + 3.0 * pa_xzz[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_xzz[j] * pb_yz[j] * pc_yy[j] + 2.0 * pa_xz[j] * pc_zz[j] * pb_yyy[j] + 6.0 * pa_xz[j] * pc_yz[j] * pb_yyz[j] + pa_x[j] * pc_zz[j] * pb_yyyz[j] + pc_xz[j] * pa_zz[j] * pb_yyy[j] + 3.0 * pc_xy[j] * pa_zz[j] * pb_yyz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_yyyz[j]);

                t_xzz_yyyz[j] += fl_s_0_0_3 * (-1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 4.5 * pa_x[j] * pc_yz[j] * fl2_fx - 2.25 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 0.75 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_xz[j] * fl1_fx * pc_yyy[j] - 3.0 * pa_xz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 1.5 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_x[j] * pc_zz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 4.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 3.0 * pc_xz[j] * pa_z[j] * pb_yz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xzz[j] * pb_yz[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - 0.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] - 1.5 * pa_x[j] * fl1_fx * pb_yz[j] * pc_yy[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_xzz[j] * pb_y[j] * pc_yyz[j] - pa_xzz[j] * pc_yyy[j] * pb_z[j] - 6.0 * pa_xz[j] * pc_yzz[j] * pb_yy[j] - 6.0 * pa_xz[j] * pc_yyz[j] * pb_yz[j] - pa_x[j] * pc_zzz[j] * pb_yyy[j] - 3.0 * pa_x[j] * pc_yzz[j] * pb_yyz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_yy[j] - 3.0 * pc_xyy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_xzz[j] * pa_z[j] * pb_yyy[j] - 6.0 * pc_xyz[j] * pa_z[j] * pb_yyz[j] - pc_xzz[j] * pb_yyyz[j]);

                t_xzz_yyyz[j] += fl_s_0_0_4 * (2.25 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pa_xz[j] * pc_yzz[j] * fl1_fx + pa_xz[j] * fl1_fx * pc_yyy[j] + 1.5 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx + 1.5 * pa_x[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xyyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_xzzz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xzz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + 0.5 * pa_x[j] * fl1_fx * pc_yyy[j] * pb_z[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yz[j] + pa_xzz[j] * pc_yyyz[j] + 6.0 * pa_xz[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_xz[j] * pc_yyyz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_yzzz[j] * pb_yy[j] + 3.0 * pa_x[j] * pc_yyzz[j] * pb_yz[j] + 3.0 * pc_xyyz[j] * pa_zz[j] * pb_y[j] + pc_xyyy[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_yy[j] + 6.0 * pc_xyyz[j] * pa_z[j] * pb_yz[j] + pc_xzzz[j] * pb_yyy[j] + 3.0 * pc_xyzz[j] * pb_yyz[j]);

                t_xzz_yyyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_x[j] * pc_yzzz[j] * fl1_fx - 1.5 * pa_x[j] * pc_yyyz[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_xzzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_yyyzz[j] - 3.0 * pa_x[j] * pc_yyzzz[j] * pb_y[j] - pa_x[j] * pc_yyyzz[j] * pb_z[j] - pc_xyyyz[j] * pa_zz[j] - 6.0 * pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pb_yy[j] - 3.0 * pc_xyyzz[j] * pb_yz[j]);

                t_xzz_yyyz[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + pa_x[j] * pc_yyyzzz[j] + 2.0 * pc_xyyyzz[j] * pa_z[j] + 3.0 * pc_xyyzzz[j] * pb_y[j] + pc_xyyyzz[j] * pb_z[j]);

                t_xzz_yyyz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_87_90(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (87,90)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_x = paDistances.data(19 * idx);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_xz = paDistances.data(19 * idx + 5);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_xzz = paDistances.data(19 * idx + 14);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            auto pc_xzzzzzz = pcDistances.data(119 * idx + 110);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_xzz_yyzz = primBuffer.data(150 * idx + 87);

            auto t_xzz_yzzz = primBuffer.data(150 * idx + 88);

            auto t_xzz_zzzz = primBuffer.data(150 * idx + 89);

            // Batch of Integrals (87,90)

            #pragma omp simd aligned(fx, pa_x, pa_xz, pa_xzz, pa_z, pa_zz, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, \
                                     pb_yzzz, pb_z, pb_zz, pb_zzz, pb_zzzz, pc_x, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyyzzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, pc_xz, \
                                     pc_xzz, pc_xzzz, pc_xzzzz, pc_xzzzzz, pc_xzzzzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, \
                                     pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, pc_zzzzz, pc_zzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_xzz_yyzz, t_xzz_yzzz, t_xzz_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_xzz_yyzz[j] = fl_s_0_0_0 * (0.375 * pa_x[j] * fl3_fx + 0.25 * pa_xzz[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pa_xzz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_xzz[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xz[j] * fl1_fx * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pb_yyzz[j] + pa_xzz[j] * pb_yyzz[j]);

                t_xzz_yyzz[j] += fl_s_0_0_1 * (-1.125 * pa_x[j] * fl3_fx - 0.375 * pc_x[j] * fl3_fx - 0.5 * pa_xzz[j] * fl2_fx - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 2.0 * pa_xz[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_x[j] * fl2_fx * pb_yy[j] - 0.25 * pc_x[j] * pa_zz[j] * fl2_fx - pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.5 * pa_x[j] * fl2_fx * pb_zz[j] - 0.25 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xzz[j] * pb_yy[j] * fl1_fx - pa_xzz[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_xzz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_xz[j] * pc_z[j] * pb_yy[j] * fl1_fx - pa_xz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 4.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] - 2.0 * pa_xz[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyz[j] - 0.5 * pc_x[j] * pa_zz[j] * pb_yy[j] * fl1_fx - 0.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_yyz[j] - pa_x[j] * fl1_fx * pb_yzz[j] * pc_y[j] - 0.5 * pa_x[j] * fl1_fx * pb_yyzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_yyzz[j] - 2.0 * pa_xzz[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_xzz[j] * pb_yzz[j] * pc_y[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_yyzz[j] - pc_x[j] * pa_zz[j] * pb_yyzz[j]);

                t_xzz_yyzz[j] += fl_s_0_0_2 * (1.125 * pa_x[j] * fl3_fx + 1.125 * pc_x[j] * fl3_fx + 0.25 * pa_xzz[j] * fl2_fx + 3.0 * pa_xz[j] * pc_z[j] * fl2_fx + pa_xz[j] * fl2_fx * pb_z[j] + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 3.0 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 3.0 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.75 * pa_x[j] * fl2_fx * pb_yy[j] + 0.5 * pc_x[j] * pa_zz[j] * fl2_fx + 1.5 * pc_xz[j] * pa_z[j] * fl2_fx + 2.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_x[j] * fl2_fx * pb_yy[j] + 0.25 * pa_x[j] * fl2_fx * pb_zz[j] + 0.5 * pc_x[j] * fl2_fx * pb_zz[j] + pa_xzz[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_xzz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_xzz[j] * fl1_fx * pc_zz[j] + pa_xzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 3.0 * pa_xz[j] * pc_z[j] * pb_yy[j] * fl1_fx + 6.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 2.0 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] + pa_xz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 2.0 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] + 4.0 * pa_xz[j] * fl1_fx * pb_yz[j] * pc_y[j] + 3.0 * pa_x[j] * pc_zz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_x[j] * pa_zz[j] * pb_yy[j] * fl1_fx + pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx + pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 0.5 * pc_x[j] * pa_zz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xz[j] * pa_z[j] * pb_yy[j] * fl1_fx + pc_xz[j] * pa_z[j] * fl1_fx * pb_zz[j] + 4.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 2.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_xz[j] * fl1_fx * pb_yyz[j] + 0.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] + pa_x[j] * fl1_fx * pb_yzz[j] * pc_y[j] + pc_xy[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_yyzz[j] + pa_xzz[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_xzz[j] * pb_yz[j] * pc_yz[j] + pa_xzz[j] * pc_yy[j] * pb_zz[j] + 4.0 * pa_xz[j] * pc_zz[j] * pb_yyz[j] + 4.0 * pa_xz[j] * pc_yz[j] * pb_yzz[j] + pa_x[j] * pc_zz[j] * pb_yyzz[j] + 2.0 * pc_xz[j] * pa_zz[j] * pb_yyz[j] + 2.0 * pc_xy[j] * pa_zz[j] * pb_yzz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_yyzz[j]);

                t_xzz_yyzz[j] += fl_s_0_0_3 * (-0.375 * pa_x[j] * fl3_fx - 1.125 * pc_x[j] * fl3_fx - 1.5 * pa_xz[j] * pc_z[j] * fl2_fx - 3.0 * pa_x[j] * pc_zz[j] * fl2_fx - 1.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_x[j] * fl2_fx * pc_yy[j] - 1.5 * pa_x[j] * fl2_fx * pb_y[j] * pc_y[j] - 0.25 * pc_x[j] * pa_zz[j] * fl2_fx - 3.0 * pc_xz[j] * pa_z[j] * fl2_fx - pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 1.5 * pc_xzz[j] * fl2_fx - 3.0 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_x[j] * fl2_fx * pb_yy[j] - 0.25 * pc_x[j] * fl2_fx * pb_zz[j] - 0.5 * pa_xzz[j] * pc_yy[j] * fl1_fx - 0.5 * pa_xzz[j] * fl1_fx * pc_zz[j] - 6.0 * pa_xz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx - pa_xz[j] * pc_zzz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * fl1_fx * pc_yy[j] * pb_z[j] - 3.0 * pa_x[j] * pc_zz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx - pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 0.5 * pa_x[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_x[j] * pc_yz[j] * fl1_fx * pb_yz[j] - pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 0.5 * pc_xzz[j] * pa_zz[j] * fl1_fx - pc_xz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xz[j] * pa_z[j] * pb_yy[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 2.0 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] - pc_xz[j] * pa_z[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 4.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xzz[j] * pb_yy[j] * fl1_fx - 0.5 * pc_xzz[j] * fl1_fx * pb_zz[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_yyz[j] - 0.5 * pa_x[j] * fl1_fx * pc_yy[j] * pb_zz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - pc_xy[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_xzz[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_xzz[j] * pc_yyz[j] * pb_z[j] - 2.0 * pa_xz[j] * pc_zzz[j] * pb_yy[j] - 8.0 * pa_xz[j] * pc_yzz[j] * pb_yz[j] - 2.0 * pa_xz[j] * pc_yyz[j] * pb_zz[j] - 2.0 * pa_x[j] * pc_zzz[j] * pb_yyz[j] - 2.0 * pa_x[j] * pc_yzz[j] * pb_yzz[j] - pc_xzz[j] * pa_zz[j] * pb_yy[j] - 4.0 * pc_xyz[j] * pa_zz[j] * pb_yz[j] - pc_xyy[j] * pa_zz[j] * pb_zz[j] - 4.0 * pc_xzz[j] * pa_z[j] * pb_yyz[j] - 4.0 * pc_xyz[j] * pa_z[j] * pb_yzz[j] - pc_xzz[j] * pb_yyzz[j]);

                t_xzz_yyzz[j] += fl_s_0_0_4 * (0.375 * pc_x[j] * fl3_fx + 1.5 * pa_x[j] * pc_zz[j] * fl2_fx + 0.75 * pa_x[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xz[j] * pa_z[j] * fl2_fx + 3.0 * pc_xzz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xyy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * pa_xz[j] * pc_yyz[j] * fl1_fx + pa_xz[j] * pc_zzz[j] * fl1_fx + 6.0 * pa_x[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx + 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx + pa_x[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_x[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 0.5 * pc_xzz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + pc_xzzz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_xzz[j] * pb_yy[j] * fl1_fx + 6.0 * pc_xyzz[j] * pb_y[j] * fl1_fx + pc_xzzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xzz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + pa_xzz[j] * pc_yyzz[j] + 4.0 * pa_xz[j] * pc_yzzz[j] * pb_y[j] + 4.0 * pa_xz[j] * pc_yyzz[j] * pb_z[j] + pa_x[j] * pc_zzzz[j] * pb_yy[j] + 4.0 * pa_x[j] * pc_yzzz[j] * pb_yz[j] + pa_x[j] * pc_yyzz[j] * pb_zz[j] + 2.0 * pc_xyzz[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_xzzz[j] * pa_z[j] * pb_yy[j] + 8.0 * pc_xyzz[j] * pa_z[j] * pb_yz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_xzzz[j] * pb_yyz[j] + 2.0 * pc_xyzz[j] * pb_yzz[j]);

                t_xzz_yyzz[j] += fl_s_0_0_5 * (-1.5 * pc_xzz[j] * fl2_fx - 0.75 * pc_xyy[j] * fl2_fx - 3.0 * pa_x[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_x[j] * pc_zzzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - pc_xzzz[j] * pa_z[j] * fl1_fx - 6.0 * pc_xyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * pc_xzzzz[j] * fl1_fx - pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 2.0 * pa_xz[j] * pc_yyzzz[j] - 2.0 * pa_x[j] * pc_yzzzz[j] * pb_y[j] - 2.0 * pa_x[j] * pc_yyzzz[j] * pb_z[j] - pc_xyyzz[j] * pa_zz[j] - 4.0 * pc_xyzzz[j] * pa_z[j] * pb_y[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - pc_xzzzz[j] * pb_yy[j] - 4.0 * pc_xyzzz[j] * pb_yz[j] - pc_xyyzz[j] * pb_zz[j]);

                t_xzz_yyzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_yyzzzz[j] + 2.0 * pc_xyyzzz[j] * pa_z[j] + 2.0 * pc_xyzzzz[j] * pb_y[j] + 2.0 * pc_xyyzzz[j] * pb_z[j]);

                t_xzz_yyzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];

                t_xzz_yzzz[j] = fl_s_0_0_0 * (1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xzz[j] * pb_yz[j] * fl1_fx + 3.0 * pa_xz[j] * fl1_fx * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_yzzz[j] + pa_xzz[j] * pb_yzzz[j]);

                t_xzz_yzzz[j] += fl_s_0_0_1 * (-3.0 * pa_xz[j] * fl2_fx * pb_y[j] - 1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pa_x[j] * fl2_fx * pb_yz[j] - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xzz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_xzz[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_xzz[j] * pc_y[j] * pb_z[j] * fl1_fx - 9.0 * pa_xz[j] * pc_z[j] * pb_yz[j] * fl1_fx - 3.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_xz[j] * fl1_fx * pb_yzz[j] - 4.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_x[j] * pa_zz[j] * pb_yz[j] * fl1_fx - 3.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_yzz[j] - 0.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_yzzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_yzzz[j] - 3.0 * pa_xzz[j] * pb_yzz[j] * pc_z[j] - pa_xzz[j] * pc_y[j] * pb_zzz[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_yzzz[j] - pc_x[j] * pa_zz[j] * pb_yzzz[j]);

                t_xzz_yzzz[j] += fl_s_0_0_2 * (3.0 * pa_xz[j] * fl2_fx * pc_y[j] + 1.5 * pa_xz[j] * fl2_fx * pb_y[j] + 7.5 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] + 3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 4.5 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_x[j] * fl2_fx * pb_yz[j] + 3.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pc_x[j] * fl2_fx * pb_yz[j] + 1.5 * pa_xzz[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx + 9.0 * pa_xz[j] * pc_z[j] * pb_yz[j] * fl1_fx + 6.0 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 9.0 * pa_xz[j] * pc_yz[j] * pb_z[j] * fl1_fx + 3.0 * pa_xz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 9.0 * pa_x[j] * pc_zz[j] * pb_yz[j] * fl1_fx + 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_x[j] * pc_z[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_x[j] * pa_zz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * pb_z[j] * fl1_fx + 9.0 * pc_xz[j] * pa_z[j] * pb_yz[j] * fl1_fx + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 3.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_yzz[j] + 4.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + 0.5 * pa_x[j] * fl1_fx * pc_y[j] * pb_zzz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_yzzz[j] + 3.0 * pa_xzz[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_xzz[j] * pc_yz[j] * pb_zz[j] + 6.0 * pa_xz[j] * pc_zz[j] * pb_yzz[j] + 2.0 * pa_xz[j] * pc_yz[j] * pb_zzz[j] + pa_x[j] * pc_zz[j] * pb_yzzz[j] + 3.0 * pc_xz[j] * pa_zz[j] * pb_yzz[j] + pc_xy[j] * pa_zz[j] * pb_zzz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_yzzz[j]);

                t_xzz_yzzz[j] += fl_s_0_0_3 * (-1.5 * pa_xz[j] * fl2_fx * pc_y[j] - 7.5 * pa_x[j] * pc_yz[j] * fl2_fx - 3.75 * pa_x[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pa_x[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 1.5 * pc_x[j] * pa_z[j] * fl2_fx * pb_y[j] - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 3.75 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_x[j] * fl2_fx * pb_yz[j] - 1.5 * pa_xzz[j] * pc_yz[j] * fl1_fx - 6.0 * pa_xz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 9.0 * pa_xz[j] * pc_yz[j] * pb_z[j] * fl1_fx - 6.0 * pa_xz[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_x[j] * pc_zz[j] * pb_yz[j] * fl1_fx - 5.0 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 9.0 * pa_x[j] * pc_yzz[j] * pb_z[j] * fl1_fx - 4.5 * pa_x[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_xz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 9.0 * pc_xz[j] * pa_z[j] * pb_yz[j] * fl1_fx - 6.0 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 9.0 * pc_xzz[j] * pb_yz[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - pa_xzz[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_xzz[j] * pc_yzz[j] * pb_z[j] - 6.0 * pa_xz[j] * pc_zzz[j] * pb_yz[j] - 6.0 * pa_xz[j] * pc_yzz[j] * pb_zz[j] - 3.0 * pa_x[j] * pc_zzz[j] * pb_yzz[j] - pa_x[j] * pc_yzz[j] * pb_zzz[j] - 3.0 * pc_xzz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_zz[j] - 6.0 * pc_xzz[j] * pa_z[j] * pb_yzz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_zzz[j] - pc_xzz[j] * pb_yzzz[j]);

                t_xzz_yzzz[j] += fl_s_0_0_4 * (3.75 * pa_x[j] * pc_yz[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 6.0 * pa_xz[j] * pc_yzz[j] * fl1_fx + 5.0 * pa_x[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 9.0 * pa_x[j] * pc_yzz[j] * pb_z[j] * fl1_fx + 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx + 6.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_xzz[j] * pb_yz[j] * fl1_fx + 5.0 * pc_xzzz[j] * pb_y[j] * fl1_fx + 9.0 * pc_xyzz[j] * pb_z[j] * fl1_fx + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_xzz[j] * pc_yzzz[j] + 2.0 * pa_xz[j] * pc_zzzz[j] * pb_y[j] + 6.0 * pa_xz[j] * pc_yzzz[j] * pb_z[j] + 3.0 * pa_x[j] * pc_zzzz[j] * pb_yz[j] + 3.0 * pa_x[j] * pc_yzzz[j] * pb_zz[j] + pc_xzzz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_xyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xzzz[j] * pa_z[j] * pb_yz[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_xzzz[j] * pb_yzz[j] + pc_xyzz[j] * pb_zzz[j]);

                t_xzz_yzzz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_x[j] * pc_yzzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_xzzz[j] * pb_y[j] * fl1_fx - 9.0 * pc_xyzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_yzzzz[j] - pa_x[j] * pc_zzzzz[j] * pb_y[j] - 3.0 * pa_x[j] * pc_yzzzz[j] * pb_z[j] - pc_xyzzz[j] * pa_zz[j] - 2.0 * pc_xzzzz[j] * pa_z[j] * pb_y[j] - 6.0 * pc_xyzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xzzzz[j] * pb_yz[j] - 3.0 * pc_xyzzz[j] * pb_zz[j]);

                t_xzz_yzzz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + pa_x[j] * pc_yzzzzz[j] + 2.0 * pc_xyzzzz[j] * pa_z[j] + pc_xzzzzz[j] * pb_y[j] + 3.0 * pc_xyzzzz[j] * pb_z[j]);

                t_xzz_yzzz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];

                t_xzz_zzzz[j] = fl_s_0_0_0 * (1.875 * pa_x[j] * fl3_fx + 0.75 * pa_xzz[j] * fl2_fx + 6.0 * pa_xz[j] * fl2_fx * pb_z[j] + 4.5 * pa_x[j] * fl2_fx * pb_zz[j] + 3.0 * pa_xzz[j] * pb_zz[j] * fl1_fx + 4.0 * pa_xz[j] * fl1_fx * pb_zzz[j] + 0.5 * pa_x[j] * fl1_fx * pb_zzzz[j] + pa_xzz[j] * pb_zzzz[j]);

                t_xzz_zzzz[j] += fl_s_0_0_1 * (-5.625 * pa_x[j] * fl3_fx - 1.875 * pc_x[j] * fl3_fx - 1.5 * pa_xzz[j] * fl2_fx - 7.5 * pa_xz[j] * pc_z[j] * fl2_fx - 12.0 * pa_xz[j] * fl2_fx * pb_z[j] - 15.0 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 9.0 * pa_x[j] * fl2_fx * pb_zz[j] - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 6.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xzz[j] * pb_zz[j] * fl1_fx - 6.0 * pa_xzz[j] * pb_z[j] * pc_z[j] * fl1_fx - 18.0 * pa_xz[j] * pc_z[j] * pb_zz[j] * fl1_fx - 4.0 * pa_xz[j] * fl1_fx * pb_zzz[j] - 6.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_zzz[j] - 3.0 * pc_x[j] * pa_zz[j] * pb_zz[j] * fl1_fx - 4.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_zzz[j] - 0.5 * pa_x[j] * fl1_fx * pb_zzzz[j] - 0.5 * pc_x[j] * fl1_fx * pb_zzzz[j] - 4.0 * pa_xzz[j] * pb_zzz[j] * pc_z[j] - 2.0 * pa_xz[j] * pc_z[j] * pb_zzzz[j] - pc_x[j] * pa_zz[j] * pb_zzzz[j]);

                t_xzz_zzzz[j] += fl_s_0_0_2 * (5.625 * pa_x[j] * fl3_fx + 5.625 * pc_x[j] * fl3_fx + 0.75 * pa_xzz[j] * fl2_fx + 15.0 * pa_xz[j] * pc_z[j] * fl2_fx + 6.0 * pa_xz[j] * fl2_fx * pb_z[j] + 11.25 * pa_x[j] * pc_zz[j] * fl2_fx + 30.0 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] + 4.5 * pa_x[j] * fl2_fx * pb_zz[j] + 1.5 * pc_x[j] * pa_zz[j] * fl2_fx + 7.5 * pc_xz[j] * pa_z[j] * fl2_fx + 12.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] + 15.0 * pc_xz[j] * fl2_fx * pb_z[j] + 9.0 * pc_x[j] * fl2_fx * pb_zz[j] + 6.0 * pa_xzz[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_xzz[j] * pc_zz[j] * fl1_fx + 18.0 * pa_xz[j] * pc_z[j] * pb_zz[j] * fl1_fx + 24.0 * pa_xz[j] * pc_zz[j] * pb_z[j] * fl1_fx + 18.0 * pa_x[j] * pc_zz[j] * pb_zz[j] * fl1_fx + 6.0 * pa_x[j] * pc_z[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_x[j] * pa_zz[j] * pb_zz[j] * fl1_fx + 6.0 * pc_xz[j] * pa_zz[j] * pb_z[j] * fl1_fx + 18.0 * pc_xz[j] * pa_z[j] * pb_zz[j] * fl1_fx + 4.0 * pc_x[j] * pa_z[j] * fl1_fx * pb_zzz[j] + 6.0 * pc_xz[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_x[j] * fl1_fx * pb_zzzz[j] + 6.0 * pa_xzz[j] * pb_zz[j] * pc_zz[j] + 8.0 * pa_xz[j] * pc_zz[j] * pb_zzz[j] + pa_x[j] * pc_zz[j] * pb_zzzz[j] + 4.0 * pc_xz[j] * pa_zz[j] * pb_zzz[j] + 2.0 * pc_xz[j] * pa_z[j] * pb_zzzz[j]);

                t_xzz_zzzz[j] += fl_s_0_0_3 * (-1.875 * pa_x[j] * fl3_fx - 5.625 * pc_x[j] * fl3_fx - 7.5 * pa_xz[j] * pc_z[j] * fl2_fx - 22.5 * pa_x[j] * pc_zz[j] * fl2_fx - 15.0 * pa_x[j] * pc_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_x[j] * pa_zz[j] * fl2_fx - 15.0 * pc_xz[j] * pa_z[j] * fl2_fx - 6.0 * pc_x[j] * pa_z[j] * fl2_fx * pb_z[j] - 11.25 * pc_xzz[j] * fl2_fx - 30.0 * pc_xz[j] * fl2_fx * pb_z[j] - 4.5 * pc_x[j] * fl2_fx * pb_zz[j] - 3.0 * pa_xzz[j] * pc_zz[j] * fl1_fx - 24.0 * pa_xz[j] * pc_zz[j] * pb_z[j] * fl1_fx - 10.0 * pa_xz[j] * pc_zzz[j] * fl1_fx - 18.0 * pa_x[j] * pc_zz[j] * pb_zz[j] * fl1_fx - 20.0 * pa_x[j] * pc_zzz[j] * pb_z[j] * fl1_fx - 6.0 * pc_xz[j] * pa_zz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xzz[j] * pa_zz[j] * fl1_fx - 18.0 * pc_xz[j] * pa_z[j] * pb_zz[j] * fl1_fx - 24.0 * pc_xzz[j] * pa_z[j] * pb_z[j] * fl1_fx - 18.0 * pc_xzz[j] * pb_zz[j] * fl1_fx - 6.0 * pc_xz[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_xzz[j] * pb_z[j] * pc_zzz[j] - 12.0 * pa_xz[j] * pc_zzz[j] * pb_zz[j] - 4.0 * pa_x[j] * pc_zzz[j] * pb_zzz[j] - 6.0 * pc_xzz[j] * pa_zz[j] * pb_zz[j] - 8.0 * pc_xzz[j] * pa_z[j] * pb_zzz[j] - pc_xzz[j] * pb_zzzz[j]);

                t_xzz_zzzz[j] += fl_s_0_0_4 * (1.875 * pc_x[j] * fl3_fx + 11.25 * pa_x[j] * pc_zz[j] * fl2_fx + 7.5 * pc_xz[j] * pa_z[j] * fl2_fx + 22.5 * pc_xzz[j] * fl2_fx + 15.0 * pc_xz[j] * fl2_fx * pb_z[j] + 10.0 * pa_xz[j] * pc_zzz[j] * fl1_fx + 20.0 * pa_x[j] * pc_zzz[j] * pb_z[j] * fl1_fx + 7.5 * pa_x[j] * pc_zzzz[j] * fl1_fx + 3.0 * pc_xzz[j] * pa_zz[j] * fl1_fx + 24.0 * pc_xzz[j] * pa_z[j] * pb_z[j] * fl1_fx + 10.0 * pc_xzzz[j] * pa_z[j] * fl1_fx + 18.0 * pc_xzz[j] * pb_zz[j] * fl1_fx + 20.0 * pc_xzzz[j] * pb_z[j] * fl1_fx + pa_xzz[j] * pc_zzzz[j] + 8.0 * pa_xz[j] * pc_zzzz[j] * pb_z[j] + 6.0 * pa_x[j] * pc_zzzz[j] * pb_zz[j] + 4.0 * pc_xzzz[j] * pa_zz[j] * pb_z[j] + 12.0 * pc_xzzz[j] * pa_z[j] * pb_zz[j] + 4.0 * pc_xzzz[j] * pb_zzz[j]);

                t_xzz_zzzz[j] += fl_s_0_0_5 * (-11.25 * pc_xzz[j] * fl2_fx - 7.5 * pa_x[j] * pc_zzzz[j] * fl1_fx - 10.0 * pc_xzzz[j] * pa_z[j] * fl1_fx - 20.0 * pc_xzzz[j] * pb_z[j] * fl1_fx - 7.5 * pc_xzzzz[j] * fl1_fx - 2.0 * pa_xz[j] * pc_zzzzz[j] - 4.0 * pa_x[j] * pc_zzzzz[j] * pb_z[j] - pc_xzzzz[j] * pa_zz[j] - 8.0 * pc_xzzzz[j] * pa_z[j] * pb_z[j] - 6.0 * pc_xzzzz[j] * pb_zz[j]);

                t_xzz_zzzz[j] += fl_s_0_0_6 * (7.5 * pc_xzzzz[j] * fl1_fx + pa_x[j] * pc_zzzzzz[j] + 2.0 * pc_xzzzzz[j] * pa_z[j] + 4.0 * pc_xzzzzz[j] * pb_z[j]);

                t_xzz_zzzz[j] += -fl_s_0_0_7 * pc_xzzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_90_93(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (90,93)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyy = pcDistances.data(119 * idx + 89);

            auto pc_xxxyyyy = pcDistances.data(119 * idx + 93);

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyy_xxxx = primBuffer.data(150 * idx + 90);

            auto t_yyy_xxxy = primBuffer.data(150 * idx + 91);

            auto t_yyy_xxxz = primBuffer.data(150 * idx + 92);

            // Batch of Integrals (90,93)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, pb_xxxz, pb_xxy, \
                                     pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, pc_xxxxyy, \
                                     pc_xxxxyyy, pc_xxxy, pc_xxxyy, pc_xxxyyy, pc_xxxyyyy, pc_xxxyyyz, pc_xxxyyz, \
                                     pc_xxxyz, pc_xxxz, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyz, pc_xxyyz, \
                                     pc_xxyz, pc_xxz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyz, pc_xyyz, pc_xyz, pc_xz, \
                                     pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyz, pc_yyz, pc_yz, pc_z, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyy_xxxx, t_yyy_xxxy, \
                                     t_yyy_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyy_xxxx[j] = fl_s_0_0_0 * (1.125 * pa_y[j] * fl3_fx + 0.75 * pa_yyy[j] * fl2_fx + 4.5 * pa_y[j] * fl2_fx * pb_xx[j] + 3.0 * pa_yyy[j] * pb_xx[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pb_xxxx[j] + pa_yyy[j] * pb_xxxx[j]);

                t_yyy_xxxx[j] += fl_s_0_0_1 * (-3.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 1.5 * pa_yyy[j] * fl2_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 9.0 * pa_y[j] * fl2_fx * pb_xx[j] - 9.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 4.5 * pc_y[j] * fl2_fx * pb_xx[j] - 3.0 * pa_yyy[j] * pb_xx[j] * fl1_fx - 6.0 * pa_yyy[j] * pb_x[j] * pc_x[j] * fl1_fx - 9.0 * pa_yy[j] * pc_y[j] * pb_xx[j] * fl1_fx - 6.0 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxxx[j] - 1.5 * pc_y[j] * fl1_fx * pb_xxxx[j] - 4.0 * pa_yyy[j] * pb_xxx[j] * pc_x[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xxxx[j]);

                t_yyy_xxxx[j] += fl_s_0_0_2 * (3.375 * pa_y[j] * fl3_fx + 3.375 * pc_y[j] * fl3_fx + 0.75 * pa_yyy[j] * fl2_fx + 4.5 * pa_yy[j] * pc_y[j] * fl2_fx + 2.25 * pa_y[j] * pc_yy[j] * fl2_fx + 18.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 4.5 * pa_y[j] * fl2_fx * pc_xx[j] + 4.5 * pa_y[j] * fl2_fx * pb_xx[j] + 9.0 * pc_y[j] * fl2_fx * pb_xx[j] + 9.0 * pc_xy[j] * fl2_fx * pb_x[j] + 6.0 * pa_yyy[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_yyy[j] * pc_xx[j] * fl1_fx + 9.0 * pa_yy[j] * pc_y[j] * pb_xx[j] * fl1_fx + 18.0 * pa_yy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_yy[j] * pb_xx[j] * fl1_fx + 9.0 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xx[j] + 6.0 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_x[j] + 6.0 * pc_xy[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_y[j] * fl1_fx * pb_xxxx[j] + 6.0 * pa_yyy[j] * pb_xx[j] * pc_xx[j] + 12.0 * pa_yy[j] * pc_xy[j] * pb_xxx[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xxxx[j]);

                t_yyy_xxxx[j] += fl_s_0_0_3 * (-1.125 * pa_y[j] * fl3_fx - 3.375 * pc_y[j] * fl3_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 4.5 * pa_y[j] * pc_yy[j] * fl2_fx - 0.75 * pc_yyy[j] * fl2_fx - 9.0 * pa_y[j] * fl2_fx * pc_xx[j] - 9.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 18.0 * pc_xy[j] * fl2_fx * pb_x[j] - 4.5 * pc_xxy[j] * fl2_fx - 4.5 * pc_y[j] * fl2_fx * pb_xx[j] - 3.0 * pa_yyy[j] * pc_xx[j] * fl1_fx - 18.0 * pa_yy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 9.0 * pa_yy[j] * pc_xxy[j] * fl1_fx - 9.0 * pa_y[j] * pc_yy[j] * pb_xx[j] * fl1_fx - 18.0 * pa_y[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_yyy[j] * pb_xx[j] * fl1_fx - 6.0 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxx[j] - 9.0 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xx[j] - 9.0 * pc_xxy[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xy[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_yyy[j] * pb_x[j] * pc_xxx[j] - 18.0 * pa_yy[j] * pc_xxy[j] * pb_xx[j] - 12.0 * pa_y[j] * pc_xyy[j] * pb_xxx[j] - pc_yyy[j] * pb_xxxx[j]);

                t_yyy_xxxx[j] += fl_s_0_0_4 * (1.125 * pc_y[j] * fl3_fx + 2.25 * pa_y[j] * pc_yy[j] * fl2_fx + 1.5 * pc_yyy[j] * fl2_fx + 4.5 * pa_y[j] * fl2_fx * pc_xx[j] + 9.0 * pc_xxy[j] * fl2_fx + 9.0 * pc_xy[j] * fl2_fx * pb_x[j] + 9.0 * pa_yy[j] * pc_xxy[j] * fl1_fx + 18.0 * pa_y[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_xxyy[j] * fl1_fx + 3.0 * pc_yyy[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xyyy[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pc_xxxx[j] + 6.0 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxx[j] + 6.0 * pc_xxxy[j] * fl1_fx * pb_x[j] + 9.0 * pc_xxy[j] * fl1_fx * pb_xx[j] + pa_yyy[j] * pc_xxxx[j] + 12.0 * pa_yy[j] * pc_xxxy[j] * pb_x[j] + 18.0 * pa_y[j] * pc_xxyy[j] * pb_xx[j] + 4.0 * pc_xyyy[j] * pb_xxx[j]);

                t_yyy_xxxx[j] += fl_s_0_0_5 * (-0.75 * pc_yyy[j] * fl2_fx - 4.5 * pc_xxy[j] * fl2_fx - 9.0 * pa_y[j] * pc_xxyy[j] * fl1_fx - 6.0 * pc_xyyy[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyy[j] * fl1_fx - 1.5 * pa_y[j] * fl1_fx * pc_xxxx[j] - 1.5 * pc_xxxxy[j] * fl1_fx - 6.0 * pc_xxxy[j] * fl1_fx * pb_x[j] - 3.0 * pa_yy[j] * pc_xxxxy[j] - 12.0 * pa_y[j] * pc_xxxyy[j] * pb_x[j] - 6.0 * pc_xxyyy[j] * pb_xx[j]);

                t_yyy_xxxx[j] += fl_s_0_0_6 * (3.0 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxxxy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxxxyy[j] + 4.0 * pc_xxxyyy[j] * pb_x[j]);

                t_yyy_xxxx[j] += -fl_s_0_0_7 * pc_xxxxyyy[j];

                t_yyy_xxxy[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_x[j] + 2.25 * pa_yy[j] * fl2_fx * pb_x[j] + 2.25 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xxx[j] + 1.5 * pa_yyy[j] * pb_xy[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pb_xxx[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxxy[j] + pa_yyy[j] * pb_xxxy[j]);

                t_yyy_xxxy[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_x[j] - 1.125 * fl3_fx * pc_x[j] - 4.5 * pa_yy[j] * fl2_fx * pb_x[j] - 2.25 * pa_yy[j] * fl2_fx * pc_x[j] - 6.75 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 4.5 * pa_y[j] * fl2_fx * pb_xy[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.25 * pc_y[j] * fl2_fx * pb_xy[j] - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_yyy[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_yyy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_x[j] * fl1_fx * pb_y[j] - 4.5 * pa_yy[j] * pc_y[j] * pb_xy[j] * fl1_fx - 4.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_yy[j] * fl1_fx * pb_xxx[j] - 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 4.5 * pa_y[j] * fl1_fx * pb_xxy[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxxy[j] - 1.5 * pc_y[j] * fl1_fx * pb_xxxy[j] - pa_yyy[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_yyy[j] * pb_xxy[j] * pc_x[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xxxy[j]);

                t_yyy_xxxy[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_x[j] + 3.375 * fl3_fx * pb_x[j] + 4.5 * pa_yy[j] * fl2_fx * pc_x[j] + 2.25 * pa_yy[j] * fl2_fx * pb_x[j] + 13.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 6.75 * pa_y[j] * pc_xy[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_x[j] + 4.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 2.25 * pa_y[j] * fl2_fx * pb_xy[j] + 4.5 * pc_y[j] * fl2_fx * pb_xy[j] + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 4.5 * fl2_fx * pb_xx[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxx[j] + 1.5 * pa_yyy[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_yyy[j] * pc_xy[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_x[j] * fl1_fx * pb_y[j] + 4.5 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 4.5 * pa_yy[j] * pc_y[j] * pb_xy[j] * fl1_fx + 4.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_y[j] + 4.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 4.5 * pa_y[j] * pc_yy[j] * pb_xy[j] * fl1_fx + 13.5 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] + 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xxx[j] + 4.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xx[j] + 4.5 * pa_y[j] * fl1_fx * pb_xxy[j] * pc_x[j] + 4.5 * pc_xy[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_y[j] * fl1_fx * pb_xxxy[j] + 3.0 * pa_yyy[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_yyy[j] * pb_xy[j] * pc_xx[j] + 3.0 * pa_yy[j] * pc_yy[j] * pb_xxx[j] + 9.0 * pa_yy[j] * pc_xy[j] * pb_xxy[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xxxy[j]);

                t_yyy_xxxy[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 2.25 * pa_yy[j] * fl2_fx * pc_x[j] - 13.5 * pa_y[j] * pc_xy[j] * fl2_fx - 6.75 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 9.0 * pc_yy[j] * fl2_fx * pb_x[j] - 4.5 * pc_xyy[j] * fl2_fx - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 4.5 * pc_xy[j] * fl2_fx * pb_y[j] - 2.25 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_xxx[j] - 4.5 * fl2_fx * pb_x[j] * pc_xx[j] - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_yyy[j] * pc_xy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xyy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_y[j] - 1.5 * pa_yy[j] * fl1_fx * pc_xxx[j] - 4.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 4.5 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 4.5 * pa_y[j] * pc_yy[j] * pb_xy[j] * fl1_fx - 4.5 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 13.5 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 13.5 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_yyy[j] * pb_xy[j] * fl1_fx - 9.0 * pc_xyy[j] * fl1_fx * pb_xx[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_y[j] - 4.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xx[j] - 4.5 * pc_xxy[j] * fl1_fx * pb_xy[j] - 4.5 * pc_xy[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_yyy[j] * pb_x[j] * pc_xxy[j] - pa_yyy[j] * pc_xxx[j] * pb_y[j] - 9.0 * pa_yy[j] * pc_xyy[j] * pb_xx[j] - 9.0 * pa_yy[j] * pc_xxy[j] * pb_xy[j] - 3.0 * pa_y[j] * pc_yyy[j] * pb_xxx[j] - 9.0 * pa_y[j] * pc_xyy[j] * pb_xxy[j] - pc_yyy[j] * pb_xxxy[j]);

                t_yyy_xxxy[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_x[j] + 6.75 * pa_y[j] * pc_xy[j] * fl2_fx + 9.0 * pc_xyy[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xxx[j] + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_yy[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_xxx[j] + 4.5 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyyy[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 4.5 * pa_y[j] * pc_xxxy[j] * fl1_fx + 13.5 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 1.5 * pc_yyyy[j] * pb_x[j] * fl1_fx + 1.5 * pc_yyy[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 9.0 * pc_xxyy[j] * fl1_fx * pb_x[j] + 9.0 * pc_xyy[j] * fl1_fx * pb_xx[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_y[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_y[j] + 4.5 * pc_xxy[j] * fl1_fx * pb_xy[j] + pa_yyy[j] * pc_xxxy[j] + 9.0 * pa_yy[j] * pc_xxyy[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xxxy[j] * pb_y[j] + 9.0 * pa_y[j] * pc_xyyy[j] * pb_xx[j] + 9.0 * pa_y[j] * pc_xxyy[j] * pb_xy[j] + pc_yyyy[j] * pb_xxx[j] + 3.0 * pc_xyyy[j] * pb_xxy[j]);

                t_yyy_xxxy[j] += fl_s_0_0_5 * (-4.5 * pc_xyy[j] * fl2_fx - 0.75 * fl2_fx * pc_xxx[j] - 4.5 * pa_y[j] * pc_xyyy[j] * fl1_fx - 4.5 * pa_y[j] * pc_xxxy[j] * fl1_fx - 1.5 * pc_yyyy[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyyy[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxxyy[j] * fl1_fx - 9.0 * pc_xxyy[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxy[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xxxyy[j] - 9.0 * pa_y[j] * pc_xxyyy[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xxxyy[j] * pb_y[j] - 3.0 * pc_xyyyy[j] * pb_xx[j] - 3.0 * pc_xxyyy[j] * pb_xy[j]);

                t_yyy_xxxy[j] += fl_s_0_0_6 * (1.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xxxyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxxyyy[j] + 3.0 * pc_xxyyyy[j] * pb_x[j] + pc_xxxyyy[j] * pb_y[j]);

                t_yyy_xxxy[j] += -fl_s_0_0_7 * pc_xxxyyyy[j];

                t_yyy_xxxz[j] = fl_s_0_0_0 * (2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pa_yyy[j] * pb_xz[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pb_xxxz[j] + pa_yyy[j] * pb_xxxz[j]);

                t_yyy_xxxz[j] += fl_s_0_0_1 * (-2.25 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_xz[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yyy[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_yyy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_x[j] * fl1_fx * pb_z[j] - 4.5 * pa_yy[j] * pc_y[j] * pb_xz[j] * fl1_fx - 1.5 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_z[j] - 4.5 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxxz[j] - 1.5 * pc_y[j] * fl1_fx * pb_xxxz[j] - pa_yyy[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_yyy[j] * pb_xxz[j] * pc_x[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xxxz[j]);

                t_yyy_xxxz[j] += fl_s_0_0_2 * (4.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] + 2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 4.5 * pc_y[j] * fl2_fx * pb_xz[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_yyy[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_x[j] * fl1_fx * pb_z[j] + 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pa_yy[j] * pc_y[j] * pb_xz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 4.5 * pa_y[j] * pc_yy[j] * pb_xz[j] * fl1_fx + 4.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xz[j] + 4.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_xx[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_z[j] + 4.5 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_x[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_y[j] * fl1_fx * pb_xxxz[j] + 3.0 * pa_yyy[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_yyy[j] * pb_xz[j] * pc_xx[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xxx[j] + 9.0 * pa_yy[j] * pc_xy[j] * pb_xxz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xxxz[j]);

                t_yyy_xxxz[j] += fl_s_0_0_3 * (-4.5 * pa_y[j] * fl2_fx * pc_xz[j] - 2.25 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 4.5 * pa_y[j] * pc_yy[j] * pb_xz[j] * fl1_fx - 4.5 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_yyy[j] * pb_xz[j] * fl1_fx - 4.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_z[j] - 4.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xz[j] - 4.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_xx[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xxy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_yyy[j] * pb_x[j] * pc_xxz[j] - pa_yyy[j] * pc_xxx[j] * pb_z[j] - 9.0 * pa_yy[j] * pc_xyz[j] * pb_xx[j] - 9.0 * pa_yy[j] * pc_xxy[j] * pb_xz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xxx[j] - 9.0 * pa_y[j] * pc_xyy[j] * pb_xxz[j] - pc_yyy[j] * pb_xxxz[j]);

                t_yyy_xxxz[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_yyy[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxxz[j] + 4.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_z[j] + 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 4.5 * pc_xxy[j] * fl1_fx * pb_xz[j] + pa_yyy[j] * pc_xxxz[j] + 9.0 * pa_yy[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xxxy[j] * pb_z[j] + 9.0 * pa_y[j] * pc_xyyz[j] * pb_xx[j] + 9.0 * pa_y[j] * pc_xxyy[j] * pb_xz[j] + pc_yyyz[j] * pb_xxx[j] + 3.0 * pc_xyyy[j] * pb_xxz[j]);

                t_yyy_xxxz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxxz[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_xxxyz[j] - 9.0 * pa_y[j] * pc_xxyyz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xxxyy[j] * pb_z[j] - 3.0 * pc_xyyyz[j] * pb_xx[j] - 3.0 * pc_xxyyy[j] * pb_xz[j]);

                t_yyy_xxxz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxxyyz[j] + 3.0 * pc_xxyyyz[j] * pb_x[j] + pc_xxxyyy[j] * pb_z[j]);

                t_yyy_xxxz[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_93_96(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (93,96)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyy = pcDistances.data(119 * idx + 98);

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyy_xxyy = primBuffer.data(150 * idx + 93);

            auto t_yyy_xxyz = primBuffer.data(150 * idx + 94);

            auto t_yyy_xxzz = primBuffer.data(150 * idx + 95);

            // Batch of Integrals (93,96)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, pb_xxz, pb_xxzz, \
                                     pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, pc_x, pc_xx, \
                                     pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyy, pc_xxyyyyz, pc_xxyyyz, \
                                     pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, pc_xxzz, pc_xy, pc_xyy, \
                                     pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyz, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, \
                                     pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyz, \
                                     pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyy_xxyy, t_yyy_xxyz, \
                                     t_yyy_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyy_xxyy[j] = fl_s_0_0_0 * (1.125 * pa_y[j] * fl3_fx + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_yyy[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * fl2_fx * pb_xx[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pb_xxy[j] + 0.5 * pa_yyy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_yyy[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xxy[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxyy[j] + pa_yyy[j] * pb_xxyy[j]);

                t_yyy_xxyy[j] += fl_s_0_0_1 * (-3.375 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 2.25 * fl3_fx * pb_y[j] - 0.5 * pa_yyy[j] * fl2_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 3.0 * pa_yy[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 4.5 * pa_y[j] * fl2_fx * pb_xx[j] - 3.75 * pc_y[j] * fl2_fx * pb_xx[j] - 1.5 * pa_y[j] * fl2_fx * pb_yy[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pb_xy[j] * pc_x[j] - 3.0 * fl2_fx * pb_xxy[j] - 0.5 * pa_yyy[j] * pb_xx[j] * fl1_fx - pa_yyy[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_yyy[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_yy[j] - 4.5 * pa_yy[j] * pc_y[j] * pb_xx[j] * fl1_fx - 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yy[j] - 6.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xxy[j] - 9.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_y[j] * fl1_fx * pb_xyy[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxyy[j] - 1.5 * pc_y[j] * fl1_fx * pb_xxyy[j] - 2.0 * pa_yyy[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_yyy[j] * pb_xyy[j] * pc_x[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xxyy[j]);

                t_yyy_xxyy[j] += fl_s_0_0_2 * (3.375 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 2.25 * fl3_fx * pb_y[j] + 0.25 * pa_yyy[j] * fl2_fx + 4.5 * pa_yy[j] * pc_y[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 4.5 * pa_y[j] * pc_yy[j] * fl2_fx + 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * fl2_fx * pc_xx[j] + 9.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 2.25 * pa_y[j] * fl2_fx * pb_xx[j] + 3.0 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_xy[j] * fl2_fx * pb_x[j] + 7.5 * pc_y[j] * fl2_fx * pb_xx[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * pc_y[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pc_xx[j] * pb_y[j] + 6.0 * fl2_fx * pb_xy[j] * pc_x[j] + 1.5 * fl2_fx * pb_xxy[j] + pa_yyy[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_xx[j] * fl1_fx + 0.5 * pa_yyy[j] * fl1_fx * pc_yy[j] + pa_yyy[j] * fl1_fx * pb_y[j] * pc_y[j] + 4.5 * pa_yy[j] * pc_y[j] * pb_xx[j] * fl1_fx + 9.0 * pa_yy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 6.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] + 9.0 * pa_y[j] * pc_yy[j] * pb_xx[j] * fl1_fx + 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] + 18.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] + 9.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] + 6.0 * pc_yy[j] * fl1_fx * pb_xxy[j] + 1.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yy[j] + 3.0 * pa_y[j] * fl1_fx * pb_xyy[j] * pc_x[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_y[j] * fl1_fx * pb_xxyy[j] + pa_yyy[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_yyy[j] * pb_xy[j] * pc_xy[j] + pa_yyy[j] * pc_xx[j] * pb_yy[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xxy[j] + 6.0 * pa_yy[j] * pc_xy[j] * pb_xyy[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xxyy[j]);

                t_yyy_xxyy[j] += fl_s_0_0_3 * (-1.125 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 0.75 * fl3_fx * pb_y[j] - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 9.0 * pa_y[j] * pc_yy[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * fl2_fx * pc_xx[j] - 4.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 2.5 * pc_yyy[j] * fl2_fx - 6.0 * pc_yy[j] * fl2_fx * pb_y[j] - 3.75 * pc_xxy[j] * fl2_fx - 15.0 * pc_xy[j] * fl2_fx * pb_x[j] - 3.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pc_xx[j] * pb_y[j] - 3.0 * fl2_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_yyy[j] * pc_xx[j] * fl1_fx - 0.5 * pa_yyy[j] * fl1_fx * pc_yy[j] - 9.0 * pa_yy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xxy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yyy[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] - 9.0 * pa_y[j] * pc_yy[j] * pb_xx[j] * fl1_fx - 18.0 * pa_y[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 9.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] - 18.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] - 5.0 * pc_yyy[j] * pb_xx[j] * fl1_fx - 0.5 * pc_yyy[j] * fl1_fx * pb_yy[j] - 12.0 * pc_xyy[j] * fl1_fx * pb_xy[j] - 6.0 * pc_yy[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yy[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_yyy[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_yyy[j] * pc_xxy[j] * pb_y[j] - 3.0 * pa_yy[j] * pc_yyy[j] * pb_xx[j] - 12.0 * pa_yy[j] * pc_xyy[j] * pb_xy[j] - 3.0 * pa_yy[j] * pc_xxy[j] * pb_yy[j] - 6.0 * pa_y[j] * pc_yyy[j] * pb_xxy[j] - 6.0 * pa_y[j] * pc_xyy[j] * pb_xyy[j] - pc_yyy[j] * pb_xxyy[j]);

                t_yyy_xxyy[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 4.5 * pa_y[j] * pc_yy[j] * fl2_fx + 2.25 * pa_y[j] * fl2_fx * pc_xx[j] + 5.0 * pc_yyy[j] * fl2_fx + 3.0 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_xxy[j] * fl2_fx + 7.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_xx[j] * pb_y[j] + 4.5 * pa_yy[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yyy[j] * fl1_fx + 18.0 * pa_y[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_xxyy[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 9.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] + 5.0 * pc_yyy[j] * pb_xx[j] * fl1_fx + 10.0 * pc_xyyy[j] * pb_x[j] * fl1_fx + pc_yyyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_yy[j] + 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] + 12.0 * pc_xyy[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_xxyy[j] + 6.0 * pa_yy[j] * pc_xyyy[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xxyy[j] * pb_y[j] + 3.0 * pa_y[j] * pc_yyyy[j] * pb_xx[j] + 12.0 * pa_y[j] * pc_xyyy[j] * pb_xy[j] + 3.0 * pa_y[j] * pc_xxyy[j] * pb_yy[j] + 2.0 * pc_yyyy[j] * pb_xxy[j] + 2.0 * pc_xyyy[j] * pb_xyy[j]);

                t_yyy_xxyy[j] += fl_s_0_0_5 * (-2.5 * pc_yyy[j] * fl2_fx - 3.75 * pc_xxy[j] * fl2_fx - 9.0 * pa_y[j] * pc_xxyy[j] * fl1_fx - 1.5 * pa_y[j] * pc_yyyy[j] * fl1_fx - 10.0 * pc_xyyy[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxyyy[j] * fl1_fx - 0.5 * pc_yyyyy[j] * fl1_fx - pc_yyyy[j] * fl1_fx * pb_y[j] - 6.0 * pc_xxyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xxyyy[j] - 6.0 * pa_y[j] * pc_xyyyy[j] * pb_x[j] - 6.0 * pa_y[j] * pc_xxyyy[j] * pb_y[j] - pc_yyyyy[j] * pb_xx[j] - 4.0 * pc_xyyyy[j] * pb_xy[j] - pc_xxyyy[j] * pb_yy[j]);

                t_yyy_xxyy[j] += fl_s_0_0_6 * (5.0 * pc_xxyyy[j] * fl1_fx + 0.5 * pc_yyyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxyyyy[j] + 2.0 * pc_xyyyyy[j] * pb_x[j] + 2.0 * pc_xxyyyy[j] * pb_y[j]);

                t_yyy_xxyy[j] += -fl_s_0_0_7 * pc_xxyyyyy[j];

                t_yyy_xxyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_z[j] + 0.75 * pa_yy[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pb_xxz[j] + 0.5 * pa_yyy[j] * fl1_fx * pb_yz[j] + 1.5 * pa_yy[j] * fl1_fx * pb_xxz[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxyz[j] + pa_yyy[j] * pb_xxyz[j]);

                t_yyy_xxyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 0.75 * pa_yy[j] * fl2_fx * pc_z[j] - 1.5 * pa_yy[j] * fl2_fx * pb_z[j] - 2.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.75 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_yz[j] - 0.75 * pc_y[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxz[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_yyy[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_yz[j] - 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yz[j] - 1.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] - 1.5 * pa_yy[j] * fl1_fx * pb_xxz[j] - 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxy[j] * pc_z[j] - 3.0 * pa_y[j] * fl1_fx * pb_xyz[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxyz[j] - 1.5 * pc_y[j] * fl1_fx * pb_xxyz[j] - pa_yyy[j] * pb_xxy[j] * pc_z[j] - pa_yyy[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_yyy[j] * pb_xyz[j] * pc_x[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xxyz[j]);

                t_yyy_xxyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_yy[j] * fl2_fx * pc_z[j] + 0.75 * pa_yy[j] * fl2_fx * pb_z[j] + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pb_yz[j] + 1.5 * fl2_fx * pb_x[j] * pc_xz[j] + 0.75 * fl2_fx * pc_xx[j] * pb_z[j] + 1.5 * fl2_fx * pb_xx[j] * pc_z[j] + 3.0 * fl2_fx * pb_xz[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxz[j] + 0.5 * pa_yyy[j] * fl1_fx * pc_yz[j] + 0.5 * pa_yyy[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_yyy[j] * fl1_fx * pc_y[j] * pb_z[j] + 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_yz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xz[j] + 1.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] + 1.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_z[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] + 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 9.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xxz[j] + 3.0 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yz[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxy[j] * pc_z[j] + 3.0 * pa_y[j] * fl1_fx * pb_xyz[j] * pc_x[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_y[j] * fl1_fx * pb_xxyz[j] + pa_yyy[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_yyy[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_yyy[j] * pb_xz[j] * pc_xy[j] + pa_yyy[j] * pc_xx[j] * pb_yz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xxy[j] + 3.0 * pa_yy[j] * pc_yy[j] * pb_xxz[j] + 6.0 * pa_yy[j] * pc_xy[j] * pb_xyz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xxyz[j]);

                t_yyy_xxyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.75 * pa_yy[j] * fl2_fx * pc_z[j] - 4.5 * pa_y[j] * pc_yz[j] * fl2_fx - 2.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_yyz[j] * fl2_fx - 3.0 * pc_yy[j] * fl2_fx * pb_z[j] - 0.75 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 1.5 * pc_yz[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_xxz[j] - 3.0 * fl2_fx * pb_x[j] * pc_xz[j] - 1.5 * fl2_fx * pc_xx[j] * pb_z[j] - 0.75 * fl2_fx * pb_xx[j] * pc_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_yyy[j] * fl1_fx * pc_yz[j] - 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 1.5 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * fl1_fx * pc_xxz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xz[j] - 1.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] - 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 4.5 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 9.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yyz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xyy[j] * fl1_fx * pb_xz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_y[j] - 3.0 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xyz[j] - 2.0 * pa_yyy[j] * pb_x[j] * pc_xyz[j] - pa_yyy[j] * pc_xxz[j] * pb_y[j] - pa_yyy[j] * pc_xxy[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yyz[j] * pb_xx[j] - 6.0 * pa_yy[j] * pc_xyz[j] * pb_xy[j] - 6.0 * pa_yy[j] * pc_xyy[j] * pb_xz[j] - 3.0 * pa_yy[j] * pc_xxy[j] * pb_yz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xxy[j] - 3.0 * pa_y[j] * pc_yyy[j] * pb_xxz[j] - 6.0 * pa_y[j] * pc_xyy[j] * pb_xyz[j] - pc_yyy[j] * pb_xxyz[j]);

                t_yyy_xxyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 3.0 * pc_yyz[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xxz[j] + 1.5 * fl2_fx * pb_x[j] * pc_xz[j] + 0.75 * fl2_fx * pc_xx[j] * pb_z[j] + 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_xxz[j] + 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 1.5 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 4.5 * pa_y[j] * pc_xxyz[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 4.5 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_yz[j] + 6.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xyy[j] * fl1_fx * pb_xz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_y[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_yz[j] + pa_yyy[j] * pc_xxyz[j] + 6.0 * pa_yy[j] * pc_xyyz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xxyz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_xxyy[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yyyz[j] * pb_xx[j] + 6.0 * pa_y[j] * pc_xyyz[j] * pb_xy[j] + 6.0 * pa_y[j] * pc_xyyy[j] * pb_xz[j] + 3.0 * pa_y[j] * pc_xxyy[j] * pb_yz[j] + pc_yyyz[j] * pb_xxy[j] + pc_yyyy[j] * pb_xxz[j] + 2.0 * pc_xyyy[j] * pb_xyz[j]);

                t_yyy_xxyz[j] += fl_s_0_0_5 * (-1.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_xxz[j] - 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx - 4.5 * pa_y[j] * pc_xxyz[j] * fl1_fx - 0.5 * pc_yyyyz[j] * fl1_fx - 0.5 * pc_yyyz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyyz[j] * fl1_fx - 6.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xxyyz[j] - 6.0 * pa_y[j] * pc_xyyyz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xxyyz[j] * pb_y[j] - 3.0 * pa_y[j] * pc_xxyyy[j] * pb_z[j] - pc_yyyyz[j] * pb_xx[j] - 2.0 * pc_xyyyz[j] * pb_xy[j] - 2.0 * pc_xyyyy[j] * pb_xz[j] - pc_xxyyy[j] * pb_yz[j]);

                t_yyy_xxyz[j] += fl_s_0_0_6 * (0.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pc_xxyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxyyyz[j] + 2.0 * pc_xyyyyz[j] * pb_x[j] + pc_xxyyyz[j] * pb_y[j] + pc_xxyyyy[j] * pb_z[j]);

                t_yyy_xxyz[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];

                t_yyy_xxzz[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 0.25 * pa_yyy[j] * fl2_fx + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 0.75 * pa_y[j] * fl2_fx * pb_zz[j] + 0.5 * pa_yyy[j] * pb_xx[j] * fl1_fx + 0.5 * pa_yyy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxzz[j] + pa_yyy[j] * pb_xxzz[j]);

                t_yyy_xxzz[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - 0.5 * pa_yyy[j] * fl2_fx - 0.75 * pa_yy[j] * pc_y[j] * fl2_fx - 1.5 * pa_y[j] * fl2_fx * pb_xx[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_zz[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.75 * pc_y[j] * fl2_fx * pb_zz[j] - 0.5 * pa_yyy[j] * pb_xx[j] * fl1_fx - pa_yyy[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_yyy[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_zz[j] - 1.5 * pa_yy[j] * pc_y[j] * pb_xx[j] * fl1_fx - 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 3.0 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_z[j] - 3.0 * pa_y[j] * fl1_fx * pb_xzz[j] * pc_x[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxzz[j] - 1.5 * pc_y[j] * fl1_fx * pb_xxzz[j] - 2.0 * pa_yyy[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_yyy[j] * pb_xzz[j] * pc_x[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xxzz[j]);

                t_yyy_xxzz[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 0.25 * pa_yyy[j] * fl2_fx + 1.5 * pa_yy[j] * pc_y[j] * fl2_fx + 0.75 * pa_y[j] * pc_yy[j] * fl2_fx + 3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 0.75 * pa_y[j] * fl2_fx * pc_zz[j] + 3.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 0.75 * pa_y[j] * fl2_fx * pb_zz[j] + 1.5 * pc_y[j] * fl2_fx * pb_xx[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_y[j] * fl2_fx * pb_zz[j] + pa_yyy[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_xx[j] * fl1_fx + 0.5 * pa_yyy[j] * fl1_fx * pc_zz[j] + pa_yyy[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_yy[j] * pc_y[j] * pb_xx[j] * fl1_fx + 3.0 * pa_yy[j] * pc_xy[j] * pb_x[j] * fl1_fx + 3.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * pc_yy[j] * pb_xx[j] * fl1_fx + 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_zz[j] + 6.0 * pa_y[j] * fl1_fx * pb_xz[j] * pc_xz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_zz[j] + 3.0 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_z[j] + 3.0 * pa_y[j] * fl1_fx * pb_xzz[j] * pc_x[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_xy[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_y[j] * fl1_fx * pb_xxzz[j] + pa_yyy[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_yyy[j] * pb_xz[j] * pc_xz[j] + pa_yyy[j] * pc_xx[j] * pb_zz[j] + 6.0 * pa_yy[j] * pc_yz[j] * pb_xxz[j] + 6.0 * pa_yy[j] * pc_xy[j] * pb_xzz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xxzz[j]);

                t_yyy_xxzz[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 0.75 * pa_yy[j] * pc_y[j] * fl2_fx - 1.5 * pa_y[j] * pc_yy[j] * fl2_fx - 0.25 * pc_yyy[j] * fl2_fx - 1.5 * pa_y[j] * fl2_fx * pc_xx[j] - 1.5 * pa_y[j] * fl2_fx * pc_zz[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - 0.75 * pc_yzz[j] * fl2_fx - 3.0 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.75 * pc_y[j] * fl2_fx * pb_zz[j] - 0.5 * pa_yyy[j] * pc_xx[j] * fl1_fx - 0.5 * pa_yyy[j] * fl1_fx * pc_zz[j] - 3.0 * pa_yy[j] * pc_xy[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xxy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * pc_yy[j] * pb_xx[j] * fl1_fx - 3.0 * pa_y[j] * pc_xyy[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yyy[j] * pb_xx[j] * fl1_fx - 0.5 * pc_yyy[j] * fl1_fx * pb_zz[j] - 3.0 * pa_y[j] * fl1_fx * pb_x[j] * pc_xzz[j] - 3.0 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_z[j] - 1.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_zz[j] - 6.0 * pa_y[j] * fl1_fx * pb_xz[j] * pc_xz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_zz[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xxz[j] - 3.0 * pc_xy[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_yyy[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_yyy[j] * pc_xxz[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_xx[j] - 12.0 * pa_yy[j] * pc_xyz[j] * pb_xz[j] - 3.0 * pa_yy[j] * pc_xxy[j] * pb_zz[j] - 6.0 * pa_y[j] * pc_yyz[j] * pb_xxz[j] - 6.0 * pa_y[j] * pc_xyy[j] * pb_xzz[j] - pc_yyy[j] * pb_xxzz[j]);

                t_yyy_xxzz[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 0.75 * pa_y[j] * pc_yy[j] * fl2_fx + 0.5 * pc_yyy[j] * fl2_fx + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 0.75 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pc_xxy[j] * fl2_fx + 1.5 * pc_yzz[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_yy[j] * pc_xxy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyy[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * pc_xxyy[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * pb_xx[j] * fl1_fx + pc_xyyy[j] * pb_x[j] * fl1_fx + pc_yyyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xxzz[j] + 3.0 * pa_y[j] * fl1_fx * pb_x[j] * pc_xzz[j] + 3.0 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + pa_yyy[j] * pc_xxzz[j] + 6.0 * pa_yy[j] * pc_xyzz[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xxyz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_xx[j] + 12.0 * pa_y[j] * pc_xyyz[j] * pb_xz[j] + 3.0 * pa_y[j] * pc_xxyy[j] * pb_zz[j] + 2.0 * pc_yyyz[j] * pb_xxz[j] + 2.0 * pc_xyyy[j] * pb_xzz[j]);

                t_yyy_xxzz[j] += fl_s_0_0_5 * (-0.25 * pc_yyy[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 0.75 * pc_yzz[j] * fl2_fx - 1.5 * pa_y[j] * pc_xxyy[j] * fl1_fx - 1.5 * pa_y[j] * pc_yyzz[j] * fl1_fx - pc_xyyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxyyy[j] * fl1_fx - 0.5 * pc_yyyzz[j] * fl1_fx - pc_yyyz[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_xxzz[j] - 1.5 * pc_xxyzz[j] * fl1_fx - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_xxyzz[j] - 6.0 * pa_y[j] * pc_xyyzz[j] * pb_x[j] - 6.0 * pa_y[j] * pc_xxyyz[j] * pb_z[j] - pc_yyyzz[j] * pb_xx[j] - 4.0 * pc_xyyyz[j] * pb_xz[j] - pc_xxyyy[j] * pb_zz[j]);

                t_yyy_xxzz[j] += fl_s_0_0_6 * (0.5 * pc_xxyyy[j] * fl1_fx + 0.5 * pc_yyyzz[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxyyzz[j] + 2.0 * pc_xyyyzz[j] * pb_x[j] + 2.0 * pc_xxyyyz[j] * pb_z[j]);

                t_yyy_xxzz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_96_99(      CMemBlock2D<double>& primBuffer,
                                    const CMemBlock2D<double>& auxBuffer,
                                    const CMemBlock2D<double>& osFactors,
                                    const CMemBlock2D<double>& paDistances,
                                    const CMemBlock2D<double>& pbDistances,
                                    const CMemBlock2D<double>& pcDistances,
                                    const CGtoBlock&           braGtoBlock,
                                    const CGtoBlock&           ketGtoBlock,
                                    const int32_t              iContrGto)
    {
        // Batch of Integrals (96,99)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyy = pcDistances.data(119 * idx + 104);

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyy_xyyy = primBuffer.data(150 * idx + 96);

            auto t_yyy_xyyz = primBuffer.data(150 * idx + 97);

            auto t_yyy_xyzz = primBuffer.data(150 * idx + 98);

            // Batch of Integrals (96,99)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, pb_xyz, pb_xyzz, \
                                     pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, pc_x, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyy, pc_xyyyyyz, pc_xyyyyz, \
                                     pc_xyyyyzz, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, pc_xzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyy, pc_yyyyyz, pc_yyyyz, pc_yyyyzz, \
                                     pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyy_xyyy, t_yyy_xyyz, \
                                     t_yyy_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyy_xyyy[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_x[j] + 2.25 * pa_yy[j] * fl2_fx * pb_x[j] + 6.75 * pa_y[j] * fl2_fx * pb_xy[j] + 2.25 * fl2_fx * pb_xyy[j] + 1.5 * pa_yyy[j] * pb_xy[j] * fl1_fx + 4.5 * pa_yy[j] * fl1_fx * pb_xyy[j] + 1.5 * pa_y[j] * fl1_fx * pb_xyyy[j] + pa_yyy[j] * pb_xyyy[j]);

                t_yyy_xyyy[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_x[j] - 5.625 * fl3_fx * pb_x[j] - 4.5 * pa_yy[j] * fl2_fx * pb_x[j] - 2.25 * pa_yy[j] * fl2_fx * pc_x[j] - 11.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 6.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 13.5 * pa_y[j] * fl2_fx * pb_xy[j] - 11.25 * pc_y[j] * fl2_fx * pb_xy[j] - 2.25 * fl2_fx * pc_x[j] * pb_yy[j] - 4.5 * fl2_fx * pb_xyy[j] - 1.5 * pa_yyy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_yyy[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_x[j] * pb_y[j] * fl1_fx - 13.5 * pa_yy[j] * pc_y[j] * pb_xy[j] * fl1_fx - 4.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 4.5 * pa_yy[j] * fl1_fx * pb_xyy[j] - 13.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyy[j] - 1.5 * pa_y[j] * fl1_fx * pb_xyyy[j] - 1.5 * pc_y[j] * fl1_fx * pb_xyyy[j] - 3.0 * pa_yyy[j] * pb_xyy[j] * pc_y[j] - pa_yyy[j] * pc_x[j] * pb_yyy[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xyyy[j]);

                t_yyy_xyyy[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_x[j] + 5.625 * fl3_fx * pb_x[j] + 4.5 * pa_yy[j] * fl2_fx * pc_x[j] + 2.25 * pa_yy[j] * fl2_fx * pb_x[j] + 22.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 11.25 * pa_y[j] * pc_xy[j] * fl2_fx + 13.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 6.75 * pa_y[j] * fl2_fx * pb_xy[j] + 11.25 * pc_yy[j] * fl2_fx * pb_x[j] + 11.25 * pc_xy[j] * fl2_fx * pb_y[j] + 22.5 * pc_y[j] * fl2_fx * pb_xy[j] + 4.5 * fl2_fx * pc_x[j] * pb_yy[j] + 2.25 * fl2_fx * pb_xyy[j] + 1.5 * pa_yyy[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_xy[j] * fl1_fx + 13.5 * pa_yy[j] * pc_y[j] * pb_xy[j] * fl1_fx + 9.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 13.5 * pa_yy[j] * pc_xy[j] * pb_y[j] * fl1_fx + 4.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] + 27.0 * pa_y[j] * pc_yy[j] * pb_xy[j] * fl1_fx + 13.5 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] + 13.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] + 9.0 * pc_yy[j] * fl1_fx * pb_xyy[j] + 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_y[j] * fl1_fx * pb_xyyy[j] + 3.0 * pa_yyy[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_yyy[j] * pc_xy[j] * pb_yy[j] + 9.0 * pa_yy[j] * pc_yy[j] * pb_xyy[j] + 3.0 * pa_yy[j] * pc_xy[j] * pb_yyy[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xyyy[j]);

                t_yyy_xyyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_x[j] - 1.875 * fl3_fx * pb_x[j] - 2.25 * pa_yy[j] * fl2_fx * pc_x[j] - 22.5 * pa_y[j] * pc_xy[j] * fl2_fx - 11.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 6.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 22.5 * pc_yy[j] * fl2_fx * pb_x[j] - 11.25 * pc_xyy[j] * fl2_fx - 22.5 * pc_xy[j] * fl2_fx * pb_y[j] - 11.25 * pc_y[j] * fl2_fx * pb_xy[j] - 2.25 * fl2_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_yyy[j] * pc_xy[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 13.5 * pa_yy[j] * pc_xy[j] * pb_y[j] * fl1_fx - 9.0 * pa_yy[j] * pc_xyy[j] * fl1_fx - 27.0 * pa_y[j] * pc_yy[j] * pb_xy[j] * fl1_fx - 15.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 27.0 * pa_y[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 13.5 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 15.0 * pc_yyy[j] * pb_xy[j] * fl1_fx - 9.0 * pc_xyy[j] * fl1_fx * pb_yy[j] - 9.0 * pc_yy[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyy[j] - pa_yyy[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_yyy[j] * pc_xyy[j] * pb_y[j] - 9.0 * pa_yy[j] * pc_yyy[j] * pb_xy[j] - 9.0 * pa_yy[j] * pc_xyy[j] * pb_yy[j] - 9.0 * pa_y[j] * pc_yyy[j] * pb_xyy[j] - 3.0 * pa_y[j] * pc_xyy[j] * pb_yyy[j] - pc_yyy[j] * pb_xyyy[j]);

                t_yyy_xyyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_x[j] + 11.25 * pa_y[j] * pc_xy[j] * fl2_fx + 22.5 * pc_xyy[j] * fl2_fx + 11.25 * pc_yy[j] * fl2_fx * pb_x[j] + 11.25 * pc_xy[j] * fl2_fx * pb_y[j] + 9.0 * pa_yy[j] * pc_xyy[j] * fl1_fx + 15.0 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 27.0 * pa_y[j] * pc_xyy[j] * pb_y[j] * fl1_fx + 15.0 * pa_y[j] * pc_xyyy[j] * fl1_fx + 15.0 * pc_yyy[j] * pb_xy[j] * fl1_fx + 7.5 * pc_yyyy[j] * pb_x[j] * fl1_fx + 15.0 * pc_xyyy[j] * pb_y[j] * fl1_fx + 9.0 * pc_xyy[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_xyyy[j] + 3.0 * pa_yy[j] * pc_yyyy[j] * pb_x[j] + 9.0 * pa_yy[j] * pc_xyyy[j] * pb_y[j] + 9.0 * pa_y[j] * pc_yyyy[j] * pb_xy[j] + 9.0 * pa_y[j] * pc_xyyy[j] * pb_yy[j] + 3.0 * pc_yyyy[j] * pb_xyy[j] + pc_xyyy[j] * pb_yyy[j]);

                t_yyy_xyyy[j] += fl_s_0_0_5 * (-11.25 * pc_xyy[j] * fl2_fx - 15.0 * pa_y[j] * pc_xyyy[j] * fl1_fx - 7.5 * pc_yyyy[j] * pb_x[j] * fl1_fx - 15.0 * pc_xyyy[j] * pb_y[j] * fl1_fx - 7.5 * pc_xyyyy[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xyyyy[j] - 3.0 * pa_y[j] * pc_yyyyy[j] * pb_x[j] - 9.0 * pa_y[j] * pc_xyyyy[j] * pb_y[j] - 3.0 * pc_yyyyy[j] * pb_xy[j] - 3.0 * pc_xyyyy[j] * pb_yy[j]);

                t_yyy_xyyy[j] += fl_s_0_0_6 * (7.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyyyy[j] + pc_yyyyyy[j] * pb_x[j] + 3.0 * pc_xyyyyy[j] * pb_y[j]);

                t_yyy_xyyy[j] += -fl_s_0_0_7 * pc_xyyyyyy[j];

                t_yyy_xyyz[j] = fl_s_0_0_0 * (2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_yyy[j] * pb_xz[j] * fl1_fx + 3.0 * pa_yy[j] * fl1_fx * pb_xyz[j] + 1.5 * pa_y[j] * fl1_fx * pb_xyyz[j] + pa_yyy[j] * pb_xyyz[j]);

                t_yyy_xyyz[j] += fl_s_0_0_1 * (-2.25 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_xz[j] - 3.75 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pb_xy[j] * pc_z[j] - 1.5 * fl2_fx * pc_x[j] * pb_yz[j] - 3.0 * fl2_fx * pb_xyz[j] - 0.5 * pa_yyy[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyy[j] * pb_xz[j] * fl1_fx - 0.5 * pa_yyy[j] * pc_x[j] * fl1_fx * pb_z[j] - 4.5 * pa_yy[j] * pc_y[j] * pb_xz[j] * fl1_fx - 3.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] - 3.0 * pa_yy[j] * fl1_fx * pb_xyz[j] - 9.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_y[j] * fl1_fx * pb_xyy[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyz[j] - 1.5 * pa_y[j] * fl1_fx * pb_xyyz[j] - 1.5 * pc_y[j] * fl1_fx * pb_xyyz[j] - pa_yyy[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_yyy[j] * pb_xyz[j] * pc_y[j] - pa_yyy[j] * pc_x[j] * pb_yyz[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xyyz[j]);

                t_yyy_xyyz[j] += fl_s_0_0_2 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] + 4.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 7.5 * pc_y[j] * fl2_fx * pb_xz[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 3.0 * fl2_fx * pb_xy[j] * pc_z[j] + 3.0 * fl2_fx * pc_x[j] * pb_yz[j] + 1.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_yyy[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_yyy[j] * pc_xz[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_x[j] * fl1_fx * pb_z[j] + 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pa_yy[j] * pc_y[j] * pb_xz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_y[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xy[j] * pc_z[j] + 3.0 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] + 9.0 * pa_y[j] * pc_yy[j] * pb_xz[j] * fl1_fx + 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 9.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 9.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] + 6.0 * pc_yy[j] * fl1_fx * pb_xyz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yy[j] + 1.5 * pa_y[j] * fl1_fx * pb_xyy[j] * pc_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_y[j] * fl1_fx * pb_xyyz[j] + 2.0 * pa_yyy[j] * pb_xy[j] * pc_yz[j] + pa_yyy[j] * pb_xz[j] * pc_yy[j] + pa_yyy[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_yyy[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xyy[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_xyz[j] + 3.0 * pa_yy[j] * pc_xy[j] * pb_yyz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xyyz[j]);

                t_yyy_xyyz[j] += fl_s_0_0_3 * (-4.5 * pa_y[j] * fl2_fx * pc_xz[j] - 2.25 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 7.5 * pc_xy[j] * fl2_fx * pb_z[j] - 3.75 * pc_y[j] * fl2_fx * pb_xz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_z[j] - 1.5 * fl2_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_yyy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_y[j] - 9.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 9.0 * pa_y[j] * pc_yy[j] * pb_xz[j] * fl1_fx - 9.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 9.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] - 5.0 * pc_yyy[j] * pb_xz[j] * fl1_fx - 6.0 * pc_yyz[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xyy[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yy[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - pa_yyy[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_yyy[j] * pc_xyz[j] * pb_y[j] - pa_yyy[j] * pc_xyy[j] * pb_z[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_xy[j] - 3.0 * pa_yy[j] * pc_yyy[j] * pb_xz[j] - 3.0 * pa_yy[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_yy[j] * pc_xyy[j] * pb_yz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_xyy[j] - 6.0 * pa_y[j] * pc_yyy[j] * pb_xyz[j] - 3.0 * pa_y[j] * pc_xyy[j] * pb_yyz[j] - pc_yyy[j] * pb_xyyz[j]);

                t_yyy_xyyz[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyyz[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] + 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 5.0 * pc_yyyz[j] * pb_x[j] * fl1_fx + 5.0 * pc_yyy[j] * pb_xz[j] * fl1_fx + 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] + 6.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 6.0 * pc_yyz[j] * fl1_fx * pb_xy[j] + 6.0 * pc_xyy[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_xyyz[j] + 3.0 * pa_yy[j] * pc_yyyz[j] * pb_x[j] + 6.0 * pa_yy[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_xyyy[j] * pb_z[j] + 6.0 * pa_y[j] * pc_yyyz[j] * pb_xy[j] + 3.0 * pa_y[j] * pc_yyyy[j] * pb_xz[j] + 3.0 * pa_y[j] * pc_xyyz[j] * pb_yy[j] + 6.0 * pa_y[j] * pc_xyyy[j] * pb_yz[j] + pc_yyyz[j] * pb_xyy[j] + 2.0 * pc_yyyy[j] * pb_xyz[j] + pc_xyyy[j] * pb_yyz[j]);

                t_yyy_xyyz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 9.0 * pa_y[j] * pc_xyyz[j] * fl1_fx - 5.0 * pc_yyyz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - 5.0 * pc_xyyy[j] * fl1_fx * pb_z[j] - 6.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xyyyz[j] - 3.0 * pa_y[j] * pc_yyyyz[j] * pb_x[j] - 6.0 * pa_y[j] * pc_xyyyz[j] * pb_y[j] - 3.0 * pa_y[j] * pc_xyyyy[j] * pb_z[j] - 2.0 * pc_yyyyz[j] * pb_xy[j] - pc_yyyyy[j] * pb_xz[j] - pc_xyyyz[j] * pb_yy[j] - 2.0 * pc_xyyyy[j] * pb_yz[j]);

                t_yyy_xyyz[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyyyz[j] + pc_yyyyyz[j] * pb_x[j] + 2.0 * pc_xyyyyz[j] * pb_y[j] + pc_xyyyyy[j] * pb_z[j]);

                t_yyy_xyyz[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];

                t_yyy_xyzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xzz[j] + 0.5 * pa_yyy[j] * pb_xy[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pb_xzz[j] + 1.5 * pa_y[j] * fl1_fx * pb_xyzz[j] + pa_yyy[j] * pb_xyzz[j]);

                t_yyy_xyzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 1.5 * pa_yy[j] * fl2_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_xy[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 1.5 * fl2_fx * pb_xzz[j] - 0.5 * pa_yyy[j] * pb_xy[j] * fl1_fx - 0.5 * pa_yyy[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_yyy[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_y[j] * pb_xy[j] * fl1_fx - 3.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_z[j] - 1.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_yy[j] * fl1_fx * pb_xzz[j] - 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] - 3.0 * pa_y[j] * fl1_fx * pb_xyz[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yzz[j] - 1.5 * pa_y[j] * fl1_fx * pb_xyzz[j] - 1.5 * pc_y[j] * fl1_fx * pb_xyzz[j] - 2.0 * pa_yyy[j] * pb_xyz[j] * pc_z[j] - pa_yyy[j] * pb_xzz[j] * pc_y[j] - pa_yyy[j] * pc_x[j] * pb_yzz[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xyzz[j]);

                t_yyy_xyzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 2.25 * pa_y[j] * pc_xy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 1.5 * pc_y[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pb_x[j] * pc_zz[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * fl2_fx * pb_xz[j] * pc_z[j] + 1.5 * fl2_fx * pc_x[j] * pb_zz[j] + 0.75 * fl2_fx * pb_xzz[j] + 0.5 * pa_yyy[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_xy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_y[j] * pb_xy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx + 1.5 * pa_yy[j] * pc_xy[j] * pb_y[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_zz[j] + 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_z[j] + 3.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_z[j] + 1.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] + 1.5 * pa_y[j] * pc_yy[j] * pb_xy[j] * fl1_fx + 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 4.5 * pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_xzz[j] + 1.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_zz[j] + 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yz[j] + 3.0 * pa_y[j] * fl1_fx * pb_xyz[j] * pc_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yzz[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_y[j] * fl1_fx * pb_xyzz[j] + pa_yyy[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_yyy[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_yyy[j] * pc_xz[j] * pb_yz[j] + pa_yyy[j] * pc_xy[j] * pb_zz[j] + 6.0 * pa_yy[j] * pc_yz[j] * pb_xyz[j] + 3.0 * pa_yy[j] * pc_yy[j] * pb_xzz[j] + 3.0 * pa_yy[j] * pc_xy[j] * pb_yzz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xyzz[j]);

                t_yyy_xyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 4.5 * pa_y[j] * pc_xy[j] * fl2_fx - 2.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 3.0 * pc_yy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xyy[j] * fl2_fx - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_xzz[j] - 1.5 * fl2_fx * pb_x[j] * pc_zz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_z[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_yyy[j] * pc_xy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yy[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xy[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xyy[j] * fl1_fx - 1.5 * pa_yy[j] * fl1_fx * pc_xzz[j] - 1.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_zz[j] - 3.0 * pa_yy[j] * fl1_fx * pc_xz[j] * pb_z[j] - 1.5 * pa_y[j] * pc_yy[j] * pb_xy[j] * fl1_fx - 1.5 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx - 1.5 * pa_y[j] * pc_xyy[j] * pb_y[j] * fl1_fx - 4.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] - 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 9.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 4.5 * pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yyy[j] * pb_xy[j] * fl1_fx - 6.0 * pc_yyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] - 1.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_zz[j] - 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yz[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_yzz[j] - pa_yyy[j] * pb_x[j] * pc_yzz[j] - pa_yyy[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_yyy[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_xy[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_xz[j] - 6.0 * pa_yy[j] * pc_xyz[j] * pb_yz[j] - 3.0 * pa_yy[j] * pc_xyy[j] * pb_zz[j] - 6.0 * pa_y[j] * pc_yyz[j] * pb_xyz[j] - 3.0 * pa_y[j] * pc_yyy[j] * pb_xzz[j] - 3.0 * pa_y[j] * pc_xyy[j] * pb_yzz[j] - pc_yyy[j] * pb_xyzz[j]);

                t_yyy_xyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 2.25 * pa_y[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xzz[j] + 0.75 * fl2_fx * pb_x[j] * pc_zz[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 1.5 * pa_yy[j] * pc_xyy[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_xzz[j] + 1.5 * pa_y[j] * pc_yyy[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * pc_xyy[j] * pb_y[j] * fl1_fx + 1.5 * pa_y[j] * pc_xyyy[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyzz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_x[j] + 9.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * pb_xy[j] * fl1_fx + 0.5 * pc_yyyy[j] * pb_x[j] * fl1_fx + 0.5 * pc_xyyy[j] * pb_y[j] * fl1_fx + 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yyz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xyy[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + pa_yyy[j] * pc_xyzz[j] + 3.0 * pa_yy[j] * pc_yyzz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xyzz[j] * pb_y[j] + 6.0 * pa_yy[j] * pc_xyyz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_xy[j] + 6.0 * pa_y[j] * pc_yyyz[j] * pb_xz[j] + 6.0 * pa_y[j] * pc_xyyz[j] * pb_yz[j] + 3.0 * pa_y[j] * pc_xyyy[j] * pb_zz[j] + 2.0 * pc_yyyz[j] * pb_xyz[j] + pc_yyyy[j] * pb_xzz[j] + pc_xyyy[j] * pb_yzz[j]);

                t_yyy_xyzz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 0.75 * fl2_fx * pc_xzz[j] - 1.5 * pa_y[j] * pc_xyyy[j] * fl1_fx - 4.5 * pa_y[j] * pc_xyzz[j] * fl1_fx - 0.5 * pc_yyyy[j] * pb_x[j] * fl1_fx - 0.5 * pc_xyyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyyyy[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] - 6.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_xyyzz[j] - 3.0 * pa_y[j] * pc_yyyzz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xyyzz[j] * pb_y[j] - 6.0 * pa_y[j] * pc_xyyyz[j] * pb_z[j] - pc_yyyzz[j] * pb_xy[j] - 2.0 * pc_yyyyz[j] * pb_xz[j] - 2.0 * pc_xyyyz[j] * pb_yz[j] - pc_xyyyy[j] * pb_zz[j]);

                t_yyy_xyzz[j] += fl_s_0_0_6 * (0.5 * pc_xyyyy[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyyzz[j] + pc_yyyyzz[j] * pb_x[j] + pc_xyyyzz[j] * pb_y[j] + 2.0 * pc_xyyyyz[j] * pb_z[j]);

                t_yyy_xyzz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_99_102(      CMemBlock2D<double>& primBuffer,
                                     const CMemBlock2D<double>& auxBuffer,
                                     const CMemBlock2D<double>& osFactors,
                                     const CMemBlock2D<double>& paDistances,
                                     const CMemBlock2D<double>& pbDistances,
                                     const CMemBlock2D<double>& pcDistances,
                                     const CGtoBlock&           braGtoBlock,
                                     const CGtoBlock&           ketGtoBlock,
                                     const int32_t              iContrGto)
    {
        // Batch of Integrals (99,102)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            auto pc_yyyyyyy = pcDistances.data(119 * idx + 111);

            auto pc_yyyyyyz = pcDistances.data(119 * idx + 112);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyy_xzzz = primBuffer.data(150 * idx + 99);

            auto t_yyy_yyyy = primBuffer.data(150 * idx + 100);

            auto t_yyy_yyyz = primBuffer.data(150 * idx + 101);

            // Batch of Integrals (99,102)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, pb_yyy, \
                                     pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xy, pc_xyy, pc_xyyy, \
                                     pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, \
                                     pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyy, \
                                     pc_yyyyyyy, pc_yyyyyyz, pc_yyyyyz, pc_yyyyz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, \
                                     s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyy_xzzz, t_yyy_yyyy, \
                                     t_yyy_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyy_xzzz[j] = fl_s_0_0_0 * (2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pa_yyy[j] * pb_xz[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pb_xzzz[j] + pa_yyy[j] * pb_xzzz[j]);

                t_yyy_xzzz[j] += fl_s_0_0_1 * (-4.5 * pa_y[j] * fl2_fx * pb_xz[j] - 2.25 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yyy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yyy[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_x[j] * pb_z[j] * fl1_fx - 4.5 * pa_yy[j] * pc_y[j] * pb_xz[j] * fl1_fx - 4.5 * pa_y[j] * fl1_fx * pb_xzz[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_zzz[j] - 1.5 * pa_y[j] * fl1_fx * pb_xzzz[j] - 1.5 * pc_y[j] * fl1_fx * pb_xzzz[j] - 3.0 * pa_yyy[j] * pb_xzz[j] * pc_z[j] - pa_yyy[j] * pc_x[j] * pb_zzz[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_xzzz[j]);

                t_yyy_xzzz[j] += fl_s_0_0_2 * (4.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] + 4.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 4.5 * pc_y[j] * fl2_fx * pb_xz[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_yyy[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_y[j] * pb_xz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pa_yy[j] * pc_xy[j] * pb_z[j] * fl1_fx + 4.5 * pa_y[j] * pc_yy[j] * pb_xz[j] * fl1_fx + 4.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_zz[j] + 4.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_zz[j] + 4.5 * pa_y[j] * fl1_fx * pb_xzz[j] * pc_z[j] + 1.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_zzz[j] + 4.5 * pc_yz[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_y[j] * fl1_fx * pb_xzzz[j] + 3.0 * pa_yyy[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_yyy[j] * pc_xz[j] * pb_zz[j] + 9.0 * pa_yy[j] * pc_yz[j] * pb_xzz[j] + 3.0 * pa_yy[j] * pc_xy[j] * pb_zzz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_xzzz[j]);

                t_yyy_xzzz[j] += fl_s_0_0_3 * (-4.5 * pa_y[j] * fl2_fx * pc_xz[j] - 2.25 * pa_y[j] * fl2_fx * pb_x[j] * pc_z[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yyy[j] * pc_xz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xy[j] * pb_z[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_y[j] * pc_yy[j] * pb_xz[j] * fl1_fx - 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 4.5 * pa_y[j] * pc_xyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_yyy[j] * pb_xz[j] * fl1_fx - 1.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_zzz[j] - 4.5 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] - 4.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_zz[j] - 4.5 * pa_y[j] * fl1_fx * pc_xz[j] * pb_zz[j] - 4.5 * pc_yzz[j] * fl1_fx * pb_xz[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_yz[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - pa_yyy[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_yyy[j] * pc_xzz[j] * pb_z[j] - 9.0 * pa_yy[j] * pc_yzz[j] * pb_xz[j] - 9.0 * pa_yy[j] * pc_xyz[j] * pb_zz[j] - 9.0 * pa_y[j] * pc_yyz[j] * pb_xzz[j] - 3.0 * pa_y[j] * pc_xyy[j] * pb_zzz[j] - pc_yyy[j] * pb_xzzz[j]);

                t_yyy_xzzz[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyy[j] * pb_z[j] * fl1_fx + 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx + 1.5 * pc_yyy[j] * pb_xz[j] * fl1_fx + 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xyyy[j] * pb_z[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pc_xzzz[j] + 1.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_zzz[j] + 4.5 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] + 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_yzz[j] * fl1_fx * pb_xz[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_yyy[j] * pc_xzzz[j] + 3.0 * pa_yy[j] * pc_yzzz[j] * pb_x[j] + 9.0 * pa_yy[j] * pc_xyzz[j] * pb_z[j] + 9.0 * pa_y[j] * pc_yyzz[j] * pb_xz[j] + 9.0 * pa_y[j] * pc_xyyz[j] * pb_zz[j] + 3.0 * pc_yyyz[j] * pb_xzz[j] + pc_xyyy[j] * pb_zzz[j]);

                t_yyy_xzzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_y[j] * pc_xyyz[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pa_y[j] * fl1_fx * pc_xzzz[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] - 4.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_xyzzz[j] - 3.0 * pa_y[j] * pc_yyzzz[j] * pb_x[j] - 9.0 * pa_y[j] * pc_xyyzz[j] * pb_z[j] - 3.0 * pc_yyyzz[j] * pb_xz[j] - 3.0 * pc_xyyyz[j] * pb_zz[j]);

                t_yyy_xzzz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyzzz[j] + pc_yyyzzz[j] * pb_x[j] + 3.0 * pc_xyyyzz[j] * pb_z[j]);

                t_yyy_xzzz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];

                t_yyy_yyyy[j] = fl_s_0_0_0 * (5.625 * pa_y[j] * fl3_fx + 7.5 * fl3_fx * pb_y[j] + 0.75 * pa_yyy[j] * fl2_fx + 9.0 * pa_yy[j] * fl2_fx * pb_y[j] + 13.5 * pa_y[j] * fl2_fx * pb_yy[j] + 3.0 * fl2_fx * pb_yyy[j] + 3.0 * pa_yyy[j] * pb_yy[j] * fl1_fx + 6.0 * pa_yy[j] * fl1_fx * pb_yyy[j] + 1.5 * pa_y[j] * fl1_fx * pb_yyyy[j] + pa_yyy[j] * pb_yyyy[j]);

                t_yyy_yyyy[j] += fl_s_0_0_1 * (-16.875 * pa_y[j] * fl3_fx - 13.125 * pc_y[j] * fl3_fx - 22.5 * fl3_fx * pb_y[j] - 1.5 * pa_yyy[j] * fl2_fx - 11.25 * pa_yy[j] * pc_y[j] * fl2_fx - 18.0 * pa_yy[j] * fl2_fx * pb_y[j] - 45.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 27.0 * pa_y[j] * fl2_fx * pb_yy[j] - 22.5 * pc_y[j] * fl2_fx * pb_yy[j] - 6.0 * fl2_fx * pb_yyy[j] - 3.0 * pa_yyy[j] * pb_yy[j] * fl1_fx - 6.0 * pa_yyy[j] * pb_y[j] * pc_y[j] * fl1_fx - 27.0 * pa_yy[j] * pc_y[j] * pb_yy[j] * fl1_fx - 6.0 * pa_yy[j] * fl1_fx * pb_yyy[j] - 18.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_y[j] * fl1_fx * pb_yyyy[j] - 1.5 * pc_y[j] * fl1_fx * pb_yyyy[j] - 4.0 * pa_yyy[j] * pb_yyy[j] * pc_y[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_yyyy[j]);

                t_yyy_yyyy[j] += fl_s_0_0_2 * (16.875 * pa_y[j] * fl3_fx + 39.375 * pc_y[j] * fl3_fx + 22.5 * fl3_fx * pb_y[j] + 0.75 * pa_yyy[j] * fl2_fx + 22.5 * pa_yy[j] * pc_y[j] * fl2_fx + 9.0 * pa_yy[j] * fl2_fx * pb_y[j] + 33.75 * pa_y[j] * pc_yy[j] * fl2_fx + 90.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 13.5 * pa_y[j] * fl2_fx * pb_yy[j] + 45.0 * pc_yy[j] * fl2_fx * pb_y[j] + 45.0 * pc_y[j] * fl2_fx * pb_yy[j] + 3.0 * fl2_fx * pb_yyy[j] + 6.0 * pa_yyy[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_yyy[j] * pc_yy[j] * fl1_fx + 27.0 * pa_yy[j] * pc_y[j] * pb_yy[j] * fl1_fx + 36.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 54.0 * pa_y[j] * pc_yy[j] * pb_yy[j] * fl1_fx + 18.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 12.0 * pc_yy[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_y[j] * fl1_fx * pb_yyyy[j] + 6.0 * pa_yyy[j] * pb_yy[j] * pc_yy[j] + 12.0 * pa_yy[j] * pc_yy[j] * pb_yyy[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_yyyy[j]);

                t_yyy_yyyy[j] += fl_s_0_0_3 * (-5.625 * pa_y[j] * fl3_fx - 39.375 * pc_y[j] * fl3_fx - 7.5 * fl3_fx * pb_y[j] - 11.25 * pa_yy[j] * pc_y[j] * fl2_fx - 67.5 * pa_y[j] * pc_yy[j] * fl2_fx - 45.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 26.25 * pc_yyy[j] * fl2_fx - 90.0 * pc_yy[j] * fl2_fx * pb_y[j] - 22.5 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * pa_yyy[j] * pc_yy[j] * fl1_fx - 36.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx - 15.0 * pa_yy[j] * pc_yyy[j] * fl1_fx - 54.0 * pa_y[j] * pc_yy[j] * pb_yy[j] * fl1_fx - 60.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 30.0 * pc_yyy[j] * pb_yy[j] * fl1_fx - 12.0 * pc_yy[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_yyy[j] * pb_y[j] * pc_yyy[j] - 18.0 * pa_yy[j] * pc_yyy[j] * pb_yy[j] - 12.0 * pa_y[j] * pc_yyy[j] * pb_yyy[j] - pc_yyy[j] * pb_yyyy[j]);

                t_yyy_yyyy[j] += fl_s_0_0_4 * (13.125 * pc_y[j] * fl3_fx + 33.75 * pa_y[j] * pc_yy[j] * fl2_fx + 52.5 * pc_yyy[j] * fl2_fx + 45.0 * pc_yy[j] * fl2_fx * pb_y[j] + 15.0 * pa_yy[j] * pc_yyy[j] * fl1_fx + 60.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 22.5 * pa_y[j] * pc_yyyy[j] * fl1_fx + 30.0 * pc_yyy[j] * pb_yy[j] * fl1_fx + 30.0 * pc_yyyy[j] * pb_y[j] * fl1_fx + pa_yyy[j] * pc_yyyy[j] + 12.0 * pa_yy[j] * pc_yyyy[j] * pb_y[j] + 18.0 * pa_y[j] * pc_yyyy[j] * pb_yy[j] + 4.0 * pc_yyyy[j] * pb_yyy[j]);

                t_yyy_yyyy[j] += fl_s_0_0_5 * (-26.25 * pc_yyy[j] * fl2_fx - 22.5 * pa_y[j] * pc_yyyy[j] * fl1_fx - 30.0 * pc_yyyy[j] * pb_y[j] * fl1_fx - 10.5 * pc_yyyyy[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yyyyy[j] - 12.0 * pa_y[j] * pc_yyyyy[j] * pb_y[j] - 6.0 * pc_yyyyy[j] * pb_yy[j]);

                t_yyy_yyyy[j] += fl_s_0_0_6 * (10.5 * pc_yyyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyyyy[j] + 4.0 * pc_yyyyyy[j] * pb_y[j]);

                t_yyy_yyyy[j] += -fl_s_0_0_7 * pc_yyyyyyy[j];

                t_yyy_yyyz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_z[j] + 2.25 * pa_yy[j] * fl2_fx * pb_z[j] + 6.75 * pa_y[j] * fl2_fx * pb_yz[j] + 2.25 * fl2_fx * pb_yyz[j] + 1.5 * pa_yyy[j] * pb_yz[j] * fl1_fx + 4.5 * pa_yy[j] * fl1_fx * pb_yyz[j] + 1.5 * pa_y[j] * fl1_fx * pb_yyyz[j] + pa_yyy[j] * pb_yyyz[j]);

                t_yyy_yyyz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_z[j] - 5.625 * fl3_fx * pb_z[j] - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 4.5 * pa_yy[j] * fl2_fx * pb_z[j] - 11.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 6.75 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 13.5 * pa_y[j] * fl2_fx * pb_yz[j] - 11.25 * pc_y[j] * fl2_fx * pb_yz[j] - 2.25 * fl2_fx * pb_yy[j] * pc_z[j] - 4.5 * fl2_fx * pb_yyz[j] - 1.5 * pa_yyy[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_yyy[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_z[j] - 13.5 * pa_yy[j] * pc_y[j] * pb_yz[j] * fl1_fx - 4.5 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_z[j] - 4.5 * pa_yy[j] * fl1_fx * pb_yyz[j] - 13.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] - 1.5 * pa_y[j] * fl1_fx * pb_yyy[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pb_yyyz[j] - 1.5 * pc_y[j] * fl1_fx * pb_yyyz[j] - pa_yyy[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_yyy[j] * pb_yyz[j] * pc_y[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_yyyz[j]);

                t_yyy_yyyz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pb_z[j] + 4.5 * pa_yy[j] * fl2_fx * pc_z[j] + 2.25 * pa_yy[j] * fl2_fx * pb_z[j] + 11.25 * pa_y[j] * pc_yz[j] * fl2_fx + 22.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 13.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] + 6.75 * pa_y[j] * fl2_fx * pb_yz[j] + 11.25 * pc_yy[j] * fl2_fx * pb_z[j] + 11.25 * pc_yz[j] * fl2_fx * pb_y[j] + 22.5 * pc_y[j] * fl2_fx * pb_yz[j] + 4.5 * fl2_fx * pb_yy[j] * pc_z[j] + 2.25 * fl2_fx * pb_yyz[j] + 1.5 * pa_yyy[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_y[j] * fl1_fx * pb_z[j] + 13.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 13.5 * pa_yy[j] * pc_y[j] * pb_yz[j] * fl1_fx + 9.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] + 4.5 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_z[j] + 27.0 * pa_y[j] * pc_yy[j] * pb_yz[j] * fl1_fx + 13.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 13.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] + 9.0 * pc_yy[j] * fl1_fx * pb_yyz[j] + 1.5 * pa_y[j] * fl1_fx * pb_yyy[j] * pc_z[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_y[j] * fl1_fx * pb_yyyz[j] + 3.0 * pa_yyy[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_yyy[j] * pb_yz[j] * pc_yy[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_yyy[j] + 9.0 * pa_yy[j] * pc_yy[j] * pb_yyz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_yyyz[j]);

                t_yyy_yyyz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pb_z[j] - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 22.5 * pa_y[j] * pc_yz[j] * fl2_fx - 11.25 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 6.75 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 11.25 * pc_yyz[j] * fl2_fx - 22.5 * pc_yy[j] * fl2_fx * pb_z[j] - 22.5 * pc_yz[j] * fl2_fx * pb_y[j] - 11.25 * pc_y[j] * fl2_fx * pb_yz[j] - 2.25 * fl2_fx * pb_yy[j] * pc_z[j] - 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx - 13.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yy[j] * fl1_fx * pb_z[j] - 27.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 27.0 * pa_y[j] * pc_yy[j] * pb_yz[j] * fl1_fx - 15.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 13.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 15.0 * pc_yyy[j] * pb_yz[j] * fl1_fx - 9.0 * pc_yyz[j] * fl1_fx * pb_yy[j] - 9.0 * pc_yy[j] * fl1_fx * pb_yyz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_yyy[j] * pb_y[j] * pc_yyz[j] - pa_yyy[j] * pc_yyy[j] * pb_z[j] - 9.0 * pa_yy[j] * pc_yyz[j] * pb_yy[j] - 9.0 * pa_yy[j] * pc_yyy[j] * pb_yz[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_yyy[j] - 9.0 * pa_y[j] * pc_yyy[j] * pb_yyz[j] - pc_yyy[j] * pb_yyyz[j]);

                t_yyy_yyyz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 11.25 * pa_y[j] * pc_yz[j] * fl2_fx + 22.5 * pc_yyz[j] * fl2_fx + 11.25 * pc_yy[j] * fl2_fx * pb_z[j] + 11.25 * pc_yz[j] * fl2_fx * pb_y[j] + 9.0 * pa_yy[j] * pc_yyz[j] * fl1_fx + 27.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 15.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 15.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 15.0 * pc_yyyz[j] * pb_y[j] * fl1_fx + 15.0 * pc_yyy[j] * pb_yz[j] * fl1_fx + 7.5 * pc_yyyy[j] * fl1_fx * pb_z[j] + 9.0 * pc_yyz[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_yyyz[j] + 9.0 * pa_yy[j] * pc_yyyz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_yyyy[j] * pb_z[j] + 9.0 * pa_y[j] * pc_yyyz[j] * pb_yy[j] + 9.0 * pa_y[j] * pc_yyyy[j] * pb_yz[j] + pc_yyyz[j] * pb_yyy[j] + 3.0 * pc_yyyy[j] * pb_yyz[j]);

                t_yyy_yyyz[j] += fl_s_0_0_5 * (-11.25 * pc_yyz[j] * fl2_fx - 15.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 15.0 * pc_yyyz[j] * pb_y[j] * fl1_fx - 7.5 * pc_yyyyz[j] * fl1_fx - 7.5 * pc_yyyy[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_yyyyz[j] - 9.0 * pa_y[j] * pc_yyyyz[j] * pb_y[j] - 3.0 * pa_y[j] * pc_yyyyy[j] * pb_z[j] - 3.0 * pc_yyyyz[j] * pb_yy[j] - 3.0 * pc_yyyyy[j] * pb_yz[j]);

                t_yyy_yyyz[j] += fl_s_0_0_6 * (7.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyyyz[j] + 3.0 * pc_yyyyyz[j] * pb_y[j] + pc_yyyyyy[j] * pb_z[j]);

                t_yyy_yyyz[j] += -fl_s_0_0_7 * pc_yyyyyyz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_102_105(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (102,105)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyy = paDistances.data(19 * idx + 15);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyyzz = pcDistances.data(119 * idx + 113);

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyy_yyzz = primBuffer.data(150 * idx + 102);

            auto t_yyy_yzzz = primBuffer.data(150 * idx + 103);

            auto t_yyy_zzzz = primBuffer.data(150 * idx + 104);

            // Batch of Integrals (102,105)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyy, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, pb_yzzz, \
                                     pb_z, pb_zz, pb_zzz, pb_zzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, \
                                     pc_yyyyyzz, pc_yyyyz, pc_yyyyzz, pc_yyyyzzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, \
                                     pc_yyyzzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, \
                                     s_0_0_6, s_0_0_7, t_yyy_yyzz, t_yyy_yzzz, t_yyy_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyy_yyzz[j] = fl_s_0_0_0 * (1.125 * pa_y[j] * fl3_fx + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_yyy[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * fl2_fx * pb_zz[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pb_yzz[j] + 0.5 * pa_yyy[j] * pb_yy[j] * fl1_fx + 0.5 * pa_yyy[j] * fl1_fx * pb_zz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_yzz[j] + 1.5 * pa_y[j] * fl1_fx * pb_yyzz[j] + pa_yyy[j] * pb_yyzz[j]);

                t_yyy_yyzz[j] += fl_s_0_0_1 * (-3.375 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 2.25 * fl3_fx * pb_y[j] - 0.5 * pa_yyy[j] * fl2_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 3.0 * pa_yy[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_zz[j] - 3.75 * pc_y[j] * fl2_fx * pb_zz[j] - 1.5 * pa_y[j] * fl2_fx * pb_yy[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pb_yz[j] * pc_z[j] - 3.0 * fl2_fx * pb_yzz[j] - 0.5 * pa_yyy[j] * pb_yy[j] * fl1_fx - pa_yyy[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_yyy[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_yyy[j] * fl1_fx * pb_zz[j] - 1.5 * pa_yy[j] * pc_y[j] * pb_yy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] - 6.0 * pa_yy[j] * fl1_fx * pb_yz[j] * pc_z[j] - 3.0 * pa_yy[j] * fl1_fx * pb_yzz[j] - 9.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] - 3.0 * pa_y[j] * fl1_fx * pb_yyz[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pb_yyzz[j] - 1.5 * pc_y[j] * fl1_fx * pb_yyzz[j] - 2.0 * pa_yyy[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_yyy[j] * pb_yzz[j] * pc_y[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_yyzz[j]);

                t_yyy_yyzz[j] += fl_s_0_0_2 * (3.375 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 2.25 * fl3_fx * pb_y[j] + 0.25 * pa_yyy[j] * fl2_fx + 4.5 * pa_yy[j] * pc_y[j] * fl2_fx + 1.5 * pa_yy[j] * fl2_fx * pb_y[j] + 4.5 * pa_y[j] * pc_yy[j] * fl2_fx + 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * fl2_fx * pc_zz[j] + 9.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_zz[j] + 3.0 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_yz[j] * fl2_fx * pb_z[j] + 7.5 * pc_y[j] * fl2_fx * pb_zz[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * pc_y[j] * fl2_fx * pb_yy[j] + 1.5 * fl2_fx * pb_y[j] * pc_zz[j] + 6.0 * fl2_fx * pb_yz[j] * pc_z[j] + 1.5 * fl2_fx * pb_yzz[j] + pa_yyy[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_yyy[j] * pc_yy[j] * fl1_fx + 0.5 * pa_yyy[j] * fl1_fx * pc_zz[j] + pa_yyy[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_yy[j] * pc_y[j] * pb_yy[j] * fl1_fx + 3.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx + 9.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 4.5 * pa_yy[j] * pc_y[j] * fl1_fx * pb_zz[j] + 3.0 * pa_yy[j] * fl1_fx * pb_y[j] * pc_zz[j] + 6.0 * pa_yy[j] * fl1_fx * pb_yz[j] * pc_z[j] + 1.5 * pa_y[j] * pc_yy[j] * pb_yy[j] * fl1_fx + 9.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 18.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 9.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 6.0 * pc_yy[j] * fl1_fx * pb_yzz[j] + 1.5 * pa_y[j] * fl1_fx * pb_yy[j] * pc_zz[j] + 3.0 * pa_y[j] * fl1_fx * pb_yyz[j] * pc_z[j] + 3.0 * pc_yz[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_y[j] * fl1_fx * pb_yyzz[j] + pa_yyy[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_yyy[j] * pb_yz[j] * pc_yz[j] + pa_yyy[j] * pc_yy[j] * pb_zz[j] + 6.0 * pa_yy[j] * pc_yz[j] * pb_yyz[j] + 6.0 * pa_yy[j] * pc_yy[j] * pb_yzz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_yyzz[j]);

                t_yyy_yyzz[j] += fl_s_0_0_3 * (-1.125 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 0.75 * fl3_fx * pb_y[j] - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 9.0 * pa_y[j] * pc_yy[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 4.5 * pa_y[j] * fl2_fx * pc_zz[j] - 4.5 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 2.5 * pc_yyy[j] * fl2_fx - 6.0 * pc_yy[j] * fl2_fx * pb_y[j] - 3.75 * pc_yzz[j] * fl2_fx - 15.0 * pc_yz[j] * fl2_fx * pb_z[j] - 3.75 * pc_y[j] * fl2_fx * pb_zz[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * fl2_fx * pb_y[j] * pc_zz[j] - 3.0 * fl2_fx * pb_yz[j] * pc_z[j] - 0.5 * pa_yyy[j] * pc_yy[j] * fl1_fx - 0.5 * pa_yyy[j] * fl1_fx * pc_zz[j] - 3.0 * pa_yy[j] * pc_yy[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yyy[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * fl1_fx * pb_y[j] * pc_zz[j] - 1.5 * pa_y[j] * pc_yy[j] * pb_yy[j] * fl1_fx - 3.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx - 18.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 9.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] - 9.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 18.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yyy[j] * pb_yy[j] * fl1_fx - 5.0 * pc_yyy[j] * fl1_fx * pb_zz[j] - 12.0 * pc_yyz[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yy[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_y[j] * fl1_fx * pb_yy[j] * pc_zz[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yz[j] * fl1_fx * pb_yyz[j] - 2.0 * pa_yyy[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_yyy[j] * pc_yyz[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_yy[j] - 12.0 * pa_yy[j] * pc_yyz[j] * pb_yz[j] - 3.0 * pa_yy[j] * pc_yyy[j] * pb_zz[j] - 6.0 * pa_y[j] * pc_yyz[j] * pb_yyz[j] - 6.0 * pa_y[j] * pc_yyy[j] * pb_yzz[j] - pc_yyy[j] * pb_yyzz[j]);

                t_yyy_yyzz[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 4.5 * pa_y[j] * pc_yy[j] * fl2_fx + 2.25 * pa_y[j] * fl2_fx * pc_zz[j] + 5.0 * pc_yyy[j] * fl2_fx + 3.0 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_yzz[j] * fl2_fx + 7.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pb_y[j] * pc_zz[j] + 1.5 * pa_yy[j] * pc_yyy[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyy[j] * pb_y[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyyy[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 18.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 9.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * pb_yy[j] * fl1_fx + pc_yyyy[j] * pb_y[j] * fl1_fx + 10.0 * pc_yyyz[j] * fl1_fx * pb_z[j] + 5.0 * pc_yyy[j] * fl1_fx * pb_zz[j] + 6.0 * pc_yyzz[j] * fl1_fx * pb_y[j] + 12.0 * pc_yyz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_yy[j] + pa_yyy[j] * pc_yyzz[j] + 6.0 * pa_yy[j] * pc_yyzz[j] * pb_y[j] + 6.0 * pa_yy[j] * pc_yyyz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_yy[j] + 12.0 * pa_y[j] * pc_yyyz[j] * pb_yz[j] + 3.0 * pa_y[j] * pc_yyyy[j] * pb_zz[j] + 2.0 * pc_yyyz[j] * pb_yyz[j] + 2.0 * pc_yyyy[j] * pb_yzz[j]);

                t_yyy_yyzz[j] += fl_s_0_0_5 * (-2.5 * pc_yyy[j] * fl2_fx - 3.75 * pc_yzz[j] * fl2_fx - 1.5 * pa_y[j] * pc_yyyy[j] * fl1_fx - 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - pc_yyyy[j] * pb_y[j] * fl1_fx - 0.5 * pc_yyyyy[j] * fl1_fx - 5.0 * pc_yyyzz[j] * fl1_fx - 10.0 * pc_yyyz[j] * fl1_fx * pb_z[j] - 6.0 * pc_yyzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_yyyzz[j] - 6.0 * pa_y[j] * pc_yyyzz[j] * pb_y[j] - 6.0 * pa_y[j] * pc_yyyyz[j] * pb_z[j] - pc_yyyzz[j] * pb_yy[j] - 4.0 * pc_yyyyz[j] * pb_yz[j] - pc_yyyyy[j] * pb_zz[j]);

                t_yyy_yyzz[j] += fl_s_0_0_6 * (0.5 * pc_yyyyy[j] * fl1_fx + 5.0 * pc_yyyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyyzz[j] + 2.0 * pc_yyyyzz[j] * pb_y[j] + 2.0 * pc_yyyyyz[j] * pb_z[j]);

                t_yyy_yyzz[j] += -fl_s_0_0_7 * pc_yyyyyzz[j];

                t_yyy_yzzz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_z[j] + 2.25 * pa_yy[j] * fl2_fx * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pb_zzz[j] + 1.5 * pa_yyy[j] * pb_yz[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pb_zzz[j] + 1.5 * pa_y[j] * fl1_fx * pb_yzzz[j] + pa_yyy[j] * pb_yzzz[j]);

                t_yyy_yzzz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_z[j] - 1.125 * fl3_fx * pc_z[j] - 4.5 * pa_yy[j] * fl2_fx * pb_z[j] - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 6.75 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_yz[j] - 2.25 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_yz[j] - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * fl2_fx * pb_zzz[j] - 1.5 * pa_yyy[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yyy[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_yyy[j] * pc_y[j] * pb_z[j] * fl1_fx - 4.5 * pa_yy[j] * pc_y[j] * pb_yz[j] * fl1_fx - 4.5 * pa_yy[j] * fl1_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_yy[j] * fl1_fx * pb_zzz[j] - 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 4.5 * pa_y[j] * fl1_fx * pb_yzz[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pb_yzzz[j] - 1.5 * pc_y[j] * fl1_fx * pb_yzzz[j] - 3.0 * pa_yyy[j] * pb_yzz[j] * pc_z[j] - pa_yyy[j] * pc_y[j] * pb_zzz[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_yzzz[j]);

                t_yyy_yzzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 4.5 * pa_yy[j] * fl2_fx * pc_z[j] + 2.25 * pa_yy[j] * fl2_fx * pb_z[j] + 13.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 6.75 * pa_y[j] * pc_yz[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_z[j] + 4.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_yz[j] + 4.5 * pc_y[j] * fl2_fx * pb_yz[j] + 2.25 * pc_yz[j] * fl2_fx * pb_y[j] + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 4.5 * fl2_fx * pb_zz[j] * pc_z[j] + 0.75 * fl2_fx * pb_zzz[j] + 1.5 * pa_yyy[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_y[j] * pb_yz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yy[j] * pb_z[j] * fl1_fx + 4.5 * pa_yy[j] * fl1_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_yy[j] * fl1_fx * pb_zz[j] * pc_z[j] + 4.5 * pa_y[j] * pc_yy[j] * pb_yz[j] * fl1_fx + 13.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_yy[j] * fl1_fx * pb_zzz[j] + 4.5 * pa_y[j] * fl1_fx * pb_yz[j] * pc_zz[j] + 4.5 * pa_y[j] * fl1_fx * pb_yzz[j] * pc_z[j] + 4.5 * pc_yz[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_y[j] * fl1_fx * pb_yzzz[j] + 3.0 * pa_yyy[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_yyy[j] * pc_yz[j] * pb_zz[j] + 9.0 * pa_yy[j] * pc_yz[j] * pb_yzz[j] + 3.0 * pa_yy[j] * pc_yy[j] * pb_zzz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_yzzz[j]);

                t_yyy_yzzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 2.25 * pa_yy[j] * fl2_fx * pc_z[j] - 13.5 * pa_y[j] * pc_yz[j] * fl2_fx - 6.75 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 9.0 * pc_yy[j] * fl2_fx * pb_z[j] - 4.5 * pc_yyz[j] * fl2_fx - 2.25 * pa_y[j] * fl2_fx * pb_y[j] * pc_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_y[j] - 2.25 * pc_y[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * fl2_fx * pb_z[j] * pc_zz[j] - 2.25 * fl2_fx * pb_zz[j] * pc_z[j] - 1.5 * pa_yyy[j] * pc_yz[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yy[j] * pb_z[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yyz[j] * fl1_fx - 1.5 * pa_yy[j] * fl1_fx * pc_zzz[j] - 4.5 * pa_yy[j] * fl1_fx * pb_z[j] * pc_zz[j] - 4.5 * pa_y[j] * pc_yy[j] * pb_yz[j] * fl1_fx - 4.5 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 4.5 * pa_y[j] * pc_yyy[j] * pb_z[j] * fl1_fx - 13.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 13.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yyy[j] * pb_yz[j] * fl1_fx - 9.0 * pc_yyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yy[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_y[j] * fl1_fx * pb_y[j] * pc_zzz[j] - 4.5 * pa_y[j] * fl1_fx * pb_yz[j] * pc_zz[j] - 4.5 * pc_yzz[j] * fl1_fx * pb_yz[j] - 4.5 * pc_yz[j] * fl1_fx * pb_yzz[j] - pa_yyy[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_yyy[j] * pc_yzz[j] * pb_z[j] - 9.0 * pa_yy[j] * pc_yzz[j] * pb_yz[j] - 9.0 * pa_yy[j] * pc_yyz[j] * pb_zz[j] - 9.0 * pa_y[j] * pc_yyz[j] * pb_yzz[j] - 3.0 * pa_y[j] * pc_yyy[j] * pb_zzz[j] - pc_yyy[j] * pb_yzzz[j]);

                t_yyy_yzzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 6.75 * pa_y[j] * pc_yz[j] * fl2_fx + 9.0 * pc_yyz[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_zzz[j] + 2.25 * fl2_fx * pb_z[j] * pc_zz[j] + 4.5 * pa_yy[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_zzz[j] + 4.5 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyy[j] * pb_z[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyyz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yzzz[j] * fl1_fx + 13.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyy[j] * pb_yz[j] * fl1_fx + 1.5 * pc_yyyz[j] * pb_y[j] * fl1_fx + 1.5 * pc_yyyy[j] * pb_z[j] * fl1_fx + 9.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_yyz[j] * fl1_fx * pb_zz[j] + 1.5 * pa_y[j] * fl1_fx * pb_y[j] * pc_zzz[j] + 1.5 * pc_yzzz[j] * fl1_fx * pb_y[j] + 4.5 * pc_yzz[j] * fl1_fx * pb_yz[j] + pa_yyy[j] * pc_yzzz[j] + 3.0 * pa_yy[j] * pc_yzzz[j] * pb_y[j] + 9.0 * pa_yy[j] * pc_yyzz[j] * pb_z[j] + 9.0 * pa_y[j] * pc_yyzz[j] * pb_yz[j] + 9.0 * pa_y[j] * pc_yyyz[j] * pb_zz[j] + 3.0 * pc_yyyz[j] * pb_yzz[j] + pc_yyyy[j] * pb_zzz[j]);

                t_yyy_yzzz[j] += fl_s_0_0_5 * (-4.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 4.5 * pa_y[j] * pc_yyyz[j] * fl1_fx - 4.5 * pa_y[j] * pc_yzzz[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_yyyy[j] * pb_z[j] * fl1_fx - 1.5 * pc_yyyyz[j] * fl1_fx - 3.0 * pc_yyzzz[j] * fl1_fx - 9.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_yzzz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yy[j] * pc_yyzzz[j] - 3.0 * pa_y[j] * pc_yyzzz[j] * pb_y[j] - 9.0 * pa_y[j] * pc_yyyzz[j] * pb_z[j] - 3.0 * pc_yyyzz[j] * pb_yz[j] - 3.0 * pc_yyyyz[j] * pb_zz[j]);

                t_yyy_yzzz[j] += fl_s_0_0_6 * (1.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pc_yyzzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyzzz[j] + pc_yyyzzz[j] * pb_y[j] + 3.0 * pc_yyyyzz[j] * pb_z[j]);

                t_yyy_yzzz[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];

                t_yyy_zzzz[j] = fl_s_0_0_0 * (1.125 * pa_y[j] * fl3_fx + 0.75 * pa_yyy[j] * fl2_fx + 4.5 * pa_y[j] * fl2_fx * pb_zz[j] + 3.0 * pa_yyy[j] * pb_zz[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pb_zzzz[j] + pa_yyy[j] * pb_zzzz[j]);

                t_yyy_zzzz[j] += fl_s_0_0_1 * (-3.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 1.5 * pa_yyy[j] * fl2_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 9.0 * pa_y[j] * fl2_fx * pb_zz[j] - 9.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 4.5 * pc_y[j] * fl2_fx * pb_zz[j] - 3.0 * pa_yyy[j] * pb_zz[j] * fl1_fx - 6.0 * pa_yyy[j] * pb_z[j] * pc_z[j] * fl1_fx - 9.0 * pa_yy[j] * pc_y[j] * pb_zz[j] * fl1_fx - 6.0 * pa_y[j] * fl1_fx * pb_zzz[j] * pc_z[j] - 1.5 * pa_y[j] * fl1_fx * pb_zzzz[j] - 1.5 * pc_y[j] * fl1_fx * pb_zzzz[j] - 4.0 * pa_yyy[j] * pb_zzz[j] * pc_z[j] - 3.0 * pa_yy[j] * pc_y[j] * pb_zzzz[j]);

                t_yyy_zzzz[j] += fl_s_0_0_2 * (3.375 * pa_y[j] * fl3_fx + 3.375 * pc_y[j] * fl3_fx + 0.75 * pa_yyy[j] * fl2_fx + 4.5 * pa_yy[j] * pc_y[j] * fl2_fx + 2.25 * pa_y[j] * pc_yy[j] * fl2_fx + 18.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] + 4.5 * pa_y[j] * fl2_fx * pc_zz[j] + 4.5 * pa_y[j] * fl2_fx * pb_zz[j] + 9.0 * pc_y[j] * fl2_fx * pb_zz[j] + 9.0 * pc_yz[j] * fl2_fx * pb_z[j] + 6.0 * pa_yyy[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_yyy[j] * pc_zz[j] * fl1_fx + 9.0 * pa_yy[j] * pc_y[j] * pb_zz[j] * fl1_fx + 18.0 * pa_yy[j] * pc_yz[j] * pb_z[j] * fl1_fx + 9.0 * pa_y[j] * pc_yy[j] * pb_zz[j] * fl1_fx + 9.0 * pa_y[j] * fl1_fx * pb_zz[j] * pc_zz[j] + 6.0 * pa_y[j] * fl1_fx * pb_zzz[j] * pc_z[j] + 6.0 * pc_yz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_y[j] * fl1_fx * pb_zzzz[j] + 6.0 * pa_yyy[j] * pb_zz[j] * pc_zz[j] + 12.0 * pa_yy[j] * pc_yz[j] * pb_zzz[j] + 3.0 * pa_y[j] * pc_yy[j] * pb_zzzz[j]);

                t_yyy_zzzz[j] += fl_s_0_0_3 * (-1.125 * pa_y[j] * fl3_fx - 3.375 * pc_y[j] * fl3_fx - 2.25 * pa_yy[j] * pc_y[j] * fl2_fx - 4.5 * pa_y[j] * pc_yy[j] * fl2_fx - 0.75 * pc_yyy[j] * fl2_fx - 9.0 * pa_y[j] * fl2_fx * pc_zz[j] - 9.0 * pa_y[j] * fl2_fx * pb_z[j] * pc_z[j] - 18.0 * pc_yz[j] * fl2_fx * pb_z[j] - 4.5 * pc_yzz[j] * fl2_fx - 4.5 * pc_y[j] * fl2_fx * pb_zz[j] - 3.0 * pa_yyy[j] * pc_zz[j] * fl1_fx - 18.0 * pa_yy[j] * pc_yz[j] * pb_z[j] * fl1_fx - 9.0 * pa_yy[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_y[j] * pc_yy[j] * pb_zz[j] * fl1_fx - 18.0 * pa_y[j] * pc_yyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_yyy[j] * pb_zz[j] * fl1_fx - 6.0 * pa_y[j] * fl1_fx * pb_z[j] * pc_zzz[j] - 9.0 * pa_y[j] * fl1_fx * pb_zz[j] * pc_zz[j] - 9.0 * pc_yzz[j] * fl1_fx * pb_zz[j] - 6.0 * pc_yz[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_yyy[j] * pb_z[j] * pc_zzz[j] - 18.0 * pa_yy[j] * pc_yzz[j] * pb_zz[j] - 12.0 * pa_y[j] * pc_yyz[j] * pb_zzz[j] - pc_yyy[j] * pb_zzzz[j]);

                t_yyy_zzzz[j] += fl_s_0_0_4 * (1.125 * pc_y[j] * fl3_fx + 2.25 * pa_y[j] * pc_yy[j] * fl2_fx + 1.5 * pc_yyy[j] * fl2_fx + 4.5 * pa_y[j] * fl2_fx * pc_zz[j] + 9.0 * pc_yzz[j] * fl2_fx + 9.0 * pc_yz[j] * fl2_fx * pb_z[j] + 9.0 * pa_yy[j] * pc_yzz[j] * fl1_fx + 18.0 * pa_y[j] * pc_yyz[j] * pb_z[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 3.0 * pc_yyy[j] * pb_zz[j] * fl1_fx + 6.0 * pc_yyyz[j] * pb_z[j] * fl1_fx + 1.5 * pa_y[j] * fl1_fx * pc_zzzz[j] + 6.0 * pa_y[j] * fl1_fx * pb_z[j] * pc_zzz[j] + 6.0 * pc_yzzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_yzz[j] * fl1_fx * pb_zz[j] + pa_yyy[j] * pc_zzzz[j] + 12.0 * pa_yy[j] * pc_yzzz[j] * pb_z[j] + 18.0 * pa_y[j] * pc_yyzz[j] * pb_zz[j] + 4.0 * pc_yyyz[j] * pb_zzz[j]);

                t_yyy_zzzz[j] += fl_s_0_0_5 * (-0.75 * pc_yyy[j] * fl2_fx - 4.5 * pc_yzz[j] * fl2_fx - 9.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 6.0 * pc_yyyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_yyyzz[j] * fl1_fx - 1.5 * pa_y[j] * fl1_fx * pc_zzzz[j] - 1.5 * pc_yzzzz[j] * fl1_fx - 6.0 * pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_yy[j] * pc_yzzzz[j] - 12.0 * pa_y[j] * pc_yyzzz[j] * pb_z[j] - 6.0 * pc_yyyzz[j] * pb_zz[j]);

                t_yyy_zzzz[j] += fl_s_0_0_6 * (3.0 * pc_yyyzz[j] * fl1_fx + 1.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyzzzz[j] + 4.0 * pc_yyyzzz[j] * pb_z[j]);

                t_yyy_zzzz[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_105_108(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (105,108)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyy = pcDistances.data(119 * idx + 58);

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxyyy = pcDistances.data(119 * idx + 61);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyyz = pcDistances.data(119 * idx + 90);

            auto pc_xxxyyyz = pcDistances.data(119 * idx + 94);

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyz_xxxx = primBuffer.data(150 * idx + 105);

            auto t_yyz_xxxy = primBuffer.data(150 * idx + 106);

            auto t_yyz_xxxz = primBuffer.data(150 * idx + 107);

            // Batch of Integrals (105,108)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, \
                                     pb_xxxz, pb_xxy, pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, \
                                     pc_xxxxyy, pc_xxxxyyz, pc_xxxxyz, pc_xxxxz, pc_xxxy, pc_xxxyy, pc_xxxyyy, \
                                     pc_xxxyyyz, pc_xxxyyz, pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxz, pc_xxxzz, pc_xxy, \
                                     pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxz, \
                                     pc_xxzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xz, \
                                     pc_xzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_z, pc_zz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyz_xxxx, \
                                     t_yyz_xxxy, t_yyz_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyz_xxxx[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 1.5 * fl2_fx * pa_z[j] * pb_xx[j] + 3.0 * pa_yyz[j] * pb_xx[j] * fl1_fx + 0.5 * fl1_fx * pa_z[j] * pb_xxxx[j] + pa_yyz[j] * pb_xxxx[j]);

                t_yyz_xxxx[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 1.5 * pa_yyz[j] * fl2_fx - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pb_xx[j] - 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 1.5 * fl2_fx * pc_z[j] * pb_xx[j] - 3.0 * pa_yyz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_yyz[j] * pb_x[j] * pc_x[j] * fl1_fx - 3.0 * pa_yy[j] * pc_z[j] * pb_xx[j] * fl1_fx - 6.0 * pa_yz[j] * pc_y[j] * pb_xx[j] * fl1_fx - 2.0 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_x[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxxx[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxxx[j] - 4.0 * pa_yyz[j] * pb_xxx[j] * pc_x[j] - pa_yy[j] * pc_z[j] * pb_xxxx[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xxxx[j]);

                t_yyz_xxxx[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * pc_z[j] * fl2_fx + 3.0 * pa_yz[j] * pc_y[j] * fl2_fx + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 0.75 * pc_yy[j] * pa_z[j] * fl2_fx + 6.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_xx[j] + 3.0 * fl2_fx * pc_z[j] * pb_xx[j] + 3.0 * fl2_fx * pc_xz[j] * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pb_xx[j] + 6.0 * pa_yyz[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_xx[j] * fl1_fx + 3.0 * pa_yy[j] * pc_z[j] * pb_xx[j] * fl1_fx + 6.0 * pa_yy[j] * pc_xz[j] * pb_x[j] * fl1_fx + 6.0 * pa_yz[j] * pc_y[j] * pb_xx[j] * fl1_fx + 12.0 * pa_yz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 6.0 * pa_y[j] * pc_yz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_yy[j] * pa_z[j] * pb_xx[j] * fl1_fx + 3.0 * fl1_fx * pa_z[j] * pb_xx[j] * pc_xx[j] + 2.0 * fl1_fx * pc_xz[j] * pb_xxx[j] + 2.0 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_x[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxxx[j] + 6.0 * pa_yyz[j] * pb_xx[j] * pc_xx[j] + 4.0 * pa_yy[j] * pc_xz[j] * pb_xxx[j] + 8.0 * pa_yz[j] * pc_xy[j] * pb_xxx[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xxxx[j] + pc_yy[j] * pa_z[j] * pb_xxxx[j]);

                t_yyz_xxxx[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 3.0 * pa_y[j] * pc_yz[j] * fl2_fx - 1.5 * pc_yy[j] * pa_z[j] * fl2_fx - 0.75 * pc_yyz[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pc_xx[j] - 6.0 * fl2_fx * pc_xz[j] * pb_x[j] - 1.5 * fl2_fx * pc_xxz[j] - 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 1.5 * fl2_fx * pc_z[j] * pb_xx[j] - 3.0 * pa_yyz[j] * pc_xx[j] * fl1_fx - 6.0 * pa_yy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xxz[j] * fl1_fx - 12.0 * pa_yz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 6.0 * pa_yz[j] * pc_xxy[j] * fl1_fx - 6.0 * pa_y[j] * pc_yz[j] * pb_xx[j] * fl1_fx - 12.0 * pa_y[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_yy[j] * pa_z[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_yyz[j] * pb_xx[j] * fl1_fx - 2.0 * fl1_fx * pa_z[j] * pb_x[j] * pc_xxx[j] - 3.0 * fl1_fx * pc_xxz[j] * pb_xx[j] - 3.0 * fl1_fx * pa_z[j] * pb_xx[j] * pc_xx[j] - 2.0 * fl1_fx * pc_xz[j] * pb_xxx[j] - 4.0 * pa_yyz[j] * pb_x[j] * pc_xxx[j] - 6.0 * pa_yy[j] * pc_xxz[j] * pb_xx[j] - 12.0 * pa_yz[j] * pc_xxy[j] * pb_xx[j] - 8.0 * pa_y[j] * pc_xyz[j] * pb_xxx[j] - 4.0 * pc_xyy[j] * pa_z[j] * pb_xxx[j] - pc_yyz[j] * pb_xxxx[j]);

                t_yyz_xxxx[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 0.75 * pc_yy[j] * pa_z[j] * fl2_fx + 1.5 * pc_yyz[j] * fl2_fx + 3.0 * fl2_fx * pc_xxz[j] + 1.5 * fl2_fx * pa_z[j] * pc_xx[j] + 3.0 * fl2_fx * pc_xz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_xxy[j] * fl1_fx + 12.0 * pa_y[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 6.0 * pa_y[j] * pc_xxyz[j] * fl1_fx + 6.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_yyz[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xyyz[j] * pb_x[j] * fl1_fx + 0.5 * fl1_fx * pa_z[j] * pc_xxxx[j] + 2.0 * fl1_fx * pc_xxxz[j] * pb_x[j] + 2.0 * fl1_fx * pa_z[j] * pb_x[j] * pc_xxx[j] + 3.0 * fl1_fx * pc_xxz[j] * pb_xx[j] + pa_yyz[j] * pc_xxxx[j] + 4.0 * pa_yy[j] * pc_xxxz[j] * pb_x[j] + 8.0 * pa_yz[j] * pc_xxxy[j] * pb_x[j] + 12.0 * pa_y[j] * pc_xxyz[j] * pb_xx[j] + 6.0 * pc_xxyy[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xyyz[j] * pb_xxx[j]);

                t_yyz_xxxx[j] += fl_s_0_0_5 * (-0.75 * pc_yyz[j] * fl2_fx - 1.5 * fl2_fx * pc_xxz[j] - 6.0 * pa_y[j] * pc_xxyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 6.0 * pc_xyyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 0.5 * fl1_fx * pc_xxxxz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xxxx[j] - 2.0 * fl1_fx * pc_xxxz[j] * pb_x[j] - pa_yy[j] * pc_xxxxz[j] - 2.0 * pa_yz[j] * pc_xxxxy[j] - 8.0 * pa_y[j] * pc_xxxyz[j] * pb_x[j] - 4.0 * pc_xxxyy[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxyyz[j] * pb_xx[j]);

                t_yyz_xxxx[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_xxxxz[j] + 2.0 * pa_y[j] * pc_xxxxyz[j] + pc_xxxxyy[j] * pa_z[j] + 4.0 * pc_xxxyyz[j] * pb_x[j]);

                t_yyz_xxxx[j] += -fl_s_0_0_7 * pc_xxxxyyz[j];

                t_yyz_xxxy[j] = fl_s_0_0_0 * (1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_yyz[j] * pb_xy[j] * fl1_fx + pa_yz[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxxy[j] + pa_yyz[j] * pb_xxxy[j]);

                t_yyz_xxxy[j] += fl_s_0_0_1 * (-3.0 * pa_yz[j] * fl2_fx * pb_x[j] - 1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_yyz[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_yyz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_x[j] * fl1_fx * pb_y[j] - 1.5 * pa_yy[j] * pc_z[j] * pb_xy[j] * fl1_fx - 3.0 * pa_yz[j] * pc_y[j] * pb_xy[j] * fl1_fx - 3.0 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] - pa_y[j] * fl1_fx * pc_z[j] * pb_xxx[j] - pa_yz[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxx[j] - 1.5 * fl1_fx * pa_z[j] * pb_xxy[j] * pc_x[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxxy[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxxy[j] - pa_yyz[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_yyz[j] * pb_xxy[j] * pc_x[j] - pa_yy[j] * pc_z[j] * pb_xxxy[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xxxy[j]);

                t_yyz_xxxy[j] += fl_s_0_0_2 * (3.0 * pa_yz[j] * fl2_fx * pc_x[j] + 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 4.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_xy[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_yyz[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_yyz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_x[j] * fl1_fx * pb_y[j] + 1.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_yy[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_y[j] + 3.0 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_y[j] * pb_xy[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_y[j] + 3.0 * pa_y[j] * pc_yz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xx[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] + pa_y[j] * fl1_fx * pc_z[j] * pb_xxx[j] + 1.5 * pc_yy[j] * pa_z[j] * pb_xy[j] * fl1_fx + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxx[j] + 1.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_xx[j] + 1.5 * fl1_fx * pc_xz[j] * pb_xxy[j] + 1.5 * fl1_fx * pa_z[j] * pb_xxy[j] * pc_x[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxxy[j] + 3.0 * pa_yyz[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_yyz[j] * pb_xy[j] * pc_xx[j] + pa_yy[j] * pc_yz[j] * pb_xxx[j] + 3.0 * pa_yy[j] * pc_xz[j] * pb_xxy[j] + 2.0 * pa_yz[j] * pc_yy[j] * pb_xxx[j] + 6.0 * pa_yz[j] * pc_xy[j] * pb_xxy[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xxxy[j] + pc_yy[j] * pa_z[j] * pb_xxxy[j]);

                t_yyz_xxxy[j] += fl_s_0_0_3 * (-3.0 * pa_y[j] * fl2_fx * pc_xz[j] - 1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 4.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * fl2_fx * pc_xz[j] * pb_y[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_yyz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_y[j] - 3.0 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_yz[j] * pb_xy[j] * fl1_fx - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] - pa_yz[j] * fl1_fx * pc_xxx[j] - 3.0 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_x[j] - 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xx[j] - 1.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_yy[j] * pa_z[j] * pb_xy[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_yyz[j] * pb_xy[j] * fl1_fx - 4.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xx[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] - 0.5 * fl1_fx * pa_z[j] * pc_xxx[j] * pb_y[j] - 1.5 * fl1_fx * pc_xxz[j] * pb_xy[j] - 1.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_xx[j] - 1.5 * fl1_fx * pc_xz[j] * pb_xxy[j] - 3.0 * pa_yyz[j] * pb_x[j] * pc_xxy[j] - pa_yyz[j] * pc_xxx[j] * pb_y[j] - 3.0 * pa_yy[j] * pc_xyz[j] * pb_xx[j] - 3.0 * pa_yy[j] * pc_xxz[j] * pb_xy[j] - 6.0 * pa_yz[j] * pc_xyy[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xxy[j] * pb_xy[j] - 2.0 * pa_y[j] * pc_yyz[j] * pb_xxx[j] - 6.0 * pa_y[j] * pc_xyz[j] * pb_xxy[j] - pc_yyy[j] * pa_z[j] * pb_xxx[j] - 3.0 * pc_xyy[j] * pa_z[j] * pb_xxy[j] - pc_yyz[j] * pb_xxxy[j]);

                t_yyz_xxxy[j] += fl_s_0_0_4 * (1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] + pa_y[j] * fl1_fx * pc_xxxz[j] + pa_yz[j] * fl1_fx * pc_xxx[j] + 3.0 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_x[j] + 1.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_yyz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxxy[j] * fl1_fx * pa_z[j] + 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_x[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 0.5 * fl1_fx * pc_xxxz[j] * pb_y[j] + 0.5 * fl1_fx * pa_z[j] * pc_xxx[j] * pb_y[j] + 1.5 * fl1_fx * pc_xxz[j] * pb_xy[j] + pa_yyz[j] * pc_xxxy[j] + 3.0 * pa_yy[j] * pc_xxyz[j] * pb_x[j] + pa_yy[j] * pc_xxxz[j] * pb_y[j] + 6.0 * pa_yz[j] * pc_xxyy[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xxxy[j] * pb_y[j] + 6.0 * pa_y[j] * pc_xyyz[j] * pb_xx[j] + 6.0 * pa_y[j] * pc_xxyz[j] * pb_xy[j] + 3.0 * pc_xyyy[j] * pa_z[j] * pb_xx[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_xy[j] + pc_yyyz[j] * pb_xxx[j] + 3.0 * pc_xyyz[j] * pb_xxy[j]);

                t_yyz_xxxy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_y[j] * pc_xyyz[j] * fl1_fx - pa_y[j] * fl1_fx * pc_xxxz[j] - 1.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 1.5 * pc_xxxy[j] * fl1_fx * pa_z[j] - 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 0.5 * fl1_fx * pc_xxxz[j] * pb_y[j] - pa_yy[j] * pc_xxxyz[j] - 2.0 * pa_yz[j] * pc_xxxyy[j] - 6.0 * pa_y[j] * pc_xxyyz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xxxyz[j] * pb_y[j] - 3.0 * pc_xxyyy[j] * pa_z[j] * pb_x[j] - pc_xxxyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyyz[j] * pb_xx[j] - 3.0 * pc_xxyyz[j] * pb_xy[j]);

                t_yyz_xxxy[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_xxxyyz[j] + pc_xxxyyy[j] * pa_z[j] + 3.0 * pc_xxyyyz[j] * pb_x[j] + pc_xxxyyz[j] * pb_y[j]);

                t_yyz_xxxy[j] += -fl_s_0_0_7 * pc_xxxyyyz[j];

                t_yyz_xxxz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_yyz[j] * pb_xz[j] * fl1_fx + 0.5 * pa_yy[j] * fl1_fx * pb_xxx[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxxz[j] + pa_yyz[j] * pb_xxxz[j]);

                t_yyz_xxxz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 1.5 * pa_yy[j] * fl2_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_x[j] - 0.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_yyz[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_yyz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_z[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xxx[j] - 3.0 * pa_yz[j] * pc_y[j] * pb_xz[j] * fl1_fx - pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_z[j] - 1.5 * fl1_fx * pa_z[j] * pb_xxz[j] * pc_x[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxxz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxxz[j] - pa_yyz[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_yyz[j] * pb_xxz[j] * pc_x[j] - pa_yy[j] * pc_z[j] * pb_xxxz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xxxz[j]);

                t_yyz_xxxz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xz[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 0.75 * fl2_fx * pb_x[j] * pc_xx[j] + 1.5 * fl2_fx * pb_xx[j] * pc_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_yyz[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_yyz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pa_yy[j] * pc_z[j] * pb_xz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 1.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_x[j] + 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_y[j] * pb_xz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_yz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_yy[j] * pa_z[j] * pb_xz[j] * fl1_fx + 0.5 * pc_yy[j] * fl1_fx * pb_xxx[j] + 1.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_xz[j] + 1.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_xx[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] + 1.5 * fl1_fx * pc_xz[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxx[j] * pc_z[j] + 1.5 * fl1_fx * pa_z[j] * pb_xxz[j] * pc_x[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxxz[j] + 3.0 * pa_yyz[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_yyz[j] * pb_xz[j] * pc_xx[j] + pa_yy[j] * pc_zz[j] * pb_xxx[j] + 3.0 * pa_yy[j] * pc_xz[j] * pb_xxz[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_xxx[j] + 6.0 * pa_yz[j] * pc_xy[j] * pb_xxz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xxxz[j] + pc_yy[j] * pa_z[j] * pb_xxxz[j]);

                t_yyz_xxxz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_yy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.75 * fl2_fx * pc_xzz[j] - 1.5 * fl2_fx * pc_xz[j] * pb_z[j] - 0.25 * fl2_fx * pc_xxx[j] - 1.5 * fl2_fx * pb_x[j] * pc_xx[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_yyz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_z[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xxx[j] - 1.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_xx[j] - 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_yz[j] * pb_xz[j] * fl1_fx - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_yy[j] * pa_z[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 1.5 * pc_yyz[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xxx[j] - 1.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_xxz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xxx[j] * pb_z[j] - 1.5 * fl1_fx * pc_xzz[j] * pb_xx[j] - 1.5 * fl1_fx * pc_xxz[j] * pb_xz[j] - 1.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_xz[j] - 1.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_xx[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] - 1.5 * fl1_fx * pc_xz[j] * pb_xxz[j] - 3.0 * pa_yyz[j] * pb_x[j] * pc_xxz[j] - pa_yyz[j] * pc_xxx[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_xzz[j] * pb_xx[j] - 3.0 * pa_yy[j] * pc_xxz[j] * pb_xz[j] - 6.0 * pa_yz[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xxy[j] * pb_xz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xxx[j] - 6.0 * pa_y[j] * pc_xyz[j] * pb_xxz[j] - pc_yyz[j] * pa_z[j] * pb_xxx[j] - 3.0 * pc_xyy[j] * pa_z[j] * pb_xxz[j] - pc_yyz[j] * pb_xxxz[j]);

                t_yyz_xxxz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_xzz[j] + 0.5 * fl2_fx * pc_xxx[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 0.75 * fl2_fx * pb_x[j] * pc_xx[j] + 1.5 * pa_yy[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_yy[j] * fl1_fx * pc_xxx[j] + 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + pa_y[j] * pc_xxxy[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_x[j] + 1.5 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_yyz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxyy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + 0.5 * fl1_fx * pa_z[j] * pc_xxxz[j] + 1.5 * fl1_fx * pc_xxzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_xxxz[j] * pb_z[j] + 1.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_xxz[j] + 0.5 * fl1_fx * pa_z[j] * pc_xxx[j] * pb_z[j] + 1.5 * fl1_fx * pc_xzz[j] * pb_xx[j] + 1.5 * fl1_fx * pc_xxz[j] * pb_xz[j] + pa_yyz[j] * pc_xxxz[j] + 3.0 * pa_yy[j] * pc_xxzz[j] * pb_x[j] + pa_yy[j] * pc_xxxz[j] * pb_z[j] + 6.0 * pa_yz[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xxxy[j] * pb_z[j] + 6.0 * pa_y[j] * pc_xyzz[j] * pb_xx[j] + 6.0 * pa_y[j] * pc_xxyz[j] * pb_xz[j] + 3.0 * pc_xyyz[j] * pa_z[j] * pb_xx[j] + 3.0 * pc_xxyy[j] * pa_z[j] * pb_xz[j] + pc_yyzz[j] * pb_xxx[j] + 3.0 * pc_xyyz[j] * pb_xxz[j]);

                t_yyz_xxxz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 0.75 * fl2_fx * pc_xzz[j] - 0.25 * fl2_fx * pc_xxx[j] - 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - pa_y[j] * pc_xxxy[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxxyy[j] * fl1_fx - 1.5 * pc_xxyy[j] * fl1_fx * pb_x[j] - 0.5 * fl1_fx * pc_xxxzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xxxz[j] - 1.5 * fl1_fx * pc_xxzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_xxxz[j] * pb_z[j] - pa_yy[j] * pc_xxxzz[j] - 2.0 * pa_yz[j] * pc_xxxyz[j] - 6.0 * pa_y[j] * pc_xxyzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xxxyz[j] * pb_z[j] - 3.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - pc_xxxyy[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyyzz[j] * pb_xx[j] - 3.0 * pc_xxyyz[j] * pb_xz[j]);

                t_yyz_xxxz[j] += fl_s_0_0_6 * (1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xxxyy[j] * fl1_fx + 0.5 * fl1_fx * pc_xxxzz[j] + 2.0 * pa_y[j] * pc_xxxyzz[j] + pc_xxxyyz[j] * pa_z[j] + 3.0 * pc_xxyyzz[j] * pb_x[j] + pc_xxxyyz[j] * pb_z[j]);

                t_yyz_xxxz[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_108_111(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (108,111)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyy = pcDistances.data(119 * idx + 65);

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyyz = pcDistances.data(119 * idx + 99);

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyz_xxyy = primBuffer.data(150 * idx + 108);

            auto t_yyz_xxyz = primBuffer.data(150 * idx + 109);

            auto t_yyz_xxzz = primBuffer.data(150 * idx + 110);

            // Batch of Integrals (108,111)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, \
                                     pb_xxz, pb_xxzz, pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyy, pc_xxyyyyz, pc_xxyyyz, \
                                     pc_xxyyyzz, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, \
                                     pc_xxzz, pc_xxzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyz, pc_xyyyzz, \
                                     pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyz_xxyy, t_yyz_xxyz, t_yyz_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyz_xxyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.25 * pa_yyz[j] * fl2_fx + pa_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * pa_yyz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_yyz[j] * fl1_fx * pb_yy[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxyy[j] + pa_yyz[j] * pb_xxyy[j]);

                t_yyz_xxyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.5 * pa_yyz[j] * fl2_fx - 0.25 * pa_yy[j] * pc_z[j] * fl2_fx - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 2.0 * pa_yz[j] * fl2_fx * pb_y[j] - pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 1.5 * fl2_fx * pa_z[j] * pb_xx[j] - 0.5 * fl2_fx * pa_z[j] * pb_yy[j] - 0.25 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_yyz[j] * pb_xx[j] * fl1_fx - pa_yyz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_yyz[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_yyz[j] * fl1_fx * pb_yy[j] - 0.5 * pa_yy[j] * pc_z[j] * pb_xx[j] * fl1_fx - 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yy[j] - 3.0 * pa_yz[j] * pc_y[j] * pb_xx[j] * fl1_fx - pa_yz[j] * pc_y[j] * fl1_fx * pb_yy[j] - 4.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] - 2.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxy[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xxy[j] - 3.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxy[j] - fl1_fx * pa_z[j] * pb_xyy[j] * pc_x[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxyy[j] - 2.0 * pa_yyz[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_yyz[j] * pb_xyy[j] * pc_x[j] - pa_yy[j] * pc_z[j] * pb_xxyy[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xxyy[j]);

                t_yyz_xxyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 0.25 * pa_yyz[j] * fl2_fx + 0.5 * pa_yy[j] * pc_z[j] * fl2_fx + 3.0 * pa_yz[j] * pc_y[j] * fl2_fx + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 2.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] + pa_yz[j] * fl2_fx * pb_y[j] + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 3.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] + 1.5 * pc_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pc_xx[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 3.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.75 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + pa_yyz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_yyz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_yyz[j] * fl1_fx * pc_yy[j] + pa_yyz[j] * fl1_fx * pb_y[j] * pc_y[j] + 0.5 * pa_yy[j] * pc_z[j] * pb_xx[j] * fl1_fx + pa_yy[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] + 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yy[j] + 3.0 * pa_yz[j] * pc_y[j] * pb_xx[j] * fl1_fx + 6.0 * pa_yz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 2.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_y[j] + pa_yz[j] * pc_y[j] * fl1_fx * pb_yy[j] + 3.0 * pa_y[j] * pc_yz[j] * pb_xx[j] * fl1_fx + pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] + 4.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xy[j] + 4.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 2.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_xxy[j] + 3.0 * pc_yy[j] * pa_z[j] * pb_xx[j] * fl1_fx + 0.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] + 6.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxy[j] + 0.5 * fl1_fx * pa_z[j] * pc_xx[j] * pb_yy[j] + fl1_fx * pc_xz[j] * pb_xyy[j] + fl1_fx * pa_z[j] * pb_xyy[j] * pc_x[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxyy[j] + pa_yyz[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_yyz[j] * pb_xy[j] * pc_xy[j] + pa_yyz[j] * pc_xx[j] * pb_yy[j] + 2.0 * pa_yy[j] * pc_yz[j] * pb_xxy[j] + 2.0 * pa_yy[j] * pc_xz[j] * pb_xyy[j] + 4.0 * pa_yz[j] * pc_yy[j] * pb_xxy[j] + 4.0 * pa_yz[j] * pc_xy[j] * pb_xyy[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xxyy[j] + pc_yy[j] * pa_z[j] * pb_xxyy[j]);

                t_yyz_xxyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.25 * pa_yy[j] * pc_z[j] * fl2_fx - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 3.0 * pa_y[j] * pc_yz[j] * fl2_fx - pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.0 * pc_yy[j] * pa_z[j] * fl2_fx - 1.5 * pc_yyz[j] * fl2_fx - 3.0 * pc_yz[j] * fl2_fx * pb_y[j] - 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 0.75 * fl2_fx * pc_xxz[j] - 1.5 * fl2_fx * pa_z[j] * pc_xx[j] - 3.0 * fl2_fx * pc_xz[j] * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.25 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_yyz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_yyz[j] * fl1_fx * pc_yy[j] - pa_yy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yy[j] * pc_xxz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_yyz[j] * fl1_fx - pa_yy[j] * pc_yz[j] * fl1_fx * pb_y[j] - 6.0 * pa_yz[j] * pc_xy[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xxy[j] * fl1_fx - pa_yz[j] * pc_yyy[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_y[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 2.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] - pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 2.0 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_y[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 4.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xy[j] - 3.0 * pc_yy[j] * pa_z[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 0.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yyz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_yyz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 6.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xy[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pc_xxz[j] * pb_yy[j] - 0.5 * fl1_fx * pa_z[j] * pc_xx[j] * pb_yy[j] - fl1_fx * pc_xz[j] * pb_xyy[j] - 2.0 * pa_yyz[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_yyz[j] * pc_xxy[j] * pb_y[j] - pa_yy[j] * pc_yyz[j] * pb_xx[j] - 4.0 * pa_yy[j] * pc_xyz[j] * pb_xy[j] - pa_yy[j] * pc_xxz[j] * pb_yy[j] - 2.0 * pa_yz[j] * pc_yyy[j] * pb_xx[j] - 8.0 * pa_yz[j] * pc_xyy[j] * pb_xy[j] - 2.0 * pa_yz[j] * pc_xxy[j] * pb_yy[j] - 4.0 * pa_y[j] * pc_yyz[j] * pb_xxy[j] - 4.0 * pa_y[j] * pc_xyz[j] * pb_xyy[j] - 2.0 * pc_yyy[j] * pa_z[j] * pb_xxy[j] - 2.0 * pc_xyy[j] * pa_z[j] * pb_xyy[j] - pc_yyz[j] * pb_xxyy[j]);

                t_yyz_xxyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 3.0 * pc_yyz[j] * fl2_fx + 1.5 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xxz[j] + 0.75 * fl2_fx * pa_z[j] * pc_xx[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 0.5 * pa_yy[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_yy[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xxy[j] * fl1_fx + pa_yz[j] * pc_yyy[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxyz[j] * fl1_fx + pa_y[j] * pc_yyyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 2.0 * pa_y[j] * fl1_fx * pc_xxz[j] * pb_y[j] + 6.0 * pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx + 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx + pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyz[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xyyz[j] * pb_x[j] * fl1_fx + pc_yyyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_y[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 0.5 * fl1_fx * pc_xxz[j] * pb_yy[j] + pa_yyz[j] * pc_xxyy[j] + 2.0 * pa_yy[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_yy[j] * pc_xxyz[j] * pb_y[j] + 4.0 * pa_yz[j] * pc_xyyy[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xxyy[j] * pb_y[j] + 2.0 * pa_y[j] * pc_yyyz[j] * pb_xx[j] + 8.0 * pa_y[j] * pc_xyyz[j] * pb_xy[j] + 2.0 * pa_y[j] * pc_xxyz[j] * pb_yy[j] + pc_yyyy[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xyyy[j] * pa_z[j] * pb_xy[j] + pc_xxyy[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_yyyz[j] * pb_xxy[j] + 2.0 * pc_xyyz[j] * pb_xyy[j]);

                t_yyz_xxyy[j] += fl_s_0_0_5 * (-1.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_xxz[j] - 3.0 * pa_y[j] * pc_xxyz[j] * fl1_fx - pa_y[j] * pc_yyyz[j] * fl1_fx - 3.0 * pc_xxyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx - 6.0 * pc_xyyz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyyz[j] * fl1_fx - 0.5 * pc_yyyyz[j] * fl1_fx - pc_yyyz[j] * fl1_fx * pb_y[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - pa_yy[j] * pc_xxyyz[j] - 2.0 * pa_yz[j] * pc_xxyyy[j] - 4.0 * pa_y[j] * pc_xyyyz[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xxyyz[j] * pb_y[j] - 2.0 * pc_xyyyy[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyyy[j] * pa_z[j] * pb_y[j] - pc_yyyyz[j] * pb_xx[j] - 4.0 * pc_xyyyz[j] * pb_xy[j] - pc_xxyyz[j] * pb_yy[j]);

                t_yyz_xxyy[j] += fl_s_0_0_6 * (3.0 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_yyyyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_xxyyyz[j] + pc_xxyyyy[j] * pa_z[j] + 2.0 * pc_xyyyyz[j] * pb_x[j] + 2.0 * pc_xxyyyz[j] * pb_y[j]);

                t_yyz_xxyy[j] += -fl_s_0_0_7 * pc_xxyyyyz[j];

                t_yyz_xxyz[j] = fl_s_0_0_0 * (0.25 * pa_y[j] * fl3_fx + 0.125 * fl3_fx * pb_y[j] + 0.25 * pa_yy[j] * fl2_fx * pb_y[j] + 0.5 * pa_yz[j] * fl2_fx * pb_z[j] + 0.5 * pa_y[j] * fl2_fx * pb_xx[j] + 0.25 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_yyz[j] * fl1_fx * pb_yz[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xxy[j] + pa_yz[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxyz[j] + pa_yyz[j] * pb_xxyz[j]);

                t_yyz_xxyz[j] += fl_s_0_0_1 * (-0.75 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - 0.375 * fl3_fx * pb_y[j] - 0.25 * pa_yy[j] * fl2_fx * pc_y[j] - 0.5 * pa_yy[j] * fl2_fx * pb_y[j] - 0.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 0.5 * pa_yz[j] * fl2_fx * pc_z[j] - pa_yz[j] * fl2_fx * pb_z[j] - 0.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - pa_y[j] * fl2_fx * pb_xx[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.25 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.25 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_x[j] - 0.5 * fl2_fx * pb_xxy[j] - 0.5 * pa_yyz[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_yyz[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_yyz[j] * fl1_fx * pb_yz[j] - 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yz[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_y[j] - pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xxy[j] - pa_yz[j] * pc_y[j] * fl1_fx * pb_yz[j] - pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] - pa_yz[j] * fl1_fx * pb_xx[j] * pc_z[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] - pa_y[j] * fl1_fx * pc_z[j] * pb_xxz[j] - pa_yz[j] * fl1_fx * pb_xxz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxy[j] * pc_z[j] - fl1_fx * pa_z[j] * pb_xyz[j] * pc_x[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxyz[j] - pa_yyz[j] * pb_xxy[j] * pc_z[j] - pa_yyz[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_yyz[j] * pb_xyz[j] * pc_x[j] - pa_yy[j] * pc_z[j] * pb_xxyz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xxyz[j]);

                t_yyz_xxyz[j] += fl_s_0_0_2 * (0.75 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 0.375 * fl3_fx * pb_y[j] + 0.5 * pa_yy[j] * fl2_fx * pc_y[j] + 0.25 * pa_yy[j] * fl2_fx * pb_y[j] + 0.5 * pa_y[j] * pc_yy[j] * fl2_fx + pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + pa_yz[j] * fl2_fx * pc_z[j] + 0.5 * pa_y[j] * fl2_fx * pc_zz[j] + pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] + 0.5 * pa_y[j] * fl2_fx * pc_xx[j] + 2.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.5 * pa_yz[j] * fl2_fx * pb_z[j] + 0.5 * pa_y[j] * fl2_fx * pb_xx[j] + 0.25 * pc_yy[j] * fl2_fx * pb_y[j] + 0.75 * pc_yz[j] * fl2_fx * pa_z[j] + 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_y[j] * fl2_fx * pb_xx[j] + 0.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 0.25 * fl2_fx * pc_zz[j] * pb_y[j] + 0.5 * fl2_fx * pc_z[j] * pb_yz[j] + 0.25 * fl2_fx * pc_xx[j] * pb_y[j] + fl2_fx * pb_xy[j] * pc_x[j] + 0.25 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_xxy[j] + 0.5 * pa_yyz[j] * fl1_fx * pc_yz[j] + 0.5 * pa_yyz[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_yyz[j] * fl1_fx * pc_y[j] * pb_z[j] + 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_y[j] + 0.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_yz[j] + pa_yy[j] * fl1_fx * pb_x[j] * pc_xy[j] + 0.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_yy[j] * fl1_fx * pb_xx[j] * pc_y[j] + pa_yy[j] * fl1_fx * pb_xy[j] * pc_x[j] + pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] + pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] + pa_yz[j] * pc_y[j] * fl1_fx * pb_yz[j] + pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] + pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] + 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xxy[j] + 2.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xz[j] + pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] + pa_y[j] * fl1_fx * pc_zz[j] * pb_xx[j] + 2.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xz[j] + pa_yz[j] * fl1_fx * pb_xx[j] * pc_z[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] + pa_y[j] * fl1_fx * pc_z[j] * pb_xxz[j] + 0.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xx[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xxz[j] + fl1_fx * pa_z[j] * pb_xy[j] * pc_xz[j] + 0.5 * fl1_fx * pa_z[j] * pc_xx[j] * pb_yz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] + fl1_fx * pc_xz[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxy[j] * pc_z[j] + fl1_fx * pa_z[j] * pb_xyz[j] * pc_x[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxyz[j] + pa_yyz[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_yyz[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_yyz[j] * pb_xz[j] * pc_xy[j] + pa_yyz[j] * pc_xx[j] * pb_yz[j] + pa_yy[j] * pc_zz[j] * pb_xxy[j] + pa_yy[j] * pc_yz[j] * pb_xxz[j] + 2.0 * pa_yy[j] * pc_xz[j] * pb_xyz[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_xxy[j] + 2.0 * pa_yz[j] * pc_yy[j] * pb_xxz[j] + 4.0 * pa_yz[j] * pc_xy[j] * pb_xyz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xxyz[j] + pc_yy[j] * pa_z[j] * pb_xxyz[j]);

                t_yyz_xxyz[j] += fl_s_0_0_3 * (-0.25 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 0.125 * fl3_fx * pb_y[j] - 0.25 * pa_yy[j] * fl2_fx * pc_y[j] - pa_y[j] * pc_yy[j] * fl2_fx - 0.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - pa_y[j] * fl2_fx * pc_zz[j] - pa_y[j] * fl2_fx * pc_xx[j] - 0.5 * pa_yz[j] * fl2_fx * pc_z[j] - 0.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.25 * pc_yyy[j] * fl2_fx - 0.5 * pc_yy[j] * fl2_fx * pb_y[j] - 1.5 * pc_yz[j] * fl2_fx * pa_z[j] - 0.75 * pc_yzz[j] * fl2_fx - 1.5 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * fl2_fx * pc_zz[j] * pb_y[j] - 0.5 * fl2_fx * pc_xx[j] * pb_y[j] - 0.25 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 0.25 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * fl2_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_yyz[j] * fl1_fx * pc_yz[j] - 0.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zz[j] * fl1_fx * pb_y[j] - 0.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xxy[j] - pa_yy[j] * fl1_fx * pb_x[j] * pc_xy[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xx[j] * pb_y[j] - pa_yz[j] * pc_yyz[j] * fl1_fx - pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] - pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] - pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] - pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] - pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] - pa_y[j] * pc_yy[j] * fl1_fx * pb_xx[j] - 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xy[j] - pa_yz[j] * fl1_fx * pc_xxz[j] - 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_x[j] - pa_y[j] * fl1_fx * pc_xxz[j] * pb_z[j] - 2.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xz[j] - pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] - pa_y[j] * fl1_fx * pc_zz[j] * pb_xx[j] - 2.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_xz[j] - 0.5 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 0.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yyz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] - pc_xyy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xxy[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] - 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] - 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xx[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_y[j] - fl1_fx * pc_xzz[j] * pb_xy[j] - 0.5 * fl1_fx * pc_xxz[j] * pb_yz[j] - fl1_fx * pa_z[j] * pb_xy[j] * pc_xz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xx[j] * pb_yz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxy[j] - fl1_fx * pc_xz[j] * pb_xyz[j] - 2.0 * pa_yyz[j] * pb_x[j] * pc_xyz[j] - pa_yyz[j] * pc_xxz[j] * pb_y[j] - pa_yyz[j] * pc_xxy[j] * pb_z[j] - pa_yy[j] * pc_yzz[j] * pb_xx[j] - 2.0 * pa_yy[j] * pc_xzz[j] * pb_xy[j] - 2.0 * pa_yy[j] * pc_xyz[j] * pb_xz[j] - pa_yy[j] * pc_xxz[j] * pb_yz[j] - 2.0 * pa_yz[j] * pc_yyz[j] * pb_xx[j] - 4.0 * pa_yz[j] * pc_xyz[j] * pb_xy[j] - 4.0 * pa_yz[j] * pc_xyy[j] * pb_xz[j] - 2.0 * pa_yz[j] * pc_xxy[j] * pb_yz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xxy[j] - 2.0 * pa_y[j] * pc_yyz[j] * pb_xxz[j] - 4.0 * pa_y[j] * pc_xyz[j] * pb_xyz[j] - pc_yyz[j] * pa_z[j] * pb_xxy[j] - pc_yyy[j] * pa_z[j] * pb_xxz[j] - 2.0 * pc_xyy[j] * pa_z[j] * pb_xyz[j] - pc_yyz[j] * pb_xxyz[j]);

                t_yyz_xxyz[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 0.5 * pa_y[j] * pc_yy[j] * fl2_fx + 0.5 * pa_y[j] * fl2_fx * pc_zz[j] + 0.5 * pa_y[j] * fl2_fx * pc_xx[j] + 0.5 * pc_yyy[j] * fl2_fx + 0.25 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pc_yzz[j] * fl2_fx + 1.5 * pc_xxy[j] * fl2_fx + 0.75 * pc_yz[j] * fl2_fx * pa_z[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 0.25 * fl2_fx * pc_zz[j] * pb_y[j] + 0.25 * fl2_fx * pc_xx[j] * pb_y[j] + 0.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_yy[j] * fl1_fx * pc_xxy[j] + pa_yz[j] * pc_yyz[j] * fl1_fx + pa_y[j] * pc_yyzz[j] * fl1_fx + pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] + pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + pa_y[j] * pc_xxyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_x[j] + pa_y[j] * pc_xxy[j] * fl1_fx * pb_y[j] + pa_y[j] * fl1_fx * pc_xxzz[j] + pa_yz[j] * fl1_fx * pc_xxz[j] + 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_x[j] + pa_y[j] * fl1_fx * pc_xxz[j] * pb_z[j] + 0.5 * pc_yyyz[j] * pa_z[j] * fl1_fx + 0.5 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyz[j] * fl1_fx * pb_yz[j] + pc_xyyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] + pc_xyy[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxyz[j] * fl1_fx * pa_z[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_x[j] + 1.5 * pc_xxy[j] * fl1_fx * pa_z[j] * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pc_xxzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_y[j] + fl1_fx * pc_xzz[j] * pb_xy[j] + 0.5 * fl1_fx * pc_xxz[j] * pb_yz[j] + pa_yyz[j] * pc_xxyz[j] + 2.0 * pa_yy[j] * pc_xyzz[j] * pb_x[j] + pa_yy[j] * pc_xxzz[j] * pb_y[j] + pa_yy[j] * pc_xxyz[j] * pb_z[j] + 4.0 * pa_yz[j] * pc_xyyz[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xxyz[j] * pb_y[j] + 2.0 * pa_yz[j] * pc_xxyy[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yyzz[j] * pb_xx[j] + 4.0 * pa_y[j] * pc_xyzz[j] * pb_xy[j] + 4.0 * pa_y[j] * pc_xyyz[j] * pb_xz[j] + 2.0 * pa_y[j] * pc_xxyz[j] * pb_yz[j] + pc_yyyz[j] * pa_z[j] * pb_xx[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xyyy[j] * pa_z[j] * pb_xz[j] + pc_xxyy[j] * pa_z[j] * pb_yz[j] + pc_yyzz[j] * pb_xxy[j] + pc_yyyz[j] * pb_xxz[j] + 2.0 * pc_xyyz[j] * pb_xyz[j]);

                t_yyz_xxyz[j] += fl_s_0_0_5 * (-0.25 * pc_yyy[j] * fl2_fx - 0.75 * pc_yzz[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - pa_y[j] * pc_yyzz[j] * fl1_fx - pa_y[j] * pc_xxyy[j] * fl1_fx - pa_y[j] * fl1_fx * pc_xxzz[j] - 0.5 * pc_yyyz[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyyzz[j] * fl1_fx - 0.5 * pc_yyzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xxyyy[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxyzz[j] * fl1_fx - 1.5 * pc_xxyz[j] * fl1_fx * pa_z[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_xxzz[j] * pb_y[j] - pa_yy[j] * pc_xxyzz[j] - 2.0 * pa_yz[j] * pc_xxyyz[j] - 4.0 * pa_y[j] * pc_xyyzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xxyzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_xxyyz[j] * pb_z[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_x[j] - pc_xxyyz[j] * pa_z[j] * pb_y[j] - pc_xxyyy[j] * pa_z[j] * pb_z[j] - pc_yyyzz[j] * pb_xx[j] - 2.0 * pc_xyyzz[j] * pb_xy[j] - 2.0 * pc_xyyyz[j] * pb_xz[j] - pc_xxyyz[j] * pb_yz[j]);

                t_yyz_xxyz[j] += fl_s_0_0_6 * (0.5 * pc_yyyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + 1.5 * pc_xxyzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_xxyyzz[j] + pc_xxyyyz[j] * pa_z[j] + 2.0 * pc_xyyyzz[j] * pb_x[j] + pc_xxyyzz[j] * pb_y[j] + pc_xxyyyz[j] * pb_z[j]);

                t_yyz_xxyz[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];

                t_yyz_xxzz[j] = fl_s_0_0_0 * (0.125 * fl3_fx * pa_z[j] + 0.25 * fl3_fx * pb_z[j] + 0.25 * pa_yyz[j] * fl2_fx + 0.5 * pa_yy[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * fl2_fx * pb_xxz[j] + 0.5 * pa_yyz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_yyz[j] * fl1_fx * pb_zz[j] + pa_yy[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xxzz[j] + pa_yyz[j] * pb_xxzz[j]);

                t_yyz_xxzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pb_z[j] - 0.5 * pa_yyz[j] * fl2_fx - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - pa_yy[j] * fl2_fx * pb_z[j] - 0.5 * pa_yz[j] * pc_y[j] * fl2_fx - pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_xx[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - fl2_fx * pb_xz[j] * pc_x[j] - fl2_fx * pb_xxz[j] - 0.5 * pa_yyz[j] * pb_xx[j] * fl1_fx - pa_yyz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_yyz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_yyz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_yy[j] * pc_z[j] * pb_xx[j] * fl1_fx - 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_zz[j] - 2.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] - pa_yy[j] * fl1_fx * pb_xxz[j] - pa_yz[j] * pc_y[j] * pb_xx[j] * fl1_fx - pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] - 2.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] - fl1_fx * pa_z[j] * pb_xxz[j] * pc_z[j] - fl1_fx * pa_z[j] * pb_xzz[j] * pc_x[j] - 0.5 * fl1_fx * pc_z[j] * pb_xxzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xxzz[j] - 2.0 * pa_yyz[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_yyz[j] * pb_xzz[j] * pc_x[j] - pa_yy[j] * pc_z[j] * pb_xxzz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xxzz[j]);

                t_yyz_xxzz[j] += fl_s_0_0_2 * (0.375 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.75 * fl3_fx * pb_z[j] + 0.25 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * pc_z[j] * fl2_fx + 0.5 * pa_yy[j] * fl2_fx * pb_z[j] + pa_yz[j] * pc_y[j] * fl2_fx + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 2.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 0.25 * pc_yy[j] * pa_z[j] * fl2_fx + 0.5 * pc_yy[j] * fl2_fx * pb_z[j] + fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] + 0.25 * fl2_fx * pa_z[j] * pc_xx[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + 0.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.5 * fl2_fx * pc_xx[j] * pb_z[j] + 2.0 * fl2_fx * pb_xz[j] * pc_x[j] + 0.25 * fl2_fx * pa_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_z[j] * pb_zz[j] + 0.5 * fl2_fx * pb_xxz[j] + pa_yyz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_yyz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_yyz[j] * fl1_fx * pc_zz[j] + pa_yyz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_yy[j] * pc_z[j] * pb_xx[j] * fl1_fx + 3.0 * pa_yy[j] * pc_xz[j] * pb_x[j] * fl1_fx + pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_zz[j] + pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] + 2.0 * pa_yy[j] * fl1_fx * pb_xz[j] * pc_x[j] + pa_yz[j] * pc_y[j] * pb_xx[j] * fl1_fx + 2.0 * pa_yz[j] * pc_xy[j] * pb_x[j] * fl1_fx + 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 3.0 * pa_y[j] * pc_yz[j] * pb_xx[j] * fl1_fx + pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] + 2.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_yy[j] * pa_z[j] * pb_xx[j] * fl1_fx + 0.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] + pc_yy[j] * fl1_fx * pb_xxz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_zz[j] + 2.0 * fl1_fx * pa_z[j] * pb_xz[j] * pc_xz[j] + 0.5 * fl1_fx * pa_z[j] * pc_xx[j] * pb_zz[j] + fl1_fx * pc_zz[j] * pb_xxz[j] + fl1_fx * pc_xz[j] * pb_xzz[j] + fl1_fx * pa_z[j] * pb_xxz[j] * pc_z[j] + fl1_fx * pa_z[j] * pb_xzz[j] * pc_x[j] + 0.5 * fl1_fx * pc_z[j] * pb_xxzz[j] + pa_yyz[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_yyz[j] * pb_xz[j] * pc_xz[j] + pa_yyz[j] * pc_xx[j] * pb_zz[j] + 2.0 * pa_yy[j] * pc_zz[j] * pb_xxz[j] + 2.0 * pa_yy[j] * pc_xz[j] * pb_xzz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xxz[j] + 4.0 * pa_yz[j] * pc_xy[j] * pb_xzz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xxzz[j] + pc_yy[j] * pa_z[j] * pb_xxzz[j]);

                t_yyz_xxzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.125 * fl3_fx * pa_z[j] - 0.25 * fl3_fx * pb_z[j] - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 0.5 * pa_yz[j] * pc_y[j] * fl2_fx - 3.0 * pa_y[j] * pc_yz[j] * fl2_fx - pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 0.5 * pc_yy[j] * pa_z[j] * fl2_fx - 0.75 * pc_yyz[j] * fl2_fx - pc_yy[j] * fl2_fx * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_xx[j] - 0.5 * fl2_fx * pa_z[j] * pc_zz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_x[j] - 0.75 * fl2_fx * pc_xxz[j] - 0.25 * fl2_fx * pc_zzz[j] - fl2_fx * pc_zz[j] * pb_z[j] - fl2_fx * pc_xx[j] * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.25 * fl2_fx * pc_z[j] * pb_zz[j] - fl2_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_yyz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_yyz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_yy[j] * pc_xz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xxz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx - pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] - pa_yy[j] * fl1_fx * pc_xx[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_xy[j] * pb_x[j] * fl1_fx - pa_yz[j] * pc_xxy[j] * fl1_fx - pa_yz[j] * pc_yzz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_y[j] * pc_xyz[j] * pb_x[j] * fl1_fx - 2.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 2.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] - 4.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_yy[j] * pa_z[j] * pb_xx[j] * fl1_fx - pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx - pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 0.5 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yyz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_yyz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xyy[j] * fl1_fx * pb_xz[j] - pc_yy[j] * fl1_fx * pb_xxz[j] - fl1_fx * pa_z[j] * pb_x[j] * pc_xzz[j] - fl1_fx * pa_z[j] * pc_xxz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - 2.0 * fl1_fx * pc_xzz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_xxz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xx[j] * pc_zz[j] - 2.0 * fl1_fx * pa_z[j] * pb_xz[j] * pc_xz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xx[j] * pb_zz[j] - fl1_fx * pc_zz[j] * pb_xxz[j] - fl1_fx * pc_xz[j] * pb_xzz[j] - 2.0 * pa_yyz[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_yyz[j] * pc_xxz[j] * pb_z[j] - pa_yy[j] * pc_zzz[j] * pb_xx[j] - 4.0 * pa_yy[j] * pc_xzz[j] * pb_xz[j] - pa_yy[j] * pc_xxz[j] * pb_zz[j] - 2.0 * pa_yz[j] * pc_yzz[j] * pb_xx[j] - 8.0 * pa_yz[j] * pc_xyz[j] * pb_xz[j] - 2.0 * pa_yz[j] * pc_xxy[j] * pb_zz[j] - 4.0 * pa_y[j] * pc_yzz[j] * pb_xxz[j] - 4.0 * pa_y[j] * pc_xyz[j] * pb_xzz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xxz[j] - 2.0 * pc_xyy[j] * pa_z[j] * pb_xzz[j] - pc_yyz[j] * pb_xxzz[j]);

                t_yyz_xxzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 1.5 * pa_y[j] * pc_yz[j] * fl2_fx + 0.25 * pc_yy[j] * pa_z[j] * fl2_fx + 1.5 * pc_yyz[j] * fl2_fx + 0.5 * pc_yy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_xxz[j] + 0.5 * fl2_fx * pc_zzz[j] + 0.25 * fl2_fx * pa_z[j] * pc_xx[j] + 0.25 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 0.5 * fl2_fx * pc_zz[j] * pb_z[j] + 0.5 * fl2_fx * pc_xx[j] * pb_z[j] + 1.5 * pa_yy[j] * pc_xxz[j] * fl1_fx + 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx + pa_yz[j] * pc_xxy[j] * fl1_fx + pa_yz[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxyz[j] * fl1_fx + pa_y[j] * pc_yzzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 2.0 * pa_y[j] * pc_xxy[j] * fl1_fx * pb_z[j] + pc_xyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx + 0.5 * pc_yyzz[j] * pa_z[j] * fl1_fx + pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx + pc_yyzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyz[j] * fl1_fx * pb_zz[j] + pc_xxyy[j] * fl1_fx * pb_z[j] + 2.0 * pc_xyy[j] * fl1_fx * pb_xz[j] + 0.5 * fl1_fx * pa_z[j] * pc_xxzz[j] + fl1_fx * pc_xzzz[j] * pb_x[j] + fl1_fx * pc_xxzz[j] * pb_z[j] + fl1_fx * pa_z[j] * pb_x[j] * pc_xzz[j] + fl1_fx * pa_z[j] * pc_xxz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + 2.0 * fl1_fx * pc_xzz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_xxz[j] * pb_zz[j] + pa_yyz[j] * pc_xxzz[j] + 2.0 * pa_yy[j] * pc_xzzz[j] * pb_x[j] + 2.0 * pa_yy[j] * pc_xxzz[j] * pb_z[j] + 4.0 * pa_yz[j] * pc_xyzz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xxyz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_xx[j] + 8.0 * pa_y[j] * pc_xyzz[j] * pb_xz[j] + 2.0 * pa_y[j] * pc_xxyz[j] * pb_zz[j] + pc_yyzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_xz[j] + pc_xxyy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_yyzz[j] * pb_xxz[j] + 2.0 * pc_xyyz[j] * pb_xzz[j]);

                t_yyz_xxzz[j] += fl_s_0_0_5 * (-0.75 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_xxz[j] - 0.25 * fl2_fx * pc_zzz[j] - 3.0 * pa_y[j] * pc_xxyz[j] * fl1_fx - pa_y[j] * pc_yzzz[j] * fl1_fx - 0.5 * pc_xxyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyzz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxyyz[j] * fl1_fx - 0.5 * pc_yyzzz[j] * fl1_fx - pc_yyzz[j] * fl1_fx * pb_z[j] - pc_xxyy[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_xxzzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xxzz[j] - fl1_fx * pc_xzzz[j] * pb_x[j] - fl1_fx * pc_xxzz[j] * pb_z[j] - pa_yy[j] * pc_xxzzz[j] - 2.0 * pa_yz[j] * pc_xxyzz[j] - 4.0 * pa_y[j] * pc_xyzzz[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xxyzz[j] * pb_z[j] - 2.0 * pc_xyyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - pc_yyzzz[j] * pb_xx[j] - 4.0 * pc_xyyzz[j] * pb_xz[j] - pc_xxyyz[j] * pb_zz[j]);

                t_yyz_xxzz[j] += fl_s_0_0_6 * (1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * pc_yyzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_xxzzz[j] + 2.0 * pa_y[j] * pc_xxyzzz[j] + pc_xxyyzz[j] * pa_z[j] + 2.0 * pc_xyyzzz[j] * pb_x[j] + 2.0 * pc_xxyyzz[j] * pb_z[j]);

                t_yyz_xxzz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_111_114(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (111,114)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyy = pcDistances.data(119 * idx + 70);

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyyz = pcDistances.data(119 * idx + 105);

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyz_xyyy = primBuffer.data(150 * idx + 111);

            auto t_yyz_xyyz = primBuffer.data(150 * idx + 112);

            auto t_yyz_xyzz = primBuffer.data(150 * idx + 113);

            // Batch of Integrals (111,114)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, \
                                     pb_xyz, pb_xyzz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, \
                                     pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyy, pc_xyyyyyz, pc_xyyyyz, \
                                     pc_xyyyyzz, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyz, \
                                     pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, \
                                     pc_yyyyyz, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, \
                                     pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, s_0_0_0, s_0_0_1, s_0_0_2, \
                                     s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yyz_xyyy, t_yyz_xyyz, t_yyz_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyz_xyyy[j] = fl_s_0_0_0 * (1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_yyz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_yz[j] * fl1_fx * pb_xyy[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyyy[j] + pa_yyz[j] * pb_xyyy[j]);

                t_yyz_xyyy[j] += fl_s_0_0_1 * (-3.0 * pa_yz[j] * fl2_fx * pb_x[j] - 1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 2.25 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 2.25 * fl2_fx * pc_z[j] * pb_xy[j] - 4.5 * fl2_fx * pa_z[j] * pb_xy[j] - 1.5 * pa_yyz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_yyz[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_z[j] * pb_xy[j] * fl1_fx - 9.0 * pa_yz[j] * pc_y[j] * pb_xy[j] * fl1_fx - 3.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 3.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyy[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xyy[j] - 4.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyy[j] - 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_yyy[j] - 0.5 * fl1_fx * pc_z[j] * pb_xyyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyyy[j] - 3.0 * pa_yyz[j] * pb_xyy[j] * pc_y[j] - pa_yyz[j] * pc_x[j] * pb_yyy[j] - pa_yy[j] * pc_z[j] * pb_xyyy[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xyyy[j]);

                t_yyz_xyyy[j] += fl_s_0_0_2 * (3.0 * pa_yz[j] * fl2_fx * pc_x[j] + 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 7.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pc_xz[j] * pb_y[j] + 4.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] + 4.5 * fl2_fx * pc_z[j] * pb_xy[j] + 2.25 * fl2_fx * pa_z[j] * pb_xy[j] + 1.5 * pa_yyz[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_yy[j] * pc_xz[j] * pb_y[j] * fl1_fx + 9.0 * pa_yz[j] * pc_y[j] * pb_xy[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx + 9.0 * pa_yz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 9.0 * pa_y[j] * pc_yz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yy[j] + 3.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 3.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyy[j] + 9.0 * pc_yy[j] * pa_z[j] * pb_xy[j] * fl1_fx + 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] + 4.5 * pc_yz[j] * fl1_fx * pb_xyy[j] + 4.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyy[j] + 0.5 * fl1_fx * pc_xz[j] * pb_yyy[j] + 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_yyy[j] + 0.5 * fl1_fx * pc_z[j] * pb_xyyy[j] + 3.0 * pa_yyz[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_yyz[j] * pc_xy[j] * pb_yy[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_xyy[j] + pa_yy[j] * pc_xz[j] * pb_yyy[j] + 6.0 * pa_yz[j] * pc_yy[j] * pb_xyy[j] + 2.0 * pa_yz[j] * pc_xy[j] * pb_yyy[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xyyy[j] + pc_yy[j] * pa_z[j] * pb_xyyy[j]);

                t_yyz_xyyy[j] += fl_s_0_0_3 * (-3.0 * pa_y[j] * fl2_fx * pc_xz[j] - 1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - 7.5 * pc_xy[j] * fl2_fx * pa_z[j] - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 3.75 * pc_xyz[j] * fl2_fx - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 4.5 * fl2_fx * pc_xz[j] * pb_y[j] - 2.25 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 2.25 * fl2_fx * pc_z[j] * pb_xy[j] - 1.5 * pa_yyz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx - 9.0 * pa_yz[j] * pc_xy[j] * pb_y[j] * fl1_fx - 6.0 * pa_yz[j] * pc_xyy[j] * fl1_fx - 9.0 * pa_y[j] * pc_yz[j] * pb_xy[j] * fl1_fx - 6.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 9.0 * pa_y[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 3.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yy[j] - 9.0 * pc_yy[j] * pa_z[j] * pb_xy[j] * fl1_fx - 5.0 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_yyz[j] * pb_xy[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yy[j] - 4.5 * pc_yz[j] * fl1_fx * pb_xyy[j] - 0.5 * fl1_fx * pc_xz[j] * pb_yyy[j] - pa_yyz[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_yyz[j] * pc_xyy[j] * pb_y[j] - 3.0 * pa_yy[j] * pc_yyz[j] * pb_xy[j] - 3.0 * pa_yy[j] * pc_xyz[j] * pb_yy[j] - 6.0 * pa_yz[j] * pc_yyy[j] * pb_xy[j] - 6.0 * pa_yz[j] * pc_xyy[j] * pb_yy[j] - 6.0 * pa_y[j] * pc_yyz[j] * pb_xyy[j] - 2.0 * pa_y[j] * pc_xyz[j] * pb_yyy[j] - 3.0 * pc_yyy[j] * pa_z[j] * pb_xyy[j] - pc_xyy[j] * pa_z[j] * pb_yyy[j] - pc_yyz[j] * pb_xyyy[j]);

                t_yyz_xyyy[j] += fl_s_0_0_4 * (1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_xy[j] * fl2_fx * pa_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * fl2_fx * pc_xz[j] * pb_y[j] + 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_xyy[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyyz[j] * fl1_fx + 5.0 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 9.0 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx + 9.0 * pc_yyz[j] * pb_xy[j] * fl1_fx + 5.0 * pc_yyyz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xyyz[j] * pb_y[j] * fl1_fx + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pa_yyz[j] * pc_xyyy[j] + pa_yy[j] * pc_yyyz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_yz[j] * pc_yyyy[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xyyy[j] * pb_y[j] + 6.0 * pa_y[j] * pc_yyyz[j] * pb_xy[j] + 6.0 * pa_y[j] * pc_xyyz[j] * pb_yy[j] + 3.0 * pc_yyyy[j] * pa_z[j] * pb_xy[j] + 3.0 * pc_xyyy[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_yyyz[j] * pb_xyy[j] + pc_xyyz[j] * pb_yyy[j]);

                t_yyz_xyyy[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 6.0 * pa_y[j] * pc_xyyz[j] * fl1_fx - 5.0 * pc_xyyy[j] * pa_z[j] * fl1_fx - 5.0 * pc_yyyz[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyyz[j] * pb_y[j] * fl1_fx - 5.0 * pc_xyyyz[j] * fl1_fx - pa_yy[j] * pc_xyyyz[j] - 2.0 * pa_yz[j] * pc_xyyyy[j] - 2.0 * pa_y[j] * pc_yyyyz[j] * pb_x[j] - 6.0 * pa_y[j] * pc_xyyyz[j] * pb_y[j] - pc_yyyyy[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xyyyy[j] * pa_z[j] * pb_y[j] - 3.0 * pc_yyyyz[j] * pb_xy[j] - 3.0 * pc_xyyyz[j] * pb_yy[j]);

                t_yyz_xyyy[j] += fl_s_0_0_6 * (5.0 * pc_xyyyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyyyyz[j] + pc_xyyyyy[j] * pa_z[j] + pc_yyyyyz[j] * pb_x[j] + 3.0 * pc_xyyyyz[j] * pb_y[j]);

                t_yyz_xyyy[j] += -fl_s_0_0_7 * pc_xyyyyyz[j];

                t_yyz_xyyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.25 * pa_yy[j] * fl2_fx * pb_x[j] + pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_yyz[j] * pb_xz[j] * fl1_fx + 0.5 * pa_yy[j] * fl1_fx * pb_xyy[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyyz[j] + pa_yyz[j] * pb_xyyz[j]);

                t_yyz_xyyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 0.5 * pa_yy[j] * fl2_fx * pb_x[j] - 0.25 * pa_yy[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.0 * pa_y[j] * fl2_fx * pb_xy[j] - 1.5 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 1.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_yy[j] - 0.5 * fl2_fx * pb_xyy[j] - 0.5 * pa_yyz[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_yyz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_yyz[j] * pc_x[j] * fl1_fx * pb_z[j] - 0.5 * pa_yy[j] * pc_z[j] * pb_xz[j] * fl1_fx - pa_yy[j] * fl1_fx * pb_xy[j] * pc_y[j] - 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_yy[j] * fl1_fx * pb_xyy[j] - 3.0 * pa_yz[j] * pc_y[j] * pb_xz[j] * fl1_fx - pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_z[j] - 2.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 2.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyz[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xyz[j] - 3.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyy[j] * pc_z[j] - 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_yyz[j] - 0.5 * fl1_fx * pc_z[j] * pb_xyyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyyz[j] - pa_yyz[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_yyz[j] * pb_xyz[j] * pc_y[j] - pa_yyz[j] * pc_x[j] * pb_yyz[j] - pa_yy[j] * pc_z[j] * pb_xyyz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xyyz[j]);

                t_yyz_xyyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 0.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.25 * pa_yy[j] * fl2_fx * pb_x[j] + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 2.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + pa_y[j] * fl2_fx * pb_xy[j] + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * pc_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_xz[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * fl2_fx * pc_x[j] * pb_yy[j] + 0.25 * fl2_fx * pb_xyy[j] + 0.5 * pa_yyz[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_yyz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_yyz[j] * pc_x[j] * fl1_fx * pb_z[j] + 0.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 0.5 * pa_yy[j] * pc_z[j] * pb_xz[j] * fl1_fx + 0.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_z[j] + 0.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_yy[j] + pa_yy[j] * fl1_fx * pc_xy[j] * pb_y[j] + pa_yy[j] * fl1_fx * pb_xy[j] * pc_y[j] + 0.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_yy[j] + 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_y[j] * pb_xz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_yz[j] * pb_xz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] + pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_xyy[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_y[j] + 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xy[j] + 2.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yz[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_z[j] + 2.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 2.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_xyz[j] + 3.0 * pc_yy[j] * pa_z[j] * pb_xz[j] * fl1_fx + 0.5 * pc_yy[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xy[j] + 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_xyz[j] + 0.5 * fl1_fx * pa_z[j] * pc_xz[j] * pb_yy[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] + 0.5 * fl1_fx * pc_xz[j] * pb_yyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyy[j] * pc_z[j] + 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_yyz[j] + 0.5 * fl1_fx * pc_z[j] * pb_xyyz[j] + 2.0 * pa_yyz[j] * pb_xy[j] * pc_yz[j] + pa_yyz[j] * pb_xz[j] * pc_yy[j] + pa_yyz[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_yyz[j] * pc_xy[j] * pb_yz[j] + pa_yy[j] * pc_zz[j] * pb_xyy[j] + 2.0 * pa_yy[j] * pc_yz[j] * pb_xyz[j] + pa_yy[j] * pc_xz[j] * pb_yyz[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_xyy[j] + 4.0 * pa_yz[j] * pc_yy[j] * pb_xyz[j] + 2.0 * pa_yz[j] * pc_xy[j] * pb_yyz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xyyz[j] + pc_yy[j] * pa_z[j] * pb_xyyz[j]);

                t_yyz_xyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.25 * pa_yy[j] * fl2_fx * pc_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.0 * pc_yy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xyy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_y[j] - 1.5 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_xzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_x[j] - 1.5 * fl2_fx * pc_xz[j] * pb_z[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_yyz[j] * pc_xz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 0.5 * pa_yy[j] * pc_xzz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_xz[j] * fl1_fx * pb_z[j] - 0.5 * pa_yy[j] * fl1_fx * pc_xyy[j] - 0.5 * pa_yy[j] * fl1_fx * pb_x[j] * pc_yy[j] - pa_yy[j] * fl1_fx * pc_xy[j] * pb_y[j] - 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xy[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_yz[j] * pb_xz[j] * fl1_fx - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - pa_y[j] * pc_yyy[j] * fl1_fx * pb_x[j] - 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xy[j] - pa_y[j] * pc_xy[j] * fl1_fx * pb_yy[j] - 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_y[j] - 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xy[j] - 2.0 * pa_y[j] * fl1_fx * pc_xz[j] * pb_yz[j] - 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_yy[j] * pa_z[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_yyz[j] * pb_xz[j] * fl1_fx - pc_yyy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xyy[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xy[j] - 3.0 * pc_xy[j] * fl1_fx * pa_z[j] * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pc_xzz[j] * pb_yy[j] - 0.5 * fl1_fx * pa_z[j] * pc_xz[j] * pb_yy[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xyy[j] - 0.5 * fl1_fx * pc_xz[j] * pb_yyz[j] - pa_yyz[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_yyz[j] * pc_xyz[j] * pb_y[j] - pa_yyz[j] * pc_xyy[j] * pb_z[j] - 2.0 * pa_yy[j] * pc_yzz[j] * pb_xy[j] - pa_yy[j] * pc_yyz[j] * pb_xz[j] - pa_yy[j] * pc_xzz[j] * pb_yy[j] - 2.0 * pa_yy[j] * pc_xyz[j] * pb_yz[j] - 4.0 * pa_yz[j] * pc_yyz[j] * pb_xy[j] - 2.0 * pa_yz[j] * pc_yyy[j] * pb_xz[j] - 2.0 * pa_yz[j] * pc_xyz[j] * pb_yy[j] - 4.0 * pa_yz[j] * pc_xyy[j] * pb_yz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xyy[j] - 4.0 * pa_y[j] * pc_yyz[j] * pb_xyz[j] - 2.0 * pa_y[j] * pc_xyz[j] * pb_yyz[j] - pc_yyz[j] * pa_z[j] * pb_xyy[j] - 2.0 * pc_yyy[j] * pa_z[j] * pb_xyz[j] - pc_xyy[j] * pa_z[j] * pb_yyz[j] - pc_yyz[j] * pb_xyyz[j]);

                t_yyz_xyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pc_xz[j] * pb_z[j] + 0.5 * pa_yy[j] * pc_xzz[j] * fl1_fx + 0.5 * pa_yy[j] * fl1_fx * pc_xyy[j] + 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + pa_y[j] * pc_xyyy[j] * fl1_fx + pa_y[j] * pc_yyy[j] * fl1_fx * pb_x[j] + 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_y[j] + 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_y[j] + 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_yyz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] + pc_xyyy[j] * fl1_fx * pb_y[j] + pc_yyy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_xzz[j] * pb_yy[j] + pa_yyz[j] * pc_xyyz[j] + pa_yy[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_yy[j] * pc_xyzz[j] * pb_y[j] + pa_yy[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_yz[j] * pc_yyyz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xyyz[j] * pb_y[j] + 2.0 * pa_yz[j] * pc_xyyy[j] * pb_z[j] + 4.0 * pa_y[j] * pc_yyzz[j] * pb_xy[j] + 2.0 * pa_y[j] * pc_yyyz[j] * pb_xz[j] + 2.0 * pa_y[j] * pc_xyzz[j] * pb_yy[j] + 4.0 * pa_y[j] * pc_xyyz[j] * pb_yz[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_xy[j] + pc_yyyy[j] * pa_z[j] * pb_xz[j] + pc_xyyz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_xyyy[j] * pa_z[j] * pb_yz[j] + pc_yyzz[j] * pb_xyy[j] + 2.0 * pc_yyyz[j] * pb_xyz[j] + pc_xyyz[j] * pb_yyz[j]);

                t_yyz_xyyz[j] += fl_s_0_0_5 * (-1.5 * pc_xyy[j] * fl2_fx - 0.75 * fl2_fx * pc_xzz[j] - 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - pa_y[j] * pc_xyyy[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_xyyyy[j] * fl1_fx - 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] - pc_xyyy[j] * fl1_fx * pb_y[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - pa_yy[j] * pc_xyyzz[j] - 2.0 * pa_yz[j] * pc_xyyyz[j] - 2.0 * pa_y[j] * pc_yyyzz[j] * pb_x[j] - 4.0 * pa_y[j] * pc_xyyzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_xyyyz[j] * pb_z[j] - pc_yyyyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_y[j] - pc_xyyyy[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yyyzz[j] * pb_xy[j] - pc_yyyyz[j] * pb_xz[j] - pc_xyyzz[j] * pb_yy[j] - 2.0 * pc_xyyyz[j] * pb_yz[j]);

                t_yyz_xyyz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xyyyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyyyzz[j] + pc_xyyyyz[j] * pa_z[j] + pc_yyyyzz[j] * pb_x[j] + 2.0 * pc_xyyyzz[j] * pb_y[j] + pc_xyyyyz[j] * pb_z[j]);

                t_yyz_xyyz[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];

                t_yyz_xyzz[j] = fl_s_0_0_0 * (0.5 * pa_yz[j] * fl2_fx * pb_x[j] + pa_y[j] * fl2_fx * pb_xz[j] + 0.25 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_yyz[j] * pb_xy[j] * fl1_fx + pa_yy[j] * fl1_fx * pb_xyz[j] + pa_yz[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xyzz[j] + pa_yyz[j] * pb_xyzz[j]);

                t_yyz_xyzz[j] += fl_s_0_0_1 * (-pa_yz[j] * fl2_fx * pb_x[j] - 0.5 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 2.0 * pa_y[j] * fl2_fx * pb_xz[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pc_y[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pa_z[j] * pb_xy[j] - 0.25 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * fl2_fx * pc_x[j] * pb_yz[j] - fl2_fx * pb_xyz[j] - 0.5 * pa_yyz[j] * pb_xy[j] * fl1_fx - 0.5 * pa_yyz[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_yyz[j] * pc_x[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_z[j] * pb_xy[j] * fl1_fx - pa_yy[j] * fl1_fx * pb_xz[j] * pc_y[j] - pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] - pa_yy[j] * fl1_fx * pb_xyz[j] - pa_yz[j] * pc_y[j] * pb_xy[j] * fl1_fx - 2.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_z[j] - pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] - pa_y[j] * fl1_fx * pc_z[j] * pb_xzz[j] - pa_yz[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xzz[j] - fl1_fx * pa_z[j] * pb_xyz[j] * pc_z[j] - 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_yzz[j] - 0.5 * fl1_fx * pc_z[j] * pb_xyzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xyzz[j] - 2.0 * pa_yyz[j] * pb_xyz[j] * pc_z[j] - pa_yyz[j] * pb_xzz[j] * pc_y[j] - pa_yyz[j] * pc_x[j] * pb_yzz[j] - pa_yy[j] * pc_z[j] * pb_xyzz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xyzz[j]);

                t_yyz_xyzz[j] += fl_s_0_0_2 * (pa_yz[j] * fl2_fx * pc_x[j] + 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 2.0 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.5 * pa_yz[j] * fl2_fx * pb_x[j] + pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pc_y[j] * fl2_fx * pb_xz[j] + 0.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] + 1.5 * fl2_fx * pc_z[j] * pb_xy[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + fl2_fx * pc_x[j] * pb_yz[j] + 0.25 * fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_yyz[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_yyz[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_yyz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_z[j] * pb_xy[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx + 1.5 * pa_yy[j] * pc_xz[j] * pb_y[j] * fl1_fx + pa_yy[j] * fl1_fx * pc_xy[j] * pb_z[j] + pa_yy[j] * fl1_fx * pb_xz[j] * pc_y[j] + pa_yy[j] * fl1_fx * pc_x[j] * pb_yz[j] + pa_yz[j] * pc_y[j] * pb_xy[j] * fl1_fx + pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx + pa_yz[j] * pc_xy[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_yz[j] * pb_xy[j] * fl1_fx + 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] + 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] + 2.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xyz[j] + pa_yz[j] * fl1_fx * pb_x[j] * pc_zz[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_z[j] + 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xz[j] + pa_y[j] * fl1_fx * pc_xz[j] * pb_zz[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_z[j] + pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] + pa_y[j] * fl1_fx * pc_z[j] * pb_xzz[j] + 0.5 * pc_yy[j] * pa_z[j] * pb_xy[j] * fl1_fx + pc_yy[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xz[j] + 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_xzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_zz[j] + fl1_fx * pa_z[j] * pc_xz[j] * pb_yz[j] + fl1_fx * pc_zz[j] * pb_xyz[j] + 0.5 * fl1_fx * pc_xz[j] * pb_yzz[j] + fl1_fx * pa_z[j] * pb_xyz[j] * pc_z[j] + 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_yzz[j] + 0.5 * fl1_fx * pc_z[j] * pb_xyzz[j] + pa_yyz[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_yyz[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_yyz[j] * pc_xz[j] * pb_yz[j] + pa_yyz[j] * pc_xy[j] * pb_zz[j] + 2.0 * pa_yy[j] * pc_zz[j] * pb_xyz[j] + pa_yy[j] * pc_yz[j] * pb_xzz[j] + pa_yy[j] * pc_xz[j] * pb_yzz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xyz[j] + 2.0 * pa_yz[j] * pc_yy[j] * pb_xzz[j] + 2.0 * pa_yz[j] * pc_xy[j] * pb_yzz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xyzz[j] + pc_yy[j] * pa_z[j] * pb_xyzz[j]);

                t_yyz_xyzz[j] += fl_s_0_0_3 * (-3.0 * pa_y[j] * fl2_fx * pc_xz[j] - 0.5 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_x[j] - pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pa_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_x[j] - 1.5 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pc_xz[j] * pb_y[j] - 0.25 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 0.75 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * fl2_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_yyz[j] * pc_xy[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * pb_x[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx - pa_yy[j] * fl1_fx * pc_xy[j] * pb_z[j] - pa_yz[j] * pc_yy[j] * pb_x[j] * fl1_fx - pa_yz[j] * pc_xy[j] * pb_y[j] * fl1_fx - pa_yz[j] * pc_xyy[j] * fl1_fx - 3.0 * pa_y[j] * pc_yz[j] * pb_xy[j] * fl1_fx - 3.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_xyz[j] * pb_y[j] * fl1_fx - 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_xz[j] - 2.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_yz[j] - pa_yz[j] * fl1_fx * pc_xzz[j] - pa_y[j] * fl1_fx * pc_zzz[j] * pb_x[j] - 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] - pa_yz[j] * fl1_fx * pb_x[j] * pc_zz[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xz[j] * pb_z[j] - 2.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_xz[j] - pa_y[j] * fl1_fx * pc_xz[j] * pb_zz[j] - 0.5 * pc_yy[j] * pa_z[j] * pb_xy[j] * fl1_fx - 0.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_yyz[j] * pb_xy[j] * fl1_fx - pc_yyy[j] * fl1_fx * pb_xz[j] - pc_xyy[j] * fl1_fx * pb_yz[j] - pc_yy[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_x[j] - 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] - fl1_fx * pc_xzz[j] * pb_yz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xy[j] * pc_zz[j] - fl1_fx * pa_z[j] * pc_xz[j] * pb_yz[j] - fl1_fx * pc_zz[j] * pb_xyz[j] - 0.5 * fl1_fx * pc_xz[j] * pb_yzz[j] - pa_yyz[j] * pb_x[j] * pc_yzz[j] - pa_yyz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_yyz[j] * pc_xyz[j] * pb_z[j] - pa_yy[j] * pc_zzz[j] * pb_xy[j] - 2.0 * pa_yy[j] * pc_yzz[j] * pb_xz[j] - 2.0 * pa_yy[j] * pc_xzz[j] * pb_yz[j] - pa_yy[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_yz[j] * pc_yzz[j] * pb_xy[j] - 4.0 * pa_yz[j] * pc_yyz[j] * pb_xz[j] - 4.0 * pa_yz[j] * pc_xyz[j] * pb_yz[j] - 2.0 * pa_yz[j] * pc_xyy[j] * pb_zz[j] - 4.0 * pa_y[j] * pc_yzz[j] * pb_xyz[j] - 2.0 * pa_y[j] * pc_yyz[j] * pb_xzz[j] - 2.0 * pa_y[j] * pc_xyz[j] * pb_yzz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xyz[j] - pc_yyy[j] * pa_z[j] * pb_xzz[j] - pc_xyy[j] * pa_z[j] * pb_yzz[j] - pc_yyz[j] * pb_xyzz[j]);

                t_yyz_xyzz[j] += fl_s_0_0_4 * (1.5 * pa_y[j] * fl2_fx * pc_xz[j] + 4.5 * pc_xyz[j] * fl2_fx + 0.75 * pc_xy[j] * fl2_fx * pa_z[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pc_xz[j] * pb_y[j] + 1.5 * pa_yy[j] * pc_xyz[j] * fl1_fx + pa_yz[j] * pc_xyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyz[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyy[j] * fl1_fx * pb_z[j] + pa_y[j] * fl1_fx * pc_xzzz[j] + pa_yz[j] * fl1_fx * pc_xzz[j] + pa_y[j] * fl1_fx * pc_zzz[j] * pb_x[j] + 2.0 * pa_y[j] * fl1_fx * pc_xzz[j] * pb_z[j] + 0.5 * pc_yyy[j] * pa_z[j] * pb_x[j] * fl1_fx + 0.5 * pc_xyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx + 1.5 * pc_yyz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xyyz[j] * pb_y[j] * fl1_fx + pc_xyyy[j] * fl1_fx * pb_z[j] + pc_yyy[j] * fl1_fx * pb_xz[j] + pc_xyy[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] + 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_x[j] + 3.0 * pc_xyz[j] * fl1_fx * pa_z[j] * pb_z[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_xzzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xy[j] + fl1_fx * pc_xzz[j] * pb_yz[j] + pa_yyz[j] * pc_xyzz[j] + pa_yy[j] * pc_yzzz[j] * pb_x[j] + pa_yy[j] * pc_xzzz[j] * pb_y[j] + 2.0 * pa_yy[j] * pc_xyzz[j] * pb_z[j] + 2.0 * pa_yz[j] * pc_yyzz[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xyzz[j] * pb_y[j] + 4.0 * pa_yz[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_xy[j] + 4.0 * pa_y[j] * pc_yyzz[j] * pb_xz[j] + 4.0 * pa_y[j] * pc_xyzz[j] * pb_yz[j] + 2.0 * pa_y[j] * pc_xyyz[j] * pb_zz[j] + pc_yyzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_yz[j] + pc_xyyy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_yyzz[j] * pb_xyz[j] + pc_yyyz[j] * pb_xzz[j] + pc_xyyz[j] * pb_yzz[j]);

                t_yyz_xyzz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 3.0 * pa_y[j] * pc_xyyz[j] * fl1_fx - pa_y[j] * fl1_fx * pc_xzzz[j] - 0.5 * pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyyz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyyyz[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pa_z[j] - 1.5 * pc_yzzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_xzzz[j] * pb_y[j] - pa_yy[j] * pc_xyzzz[j] - 2.0 * pa_yz[j] * pc_xyyzz[j] - 2.0 * pa_y[j] * pc_yyzzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xyzzz[j] * pb_y[j] - 4.0 * pa_y[j] * pc_xyyzz[j] * pb_z[j] - pc_yyyzz[j] * pa_z[j] * pb_x[j] - pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - pc_yyzzz[j] * pb_xy[j] - 2.0 * pc_yyyzz[j] * pb_xz[j] - 2.0 * pc_xyyzz[j] * pb_yz[j] - pc_xyyyz[j] * pb_zz[j]);

                t_yyz_xyzz[j] += fl_s_0_0_6 * (1.5 * pc_xyyyz[j] * fl1_fx + 1.5 * pc_xyzzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_xyyzzz[j] + pc_xyyyzz[j] * pa_z[j] + pc_yyyzzz[j] * pb_x[j] + pc_xyyzzz[j] * pb_y[j] + 2.0 * pc_xyyyzz[j] * pb_z[j]);

                t_yyz_xyzz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_114_117(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (114,117)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyyyyy = pcDistances.data(119 * idx + 76);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            auto pc_yyyyyyz = pcDistances.data(119 * idx + 112);

            auto pc_yyyyyzz = pcDistances.data(119 * idx + 113);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyz_xzzz = primBuffer.data(150 * idx + 114);

            auto t_yyz_yyyy = primBuffer.data(150 * idx + 115);

            auto t_yyz_yyyz = primBuffer.data(150 * idx + 116);

            // Batch of Integrals (114,117)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, \
                                     pb_yyy, pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xy, pc_xyy, \
                                     pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, \
                                     pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyy, \
                                     pc_yyyyyyz, pc_yyyyyz, pc_yyyyyzz, pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_yyz_xzzz, t_yyz_yyyy, t_yyz_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyz_xzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.75 * fl2_fx * pb_xzz[j] + 1.5 * pa_yyz[j] * pb_xz[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pb_xzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_xzzz[j] + pa_yyz[j] * pb_xzzz[j]);

                t_yyz_xzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 1.5 * pa_yy[j] * fl2_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * fl2_fx * pa_z[j] * pb_xz[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_xz[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 1.5 * fl2_fx * pb_xzz[j] - 1.5 * pa_yyz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yyz[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_x[j] * pb_z[j] * fl1_fx - 4.5 * pa_yy[j] * pc_z[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_yy[j] * fl1_fx * pb_xzz[j] - 3.0 * pa_yz[j] * pc_y[j] * pb_xz[j] * fl1_fx - 3.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] - 1.5 * fl1_fx * pa_z[j] * pb_xzz[j] * pc_z[j] - 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_zzz[j] - 0.5 * fl1_fx * pc_z[j] * pb_xzzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_xzzz[j] - 3.0 * pa_yyz[j] * pb_xzz[j] * pc_z[j] - pa_yyz[j] * pc_x[j] * pb_zzz[j] - pa_yy[j] * pc_z[j] * pb_xzzz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_xzzz[j]);

                t_yyz_xzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_yy[j] * fl2_fx * pc_x[j] + 0.75 * pa_yy[j] * fl2_fx * pb_x[j] + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 4.5 * fl2_fx * pc_z[j] * pb_xz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 2.25 * fl2_fx * pc_xz[j] * pb_z[j] + 1.5 * fl2_fx * pc_x[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_xz[j] + 0.75 * fl2_fx * pb_xzz[j] + 1.5 * pa_yyz[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_xz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_z[j] * pb_xz[j] * fl1_fx + 3.0 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx + 4.5 * pa_yy[j] * pc_xz[j] * pb_z[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_x[j] * pb_zz[j] + 3.0 * pa_yz[j] * pc_y[j] * pb_xz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xy[j] * pb_z[j] * fl1_fx + 9.0 * pa_y[j] * pc_yz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] + 3.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_yy[j] * pa_z[j] * pb_xz[j] * fl1_fx + 1.5 * pc_yy[j] * fl1_fx * pb_xzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_zz[j] + 1.5 * fl1_fx * pa_z[j] * pc_xz[j] * pb_zz[j] + 1.5 * fl1_fx * pc_zz[j] * pb_xzz[j] + 0.5 * fl1_fx * pc_xz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_xzz[j] * pc_z[j] + 0.5 * fl1_fx * pa_z[j] * pc_x[j] * pb_zzz[j] + 0.5 * fl1_fx * pc_z[j] * pb_xzzz[j] + 3.0 * pa_yyz[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_yyz[j] * pc_xz[j] * pb_zz[j] + 3.0 * pa_yy[j] * pc_zz[j] * pb_xzz[j] + pa_yy[j] * pc_xz[j] * pb_zzz[j] + 6.0 * pa_yz[j] * pc_yz[j] * pb_xzz[j] + 2.0 * pa_yz[j] * pc_xy[j] * pb_zzz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_xzzz[j] + pc_yy[j] * pa_z[j] * pb_xzzz[j]);

                t_yyz_xzzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_yy[j] * fl2_fx * pc_x[j] - 3.0 * pa_y[j] * pc_xy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_x[j] - 1.5 * pc_yy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * fl2_fx * pa_z[j] * pc_xz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_x[j] - 4.5 * fl2_fx * pc_xz[j] * pb_z[j] - 1.5 * fl2_fx * pc_xzz[j] - 0.75 * fl2_fx * pa_z[j] * pb_x[j] * pc_z[j] - 0.75 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_xz[j] - 0.75 * fl2_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_yyz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_zz[j] * pb_x[j] * fl1_fx - 4.5 * pa_yy[j] * pc_xz[j] * pb_z[j] * fl1_fx - 3.0 * pa_yy[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xy[j] * pb_z[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 9.0 * pa_y[j] * pc_yz[j] * pb_xz[j] * fl1_fx - 6.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 9.0 * pa_y[j] * pc_xyz[j] * pb_z[j] * fl1_fx - 3.0 * pa_y[j] * pc_xy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yy[j] * pa_z[j] * pb_xz[j] * fl1_fx - 1.5 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_z[j] * pb_z[j] * fl1_fx - 4.5 * pc_yyz[j] * pb_xz[j] * fl1_fx - 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yy[j] * fl1_fx * pb_xzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_zzz[j] - 1.5 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_xz[j] - 1.5 * fl1_fx * pc_xzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_z[j] * pb_xz[j] * pc_zz[j] - 1.5 * fl1_fx * pa_z[j] * pc_xz[j] * pb_zz[j] - 1.5 * fl1_fx * pc_zz[j] * pb_xzz[j] - 0.5 * fl1_fx * pc_xz[j] * pb_zzz[j] - pa_yyz[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_yyz[j] * pc_xzz[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_zzz[j] * pb_xz[j] - 3.0 * pa_yy[j] * pc_xzz[j] * pb_zz[j] - 6.0 * pa_yz[j] * pc_yzz[j] * pb_xz[j] - 6.0 * pa_yz[j] * pc_xyz[j] * pb_zz[j] - 6.0 * pa_y[j] * pc_yzz[j] * pb_xzz[j] - 2.0 * pa_y[j] * pc_xyz[j] * pb_zzz[j] - 3.0 * pc_yyz[j] * pa_z[j] * pb_xzz[j] - pc_xyy[j] * pa_z[j] * pb_zzz[j] - pc_yyz[j] * pb_xzzz[j]);

                t_yyz_xzzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * pa_y[j] * pc_xy[j] * fl2_fx + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 3.0 * fl2_fx * pc_xzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_xz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 2.25 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * pa_yy[j] * pc_xzz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_xyz[j] * pb_z[j] * fl1_fx + 6.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 1.5 * pc_xyy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_yyz[j] * pb_xz[j] * fl1_fx + 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pa_z[j] * pc_xzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] + 1.5 * fl1_fx * pc_xzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_z[j] * pb_x[j] * pc_zzz[j] + 1.5 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_xz[j] + 1.5 * fl1_fx * pc_xzz[j] * pb_zz[j] + pa_yyz[j] * pc_xzzz[j] + pa_yy[j] * pc_zzzz[j] * pb_x[j] + 3.0 * pa_yy[j] * pc_xzzz[j] * pb_z[j] + 2.0 * pa_yz[j] * pc_yzzz[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xyzz[j] * pb_z[j] + 6.0 * pa_y[j] * pc_yzzz[j] * pb_xz[j] + 6.0 * pa_y[j] * pc_xyzz[j] * pb_zz[j] + 3.0 * pc_yyzz[j] * pa_z[j] * pb_xz[j] + 3.0 * pc_xyyz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_yyzz[j] * pb_xzz[j] + pc_xyyz[j] * pb_zzz[j]);

                t_yyz_xzzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 1.5 * fl2_fx * pc_xzz[j] - 6.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - 1.5 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * fl1_fx * pc_xzzzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_xzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] - 1.5 * fl1_fx * pc_xzzz[j] * pb_z[j] - pa_yy[j] * pc_xzzzz[j] - 2.0 * pa_yz[j] * pc_xyzzz[j] - 2.0 * pa_y[j] * pc_yzzzz[j] * pb_x[j] - 6.0 * pa_y[j] * pc_xyzzz[j] * pb_z[j] - pc_yyzzz[j] * pa_z[j] * pb_x[j] - 3.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yyzzz[j] * pb_xz[j] - 3.0 * pc_xyyzz[j] * pb_zz[j]);

                t_yyz_xzzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_xzzzz[j] + 2.0 * pa_y[j] * pc_xyzzzz[j] + pc_xyyzzz[j] * pa_z[j] + pc_yyzzzz[j] * pb_x[j] + 3.0 * pc_xyyzzz[j] * pb_z[j]);

                t_yyz_xzzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];

                t_yyz_yyyy[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pa_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 6.0 * pa_yz[j] * fl2_fx * pb_y[j] + 4.5 * fl2_fx * pa_z[j] * pb_yy[j] + 3.0 * pa_yyz[j] * pb_yy[j] * fl1_fx + 4.0 * pa_yz[j] * fl1_fx * pb_yyy[j] + 0.5 * fl1_fx * pa_z[j] * pb_yyyy[j] + pa_yyz[j] * pb_yyyy[j]);

                t_yyz_yyyy[j] += fl_s_0_0_1 * (-5.625 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 1.5 * pa_yyz[j] * fl2_fx - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 7.5 * pa_yz[j] * pc_y[j] * fl2_fx - 12.0 * pa_yz[j] * fl2_fx * pb_y[j] - 6.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 15.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 4.5 * fl2_fx * pc_z[j] * pb_yy[j] - 9.0 * fl2_fx * pa_z[j] * pb_yy[j] - 3.0 * pa_yyz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_yyz[j] * pb_y[j] * pc_y[j] * fl1_fx - 3.0 * pa_yy[j] * pc_z[j] * pb_yy[j] * fl1_fx - 18.0 * pa_yz[j] * pc_y[j] * pb_yy[j] * fl1_fx - 4.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyy[j] - 4.0 * pa_yz[j] * fl1_fx * pb_yyy[j] - 6.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyy[j] - 0.5 * fl1_fx * pc_z[j] * pb_yyyy[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyyy[j] - 4.0 * pa_yyz[j] * pb_yyy[j] * pc_y[j] - pa_yy[j] * pc_z[j] * pb_yyyy[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_yyyy[j]);

                t_yyz_yyyy[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_z[j] + 5.625 * fl3_fx * pa_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * pc_z[j] * fl2_fx + 15.0 * pa_yz[j] * pc_y[j] * fl2_fx + 7.5 * pa_y[j] * pc_yz[j] * fl2_fx + 12.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] + 6.0 * pa_yz[j] * fl2_fx * pb_y[j] + 11.25 * pc_yy[j] * pa_z[j] * fl2_fx + 30.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] + 15.0 * pc_yz[j] * fl2_fx * pb_y[j] + 9.0 * fl2_fx * pc_z[j] * pb_yy[j] + 4.5 * fl2_fx * pa_z[j] * pb_yy[j] + 6.0 * pa_yyz[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_yy[j] * fl1_fx + 3.0 * pa_yy[j] * pc_z[j] * pb_yy[j] * fl1_fx + 6.0 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx + 18.0 * pa_yz[j] * pc_y[j] * pb_yy[j] * fl1_fx + 24.0 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx + 18.0 * pa_y[j] * pc_yz[j] * pb_yy[j] * fl1_fx + 4.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyy[j] + 18.0 * pc_yy[j] * pa_z[j] * pb_yy[j] * fl1_fx + 6.0 * pc_yz[j] * fl1_fx * pb_yyy[j] + 6.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyy[j] + 0.5 * fl1_fx * pc_z[j] * pb_yyyy[j] + 6.0 * pa_yyz[j] * pb_yy[j] * pc_yy[j] + 4.0 * pa_yy[j] * pc_yz[j] * pb_yyy[j] + 8.0 * pa_yz[j] * pc_yy[j] * pb_yyy[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_yyyy[j] + pc_yy[j] * pa_z[j] * pb_yyyy[j]);

                t_yyz_yyyy[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 1.875 * fl3_fx * pa_z[j] - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 7.5 * pa_yz[j] * pc_y[j] * fl2_fx - 15.0 * pa_y[j] * pc_yz[j] * fl2_fx - 6.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 22.5 * pc_yy[j] * pa_z[j] * fl2_fx - 11.25 * pc_yyz[j] * fl2_fx - 30.0 * pc_yz[j] * fl2_fx * pb_y[j] - 15.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 4.5 * fl2_fx * pc_z[j] * pb_yy[j] - 3.0 * pa_yyz[j] * pc_yy[j] * fl1_fx - 6.0 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yyz[j] * fl1_fx - 24.0 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx - 10.0 * pa_yz[j] * pc_yyy[j] * fl1_fx - 18.0 * pa_y[j] * pc_yz[j] * pb_yy[j] * fl1_fx - 24.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 18.0 * pc_yy[j] * pa_z[j] * pb_yy[j] * fl1_fx - 20.0 * pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 18.0 * pc_yyz[j] * pb_yy[j] * fl1_fx - 6.0 * pc_yz[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_yyz[j] * pb_y[j] * pc_yyy[j] - 6.0 * pa_yy[j] * pc_yyz[j] * pb_yy[j] - 12.0 * pa_yz[j] * pc_yyy[j] * pb_yy[j] - 8.0 * pa_y[j] * pc_yyz[j] * pb_yyy[j] - 4.0 * pc_yyy[j] * pa_z[j] * pb_yyy[j] - pc_yyz[j] * pb_yyyy[j]);

                t_yyz_yyyy[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 7.5 * pa_y[j] * pc_yz[j] * fl2_fx + 11.25 * pc_yy[j] * pa_z[j] * fl2_fx + 22.5 * pc_yyz[j] * fl2_fx + 15.0 * pc_yz[j] * fl2_fx * pb_y[j] + 3.0 * pa_yy[j] * pc_yyz[j] * fl1_fx + 10.0 * pa_yz[j] * pc_yyy[j] * fl1_fx + 24.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 10.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 20.0 * pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 7.5 * pc_yyyy[j] * pa_z[j] * fl1_fx + 18.0 * pc_yyz[j] * pb_yy[j] * fl1_fx + 20.0 * pc_yyyz[j] * pb_y[j] * fl1_fx + pa_yyz[j] * pc_yyyy[j] + 4.0 * pa_yy[j] * pc_yyyz[j] * pb_y[j] + 8.0 * pa_yz[j] * pc_yyyy[j] * pb_y[j] + 12.0 * pa_y[j] * pc_yyyz[j] * pb_yy[j] + 6.0 * pc_yyyy[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_yyyz[j] * pb_yyy[j]);

                t_yyz_yyyy[j] += fl_s_0_0_5 * (-11.25 * pc_yyz[j] * fl2_fx - 10.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 7.5 * pc_yyyy[j] * pa_z[j] * fl1_fx - 20.0 * pc_yyyz[j] * pb_y[j] * fl1_fx - 7.5 * pc_yyyyz[j] * fl1_fx - pa_yy[j] * pc_yyyyz[j] - 2.0 * pa_yz[j] * pc_yyyyy[j] - 8.0 * pa_y[j] * pc_yyyyz[j] * pb_y[j] - 4.0 * pc_yyyyy[j] * pa_z[j] * pb_y[j] - 6.0 * pc_yyyyz[j] * pb_yy[j]);

                t_yyz_yyyy[j] += fl_s_0_0_6 * (7.5 * pc_yyyyz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyyyz[j] + pc_yyyyyy[j] * pa_z[j] + 4.0 * pc_yyyyyz[j] * pb_y[j]);

                t_yyz_yyyy[j] += -fl_s_0_0_7 * pc_yyyyyyz[j];

                t_yyz_yyyz[j] = fl_s_0_0_0 * (0.75 * pa_y[j] * fl3_fx + 1.125 * fl3_fx * pb_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 1.5 * pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_yy[j] + 2.25 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_yyz[j] * pb_yz[j] * fl1_fx + 0.5 * pa_yy[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_yz[j] * fl1_fx * pb_yyz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yyyz[j] + pa_yyz[j] * pb_yyyz[j]);

                t_yyz_yyyz[j] += fl_s_0_0_1 * (-2.25 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 3.375 * fl3_fx * pb_y[j] - 1.5 * pa_yy[j] * fl2_fx * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 1.5 * pa_yz[j] * fl2_fx * pc_z[j] - 3.0 * pa_yz[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 3.0 * pa_y[j] * fl2_fx * pb_yy[j] - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_yy[j] - 2.25 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_yz[j] - 4.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_yyz[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_yyz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_z[j] - 1.5 * pa_yy[j] * pc_z[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_y[j] - 0.5 * pa_yy[j] * fl1_fx * pb_yyy[j] - 9.0 * pa_yz[j] * pc_y[j] * pb_yz[j] * fl1_fx - pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] - 3.0 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_z[j] - 3.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyz[j] - 3.0 * pa_yz[j] * fl1_fx * pb_yyz[j] - 4.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyy[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_yyyz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyyz[j] - pa_yyz[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_yyz[j] * pb_yyz[j] * pc_y[j] - pa_yy[j] * pc_z[j] * pb_yyyz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_yyyz[j]);

                t_yyz_yyyz[j] += fl_s_0_0_2 * (2.25 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 3.375 * fl3_fx * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pc_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 9.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 3.0 * pa_y[j] * pc_yy[j] * fl2_fx + 3.0 * pa_yz[j] * fl2_fx * pc_z[j] + 1.5 * pa_y[j] * fl2_fx * pc_zz[j] + 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] + 1.5 * pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_yy[j] + 4.5 * pc_yy[j] * fl2_fx * pb_y[j] + 3.75 * pc_yz[j] * fl2_fx * pa_z[j] + 7.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_z[j] + 4.5 * pc_y[j] * fl2_fx * pb_yy[j] + 2.25 * fl2_fx * pc_zz[j] * pb_y[j] + 4.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_yz[j] + 2.25 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * fl2_fx * pb_yyy[j] + 1.5 * pa_yyz[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_yyz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_y[j] * fl1_fx * pb_z[j] + 1.5 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 1.5 * pa_yy[j] * pc_z[j] * pb_yz[j] * fl1_fx + 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_yy[j] * fl1_fx * pb_y[j] * pc_yy[j] + 1.5 * pa_yy[j] * fl1_fx * pb_yy[j] * pc_y[j] + 9.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 9.0 * pa_yz[j] * pc_y[j] * pb_yz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] + 9.0 * pa_y[j] * pc_yz[j] * pb_yz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] + pa_y[j] * pc_y[j] * fl1_fx * pb_yyy[j] + 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yy[j] + 3.0 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_z[j] + 3.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_yyz[j] + 9.0 * pc_yy[j] * pa_z[j] * pb_yz[j] * fl1_fx + 0.5 * pc_yy[j] * fl1_fx * pb_yyy[j] + 4.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yy[j] + 4.5 * pc_yz[j] * fl1_fx * pb_yyz[j] + 4.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_yyz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] + 0.5 * fl1_fx * pa_z[j] * pb_yyy[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_yyyz[j] + 3.0 * pa_yyz[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_yyz[j] * pb_yz[j] * pc_yy[j] + pa_yy[j] * pc_zz[j] * pb_yyy[j] + 3.0 * pa_yy[j] * pc_yz[j] * pb_yyz[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_yyy[j] + 6.0 * pa_yz[j] * pc_yy[j] * pb_yyz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_yyyz[j] + pc_yy[j] * pa_z[j] * pb_yyyz[j]);

                t_yyz_yyyz[j] += fl_s_0_0_3 * (-0.75 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 1.125 * fl3_fx * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 6.0 * pa_y[j] * pc_yy[j] * fl2_fx - 4.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pc_zz[j] - 1.5 * pa_yz[j] * fl2_fx * pc_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 9.0 * pc_yy[j] * fl2_fx * pb_y[j] - 2.5 * pc_yyy[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pa_z[j] - 3.75 * pc_yzz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pb_z[j] - 3.75 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_yy[j] - 4.5 * fl2_fx * pc_zz[j] * pb_y[j] - 2.25 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * pa_yyz[j] * pc_yz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yz[j] * fl1_fx * pb_z[j] - 0.5 * pa_yy[j] * fl1_fx * pc_yyy[j] - 1.5 * pa_yy[j] * fl1_fx * pb_y[j] * pc_yy[j] - 9.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yy[j] * fl1_fx * pb_z[j] - 9.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 9.0 * pa_y[j] * pc_yz[j] * pb_yz[j] * fl1_fx - 6.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yy[j] - 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yy[j] - 9.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_yy[j] * pa_z[j] * pb_yz[j] * fl1_fx - 5.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 9.0 * pc_yyz[j] * pb_yz[j] * fl1_fx - 1.5 * pc_yyy[j] * fl1_fx * pb_yy[j] - 0.5 * pc_yy[j] * fl1_fx * pb_yyy[j] - 4.5 * pc_yzz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yy[j] - 4.5 * pc_yz[j] * fl1_fx * pb_yyz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_yyy[j] - 3.0 * pa_yyz[j] * pb_y[j] * pc_yyz[j] - pa_yyz[j] * pc_yyy[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_yy[j] - 3.0 * pa_yy[j] * pc_yyz[j] * pb_yz[j] - 6.0 * pa_yz[j] * pc_yyz[j] * pb_yy[j] - 6.0 * pa_yz[j] * pc_yyy[j] * pb_yz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_yyy[j] - 6.0 * pa_y[j] * pc_yyz[j] * pb_yyz[j] - pc_yyz[j] * pa_z[j] * pb_yyy[j] - 3.0 * pc_yyy[j] * pa_z[j] * pb_yyz[j] - pc_yyz[j] * pb_yyyz[j]);

                t_yyz_yyyz[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 3.0 * pa_y[j] * pc_yy[j] * fl2_fx + 1.5 * pa_y[j] * fl2_fx * pc_zz[j] + 5.0 * pc_yyy[j] * fl2_fx + 4.5 * pc_yy[j] * fl2_fx * pb_y[j] + 7.5 * pc_yzz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pa_z[j] + 3.75 * pc_yz[j] * fl2_fx * pb_z[j] + 2.25 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * pa_yy[j] * pc_yzz[j] * fl1_fx + 0.5 * pa_yy[j] * fl1_fx * pc_yyy[j] + 6.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + 9.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + pa_y[j] * pc_yyyy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_y[j] + 9.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 5.0 * pc_yyyz[j] * pa_z[j] * fl1_fx + 5.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 9.0 * pc_yyzz[j] * pb_y[j] * fl1_fx + 9.0 * pc_yyz[j] * pb_yz[j] * fl1_fx + 5.0 * pc_yyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyy[j] * fl1_fx * pb_yy[j] + 4.5 * pc_yzz[j] * fl1_fx * pb_yy[j] + pa_yyz[j] * pc_yyyz[j] + 3.0 * pa_yy[j] * pc_yyzz[j] * pb_y[j] + pa_yy[j] * pc_yyyz[j] * pb_z[j] + 6.0 * pa_yz[j] * pc_yyyz[j] * pb_y[j] + 2.0 * pa_yz[j] * pc_yyyy[j] * pb_z[j] + 6.0 * pa_y[j] * pc_yyzz[j] * pb_yy[j] + 6.0 * pa_y[j] * pc_yyyz[j] * pb_yz[j] + 3.0 * pc_yyyz[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_yyyy[j] * pa_z[j] * pb_yz[j] + pc_yyzz[j] * pb_yyy[j] + 3.0 * pc_yyyz[j] * pb_yyz[j]);

                t_yyz_yyyz[j] += fl_s_0_0_5 * (-2.5 * pc_yyy[j] * fl2_fx - 3.75 * pc_yzz[j] * fl2_fx - 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - pa_y[j] * pc_yyyy[j] * fl1_fx - 5.0 * pc_yyyz[j] * pa_z[j] * fl1_fx - 9.0 * pc_yyzz[j] * pb_y[j] * fl1_fx - 5.0 * pc_yyyzz[j] * fl1_fx - 5.0 * pc_yyyz[j] * fl1_fx * pb_z[j] - 0.5 * pc_yyyyy[j] * fl1_fx - 1.5 * pc_yyyy[j] * fl1_fx * pb_y[j] - pa_yy[j] * pc_yyyzz[j] - 2.0 * pa_yz[j] * pc_yyyyz[j] - 6.0 * pa_y[j] * pc_yyyzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_yyyyz[j] * pb_z[j] - 3.0 * pc_yyyyz[j] * pa_z[j] * pb_y[j] - pc_yyyyy[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yyyzz[j] * pb_yy[j] - 3.0 * pc_yyyyz[j] * pb_yz[j]);

                t_yyz_yyyz[j] += fl_s_0_0_6 * (5.0 * pc_yyyzz[j] * fl1_fx + 0.5 * pc_yyyyy[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyyzz[j] + pc_yyyyyz[j] * pa_z[j] + 3.0 * pc_yyyyzz[j] * pb_y[j] + pc_yyyyyz[j] * pb_z[j]);

                t_yyz_yyyz[j] += -fl_s_0_0_7 * pc_yyyyyzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_117_120(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (117,120)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yy = paDistances.data(19 * idx + 6);

            auto pa_yz = paDistances.data(19 * idx + 7);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yyz = paDistances.data(19 * idx + 16);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            auto pc_yyzzzzz = pcDistances.data(119 * idx + 116);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yyz_yyzz = primBuffer.data(150 * idx + 117);

            auto t_yyz_yzzz = primBuffer.data(150 * idx + 118);

            auto t_yyz_zzzz = primBuffer.data(150 * idx + 119);

            // Batch of Integrals (117,120)

            #pragma omp simd aligned(fx, pa_y, pa_yy, pa_yyz, pa_yz, pa_z, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, \
                                     pb_yzzz, pb_z, pb_zz, pb_zzz, pb_zzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, \
                                     pc_yyyyzz, pc_yyyyzzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyyzzzz, pc_yyz, pc_yyzz, \
                                     pc_yyzzz, pc_yyzzzz, pc_yyzzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_yyz_yyzz, t_yyz_yzzz, t_yyz_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yyz_yyzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 0.75 * fl3_fx * pb_z[j] + 0.25 * pa_yyz[j] * fl2_fx + 0.5 * pa_yy[j] * fl2_fx * pb_z[j] + pa_yz[j] * fl2_fx * pb_y[j] + 2.0 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * fl2_fx * pb_yyz[j] + 0.5 * pa_yyz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_yyz[j] * fl1_fx * pb_zz[j] + pa_yy[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_yz[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yyzz[j] + pa_yyz[j] * pb_yyzz[j]);

                t_yyz_yyzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 2.25 * fl3_fx * pb_z[j] - 0.5 * pa_yyz[j] * fl2_fx - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - pa_yy[j] * fl2_fx * pb_z[j] - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 2.0 * pa_yz[j] * fl2_fx * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 4.0 * pa_y[j] * fl2_fx * pb_yz[j] - 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 3.0 * pc_y[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * fl2_fx * pa_z[j] * pb_zz[j] - 0.5 * fl2_fx * pa_z[j] * pb_yy[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - fl2_fx * pb_yyz[j] - 0.5 * pa_yyz[j] * pb_yy[j] * fl1_fx - pa_yyz[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_yyz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_yyz[j] * fl1_fx * pb_zz[j] - 1.5 * pa_yy[j] * pc_z[j] * pb_yy[j] * fl1_fx - 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_zz[j] - 2.0 * pa_yy[j] * fl1_fx * pb_yz[j] * pc_y[j] - pa_yy[j] * fl1_fx * pb_yyz[j] - pa_yz[j] * pc_y[j] * pb_yy[j] * fl1_fx - 3.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] - 2.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] - 4.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_z[j] - 2.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_yzz[j] - 2.0 * pa_yz[j] * fl1_fx * pb_yzz[j] - 3.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_yzz[j] - fl1_fx * pa_z[j] * pb_yyz[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_yyzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yyzz[j] - 2.0 * pa_yyz[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_yyz[j] * pb_yzz[j] * pc_y[j] - pa_yy[j] * pc_z[j] * pb_yyzz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_yyzz[j]);

                t_yyz_yyzz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pa_z[j] + 2.25 * fl3_fx * pb_z[j] + 0.25 * pa_yyz[j] * fl2_fx + 1.5 * pa_yy[j] * pc_z[j] * fl2_fx + 0.5 * pa_yy[j] * fl2_fx * pb_z[j] + 3.0 * pa_yz[j] * pc_y[j] * fl2_fx + 4.5 * pa_y[j] * pc_yz[j] * fl2_fx + 6.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 6.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] + pa_yz[j] * fl2_fx * pb_y[j] + 2.0 * pa_y[j] * fl2_fx * pb_yz[j] + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 3.0 * pc_yy[j] * fl2_fx * pb_z[j] + 3.0 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] + 4.5 * pc_yz[j] * fl2_fx * pb_y[j] + 6.0 * pc_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_zz[j] + 1.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.25 * fl2_fx * pa_z[j] * pb_yy[j] + 0.5 * fl2_fx * pb_yyz[j] + pa_yyz[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_yyz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_yyz[j] * fl1_fx * pc_zz[j] + pa_yyz[j] * fl1_fx * pb_z[j] * pc_z[j] + 1.5 * pa_yy[j] * pc_z[j] * pb_yy[j] * fl1_fx + 3.0 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx + pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] + 0.5 * pa_yy[j] * pc_z[j] * fl1_fx * pb_zz[j] + pa_yy[j] * fl1_fx * pc_yy[j] * pb_z[j] + 2.0 * pa_yy[j] * fl1_fx * pb_yz[j] * pc_y[j] + pa_yz[j] * pc_y[j] * pb_yy[j] * fl1_fx + 2.0 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yz[j] * pc_y[j] * fl1_fx * pb_zz[j] + 3.0 * pa_y[j] * pc_yz[j] * pb_yy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 4.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] + 2.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yyz[j] + 2.0 * pa_yz[j] * fl1_fx * pb_y[j] * pc_zz[j] + 4.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yz[j] + 4.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_z[j] + 2.0 * pa_y[j] * fl1_fx * pc_z[j] * pb_yzz[j] + 0.5 * pc_yy[j] * pa_z[j] * pb_yy[j] * fl1_fx + 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] + pc_yy[j] * fl1_fx * pb_yyz[j] + 6.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yz[j] + 3.0 * pc_yz[j] * fl1_fx * pb_yzz[j] + 3.0 * pc_y[j] * fl1_fx * pa_z[j] * pb_yzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yy[j] * pc_zz[j] + fl1_fx * pc_zz[j] * pb_yyz[j] + fl1_fx * pa_z[j] * pb_yyz[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_yyzz[j] + pa_yyz[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_yyz[j] * pb_yz[j] * pc_yz[j] + pa_yyz[j] * pc_yy[j] * pb_zz[j] + 2.0 * pa_yy[j] * pc_zz[j] * pb_yyz[j] + 2.0 * pa_yy[j] * pc_yz[j] * pb_yzz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_yyz[j] + 4.0 * pa_yz[j] * pc_yy[j] * pb_yzz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_yyzz[j] + pc_yy[j] * pa_z[j] * pb_yyzz[j]);

                t_yyz_yyzz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 0.75 * fl3_fx * pb_z[j] - 0.75 * pa_yy[j] * pc_z[j] * fl2_fx - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 9.0 * pa_y[j] * pc_yz[j] * fl2_fx - 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_y[j] - 3.0 * pc_yy[j] * pa_z[j] * fl2_fx - 4.5 * pc_yyz[j] * fl2_fx - 6.0 * pc_yy[j] * fl2_fx * pb_z[j] - 9.0 * pc_yz[j] * fl2_fx * pb_y[j] - 1.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_y[j] - 3.0 * pc_y[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pa_z[j] * pc_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 0.75 * fl2_fx * pc_z[j] * pb_zz[j] - 0.75 * fl2_fx * pc_z[j] * pb_yy[j] - 0.5 * pa_yyz[j] * pc_yy[j] * fl1_fx - 0.5 * pa_yyz[j] * fl1_fx * pc_zz[j] - 3.0 * pa_yy[j] * pc_yz[j] * pb_y[j] * fl1_fx - 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx - 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx - pa_yy[j] * pc_zz[j] * fl1_fx * pb_z[j] - pa_yy[j] * fl1_fx * pc_yy[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_yy[j] * pb_y[j] * fl1_fx - pa_yz[j] * pc_yyy[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx - 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 2.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] - 4.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_yz[j] - 2.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_y[j] - 2.0 * pa_yz[j] * fl1_fx * pb_y[j] * pc_zz[j] - 4.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_yz[j] - 0.5 * pc_yy[j] * pa_z[j] * pb_yy[j] * fl1_fx - pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx - 6.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yyz[j] * pb_yy[j] * fl1_fx - 3.0 * pc_yyz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_yyy[j] * fl1_fx * pb_yz[j] - pc_yy[j] * fl1_fx * pb_yyz[j] - 3.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_y[j] - 6.0 * pc_yzz[j] * fl1_fx * pb_yz[j] - 6.0 * pc_yz[j] * fl1_fx * pa_z[j] * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_yzz[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - 0.5 * fl1_fx * pa_z[j] * pb_yy[j] * pc_zz[j] - fl1_fx * pc_zz[j] * pb_yyz[j] - 2.0 * pa_yyz[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_yyz[j] * pc_yyz[j] * pb_z[j] - pa_yy[j] * pc_zzz[j] * pb_yy[j] - 4.0 * pa_yy[j] * pc_yzz[j] * pb_yz[j] - pa_yy[j] * pc_yyz[j] * pb_zz[j] - 2.0 * pa_yz[j] * pc_yzz[j] * pb_yy[j] - 8.0 * pa_yz[j] * pc_yyz[j] * pb_yz[j] - 2.0 * pa_yz[j] * pc_yyy[j] * pb_zz[j] - 4.0 * pa_y[j] * pc_yzz[j] * pb_yyz[j] - 4.0 * pa_y[j] * pc_yyz[j] * pb_yzz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_yyz[j] - 2.0 * pc_yyy[j] * pa_z[j] * pb_yzz[j] - pc_yyz[j] * pb_yyzz[j]);

                t_yyz_yyzz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 4.5 * pa_y[j] * pc_yz[j] * fl2_fx + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 9.0 * pc_yyz[j] * fl2_fx + 3.0 * pc_yy[j] * fl2_fx * pb_z[j] + 4.5 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_zzz[j] + 0.75 * fl2_fx * pa_z[j] * pc_zz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pa_yy[j] * pc_yyz[j] * fl1_fx + 0.5 * pa_yy[j] * pc_zzz[j] * fl1_fx + pa_yz[j] * pc_yyy[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyz[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 2.0 * pa_y[j] * pc_yyy[j] * fl1_fx * pb_z[j] + 2.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_y[j] + pc_yyy[j] * pa_z[j] * pb_y[j] * fl1_fx + 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyz[j] * pb_yy[j] * fl1_fx + 3.0 * pc_yyyz[j] * pb_y[j] * fl1_fx + 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_zz[j] + pc_yyyy[j] * fl1_fx * pb_z[j] + 2.0 * pc_yyy[j] * fl1_fx * pb_yz[j] + 3.0 * pc_yzzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_y[j] + 6.0 * pc_yzz[j] * fl1_fx * pb_yz[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + pa_yyz[j] * pc_yyzz[j] + 2.0 * pa_yy[j] * pc_yzzz[j] * pb_y[j] + 2.0 * pa_yy[j] * pc_yyzz[j] * pb_z[j] + 4.0 * pa_yz[j] * pc_yyzz[j] * pb_y[j] + 4.0 * pa_yz[j] * pc_yyyz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_yy[j] + 8.0 * pa_y[j] * pc_yyzz[j] * pb_yz[j] + 2.0 * pa_y[j] * pc_yyyz[j] * pb_zz[j] + pc_yyzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_yyyz[j] * pa_z[j] * pb_yz[j] + pc_yyyy[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_yyzz[j] * pb_yyz[j] + 2.0 * pc_yyyz[j] * pb_yzz[j]);

                t_yyz_yyzz[j] += fl_s_0_0_5 * (-4.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 3.0 * pa_y[j] * pc_yyyz[j] * fl1_fx - 3.0 * pa_y[j] * pc_yzzz[j] * fl1_fx - 0.5 * pc_yyyy[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyyz[j] * pb_y[j] * fl1_fx - 1.5 * pc_yyyyz[j] * fl1_fx - 3.0 * pc_yyzzz[j] * fl1_fx - 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - pc_yyyy[j] * fl1_fx * pb_z[j] - 3.0 * pc_yzzz[j] * fl1_fx * pb_y[j] - pa_yy[j] * pc_yyzzz[j] - 2.0 * pa_yz[j] * pc_yyyzz[j] - 4.0 * pa_y[j] * pc_yyzzz[j] * pb_y[j] - 4.0 * pa_y[j] * pc_yyyzz[j] * pb_z[j] - 2.0 * pc_yyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_yyyyz[j] * pa_z[j] * pb_z[j] - pc_yyzzz[j] * pb_yy[j] - 4.0 * pc_yyyzz[j] * pb_yz[j] - pc_yyyyz[j] * pb_zz[j]);

                t_yyz_yyzz[j] += fl_s_0_0_6 * (1.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pc_yyzzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyyzzz[j] + pc_yyyyzz[j] * pa_z[j] + 2.0 * pc_yyyzzz[j] * pb_y[j] + 2.0 * pc_yyyyzz[j] * pb_z[j]);

                t_yyz_yyzz[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];

                t_yyz_yzzz[j] = fl_s_0_0_0 * (0.75 * pa_y[j] * fl3_fx + 0.375 * fl3_fx * pb_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 1.5 * pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_zz[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.75 * fl2_fx * pb_yzz[j] + 1.5 * pa_yyz[j] * pb_yz[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pb_yzz[j] + pa_yz[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_yzzz[j] + pa_yyz[j] * pb_yzzz[j]);

                t_yyz_yzzz[j] += fl_s_0_0_1 * (-2.25 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 1.125 * fl3_fx * pb_y[j] - 1.5 * pa_yy[j] * fl2_fx * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 3.0 * pa_yz[j] * fl2_fx * pb_z[j] - 1.5 * pa_yz[j] * fl2_fx * pc_z[j] - 4.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 3.0 * pa_y[j] * fl2_fx * pb_zz[j] - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_zz[j] - 1.5 * fl2_fx * pa_z[j] * pb_yz[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * fl2_fx * pb_yzz[j] - 1.5 * pa_yyz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yyz[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_yyz[j] * pc_y[j] * pb_z[j] * fl1_fx - 4.5 * pa_yy[j] * pc_z[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yy[j] * fl1_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_yy[j] * fl1_fx * pb_yzz[j] - 3.0 * pa_yz[j] * pc_y[j] * pb_yz[j] * fl1_fx - 3.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] - 3.0 * pa_yz[j] * fl1_fx * pb_zz[j] * pc_z[j] - pa_y[j] * fl1_fx * pc_z[j] * pb_zzz[j] - pa_yz[j] * fl1_fx * pb_zzz[j] - 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_zzz[j] - 1.5 * fl1_fx * pa_z[j] * pb_yzz[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_yzzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_yzzz[j] - 3.0 * pa_yyz[j] * pb_yzz[j] * pc_z[j] - pa_yyz[j] * pc_y[j] * pb_zzz[j] - pa_yy[j] * pc_z[j] * pb_yzzz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_yzzz[j]);

                t_yyz_yzzz[j] += fl_s_0_0_2 * (2.25 * pa_y[j] * fl3_fx + 3.375 * pc_y[j] * fl3_fx + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_yy[j] * fl2_fx * pc_y[j] + 0.75 * pa_yy[j] * fl2_fx * pb_y[j] + 3.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] + 1.5 * pa_y[j] * pc_yy[j] * fl2_fx + 3.0 * pa_yz[j] * fl2_fx * pc_z[j] + 9.0 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] + 3.0 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * fl2_fx * pb_zz[j] + 0.75 * pc_yy[j] * fl2_fx * pb_y[j] + 4.5 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] + 2.25 * pc_yz[j] * fl2_fx * pa_z[j] + 6.75 * pc_yz[j] * fl2_fx * pb_z[j] + 4.5 * pc_y[j] * fl2_fx * pb_zz[j] + 1.5 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_yz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 0.75 * fl2_fx * pa_z[j] * pb_yz[j] + 0.75 * fl2_fx * pb_yzz[j] + 1.5 * pa_yyz[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_yyz[j] * pc_yz[j] * fl1_fx + 4.5 * pa_yy[j] * pc_z[j] * pb_yz[j] * fl1_fx + 3.0 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx + 4.5 * pa_yy[j] * pc_yz[j] * pb_z[j] * fl1_fx + 1.5 * pa_yy[j] * fl1_fx * pc_y[j] * pb_zz[j] + 3.0 * pa_yz[j] * pc_y[j] * pb_yz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yy[j] * pb_z[j] * fl1_fx + 9.0 * pa_y[j] * pc_yz[j] * pb_yz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] + 3.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_yzz[j] + 3.0 * pa_yz[j] * fl1_fx * pb_z[j] * pc_zz[j] + 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_zz[j] + 3.0 * pa_yz[j] * fl1_fx * pb_zz[j] * pc_z[j] + pa_y[j] * fl1_fx * pc_z[j] * pb_zzz[j] + 1.5 * pc_yy[j] * pa_z[j] * pb_yz[j] * fl1_fx + 1.5 * pc_yy[j] * fl1_fx * pb_yzz[j] + 4.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_zz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_y[j] * fl1_fx * pa_z[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_yz[j] * pc_zz[j] + 1.5 * fl1_fx * pc_zz[j] * pb_yzz[j] + 1.5 * fl1_fx * pa_z[j] * pb_yzz[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_yzzz[j] + 3.0 * pa_yyz[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_yyz[j] * pc_yz[j] * pb_zz[j] + 3.0 * pa_yy[j] * pc_zz[j] * pb_yzz[j] + pa_yy[j] * pc_yz[j] * pb_zzz[j] + 6.0 * pa_yz[j] * pc_yz[j] * pb_yzz[j] + 2.0 * pa_yz[j] * pc_yy[j] * pb_zzz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_yzzz[j] + pc_yy[j] * pa_z[j] * pb_yzzz[j]);

                t_yyz_yzzz[j] += fl_s_0_0_3 * (-0.75 * pa_y[j] * fl3_fx - 3.375 * pc_y[j] * fl3_fx - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_yy[j] * fl2_fx * pc_y[j] - 3.0 * pa_y[j] * pc_yy[j] * fl2_fx - 1.5 * pa_y[j] * pc_y[j] * fl2_fx * pb_y[j] - 6.0 * pa_y[j] * fl2_fx * pc_zz[j] - 1.5 * pa_yz[j] * fl2_fx * pc_z[j] - 4.5 * pa_y[j] * fl2_fx * pc_z[j] * pb_z[j] - 1.5 * pc_yy[j] * fl2_fx * pb_y[j] - 0.75 * pc_yyy[j] * fl2_fx - 4.5 * pc_yz[j] * fl2_fx * pa_z[j] - 13.5 * pc_yz[j] * fl2_fx * pb_z[j] - 4.5 * pc_yzz[j] * fl2_fx - 2.25 * pc_y[j] * fl2_fx * pa_z[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_y[j] - 0.75 * fl2_fx * pa_z[j] * pb_y[j] * pc_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_yz[j] - 1.5 * pa_yyz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_yy[j] * pc_zz[j] * pb_y[j] * fl1_fx - 4.5 * pa_yy[j] * pc_yz[j] * pb_z[j] * fl1_fx - 3.0 * pa_yy[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yy[j] * pb_z[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_y[j] * pc_yz[j] * pb_yz[j] * fl1_fx - 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 9.0 * pa_y[j] * pc_yyz[j] * pb_z[j] * fl1_fx - 3.0 * pa_y[j] * pc_yy[j] * fl1_fx * pb_zz[j] - pa_yz[j] * fl1_fx * pc_zzz[j] - 3.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_z[j] - 3.0 * pa_yz[j] * fl1_fx * pb_z[j] * pc_zz[j] - 3.0 * pa_y[j] * fl1_fx * pc_zz[j] * pb_zz[j] - 1.5 * pc_yy[j] * pa_z[j] * pb_yz[j] * fl1_fx - 1.5 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 1.5 * pc_yyy[j] * pa_z[j] * pb_z[j] * fl1_fx - 4.5 * pc_yyz[j] * pb_yz[j] * fl1_fx - 1.5 * pc_yyy[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yy[j] * fl1_fx * pb_yzz[j] - 4.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_z[j] - 4.5 * pc_yzz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_yz[j] * fl1_fx * pa_z[j] * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_y[j] * pc_zzz[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_yz[j] - 1.5 * fl1_fx * pa_z[j] * pb_yz[j] * pc_zz[j] - 1.5 * fl1_fx * pc_zz[j] * pb_yzz[j] - pa_yyz[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_yyz[j] * pc_yzz[j] * pb_z[j] - 3.0 * pa_yy[j] * pc_zzz[j] * pb_yz[j] - 3.0 * pa_yy[j] * pc_yzz[j] * pb_zz[j] - 6.0 * pa_yz[j] * pc_yzz[j] * pb_yz[j] - 6.0 * pa_yz[j] * pc_yyz[j] * pb_zz[j] - 6.0 * pa_y[j] * pc_yzz[j] * pb_yzz[j] - 2.0 * pa_y[j] * pc_yyz[j] * pb_zzz[j] - 3.0 * pc_yyz[j] * pa_z[j] * pb_yzz[j] - pc_yyy[j] * pa_z[j] * pb_zzz[j] - pc_yyz[j] * pb_yzzz[j]);

                t_yyz_yzzz[j] += fl_s_0_0_4 * (1.125 * pc_y[j] * fl3_fx + 1.5 * pa_y[j] * pc_yy[j] * fl2_fx + 3.0 * pa_y[j] * fl2_fx * pc_zz[j] + 1.5 * pc_yyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_y[j] + 9.0 * pc_yzz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pa_z[j] + 6.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_yzz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 9.0 * pa_y[j] * pc_yyz[j] * pb_z[j] * fl1_fx + 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + pa_y[j] * fl1_fx * pc_zzzz[j] + pa_yz[j] * fl1_fx * pc_zzz[j] + 3.0 * pa_y[j] * fl1_fx * pc_zzz[j] * pb_z[j] + 1.5 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 1.5 * pc_yyy[j] * pa_z[j] * pb_z[j] * fl1_fx + 1.5 * pc_yyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_yyz[j] * pb_yz[j] * fl1_fx + 3.0 * pc_yyzz[j] * pb_y[j] * fl1_fx + 4.5 * pc_yyyz[j] * pb_z[j] * fl1_fx + 1.5 * pc_yyy[j] * fl1_fx * pb_zz[j] + 1.5 * pc_yzzz[j] * fl1_fx * pa_z[j] + 4.5 * pc_yzzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_yzz[j] * fl1_fx * pa_z[j] * pb_z[j] + 4.5 * pc_yzz[j] * fl1_fx * pb_zz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] + 0.5 * fl1_fx * pa_z[j] * pb_y[j] * pc_zzz[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_yz[j] + pa_yyz[j] * pc_yzzz[j] + pa_yy[j] * pc_zzzz[j] * pb_y[j] + 3.0 * pa_yy[j] * pc_yzzz[j] * pb_z[j] + 2.0 * pa_yz[j] * pc_yzzz[j] * pb_y[j] + 6.0 * pa_yz[j] * pc_yyzz[j] * pb_z[j] + 6.0 * pa_y[j] * pc_yzzz[j] * pb_yz[j] + 6.0 * pa_y[j] * pc_yyzz[j] * pb_zz[j] + 3.0 * pc_yyzz[j] * pa_z[j] * pb_yz[j] + 3.0 * pc_yyyz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_yyzz[j] * pb_yzz[j] + pc_yyyz[j] * pb_zzz[j]);

                t_yyz_yzzz[j] += fl_s_0_0_5 * (-0.75 * pc_yyy[j] * fl2_fx - 4.5 * pc_yzz[j] * fl2_fx - 6.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - pa_y[j] * fl1_fx * pc_zzzz[j] - 1.5 * pc_yyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_y[j] * fl1_fx - 4.5 * pc_yyyz[j] * pb_z[j] * fl1_fx - 3.0 * pc_yyyzz[j] * fl1_fx - 1.5 * pc_yzzzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * fl1_fx * pa_z[j] - 4.5 * pc_yzzz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_y[j] - pa_yy[j] * pc_yzzzz[j] - 2.0 * pa_yz[j] * pc_yyzzz[j] - 2.0 * pa_y[j] * pc_yzzzz[j] * pb_y[j] - 6.0 * pa_y[j] * pc_yyzzz[j] * pb_z[j] - pc_yyzzz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_yyyzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yyzzz[j] * pb_yz[j] - 3.0 * pc_yyyzz[j] * pb_zz[j]);

                t_yyz_yzzz[j] += fl_s_0_0_6 * (3.0 * pc_yyyzz[j] * fl1_fx + 1.5 * pc_yzzzz[j] * fl1_fx + 2.0 * pa_y[j] * pc_yyzzzz[j] + pc_yyyzzz[j] * pa_z[j] + pc_yyzzzz[j] * pb_y[j] + 3.0 * pc_yyyzzz[j] * pb_z[j]);

                t_yyz_yzzz[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];

                t_yyz_zzzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pa_z[j] + 1.5 * fl3_fx * pb_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 3.0 * pa_yy[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + fl2_fx * pb_zzz[j] + 3.0 * pa_yyz[j] * pb_zz[j] * fl1_fx + 2.0 * pa_yy[j] * fl1_fx * pb_zzz[j] + 0.5 * fl1_fx * pa_z[j] * pb_zzzz[j] + pa_yyz[j] * pb_zzzz[j]);

                t_yyz_zzzz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 4.5 * fl3_fx * pb_z[j] - 1.5 * pa_yyz[j] * fl2_fx - 3.75 * pa_yy[j] * pc_z[j] * fl2_fx - 6.0 * pa_yy[j] * fl2_fx * pb_z[j] - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 6.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_zz[j] - 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 4.5 * fl2_fx * pc_z[j] * pb_zz[j] - 2.0 * fl2_fx * pb_zzz[j] - 3.0 * pa_yyz[j] * pb_zz[j] * fl1_fx - 6.0 * pa_yyz[j] * pb_z[j] * pc_z[j] * fl1_fx - 9.0 * pa_yy[j] * pc_z[j] * pb_zz[j] * fl1_fx - 2.0 * pa_yy[j] * fl1_fx * pb_zzz[j] - 6.0 * pa_yz[j] * pc_y[j] * pb_zz[j] * fl1_fx - 4.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] - 2.0 * fl1_fx * pa_z[j] * pb_zzz[j] * pc_z[j] - 0.5 * fl1_fx * pc_z[j] * pb_zzzz[j] - 0.5 * fl1_fx * pa_z[j] * pb_zzzz[j] - 4.0 * pa_yyz[j] * pb_zzz[j] * pc_z[j] - pa_yy[j] * pc_z[j] * pb_zzzz[j] - 2.0 * pa_yz[j] * pc_y[j] * pb_zzzz[j]);

                t_yyz_zzzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 4.5 * fl3_fx * pb_z[j] + 0.75 * pa_yyz[j] * fl2_fx + 7.5 * pa_yy[j] * pc_z[j] * fl2_fx + 3.0 * pa_yy[j] * fl2_fx * pb_z[j] + 3.0 * pa_yz[j] * pc_y[j] * fl2_fx + 7.5 * pa_y[j] * pc_yz[j] * fl2_fx + 12.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] + 0.75 * pc_yy[j] * pa_z[j] * fl2_fx + 3.0 * pc_yy[j] * fl2_fx * pb_z[j] + 6.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 9.0 * fl2_fx * pc_z[j] * pb_zz[j] + 6.0 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + fl2_fx * pb_zzz[j] + 6.0 * pa_yyz[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_yyz[j] * pc_zz[j] * fl1_fx + 9.0 * pa_yy[j] * pc_z[j] * pb_zz[j] * fl1_fx + 12.0 * pa_yy[j] * pc_zz[j] * pb_z[j] * fl1_fx + 6.0 * pa_yz[j] * pc_y[j] * pb_zz[j] * fl1_fx + 12.0 * pa_yz[j] * pc_yz[j] * pb_z[j] * fl1_fx + 18.0 * pa_y[j] * pc_yz[j] * pb_zz[j] * fl1_fx + 4.0 * pa_y[j] * pc_y[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_yy[j] * pa_z[j] * pb_zz[j] * fl1_fx + 2.0 * pc_yy[j] * fl1_fx * pb_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pb_zz[j] * pc_zz[j] + 2.0 * fl1_fx * pc_zz[j] * pb_zzz[j] + 2.0 * fl1_fx * pa_z[j] * pb_zzz[j] * pc_z[j] + 0.5 * fl1_fx * pc_z[j] * pb_zzzz[j] + 6.0 * pa_yyz[j] * pb_zz[j] * pc_zz[j] + 4.0 * pa_yy[j] * pc_zz[j] * pb_zzz[j] + 8.0 * pa_yz[j] * pc_yz[j] * pb_zzz[j] + 2.0 * pa_y[j] * pc_yz[j] * pb_zzzz[j] + pc_yy[j] * pa_z[j] * pb_zzzz[j]);

                t_yyz_zzzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pa_z[j] - 1.5 * fl3_fx * pb_z[j] - 3.75 * pa_yy[j] * pc_z[j] * fl2_fx - 1.5 * pa_yz[j] * pc_y[j] * fl2_fx - 15.0 * pa_y[j] * pc_yz[j] * fl2_fx - 6.0 * pa_y[j] * pc_y[j] * fl2_fx * pb_z[j] - 1.5 * pc_yy[j] * pa_z[j] * fl2_fx - 3.75 * pc_yyz[j] * fl2_fx - 6.0 * pc_yy[j] * fl2_fx * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pc_zz[j] - 12.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.5 * fl2_fx * pc_zzz[j] - 3.0 * fl2_fx * pa_z[j] * pb_z[j] * pc_z[j] - 4.5 * fl2_fx * pc_z[j] * pb_zz[j] - 3.0 * pa_yyz[j] * pc_zz[j] * fl1_fx - 12.0 * pa_yy[j] * pc_zz[j] * pb_z[j] * fl1_fx - 5.0 * pa_yy[j] * pc_zzz[j] * fl1_fx - 12.0 * pa_yz[j] * pc_yz[j] * pb_z[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 18.0 * pa_y[j] * pc_yz[j] * pb_zz[j] * fl1_fx - 24.0 * pa_y[j] * pc_yzz[j] * pb_z[j] * fl1_fx - 3.0 * pc_yy[j] * pa_z[j] * pb_zz[j] * fl1_fx - 6.0 * pc_yyz[j] * pa_z[j] * pb_z[j] * fl1_fx - 9.0 * pc_yyz[j] * pb_zz[j] * fl1_fx - 2.0 * pc_yy[j] * fl1_fx * pb_zzz[j] - 2.0 * fl1_fx * pa_z[j] * pb_z[j] * pc_zzz[j] - 3.0 * fl1_fx * pc_zzz[j] * pb_zz[j] - 3.0 * fl1_fx * pa_z[j] * pb_zz[j] * pc_zz[j] - 2.0 * fl1_fx * pc_zz[j] * pb_zzz[j] - 4.0 * pa_yyz[j] * pb_z[j] * pc_zzz[j] - 6.0 * pa_yy[j] * pc_zzz[j] * pb_zz[j] - 12.0 * pa_yz[j] * pc_yzz[j] * pb_zz[j] - 8.0 * pa_y[j] * pc_yzz[j] * pb_zzz[j] - 4.0 * pc_yyz[j] * pa_z[j] * pb_zzz[j] - pc_yyz[j] * pb_zzzz[j]);

                t_yyz_zzzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 7.5 * pa_y[j] * pc_yz[j] * fl2_fx + 0.75 * pc_yy[j] * pa_z[j] * fl2_fx + 7.5 * pc_yyz[j] * fl2_fx + 3.0 * pc_yy[j] * fl2_fx * pb_z[j] + 5.0 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 6.0 * fl2_fx * pc_zz[j] * pb_z[j] + 5.0 * pa_yy[j] * pc_zzz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + 24.0 * pa_y[j] * pc_yzz[j] * pb_z[j] * fl1_fx + 10.0 * pa_y[j] * pc_yzzz[j] * fl1_fx + 6.0 * pc_yyz[j] * pa_z[j] * pb_z[j] * fl1_fx + 3.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yyz[j] * pb_zz[j] * fl1_fx + 12.0 * pc_yyzz[j] * pb_z[j] * fl1_fx + 0.5 * fl1_fx * pa_z[j] * pc_zzzz[j] + 2.0 * fl1_fx * pc_zzzz[j] * pb_z[j] + 2.0 * fl1_fx * pa_z[j] * pb_z[j] * pc_zzz[j] + 3.0 * fl1_fx * pc_zzz[j] * pb_zz[j] + pa_yyz[j] * pc_zzzz[j] + 4.0 * pa_yy[j] * pc_zzzz[j] * pb_z[j] + 8.0 * pa_yz[j] * pc_yzzz[j] * pb_z[j] + 12.0 * pa_y[j] * pc_yzzz[j] * pb_zz[j] + 6.0 * pc_yyzz[j] * pa_z[j] * pb_zz[j] + 4.0 * pc_yyzz[j] * pb_zzz[j]);

                t_yyz_zzzz[j] += fl_s_0_0_5 * (-3.75 * pc_yyz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 10.0 * pa_y[j] * pc_yzzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - 12.0 * pc_yyzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_yyzzz[j] * fl1_fx - 0.5 * fl1_fx * pc_zzzzz[j] - 0.5 * fl1_fx * pa_z[j] * pc_zzzz[j] - 2.0 * fl1_fx * pc_zzzz[j] * pb_z[j] - pa_yy[j] * pc_zzzzz[j] - 2.0 * pa_yz[j] * pc_yzzzz[j] - 8.0 * pa_y[j] * pc_yzzzz[j] * pb_z[j] - 4.0 * pc_yyzzz[j] * pa_z[j] * pb_z[j] - 6.0 * pc_yyzzz[j] * pb_zz[j]);

                t_yyz_zzzz[j] += fl_s_0_0_6 * (5.0 * pc_yyzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + 2.0 * pa_y[j] * pc_yzzzzz[j] + pc_yyzzzz[j] * pa_z[j] + 4.0 * pc_yyzzzz[j] * pb_z[j]);

                t_yyz_zzzz[j] += -fl_s_0_0_7 * pc_yyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_120_123(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (120,123)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(19 * idx + 7);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxy = pcDistances.data(119 * idx + 35);

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyy = pcDistances.data(119 * idx + 37);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxyz = pcDistances.data(119 * idx + 59);

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyyz = pcDistances.data(119 * idx + 62);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxyzz = pcDistances.data(119 * idx + 91);

            auto pc_xxxyyzz = pcDistances.data(119 * idx + 95);

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzz_xxxx = primBuffer.data(150 * idx + 120);

            auto t_yzz_xxxy = primBuffer.data(150 * idx + 121);

            auto t_yzz_xxxz = primBuffer.data(150 * idx + 122);

            // Batch of Integrals (120,123)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, \
                                     pb_xxxz, pb_xxy, pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxy, \
                                     pc_xxxxyz, pc_xxxxyzz, pc_xxxxz, pc_xxxxzz, pc_xxxy, pc_xxxyy, pc_xxxyyz, \
                                     pc_xxxyyzz, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, pc_xxy, \
                                     pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, \
                                     pc_xxzzz, pc_xy, pc_xyy, pc_xyyz, pc_xyyzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, \
                                     pc_xzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yz, pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yzz_xxxx, \
                                     t_yzz_xxxy, t_yzz_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzz_xxxx[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 0.75 * pa_yzz[j] * fl2_fx + 1.5 * pa_y[j] * fl2_fx * pb_xx[j] + 3.0 * pa_yzz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_y[j] * fl1_fx * pb_xxxx[j] + pa_yzz[j] * pb_xxxx[j]);

                t_yzz_xxxx[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - 1.5 * pa_yzz[j] * fl2_fx - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 3.0 * pa_y[j] * fl2_fx * pb_xx[j] - 3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pc_y[j] * fl2_fx * pb_xx[j] - 3.0 * pa_yzz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_yzz[j] * pb_x[j] * pc_x[j] * fl1_fx - 6.0 * pa_yz[j] * pc_z[j] * pb_xx[j] * fl1_fx - 3.0 * pc_y[j] * pa_zz[j] * pb_xx[j] * fl1_fx - 2.0 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_x[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxxx[j] - 0.5 * pc_y[j] * fl1_fx * pb_xxxx[j] - 4.0 * pa_yzz[j] * pb_xxx[j] * pc_x[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xxxx[j] - pc_y[j] * pa_zz[j] * pb_xxxx[j]);

                t_yzz_xxxx[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 0.75 * pa_yzz[j] * fl2_fx + 3.0 * pa_yz[j] * pc_z[j] * fl2_fx + 0.75 * pa_y[j] * pc_zz[j] * fl2_fx + 1.5 * pc_y[j] * pa_zz[j] * fl2_fx + 1.5 * pc_yz[j] * pa_z[j] * fl2_fx + 6.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_xx[j] + 1.5 * pa_y[j] * fl2_fx * pb_xx[j] + 3.0 * pc_y[j] * fl2_fx * pb_xx[j] + 3.0 * pc_xy[j] * fl2_fx * pb_x[j] + 6.0 * pa_yzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_xx[j] * fl1_fx + 6.0 * pa_yz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 12.0 * pa_yz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_y[j] * pa_zz[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 6.0 * pc_yz[j] * pa_z[j] * pb_xx[j] * fl1_fx + 3.0 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xx[j] + 2.0 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_x[j] + 2.0 * pc_xy[j] * fl1_fx * pb_xxx[j] + 0.5 * pc_y[j] * fl1_fx * pb_xxxx[j] + 6.0 * pa_yzz[j] * pb_xx[j] * pc_xx[j] + 8.0 * pa_yz[j] * pc_xz[j] * pb_xxx[j] + pa_y[j] * pc_zz[j] * pb_xxxx[j] + 4.0 * pc_xy[j] * pa_zz[j] * pb_xxx[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xxxx[j]);

                t_yzz_xxxx[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 1.5 * pa_y[j] * pc_zz[j] * fl2_fx - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 3.0 * pc_yz[j] * pa_z[j] * fl2_fx - 0.75 * pc_yzz[j] * fl2_fx - 3.0 * pa_y[j] * fl2_fx * pc_xx[j] - 3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 6.0 * pc_xy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xxy[j] * fl2_fx - 1.5 * pc_y[j] * fl2_fx * pb_xx[j] - 3.0 * pa_yzz[j] * pc_xx[j] * fl1_fx - 12.0 * pa_yz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 6.0 * pa_yz[j] * pc_xxz[j] * fl1_fx - 3.0 * pa_y[j] * pc_zz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_y[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 6.0 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx - 6.0 * pc_yz[j] * pa_z[j] * pb_xx[j] * fl1_fx - 12.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_yzz[j] * pb_xx[j] * fl1_fx - 2.0 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxx[j] - 3.0 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xx[j] - 3.0 * pc_xxy[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xy[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_yzz[j] * pb_x[j] * pc_xxx[j] - 12.0 * pa_yz[j] * pc_xxz[j] * pb_xx[j] - 4.0 * pa_y[j] * pc_xzz[j] * pb_xxx[j] - 6.0 * pc_xxy[j] * pa_zz[j] * pb_xx[j] - 8.0 * pc_xyz[j] * pa_z[j] * pb_xxx[j] - pc_yzz[j] * pb_xxxx[j]);

                t_yzz_xxxx[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 0.75 * pa_y[j] * pc_zz[j] * fl2_fx + 1.5 * pc_yz[j] * pa_z[j] * fl2_fx + 1.5 * pc_yzz[j] * fl2_fx + 1.5 * pa_y[j] * fl2_fx * pc_xx[j] + 3.0 * pc_xxy[j] * fl2_fx + 3.0 * pc_xy[j] * fl2_fx * pb_x[j] + 6.0 * pa_yz[j] * pc_xxz[j] * fl1_fx + 6.0 * pa_y[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxzz[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_zz[j] * fl1_fx + 12.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_yzz[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xyzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_y[j] * fl1_fx * pc_xxxx[j] + 2.0 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxx[j] + 2.0 * pc_xxxy[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxy[j] * fl1_fx * pb_xx[j] + pa_yzz[j] * pc_xxxx[j] + 8.0 * pa_yz[j] * pc_xxxz[j] * pb_x[j] + 6.0 * pa_y[j] * pc_xxzz[j] * pb_xx[j] + 4.0 * pc_xxxy[j] * pa_zz[j] * pb_x[j] + 12.0 * pc_xxyz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xyzz[j] * pb_xxx[j]);

                t_yzz_xxxx[j] += fl_s_0_0_5 * (-0.75 * pc_yzz[j] * fl2_fx - 1.5 * pc_xxy[j] * fl2_fx - 3.0 * pa_y[j] * pc_xxzz[j] * fl1_fx - 6.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - 6.0 * pc_xyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 0.5 * pa_y[j] * fl1_fx * pc_xxxx[j] - 0.5 * pc_xxxxy[j] * fl1_fx - 2.0 * pc_xxxy[j] * fl1_fx * pb_x[j] - 2.0 * pa_yz[j] * pc_xxxxz[j] - 4.0 * pa_y[j] * pc_xxxzz[j] * pb_x[j] - pc_xxxxy[j] * pa_zz[j] - 8.0 * pc_xxxyz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xxyzz[j] * pb_xx[j]);

                t_yzz_xxxx[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_xxxxy[j] * fl1_fx + pa_y[j] * pc_xxxxzz[j] + 2.0 * pc_xxxxyz[j] * pa_z[j] + 4.0 * pc_xxxyzz[j] * pb_x[j]);

                t_yzz_xxxx[j] += -fl_s_0_0_7 * pc_xxxxyzz[j];

                t_yzz_xxxy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_yzz[j] * pb_xy[j] * fl1_fx + 0.5 * fl1_fx * pa_zz[j] * pb_xxx[j] + 0.5 * pa_y[j] * fl1_fx * pb_xxxy[j] + pa_yzz[j] * pb_xxxy[j]);

                t_yzz_xxxy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 1.5 * fl2_fx * pa_zz[j] * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 1.5 * pa_y[j] * fl2_fx * pb_xy[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pb_xx[j] * pc_x[j] - 0.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_yzz[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_yzz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_yzz[j] * pc_x[j] * fl1_fx * pb_y[j] - 3.0 * pa_yz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 1.5 * pc_y[j] * pa_zz[j] * pb_xy[j] * fl1_fx - 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_x[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxx[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_y[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxy[j] * pc_x[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxxy[j] - 0.5 * pc_y[j] * fl1_fx * pb_xxxy[j] - pa_yzz[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_yzz[j] * pb_xxy[j] * pc_x[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xxxy[j] - pc_y[j] * pa_zz[j] * pb_xxxy[j]);

                t_yzz_xxxy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * fl2_fx * pa_zz[j] * pc_x[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 1.5 * pc_y[j] * fl2_fx * pb_xy[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pb_x[j] * pc_xx[j] + 1.5 * fl2_fx * pb_xx[j] * pc_x[j] + 0.25 * fl2_fx * pb_xxx[j] + 1.5 * pa_yzz[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_yzz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_x[j] * fl1_fx * pb_y[j] + 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 1.5 * pa_y[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_y[j] * pa_zz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yz[j] * pa_z[j] * pb_xy[j] * fl1_fx + 1.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_xx[j] + 3.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xx[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] + 1.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_x[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxx[j] + 1.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xy[j] + 1.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xx[j] + 0.5 * pa_y[j] * fl1_fx * pb_xxx[j] * pc_y[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxy[j] * pc_x[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_y[j] * fl1_fx * pb_xxxy[j] + 3.0 * pa_yzz[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_yzz[j] * pb_xy[j] * pc_xx[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_xxx[j] + 6.0 * pa_yz[j] * pc_xz[j] * pb_xxy[j] + pa_y[j] * pc_zz[j] * pb_xxxy[j] + pc_yy[j] * pa_zz[j] * pb_xxx[j] + 3.0 * pc_xy[j] * pa_zz[j] * pb_xxy[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xxxy[j]);

                t_yzz_xxxy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 3.0 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.75 * fl2_fx * pc_xzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_xy[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pc_yy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 0.25 * fl2_fx * pc_xxx[j] - 1.5 * fl2_fx * pb_x[j] * pc_xx[j] - 0.75 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_yzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_y[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_y[j] - 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_yz[j] * pa_z[j] * pb_xy[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] - 1.5 * pc_yzz[j] * pb_xy[j] * fl1_fx - 0.5 * fl1_fx * pa_zz[j] * pc_xxx[j] - 3.0 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_x[j] - 1.5 * fl1_fx * pc_xzz[j] * pb_xx[j] - 1.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_xx[j] - 3.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xx[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxx[j] - 1.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxy[j] - 0.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_y[j] - 1.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_xy[j] - 1.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xx[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_yzz[j] * pb_x[j] * pc_xxy[j] - pa_yzz[j] * pc_xxx[j] * pb_y[j] - 6.0 * pa_yz[j] * pc_xyz[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xxz[j] * pb_xy[j] - pa_y[j] * pc_yzz[j] * pb_xxx[j] - 3.0 * pa_y[j] * pc_xzz[j] * pb_xxy[j] - 3.0 * pc_xyy[j] * pa_zz[j] * pb_xx[j] - 3.0 * pc_xxy[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xxx[j] - 6.0 * pc_xyz[j] * pa_z[j] * pb_xxy[j] - pc_yzz[j] * pb_xxxy[j]);

                t_yzz_xxxy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * fl2_fx * pc_xzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pc_xxx[j] + 0.75 * fl2_fx * pb_x[j] * pc_xx[j] + 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * pc_xyzz[j] * fl1_fx + 1.5 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_yzz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] + fl1_fx * pa_z[j] * pc_xxxz[j] + 1.5 * fl1_fx * pc_xxzz[j] * pb_x[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xxx[j] + 3.0 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_x[j] + 1.5 * fl1_fx * pc_xzz[j] * pb_xx[j] + 0.5 * pa_y[j] * fl1_fx * pc_xxxy[j] + 1.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_xxy[j] + 0.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_y[j] + 1.5 * pc_xxyy[j] * fl1_fx * pb_x[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_xx[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_xy[j] + pa_yzz[j] * pc_xxxy[j] + 6.0 * pa_yz[j] * pc_xxyz[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xxxz[j] * pb_y[j] + 3.0 * pa_y[j] * pc_xyzz[j] * pb_xx[j] + 3.0 * pa_y[j] * pc_xxzz[j] * pb_xy[j] + 3.0 * pc_xxyy[j] * pa_zz[j] * pb_x[j] + pc_xxxy[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_xyyz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xxyz[j] * pa_z[j] * pb_xy[j] + pc_yyzz[j] * pb_xxx[j] + 3.0 * pc_xyzz[j] * pb_xxy[j]);

                t_yzz_xxxy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_xzz[j] - 0.75 * pc_xyy[j] * fl2_fx - 0.25 * fl2_fx * pc_xxx[j] - 1.5 * pa_y[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 1.5 * pc_yyzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyyzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_xxxzz[j] - fl1_fx * pa_z[j] * pc_xxxz[j] - 1.5 * fl1_fx * pc_xxzz[j] * pb_x[j] - 0.5 * pa_y[j] * fl1_fx * pc_xxxy[j] - 0.5 * pc_xxxyy[j] * fl1_fx - 1.5 * pc_xxyy[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_y[j] - 2.0 * pa_yz[j] * pc_xxxyz[j] - 3.0 * pa_y[j] * pc_xxyzz[j] * pb_x[j] - pa_y[j] * pc_xxxzz[j] * pb_y[j] - pc_xxxyy[j] * pa_zz[j] - 6.0 * pc_xxyyz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_xyyzz[j] * pb_xx[j] - 3.0 * pc_xxyzz[j] * pb_xy[j]);

                t_yzz_xxxy[j] += fl_s_0_0_6 * (1.5 * pc_xyyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_xxxzz[j] + 0.5 * pc_xxxyy[j] * fl1_fx + pa_y[j] * pc_xxxyzz[j] + 2.0 * pc_xxxyyz[j] * pa_z[j] + 3.0 * pc_xxyyzz[j] * pb_x[j] + pc_xxxyzz[j] * pb_y[j]);

                t_yzz_xxxy[j] += -fl_s_0_0_7 * pc_xxxyyzz[j];

                t_yzz_xxxz[j] = fl_s_0_0_0 * (1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pa_yzz[j] * pb_xz[j] * fl1_fx + pa_yz[j] * fl1_fx * pb_xxx[j] + 0.5 * pa_y[j] * fl1_fx * pb_xxxz[j] + pa_yzz[j] * pb_xxxz[j]);

                t_yzz_xxxz[j] += fl_s_0_0_1 * (-3.0 * pa_yz[j] * fl2_fx * pb_x[j] - 1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_xz[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yzz[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_yzz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yzz[j] * pc_x[j] * fl1_fx * pb_z[j] - 3.0 * pa_yz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 3.0 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] - pa_yz[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxx[j] - 1.5 * pc_y[j] * pa_zz[j] * pb_xz[j] * fl1_fx - pc_y[j] * pa_z[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_x[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxxz[j] - 0.5 * pc_y[j] * fl1_fx * pb_xxxz[j] - pa_yzz[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_yzz[j] * pb_xxz[j] * pc_x[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xxxz[j] - pc_y[j] * pa_zz[j] * pb_xxxz[j]);

                t_yzz_xxxz[j] += fl_s_0_0_2 * (3.0 * pa_yz[j] * fl2_fx * pc_x[j] + 1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 4.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] + 2.25 * pa_y[j] * pc_xz[j] * fl2_fx + 3.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pc_y[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 1.5 * pa_yzz[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_yzz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_x[j] * fl1_fx * pb_z[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_z[j] * pb_xz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 3.0 * pa_yz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 1.5 * pa_y[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 4.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_y[j] * pa_zz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yz[j] * pa_z[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] + pc_y[j] * pa_z[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] + 1.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_xx[j] + 1.5 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_x[j] + 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_y[j] * fl1_fx * pb_xxxz[j] + 3.0 * pa_yzz[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_yzz[j] * pb_xz[j] * pc_xx[j] + 2.0 * pa_yz[j] * pc_zz[j] * pb_xxx[j] + 6.0 * pa_yz[j] * pc_xz[j] * pb_xxz[j] + pa_y[j] * pc_zz[j] * pb_xxxz[j] + pc_yz[j] * pa_zz[j] * pb_xxx[j] + 3.0 * pc_xy[j] * pa_zz[j] * pb_xxz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xxxz[j]);

                t_yzz_xxxz[j] += fl_s_0_0_3 * (-1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 4.5 * pa_y[j] * pc_xz[j] * fl2_fx - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yzz[j] * pc_xz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xzz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_yz[j] * fl1_fx * pc_xxx[j] - 3.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 1.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_y[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 4.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 4.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_yz[j] * pa_z[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 1.5 * pc_yzz[j] * pb_xz[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] - 0.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_z[j] - 1.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_xx[j] - 1.5 * pc_xxy[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xy[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_yzz[j] * pb_x[j] * pc_xxz[j] - pa_yzz[j] * pc_xxx[j] * pb_z[j] - 6.0 * pa_yz[j] * pc_xzz[j] * pb_xx[j] - 6.0 * pa_yz[j] * pc_xxz[j] * pb_xz[j] - pa_y[j] * pc_zzz[j] * pb_xxx[j] - 3.0 * pa_y[j] * pc_xzz[j] * pb_xxz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_xx[j] - 3.0 * pc_xxy[j] * pa_zz[j] * pb_xz[j] - 2.0 * pc_yzz[j] * pa_z[j] * pb_xxx[j] - 6.0 * pc_xyz[j] * pa_z[j] * pb_xxz[j] - pc_yzz[j] * pb_xxxz[j]);

                t_yzz_xxxz[j] += fl_s_0_0_4 * (2.25 * pa_y[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + 3.0 * pa_yz[j] * pc_xzz[j] * fl1_fx + pa_yz[j] * fl1_fx * pc_xxx[j] + 1.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * pc_xzzz[j] * fl1_fx + 1.5 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_xxxz[j] * fl1_fx + 4.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 3.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxxy[j] * pa_z[j] * fl1_fx + 3.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_x[j] + 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_yzz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 0.5 * pa_y[j] * fl1_fx * pc_xxx[j] * pb_z[j] + 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] + 1.5 * pc_xxy[j] * fl1_fx * pb_xz[j] + pa_yzz[j] * pc_xxxz[j] + 6.0 * pa_yz[j] * pc_xxzz[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xxxz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_xzzz[j] * pb_xx[j] + 3.0 * pa_y[j] * pc_xxzz[j] * pb_xz[j] + 3.0 * pc_xxyz[j] * pa_zz[j] * pb_x[j] + pc_xxxy[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_xx[j] + 6.0 * pc_xxyz[j] * pa_z[j] * pb_xz[j] + pc_yzzz[j] * pb_xxx[j] + 3.0 * pc_xyzz[j] * pb_xxz[j]);

                t_yzz_xxxz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 1.5 * pa_y[j] * pc_xzzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_xxxz[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - pc_xxxy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 0.5 * pc_xxxy[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_xxxzz[j] - 3.0 * pa_y[j] * pc_xxzzz[j] * pb_x[j] - pa_y[j] * pc_xxxzz[j] * pb_z[j] - pc_xxxyz[j] * pa_zz[j] - 6.0 * pc_xxyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxxyz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_xyzzz[j] * pb_xx[j] - 3.0 * pc_xxyzz[j] * pb_xz[j]);

                t_yzz_xxxz[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + pa_y[j] * pc_xxxzzz[j] + 2.0 * pc_xxxyzz[j] * pa_z[j] + 3.0 * pc_xxyzzz[j] * pb_x[j] + pc_xxxyzz[j] * pb_z[j]);

                t_yzz_xxxz[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_123_126(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (123,126)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(19 * idx + 7);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyy = pcDistances.data(119 * idx + 40);

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyyz = pcDistances.data(119 * idx + 66);

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyyzz = pcDistances.data(119 * idx + 100);

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzz_xxyy = primBuffer.data(150 * idx + 123);

            auto t_yzz_xxyz = primBuffer.data(150 * idx + 124);

            auto t_yzz_xxzz = primBuffer.data(150 * idx + 125);

            // Batch of Integrals (123,126)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, \
                                     pb_xxz, pb_xxzz, pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, \
                                     pc_x, pc_xx, pc_xxy, pc_xxyy, pc_xxyyy, pc_xxyyyz, pc_xxyyyzz, pc_xxyyz, \
                                     pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxyzzzz, pc_xxz, pc_xxzz, \
                                     pc_xxzzz, pc_xxzzzz, pc_xy, pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyz, pc_xyyzz, \
                                     pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, \
                                     pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, \
                                     pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_yzz_xxyy, t_yzz_xxyz, t_yzz_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzz_xxyy[j] = fl_s_0_0_0 * (0.125 * pa_y[j] * fl3_fx + 0.25 * fl3_fx * pb_y[j] + 0.25 * pa_yzz[j] * fl2_fx + 0.5 * fl2_fx * pa_zz[j] * pb_y[j] + 0.25 * pa_y[j] * fl2_fx * pb_xx[j] + 0.25 * pa_y[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pb_xxy[j] + 0.5 * pa_yzz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_yzz[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_zz[j] * pb_xxy[j] + 0.5 * pa_y[j] * fl1_fx * pb_xxyy[j] + pa_yzz[j] * pb_xxyy[j]);

                t_yzz_xxyy[j] += fl_s_0_0_1 * (-0.375 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - 0.75 * fl3_fx * pb_y[j] - 0.5 * pa_yzz[j] * fl2_fx - 0.5 * pa_yz[j] * pc_z[j] * fl2_fx - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - fl2_fx * pa_zz[j] * pb_y[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.5 * pa_y[j] * fl2_fx * pb_xx[j] - 0.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 0.5 * pa_y[j] * fl2_fx * pb_yy[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.25 * pc_y[j] * fl2_fx * pb_yy[j] - fl2_fx * pb_xy[j] * pc_x[j] - fl2_fx * pb_xxy[j] - 0.5 * pa_yzz[j] * pb_xx[j] * fl1_fx - pa_yzz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_yzz[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_yzz[j] * fl1_fx * pb_yy[j] - pa_yz[j] * pc_z[j] * pb_xx[j] * fl1_fx - pa_yz[j] * pc_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_y[j] * pa_zz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yy[j] - 2.0 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_x[j] - 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] - fl1_fx * pa_zz[j] * pb_xxy[j] - pa_y[j] * fl1_fx * pb_xxy[j] * pc_y[j] - pa_y[j] * fl1_fx * pb_xyy[j] * pc_x[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxyy[j] - 0.5 * pc_y[j] * fl1_fx * pb_xxyy[j] - 2.0 * pa_yzz[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_yzz[j] * pb_xyy[j] * pc_x[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xxyy[j] - pc_y[j] * pa_zz[j] * pb_xxyy[j]);

                t_yzz_xxyy[j] += fl_s_0_0_2 * (0.375 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_yzz[j] * fl2_fx + pa_yz[j] * pc_z[j] * fl2_fx + 0.25 * pa_y[j] * pc_zz[j] * fl2_fx + 1.5 * pc_y[j] * pa_zz[j] * fl2_fx + 1.5 * pc_yz[j] * pa_z[j] * fl2_fx + 2.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + 0.5 * fl2_fx * pa_zz[j] * pb_y[j] + pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.25 * pa_y[j] * fl2_fx * pc_xx[j] + 0.25 * pa_y[j] * fl2_fx * pc_yy[j] + pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.25 * pa_y[j] * fl2_fx * pb_xx[j] + 0.25 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * pc_y[j] * fl2_fx * pb_xx[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * pc_yy[j] * fl2_fx * pb_y[j] + 0.5 * pc_y[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pc_xx[j] * pb_y[j] + 2.0 * fl2_fx * pb_xy[j] * pc_x[j] + 0.5 * fl2_fx * pb_xxy[j] + pa_yzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_yzz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_yzz[j] * fl1_fx * pc_yy[j] + pa_yzz[j] * fl1_fx * pb_y[j] * pc_y[j] + pa_yz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 2.0 * pa_yz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] + pa_yz[j] * pc_z[j] * fl1_fx * pb_yy[j] + 0.5 * pa_y[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yy[j] + 1.5 * pc_y[j] * pa_zz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + pc_yy[j] * pa_zz[j] * fl1_fx * pb_y[j] + 0.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yy[j] + 3.0 * pc_yz[j] * pa_z[j] * pb_xx[j] * fl1_fx + pc_yz[j] * pa_z[j] * fl1_fx * pb_yy[j] + fl1_fx * pa_zz[j] * pc_xx[j] * pb_y[j] + 4.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xy[j] + fl1_fx * pc_zz[j] * pb_xxy[j] + 2.0 * fl1_fx * pa_zz[j] * pb_xy[j] * pc_x[j] + 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xxy[j] + 0.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_yy[j] + 2.0 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xy[j] + 0.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yy[j] + pa_y[j] * fl1_fx * pb_xxy[j] * pc_y[j] + pa_y[j] * fl1_fx * pb_xyy[j] * pc_x[j] + pc_yy[j] * fl1_fx * pb_xxy[j] + pc_xy[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_y[j] * fl1_fx * pb_xxyy[j] + pa_yzz[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_yzz[j] * pb_xy[j] * pc_xy[j] + pa_yzz[j] * pc_xx[j] * pb_yy[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xxy[j] + 4.0 * pa_yz[j] * pc_xz[j] * pb_xyy[j] + pa_y[j] * pc_zz[j] * pb_xxyy[j] + 2.0 * pc_yy[j] * pa_zz[j] * pb_xxy[j] + 2.0 * pc_xy[j] * pa_zz[j] * pb_xyy[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xxyy[j]);

                t_yzz_xxyy[j] += fl_s_0_0_3 * (-0.125 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 0.25 * fl3_fx * pb_y[j] - 0.5 * pa_yz[j] * pc_z[j] * fl2_fx - 0.5 * pa_y[j] * pc_zz[j] * fl2_fx - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 3.0 * pc_yz[j] * pa_z[j] * fl2_fx - 0.75 * pc_yzz[j] * fl2_fx - fl2_fx * pc_zz[j] * pb_y[j] - fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 0.5 * pa_y[j] * fl2_fx * pc_xx[j] - 0.5 * pa_y[j] * fl2_fx * pc_yy[j] - 0.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxy[j] * fl2_fx - 0.25 * pc_yyy[j] * fl2_fx - pc_yy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.25 * pc_y[j] * fl2_fx * pb_yy[j] - fl2_fx * pc_xx[j] * pb_y[j] - fl2_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_yzz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_yzz[j] * fl1_fx * pc_yy[j] - 2.0 * pa_yz[j] * pc_xz[j] * pb_x[j] * fl1_fx - pa_yz[j] * pc_xxz[j] * fl1_fx - pa_yz[j] * pc_yyz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 0.5 * pa_y[j] * pc_zz[j] * pb_xx[j] * fl1_fx - pa_y[j] * pc_xzz[j] * pb_x[j] * fl1_fx - pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx - pc_yy[j] * pa_zz[j] * fl1_fx * pb_y[j] - 3.0 * pc_yz[j] * pa_z[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 2.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_yz[j] * pa_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yzz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_yzz[j] * fl1_fx * pb_yy[j] - 2.0 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_y[j] - 2.0 * fl1_fx * pc_xzz[j] * pb_xy[j] - fl1_fx * pa_zz[j] * pc_xx[j] * pb_y[j] - 4.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xy[j] - fl1_fx * pc_zz[j] * pb_xxy[j] - pa_y[j] * fl1_fx * pb_x[j] * pc_xyy[j] - pa_y[j] * fl1_fx * pc_xxy[j] * pb_y[j] - 0.5 * pa_y[j] * fl1_fx * pb_xx[j] * pc_yy[j] - 2.0 * pa_y[j] * fl1_fx * pb_xy[j] * pc_xy[j] - 0.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yy[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xyy[j] * fl1_fx * pb_xy[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] - pc_yy[j] * fl1_fx * pb_xxy[j] - pc_xy[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_yzz[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_yzz[j] * pc_xxy[j] * pb_y[j] - 2.0 * pa_yz[j] * pc_yyz[j] * pb_xx[j] - 8.0 * pa_yz[j] * pc_xyz[j] * pb_xy[j] - 2.0 * pa_yz[j] * pc_xxz[j] * pb_yy[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xxy[j] - 2.0 * pa_y[j] * pc_xzz[j] * pb_xyy[j] - pc_yyy[j] * pa_zz[j] * pb_xx[j] - 4.0 * pc_xyy[j] * pa_zz[j] * pb_xy[j] - pc_xxy[j] * pa_zz[j] * pb_yy[j] - 4.0 * pc_yyz[j] * pa_z[j] * pb_xxy[j] - 4.0 * pc_xyz[j] * pa_z[j] * pb_xyy[j] - pc_yzz[j] * pb_xxyy[j]);

                t_yzz_xxyy[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 0.25 * pa_y[j] * pc_zz[j] * fl2_fx + 1.5 * pc_yz[j] * pa_z[j] * fl2_fx + 1.5 * pc_yzz[j] * fl2_fx + 0.5 * fl2_fx * pc_zz[j] * pb_y[j] + 0.25 * pa_y[j] * fl2_fx * pc_xx[j] + 0.25 * pa_y[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xxy[j] * fl2_fx + 0.5 * pc_yyy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 0.5 * pc_yy[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pc_xx[j] * pb_y[j] + pa_yz[j] * pc_xxz[j] * fl1_fx + pa_yz[j] * pc_yyz[j] * fl1_fx + pa_y[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_y[j] * pc_xxzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_yyzz[j] * fl1_fx + pa_y[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + pc_yyyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_yzz[j] * pb_xx[j] * fl1_fx + 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx + pc_yyzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yzz[j] * fl1_fx * pb_yy[j] + fl1_fx * pc_xxzz[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_xxz[j] * pb_y[j] + 2.0 * fl1_fx * pc_xzz[j] * pb_xy[j] + 0.5 * pa_y[j] * fl1_fx * pc_xxyy[j] + pa_y[j] * fl1_fx * pb_x[j] * pc_xyy[j] + pa_y[j] * fl1_fx * pc_xxy[j] * pb_y[j] + pc_xyyy[j] * fl1_fx * pb_x[j] + pc_xxyy[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_xx[j] + 2.0 * pc_xyy[j] * fl1_fx * pb_xy[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_yy[j] + pa_yzz[j] * pc_xxyy[j] + 4.0 * pa_yz[j] * pc_xyyz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xxyz[j] * pb_y[j] + pa_y[j] * pc_yyzz[j] * pb_xx[j] + 4.0 * pa_y[j] * pc_xyzz[j] * pb_xy[j] + pa_y[j] * pc_xxzz[j] * pb_yy[j] + 2.0 * pc_xyyy[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxyy[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_xx[j] + 8.0 * pc_xyyz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_yy[j] + 2.0 * pc_yyzz[j] * pb_xxy[j] + 2.0 * pc_xyzz[j] * pb_xyy[j]);

                t_yzz_xxyy[j] += fl_s_0_0_5 * (-0.75 * pc_yzz[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 0.25 * pc_yyy[j] * fl2_fx - 0.5 * pa_y[j] * pc_xxzz[j] * fl1_fx - 0.5 * pa_y[j] * pc_yyzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - pc_yyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_xyzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xxyzz[j] * fl1_fx - 0.5 * pc_yyyzz[j] * fl1_fx - pc_yyzz[j] * fl1_fx * pb_y[j] - fl1_fx * pc_xxzz[j] * pb_y[j] - 0.5 * pa_y[j] * fl1_fx * pc_xxyy[j] - 0.5 * pc_xxyyy[j] * fl1_fx - pc_xyyy[j] * fl1_fx * pb_x[j] - pc_xxyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_yz[j] * pc_xxyyz[j] - 2.0 * pa_y[j] * pc_xyyzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xxyzz[j] * pb_y[j] - pc_xxyyy[j] * pa_zz[j] - 4.0 * pc_xyyyz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxyyz[j] * pa_z[j] * pb_y[j] - pc_yyyzz[j] * pb_xx[j] - 4.0 * pc_xyyzz[j] * pb_xy[j] - pc_xxyzz[j] * pb_yy[j]);

                t_yzz_xxyy[j] += fl_s_0_0_6 * (1.5 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_yyyzz[j] * fl1_fx + 0.5 * pc_xxyyy[j] * fl1_fx + pa_y[j] * pc_xxyyzz[j] + 2.0 * pc_xxyyyz[j] * pa_z[j] + 2.0 * pc_xyyyzz[j] * pb_x[j] + 2.0 * pc_xxyyzz[j] * pb_y[j]);

                t_yzz_xxyy[j] += -fl_s_0_0_7 * pc_xxyyyzz[j];

                t_yzz_xxyz[j] = fl_s_0_0_0 * (0.25 * fl3_fx * pa_z[j] + 0.125 * fl3_fx * pb_z[j] + 0.5 * pa_yz[j] * fl2_fx * pb_y[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_xx[j] + 0.25 * pa_y[j] * fl2_fx * pb_yz[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_yzz[j] * fl1_fx * pb_yz[j] + pa_yz[j] * fl1_fx * pb_xxy[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xxz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xxyz[j] + pa_yzz[j] * pb_xxyz[j]);

                t_yzz_xxyz[j] += fl_s_0_0_1 * (-0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pc_z[j] - 0.375 * fl3_fx * pb_z[j] - 0.5 * pa_yz[j] * fl2_fx * pc_y[j] - pa_yz[j] * fl2_fx * pb_y[j] - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 0.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - fl2_fx * pa_z[j] * pb_xx[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.25 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 0.5 * pa_y[j] * fl2_fx * pb_yz[j] - 0.25 * pc_y[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pb_xz[j] * pc_x[j] - 0.5 * fl2_fx * pb_xxz[j] - 0.5 * pa_yzz[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_yzz[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_yzz[j] * fl1_fx * pb_yz[j] - pa_yz[j] * pc_z[j] * fl1_fx * pb_yz[j] - pa_yz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] - pa_yz[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxy[j] - 0.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yz[j] - pc_y[j] * pa_z[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] - fl1_fx * pa_zz[j] * pb_xz[j] * pc_x[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xxz[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_y[j] - pa_y[j] * fl1_fx * pb_xyz[j] * pc_x[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxyz[j] - 0.5 * pc_y[j] * fl1_fx * pb_xxyz[j] - pa_yzz[j] * pb_xxy[j] * pc_z[j] - pa_yzz[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_yzz[j] * pb_xyz[j] * pc_x[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xxyz[j] - pc_y[j] * pa_zz[j] * pb_xxyz[j]);

                t_yzz_xxyz[j] += fl_s_0_0_2 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pc_z[j] + 0.375 * fl3_fx * pb_z[j] + pa_yz[j] * fl2_fx * pc_y[j] + 0.5 * pa_yz[j] * fl2_fx * pb_y[j] + 0.75 * pa_y[j] * pc_yz[j] * fl2_fx + 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] + 0.5 * pc_yy[j] * pa_z[j] * fl2_fx + pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pa_zz[j] * pc_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pc_xx[j] + 2.0 * fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 1.5 * fl2_fx * pc_z[j] * pb_xx[j] + 0.25 * fl2_fx * pa_zz[j] * pb_z[j] + 0.5 * fl2_fx * pa_z[j] * pb_xx[j] + 0.5 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.25 * pa_y[j] * fl2_fx * pb_yz[j] + 0.25 * pc_yy[j] * fl2_fx * pb_z[j] + 0.5 * pc_y[j] * fl2_fx * pb_yz[j] + 0.25 * fl2_fx * pc_xx[j] * pb_z[j] + fl2_fx * pb_xz[j] * pc_x[j] + 0.25 * fl2_fx * pb_xxz[j] + 0.5 * pa_yzz[j] * fl1_fx * pc_yz[j] + 0.5 * pa_yzz[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_yzz[j] * fl1_fx * pc_y[j] * pb_z[j] + pa_yz[j] * pc_zz[j] * fl1_fx * pb_y[j] + pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + pa_yz[j] * pc_z[j] * fl1_fx * pb_yz[j] + 2.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xy[j] + pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] + pa_yz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxy[j] + 0.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 0.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_yz[j] + pc_yz[j] * pa_z[j] * fl1_fx * pb_yz[j] + pc_yy[j] * pa_z[j] * fl1_fx * pb_xx[j] + 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] + pc_y[j] * pa_z[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] + fl1_fx * pa_zz[j] * pb_x[j] * pc_xz[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xx[j] * pb_z[j] + fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] + 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xxz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xx[j] * pc_z[j] + fl1_fx * pa_zz[j] * pb_xz[j] * pc_x[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xxz[j] + pa_y[j] * fl1_fx * pb_xz[j] * pc_xy[j] + 0.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xxz[j] * pc_y[j] + pa_y[j] * fl1_fx * pb_xyz[j] * pc_x[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xxz[j] + pc_xy[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_y[j] * fl1_fx * pb_xxyz[j] + pa_yzz[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_yzz[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_yzz[j] * pb_xz[j] * pc_xy[j] + pa_yzz[j] * pc_xx[j] * pb_yz[j] + 2.0 * pa_yz[j] * pc_zz[j] * pb_xxy[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_xxz[j] + 4.0 * pa_yz[j] * pc_xz[j] * pb_xyz[j] + pa_y[j] * pc_zz[j] * pb_xxyz[j] + pc_yz[j] * pa_zz[j] * pb_xxy[j] + pc_yy[j] * pa_zz[j] * pb_xxz[j] + 2.0 * pc_xy[j] * pa_zz[j] * pb_xyz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xxyz[j]);

                t_yzz_xxyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_z[j] - 0.25 * fl3_fx * pa_z[j] - 0.125 * fl3_fx * pb_z[j] - 0.5 * pa_yz[j] * fl2_fx * pc_y[j] - 1.5 * pa_y[j] * pc_yz[j] * fl2_fx - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - pc_yy[j] * pa_z[j] * fl2_fx - 0.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 0.75 * pc_yyz[j] * fl2_fx - 1.5 * pc_yz[j] * fl2_fx * pb_y[j] - fl2_fx * pa_z[j] * pc_zz[j] - fl2_fx * pa_z[j] * pc_xx[j] - 0.25 * fl2_fx * pc_zzz[j] - 0.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pc_xxz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_x[j] - 0.25 * fl2_fx * pa_zz[j] * pc_z[j] - 0.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - fl2_fx * pa_z[j] * pb_x[j] * pc_x[j] - 0.75 * fl2_fx * pc_z[j] * pb_xx[j] - 0.25 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 0.5 * pc_yy[j] * fl2_fx * pb_z[j] - 0.25 * pc_y[j] * fl2_fx * pb_yz[j] - 0.5 * fl2_fx * pc_xx[j] * pb_z[j] - 0.5 * fl2_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_yzz[j] * fl1_fx * pc_yz[j] - pa_yz[j] * pc_yzz[j] * fl1_fx - pa_yz[j] * pc_zz[j] * fl1_fx * pb_y[j] - pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_yz[j] * fl1_fx * pc_xxy[j] - 2.0 * pa_yz[j] * fl1_fx * pb_x[j] * pc_xy[j] - pa_yz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_y[j] - 0.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_yz[j] - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 1.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 1.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_yyz[j] * pa_zz[j] * fl1_fx - 0.5 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] - pc_yzz[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] - pc_yz[j] * pa_z[j] * fl1_fx * pb_yz[j] - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] - pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] - pc_yy[j] * pa_z[j] * fl1_fx * pb_xx[j] - 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xy[j] - 0.5 * pc_yzz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxy[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xxz[j] - 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_x[j] - fl1_fx * pa_z[j] * pc_xxz[j] * pb_z[j] - 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] - fl1_fx * pc_xzz[j] * pb_xz[j] - fl1_fx * pa_zz[j] * pb_x[j] * pc_xz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xx[j] * pb_z[j] - fl1_fx * pa_z[j] * pc_zz[j] * pb_xx[j] - 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xxz[j] - 0.5 * pa_y[j] * fl1_fx * pc_xxy[j] * pb_z[j] - pa_y[j] * fl1_fx * pb_xz[j] * pc_xy[j] - 0.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_yz[j] - pc_xyy[j] * fl1_fx * pb_xz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xxz[j] - pc_xy[j] * fl1_fx * pb_xyz[j] - 2.0 * pa_yzz[j] * pb_x[j] * pc_xyz[j] - pa_yzz[j] * pc_xxz[j] * pb_y[j] - pa_yzz[j] * pc_xxy[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_yzz[j] * pb_xx[j] - 4.0 * pa_yz[j] * pc_xzz[j] * pb_xy[j] - 4.0 * pa_yz[j] * pc_xyz[j] * pb_xz[j] - 2.0 * pa_yz[j] * pc_xxz[j] * pb_yz[j] - pa_y[j] * pc_zzz[j] * pb_xxy[j] - pa_y[j] * pc_yzz[j] * pb_xxz[j] - 2.0 * pa_y[j] * pc_xzz[j] * pb_xyz[j] - pc_yyz[j] * pa_zz[j] * pb_xx[j] - 2.0 * pc_xyz[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_xyy[j] * pa_zz[j] * pb_xz[j] - pc_xxy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_yzz[j] * pa_z[j] * pb_xxy[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xxz[j] - 4.0 * pc_xyz[j] * pa_z[j] * pb_xyz[j] - pc_yzz[j] * pb_xxyz[j]);

                t_yzz_xxyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_z[j] + 0.75 * pa_y[j] * pc_yz[j] * fl2_fx + 0.5 * pc_yy[j] * pa_z[j] * fl2_fx + 1.5 * pc_yyz[j] * fl2_fx + 0.75 * pc_yz[j] * fl2_fx * pb_y[j] + 0.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pc_xxz[j] + 0.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.5 * fl2_fx * pa_z[j] * pc_xx[j] + 0.25 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * fl2_fx * pc_xz[j] * pb_x[j] + 0.25 * pc_yy[j] * fl2_fx * pb_z[j] + 0.25 * fl2_fx * pc_xx[j] * pb_z[j] + pa_yz[j] * pc_yzz[j] * fl1_fx + pa_yz[j] * fl1_fx * pc_xxy[j] + 0.5 * pa_y[j] * pc_yzzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzz[j] * fl1_fx * pb_y[j] + 0.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_xxyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 1.5 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyz[j] * pa_zz[j] * fl1_fx + pc_yyzz[j] * pa_z[j] * fl1_fx + pc_yzz[j] * pa_z[j] * fl1_fx * pb_y[j] + pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xxyy[j] * pa_z[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_x[j] + pc_xxy[j] * pa_z[j] * fl1_fx * pb_y[j] + 0.5 * pc_yzzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yyzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yzz[j] * fl1_fx * pb_yz[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + fl1_fx * pa_z[j] * pc_xxzz[j] + fl1_fx * pc_xzzz[j] * pb_x[j] + 0.5 * fl1_fx * pc_xxzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xxz[j] + 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_x[j] + fl1_fx * pa_z[j] * pc_xxz[j] * pb_z[j] + 0.5 * fl1_fx * pc_zzz[j] * pb_xx[j] + fl1_fx * pc_xzz[j] * pb_xz[j] + 0.5 * pa_y[j] * fl1_fx * pc_xxy[j] * pb_z[j] + 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] + pc_xyy[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_yz[j] + pa_yzz[j] * pc_xxyz[j] + 4.0 * pa_yz[j] * pc_xyzz[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xxzz[j] * pb_y[j] + 2.0 * pa_yz[j] * pc_xxyz[j] * pb_z[j] + pa_y[j] * pc_yzzz[j] * pb_xx[j] + 2.0 * pa_y[j] * pc_xzzz[j] * pb_xy[j] + 2.0 * pa_y[j] * pc_xyzz[j] * pb_xz[j] + pa_y[j] * pc_xxzz[j] * pb_yz[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_x[j] + pc_xxyz[j] * pa_zz[j] * pb_y[j] + pc_xxyy[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_yyzz[j] * pa_z[j] * pb_xx[j] + 4.0 * pc_xyzz[j] * pa_z[j] * pb_xy[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_yz[j] + pc_yzzz[j] * pb_xxy[j] + pc_yyzz[j] * pb_xxz[j] + 2.0 * pc_xyzz[j] * pb_xyz[j]);

                t_yzz_xxyz[j] += fl_s_0_0_5 * (-0.75 * pc_yyz[j] * fl2_fx - 0.25 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pc_xxz[j] - 0.5 * pa_y[j] * pc_yzzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_xxyz[j] * fl1_fx - pc_yyzz[j] * pa_z[j] * fl1_fx - pc_xxyy[j] * pa_z[j] * fl1_fx - 0.5 * pc_yyzzz[j] * fl1_fx - 0.5 * pc_yzzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_y[j] - 0.5 * fl1_fx * pc_xxzzz[j] - fl1_fx * pa_z[j] * pc_xxzz[j] - fl1_fx * pc_xzzz[j] * pb_x[j] - 0.5 * fl1_fx * pc_xxzz[j] * pb_z[j] - 0.5 * pc_xxyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_xxyzz[j] - 2.0 * pa_y[j] * pc_xyzzz[j] * pb_x[j] - pa_y[j] * pc_xxzzz[j] * pb_y[j] - pa_y[j] * pc_xxyzz[j] * pb_z[j] - pc_xxyyz[j] * pa_zz[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xxyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xxyyz[j] * pa_z[j] * pb_z[j] - pc_yyzzz[j] * pb_xx[j] - 2.0 * pc_xyzzz[j] * pb_xy[j] - 2.0 * pc_xyyzz[j] * pb_xz[j] - pc_xxyzz[j] * pb_yz[j]);

                t_yzz_xxyz[j] += fl_s_0_0_6 * (0.5 * pc_yyzzz[j] * fl1_fx + 1.5 * pc_xxyyz[j] * fl1_fx + 0.5 * fl1_fx * pc_xxzzz[j] + pa_y[j] * pc_xxyzzz[j] + 2.0 * pc_xxyyzz[j] * pa_z[j] + 2.0 * pc_xyyzzz[j] * pb_x[j] + pc_xxyzzz[j] * pb_y[j] + pc_xxyyzz[j] * pb_z[j]);

                t_yzz_xxyz[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];

                t_yzz_xxzz[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 0.25 * pa_yzz[j] * fl2_fx + pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 0.25 * pa_y[j] * fl2_fx * pb_zz[j] + 0.5 * pa_yzz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_yzz[j] * fl1_fx * pb_zz[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xxz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xxzz[j] + pa_yzz[j] * pb_xxzz[j]);

                t_yzz_xxzz[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 0.375 * pc_y[j] * fl3_fx - 0.5 * pa_yzz[j] * fl2_fx - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 2.0 * pa_yz[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_xx[j] - 0.25 * pc_y[j] * pa_zz[j] * fl2_fx - pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.5 * pa_y[j] * fl2_fx * pb_zz[j] - 0.25 * pc_y[j] * fl2_fx * pb_zz[j] - 0.5 * pa_yzz[j] * pb_xx[j] * fl1_fx - pa_yzz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_yzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_yzz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_yz[j] * pc_z[j] * pb_xx[j] * fl1_fx - pa_yz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 4.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxz[j] - 0.5 * pc_y[j] * pa_zz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxz[j] - pa_y[j] * fl1_fx * pb_xzz[j] * pc_x[j] - 0.5 * pa_y[j] * fl1_fx * pb_xxzz[j] - 0.5 * pc_y[j] * fl1_fx * pb_xxzz[j] - 2.0 * pa_yzz[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_yzz[j] * pb_xzz[j] * pc_x[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xxzz[j] - pc_y[j] * pa_zz[j] * pb_xxzz[j]);

                t_yzz_xxzz[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 1.125 * pc_y[j] * fl3_fx + 0.25 * pa_yzz[j] * fl2_fx + 3.0 * pa_yz[j] * pc_z[j] * fl2_fx + pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 3.0 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 3.0 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xx[j] + 0.5 * pc_y[j] * pa_zz[j] * fl2_fx + 1.5 * pc_yz[j] * pa_z[j] * fl2_fx + 2.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] + 1.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 1.5 * pc_y[j] * fl2_fx * pb_xx[j] + 0.25 * pa_y[j] * fl2_fx * pb_zz[j] + 0.5 * pc_y[j] * fl2_fx * pb_zz[j] + pa_yzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_yzz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_yzz[j] * fl1_fx * pc_zz[j] + pa_yzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 3.0 * pa_yz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 6.0 * pa_yz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 2.0 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] + pa_yz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 4.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 3.0 * pa_y[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 3.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_xxz[j] + 0.5 * pc_y[j] * pa_zz[j] * pb_xx[j] * fl1_fx + pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx + pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 0.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_yz[j] * pa_z[j] * pb_xx[j] * fl1_fx + pc_yz[j] * pa_z[j] * fl1_fx * pb_zz[j] + 4.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 2.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xxz[j] + 0.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_zz[j] + pa_y[j] * fl1_fx * pb_xzz[j] * pc_x[j] + pc_xy[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_y[j] * fl1_fx * pb_xxzz[j] + pa_yzz[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_yzz[j] * pb_xz[j] * pc_xz[j] + pa_yzz[j] * pc_xx[j] * pb_zz[j] + 4.0 * pa_yz[j] * pc_zz[j] * pb_xxz[j] + 4.0 * pa_yz[j] * pc_xz[j] * pb_xzz[j] + pa_y[j] * pc_zz[j] * pb_xxzz[j] + 2.0 * pc_yz[j] * pa_zz[j] * pb_xxz[j] + 2.0 * pc_xy[j] * pa_zz[j] * pb_xzz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xxzz[j]);

                t_yzz_xxzz[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 3.0 * pa_y[j] * pc_zz[j] * fl2_fx - 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_xx[j] - 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_x[j] - 0.25 * pc_y[j] * pa_zz[j] * fl2_fx - 3.0 * pc_yz[j] * pa_z[j] * fl2_fx - pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 1.5 * pc_yzz[j] * fl2_fx - 3.0 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * pc_xy[j] * fl2_fx * pb_x[j] - 0.75 * pc_y[j] * fl2_fx * pb_xx[j] - 0.25 * pc_y[j] * fl2_fx * pb_zz[j] - 0.5 * pa_yzz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_yzz[j] * fl1_fx * pc_zz[j] - 6.0 * pa_yz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xxz[j] * fl1_fx - pa_yz[j] * pc_zzz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 3.0 * pa_y[j] * pc_zz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_y[j] * pc_xzz[j] * pb_x[j] * fl1_fx - pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_xz[j] - pc_xy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx - 0.5 * pc_yzz[j] * pa_zz[j] * fl1_fx - pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yz[j] * pa_z[j] * pb_xx[j] * fl1_fx - 6.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 2.0 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] - pc_yz[j] * pa_z[j] * fl1_fx * pb_zz[j] - 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] - 4.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 3.0 * pc_yzz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_yzz[j] * fl1_fx * pb_zz[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xxz[j] - 0.5 * pa_y[j] * fl1_fx * pc_xx[j] * pb_zz[j] - 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] - pc_xy[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_yzz[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_yzz[j] * pc_xxz[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_zzz[j] * pb_xx[j] - 8.0 * pa_yz[j] * pc_xzz[j] * pb_xz[j] - 2.0 * pa_yz[j] * pc_xxz[j] * pb_zz[j] - 2.0 * pa_y[j] * pc_zzz[j] * pb_xxz[j] - 2.0 * pa_y[j] * pc_xzz[j] * pb_xzz[j] - pc_yzz[j] * pa_zz[j] * pb_xx[j] - 4.0 * pc_xyz[j] * pa_zz[j] * pb_xz[j] - pc_xxy[j] * pa_zz[j] * pb_zz[j] - 4.0 * pc_yzz[j] * pa_z[j] * pb_xxz[j] - 4.0 * pc_xyz[j] * pa_z[j] * pb_xzz[j] - pc_yzz[j] * pb_xxzz[j]);

                t_yzz_xxzz[j] += fl_s_0_0_4 * (0.375 * pc_y[j] * fl3_fx + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 0.75 * pa_y[j] * fl2_fx * pc_xx[j] + 1.5 * pc_yz[j] * pa_z[j] * fl2_fx + 3.0 * pc_yzz[j] * fl2_fx + 1.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_xxy[j] * fl2_fx + 1.5 * pc_xy[j] * fl2_fx * pb_x[j] + 3.0 * pa_yz[j] * pc_xxz[j] * fl1_fx + pa_yz[j] * pc_zzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xxzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx + pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xxy[j] * pa_zz[j] * fl1_fx + 0.5 * pc_yzz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_xyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx + pc_yzzz[j] * pa_z[j] * fl1_fx + 2.0 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 2.0 * pc_xxy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_yzz[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xyzz[j] * pb_x[j] * fl1_fx + pc_yzzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yzz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 0.5 * pc_xxy[j] * fl1_fx * pb_zz[j] + pa_yzz[j] * pc_xxzz[j] + 4.0 * pa_yz[j] * pc_xzzz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xxzz[j] * pb_z[j] + pa_y[j] * pc_zzzz[j] * pb_xx[j] + 4.0 * pa_y[j] * pc_xzzz[j] * pb_xz[j] + pa_y[j] * pc_xxzz[j] * pb_zz[j] + 2.0 * pc_xyzz[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xxyz[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_yzzz[j] * pa_z[j] * pb_xx[j] + 8.0 * pc_xyzz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xxyz[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_yzzz[j] * pb_xxz[j] + 2.0 * pc_xyzz[j] * pb_xzz[j]);

                t_yzz_xxzz[j] += fl_s_0_0_5 * (-1.5 * pc_yzz[j] * fl2_fx - 0.75 * pc_xxy[j] * fl2_fx - 3.0 * pa_y[j] * pc_xxzz[j] * fl1_fx - 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx - 3.0 * pc_xxyz[j] * pa_z[j] * fl1_fx - pc_yzzz[j] * pa_z[j] * fl1_fx - 6.0 * pc_xyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxyzz[j] * fl1_fx - 0.5 * pc_yzzzz[j] * fl1_fx - pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_xxzzz[j] - 2.0 * pa_y[j] * pc_xzzzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xxzzz[j] * pb_z[j] - pc_xxyzz[j] * pa_zz[j] - 4.0 * pc_xyzzz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xxyzz[j] * pa_z[j] * pb_z[j] - pc_yzzzz[j] * pb_xx[j] - 4.0 * pc_xyzzz[j] * pb_xz[j] - pc_xxyzz[j] * pb_zz[j]);

                t_yzz_xxzz[j] += fl_s_0_0_6 * (3.0 * pc_xxyzz[j] * fl1_fx + 0.5 * pc_yzzzz[j] * fl1_fx + pa_y[j] * pc_xxzzzz[j] + 2.0 * pc_xxyzzz[j] * pa_z[j] + 2.0 * pc_xyzzzz[j] * pb_x[j] + 2.0 * pc_xxyzzz[j] * pb_z[j]);

                t_yzz_xxzz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_126_129(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (126,129)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(19 * idx + 7);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyy = pcDistances.data(119 * idx + 44);

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyyz = pcDistances.data(119 * idx + 71);

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyyzz = pcDistances.data(119 * idx + 106);

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzz_xyyy = primBuffer.data(150 * idx + 126);

            auto t_yzz_xyyz = primBuffer.data(150 * idx + 127);

            auto t_yzz_xyzz = primBuffer.data(150 * idx + 128);

            // Batch of Integrals (126,129)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, \
                                     pb_xyz, pb_xyzz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, \
                                     pc_x, pc_xy, pc_xyy, pc_xyyy, pc_xyyyy, pc_xyyyyz, pc_xyyyyzz, pc_xyyyz, \
                                     pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, pc_xyyzzzz, pc_xyz, pc_xyzz, \
                                     pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, \
                                     pc_yyyyz, pc_yyyyzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, \
                                     s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yzz_xyyy, \
                                     t_yzz_xyyz, t_yzz_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzz_xyyy[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * fl2_fx * pb_xyy[j] + 1.5 * pa_yzz[j] * pb_xy[j] * fl1_fx + 1.5 * fl1_fx * pa_zz[j] * pb_xyy[j] + 0.5 * pa_y[j] * fl1_fx * pb_xyyy[j] + pa_yzz[j] * pb_xyyy[j]);

                t_yzz_xyyy[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 1.5 * fl2_fx * pa_zz[j] * pb_x[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pb_xy[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.25 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 1.5 * fl2_fx * pb_xyy[j] - 1.5 * pa_yzz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_yzz[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_yzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 3.0 * pa_yz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 4.5 * pc_y[j] * pa_zz[j] * pb_xy[j] * fl1_fx - 1.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_yy[j] - 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] - 1.5 * fl1_fx * pa_zz[j] * pb_xyy[j] - 1.5 * pa_y[j] * fl1_fx * pb_xyy[j] * pc_y[j] - 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyy[j] - 0.5 * pa_y[j] * fl1_fx * pb_xyyy[j] - 0.5 * pc_y[j] * fl1_fx * pb_xyyy[j] - 3.0 * pa_yzz[j] * pb_xyy[j] * pc_y[j] - pa_yzz[j] * pc_x[j] * pb_yyy[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xyyy[j] - pc_y[j] * pa_zz[j] * pb_xyyy[j]);

                t_yzz_xyyy[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * fl2_fx * pa_zz[j] * pc_x[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * fl2_fx * pa_zz[j] * pb_x[j] + 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] + 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 4.5 * pc_y[j] * fl2_fx * pb_xy[j] + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_x[j] * pb_yy[j] + 0.75 * fl2_fx * pb_xyy[j] + 1.5 * pa_yzz[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_yz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 1.5 * pa_y[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 4.5 * pc_y[j] * pa_zz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 9.0 * pc_yz[j] * pa_z[j] * pb_xy[j] * fl1_fx + 3.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_yy[j] + 1.5 * fl1_fx * pc_zz[j] * pb_xyy[j] + 1.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_yy[j] + 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyy[j] + 1.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_yy[j] + 1.5 * pa_y[j] * fl1_fx * pc_xy[j] * pb_yy[j] + 1.5 * pa_y[j] * fl1_fx * pb_xyy[j] * pc_y[j] + 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyy[j] + 1.5 * pc_yy[j] * fl1_fx * pb_xyy[j] + 0.5 * pc_xy[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_y[j] * fl1_fx * pb_xyyy[j] + 3.0 * pa_yzz[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_yzz[j] * pc_xy[j] * pb_yy[j] + 6.0 * pa_yz[j] * pc_yz[j] * pb_xyy[j] + 2.0 * pa_yz[j] * pc_xz[j] * pb_yyy[j] + pa_y[j] * pc_zz[j] * pb_xyyy[j] + 3.0 * pc_yy[j] * pa_zz[j] * pb_xyy[j] + pc_xy[j] * pa_zz[j] * pb_yyy[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xyyy[j]);

                t_yzz_xyyy[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 3.0 * fl2_fx * pa_z[j] * pc_xz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_x[j] - 0.75 * fl2_fx * pc_xzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_xy[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.0 * pc_yy[j] * fl2_fx * pb_x[j] - 4.5 * pc_xy[j] * fl2_fx * pb_y[j] - 1.5 * pc_xyy[j] * fl2_fx - 2.25 * pc_y[j] * fl2_fx * pb_xy[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_yzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 1.5 * pa_y[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_y[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx - 9.0 * pc_yz[j] * pa_z[j] * pb_xy[j] * fl1_fx - 6.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 4.5 * pc_yzz[j] * pb_xy[j] * fl1_fx - 1.5 * fl1_fx * pc_xzz[j] * pb_yy[j] - 3.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_yy[j] - 1.5 * fl1_fx * pc_zz[j] * pb_xyy[j] - 0.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_yyy[j] - 1.5 * pa_y[j] * fl1_fx * pc_xyy[j] * pb_y[j] - 1.5 * pa_y[j] * fl1_fx * pb_xy[j] * pc_yy[j] - 1.5 * pa_y[j] * fl1_fx * pc_xy[j] * pb_yy[j] - 1.5 * pc_yyy[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yy[j] * fl1_fx * pb_xyy[j] - 0.5 * pc_xy[j] * fl1_fx * pb_yyy[j] - pa_yzz[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_yzz[j] * pc_xyy[j] * pb_y[j] - 6.0 * pa_yz[j] * pc_yyz[j] * pb_xy[j] - 6.0 * pa_yz[j] * pc_xyz[j] * pb_yy[j] - 3.0 * pa_y[j] * pc_yzz[j] * pb_xyy[j] - pa_y[j] * pc_xzz[j] * pb_yyy[j] - 3.0 * pc_yyy[j] * pa_zz[j] * pb_xy[j] - 3.0 * pc_xyy[j] * pa_zz[j] * pb_yy[j] - 6.0 * pc_yyz[j] * pa_z[j] * pb_xyy[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_yyy[j] - pc_yzz[j] * pb_xyyy[j]);

                t_yzz_xyyy[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 1.5 * fl2_fx * pc_xzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 3.0 * pc_xyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_y[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_y[j] * pc_xyzz[j] * fl1_fx + 3.0 * pc_xyy[j] * pa_zz[j] * fl1_fx + 6.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 4.5 * pc_yzz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx + 4.5 * pc_xyzz[j] * pb_y[j] * fl1_fx + 1.5 * fl1_fx * pc_xzz[j] * pb_yy[j] + 0.5 * pa_y[j] * fl1_fx * pc_xyyy[j] + 0.5 * pa_y[j] * fl1_fx * pb_x[j] * pc_yyy[j] + 1.5 * pa_y[j] * fl1_fx * pc_xyy[j] * pb_y[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] + 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyy[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyy[j] * fl1_fx * pb_yy[j] + pa_yzz[j] * pc_xyyy[j] + 2.0 * pa_yz[j] * pc_yyyz[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xyyz[j] * pb_y[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_xy[j] + 3.0 * pa_y[j] * pc_xyzz[j] * pb_yy[j] + pc_yyyy[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xyyy[j] * pa_zz[j] * pb_y[j] + 6.0 * pc_yyyz[j] * pa_z[j] * pb_xy[j] + 6.0 * pc_xyyz[j] * pa_z[j] * pb_yy[j] + 3.0 * pc_yyzz[j] * pb_xyy[j] + pc_xyzz[j] * pb_yyy[j]);

                t_yzz_xyyy[j] += fl_s_0_0_5 * (-0.75 * fl2_fx * pc_xzz[j] - 1.5 * pc_xyy[j] * fl2_fx - 1.5 * pa_y[j] * pc_xyzz[j] * fl1_fx - 6.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx - 4.5 * pc_xyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 0.5 * pa_y[j] * fl1_fx * pc_xyyy[j] - 0.5 * pc_xyyyy[j] * fl1_fx - 0.5 * pc_yyyy[j] * fl1_fx * pb_x[j] - 1.5 * pc_xyyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_yz[j] * pc_xyyyz[j] - pa_y[j] * pc_yyyzz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xyyzz[j] * pb_y[j] - pc_xyyyy[j] * pa_zz[j] - 2.0 * pc_yyyyz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xyyyz[j] * pa_z[j] * pb_y[j] - 3.0 * pc_yyyzz[j] * pb_xy[j] - 3.0 * pc_xyyzz[j] * pb_yy[j]);

                t_yzz_xyyy[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * pc_xyyyy[j] * fl1_fx + pa_y[j] * pc_xyyyzz[j] + 2.0 * pc_xyyyyz[j] * pa_z[j] + pc_yyyyzz[j] * pb_x[j] + 3.0 * pc_xyyyzz[j] * pb_y[j]);

                t_yzz_xyyy[j] += -fl_s_0_0_7 * pc_xyyyyzz[j];

                t_yzz_xyyz[j] = fl_s_0_0_0 * (0.5 * pa_yz[j] * fl2_fx * pb_x[j] + fl2_fx * pa_z[j] * pb_xy[j] + 0.25 * pa_y[j] * fl2_fx * pb_xz[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_yzz[j] * pb_xz[j] * fl1_fx + pa_yz[j] * fl1_fx * pb_xyy[j] + fl1_fx * pa_zz[j] * pb_xyz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xyyz[j] + pa_yzz[j] * pb_xyyz[j]);

                t_yzz_xyyz[j] += fl_s_0_0_1 * (-pa_yz[j] * fl2_fx * pb_x[j] - 0.5 * pa_yz[j] * fl2_fx * pc_x[j] - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 2.0 * fl2_fx * pa_z[j] * pb_xy[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.5 * pa_y[j] * fl2_fx * pb_xz[j] - 0.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pc_x[j] * pb_yz[j] - fl2_fx * pb_xyz[j] - 0.5 * pa_yzz[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_yzz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_yzz[j] * pc_x[j] * fl1_fx * pb_z[j] - pa_yz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 2.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_y[j] - pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] - pa_yz[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_y[j] * pa_zz[j] * pb_xz[j] * fl1_fx - pc_y[j] * pa_z[j] * fl1_fx * pb_xyy[j] - fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] - fl1_fx * pa_zz[j] * pc_x[j] * pb_yz[j] - 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] - fl1_fx * pa_zz[j] * pb_xyz[j] - pa_y[j] * fl1_fx * pb_xyz[j] * pc_y[j] - 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyz[j] - 0.5 * pa_y[j] * fl1_fx * pb_xyyz[j] - 0.5 * pc_y[j] * fl1_fx * pb_xyyz[j] - pa_yzz[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_yzz[j] * pb_xyz[j] * pc_y[j] - pa_yzz[j] * pc_x[j] * pb_yyz[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xyyz[j] - pc_y[j] * pa_zz[j] * pb_xyyz[j]);

                t_yzz_xyyz[j] += fl_s_0_0_2 * (pa_yz[j] * fl2_fx * pc_x[j] + 0.5 * pa_yz[j] * fl2_fx * pb_x[j] + 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] + 0.75 * pa_y[j] * pc_xz[j] * fl2_fx + 3.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 2.0 * fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 3.0 * fl2_fx * pc_z[j] * pb_xy[j] + fl2_fx * pa_z[j] * pb_xy[j] + 0.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.25 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pc_y[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + fl2_fx * pc_x[j] * pb_yz[j] + 0.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_yzz[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_yzz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_yzz[j] * pc_x[j] * fl1_fx * pb_z[j] + pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx + pa_yz[j] * pc_z[j] * pb_xz[j] * fl1_fx + pa_yz[j] * pc_xz[j] * fl1_fx * pb_z[j] + pa_yz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 2.0 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_y[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xy[j] * pc_y[j] + pa_yz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 0.5 * pa_y[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_y[j] * pa_zz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yz[j] * pa_z[j] * pb_xz[j] * fl1_fx + 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xy[j] + pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] + pc_y[j] * pa_z[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] + fl1_fx * pa_zz[j] * pc_xz[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] + 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_yz[j] + fl1_fx * pc_zz[j] * pb_xyz[j] + fl1_fx * pa_zz[j] * pb_xy[j] * pc_z[j] + fl1_fx * pa_zz[j] * pc_x[j] * pb_yz[j] + 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_xyz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_yy[j] + pa_y[j] * fl1_fx * pc_xy[j] * pb_yz[j] + pa_y[j] * fl1_fx * pb_xyz[j] * pc_y[j] + 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yyz[j] + pc_yy[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_y[j] * fl1_fx * pb_xyyz[j] + 2.0 * pa_yzz[j] * pb_xy[j] * pc_yz[j] + pa_yzz[j] * pb_xz[j] * pc_yy[j] + pa_yzz[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_yzz[j] * pc_xy[j] * pb_yz[j] + 2.0 * pa_yz[j] * pc_zz[j] * pb_xyy[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_xyz[j] + 2.0 * pa_yz[j] * pc_xz[j] * pb_yyz[j] + pa_y[j] * pc_zz[j] * pb_xyyz[j] + pc_yz[j] * pa_zz[j] * pb_xyy[j] + 2.0 * pc_yy[j] * pa_zz[j] * pb_xyz[j] + pc_xy[j] * pa_zz[j] * pb_yyz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xyyz[j]);

                t_yzz_xyyz[j] += fl_s_0_0_3 * (-0.5 * pa_yz[j] * fl2_fx * pc_x[j] - 1.5 * pa_y[j] * pc_xz[j] * fl2_fx - 0.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 3.0 * fl2_fx * pc_xz[j] * pb_y[j] - fl2_fx * pa_z[j] * pc_x[j] * pb_y[j] - 1.5 * fl2_fx * pc_z[j] * pb_xy[j] - 0.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pc_xy[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_xz[j] - 0.5 * fl2_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_yzz[j] * pc_xz[j] * fl1_fx - pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx - pa_yz[j] * pc_xzz[j] * fl1_fx - pa_yz[j] * pc_xz[j] * fl1_fx * pb_z[j] - pa_yz[j] * fl1_fx * pc_xyy[j] - pa_yz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 2.0 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_y[j] - 0.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 0.5 * pa_y[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 1.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_yz[j] * pa_z[j] * pb_xz[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] - pc_yyy[j] * pa_z[j] * fl1_fx * pb_x[j] - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xy[j] - pc_xy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yzz[j] * pb_xz[j] * fl1_fx - 3.0 * pc_yyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xyy[j] - 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] - fl1_fx * pc_zzz[j] * pb_xy[j] - fl1_fx * pc_xzz[j] * pb_yz[j] - fl1_fx * pa_zz[j] * pc_xz[j] * pb_y[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xy[j] - 2.0 * fl1_fx * pa_z[j] * pc_xz[j] * pb_yz[j] - fl1_fx * pc_zz[j] * pb_xyz[j] - 0.5 * pa_y[j] * fl1_fx * pc_xyy[j] * pb_z[j] - 0.5 * pa_y[j] * fl1_fx * pb_xz[j] * pc_yy[j] - pa_y[j] * fl1_fx * pc_xy[j] * pb_yz[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_xz[j] - pc_xyy[j] * fl1_fx * pb_yz[j] - pc_yy[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_yyz[j] - pa_yzz[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_yzz[j] * pc_xyz[j] * pb_y[j] - pa_yzz[j] * pc_xyy[j] * pb_z[j] - 4.0 * pa_yz[j] * pc_yzz[j] * pb_xy[j] - 2.0 * pa_yz[j] * pc_yyz[j] * pb_xz[j] - 2.0 * pa_yz[j] * pc_xzz[j] * pb_yy[j] - 4.0 * pa_yz[j] * pc_xyz[j] * pb_yz[j] - pa_y[j] * pc_zzz[j] * pb_xyy[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_xyz[j] - pa_y[j] * pc_xzz[j] * pb_yyz[j] - 2.0 * pc_yyz[j] * pa_zz[j] * pb_xy[j] - pc_yyy[j] * pa_zz[j] * pb_xz[j] - pc_xyz[j] * pa_zz[j] * pb_yy[j] - 2.0 * pc_xyy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_yzz[j] * pa_z[j] * pb_xyy[j] - 4.0 * pc_yyz[j] * pa_z[j] * pb_xyz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_yyz[j] - pc_yzz[j] * pb_xyyz[j]);

                t_yzz_xyyz[j] += fl_s_0_0_4 * (0.75 * pa_y[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_y[j] + 0.75 * pc_xy[j] * fl2_fx * pb_z[j] + pa_yz[j] * pc_xzz[j] * fl1_fx + pa_yz[j] * fl1_fx * pc_xyy[j] + 0.5 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 0.5 * pa_y[j] * pc_xzzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_xyyz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 3.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_xyyy[j] * pa_z[j] * fl1_fx + pc_yyy[j] * pa_z[j] * fl1_fx * pb_x[j] + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_yzz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + fl1_fx * pc_xzzz[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_y[j] + fl1_fx * pc_zzz[j] * pb_xy[j] + fl1_fx * pc_xzz[j] * pb_yz[j] + 0.5 * pa_y[j] * fl1_fx * pc_xyy[j] * pb_z[j] + 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_xz[j] + pc_xyy[j] * fl1_fx * pb_yz[j] + pa_yzz[j] * pc_xyyz[j] + 2.0 * pa_yz[j] * pc_yyzz[j] * pb_x[j] + 4.0 * pa_yz[j] * pc_xyzz[j] * pb_y[j] + 2.0 * pa_yz[j] * pc_xyyz[j] * pb_z[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_xy[j] + pa_y[j] * pc_yyzz[j] * pb_xz[j] + pa_y[j] * pc_xzzz[j] * pb_yy[j] + 2.0 * pa_y[j] * pc_xyzz[j] * pb_yz[j] + pc_yyyz[j] * pa_zz[j] * pb_x[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_y[j] + pc_xyyy[j] * pa_zz[j] * pb_z[j] + 4.0 * pc_yyzz[j] * pa_z[j] * pb_xy[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_xz[j] + 2.0 * pc_xyzz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_xyyz[j] * pa_z[j] * pb_yz[j] + pc_yzzz[j] * pb_xyy[j] + 2.0 * pc_yyzz[j] * pb_xyz[j] + pc_xyzz[j] * pb_yyz[j]);

                t_yzz_xyyz[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 0.5 * pa_y[j] * pc_xzzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_xyyz[j] * fl1_fx - 3.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - pc_xyyy[j] * pa_z[j] * fl1_fx - 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xyyz[j] * fl1_fx * pb_y[j] - fl1_fx * pc_xzzz[j] * pb_y[j] - 0.5 * pc_xyyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_xyyzz[j] - pa_y[j] * pc_yyzzz[j] * pb_x[j] - 2.0 * pa_y[j] * pc_xyzzz[j] * pb_y[j] - pa_y[j] * pc_xyyzz[j] * pb_z[j] - pc_xyyyz[j] * pa_zz[j] - 2.0 * pc_yyyzz[j] * pa_z[j] * pb_x[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_xyyyz[j] * pa_z[j] * pb_z[j] - 2.0 * pc_yyzzz[j] * pb_xy[j] - pc_yyyzz[j] * pb_xz[j] - pc_xyzzz[j] * pb_yy[j] - 2.0 * pc_xyyzz[j] * pb_yz[j]);

                t_yzz_xyyz[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + pa_y[j] * pc_xyyzzz[j] + 2.0 * pc_xyyyzz[j] * pa_z[j] + pc_yyyzzz[j] * pb_x[j] + 2.0 * pc_xyyzzz[j] * pb_y[j] + pc_xyyyzz[j] * pb_z[j]);

                t_yzz_xyyz[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];

                t_yzz_xyzz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xz[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_yzz[j] * pb_xy[j] * fl1_fx + 2.0 * pa_yz[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_xzz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xyzz[j] + pa_yzz[j] * pb_xyzz[j]);

                t_yzz_xyzz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 1.5 * pa_y[j] * fl2_fx * pb_xy[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 0.5 * fl2_fx * pa_zz[j] * pb_x[j] - 0.25 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 2.0 * fl2_fx * pa_z[j] * pb_xz[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_zz[j] - 0.5 * fl2_fx * pb_xzz[j] - 0.5 * pa_yzz[j] * pb_xy[j] * fl1_fx - 0.5 * pa_yzz[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_yzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 3.0 * pa_yz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 2.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 2.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 2.0 * pa_yz[j] * fl1_fx * pb_xyz[j] - 3.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyz[j] - 0.5 * pc_y[j] * pa_zz[j] * pb_xy[j] * fl1_fx - 2.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_xyz[j] - fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] - 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_zz[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_xzz[j] - 0.5 * pa_y[j] * fl1_fx * pb_xzz[j] * pc_y[j] - 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yzz[j] - 0.5 * pa_y[j] * fl1_fx * pb_xyzz[j] - 0.5 * pc_y[j] * fl1_fx * pb_xyzz[j] - 2.0 * pa_yzz[j] * pb_xyz[j] * pc_z[j] - pa_yzz[j] * pb_xzz[j] * pc_y[j] - pa_yzz[j] * pc_x[j] * pb_yzz[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xyzz[j] - pc_y[j] * pa_zz[j] * pb_xyzz[j]);

                t_yzz_xyzz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 1.5 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] + 1.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] + 0.75 * pa_y[j] * fl2_fx * pb_xy[j] + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pb_xy[j] + 0.5 * fl2_fx * pa_zz[j] * pc_x[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 2.0 * fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * fl2_fx * pc_z[j] * pb_xz[j] + 0.25 * fl2_fx * pa_zz[j] * pb_x[j] + fl2_fx * pa_z[j] * pb_xz[j] + 0.5 * fl2_fx * pc_x[j] * pb_zz[j] + 0.25 * fl2_fx * pb_xzz[j] + 0.5 * pa_yzz[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_yzz[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_yzz[j] * pc_xy[j] * fl1_fx + 3.0 * pa_yz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 3.0 * pa_yz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 2.0 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_z[j] + 2.0 * pa_yz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 2.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 3.0 * pa_y[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_xyz[j] + 0.5 * pc_y[j] * pa_zz[j] * pb_xy[j] * fl1_fx + 0.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx + 0.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 3.0 * pc_yz[j] * pa_z[j] * pb_xy[j] * fl1_fx + 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xz[j] + 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 2.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_xyz[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] + fl1_fx * pa_zz[j] * pc_xz[j] * pb_z[j] + 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] + fl1_fx * pa_z[j] * pc_xz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_xzz[j] + fl1_fx * pa_zz[j] * pb_xz[j] * pc_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_x[j] * pb_zz[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_xzz[j] + 0.5 * pa_y[j] * fl1_fx * pc_xy[j] * pb_zz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xzz[j] * pc_y[j] + 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_yzz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_xzz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_y[j] * fl1_fx * pb_xyzz[j] + pa_yzz[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_yzz[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_yzz[j] * pc_xz[j] * pb_yz[j] + pa_yzz[j] * pc_xy[j] * pb_zz[j] + 4.0 * pa_yz[j] * pc_zz[j] * pb_xyz[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_xzz[j] + 2.0 * pa_yz[j] * pc_xz[j] * pb_yzz[j] + pa_y[j] * pc_zz[j] * pb_xyzz[j] + 2.0 * pc_yz[j] * pa_zz[j] * pb_xyz[j] + pc_yy[j] * pa_zz[j] * pb_xzz[j] + pc_xy[j] * pa_zz[j] * pb_yzz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xyzz[j]);

                t_yzz_xyzz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 1.5 * pa_y[j] * fl2_fx * pc_xy[j] - 0.75 * pa_y[j] * fl2_fx * pb_x[j] * pc_y[j] - 0.75 * pa_y[j] * fl2_fx * pc_x[j] * pb_y[j] - 0.75 * pc_xyy[j] * fl2_fx - 1.5 * pc_yy[j] * fl2_fx * pb_x[j] - 1.5 * pc_xy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_xy[j] - 3.0 * fl2_fx * pa_z[j] * pc_xz[j] - 3.0 * fl2_fx * pc_zz[j] * pb_x[j] - 1.5 * fl2_fx * pc_xzz[j] - 3.0 * fl2_fx * pc_xz[j] * pb_z[j] - 0.25 * fl2_fx * pa_zz[j] * pc_x[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_x[j] - fl2_fx * pa_z[j] * pc_x[j] * pb_z[j] - 1.5 * fl2_fx * pc_z[j] * pb_xz[j] - 0.25 * fl2_fx * pc_x[j] * pb_zz[j] - 0.5 * pa_yzz[j] * pc_xy[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx - 2.0 * pa_yz[j] * fl1_fx * pc_xy[j] * pb_z[j] - 3.0 * pa_y[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_y[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 3.0 * pa_y[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 0.5 * pc_yy[j] * pa_zz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yz[j] * pa_z[j] * pb_xy[j] * fl1_fx - 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 2.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_xz[j] - 2.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yzz[j] * pb_xy[j] * fl1_fx - 3.0 * pc_yyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_xzz[j] - fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] - 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] - fl1_fx * pc_zzz[j] * pb_xz[j] - 0.5 * fl1_fx * pc_xzz[j] * pb_zz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_x[j] * pc_zz[j] - fl1_fx * pa_zz[j] * pc_xz[j] * pb_z[j] - 2.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_xz[j] - fl1_fx * pa_z[j] * pc_xz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_xzz[j] - 0.5 * pa_y[j] * fl1_fx * pc_xy[j] * pb_zz[j] - 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_yzz[j] - pa_yzz[j] * pb_x[j] * pc_yzz[j] - pa_yzz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_yzz[j] * pc_xyz[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_zzz[j] * pb_xy[j] - 4.0 * pa_yz[j] * pc_yzz[j] * pb_xz[j] - 4.0 * pa_yz[j] * pc_xzz[j] * pb_yz[j] - 2.0 * pa_yz[j] * pc_xyz[j] * pb_zz[j] - 2.0 * pa_y[j] * pc_zzz[j] * pb_xyz[j] - pa_y[j] * pc_yzz[j] * pb_xzz[j] - pa_y[j] * pc_xzz[j] * pb_yzz[j] - pc_yzz[j] * pa_zz[j] * pb_xy[j] - 2.0 * pc_yyz[j] * pa_zz[j] * pb_xz[j] - 2.0 * pc_xyz[j] * pa_zz[j] * pb_yz[j] - pc_xyy[j] * pa_zz[j] * pb_zz[j] - 4.0 * pc_yzz[j] * pa_z[j] * pb_xyz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_xzz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_yzz[j] - pc_yzz[j] * pb_xyzz[j]);

                t_yzz_xyzz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 0.75 * pa_y[j] * fl2_fx * pc_xy[j] + 1.5 * pc_xyy[j] * fl2_fx + 0.75 * pc_yy[j] * fl2_fx * pb_x[j] + 0.75 * pc_xy[j] * fl2_fx * pb_y[j] + 3.0 * fl2_fx * pc_xzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_xz[j] + 1.5 * fl2_fx * pc_zz[j] * pb_x[j] + 1.5 * fl2_fx * pc_xz[j] * pb_z[j] + 3.0 * pa_yz[j] * pc_xyz[j] * fl1_fx + 3.0 * pa_y[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 3.0 * pa_y[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx + 3.0 * pa_y[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_xyy[j] * pa_zz[j] * fl1_fx + 3.0 * pc_yyz[j] * pa_z[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx + 2.0 * pc_xyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_yzz[j] * pb_xy[j] * fl1_fx + 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx + 3.0 * pc_xyzz[j] * pb_y[j] * fl1_fx + 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + fl1_fx * pa_z[j] * pc_xzzz[j] + 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] + fl1_fx * pc_xzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_xzz[j] + fl1_fx * pa_z[j] * pc_zzz[j] * pb_x[j] + 2.0 * fl1_fx * pa_z[j] * pc_xzz[j] * pb_z[j] + fl1_fx * pc_zzz[j] * pb_xz[j] + 0.5 * fl1_fx * pc_xzz[j] * pb_zz[j] + 0.5 * pc_xyy[j] * fl1_fx * pb_zz[j] + pa_yzz[j] * pc_xyzz[j] + 2.0 * pa_yz[j] * pc_yzzz[j] * pb_x[j] + 2.0 * pa_yz[j] * pc_xzzz[j] * pb_y[j] + 4.0 * pa_yz[j] * pc_xyzz[j] * pb_z[j] + pa_y[j] * pc_zzzz[j] * pb_xy[j] + 2.0 * pa_y[j] * pc_yzzz[j] * pb_xz[j] + 2.0 * pa_y[j] * pc_xzzz[j] * pb_yz[j] + pa_y[j] * pc_xyzz[j] * pb_zz[j] + pc_yyzz[j] * pa_zz[j] * pb_x[j] + pc_xyzz[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_xyyz[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_yzzz[j] * pa_z[j] * pb_xy[j] + 4.0 * pc_yyzz[j] * pa_z[j] * pb_xz[j] + 4.0 * pc_xyzz[j] * pa_z[j] * pb_yz[j] + 2.0 * pc_xyyz[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_yzzz[j] * pb_xyz[j] + pc_yyzz[j] * pb_xzz[j] + pc_xyzz[j] * pb_yzz[j]);

                t_yzz_xyzz[j] += fl_s_0_0_5 * (-0.75 * pc_xyy[j] * fl2_fx - 1.5 * fl2_fx * pc_xzz[j] - 3.0 * pa_y[j] * pc_xyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yyzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_z[j] - 0.5 * fl1_fx * pc_xzzzz[j] - fl1_fx * pa_z[j] * pc_xzzz[j] - 0.5 * fl1_fx * pc_zzzz[j] * pb_x[j] - fl1_fx * pc_xzzz[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_xyzzz[j] - pa_y[j] * pc_yzzzz[j] * pb_x[j] - pa_y[j] * pc_xzzzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_xyzzz[j] * pb_z[j] - pc_xyyzz[j] * pa_zz[j] - 2.0 * pc_yyzzz[j] * pa_z[j] * pb_x[j] - 2.0 * pc_xyzzz[j] * pa_z[j] * pb_y[j] - 4.0 * pc_xyyzz[j] * pa_z[j] * pb_z[j] - pc_yzzzz[j] * pb_xy[j] - 2.0 * pc_yyzzz[j] * pb_xz[j] - 2.0 * pc_xyzzz[j] * pb_yz[j] - pc_xyyzz[j] * pb_zz[j]);

                t_yzz_xyzz[j] += fl_s_0_0_6 * (3.0 * pc_xyyzz[j] * fl1_fx + 0.5 * fl1_fx * pc_xzzzz[j] + pa_y[j] * pc_xyzzzz[j] + 2.0 * pc_xyyzzz[j] * pa_z[j] + pc_yyzzzz[j] * pb_x[j] + pc_xyzzzz[j] * pb_y[j] + 2.0 * pc_xyyzzz[j] * pb_z[j]);

                t_yzz_xyzz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_129_132(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (129,132)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(19 * idx + 7);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyy = pcDistances.data(119 * idx + 49);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yyyyyz = pcDistances.data(119 * idx + 77);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            auto pc_yyyyyzz = pcDistances.data(119 * idx + 113);

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzz_xzzz = primBuffer.data(150 * idx + 129);

            auto t_yzz_yyyy = primBuffer.data(150 * idx + 130);

            auto t_yzz_yyyz = primBuffer.data(150 * idx + 131);

            // Batch of Integrals (129,132)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, \
                                     pb_yyy, pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xy, pc_xyz, \
                                     pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, \
                                     pc_xzzzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyy, pc_yyyyyz, pc_yyyyyzz, pc_yyyyz, \
                                     pc_yyyyzz, pc_yyyyzzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, \
                                     pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, \
                                     s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_yzz_xzzz, \
                                     t_yzz_yyyy, t_yzz_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzz_xzzz[j] = fl_s_0_0_0 * (1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 1.5 * pa_yzz[j] * pb_xz[j] * fl1_fx + 3.0 * pa_yz[j] * fl1_fx * pb_xzz[j] + 0.5 * pa_y[j] * fl1_fx * pb_xzzz[j] + pa_yzz[j] * pb_xzzz[j]);

                t_yzz_xzzz[j] += fl_s_0_0_1 * (-3.0 * pa_yz[j] * fl2_fx * pb_x[j] - 1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_xz[j] - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 2.25 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yzz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_yzz[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_yzz[j] * pc_x[j] * pb_z[j] * fl1_fx - 9.0 * pa_yz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 3.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 3.0 * pa_yz[j] * fl1_fx * pb_xzz[j] - 4.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_y[j] * pa_zz[j] * pb_xz[j] * fl1_fx - 3.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_xzz[j] - 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_zzz[j] - 0.5 * pa_y[j] * fl1_fx * pb_xzzz[j] - 0.5 * pc_y[j] * fl1_fx * pb_xzzz[j] - 3.0 * pa_yzz[j] * pb_xzz[j] * pc_z[j] - pa_yzz[j] * pc_x[j] * pb_zzz[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_xzzz[j] - pc_y[j] * pa_zz[j] * pb_xzzz[j]);

                t_yzz_xzzz[j] += fl_s_0_0_2 * (3.0 * pa_yz[j] * fl2_fx * pc_x[j] + 1.5 * pa_yz[j] * fl2_fx * pb_x[j] + 7.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] + 3.75 * pa_y[j] * pc_xz[j] * fl2_fx + 4.5 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_xz[j] + 3.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 4.5 * pc_y[j] * fl2_fx * pb_xz[j] + 1.5 * pa_yzz[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_xz[j] * fl1_fx + 9.0 * pa_yz[j] * pc_z[j] * pb_xz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 9.0 * pa_yz[j] * pc_xz[j] * pb_z[j] * fl1_fx + 3.0 * pa_yz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 9.0 * pa_y[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 4.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_y[j] * pa_zz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xy[j] * pa_zz[j] * pb_z[j] * fl1_fx + 9.0 * pc_yz[j] * pa_z[j] * pb_xz[j] * fl1_fx + 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 3.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_xzz[j] + 4.5 * pc_yz[j] * fl1_fx * pb_xzz[j] + 0.5 * pa_y[j] * fl1_fx * pc_x[j] * pb_zzz[j] + 0.5 * pc_xy[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_y[j] * fl1_fx * pb_xzzz[j] + 3.0 * pa_yzz[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_yzz[j] * pc_xz[j] * pb_zz[j] + 6.0 * pa_yz[j] * pc_zz[j] * pb_xzz[j] + 2.0 * pa_yz[j] * pc_xz[j] * pb_zzz[j] + pa_y[j] * pc_zz[j] * pb_xzzz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_xzz[j] + pc_xy[j] * pa_zz[j] * pb_zzz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_xzzz[j]);

                t_yzz_xzzz[j] += fl_s_0_0_3 * (-1.5 * pa_yz[j] * fl2_fx * pc_x[j] - 7.5 * pa_y[j] * pc_xz[j] * fl2_fx - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_x[j] - 2.25 * pa_y[j] * fl2_fx * pc_x[j] * pb_z[j] - 3.0 * pc_xy[j] * pa_z[j] * fl2_fx - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_x[j] - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 3.75 * pc_xyz[j] * fl2_fx - 4.5 * pc_xy[j] * fl2_fx * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_xz[j] - 1.5 * pa_yzz[j] * pc_xz[j] * fl1_fx - 6.0 * pa_yz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 9.0 * pa_yz[j] * pc_xz[j] * pb_z[j] * fl1_fx - 6.0 * pa_yz[j] * pc_xzz[j] * fl1_fx - 9.0 * pa_y[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 5.0 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 9.0 * pa_y[j] * pc_xzz[j] * pb_z[j] * fl1_fx - 4.5 * pa_y[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yz[j] * pa_zz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xy[j] * pa_zz[j] * pb_z[j] * fl1_fx - 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx - 9.0 * pc_yz[j] * pa_z[j] * pb_xz[j] * fl1_fx - 6.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx - 3.0 * pc_xy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 9.0 * pc_yzz[j] * pb_xz[j] * fl1_fx - 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_yz[j] * fl1_fx * pb_xzz[j] - 0.5 * pc_xy[j] * fl1_fx * pb_zzz[j] - pa_yzz[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_yzz[j] * pc_xzz[j] * pb_z[j] - 6.0 * pa_yz[j] * pc_zzz[j] * pb_xz[j] - 6.0 * pa_yz[j] * pc_xzz[j] * pb_zz[j] - 3.0 * pa_y[j] * pc_zzz[j] * pb_xzz[j] - pa_y[j] * pc_xzz[j] * pb_zzz[j] - 3.0 * pc_yzz[j] * pa_zz[j] * pb_xz[j] - 3.0 * pc_xyz[j] * pa_zz[j] * pb_zz[j] - 6.0 * pc_yzz[j] * pa_z[j] * pb_xzz[j] - 2.0 * pc_xyz[j] * pa_z[j] * pb_zzz[j] - pc_yzz[j] * pb_xzzz[j]);

                t_yzz_xzzz[j] += fl_s_0_0_4 * (3.75 * pa_y[j] * pc_xz[j] * fl2_fx + 1.5 * pc_xy[j] * pa_z[j] * fl2_fx + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xy[j] * fl2_fx * pb_z[j] + 6.0 * pa_yz[j] * pc_xzz[j] * fl1_fx + 5.0 * pa_y[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 9.0 * pa_y[j] * pc_xzz[j] * pb_z[j] * fl1_fx + 5.0 * pa_y[j] * pc_xzzz[j] * fl1_fx + 1.5 * pc_xyz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_yzz[j] * pa_z[j] * pb_x[j] * fl1_fx + 9.0 * pc_xyz[j] * pa_z[j] * pb_z[j] * fl1_fx + 6.0 * pc_xyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yzz[j] * pb_xz[j] * fl1_fx + 5.0 * pc_yzzz[j] * pb_x[j] * fl1_fx + 9.0 * pc_xyzz[j] * pb_z[j] * fl1_fx + 4.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_yzz[j] * pc_xzzz[j] + 2.0 * pa_yz[j] * pc_zzzz[j] * pb_x[j] + 6.0 * pa_yz[j] * pc_xzzz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_zzzz[j] * pb_xz[j] + 3.0 * pa_y[j] * pc_xzzz[j] * pb_zz[j] + pc_yzzz[j] * pa_zz[j] * pb_x[j] + 3.0 * pc_xyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_yzzz[j] * pa_z[j] * pb_xz[j] + 6.0 * pc_xyzz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_yzzz[j] * pb_xzz[j] + pc_xyzz[j] * pb_zzz[j]);

                t_yzz_xzzz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 5.0 * pa_y[j] * pc_xzzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_yzzz[j] * pb_x[j] * fl1_fx - 9.0 * pc_xyzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_xzzzz[j] - pa_y[j] * pc_zzzzz[j] * pb_x[j] - 3.0 * pa_y[j] * pc_xzzzz[j] * pb_z[j] - pc_xyzzz[j] * pa_zz[j] - 2.0 * pc_yzzzz[j] * pa_z[j] * pb_x[j] - 6.0 * pc_xyzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yzzzz[j] * pb_xz[j] - 3.0 * pc_xyzzz[j] * pb_zz[j]);

                t_yzz_xzzz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + pa_y[j] * pc_xzzzzz[j] + 2.0 * pc_xyzzzz[j] * pa_z[j] + pc_yzzzzz[j] * pb_x[j] + 3.0 * pc_xyzzzz[j] * pb_z[j]);

                t_yzz_xzzz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];

                t_yzz_yyyy[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 1.5 * fl3_fx * pb_y[j] + 0.75 * pa_yzz[j] * fl2_fx + 3.0 * fl2_fx * pa_zz[j] * pb_y[j] + 1.5 * pa_y[j] * fl2_fx * pb_yy[j] + fl2_fx * pb_yyy[j] + 3.0 * pa_yzz[j] * pb_yy[j] * fl1_fx + 2.0 * fl1_fx * pa_zz[j] * pb_yyy[j] + 0.5 * pa_y[j] * fl1_fx * pb_yyyy[j] + pa_yzz[j] * pb_yyyy[j]);

                t_yzz_yyyy[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 4.5 * fl3_fx * pb_y[j] - 1.5 * pa_yzz[j] * fl2_fx - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 3.75 * pc_y[j] * pa_zz[j] * fl2_fx - 6.0 * fl2_fx * pa_zz[j] * pb_y[j] - 6.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pb_yy[j] - 3.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 4.5 * pc_y[j] * fl2_fx * pb_yy[j] - 2.0 * fl2_fx * pb_yyy[j] - 3.0 * pa_yzz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_yzz[j] * pb_y[j] * pc_y[j] * fl1_fx - 6.0 * pa_yz[j] * pc_z[j] * pb_yy[j] * fl1_fx - 9.0 * pc_y[j] * pa_zz[j] * pb_yy[j] * fl1_fx - 4.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] - 2.0 * fl1_fx * pa_zz[j] * pb_yyy[j] - 2.0 * pa_y[j] * fl1_fx * pb_yyy[j] * pc_y[j] - 0.5 * pa_y[j] * fl1_fx * pb_yyyy[j] - 0.5 * pc_y[j] * fl1_fx * pb_yyyy[j] - 4.0 * pa_yzz[j] * pb_yyy[j] * pc_y[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_yyyy[j] - pc_y[j] * pa_zz[j] * pb_yyyy[j]);

                t_yzz_yyyy[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 4.5 * fl3_fx * pb_y[j] + 0.75 * pa_yzz[j] * fl2_fx + 3.0 * pa_yz[j] * pc_z[j] * fl2_fx + 0.75 * pa_y[j] * pc_zz[j] * fl2_fx + 7.5 * pc_y[j] * pa_zz[j] * fl2_fx + 7.5 * pc_yz[j] * pa_z[j] * fl2_fx + 12.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 3.0 * fl2_fx * pc_zz[j] * pb_y[j] + 3.0 * fl2_fx * pa_zz[j] * pb_y[j] + 6.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] + 1.5 * pa_y[j] * fl2_fx * pc_yy[j] + 1.5 * pa_y[j] * fl2_fx * pb_yy[j] + 9.0 * pc_y[j] * fl2_fx * pb_yy[j] + 6.0 * pc_yy[j] * fl2_fx * pb_y[j] + fl2_fx * pb_yyy[j] + 6.0 * pa_yzz[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_yy[j] * fl1_fx + 6.0 * pa_yz[j] * pc_z[j] * pb_yy[j] * fl1_fx + 12.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_zz[j] * pb_yy[j] * fl1_fx + 9.0 * pc_y[j] * pa_zz[j] * pb_yy[j] * fl1_fx + 12.0 * pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 18.0 * pc_yz[j] * pa_z[j] * pb_yy[j] * fl1_fx + 2.0 * fl1_fx * pc_zz[j] * pb_yyy[j] + 4.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_yyy[j] + 3.0 * pa_y[j] * fl1_fx * pb_yy[j] * pc_yy[j] + 2.0 * pa_y[j] * fl1_fx * pb_yyy[j] * pc_y[j] + 2.0 * pc_yy[j] * fl1_fx * pb_yyy[j] + 0.5 * pc_y[j] * fl1_fx * pb_yyyy[j] + 6.0 * pa_yzz[j] * pb_yy[j] * pc_yy[j] + 8.0 * pa_yz[j] * pc_yz[j] * pb_yyy[j] + pa_y[j] * pc_zz[j] * pb_yyyy[j] + 4.0 * pc_yy[j] * pa_zz[j] * pb_yyy[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_yyyy[j]);

                t_yzz_yyyy[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 1.5 * fl3_fx * pb_y[j] - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 1.5 * pa_y[j] * pc_zz[j] * fl2_fx - 3.75 * pc_y[j] * pa_zz[j] * fl2_fx - 15.0 * pc_yz[j] * pa_z[j] * fl2_fx - 3.75 * pc_yzz[j] * fl2_fx - 6.0 * fl2_fx * pc_zz[j] * pb_y[j] - 6.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 3.0 * pa_y[j] * fl2_fx * pc_yy[j] - 3.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 12.0 * pc_yy[j] * fl2_fx * pb_y[j] - 2.5 * pc_yyy[j] * fl2_fx - 4.5 * pc_y[j] * fl2_fx * pb_yy[j] - 3.0 * pa_yzz[j] * pc_yy[j] * fl1_fx - 12.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_y[j] * pc_zz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 12.0 * pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 5.0 * pc_yyy[j] * pa_zz[j] * fl1_fx - 18.0 * pc_yz[j] * pa_z[j] * pb_yy[j] * fl1_fx - 24.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_yzz[j] * pb_yy[j] * fl1_fx - 2.0 * fl1_fx * pc_zz[j] * pb_yyy[j] - 2.0 * pa_y[j] * fl1_fx * pb_y[j] * pc_yyy[j] - 3.0 * pa_y[j] * fl1_fx * pb_yy[j] * pc_yy[j] - 3.0 * pc_yyy[j] * fl1_fx * pb_yy[j] - 2.0 * pc_yy[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_yzz[j] * pb_y[j] * pc_yyy[j] - 12.0 * pa_yz[j] * pc_yyz[j] * pb_yy[j] - 4.0 * pa_y[j] * pc_yzz[j] * pb_yyy[j] - 6.0 * pc_yyy[j] * pa_zz[j] * pb_yy[j] - 8.0 * pc_yyz[j] * pa_z[j] * pb_yyy[j] - pc_yzz[j] * pb_yyyy[j]);

                t_yzz_yyyy[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 0.75 * pa_y[j] * pc_zz[j] * fl2_fx + 7.5 * pc_yz[j] * pa_z[j] * fl2_fx + 7.5 * pc_yzz[j] * fl2_fx + 3.0 * fl2_fx * pc_zz[j] * pb_y[j] + 1.5 * pa_y[j] * fl2_fx * pc_yy[j] + 5.0 * pc_yyy[j] * fl2_fx + 6.0 * pc_yy[j] * fl2_fx * pb_y[j] + 6.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 5.0 * pc_yyy[j] * pa_zz[j] * fl1_fx + 24.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 10.0 * pc_yyyz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yzz[j] * pb_yy[j] * fl1_fx + 12.0 * pc_yyzz[j] * pb_y[j] * fl1_fx + 0.5 * pa_y[j] * fl1_fx * pc_yyyy[j] + 2.0 * pa_y[j] * fl1_fx * pb_y[j] * pc_yyy[j] + 2.0 * pc_yyyy[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyy[j] * fl1_fx * pb_yy[j] + pa_yzz[j] * pc_yyyy[j] + 8.0 * pa_yz[j] * pc_yyyz[j] * pb_y[j] + 6.0 * pa_y[j] * pc_yyzz[j] * pb_yy[j] + 4.0 * pc_yyyy[j] * pa_zz[j] * pb_y[j] + 12.0 * pc_yyyz[j] * pa_z[j] * pb_yy[j] + 4.0 * pc_yyzz[j] * pb_yyy[j]);

                t_yzz_yyyy[j] += fl_s_0_0_5 * (-3.75 * pc_yzz[j] * fl2_fx - 2.5 * pc_yyy[j] * fl2_fx - 3.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 10.0 * pc_yyyz[j] * pa_z[j] * fl1_fx - 12.0 * pc_yyzz[j] * pb_y[j] * fl1_fx - 5.0 * pc_yyyzz[j] * fl1_fx - 0.5 * pa_y[j] * fl1_fx * pc_yyyy[j] - 0.5 * pc_yyyyy[j] * fl1_fx - 2.0 * pc_yyyy[j] * fl1_fx * pb_y[j] - 2.0 * pa_yz[j] * pc_yyyyz[j] - 4.0 * pa_y[j] * pc_yyyzz[j] * pb_y[j] - pc_yyyyy[j] * pa_zz[j] - 8.0 * pc_yyyyz[j] * pa_z[j] * pb_y[j] - 6.0 * pc_yyyzz[j] * pb_yy[j]);

                t_yzz_yyyy[j] += fl_s_0_0_6 * (5.0 * pc_yyyzz[j] * fl1_fx + 0.5 * pc_yyyyy[j] * fl1_fx + pa_y[j] * pc_yyyyzz[j] + 2.0 * pc_yyyyyz[j] * pa_z[j] + 4.0 * pc_yyyyzz[j] * pb_y[j]);

                t_yzz_yyyy[j] += -fl_s_0_0_7 * pc_yyyyyzz[j];

                t_yzz_yyyz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 0.375 * fl3_fx * pb_z[j] + 1.5 * pa_yz[j] * fl2_fx * pb_y[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_yy[j] + 0.75 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pb_yyz[j] + 1.5 * pa_yzz[j] * pb_yz[j] * fl1_fx + pa_yz[j] * fl1_fx * pb_yyy[j] + 1.5 * fl1_fx * pa_zz[j] * pb_yyz[j] + 0.5 * pa_y[j] * fl1_fx * pb_yyyz[j] + pa_yzz[j] * pb_yyyz[j]);

                t_yzz_yyyz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pc_z[j] - 1.125 * fl3_fx * pb_z[j] - 3.0 * pa_yz[j] * fl2_fx * pb_y[j] - 1.5 * pa_yz[j] * fl2_fx * pc_y[j] - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 4.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_yy[j] - 2.25 * fl2_fx * pc_z[j] * pb_yy[j] - 1.5 * pa_y[j] * fl2_fx * pb_yz[j] - 0.75 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pb_yyz[j] - 1.5 * pa_yzz[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_yzz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yzz[j] * pc_y[j] * fl1_fx * pb_z[j] - 3.0 * pa_yz[j] * pc_z[j] * pb_yz[j] * fl1_fx - 3.0 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_y[j] - pa_yz[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyy[j] - 4.5 * pc_y[j] * pa_zz[j] * pb_yz[j] * fl1_fx - pc_y[j] * pa_z[j] * fl1_fx * pb_yyy[j] - 1.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] - 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_yyz[j] - 1.5 * pa_y[j] * fl1_fx * pb_yyz[j] * pc_y[j] - 0.5 * pa_y[j] * fl1_fx * pb_yyyz[j] - 0.5 * pc_y[j] * fl1_fx * pb_yyyz[j] - pa_yzz[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_yzz[j] * pb_yyz[j] * pc_y[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_yyyz[j] - pc_y[j] * pa_zz[j] * pb_yyyz[j]);

                t_yzz_yyyz[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_z[j] + 3.375 * fl3_fx * pc_z[j] + 1.125 * fl3_fx * pb_z[j] + 3.0 * pa_yz[j] * fl2_fx * pc_y[j] + 1.5 * pa_yz[j] * fl2_fx * pb_y[j] + 4.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 9.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] + 3.0 * pc_yy[j] * pa_z[j] * fl2_fx + 6.75 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_yy[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_yy[j] + 1.5 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_yz[j] + 4.5 * pc_y[j] * fl2_fx * pb_yz[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pb_yyz[j] + 1.5 * pa_yzz[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_yzz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_y[j] * fl1_fx * pb_z[j] + 3.0 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 3.0 * pa_yz[j] * pc_z[j] * pb_yz[j] * fl1_fx + 3.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 3.0 * pa_yz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 3.0 * pa_yz[j] * fl1_fx * pb_yy[j] * pc_y[j] + 1.5 * pa_y[j] * pc_zz[j] * pb_yz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyy[j] + 4.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 4.5 * pc_y[j] * pa_zz[j] * pb_yz[j] * fl1_fx + 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] + 9.0 * pc_yz[j] * pa_z[j] * pb_yz[j] * fl1_fx + 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] + pc_y[j] * pa_z[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] + 1.5 * fl1_fx * pc_zz[j] * pb_yyz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_yy[j] * pc_z[j] + 3.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_yyz[j] + 1.5 * pa_y[j] * fl1_fx * pb_yz[j] * pc_yy[j] + 1.5 * pa_y[j] * fl1_fx * pb_yyz[j] * pc_y[j] + 1.5 * pc_yy[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_y[j] * fl1_fx * pb_yyyz[j] + 3.0 * pa_yzz[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_yzz[j] * pb_yz[j] * pc_yy[j] + 2.0 * pa_yz[j] * pc_zz[j] * pb_yyy[j] + 6.0 * pa_yz[j] * pc_yz[j] * pb_yyz[j] + pa_y[j] * pc_zz[j] * pb_yyyz[j] + pc_yz[j] * pa_zz[j] * pb_yyy[j] + 3.0 * pc_yy[j] * pa_zz[j] * pb_yyz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_yyyz[j]);

                t_yzz_yyyz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 0.375 * fl3_fx * pb_z[j] - 1.5 * pa_yz[j] * fl2_fx * pc_y[j] - 4.5 * pa_y[j] * pc_yz[j] * fl2_fx - 2.25 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 6.0 * pc_yy[j] * pa_z[j] * fl2_fx - 4.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 13.5 * pc_yz[j] * fl2_fx * pb_y[j] - 4.5 * pc_yyz[j] * fl2_fx - 3.0 * fl2_fx * pa_z[j] * pc_zz[j] - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * fl2_fx * pc_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 1.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_yy[j] - 0.75 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pc_yy[j] * fl2_fx * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_yz[j] - 1.5 * pa_yzz[j] * pc_yz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yz[j] * fl1_fx * pb_z[j] - pa_yz[j] * fl1_fx * pc_yyy[j] - 3.0 * pa_yz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 1.5 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 1.5 * pa_y[j] * pc_zz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 4.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yyz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yy[j] * pa_zz[j] * fl1_fx * pb_z[j] - 9.0 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_yz[j] * pa_z[j] * pb_yz[j] * fl1_fx - 6.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] - 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yy[j] - 4.5 * pc_yzz[j] * pb_yz[j] * fl1_fx - 4.5 * pc_yyz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_yyy[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_yy[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yy[j] - 1.5 * fl1_fx * pc_zz[j] * pb_yyz[j] - 0.5 * pa_y[j] * fl1_fx * pc_yyy[j] * pb_z[j] - 1.5 * pa_y[j] * fl1_fx * pb_yz[j] * pc_yy[j] - 1.5 * pc_yyy[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yy[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_yzz[j] * pb_y[j] * pc_yyz[j] - pa_yzz[j] * pc_yyy[j] * pb_z[j] - 6.0 * pa_yz[j] * pc_yzz[j] * pb_yy[j] - 6.0 * pa_yz[j] * pc_yyz[j] * pb_yz[j] - pa_y[j] * pc_zzz[j] * pb_yyy[j] - 3.0 * pa_y[j] * pc_yzz[j] * pb_yyz[j] - 3.0 * pc_yyz[j] * pa_zz[j] * pb_yy[j] - 3.0 * pc_yyy[j] * pa_zz[j] * pb_yz[j] - 2.0 * pc_yzz[j] * pa_z[j] * pb_yyy[j] - 6.0 * pc_yyz[j] * pa_z[j] * pb_yyz[j] - pc_yzz[j] * pb_yyyz[j]);

                t_yzz_yyyz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_z[j] + 2.25 * pa_y[j] * pc_yz[j] * fl2_fx + 3.0 * pc_yy[j] * pa_z[j] * fl2_fx + 9.0 * pc_yyz[j] * fl2_fx + 6.75 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_zzz[j] + 1.5 * fl2_fx * pa_z[j] * pc_zz[j] + 0.75 * fl2_fx * pc_zz[j] * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pb_z[j] + 3.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + pa_yz[j] * fl1_fx * pc_yyy[j] + 1.5 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_y[j] * pc_yzzz[j] * fl1_fx + 1.5 * pa_y[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yyz[j] * pa_zz[j] * fl1_fx + 9.0 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_yyz[j] * pa_z[j] * fl1_fx * pb_z[j] + pc_yyyy[j] * pa_z[j] * fl1_fx + 3.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_y[j] + 4.5 * pc_yzzz[j] * pb_y[j] * fl1_fx + 4.5 * pc_yzz[j] * pb_yz[j] * fl1_fx + 3.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 4.5 * pc_yyyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_yyz[j] * fl1_fx * pb_yy[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_yy[j] + 0.5 * pa_y[j] * fl1_fx * pc_yyy[j] * pb_z[j] + 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyy[j] * fl1_fx * pb_yz[j] + pa_yzz[j] * pc_yyyz[j] + 6.0 * pa_yz[j] * pc_yyzz[j] * pb_y[j] + 2.0 * pa_yz[j] * pc_yyyz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_yzzz[j] * pb_yy[j] + 3.0 * pa_y[j] * pc_yyzz[j] * pb_yz[j] + 3.0 * pc_yyyz[j] * pa_zz[j] * pb_y[j] + pc_yyyy[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_yyzz[j] * pa_z[j] * pb_yy[j] + 6.0 * pc_yyyz[j] * pa_z[j] * pb_yz[j] + pc_yzzz[j] * pb_yyy[j] + 3.0 * pc_yyzz[j] * pb_yyz[j]);

                t_yzz_yyyz[j] += fl_s_0_0_5 * (-4.5 * pc_yyz[j] * fl2_fx - 0.75 * fl2_fx * pc_zzz[j] - 1.5 * pa_y[j] * pc_yzzz[j] * fl1_fx - 1.5 * pa_y[j] * pc_yyyz[j] * fl1_fx - 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - pc_yyyy[j] * pa_z[j] * fl1_fx - 4.5 * pc_yzzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yyzzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 1.5 * pc_yyyyz[j] * fl1_fx - 4.5 * pc_yyyz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yyyy[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * pc_yyyzz[j] - 3.0 * pa_y[j] * pc_yyzzz[j] * pb_y[j] - pa_y[j] * pc_yyyzz[j] * pb_z[j] - pc_yyyyz[j] * pa_zz[j] - 6.0 * pc_yyyzz[j] * pa_z[j] * pb_y[j] - 2.0 * pc_yyyyz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yyzzz[j] * pb_yy[j] - 3.0 * pc_yyyzz[j] * pb_yz[j]);

                t_yzz_yyyz[j] += fl_s_0_0_6 * (3.0 * pc_yyzzz[j] * fl1_fx + 1.5 * pc_yyyyz[j] * fl1_fx + pa_y[j] * pc_yyyzzz[j] + 2.0 * pc_yyyyzz[j] * pa_z[j] + 3.0 * pc_yyyzzz[j] * pb_y[j] + pc_yyyyzz[j] * pb_z[j]);

                t_yzz_yyyz[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_132_135(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (132,135)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_y = paDistances.data(19 * idx + 1);

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_yz = paDistances.data(19 * idx + 7);

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_yzz = paDistances.data(19 * idx + 17);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            auto pc_yyzzzzz = pcDistances.data(119 * idx + 116);

            auto pc_yzzzzzz = pcDistances.data(119 * idx + 117);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_yzz_yyzz = primBuffer.data(150 * idx + 132);

            auto t_yzz_yzzz = primBuffer.data(150 * idx + 133);

            auto t_yzz_zzzz = primBuffer.data(150 * idx + 134);

            // Batch of Integrals (132,135)

            #pragma omp simd aligned(fx, pa_y, pa_yz, pa_yzz, pa_z, pa_zz, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, \
                                     pb_yzzz, pb_z, pb_zz, pb_zzz, pb_zzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, \
                                     pc_yyyzzz, pc_yyyzzzz, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yyzzzzz, pc_yz, \
                                     pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_yzzzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, \
                                     pc_zzzzz, pc_zzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, \
                                     s_0_0_7, t_yzz_yyzz, t_yzz_yzzz, t_yzz_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_yzz_yyzz[j] = fl_s_0_0_0 * (0.375 * pa_y[j] * fl3_fx + 0.75 * fl3_fx * pb_y[j] + 0.25 * pa_yzz[j] * fl2_fx + pa_yz[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 0.5 * fl2_fx * pa_zz[j] * pb_y[j] + 2.0 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * pa_y[j] * fl2_fx * pb_zz[j] + 0.5 * fl2_fx * pb_yzz[j] + 0.5 * pa_yzz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_yzz[j] * fl1_fx * pb_zz[j] + 2.0 * pa_yz[j] * fl1_fx * pb_yyz[j] + fl1_fx * pa_zz[j] * pb_yzz[j] + 0.5 * pa_y[j] * fl1_fx * pb_yyzz[j] + pa_yzz[j] * pb_yyzz[j]);

                t_yzz_yyzz[j] += fl_s_0_0_1 * (-1.125 * pa_y[j] * fl3_fx - 1.125 * pc_y[j] * fl3_fx - 2.25 * fl3_fx * pb_y[j] - 0.5 * pa_yzz[j] * fl2_fx - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 2.0 * pa_yz[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_y[j] * fl2_fx * pb_yy[j] - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 3.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - fl2_fx * pa_zz[j] * pb_y[j] - 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 4.0 * fl2_fx * pa_z[j] * pb_yz[j] - 3.0 * fl2_fx * pc_z[j] * pb_yz[j] - 0.5 * pa_y[j] * fl2_fx * pb_zz[j] - 0.75 * pc_y[j] * fl2_fx * pb_zz[j] - fl2_fx * pb_yzz[j] - 0.5 * pa_yzz[j] * pb_yy[j] * fl1_fx - pa_yzz[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_yzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_yzz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_yz[j] * pc_z[j] * pb_yy[j] * fl1_fx - pa_yz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 4.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_y[j] - 2.0 * pa_yz[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyz[j] - 0.5 * pc_y[j] * pa_zz[j] * pb_yy[j] * fl1_fx - 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_zz[j] - 2.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_yyz[j] - 2.0 * fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] - 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] - fl1_fx * pa_zz[j] * pb_yzz[j] - pa_y[j] * fl1_fx * pb_yzz[j] * pc_y[j] - 0.5 * pa_y[j] * fl1_fx * pb_yyzz[j] - 0.5 * pc_y[j] * fl1_fx * pb_yyzz[j] - 2.0 * pa_yzz[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_yzz[j] * pb_yzz[j] * pc_y[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_yyzz[j] - pc_y[j] * pa_zz[j] * pb_yyzz[j]);

                t_yzz_yyzz[j] += fl_s_0_0_2 * (1.125 * pa_y[j] * fl3_fx + 3.375 * pc_y[j] * fl3_fx + 2.25 * fl3_fx * pb_y[j] + 0.25 * pa_yzz[j] * fl2_fx + 3.0 * pa_yz[j] * pc_z[j] * fl2_fx + pa_yz[j] * fl2_fx * pb_z[j] + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 3.0 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] + 0.75 * pa_y[j] * fl2_fx * pc_yy[j] + 3.0 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.75 * pa_y[j] * fl2_fx * pb_yy[j] + 1.5 * pc_y[j] * pa_zz[j] * fl2_fx + 4.5 * pc_yz[j] * pa_z[j] * fl2_fx + 6.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] + 4.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 1.5 * pc_y[j] * fl2_fx * pb_yy[j] + 6.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] + 3.0 * fl2_fx * pc_zz[j] * pb_y[j] + 6.0 * fl2_fx * pc_z[j] * pb_yz[j] + 0.5 * fl2_fx * pa_zz[j] * pb_y[j] + 2.0 * fl2_fx * pa_z[j] * pb_yz[j] + 0.25 * pa_y[j] * fl2_fx * pb_zz[j] + 1.5 * pc_y[j] * fl2_fx * pb_zz[j] + 0.5 * fl2_fx * pb_yzz[j] + pa_yzz[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_yzz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_yzz[j] * fl1_fx * pc_zz[j] + pa_yzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 3.0 * pa_yz[j] * pc_z[j] * pb_yy[j] * fl1_fx + 6.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 2.0 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] + pa_yz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 2.0 * pa_yz[j] * fl1_fx * pc_yy[j] * pb_z[j] + 4.0 * pa_yz[j] * fl1_fx * pb_yz[j] * pc_y[j] + 3.0 * pa_y[j] * pc_zz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 3.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_yyz[j] + 0.5 * pc_y[j] * pa_zz[j] * pb_yy[j] * fl1_fx + pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx + 3.0 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] + 1.5 * pc_y[j] * pa_zz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_yz[j] * pa_z[j] * pb_yy[j] * fl1_fx + 3.0 * pc_yz[j] * pa_z[j] * fl1_fx * pb_zz[j] + 4.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] + 2.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_yyz[j] + 3.0 * pc_yz[j] * fl1_fx * pb_yyz[j] + fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] + 4.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] + fl1_fx * pc_zz[j] * pb_yzz[j] + 2.0 * fl1_fx * pa_zz[j] * pb_yz[j] * pc_z[j] + 2.0 * fl1_fx * pa_z[j] * pc_z[j] * pb_yzz[j] + 0.5 * pa_y[j] * fl1_fx * pc_yy[j] * pb_zz[j] + pa_y[j] * fl1_fx * pb_yzz[j] * pc_y[j] + pc_yy[j] * fl1_fx * pb_yzz[j] + 0.5 * pc_y[j] * fl1_fx * pb_yyzz[j] + pa_yzz[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_yzz[j] * pb_yz[j] * pc_yz[j] + pa_yzz[j] * pc_yy[j] * pb_zz[j] + 4.0 * pa_yz[j] * pc_zz[j] * pb_yyz[j] + 4.0 * pa_yz[j] * pc_yz[j] * pb_yzz[j] + pa_y[j] * pc_zz[j] * pb_yyzz[j] + 2.0 * pc_yz[j] * pa_zz[j] * pb_yyz[j] + 2.0 * pc_yy[j] * pa_zz[j] * pb_yzz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_yyzz[j]);

                t_yzz_yyzz[j] += fl_s_0_0_3 * (-0.375 * pa_y[j] * fl3_fx - 3.375 * pc_y[j] * fl3_fx - 0.75 * fl3_fx * pb_y[j] - 1.5 * pa_yz[j] * pc_z[j] * fl2_fx - 3.0 * pa_y[j] * pc_zz[j] * fl2_fx - 1.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 1.5 * pa_y[j] * fl2_fx * pc_yy[j] - 1.5 * pa_y[j] * fl2_fx * pb_y[j] * pc_y[j] - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 9.0 * pc_yz[j] * pa_z[j] * fl2_fx - 3.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pc_yzz[j] * fl2_fx - 9.0 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_yyy[j] * fl2_fx - 3.0 * pc_yy[j] * fl2_fx * pb_y[j] - 0.75 * pc_y[j] * fl2_fx * pb_yy[j] - 6.0 * fl2_fx * pc_zz[j] * pb_y[j] - 3.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_y[j] - 3.0 * fl2_fx * pc_z[j] * pb_yz[j] - 0.75 * pc_y[j] * fl2_fx * pb_zz[j] - 0.5 * pa_yzz[j] * pc_yy[j] * fl1_fx - 0.5 * pa_yzz[j] * fl1_fx * pc_zz[j] - 6.0 * pa_yz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 3.0 * pa_yz[j] * pc_yyz[j] * fl1_fx - pa_yz[j] * pc_zzz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 2.0 * pa_yz[j] * fl1_fx * pc_yy[j] * pb_z[j] - 3.0 * pa_y[j] * pc_zz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx - pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 0.5 * pa_y[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 3.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 6.0 * pa_y[j] * pc_yz[j] * fl1_fx * pb_yz[j] - pc_yy[j] * pa_zz[j] * pb_y[j] * fl1_fx - 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx - 1.5 * pc_yzz[j] * pa_zz[j] * fl1_fx - 3.0 * pc_yz[j] * pa_zz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yz[j] * pa_z[j] * pb_yy[j] * fl1_fx - 6.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx - 6.0 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] - 3.0 * pc_yz[j] * pa_z[j] * fl1_fx * pb_zz[j] - 2.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] - 4.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yzz[j] * pb_yy[j] * fl1_fx - 1.5 * pc_yzz[j] * fl1_fx * pb_zz[j] - 6.0 * pc_yyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_yyz[j] - 2.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] - 2.0 * fl1_fx * pc_zzz[j] * pb_yz[j] - fl1_fx * pa_zz[j] * pb_y[j] * pc_zz[j] - 4.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_yz[j] - fl1_fx * pc_zz[j] * pb_yzz[j] - 0.5 * pa_y[j] * fl1_fx * pc_yy[j] * pb_zz[j] - 0.5 * pc_yyy[j] * fl1_fx * pb_zz[j] - pc_yy[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_yzz[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_yzz[j] * pc_yyz[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_zzz[j] * pb_yy[j] - 8.0 * pa_yz[j] * pc_yzz[j] * pb_yz[j] - 2.0 * pa_yz[j] * pc_yyz[j] * pb_zz[j] - 2.0 * pa_y[j] * pc_zzz[j] * pb_yyz[j] - 2.0 * pa_y[j] * pc_yzz[j] * pb_yzz[j] - pc_yzz[j] * pa_zz[j] * pb_yy[j] - 4.0 * pc_yyz[j] * pa_zz[j] * pb_yz[j] - pc_yyy[j] * pa_zz[j] * pb_zz[j] - 4.0 * pc_yzz[j] * pa_z[j] * pb_yyz[j] - 4.0 * pc_yyz[j] * pa_z[j] * pb_yzz[j] - pc_yzz[j] * pb_yyzz[j]);

                t_yzz_yyzz[j] += fl_s_0_0_4 * (1.125 * pc_y[j] * fl3_fx + 1.5 * pa_y[j] * pc_zz[j] * fl2_fx + 0.75 * pa_y[j] * fl2_fx * pc_yy[j] + 4.5 * pc_yz[j] * pa_z[j] * fl2_fx + 9.0 * pc_yzz[j] * fl2_fx + 4.5 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_yyy[j] * fl2_fx + 1.5 * pc_yy[j] * fl2_fx * pb_y[j] + 3.0 * fl2_fx * pc_zz[j] * pb_y[j] + 3.0 * pa_yz[j] * pc_yyz[j] * fl1_fx + pa_yz[j] * pc_zzz[j] * fl1_fx + 6.0 * pa_y[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 3.0 * pa_y[j] * pc_yyzz[j] * fl1_fx + 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx + pa_y[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 3.0 * pa_y[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 0.5 * pc_yyy[j] * pa_zz[j] * fl1_fx + 1.5 * pc_yzz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_yyz[j] * pa_z[j] * pb_y[j] * fl1_fx + 3.0 * pc_yyyz[j] * pa_z[j] * fl1_fx + 3.0 * pc_yzzz[j] * pa_z[j] * fl1_fx + 6.0 * pc_yzz[j] * pa_z[j] * fl1_fx * pb_z[j] + 2.0 * pc_yyy[j] * pa_z[j] * fl1_fx * pb_z[j] + 3.0 * pc_yzz[j] * pb_yy[j] * fl1_fx + 6.0 * pc_yyzz[j] * pb_y[j] * fl1_fx + 3.0 * pc_yzzz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yzz[j] * fl1_fx * pb_zz[j] + 3.0 * pc_yyyz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yyz[j] * fl1_fx * pb_yz[j] + fl1_fx * pc_zzzz[j] * pb_y[j] + 2.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_y[j] + 2.0 * fl1_fx * pc_zzz[j] * pb_yz[j] + 0.5 * pc_yyy[j] * fl1_fx * pb_zz[j] + pa_yzz[j] * pc_yyzz[j] + 4.0 * pa_yz[j] * pc_yzzz[j] * pb_y[j] + 4.0 * pa_yz[j] * pc_yyzz[j] * pb_z[j] + pa_y[j] * pc_zzzz[j] * pb_yy[j] + 4.0 * pa_y[j] * pc_yzzz[j] * pb_yz[j] + pa_y[j] * pc_yyzz[j] * pb_zz[j] + 2.0 * pc_yyzz[j] * pa_zz[j] * pb_y[j] + 2.0 * pc_yyyz[j] * pa_zz[j] * pb_z[j] + 2.0 * pc_yzzz[j] * pa_z[j] * pb_yy[j] + 8.0 * pc_yyzz[j] * pa_z[j] * pb_yz[j] + 2.0 * pc_yyyz[j] * pa_z[j] * pb_zz[j] + 2.0 * pc_yzzz[j] * pb_yyz[j] + 2.0 * pc_yyzz[j] * pb_yzz[j]);

                t_yzz_yyzz[j] += fl_s_0_0_5 * (-4.5 * pc_yzz[j] * fl2_fx - 0.75 * pc_yyy[j] * fl2_fx - 3.0 * pa_y[j] * pc_yyzz[j] * fl1_fx - 0.5 * pa_y[j] * pc_zzzz[j] * fl1_fx - 3.0 * pc_yyyz[j] * pa_z[j] * fl1_fx - 3.0 * pc_yzzz[j] * pa_z[j] * fl1_fx - 6.0 * pc_yyzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yyyzz[j] * fl1_fx - 1.5 * pc_yzzzz[j] * fl1_fx - 3.0 * pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yyyz[j] * fl1_fx * pb_z[j] - fl1_fx * pc_zzzz[j] * pb_y[j] - 2.0 * pa_yz[j] * pc_yyzzz[j] - 2.0 * pa_y[j] * pc_yzzzz[j] * pb_y[j] - 2.0 * pa_y[j] * pc_yyzzz[j] * pb_z[j] - pc_yyyzz[j] * pa_zz[j] - 4.0 * pc_yyzzz[j] * pa_z[j] * pb_y[j] - 4.0 * pc_yyyzz[j] * pa_z[j] * pb_z[j] - pc_yzzzz[j] * pb_yy[j] - 4.0 * pc_yyzzz[j] * pb_yz[j] - pc_yyyzz[j] * pb_zz[j]);

                t_yzz_yyzz[j] += fl_s_0_0_6 * (3.0 * pc_yyyzz[j] * fl1_fx + 1.5 * pc_yzzzz[j] * fl1_fx + pa_y[j] * pc_yyzzzz[j] + 2.0 * pc_yyyzzz[j] * pa_z[j] + 2.0 * pc_yyzzzz[j] * pb_y[j] + 2.0 * pc_yyyzzz[j] * pb_z[j]);

                t_yzz_yyzz[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];

                t_yzz_yzzz[j] = fl_s_0_0_0 * (0.75 * fl3_fx * pa_z[j] + 1.125 * fl3_fx * pb_z[j] + 1.5 * pa_yz[j] * fl2_fx * pb_y[j] + 2.25 * pa_y[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_yzz[j] * pb_yz[j] * fl1_fx + 3.0 * pa_yz[j] * fl1_fx * pb_yzz[j] + 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] + 0.5 * pa_y[j] * fl1_fx * pb_yzzz[j] + pa_yzz[j] * pb_yzzz[j]);

                t_yzz_yzzz[j] += fl_s_0_0_1 * (-2.25 * fl3_fx * pa_z[j] - 1.875 * fl3_fx * pc_z[j] - 3.375 * fl3_fx * pb_z[j] - 3.0 * pa_yz[j] * fl2_fx * pb_y[j] - 1.5 * pa_yz[j] * fl2_fx * pc_y[j] - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pa_y[j] * fl2_fx * pb_yz[j] - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 2.25 * pc_y[j] * fl2_fx * pb_yz[j] - 1.5 * fl2_fx * pa_zz[j] * pb_z[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 3.0 * fl2_fx * pa_z[j] * pb_zz[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 0.5 * fl2_fx * pb_zzz[j] - 1.5 * pa_yzz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_yzz[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_yzz[j] * pc_y[j] * pb_z[j] * fl1_fx - 9.0 * pa_yz[j] * pc_z[j] * pb_yz[j] * fl1_fx - 3.0 * pa_yz[j] * fl1_fx * pc_y[j] * pb_zz[j] - 3.0 * pa_yz[j] * fl1_fx * pb_yzz[j] - 4.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_y[j] * pa_zz[j] * pb_yz[j] * fl1_fx - 3.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_yzz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] - fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] - 0.5 * fl1_fx * pa_zz[j] * pb_zzz[j] - 0.5 * pa_y[j] * fl1_fx * pc_y[j] * pb_zzz[j] - 0.5 * pa_y[j] * fl1_fx * pb_yzzz[j] - 0.5 * pc_y[j] * fl1_fx * pb_yzzz[j] - 3.0 * pa_yzz[j] * pb_yzz[j] * pc_z[j] - pa_yzz[j] * pc_y[j] * pb_zzz[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_yzzz[j] - pc_y[j] * pa_zz[j] * pb_yzzz[j]);

                t_yzz_yzzz[j] += fl_s_0_0_2 * (2.25 * fl3_fx * pa_z[j] + 5.625 * fl3_fx * pc_z[j] + 3.375 * fl3_fx * pb_z[j] + 3.0 * pa_yz[j] * fl2_fx * pc_y[j] + 1.5 * pa_yz[j] * fl2_fx * pb_y[j] + 7.5 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] + 3.75 * pa_y[j] * pc_yz[j] * fl2_fx + 4.5 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_y[j] * fl2_fx * pb_yz[j] + 3.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_y[j] + 2.25 * pc_yy[j] * fl2_fx * pb_z[j] + 4.5 * pc_y[j] * fl2_fx * pb_yz[j] + 1.5 * fl2_fx * pa_zz[j] * pc_z[j] + 9.0 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 4.5 * fl2_fx * pc_z[j] * pb_zz[j] + 0.75 * fl2_fx * pa_zz[j] * pb_z[j] + 1.5 * fl2_fx * pa_z[j] * pb_zz[j] + 0.25 * fl2_fx * pb_zzz[j] + 1.5 * pa_yzz[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_yzz[j] * pc_yz[j] * fl1_fx + 9.0 * pa_yz[j] * pc_z[j] * pb_yz[j] * fl1_fx + 6.0 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 9.0 * pa_yz[j] * pc_yz[j] * pb_z[j] * fl1_fx + 3.0 * pa_yz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 9.0 * pa_y[j] * pc_zz[j] * pb_yz[j] * fl1_fx + 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 4.5 * pa_y[j] * pc_z[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_y[j] * pa_zz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx + 1.5 * pc_yy[j] * pa_zz[j] * pb_z[j] * fl1_fx + 9.0 * pc_yz[j] * pa_z[j] * pb_yz[j] * fl1_fx + 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] + 3.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_yzz[j] + 4.5 * pc_yz[j] * fl1_fx * pb_yzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] + 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] + 1.5 * fl1_fx * pa_zz[j] * pb_zz[j] * pc_z[j] + fl1_fx * pa_z[j] * pc_z[j] * pb_zzz[j] + 0.5 * pa_y[j] * fl1_fx * pc_y[j] * pb_zzz[j] + 0.5 * pc_yy[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_y[j] * fl1_fx * pb_yzzz[j] + 3.0 * pa_yzz[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_yzz[j] * pc_yz[j] * pb_zz[j] + 6.0 * pa_yz[j] * pc_zz[j] * pb_yzz[j] + 2.0 * pa_yz[j] * pc_yz[j] * pb_zzz[j] + pa_y[j] * pc_zz[j] * pb_yzzz[j] + 3.0 * pc_yz[j] * pa_zz[j] * pb_yzz[j] + pc_yy[j] * pa_zz[j] * pb_zzz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_yzzz[j]);

                t_yzz_yzzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_z[j] - 0.75 * fl3_fx * pa_z[j] - 1.125 * fl3_fx * pb_z[j] - 1.5 * pa_yz[j] * fl2_fx * pc_y[j] - 7.5 * pa_y[j] * pc_yz[j] * fl2_fx - 3.75 * pa_y[j] * pc_z[j] * fl2_fx * pb_y[j] - 2.25 * pa_y[j] * fl2_fx * pc_y[j] * pb_z[j] - 3.0 * pc_yy[j] * pa_z[j] * fl2_fx - 1.5 * pc_y[j] * pa_z[j] * fl2_fx * pb_y[j] - 7.5 * pc_yz[j] * fl2_fx * pb_y[j] - 3.75 * pc_yyz[j] * fl2_fx - 4.5 * pc_yy[j] * fl2_fx * pb_z[j] - 2.25 * pc_y[j] * fl2_fx * pb_yz[j] - 6.0 * fl2_fx * pa_z[j] * pc_zz[j] - 9.0 * fl2_fx * pc_zz[j] * pb_z[j] - 2.5 * fl2_fx * pc_zzz[j] - 0.75 * fl2_fx * pa_zz[j] * pc_z[j] - 4.5 * fl2_fx * pa_z[j] * pc_z[j] * pb_z[j] - 2.25 * fl2_fx * pc_z[j] * pb_zz[j] - 1.5 * pa_yzz[j] * pc_yz[j] * fl1_fx - 6.0 * pa_yz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 9.0 * pa_yz[j] * pc_yz[j] * pb_z[j] * fl1_fx - 6.0 * pa_yz[j] * pc_yzz[j] * fl1_fx - 9.0 * pa_y[j] * pc_zz[j] * pb_yz[j] * fl1_fx - 5.0 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 9.0 * pa_y[j] * pc_yzz[j] * pb_z[j] * fl1_fx - 4.5 * pa_y[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yz[j] * pa_zz[j] * pb_y[j] * fl1_fx - 1.5 * pc_yy[j] * pa_zz[j] * pb_z[j] * fl1_fx - 1.5 * pc_yyz[j] * pa_zz[j] * fl1_fx - 9.0 * pc_yz[j] * pa_z[j] * pb_yz[j] * fl1_fx - 6.0 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx - 9.0 * pc_yyz[j] * pa_z[j] * pb_z[j] * fl1_fx - 3.0 * pc_yy[j] * pa_z[j] * fl1_fx * pb_zz[j] - 9.0 * pc_yzz[j] * pb_yz[j] * fl1_fx - 4.5 * pc_yyz[j] * fl1_fx * pb_zz[j] - 4.5 * pc_yz[j] * fl1_fx * pb_yzz[j] - 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] - 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] - 1.5 * fl1_fx * pa_zz[j] * pb_z[j] * pc_zz[j] - 3.0 * fl1_fx * pa_z[j] * pc_zz[j] * pb_zz[j] - 0.5 * fl1_fx * pc_zz[j] * pb_zzz[j] - 0.5 * pc_yy[j] * fl1_fx * pb_zzz[j] - pa_yzz[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_yzz[j] * pc_yzz[j] * pb_z[j] - 6.0 * pa_yz[j] * pc_zzz[j] * pb_yz[j] - 6.0 * pa_yz[j] * pc_yzz[j] * pb_zz[j] - 3.0 * pa_y[j] * pc_zzz[j] * pb_yzz[j] - pa_y[j] * pc_yzz[j] * pb_zzz[j] - 3.0 * pc_yzz[j] * pa_zz[j] * pb_yz[j] - 3.0 * pc_yyz[j] * pa_zz[j] * pb_zz[j] - 6.0 * pc_yzz[j] * pa_z[j] * pb_yzz[j] - 2.0 * pc_yyz[j] * pa_z[j] * pb_zzz[j] - pc_yzz[j] * pb_yzzz[j]);

                t_yzz_yzzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_z[j] + 3.75 * pa_y[j] * pc_yz[j] * fl2_fx + 1.5 * pc_yy[j] * pa_z[j] * fl2_fx + 7.5 * pc_yyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_y[j] + 2.25 * pc_yy[j] * fl2_fx * pb_z[j] + 5.0 * fl2_fx * pc_zzz[j] + 3.0 * fl2_fx * pa_z[j] * pc_zz[j] + 4.5 * fl2_fx * pc_zz[j] * pb_z[j] + 6.0 * pa_yz[j] * pc_yzz[j] * fl1_fx + 5.0 * pa_y[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 9.0 * pa_y[j] * pc_yzz[j] * pb_z[j] * fl1_fx + 5.0 * pa_y[j] * pc_yzzz[j] * fl1_fx + 1.5 * pc_yyz[j] * pa_zz[j] * fl1_fx + 6.0 * pc_yzz[j] * pa_z[j] * pb_y[j] * fl1_fx + 9.0 * pc_yyz[j] * pa_z[j] * pb_z[j] * fl1_fx + 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx + 9.0 * pc_yzz[j] * pb_yz[j] * fl1_fx + 5.0 * pc_yzzz[j] * pb_y[j] * fl1_fx + 9.0 * pc_yyzz[j] * pb_z[j] * fl1_fx + 4.5 * pc_yyz[j] * fl1_fx * pb_zz[j] + fl1_fx * pa_z[j] * pc_zzzz[j] + 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] + 0.5 * fl1_fx * pa_zz[j] * pc_zzz[j] + 3.0 * fl1_fx * pa_z[j] * pc_zzz[j] * pb_z[j] + 1.5 * fl1_fx * pc_zzz[j] * pb_zz[j] + pa_yzz[j] * pc_yzzz[j] + 2.0 * pa_yz[j] * pc_zzzz[j] * pb_y[j] + 6.0 * pa_yz[j] * pc_yzzz[j] * pb_z[j] + 3.0 * pa_y[j] * pc_zzzz[j] * pb_yz[j] + 3.0 * pa_y[j] * pc_yzzz[j] * pb_zz[j] + pc_yzzz[j] * pa_zz[j] * pb_y[j] + 3.0 * pc_yyzz[j] * pa_zz[j] * pb_z[j] + 6.0 * pc_yzzz[j] * pa_z[j] * pb_yz[j] + 6.0 * pc_yyzz[j] * pa_z[j] * pb_zz[j] + 3.0 * pc_yzzz[j] * pb_yzz[j] + pc_yyzz[j] * pb_zzz[j]);

                t_yzz_yzzz[j] += fl_s_0_0_5 * (-3.75 * pc_yyz[j] * fl2_fx - 2.5 * fl2_fx * pc_zzz[j] - 5.0 * pa_y[j] * pc_yzzz[j] * fl1_fx - 6.0 * pc_yyzz[j] * pa_z[j] * fl1_fx - 5.0 * pc_yzzz[j] * pb_y[j] * fl1_fx - 9.0 * pc_yyzz[j] * pb_z[j] * fl1_fx - 5.0 * pc_yyzzz[j] * fl1_fx - 0.5 * fl1_fx * pc_zzzzz[j] - fl1_fx * pa_z[j] * pc_zzzz[j] - 1.5 * fl1_fx * pc_zzzz[j] * pb_z[j] - 2.0 * pa_yz[j] * pc_yzzzz[j] - pa_y[j] * pc_zzzzz[j] * pb_y[j] - 3.0 * pa_y[j] * pc_yzzzz[j] * pb_z[j] - pc_yyzzz[j] * pa_zz[j] - 2.0 * pc_yzzzz[j] * pa_z[j] * pb_y[j] - 6.0 * pc_yyzzz[j] * pa_z[j] * pb_z[j] - 3.0 * pc_yzzzz[j] * pb_yz[j] - 3.0 * pc_yyzzz[j] * pb_zz[j]);

                t_yzz_yzzz[j] += fl_s_0_0_6 * (5.0 * pc_yyzzz[j] * fl1_fx + 0.5 * fl1_fx * pc_zzzzz[j] + pa_y[j] * pc_yzzzzz[j] + 2.0 * pc_yyzzzz[j] * pa_z[j] + pc_yzzzzz[j] * pb_y[j] + 3.0 * pc_yyzzzz[j] * pb_z[j]);

                t_yzz_yzzz[j] += -fl_s_0_0_7 * pc_yyzzzzz[j];

                t_yzz_zzzz[j] = fl_s_0_0_0 * (1.875 * pa_y[j] * fl3_fx + 0.75 * pa_yzz[j] * fl2_fx + 6.0 * pa_yz[j] * fl2_fx * pb_z[j] + 4.5 * pa_y[j] * fl2_fx * pb_zz[j] + 3.0 * pa_yzz[j] * pb_zz[j] * fl1_fx + 4.0 * pa_yz[j] * fl1_fx * pb_zzz[j] + 0.5 * pa_y[j] * fl1_fx * pb_zzzz[j] + pa_yzz[j] * pb_zzzz[j]);

                t_yzz_zzzz[j] += fl_s_0_0_1 * (-5.625 * pa_y[j] * fl3_fx - 1.875 * pc_y[j] * fl3_fx - 1.5 * pa_yzz[j] * fl2_fx - 7.5 * pa_yz[j] * pc_z[j] * fl2_fx - 12.0 * pa_yz[j] * fl2_fx * pb_z[j] - 15.0 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 9.0 * pa_y[j] * fl2_fx * pb_zz[j] - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 6.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 4.5 * pc_y[j] * fl2_fx * pb_zz[j] - 3.0 * pa_yzz[j] * pb_zz[j] * fl1_fx - 6.0 * pa_yzz[j] * pb_z[j] * pc_z[j] * fl1_fx - 18.0 * pa_yz[j] * pc_z[j] * pb_zz[j] * fl1_fx - 4.0 * pa_yz[j] * fl1_fx * pb_zzz[j] - 6.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_zzz[j] - 3.0 * pc_y[j] * pa_zz[j] * pb_zz[j] * fl1_fx - 4.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_zzz[j] - 0.5 * pa_y[j] * fl1_fx * pb_zzzz[j] - 0.5 * pc_y[j] * fl1_fx * pb_zzzz[j] - 4.0 * pa_yzz[j] * pb_zzz[j] * pc_z[j] - 2.0 * pa_yz[j] * pc_z[j] * pb_zzzz[j] - pc_y[j] * pa_zz[j] * pb_zzzz[j]);

                t_yzz_zzzz[j] += fl_s_0_0_2 * (5.625 * pa_y[j] * fl3_fx + 5.625 * pc_y[j] * fl3_fx + 0.75 * pa_yzz[j] * fl2_fx + 15.0 * pa_yz[j] * pc_z[j] * fl2_fx + 6.0 * pa_yz[j] * fl2_fx * pb_z[j] + 11.25 * pa_y[j] * pc_zz[j] * fl2_fx + 30.0 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] + 4.5 * pa_y[j] * fl2_fx * pb_zz[j] + 1.5 * pc_y[j] * pa_zz[j] * fl2_fx + 7.5 * pc_yz[j] * pa_z[j] * fl2_fx + 12.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] + 15.0 * pc_yz[j] * fl2_fx * pb_z[j] + 9.0 * pc_y[j] * fl2_fx * pb_zz[j] + 6.0 * pa_yzz[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_yzz[j] * pc_zz[j] * fl1_fx + 18.0 * pa_yz[j] * pc_z[j] * pb_zz[j] * fl1_fx + 24.0 * pa_yz[j] * pc_zz[j] * pb_z[j] * fl1_fx + 18.0 * pa_y[j] * pc_zz[j] * pb_zz[j] * fl1_fx + 6.0 * pa_y[j] * pc_z[j] * fl1_fx * pb_zzz[j] + 3.0 * pc_y[j] * pa_zz[j] * pb_zz[j] * fl1_fx + 6.0 * pc_yz[j] * pa_zz[j] * pb_z[j] * fl1_fx + 18.0 * pc_yz[j] * pa_z[j] * pb_zz[j] * fl1_fx + 4.0 * pc_y[j] * pa_z[j] * fl1_fx * pb_zzz[j] + 6.0 * pc_yz[j] * fl1_fx * pb_zzz[j] + 0.5 * pc_y[j] * fl1_fx * pb_zzzz[j] + 6.0 * pa_yzz[j] * pb_zz[j] * pc_zz[j] + 8.0 * pa_yz[j] * pc_zz[j] * pb_zzz[j] + pa_y[j] * pc_zz[j] * pb_zzzz[j] + 4.0 * pc_yz[j] * pa_zz[j] * pb_zzz[j] + 2.0 * pc_yz[j] * pa_z[j] * pb_zzzz[j]);

                t_yzz_zzzz[j] += fl_s_0_0_3 * (-1.875 * pa_y[j] * fl3_fx - 5.625 * pc_y[j] * fl3_fx - 7.5 * pa_yz[j] * pc_z[j] * fl2_fx - 22.5 * pa_y[j] * pc_zz[j] * fl2_fx - 15.0 * pa_y[j] * pc_z[j] * fl2_fx * pb_z[j] - 0.75 * pc_y[j] * pa_zz[j] * fl2_fx - 15.0 * pc_yz[j] * pa_z[j] * fl2_fx - 6.0 * pc_y[j] * pa_z[j] * fl2_fx * pb_z[j] - 11.25 * pc_yzz[j] * fl2_fx - 30.0 * pc_yz[j] * fl2_fx * pb_z[j] - 4.5 * pc_y[j] * fl2_fx * pb_zz[j] - 3.0 * pa_yzz[j] * pc_zz[j] * fl1_fx - 24.0 * pa_yz[j] * pc_zz[j] * pb_z[j] * fl1_fx - 10.0 * pa_yz[j] * pc_zzz[j] * fl1_fx - 18.0 * pa_y[j] * pc_zz[j] * pb_zz[j] * fl1_fx - 20.0 * pa_y[j] * pc_zzz[j] * pb_z[j] * fl1_fx - 6.0 * pc_yz[j] * pa_zz[j] * pb_z[j] * fl1_fx - 3.0 * pc_yzz[j] * pa_zz[j] * fl1_fx - 18.0 * pc_yz[j] * pa_z[j] * pb_zz[j] * fl1_fx - 24.0 * pc_yzz[j] * pa_z[j] * pb_z[j] * fl1_fx - 18.0 * pc_yzz[j] * pb_zz[j] * fl1_fx - 6.0 * pc_yz[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_yzz[j] * pb_z[j] * pc_zzz[j] - 12.0 * pa_yz[j] * pc_zzz[j] * pb_zz[j] - 4.0 * pa_y[j] * pc_zzz[j] * pb_zzz[j] - 6.0 * pc_yzz[j] * pa_zz[j] * pb_zz[j] - 8.0 * pc_yzz[j] * pa_z[j] * pb_zzz[j] - pc_yzz[j] * pb_zzzz[j]);

                t_yzz_zzzz[j] += fl_s_0_0_4 * (1.875 * pc_y[j] * fl3_fx + 11.25 * pa_y[j] * pc_zz[j] * fl2_fx + 7.5 * pc_yz[j] * pa_z[j] * fl2_fx + 22.5 * pc_yzz[j] * fl2_fx + 15.0 * pc_yz[j] * fl2_fx * pb_z[j] + 10.0 * pa_yz[j] * pc_zzz[j] * fl1_fx + 20.0 * pa_y[j] * pc_zzz[j] * pb_z[j] * fl1_fx + 7.5 * pa_y[j] * pc_zzzz[j] * fl1_fx + 3.0 * pc_yzz[j] * pa_zz[j] * fl1_fx + 24.0 * pc_yzz[j] * pa_z[j] * pb_z[j] * fl1_fx + 10.0 * pc_yzzz[j] * pa_z[j] * fl1_fx + 18.0 * pc_yzz[j] * pb_zz[j] * fl1_fx + 20.0 * pc_yzzz[j] * pb_z[j] * fl1_fx + pa_yzz[j] * pc_zzzz[j] + 8.0 * pa_yz[j] * pc_zzzz[j] * pb_z[j] + 6.0 * pa_y[j] * pc_zzzz[j] * pb_zz[j] + 4.0 * pc_yzzz[j] * pa_zz[j] * pb_z[j] + 12.0 * pc_yzzz[j] * pa_z[j] * pb_zz[j] + 4.0 * pc_yzzz[j] * pb_zzz[j]);

                t_yzz_zzzz[j] += fl_s_0_0_5 * (-11.25 * pc_yzz[j] * fl2_fx - 7.5 * pa_y[j] * pc_zzzz[j] * fl1_fx - 10.0 * pc_yzzz[j] * pa_z[j] * fl1_fx - 20.0 * pc_yzzz[j] * pb_z[j] * fl1_fx - 7.5 * pc_yzzzz[j] * fl1_fx - 2.0 * pa_yz[j] * pc_zzzzz[j] - 4.0 * pa_y[j] * pc_zzzzz[j] * pb_z[j] - pc_yzzzz[j] * pa_zz[j] - 8.0 * pc_yzzzz[j] * pa_z[j] * pb_z[j] - 6.0 * pc_yzzzz[j] * pb_zz[j]);

                t_yzz_zzzz[j] += fl_s_0_0_6 * (7.5 * pc_yzzzz[j] * fl1_fx + pa_y[j] * pc_zzzzzz[j] + 2.0 * pc_yzzzzz[j] * pa_z[j] + 4.0 * pc_yzzzzz[j] * pb_z[j]);

                t_yzz_zzzz[j] += -fl_s_0_0_7 * pc_yzzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_135_138(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (135,138)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxx = pbDistances.data(34 * idx + 9);

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxxx = pbDistances.data(34 * idx + 19);

            auto pb_xxxy = pbDistances.data(34 * idx + 20);

            auto pb_xxxz = pbDistances.data(34 * idx + 21);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxx = pcDistances.data(119 * idx + 9);

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxxx = pcDistances.data(119 * idx + 19);

            auto pc_xxxy = pcDistances.data(119 * idx + 20);

            auto pc_xxxz = pcDistances.data(119 * idx + 21);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxxxz = pcDistances.data(119 * idx + 36);

            auto pc_xxxyz = pcDistances.data(119 * idx + 38);

            auto pc_xxxzz = pcDistances.data(119 * idx + 39);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxxxzz = pcDistances.data(119 * idx + 60);

            auto pc_xxxyzz = pcDistances.data(119 * idx + 63);

            auto pc_xxxzzz = pcDistances.data(119 * idx + 64);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxxxzzz = pcDistances.data(119 * idx + 92);

            auto pc_xxxyzzz = pcDistances.data(119 * idx + 96);

            auto pc_xxxzzzz = pcDistances.data(119 * idx + 97);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzz_xxxx = primBuffer.data(150 * idx + 135);

            auto t_zzz_xxxy = primBuffer.data(150 * idx + 136);

            auto t_zzz_xxxz = primBuffer.data(150 * idx + 137);

            // Batch of Integrals (135,138)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxx, pb_xxxx, pb_xxxy, pb_xxxz, pb_xxy, \
                                     pb_xxz, pb_xy, pb_xz, pb_y, pb_z, pc_x, pc_xx, pc_xxx, pc_xxxx, pc_xxxxz, pc_xxxxzz, \
                                     pc_xxxxzzz, pc_xxxy, pc_xxxyz, pc_xxxyzz, pc_xxxyzzz, pc_xxxz, pc_xxxzz, pc_xxxzzz, \
                                     pc_xxxzzzz, pc_xxy, pc_xxyz, pc_xxyzz, pc_xxyzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, \
                                     pc_xy, pc_xyz, pc_xyzz, pc_xyzzz, pc_xz, pc_xzz, pc_xzzz, pc_xzzzz, pc_y, pc_yz, \
                                     pc_yzz, pc_yzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzz_xxxx, t_zzz_xxxy, t_zzz_xxxz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzz_xxxx[j] = fl_s_0_0_0 * (1.125 * pa_z[j] * fl3_fx + 0.75 * pa_zzz[j] * fl2_fx + 4.5 * pa_z[j] * fl2_fx * pb_xx[j] + 3.0 * pa_zzz[j] * pb_xx[j] * fl1_fx + 1.5 * pa_z[j] * fl1_fx * pb_xxxx[j] + pa_zzz[j] * pb_xxxx[j]);

                t_zzz_xxxx[j] += fl_s_0_0_1 * (-3.375 * pa_z[j] * fl3_fx - 1.125 * pc_z[j] * fl3_fx - 1.5 * pa_zzz[j] * fl2_fx - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 9.0 * pa_z[j] * fl2_fx * pb_xx[j] - 9.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 4.5 * pc_z[j] * fl2_fx * pb_xx[j] - 3.0 * pa_zzz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_zzz[j] * pb_x[j] * pc_x[j] * fl1_fx - 9.0 * pa_zz[j] * pc_z[j] * pb_xx[j] * fl1_fx - 6.0 * pa_z[j] * fl1_fx * pb_xxx[j] * pc_x[j] - 1.5 * pa_z[j] * fl1_fx * pb_xxxx[j] - 1.5 * pc_z[j] * fl1_fx * pb_xxxx[j] - 4.0 * pa_zzz[j] * pb_xxx[j] * pc_x[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xxxx[j]);

                t_zzz_xxxx[j] += fl_s_0_0_2 * (3.375 * pa_z[j] * fl3_fx + 3.375 * pc_z[j] * fl3_fx + 0.75 * pa_zzz[j] * fl2_fx + 4.5 * pa_zz[j] * pc_z[j] * fl2_fx + 2.25 * pa_z[j] * pc_zz[j] * fl2_fx + 18.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] + 4.5 * pa_z[j] * fl2_fx * pc_xx[j] + 4.5 * pa_z[j] * fl2_fx * pb_xx[j] + 9.0 * pc_z[j] * fl2_fx * pb_xx[j] + 9.0 * pc_xz[j] * fl2_fx * pb_x[j] + 6.0 * pa_zzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 3.0 * pa_zzz[j] * pc_xx[j] * fl1_fx + 9.0 * pa_zz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 18.0 * pa_zz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 9.0 * pa_z[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 9.0 * pa_z[j] * fl1_fx * pb_xx[j] * pc_xx[j] + 6.0 * pa_z[j] * fl1_fx * pb_xxx[j] * pc_x[j] + 6.0 * pc_xz[j] * fl1_fx * pb_xxx[j] + 1.5 * pc_z[j] * fl1_fx * pb_xxxx[j] + 6.0 * pa_zzz[j] * pb_xx[j] * pc_xx[j] + 12.0 * pa_zz[j] * pc_xz[j] * pb_xxx[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xxxx[j]);

                t_zzz_xxxx[j] += fl_s_0_0_3 * (-1.125 * pa_z[j] * fl3_fx - 3.375 * pc_z[j] * fl3_fx - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 4.5 * pa_z[j] * pc_zz[j] * fl2_fx - 0.75 * pc_zzz[j] * fl2_fx - 9.0 * pa_z[j] * fl2_fx * pc_xx[j] - 9.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 18.0 * pc_xz[j] * fl2_fx * pb_x[j] - 4.5 * pc_xxz[j] * fl2_fx - 4.5 * pc_z[j] * fl2_fx * pb_xx[j] - 3.0 * pa_zzz[j] * pc_xx[j] * fl1_fx - 18.0 * pa_zz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 9.0 * pa_zz[j] * pc_xxz[j] * fl1_fx - 9.0 * pa_z[j] * pc_zz[j] * pb_xx[j] * fl1_fx - 18.0 * pa_z[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_zzz[j] * pb_xx[j] * fl1_fx - 6.0 * pa_z[j] * fl1_fx * pb_x[j] * pc_xxx[j] - 9.0 * pa_z[j] * fl1_fx * pb_xx[j] * pc_xx[j] - 9.0 * pc_xxz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xz[j] * fl1_fx * pb_xxx[j] - 4.0 * pa_zzz[j] * pb_x[j] * pc_xxx[j] - 18.0 * pa_zz[j] * pc_xxz[j] * pb_xx[j] - 12.0 * pa_z[j] * pc_xzz[j] * pb_xxx[j] - pc_zzz[j] * pb_xxxx[j]);

                t_zzz_xxxx[j] += fl_s_0_0_4 * (1.125 * pc_z[j] * fl3_fx + 2.25 * pa_z[j] * pc_zz[j] * fl2_fx + 1.5 * pc_zzz[j] * fl2_fx + 4.5 * pa_z[j] * fl2_fx * pc_xx[j] + 9.0 * pc_xxz[j] * fl2_fx + 9.0 * pc_xz[j] * fl2_fx * pb_x[j] + 9.0 * pa_zz[j] * pc_xxz[j] * fl1_fx + 18.0 * pa_z[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 9.0 * pa_z[j] * pc_xxzz[j] * fl1_fx + 3.0 * pc_zzz[j] * pb_xx[j] * fl1_fx + 6.0 * pc_xzzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_z[j] * fl1_fx * pc_xxxx[j] + 6.0 * pa_z[j] * fl1_fx * pb_x[j] * pc_xxx[j] + 6.0 * pc_xxxz[j] * fl1_fx * pb_x[j] + 9.0 * pc_xxz[j] * fl1_fx * pb_xx[j] + pa_zzz[j] * pc_xxxx[j] + 12.0 * pa_zz[j] * pc_xxxz[j] * pb_x[j] + 18.0 * pa_z[j] * pc_xxzz[j] * pb_xx[j] + 4.0 * pc_xzzz[j] * pb_xxx[j]);

                t_zzz_xxxx[j] += fl_s_0_0_5 * (-0.75 * pc_zzz[j] * fl2_fx - 4.5 * pc_xxz[j] * fl2_fx - 9.0 * pa_z[j] * pc_xxzz[j] * fl1_fx - 6.0 * pc_xzzz[j] * pb_x[j] * fl1_fx - 3.0 * pc_xxzzz[j] * fl1_fx - 1.5 * pa_z[j] * fl1_fx * pc_xxxx[j] - 1.5 * pc_xxxxz[j] * fl1_fx - 6.0 * pc_xxxz[j] * fl1_fx * pb_x[j] - 3.0 * pa_zz[j] * pc_xxxxz[j] - 12.0 * pa_z[j] * pc_xxxzz[j] * pb_x[j] - 6.0 * pc_xxzzz[j] * pb_xx[j]);

                t_zzz_xxxx[j] += fl_s_0_0_6 * (3.0 * pc_xxzzz[j] * fl1_fx + 1.5 * pc_xxxxz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xxxxzz[j] + 4.0 * pc_xxxzzz[j] * pb_x[j]);

                t_zzz_xxxx[j] += -fl_s_0_0_7 * pc_xxxxzzz[j];

                t_zzz_xxxy[j] = fl_s_0_0_0 * (2.25 * pa_z[j] * fl2_fx * pb_xy[j] + 1.5 * pa_zzz[j] * pb_xy[j] * fl1_fx + 1.5 * pa_z[j] * fl1_fx * pb_xxxy[j] + pa_zzz[j] * pb_xxxy[j]);

                t_zzz_xxxy[j] += fl_s_0_0_1 * (-2.25 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 4.5 * pa_z[j] * fl2_fx * pb_xy[j] - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.25 * pc_z[j] * fl2_fx * pb_xy[j] - 1.5 * pa_zzz[j] * pb_x[j] * fl1_fx * pc_y[j] - 1.5 * pa_zzz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_zzz[j] * pc_x[j] * fl1_fx * pb_y[j] - 4.5 * pa_zz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 1.5 * pa_z[j] * fl1_fx * pb_xxx[j] * pc_y[j] - 4.5 * pa_z[j] * fl1_fx * pb_xxy[j] * pc_x[j] - 1.5 * pa_z[j] * fl1_fx * pb_xxxy[j] - 1.5 * pc_z[j] * fl1_fx * pb_xxxy[j] - pa_zzz[j] * pb_xxx[j] * pc_y[j] - 3.0 * pa_zzz[j] * pb_xxy[j] * pc_x[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xxxy[j]);

                t_zzz_xxxy[j] += fl_s_0_0_2 * (4.5 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] + 2.25 * pa_z[j] * fl2_fx * pc_xy[j] + 4.5 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] + 2.25 * pa_z[j] * fl2_fx * pb_xy[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 4.5 * pc_z[j] * fl2_fx * pb_xy[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_zzz[j] * pb_x[j] * fl1_fx * pc_y[j] + 1.5 * pa_zzz[j] * pc_xy[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_x[j] * fl1_fx * pb_y[j] + 4.5 * pa_zz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pa_zz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 4.5 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_y[j] + 4.5 * pa_z[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 4.5 * pa_z[j] * fl1_fx * pb_xx[j] * pc_xy[j] + 4.5 * pa_z[j] * fl1_fx * pb_xy[j] * pc_xx[j] + 1.5 * pa_z[j] * fl1_fx * pb_xxx[j] * pc_y[j] + 4.5 * pa_z[j] * fl1_fx * pb_xxy[j] * pc_x[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] + 4.5 * pc_xz[j] * fl1_fx * pb_xxy[j] + 1.5 * pc_z[j] * fl1_fx * pb_xxxy[j] + 3.0 * pa_zzz[j] * pb_xx[j] * pc_xy[j] + 3.0 * pa_zzz[j] * pb_xy[j] * pc_xx[j] + 3.0 * pa_zz[j] * pc_yz[j] * pb_xxx[j] + 9.0 * pa_zz[j] * pc_xz[j] * pb_xxy[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xxxy[j]);

                t_zzz_xxxy[j] += fl_s_0_0_3 * (-4.5 * pa_z[j] * fl2_fx * pc_xy[j] - 2.25 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 2.25 * pc_xyz[j] * fl2_fx - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_z[j] * fl2_fx * pb_xy[j] - 1.5 * pa_zzz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_zz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_y[j] - 4.5 * pa_z[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 4.5 * pa_z[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 4.5 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_zzz[j] * pb_xy[j] * fl1_fx - 4.5 * pa_z[j] * fl1_fx * pb_x[j] * pc_xxy[j] - 1.5 * pa_z[j] * fl1_fx * pc_xxx[j] * pb_y[j] - 4.5 * pa_z[j] * fl1_fx * pb_xx[j] * pc_xy[j] - 4.5 * pa_z[j] * fl1_fx * pb_xy[j] * pc_xx[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] - 4.5 * pc_xxz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxx[j] - 4.5 * pc_xz[j] * fl1_fx * pb_xxy[j] - 3.0 * pa_zzz[j] * pb_x[j] * pc_xxy[j] - pa_zzz[j] * pc_xxx[j] * pb_y[j] - 9.0 * pa_zz[j] * pc_xyz[j] * pb_xx[j] - 9.0 * pa_zz[j] * pc_xxz[j] * pb_xy[j] - 3.0 * pa_z[j] * pc_yzz[j] * pb_xxx[j] - 9.0 * pa_z[j] * pc_xzz[j] * pb_xxy[j] - pc_zzz[j] * pb_xxxy[j]);

                t_zzz_xxxy[j] += fl_s_0_0_4 * (2.25 * pa_z[j] * fl2_fx * pc_xy[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pa_zz[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_z[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 4.5 * pa_z[j] * pc_xyzz[j] * fl1_fx + 4.5 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_zzz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] + 1.5 * pa_z[j] * fl1_fx * pc_xxxy[j] + 4.5 * pa_z[j] * fl1_fx * pb_x[j] * pc_xxy[j] + 1.5 * pa_z[j] * fl1_fx * pc_xxx[j] * pb_y[j] + 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_xx[j] + 4.5 * pc_xxz[j] * fl1_fx * pb_xy[j] + pa_zzz[j] * pc_xxxy[j] + 9.0 * pa_zz[j] * pc_xxyz[j] * pb_x[j] + 3.0 * pa_zz[j] * pc_xxxz[j] * pb_y[j] + 9.0 * pa_z[j] * pc_xyzz[j] * pb_xx[j] + 9.0 * pa_z[j] * pc_xxzz[j] * pb_xy[j] + pc_yzzz[j] * pb_xxx[j] + 3.0 * pc_xzzz[j] * pb_xxy[j]);

                t_zzz_xxxy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_z[j] * pc_xyzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pb_y[j] - 1.5 * pa_z[j] * fl1_fx * pc_xxxy[j] - 1.5 * pc_xxxyz[j] * fl1_fx - 4.5 * pc_xxyz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_y[j] - 3.0 * pa_zz[j] * pc_xxxyz[j] - 9.0 * pa_z[j] * pc_xxyzz[j] * pb_x[j] - 3.0 * pa_z[j] * pc_xxxzz[j] * pb_y[j] - 3.0 * pc_xyzzz[j] * pb_xx[j] - 3.0 * pc_xxzzz[j] * pb_xy[j]);

                t_zzz_xxxy[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xxxyz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xxxyzz[j] + 3.0 * pc_xxyzzz[j] * pb_x[j] + pc_xxxzzz[j] * pb_y[j]);

                t_zzz_xxxy[j] += -fl_s_0_0_7 * pc_xxxyzzz[j];

                t_zzz_xxxz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_x[j] + 2.25 * pa_zz[j] * fl2_fx * pb_x[j] + 2.25 * pa_z[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pb_xxx[j] + 1.5 * pa_zzz[j] * pb_xz[j] * fl1_fx + 1.5 * pa_zz[j] * fl1_fx * pb_xxx[j] + 1.5 * pa_z[j] * fl1_fx * pb_xxxz[j] + pa_zzz[j] * pb_xxxz[j]);

                t_zzz_xxxz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_x[j] - 1.125 * fl3_fx * pc_x[j] - 4.5 * pa_zz[j] * fl2_fx * pb_x[j] - 2.25 * pa_zz[j] * fl2_fx * pc_x[j] - 6.75 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 4.5 * pa_z[j] * fl2_fx * pb_xz[j] - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 2.25 * pc_z[j] * fl2_fx * pb_xz[j] - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxx[j] - 1.5 * pa_zzz[j] * pb_x[j] * fl1_fx * pc_z[j] - 1.5 * pa_zzz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_zzz[j] * pc_x[j] * fl1_fx * pb_z[j] - 4.5 * pa_zz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 4.5 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_zz[j] * fl1_fx * pb_xxx[j] - 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxx[j] - 4.5 * pa_z[j] * fl1_fx * pb_xxz[j] * pc_x[j] - 1.5 * pa_z[j] * fl1_fx * pb_xxxz[j] - 1.5 * pc_z[j] * fl1_fx * pb_xxxz[j] - pa_zzz[j] * pb_xxx[j] * pc_z[j] - 3.0 * pa_zzz[j] * pb_xxz[j] * pc_x[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xxxz[j]);

                t_zzz_xxxz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_x[j] + 3.375 * fl3_fx * pb_x[j] + 4.5 * pa_zz[j] * fl2_fx * pc_x[j] + 2.25 * pa_zz[j] * fl2_fx * pb_x[j] + 13.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] + 6.75 * pa_z[j] * pc_xz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_x[j] + 4.5 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] + 2.25 * pa_z[j] * fl2_fx * pb_xz[j] + 4.5 * pc_z[j] * fl2_fx * pb_xz[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 4.5 * fl2_fx * pb_xx[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxx[j] + 1.5 * pa_zzz[j] * pb_x[j] * fl1_fx * pc_z[j] + 1.5 * pa_zzz[j] * pc_xz[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_x[j] * fl1_fx * pb_z[j] + 4.5 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 4.5 * pa_zz[j] * pc_z[j] * pb_xz[j] * fl1_fx + 4.5 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 4.5 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_x[j] + 4.5 * pa_z[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 13.5 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xx[j] + 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxx[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xxx[j] + 4.5 * pa_z[j] * fl1_fx * pb_xz[j] * pc_xx[j] + 4.5 * pa_z[j] * fl1_fx * pb_xxz[j] * pc_x[j] + 4.5 * pc_xz[j] * fl1_fx * pb_xxz[j] + 1.5 * pc_z[j] * fl1_fx * pb_xxxz[j] + 3.0 * pa_zzz[j] * pb_xx[j] * pc_xz[j] + 3.0 * pa_zzz[j] * pb_xz[j] * pc_xx[j] + 3.0 * pa_zz[j] * pc_zz[j] * pb_xxx[j] + 9.0 * pa_zz[j] * pc_xz[j] * pb_xxz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xxxz[j]);

                t_zzz_xxxz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_x[j] - 1.125 * fl3_fx * pb_x[j] - 2.25 * pa_zz[j] * fl2_fx * pc_x[j] - 13.5 * pa_z[j] * pc_xz[j] * fl2_fx - 6.75 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 9.0 * pc_zz[j] * fl2_fx * pb_x[j] - 4.5 * pc_xzz[j] * fl2_fx - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 4.5 * pc_xz[j] * fl2_fx * pb_z[j] - 2.25 * pc_z[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_xxx[j] - 4.5 * fl2_fx * pb_x[j] * pc_xx[j] - 2.25 * fl2_fx * pb_xx[j] * pc_x[j] - 1.5 * pa_zzz[j] * pc_xz[j] * fl1_fx - 4.5 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xzz[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 1.5 * pa_zz[j] * fl1_fx * pc_xxx[j] - 4.5 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xx[j] - 4.5 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 4.5 * pa_z[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 4.5 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 13.5 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_x[j] - 13.5 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xx[j] - 1.5 * pc_zzz[j] * pb_xz[j] * fl1_fx - 9.0 * pc_xzz[j] * fl1_fx * pb_xx[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xxx[j] - 1.5 * pa_z[j] * fl1_fx * pc_xxx[j] * pb_z[j] - 4.5 * pa_z[j] * fl1_fx * pb_xz[j] * pc_xx[j] - 4.5 * pc_xxz[j] * fl1_fx * pb_xz[j] - 4.5 * pc_xz[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_zzz[j] * pb_x[j] * pc_xxz[j] - pa_zzz[j] * pc_xxx[j] * pb_z[j] - 9.0 * pa_zz[j] * pc_xzz[j] * pb_xx[j] - 9.0 * pa_zz[j] * pc_xxz[j] * pb_xz[j] - 3.0 * pa_z[j] * pc_zzz[j] * pb_xxx[j] - 9.0 * pa_z[j] * pc_xzz[j] * pb_xxz[j] - pc_zzz[j] * pb_xxxz[j]);

                t_zzz_xxxz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_x[j] + 6.75 * pa_z[j] * pc_xz[j] * fl2_fx + 9.0 * pc_xzz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_xxx[j] + 2.25 * fl2_fx * pb_x[j] * pc_xx[j] + 4.5 * pa_zz[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_zz[j] * fl1_fx * pc_xxx[j] + 4.5 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 4.5 * pa_z[j] * pc_xzzz[j] * fl1_fx + 4.5 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 4.5 * pa_z[j] * pc_xxxz[j] * fl1_fx + 13.5 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_x[j] + 1.5 * pc_zzzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_zzz[j] * pb_xz[j] * fl1_fx + 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_xxzz[j] * fl1_fx * pb_x[j] + 9.0 * pc_xzz[j] * fl1_fx * pb_xx[j] + 1.5 * pa_z[j] * fl1_fx * pc_xxx[j] * pb_z[j] + 1.5 * pc_xxxz[j] * fl1_fx * pb_z[j] + 4.5 * pc_xxz[j] * fl1_fx * pb_xz[j] + pa_zzz[j] * pc_xxxz[j] + 9.0 * pa_zz[j] * pc_xxzz[j] * pb_x[j] + 3.0 * pa_zz[j] * pc_xxxz[j] * pb_z[j] + 9.0 * pa_z[j] * pc_xzzz[j] * pb_xx[j] + 9.0 * pa_z[j] * pc_xxzz[j] * pb_xz[j] + pc_zzzz[j] * pb_xxx[j] + 3.0 * pc_xzzz[j] * pb_xxz[j]);

                t_zzz_xxxz[j] += fl_s_0_0_5 * (-4.5 * pc_xzz[j] * fl2_fx - 0.75 * fl2_fx * pc_xxx[j] - 4.5 * pa_z[j] * pc_xzzz[j] * fl1_fx - 4.5 * pa_z[j] * pc_xxxz[j] * fl1_fx - 1.5 * pc_zzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xzzzz[j] * fl1_fx - 1.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxxzz[j] * fl1_fx - 9.0 * pc_xxzz[j] * fl1_fx * pb_x[j] - 1.5 * pc_xxxz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * pc_xxxzz[j] - 9.0 * pa_z[j] * pc_xxzzz[j] * pb_x[j] - 3.0 * pa_z[j] * pc_xxxzz[j] * pb_z[j] - 3.0 * pc_xzzzz[j] * pb_xx[j] - 3.0 * pc_xxzzz[j] * pb_xz[j]);

                t_zzz_xxxz[j] += fl_s_0_0_6 * (1.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pc_xxxzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xxxzzz[j] + 3.0 * pc_xxzzzz[j] * pb_x[j] + pc_xxxzzz[j] * pb_z[j]);

                t_zzz_xxxz[j] += -fl_s_0_0_7 * pc_xxxzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_138_141(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (138,141)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xx = pbDistances.data(34 * idx + 3);

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xxy = pbDistances.data(34 * idx + 10);

            auto pb_xxz = pbDistances.data(34 * idx + 11);

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xxyy = pbDistances.data(34 * idx + 22);

            auto pb_xxyz = pbDistances.data(34 * idx + 23);

            auto pb_xxzz = pbDistances.data(34 * idx + 24);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xx = pcDistances.data(119 * idx + 3);

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xxy = pcDistances.data(119 * idx + 10);

            auto pc_xxz = pcDistances.data(119 * idx + 11);

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xxyy = pcDistances.data(119 * idx + 22);

            auto pc_xxyz = pcDistances.data(119 * idx + 23);

            auto pc_xxzz = pcDistances.data(119 * idx + 24);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xxyyz = pcDistances.data(119 * idx + 41);

            auto pc_xxyzz = pcDistances.data(119 * idx + 42);

            auto pc_xxzzz = pcDistances.data(119 * idx + 43);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xxyyzz = pcDistances.data(119 * idx + 67);

            auto pc_xxyzzz = pcDistances.data(119 * idx + 68);

            auto pc_xxzzzz = pcDistances.data(119 * idx + 69);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xxyyzzz = pcDistances.data(119 * idx + 101);

            auto pc_xxyzzzz = pcDistances.data(119 * idx + 102);

            auto pc_xxzzzzz = pcDistances.data(119 * idx + 103);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzz_xxyy = primBuffer.data(150 * idx + 138);

            auto t_zzz_xxyz = primBuffer.data(150 * idx + 139);

            auto t_zzz_xxzz = primBuffer.data(150 * idx + 140);

            // Batch of Integrals (138,141)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pb_x, pb_xx, pb_xxy, pb_xxyy, pb_xxyz, pb_xxz, pb_xxzz, \
                                     pb_xy, pb_xyy, pb_xyz, pb_xz, pb_xzz, pb_y, pb_yy, pb_yz, pb_z, pb_zz, pc_x, pc_xx, \
                                     pc_xxy, pc_xxyy, pc_xxyyz, pc_xxyyzz, pc_xxyyzzz, pc_xxyz, pc_xxyzz, pc_xxyzzz, \
                                     pc_xxyzzzz, pc_xxz, pc_xxzz, pc_xxzzz, pc_xxzzzz, pc_xxzzzzz, pc_xy, pc_xyy, pc_xyyz, \
                                     pc_xyyzz, pc_xyyzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xz, pc_xzz, pc_xzzz, \
                                     pc_xzzzz, pc_xzzzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yz, pc_yzz, pc_yzzz, \
                                     pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzz_xxyy, t_zzz_xxyz, t_zzz_xxzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzz_xxyy[j] = fl_s_0_0_0 * (0.375 * pa_z[j] * fl3_fx + 0.25 * pa_zzz[j] * fl2_fx + 0.75 * pa_z[j] * fl2_fx * pb_xx[j] + 0.75 * pa_z[j] * fl2_fx * pb_yy[j] + 0.5 * pa_zzz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_zzz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_z[j] * fl1_fx * pb_xxyy[j] + pa_zzz[j] * pb_xxyy[j]);

                t_zzz_xxyy[j] += fl_s_0_0_1 * (-1.125 * pa_z[j] * fl3_fx - 0.375 * pc_z[j] * fl3_fx - 0.5 * pa_zzz[j] * fl2_fx - 0.75 * pa_zz[j] * pc_z[j] * fl2_fx - 1.5 * pa_z[j] * fl2_fx * pb_xx[j] - 1.5 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 1.5 * pa_z[j] * fl2_fx * pb_yy[j] - 0.75 * pc_z[j] * fl2_fx * pb_xx[j] - 0.75 * pc_z[j] * fl2_fx * pb_yy[j] - 0.5 * pa_zzz[j] * pb_xx[j] * fl1_fx - pa_zzz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_zzz[j] * fl1_fx * pb_y[j] * pc_y[j] - 0.5 * pa_zzz[j] * fl1_fx * pb_yy[j] - 1.5 * pa_zz[j] * pc_z[j] * pb_xx[j] * fl1_fx - 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yy[j] - 3.0 * pa_z[j] * fl1_fx * pb_xxy[j] * pc_y[j] - 3.0 * pa_z[j] * fl1_fx * pb_xyy[j] * pc_x[j] - 1.5 * pa_z[j] * fl1_fx * pb_xxyy[j] - 1.5 * pc_z[j] * fl1_fx * pb_xxyy[j] - 2.0 * pa_zzz[j] * pb_xxy[j] * pc_y[j] - 2.0 * pa_zzz[j] * pb_xyy[j] * pc_x[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xxyy[j]);

                t_zzz_xxyy[j] += fl_s_0_0_2 * (1.125 * pa_z[j] * fl3_fx + 1.125 * pc_z[j] * fl3_fx + 0.25 * pa_zzz[j] * fl2_fx + 1.5 * pa_zz[j] * pc_z[j] * fl2_fx + 0.75 * pa_z[j] * pc_zz[j] * fl2_fx + 3.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] + 0.75 * pa_z[j] * fl2_fx * pc_xx[j] + 0.75 * pa_z[j] * fl2_fx * pc_yy[j] + 3.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] + 0.75 * pa_z[j] * fl2_fx * pb_xx[j] + 0.75 * pa_z[j] * fl2_fx * pb_yy[j] + 1.5 * pc_z[j] * fl2_fx * pb_xx[j] + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * pc_z[j] * fl2_fx * pb_yy[j] + pa_zzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_zzz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_zzz[j] * fl1_fx * pc_yy[j] + pa_zzz[j] * fl1_fx * pb_y[j] * pc_y[j] + 1.5 * pa_zz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 3.0 * pa_zz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_y[j] + 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yy[j] + 1.5 * pa_z[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_z[j] * fl1_fx * pb_xx[j] * pc_yy[j] + 6.0 * pa_z[j] * fl1_fx * pb_xy[j] * pc_xy[j] + 1.5 * pa_z[j] * fl1_fx * pc_xx[j] * pb_yy[j] + 3.0 * pa_z[j] * fl1_fx * pb_xxy[j] * pc_y[j] + 3.0 * pa_z[j] * fl1_fx * pb_xyy[j] * pc_x[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_z[j] * fl1_fx * pb_xxyy[j] + pa_zzz[j] * pb_xx[j] * pc_yy[j] + 4.0 * pa_zzz[j] * pb_xy[j] * pc_xy[j] + pa_zzz[j] * pc_xx[j] * pb_yy[j] + 6.0 * pa_zz[j] * pc_yz[j] * pb_xxy[j] + 6.0 * pa_zz[j] * pc_xz[j] * pb_xyy[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xxyy[j]);

                t_zzz_xxyy[j] += fl_s_0_0_3 * (-0.375 * pa_z[j] * fl3_fx - 1.125 * pc_z[j] * fl3_fx - 0.75 * pa_zz[j] * pc_z[j] * fl2_fx - 1.5 * pa_z[j] * pc_zz[j] * fl2_fx - 0.25 * pc_zzz[j] * fl2_fx - 1.5 * pa_z[j] * fl2_fx * pc_xx[j] - 1.5 * pa_z[j] * fl2_fx * pc_yy[j] - 1.5 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 1.5 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 3.0 * pc_xz[j] * fl2_fx * pb_x[j] - 0.75 * pc_xxz[j] * fl2_fx - 0.75 * pc_yyz[j] * fl2_fx - 3.0 * pc_yz[j] * fl2_fx * pb_y[j] - 0.75 * pc_z[j] * fl2_fx * pb_xx[j] - 0.75 * pc_z[j] * fl2_fx * pb_yy[j] - 0.5 * pa_zzz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_zzz[j] * fl1_fx * pc_yy[j] - 3.0 * pa_zz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 1.5 * pa_zz[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_zz[j] * pc_yyz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_y[j] - 1.5 * pa_z[j] * pc_zz[j] * pb_xx[j] * fl1_fx - 3.0 * pa_z[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_y[j] - 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_zzz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_zzz[j] * fl1_fx * pb_yy[j] - 3.0 * pa_z[j] * fl1_fx * pb_x[j] * pc_xyy[j] - 3.0 * pa_z[j] * fl1_fx * pc_xxy[j] * pb_y[j] - 1.5 * pa_z[j] * fl1_fx * pb_xx[j] * pc_yy[j] - 6.0 * pa_z[j] * fl1_fx * pb_xy[j] * pc_xy[j] - 1.5 * pa_z[j] * fl1_fx * pc_xx[j] * pb_yy[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xyz[j] * fl1_fx * pb_xy[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xxy[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xyy[j] - 2.0 * pa_zzz[j] * pb_x[j] * pc_xyy[j] - 2.0 * pa_zzz[j] * pc_xxy[j] * pb_y[j] - 3.0 * pa_zz[j] * pc_yyz[j] * pb_xx[j] - 12.0 * pa_zz[j] * pc_xyz[j] * pb_xy[j] - 3.0 * pa_zz[j] * pc_xxz[j] * pb_yy[j] - 6.0 * pa_z[j] * pc_yzz[j] * pb_xxy[j] - 6.0 * pa_z[j] * pc_xzz[j] * pb_xyy[j] - pc_zzz[j] * pb_xxyy[j]);

                t_zzz_xxyy[j] += fl_s_0_0_4 * (0.375 * pc_z[j] * fl3_fx + 0.75 * pa_z[j] * pc_zz[j] * fl2_fx + 0.5 * pc_zzz[j] * fl2_fx + 0.75 * pa_z[j] * fl2_fx * pc_xx[j] + 0.75 * pa_z[j] * fl2_fx * pc_yy[j] + 1.5 * pc_xxz[j] * fl2_fx + 1.5 * pc_yyz[j] * fl2_fx + 1.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * pa_zz[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_zz[j] * pc_yyz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_z[j] * pc_xxzz[j] * fl1_fx + 1.5 * pa_z[j] * pc_yyzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_zzz[j] * pb_xx[j] * fl1_fx + pc_xzzz[j] * pb_x[j] * fl1_fx + pc_yzzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_zzz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_z[j] * fl1_fx * pc_xxyy[j] + 3.0 * pa_z[j] * fl1_fx * pb_x[j] * pc_xyy[j] + 3.0 * pa_z[j] * fl1_fx * pc_xxy[j] * pb_y[j] + 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xyz[j] * fl1_fx * pb_xy[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_yy[j] + pa_zzz[j] * pc_xxyy[j] + 6.0 * pa_zz[j] * pc_xyyz[j] * pb_x[j] + 6.0 * pa_zz[j] * pc_xxyz[j] * pb_y[j] + 3.0 * pa_z[j] * pc_yyzz[j] * pb_xx[j] + 12.0 * pa_z[j] * pc_xyzz[j] * pb_xy[j] + 3.0 * pa_z[j] * pc_xxzz[j] * pb_yy[j] + 2.0 * pc_yzzz[j] * pb_xxy[j] + 2.0 * pc_xzzz[j] * pb_xyy[j]);

                t_zzz_xxyy[j] += fl_s_0_0_5 * (-0.25 * pc_zzz[j] * fl2_fx - 0.75 * pc_xxz[j] * fl2_fx - 0.75 * pc_yyz[j] * fl2_fx - 1.5 * pa_z[j] * pc_xxzz[j] * fl1_fx - 1.5 * pa_z[j] * pc_yyzz[j] * fl1_fx - pc_xzzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_yyzzz[j] * fl1_fx - pc_yzzz[j] * fl1_fx * pb_y[j] - 1.5 * pa_z[j] * fl1_fx * pc_xxyy[j] - 1.5 * pc_xxyyz[j] * fl1_fx - 3.0 * pc_xyyz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_zz[j] * pc_xxyyz[j] - 6.0 * pa_z[j] * pc_xyyzz[j] * pb_x[j] - 6.0 * pa_z[j] * pc_xxyzz[j] * pb_y[j] - pc_yyzzz[j] * pb_xx[j] - 4.0 * pc_xyzzz[j] * pb_xy[j] - pc_xxzzz[j] * pb_yy[j]);

                t_zzz_xxyy[j] += fl_s_0_0_6 * (0.5 * pc_xxzzz[j] * fl1_fx + 0.5 * pc_yyzzz[j] * fl1_fx + 1.5 * pc_xxyyz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xxyyzz[j] + 2.0 * pc_xyyzzz[j] * pb_x[j] + 2.0 * pc_xxyzzz[j] * pb_y[j]);

                t_zzz_xxyy[j] += -fl_s_0_0_7 * pc_xxyyzzz[j];

                t_zzz_xxyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_y[j] + 0.75 * pa_zz[j] * fl2_fx * pb_y[j] + 0.75 * pa_z[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pb_xxy[j] + 0.5 * pa_zzz[j] * fl1_fx * pb_yz[j] + 1.5 * pa_zz[j] * fl1_fx * pb_xxy[j] + 1.5 * pa_z[j] * fl1_fx * pb_xxyz[j] + pa_zzz[j] * pb_xxyz[j]);

                t_zzz_xxyz[j] += fl_s_0_0_1 * (-0.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 0.75 * pa_zz[j] * fl2_fx * pc_y[j] - 1.5 * pa_zz[j] * fl2_fx * pb_y[j] - 2.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 0.75 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pa_z[j] * fl2_fx * pb_yz[j] - 0.75 * pc_z[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_x[j] - 1.5 * fl2_fx * pb_xxy[j] - 0.5 * pa_zzz[j] * fl1_fx * pb_y[j] * pc_z[j] - 0.5 * pa_zzz[j] * fl1_fx * pc_y[j] * pb_z[j] - 0.5 * pa_zzz[j] * fl1_fx * pb_yz[j] - 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yz[j] - 1.5 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_x[j] - 1.5 * pa_zz[j] * fl1_fx * pb_xxy[j] - 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_z[j] * fl1_fx * pb_xxz[j] * pc_y[j] - 3.0 * pa_z[j] * fl1_fx * pb_xyz[j] * pc_x[j] - 1.5 * pa_z[j] * fl1_fx * pb_xxyz[j] - 1.5 * pc_z[j] * fl1_fx * pb_xxyz[j] - pa_zzz[j] * pb_xxy[j] * pc_z[j] - pa_zzz[j] * pb_xxz[j] * pc_y[j] - 2.0 * pa_zzz[j] * pb_xyz[j] * pc_x[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xxyz[j]);

                t_zzz_xxyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_y[j] + 1.125 * fl3_fx * pb_y[j] + 1.5 * pa_zz[j] * fl2_fx * pc_y[j] + 0.75 * pa_zz[j] * fl2_fx * pb_y[j] + 2.25 * pa_z[j] * pc_yz[j] * fl2_fx + 4.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] + 1.5 * pc_zz[j] * fl2_fx * pb_y[j] + 1.5 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] + 0.75 * pa_z[j] * fl2_fx * pb_yz[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * pc_z[j] * fl2_fx * pb_yz[j] + 1.5 * fl2_fx * pb_x[j] * pc_xy[j] + 0.75 * fl2_fx * pc_xx[j] * pb_y[j] + 1.5 * fl2_fx * pb_xx[j] * pc_y[j] + 3.0 * fl2_fx * pb_xy[j] * pc_x[j] + 0.75 * fl2_fx * pb_xxy[j] + 0.5 * pa_zzz[j] * fl1_fx * pc_yz[j] + 0.5 * pa_zzz[j] * fl1_fx * pb_y[j] * pc_z[j] + 0.5 * pa_zzz[j] * fl1_fx * pc_y[j] * pb_z[j] + 1.5 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_y[j] + 1.5 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_yz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xy[j] + 1.5 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_y[j] + 1.5 * pa_zz[j] * fl1_fx * pb_xx[j] * pc_y[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_x[j] + 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yz[j] + 4.5 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xx[j] + 9.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xy[j] + 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxy[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xxy[j] + 3.0 * pa_z[j] * fl1_fx * pb_xz[j] * pc_xy[j] + 1.5 * pa_z[j] * fl1_fx * pc_xx[j] * pb_yz[j] + 1.5 * pa_z[j] * fl1_fx * pb_xxz[j] * pc_y[j] + 3.0 * pa_z[j] * fl1_fx * pb_xyz[j] * pc_x[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_z[j] * fl1_fx * pb_xxyz[j] + pa_zzz[j] * pb_xx[j] * pc_yz[j] + 2.0 * pa_zzz[j] * pb_xy[j] * pc_xz[j] + 2.0 * pa_zzz[j] * pb_xz[j] * pc_xy[j] + pa_zzz[j] * pc_xx[j] * pb_yz[j] + 3.0 * pa_zz[j] * pc_zz[j] * pb_xxy[j] + 3.0 * pa_zz[j] * pc_yz[j] * pb_xxz[j] + 6.0 * pa_zz[j] * pc_xz[j] * pb_xyz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xxyz[j]);

                t_zzz_xxyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_y[j] - 0.375 * fl3_fx * pb_y[j] - 0.75 * pa_zz[j] * fl2_fx * pc_y[j] - 4.5 * pa_z[j] * pc_yz[j] * fl2_fx - 2.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 1.5 * pc_yzz[j] * fl2_fx - 3.0 * pc_zz[j] * fl2_fx * pb_y[j] - 0.75 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 1.5 * pc_yz[j] * fl2_fx * pb_z[j] - 0.75 * pc_z[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_xxy[j] - 3.0 * fl2_fx * pb_x[j] * pc_xy[j] - 1.5 * fl2_fx * pc_xx[j] * pb_y[j] - 0.75 * fl2_fx * pb_xx[j] * pc_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_x[j] - 0.5 * pa_zzz[j] * fl1_fx * pc_yz[j] - 1.5 * pa_zz[j] * pc_yzz[j] * fl1_fx - 1.5 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_y[j] - 1.5 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_zz[j] * fl1_fx * pc_xxy[j] - 3.0 * pa_zz[j] * fl1_fx * pb_x[j] * pc_xy[j] - 1.5 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_y[j] - 1.5 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_y[j] - 1.5 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_yz[j] - 9.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_x[j] - 4.5 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_y[j] - 4.5 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xx[j] - 9.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xy[j] - 0.5 * pc_zzz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yzz[j] * fl1_fx * pb_xx[j] - 6.0 * pc_xzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xxy[j] - 1.5 * pa_z[j] * fl1_fx * pc_xxy[j] * pb_z[j] - 3.0 * pa_z[j] * fl1_fx * pb_xz[j] * pc_xy[j] - 1.5 * pa_z[j] * fl1_fx * pc_xx[j] * pb_yz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_yz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xxz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xyz[j] - 2.0 * pa_zzz[j] * pb_x[j] * pc_xyz[j] - pa_zzz[j] * pc_xxz[j] * pb_y[j] - pa_zzz[j] * pc_xxy[j] * pb_z[j] - 3.0 * pa_zz[j] * pc_yzz[j] * pb_xx[j] - 6.0 * pa_zz[j] * pc_xzz[j] * pb_xy[j] - 6.0 * pa_zz[j] * pc_xyz[j] * pb_xz[j] - 3.0 * pa_zz[j] * pc_xxz[j] * pb_yz[j] - 3.0 * pa_z[j] * pc_zzz[j] * pb_xxy[j] - 3.0 * pa_z[j] * pc_yzz[j] * pb_xxz[j] - 6.0 * pa_z[j] * pc_xzz[j] * pb_xyz[j] - pc_zzz[j] * pb_xxyz[j]);

                t_zzz_xxyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_y[j] + 2.25 * pa_z[j] * pc_yz[j] * fl2_fx + 3.0 * pc_yzz[j] * fl2_fx + 1.5 * pc_zz[j] * fl2_fx * pb_y[j] + 0.75 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_xxy[j] + 1.5 * fl2_fx * pb_x[j] * pc_xy[j] + 0.75 * fl2_fx * pc_xx[j] * pb_y[j] + 1.5 * pa_zz[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_zz[j] * fl1_fx * pc_xxy[j] + 1.5 * pa_z[j] * pc_yzzz[j] * fl1_fx + 1.5 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_y[j] + 1.5 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 4.5 * pa_z[j] * pc_xxyz[j] * fl1_fx + 9.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_x[j] + 4.5 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_y[j] + 0.5 * pc_zzzz[j] * fl1_fx * pb_y[j] + 0.5 * pc_yzzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_zzz[j] * fl1_fx * pb_yz[j] + 6.0 * pc_xyzz[j] * fl1_fx * pb_x[j] + 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] + 3.0 * pc_yzz[j] * fl1_fx * pb_xx[j] + 6.0 * pc_xzz[j] * fl1_fx * pb_xy[j] + 1.5 * pa_z[j] * fl1_fx * pc_xxy[j] * pb_z[j] + 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_yz[j] + pa_zzz[j] * pc_xxyz[j] + 6.0 * pa_zz[j] * pc_xyzz[j] * pb_x[j] + 3.0 * pa_zz[j] * pc_xxzz[j] * pb_y[j] + 3.0 * pa_zz[j] * pc_xxyz[j] * pb_z[j] + 3.0 * pa_z[j] * pc_yzzz[j] * pb_xx[j] + 6.0 * pa_z[j] * pc_xzzz[j] * pb_xy[j] + 6.0 * pa_z[j] * pc_xyzz[j] * pb_xz[j] + 3.0 * pa_z[j] * pc_xxzz[j] * pb_yz[j] + pc_zzzz[j] * pb_xxy[j] + pc_yzzz[j] * pb_xxz[j] + 2.0 * pc_xzzz[j] * pb_xyz[j]);

                t_zzz_xxyz[j] += fl_s_0_0_5 * (-1.5 * pc_yzz[j] * fl2_fx - 0.75 * fl2_fx * pc_xxy[j] - 1.5 * pa_z[j] * pc_yzzz[j] * fl1_fx - 4.5 * pa_z[j] * pc_xxyz[j] * fl1_fx - 0.5 * pc_yzzzz[j] * fl1_fx - 0.5 * pc_zzzz[j] * fl1_fx * pb_y[j] - 0.5 * pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xxyzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * fl1_fx * pb_x[j] - 3.0 * pc_xxzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xxyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * pc_xxyzz[j] - 6.0 * pa_z[j] * pc_xyzzz[j] * pb_x[j] - 3.0 * pa_z[j] * pc_xxzzz[j] * pb_y[j] - 3.0 * pa_z[j] * pc_xxyzz[j] * pb_z[j] - pc_yzzzz[j] * pb_xx[j] - 2.0 * pc_xzzzz[j] * pb_xy[j] - 2.0 * pc_xyzzz[j] * pb_xz[j] - pc_xxzzz[j] * pb_yz[j]);

                t_zzz_xxyz[j] += fl_s_0_0_6 * (0.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pc_xxyzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xxyzzz[j] + 2.0 * pc_xyzzzz[j] * pb_x[j] + pc_xxzzzz[j] * pb_y[j] + pc_xxyzzz[j] * pb_z[j]);

                t_zzz_xxyz[j] += -fl_s_0_0_7 * pc_xxyzzzz[j];

                t_zzz_xxzz[j] = fl_s_0_0_0 * (1.125 * pa_z[j] * fl3_fx + 0.75 * fl3_fx * pb_z[j] + 0.25 * pa_zzz[j] * fl2_fx + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 2.25 * pa_z[j] * fl2_fx * pb_xx[j] + 0.75 * pa_z[j] * fl2_fx * pb_zz[j] + 1.5 * fl2_fx * pb_xxz[j] + 0.5 * pa_zzz[j] * pb_xx[j] * fl1_fx + 0.5 * pa_zzz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xxz[j] + 1.5 * pa_z[j] * fl1_fx * pb_xxzz[j] + pa_zzz[j] * pb_xxzz[j]);

                t_zzz_xxzz[j] += fl_s_0_0_1 * (-3.375 * pa_z[j] * fl3_fx - 1.875 * pc_z[j] * fl3_fx - 2.25 * fl3_fx * pb_z[j] - 0.5 * pa_zzz[j] * fl2_fx - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 3.0 * pa_zz[j] * fl2_fx * pb_z[j] - 4.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 4.5 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 4.5 * pa_z[j] * fl2_fx * pb_xx[j] - 3.75 * pc_z[j] * fl2_fx * pb_xx[j] - 1.5 * pa_z[j] * fl2_fx * pb_zz[j] - 0.75 * pc_z[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pb_xz[j] * pc_x[j] - 3.0 * fl2_fx * pb_xxz[j] - 0.5 * pa_zzz[j] * pb_xx[j] * fl1_fx - pa_zzz[j] * pb_x[j] * pc_x[j] * fl1_fx - pa_zzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_zzz[j] * fl1_fx * pb_zz[j] - 4.5 * pa_zz[j] * pc_z[j] * pb_xx[j] * fl1_fx - 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 6.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_x[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xxz[j] - 9.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxz[j] - 3.0 * pa_z[j] * fl1_fx * pb_xzz[j] * pc_x[j] - 1.5 * pa_z[j] * fl1_fx * pb_xxzz[j] - 1.5 * pc_z[j] * fl1_fx * pb_xxzz[j] - 2.0 * pa_zzz[j] * pb_xxz[j] * pc_z[j] - 2.0 * pa_zzz[j] * pb_xzz[j] * pc_x[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xxzz[j]);

                t_zzz_xxzz[j] += fl_s_0_0_2 * (3.375 * pa_z[j] * fl3_fx + 5.625 * pc_z[j] * fl3_fx + 2.25 * fl3_fx * pb_z[j] + 0.25 * pa_zzz[j] * fl2_fx + 4.5 * pa_zz[j] * pc_z[j] * fl2_fx + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 4.5 * pa_z[j] * pc_zz[j] * fl2_fx + 9.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] + 2.25 * pa_z[j] * fl2_fx * pc_xx[j] + 9.0 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] + 2.25 * pa_z[j] * fl2_fx * pb_xx[j] + 3.0 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_xz[j] * fl2_fx * pb_x[j] + 7.5 * pc_z[j] * fl2_fx * pb_xx[j] + 0.75 * pa_z[j] * fl2_fx * pb_zz[j] + 1.5 * pc_z[j] * fl2_fx * pb_zz[j] + 1.5 * fl2_fx * pc_xx[j] * pb_z[j] + 6.0 * fl2_fx * pb_xz[j] * pc_x[j] + 1.5 * fl2_fx * pb_xxz[j] + pa_zzz[j] * pb_x[j] * pc_x[j] * fl1_fx + 0.5 * pa_zzz[j] * pc_xx[j] * fl1_fx + 0.5 * pa_zzz[j] * fl1_fx * pc_zz[j] + pa_zzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 4.5 * pa_zz[j] * pc_z[j] * pb_xx[j] * fl1_fx + 9.0 * pa_zz[j] * pc_xz[j] * pb_x[j] * fl1_fx + 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_z[j] + 6.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_x[j] + 9.0 * pa_z[j] * pc_zz[j] * pb_xx[j] * fl1_fx + 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 18.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xz[j] + 9.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xxz[j] + 6.0 * pc_zz[j] * fl1_fx * pb_xxz[j] + 1.5 * pa_z[j] * fl1_fx * pc_xx[j] * pb_zz[j] + 3.0 * pa_z[j] * fl1_fx * pb_xzz[j] * pc_x[j] + 3.0 * pc_xz[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_z[j] * fl1_fx * pb_xxzz[j] + pa_zzz[j] * pb_xx[j] * pc_zz[j] + 4.0 * pa_zzz[j] * pb_xz[j] * pc_xz[j] + pa_zzz[j] * pc_xx[j] * pb_zz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xxz[j] + 6.0 * pa_zz[j] * pc_xz[j] * pb_xzz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xxzz[j]);

                t_zzz_xxzz[j] += fl_s_0_0_3 * (-1.125 * pa_z[j] * fl3_fx - 5.625 * pc_z[j] * fl3_fx - 0.75 * fl3_fx * pb_z[j] - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 9.0 * pa_z[j] * pc_zz[j] * fl2_fx - 4.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 4.5 * pa_z[j] * fl2_fx * pc_xx[j] - 4.5 * pa_z[j] * fl2_fx * pb_x[j] * pc_x[j] - 2.5 * pc_zzz[j] * fl2_fx - 6.0 * pc_zz[j] * fl2_fx * pb_z[j] - 3.75 * pc_xxz[j] * fl2_fx - 15.0 * pc_xz[j] * fl2_fx * pb_x[j] - 3.75 * pc_z[j] * fl2_fx * pb_xx[j] - 0.75 * pc_z[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pc_xx[j] * pb_z[j] - 3.0 * fl2_fx * pb_xz[j] * pc_x[j] - 0.5 * pa_zzz[j] * pc_xx[j] * fl1_fx - 0.5 * pa_zzz[j] * fl1_fx * pc_zz[j] - 9.0 * pa_zz[j] * pc_xz[j] * pb_x[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xxz[j] * fl1_fx - 1.5 * pa_zz[j] * pc_zzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xx[j] * pb_z[j] - 9.0 * pa_z[j] * pc_zz[j] * pb_xx[j] * fl1_fx - 18.0 * pa_z[j] * pc_xzz[j] * pb_x[j] * fl1_fx - 3.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 9.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_z[j] - 18.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_xz[j] - 5.0 * pc_zzz[j] * pb_xx[j] * fl1_fx - 0.5 * pc_zzz[j] * fl1_fx * pb_zz[j] - 12.0 * pc_xzz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_zz[j] * fl1_fx * pb_xxz[j] - 1.5 * pa_z[j] * fl1_fx * pc_xx[j] * pb_zz[j] - 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_xz[j] * fl1_fx * pb_xzz[j] - 2.0 * pa_zzz[j] * pb_x[j] * pc_xzz[j] - 2.0 * pa_zzz[j] * pc_xxz[j] * pb_z[j] - 3.0 * pa_zz[j] * pc_zzz[j] * pb_xx[j] - 12.0 * pa_zz[j] * pc_xzz[j] * pb_xz[j] - 3.0 * pa_zz[j] * pc_xxz[j] * pb_zz[j] - 6.0 * pa_z[j] * pc_zzz[j] * pb_xxz[j] - 6.0 * pa_z[j] * pc_xzz[j] * pb_xzz[j] - pc_zzz[j] * pb_xxzz[j]);

                t_zzz_xxzz[j] += fl_s_0_0_4 * (1.875 * pc_z[j] * fl3_fx + 4.5 * pa_z[j] * pc_zz[j] * fl2_fx + 2.25 * pa_z[j] * fl2_fx * pc_xx[j] + 5.0 * pc_zzz[j] * fl2_fx + 3.0 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_xxz[j] * fl2_fx + 7.5 * pc_xz[j] * fl2_fx * pb_x[j] + 1.5 * fl2_fx * pc_xx[j] * pb_z[j] + 4.5 * pa_zz[j] * pc_xxz[j] * fl1_fx + 1.5 * pa_zz[j] * pc_zzz[j] * fl1_fx + 18.0 * pa_z[j] * pc_xzz[j] * pb_x[j] * fl1_fx + 9.0 * pa_z[j] * pc_xxzz[j] * fl1_fx + 1.5 * pa_z[j] * pc_zzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 9.0 * pa_z[j] * pc_xxz[j] * fl1_fx * pb_z[j] + 5.0 * pc_zzz[j] * pb_xx[j] * fl1_fx + 10.0 * pc_xzzz[j] * pb_x[j] * fl1_fx + pc_zzzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_zzz[j] * fl1_fx * pb_zz[j] + 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] + 12.0 * pc_xzz[j] * fl1_fx * pb_xz[j] + 1.5 * pc_xxz[j] * fl1_fx * pb_zz[j] + pa_zzz[j] * pc_xxzz[j] + 6.0 * pa_zz[j] * pc_xzzz[j] * pb_x[j] + 6.0 * pa_zz[j] * pc_xxzz[j] * pb_z[j] + 3.0 * pa_z[j] * pc_zzzz[j] * pb_xx[j] + 12.0 * pa_z[j] * pc_xzzz[j] * pb_xz[j] + 3.0 * pa_z[j] * pc_xxzz[j] * pb_zz[j] + 2.0 * pc_zzzz[j] * pb_xxz[j] + 2.0 * pc_xzzz[j] * pb_xzz[j]);

                t_zzz_xxzz[j] += fl_s_0_0_5 * (-2.5 * pc_zzz[j] * fl2_fx - 3.75 * pc_xxz[j] * fl2_fx - 9.0 * pa_z[j] * pc_xxzz[j] * fl1_fx - 1.5 * pa_z[j] * pc_zzzz[j] * fl1_fx - 10.0 * pc_xzzz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xxzzz[j] * fl1_fx - 0.5 * pc_zzzzz[j] * fl1_fx - pc_zzzz[j] * fl1_fx * pb_z[j] - 6.0 * pc_xxzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * pc_xxzzz[j] - 6.0 * pa_z[j] * pc_xzzzz[j] * pb_x[j] - 6.0 * pa_z[j] * pc_xxzzz[j] * pb_z[j] - pc_zzzzz[j] * pb_xx[j] - 4.0 * pc_xzzzz[j] * pb_xz[j] - pc_xxzzz[j] * pb_zz[j]);

                t_zzz_xxzz[j] += fl_s_0_0_6 * (5.0 * pc_xxzzz[j] * fl1_fx + 0.5 * pc_zzzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xxzzzz[j] + 2.0 * pc_xzzzzz[j] * pb_x[j] + 2.0 * pc_xxzzzz[j] * pb_z[j]);

                t_zzz_xxzz[j] += -fl_s_0_0_7 * pc_xxzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_141_144(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (141,144)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xy = pbDistances.data(34 * idx + 4);

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xyy = pbDistances.data(34 * idx + 12);

            auto pb_xyz = pbDistances.data(34 * idx + 13);

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xyyy = pbDistances.data(34 * idx + 25);

            auto pb_xyyz = pbDistances.data(34 * idx + 26);

            auto pb_xyzz = pbDistances.data(34 * idx + 27);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xy = pcDistances.data(119 * idx + 4);

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xyy = pcDistances.data(119 * idx + 12);

            auto pc_xyz = pcDistances.data(119 * idx + 13);

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xyyy = pcDistances.data(119 * idx + 25);

            auto pc_xyyz = pcDistances.data(119 * idx + 26);

            auto pc_xyzz = pcDistances.data(119 * idx + 27);

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xyyyz = pcDistances.data(119 * idx + 45);

            auto pc_xyyzz = pcDistances.data(119 * idx + 46);

            auto pc_xyzzz = pcDistances.data(119 * idx + 47);

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xyyyzz = pcDistances.data(119 * idx + 72);

            auto pc_xyyzzz = pcDistances.data(119 * idx + 73);

            auto pc_xyzzzz = pcDistances.data(119 * idx + 74);

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xyyyzzz = pcDistances.data(119 * idx + 107);

            auto pc_xyyzzzz = pcDistances.data(119 * idx + 108);

            auto pc_xyzzzzz = pcDistances.data(119 * idx + 109);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzz_xyyy = primBuffer.data(150 * idx + 141);

            auto t_zzz_xyyz = primBuffer.data(150 * idx + 142);

            auto t_zzz_xyzz = primBuffer.data(150 * idx + 143);

            // Batch of Integrals (141,144)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pb_x, pb_xy, pb_xyy, pb_xyyy, pb_xyyz, pb_xyz, pb_xyzz, \
                                     pb_xz, pb_xzz, pb_y, pb_yy, pb_yyy, pb_yyz, pb_yz, pb_yzz, pb_z, pb_zz, pc_x, pc_xy, \
                                     pc_xyy, pc_xyyy, pc_xyyyz, pc_xyyyzz, pc_xyyyzzz, pc_xyyz, pc_xyyzz, pc_xyyzzz, \
                                     pc_xyyzzzz, pc_xyz, pc_xyzz, pc_xyzzz, pc_xyzzzz, pc_xyzzzzz, pc_xz, pc_xzz, pc_xzzz, \
                                     pc_xzzzz, pc_xzzzzz, pc_y, pc_yy, pc_yyy, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyz, \
                                     pc_yyzz, pc_yyzzz, pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_z, \
                                     pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, \
                                     s_0_0_5, s_0_0_6, s_0_0_7, t_zzz_xyyy, t_zzz_xyyz, t_zzz_xyzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzz_xyyy[j] = fl_s_0_0_0 * (2.25 * pa_z[j] * fl2_fx * pb_xy[j] + 1.5 * pa_zzz[j] * pb_xy[j] * fl1_fx + 1.5 * pa_z[j] * fl1_fx * pb_xyyy[j] + pa_zzz[j] * pb_xyyy[j]);

                t_zzz_xyyy[j] += fl_s_0_0_1 * (-4.5 * pa_z[j] * fl2_fx * pb_xy[j] - 2.25 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 2.25 * pc_z[j] * fl2_fx * pb_xy[j] - 1.5 * pa_zzz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_zzz[j] * pb_x[j] * pc_y[j] * fl1_fx - 1.5 * pa_zzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 4.5 * pa_zz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 4.5 * pa_z[j] * fl1_fx * pb_xyy[j] * pc_y[j] - 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_yyy[j] - 1.5 * pa_z[j] * fl1_fx * pb_xyyy[j] - 1.5 * pc_z[j] * fl1_fx * pb_xyyy[j] - 3.0 * pa_zzz[j] * pb_xyy[j] * pc_y[j] - pa_zzz[j] * pc_x[j] * pb_yyy[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xyyy[j]);

                t_zzz_xyyy[j] += fl_s_0_0_2 * (4.5 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] + 4.5 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] + 2.25 * pa_z[j] * fl2_fx * pc_xy[j] + 2.25 * pa_z[j] * fl2_fx * pb_xy[j] + 4.5 * pc_z[j] * fl2_fx * pb_xy[j] + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * pa_zzz[j] * pb_x[j] * pc_y[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_x[j] * pb_y[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_zz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 4.5 * pa_zz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pa_zz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 4.5 * pa_z[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 4.5 * pa_z[j] * fl1_fx * pb_xy[j] * pc_yy[j] + 4.5 * pa_z[j] * fl1_fx * pc_xy[j] * pb_yy[j] + 4.5 * pa_z[j] * fl1_fx * pb_xyy[j] * pc_y[j] + 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_yyy[j] + 4.5 * pc_yz[j] * fl1_fx * pb_xyy[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_z[j] * fl1_fx * pb_xyyy[j] + 3.0 * pa_zzz[j] * pb_xy[j] * pc_yy[j] + 3.0 * pa_zzz[j] * pc_xy[j] * pb_yy[j] + 9.0 * pa_zz[j] * pc_yz[j] * pb_xyy[j] + 3.0 * pa_zz[j] * pc_xz[j] * pb_yyy[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xyyy[j]);

                t_zzz_xyyy[j] += fl_s_0_0_3 * (-4.5 * pa_z[j] * fl2_fx * pc_xy[j] - 2.25 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 4.5 * pc_yz[j] * fl2_fx * pb_x[j] - 4.5 * pc_xz[j] * fl2_fx * pb_y[j] - 2.25 * pc_xyz[j] * fl2_fx - 2.25 * pc_z[j] * fl2_fx * pb_xy[j] - 1.5 * pa_zzz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_zz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xyz[j] * fl1_fx - 4.5 * pa_z[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 4.5 * pa_z[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 4.5 * pa_z[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_zzz[j] * pb_xy[j] * fl1_fx - 1.5 * pa_z[j] * fl1_fx * pb_x[j] * pc_yyy[j] - 4.5 * pa_z[j] * fl1_fx * pc_xyy[j] * pb_y[j] - 4.5 * pa_z[j] * fl1_fx * pb_xy[j] * pc_yy[j] - 4.5 * pa_z[j] * fl1_fx * pc_xy[j] * pb_yy[j] - 4.5 * pc_yyz[j] * fl1_fx * pb_xy[j] - 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] - 4.5 * pc_yz[j] * fl1_fx * pb_xyy[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyy[j] - pa_zzz[j] * pb_x[j] * pc_yyy[j] - 3.0 * pa_zzz[j] * pc_xyy[j] * pb_y[j] - 9.0 * pa_zz[j] * pc_yyz[j] * pb_xy[j] - 9.0 * pa_zz[j] * pc_xyz[j] * pb_yy[j] - 9.0 * pa_z[j] * pc_yzz[j] * pb_xyy[j] - 3.0 * pa_z[j] * pc_xzz[j] * pb_yyy[j] - pc_zzz[j] * pb_xyyy[j]);

                t_zzz_xyyy[j] += fl_s_0_0_4 * (2.25 * pa_z[j] * fl2_fx * pc_xy[j] + 4.5 * pc_xyz[j] * fl2_fx + 2.25 * pc_yz[j] * fl2_fx * pb_x[j] + 2.25 * pc_xz[j] * fl2_fx * pb_y[j] + 4.5 * pa_zz[j] * pc_xyz[j] * fl1_fx + 4.5 * pa_z[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 4.5 * pa_z[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 4.5 * pa_z[j] * pc_xyzz[j] * fl1_fx + 1.5 * pc_zzz[j] * pb_xy[j] * fl1_fx + 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx + 1.5 * pc_xzzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_z[j] * fl1_fx * pc_xyyy[j] + 1.5 * pa_z[j] * fl1_fx * pb_x[j] * pc_yyy[j] + 4.5 * pa_z[j] * fl1_fx * pc_xyy[j] * pb_y[j] + 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] + 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] + 4.5 * pc_yyz[j] * fl1_fx * pb_xy[j] + 4.5 * pc_xyz[j] * fl1_fx * pb_yy[j] + pa_zzz[j] * pc_xyyy[j] + 3.0 * pa_zz[j] * pc_yyyz[j] * pb_x[j] + 9.0 * pa_zz[j] * pc_xyyz[j] * pb_y[j] + 9.0 * pa_z[j] * pc_yyzz[j] * pb_xy[j] + 9.0 * pa_z[j] * pc_xyzz[j] * pb_yy[j] + 3.0 * pc_yzzz[j] * pb_xyy[j] + pc_xzzz[j] * pb_yyy[j]);

                t_zzz_xyyy[j] += fl_s_0_0_5 * (-2.25 * pc_xyz[j] * fl2_fx - 4.5 * pa_z[j] * pc_xyzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * pb_x[j] * fl1_fx - 1.5 * pc_xzzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_xyzzz[j] * fl1_fx - 1.5 * pa_z[j] * fl1_fx * pc_xyyy[j] - 1.5 * pc_xyyyz[j] * fl1_fx - 1.5 * pc_yyyz[j] * fl1_fx * pb_x[j] - 4.5 * pc_xyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_zz[j] * pc_xyyyz[j] - 3.0 * pa_z[j] * pc_yyyzz[j] * pb_x[j] - 9.0 * pa_z[j] * pc_xyyzz[j] * pb_y[j] - 3.0 * pc_yyzzz[j] * pb_xy[j] - 3.0 * pc_xyzzz[j] * pb_yy[j]);

                t_zzz_xyyy[j] += fl_s_0_0_6 * (1.5 * pc_xyzzz[j] * fl1_fx + 1.5 * pc_xyyyz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xyyyzz[j] + pc_yyyzzz[j] * pb_x[j] + 3.0 * pc_xyyzzz[j] * pb_y[j]);

                t_zzz_xyyy[j] += -fl_s_0_0_7 * pc_xyyyzzz[j];

                t_zzz_xyyz[j] = fl_s_0_0_0 * (0.375 * fl3_fx * pb_x[j] + 0.75 * pa_zz[j] * fl2_fx * pb_x[j] + 0.75 * pa_z[j] * fl2_fx * pb_xz[j] + 0.75 * fl2_fx * pb_xyy[j] + 0.5 * pa_zzz[j] * pb_xz[j] * fl1_fx + 1.5 * pa_zz[j] * fl1_fx * pb_xyy[j] + 1.5 * pa_z[j] * fl1_fx * pb_xyyz[j] + pa_zzz[j] * pb_xyyz[j]);

                t_zzz_xyyz[j] += fl_s_0_0_1 * (-1.125 * fl3_fx * pb_x[j] - 0.375 * fl3_fx * pc_x[j] - 1.5 * pa_zz[j] * fl2_fx * pb_x[j] - 0.75 * pa_zz[j] * fl2_fx * pc_x[j] - 2.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 1.5 * pa_z[j] * fl2_fx * pb_xz[j] - 0.75 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 0.75 * pc_z[j] * fl2_fx * pb_xz[j] - 1.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 1.5 * fl2_fx * pb_xyy[j] - 0.5 * pa_zzz[j] * pb_x[j] * fl1_fx * pc_z[j] - 0.5 * pa_zzz[j] * pb_xz[j] * fl1_fx - 0.5 * pa_zzz[j] * pc_x[j] * fl1_fx * pb_z[j] - 1.5 * pa_zz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 3.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_y[j] - 1.5 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yy[j] - 1.5 * pa_zz[j] * fl1_fx * pb_xyy[j] - 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyy[j] - 3.0 * pa_z[j] * fl1_fx * pb_xyz[j] * pc_y[j] - 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_yyz[j] - 1.5 * pa_z[j] * fl1_fx * pb_xyyz[j] - 1.5 * pc_z[j] * fl1_fx * pb_xyyz[j] - pa_zzz[j] * pb_xyy[j] * pc_z[j] - 2.0 * pa_zzz[j] * pb_xyz[j] * pc_y[j] - pa_zzz[j] * pc_x[j] * pb_yyz[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xyyz[j]);

                t_zzz_xyyz[j] += fl_s_0_0_2 * (1.125 * fl3_fx * pc_x[j] + 1.125 * fl3_fx * pb_x[j] + 1.5 * pa_zz[j] * fl2_fx * pc_x[j] + 0.75 * pa_zz[j] * fl2_fx * pb_x[j] + 4.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] + 2.25 * pa_z[j] * pc_xz[j] * fl2_fx + 1.5 * pc_zz[j] * fl2_fx * pb_x[j] + 1.5 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] + 0.75 * pa_z[j] * fl2_fx * pb_xz[j] + 1.5 * pc_z[j] * fl2_fx * pb_xz[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 0.75 * fl2_fx * pb_x[j] * pc_yy[j] + 1.5 * fl2_fx * pc_xy[j] * pb_y[j] + 3.0 * fl2_fx * pb_xy[j] * pc_y[j] + 1.5 * fl2_fx * pc_x[j] * pb_yy[j] + 0.75 * fl2_fx * pb_xyy[j] + 0.5 * pa_zzz[j] * pb_x[j] * fl1_fx * pc_z[j] + 0.5 * pa_zzz[j] * pc_xz[j] * fl1_fx + 0.5 * pa_zzz[j] * pc_x[j] * fl1_fx * pb_z[j] + 1.5 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 1.5 * pa_zz[j] * pc_z[j] * pb_xz[j] * fl1_fx + 1.5 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_z[j] + 1.5 * pa_zz[j] * fl1_fx * pb_x[j] * pc_yy[j] + 3.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_y[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xy[j] * pc_y[j] + 1.5 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yy[j] + 1.5 * pa_z[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 9.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xy[j] + 4.5 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yy[j] + 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyy[j] + 3.0 * pc_zz[j] * fl1_fx * pb_xyy[j] + 1.5 * pa_z[j] * fl1_fx * pb_xz[j] * pc_yy[j] + 3.0 * pa_z[j] * fl1_fx * pc_xy[j] * pb_yz[j] + 3.0 * pa_z[j] * fl1_fx * pb_xyz[j] * pc_y[j] + 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_yyz[j] + 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_z[j] * fl1_fx * pb_xyyz[j] + 2.0 * pa_zzz[j] * pb_xy[j] * pc_yz[j] + pa_zzz[j] * pb_xz[j] * pc_yy[j] + pa_zzz[j] * pc_xz[j] * pb_yy[j] + 2.0 * pa_zzz[j] * pc_xy[j] * pb_yz[j] + 3.0 * pa_zz[j] * pc_zz[j] * pb_xyy[j] + 6.0 * pa_zz[j] * pc_yz[j] * pb_xyz[j] + 3.0 * pa_zz[j] * pc_xz[j] * pb_yyz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xyyz[j]);

                t_zzz_xyyz[j] += fl_s_0_0_3 * (-1.125 * fl3_fx * pc_x[j] - 0.375 * fl3_fx * pb_x[j] - 0.75 * pa_zz[j] * fl2_fx * pc_x[j] - 4.5 * pa_z[j] * pc_xz[j] * fl2_fx - 2.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 3.0 * pc_zz[j] * fl2_fx * pb_x[j] - 1.5 * pc_xzz[j] * fl2_fx - 0.75 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 1.5 * pc_xz[j] * fl2_fx * pb_z[j] - 0.75 * pc_z[j] * fl2_fx * pb_xz[j] - 0.75 * fl2_fx * pc_xyy[j] - 1.5 * fl2_fx * pb_x[j] * pc_yy[j] - 3.0 * fl2_fx * pc_xy[j] * pb_y[j] - 1.5 * fl2_fx * pb_xy[j] * pc_y[j] - 0.75 * fl2_fx * pc_x[j] * pb_yy[j] - 0.5 * pa_zzz[j] * pc_xz[j] * fl1_fx - 1.5 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 1.5 * pa_zz[j] * pc_xzz[j] * fl1_fx - 1.5 * pa_zz[j] * pc_xz[j] * fl1_fx * pb_z[j] - 1.5 * pa_zz[j] * fl1_fx * pc_xyy[j] - 1.5 * pa_zz[j] * fl1_fx * pb_x[j] * pc_yy[j] - 3.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_y[j] - 1.5 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 1.5 * pa_z[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_z[j] - 4.5 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_x[j] - 9.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_y[j] - 9.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xy[j] - 4.5 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yy[j] - 0.5 * pc_zzz[j] * pb_xz[j] * fl1_fx - 6.0 * pc_yzz[j] * fl1_fx * pb_xy[j] - 3.0 * pc_xzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_zz[j] * fl1_fx * pb_xyy[j] - 1.5 * pa_z[j] * fl1_fx * pc_xyy[j] * pb_z[j] - 1.5 * pa_z[j] * fl1_fx * pb_xz[j] * pc_yy[j] - 3.0 * pa_z[j] * fl1_fx * pc_xy[j] * pb_yz[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_xz[j] - 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_xyz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yyz[j] - pa_zzz[j] * pb_x[j] * pc_yyz[j] - 2.0 * pa_zzz[j] * pc_xyz[j] * pb_y[j] - pa_zzz[j] * pc_xyy[j] * pb_z[j] - 6.0 * pa_zz[j] * pc_yzz[j] * pb_xy[j] - 3.0 * pa_zz[j] * pc_yyz[j] * pb_xz[j] - 3.0 * pa_zz[j] * pc_xzz[j] * pb_yy[j] - 6.0 * pa_zz[j] * pc_xyz[j] * pb_yz[j] - 3.0 * pa_z[j] * pc_zzz[j] * pb_xyy[j] - 6.0 * pa_z[j] * pc_yzz[j] * pb_xyz[j] - 3.0 * pa_z[j] * pc_xzz[j] * pb_yyz[j] - pc_zzz[j] * pb_xyyz[j]);

                t_zzz_xyyz[j] += fl_s_0_0_4 * (0.375 * fl3_fx * pc_x[j] + 2.25 * pa_z[j] * pc_xz[j] * fl2_fx + 3.0 * pc_xzz[j] * fl2_fx + 1.5 * pc_zz[j] * fl2_fx * pb_x[j] + 0.75 * pc_xz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_xyy[j] + 0.75 * fl2_fx * pb_x[j] * pc_yy[j] + 1.5 * fl2_fx * pc_xy[j] * pb_y[j] + 1.5 * pa_zz[j] * pc_xzz[j] * fl1_fx + 1.5 * pa_zz[j] * fl1_fx * pc_xyy[j] + 1.5 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 1.5 * pa_z[j] * pc_xzzz[j] * fl1_fx + 1.5 * pa_z[j] * pc_xzz[j] * fl1_fx * pb_z[j] + 4.5 * pa_z[j] * pc_xyyz[j] * fl1_fx + 4.5 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_x[j] + 9.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_y[j] + 0.5 * pc_zzzz[j] * pb_x[j] * fl1_fx + 0.5 * pc_zzz[j] * pb_xz[j] * fl1_fx + 0.5 * pc_xzzz[j] * fl1_fx * pb_z[j] + 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] + 6.0 * pc_xyzz[j] * fl1_fx * pb_y[j] + 6.0 * pc_yzz[j] * fl1_fx * pb_xy[j] + 3.0 * pc_xzz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_z[j] * fl1_fx * pc_xyy[j] * pb_z[j] + 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_xz[j] + 3.0 * pc_xyz[j] * fl1_fx * pb_yz[j] + pa_zzz[j] * pc_xyyz[j] + 3.0 * pa_zz[j] * pc_yyzz[j] * pb_x[j] + 6.0 * pa_zz[j] * pc_xyzz[j] * pb_y[j] + 3.0 * pa_zz[j] * pc_xyyz[j] * pb_z[j] + 6.0 * pa_z[j] * pc_yzzz[j] * pb_xy[j] + 3.0 * pa_z[j] * pc_yyzz[j] * pb_xz[j] + 3.0 * pa_z[j] * pc_xzzz[j] * pb_yy[j] + 6.0 * pa_z[j] * pc_xyzz[j] * pb_yz[j] + pc_zzzz[j] * pb_xyy[j] + 2.0 * pc_yzzz[j] * pb_xyz[j] + pc_xzzz[j] * pb_yyz[j]);

                t_zzz_xyyz[j] += fl_s_0_0_5 * (-1.5 * pc_xzz[j] * fl2_fx - 0.75 * fl2_fx * pc_xyy[j] - 1.5 * pa_z[j] * pc_xzzz[j] * fl1_fx - 4.5 * pa_z[j] * pc_xyyz[j] * fl1_fx - 0.5 * pc_zzzz[j] * pb_x[j] * fl1_fx - 0.5 * pc_xzzzz[j] * fl1_fx - 0.5 * pc_xzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_xyyzz[j] * fl1_fx - 3.0 * pc_yyzz[j] * fl1_fx * pb_x[j] - 6.0 * pc_xyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_xyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * pc_xyyzz[j] - 3.0 * pa_z[j] * pc_yyzzz[j] * pb_x[j] - 6.0 * pa_z[j] * pc_xyzzz[j] * pb_y[j] - 3.0 * pa_z[j] * pc_xyyzz[j] * pb_z[j] - 2.0 * pc_yzzzz[j] * pb_xy[j] - pc_yyzzz[j] * pb_xz[j] - pc_xzzzz[j] * pb_yy[j] - 2.0 * pc_xyzzz[j] * pb_yz[j]);

                t_zzz_xyyz[j] += fl_s_0_0_6 * (0.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pc_xyyzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xyyzzz[j] + pc_yyzzzz[j] * pb_x[j] + 2.0 * pc_xyzzzz[j] * pb_y[j] + pc_xyyzzz[j] * pb_z[j]);

                t_zzz_xyyz[j] += -fl_s_0_0_7 * pc_xyyzzzz[j];

                t_zzz_xyzz[j] = fl_s_0_0_0 * (2.25 * pa_z[j] * fl2_fx * pb_xy[j] + 1.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_zzz[j] * pb_xy[j] * fl1_fx + 3.0 * pa_zz[j] * fl1_fx * pb_xyz[j] + 1.5 * pa_z[j] * fl1_fx * pb_xyzz[j] + pa_zzz[j] * pb_xyzz[j]);

                t_zzz_xyzz[j] += fl_s_0_0_1 * (-2.25 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 4.5 * pa_z[j] * fl2_fx * pb_xy[j] - 3.75 * pc_z[j] * fl2_fx * pb_xy[j] - 1.5 * fl2_fx * pb_xz[j] * pc_y[j] - 1.5 * fl2_fx * pc_x[j] * pb_yz[j] - 3.0 * fl2_fx * pb_xyz[j] - 0.5 * pa_zzz[j] * pb_xy[j] * fl1_fx - 0.5 * pa_zzz[j] * pb_x[j] * pc_y[j] * fl1_fx - 0.5 * pa_zzz[j] * pc_x[j] * pb_y[j] * fl1_fx - 4.5 * pa_zz[j] * pc_z[j] * pb_xy[j] * fl1_fx - 3.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yz[j] - 3.0 * pa_zz[j] * fl1_fx * pb_xyz[j] - 9.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_z[j] * fl1_fx * pb_xzz[j] * pc_y[j] - 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_yzz[j] - 1.5 * pa_z[j] * fl1_fx * pb_xyzz[j] - 1.5 * pc_z[j] * fl1_fx * pb_xyzz[j] - 2.0 * pa_zzz[j] * pb_xyz[j] * pc_z[j] - pa_zzz[j] * pb_xzz[j] * pc_y[j] - pa_zzz[j] * pc_x[j] * pb_yzz[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xyzz[j]);

                t_zzz_xyzz[j] += fl_s_0_0_2 * (2.25 * pa_z[j] * fl2_fx * pc_xy[j] + 4.5 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] + 4.5 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] + 2.25 * pa_z[j] * fl2_fx * pb_xy[j] + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 7.5 * pc_z[j] * fl2_fx * pb_xy[j] + 1.5 * fl2_fx * pc_xy[j] * pb_z[j] + 3.0 * fl2_fx * pb_xz[j] * pc_y[j] + 3.0 * fl2_fx * pc_x[j] * pb_yz[j] + 1.5 * fl2_fx * pb_xyz[j] + 0.5 * pa_zzz[j] * pb_x[j] * pc_y[j] * fl1_fx + 0.5 * pa_zzz[j] * pc_x[j] * pb_y[j] * fl1_fx + 0.5 * pa_zzz[j] * pc_xy[j] * fl1_fx + 4.5 * pa_zz[j] * pc_z[j] * pb_xy[j] * fl1_fx + 4.5 * pa_zz[j] * pc_yz[j] * pb_x[j] * fl1_fx + 4.5 * pa_zz[j] * pc_xz[j] * pb_y[j] * fl1_fx + 3.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_z[j] + 3.0 * pa_zz[j] * fl1_fx * pb_xz[j] * pc_y[j] + 3.0 * pa_zz[j] * fl1_fx * pc_x[j] * pb_yz[j] + 9.0 * pa_z[j] * pc_zz[j] * pb_xy[j] * fl1_fx + 9.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xz[j] + 9.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yz[j] + 9.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_xyz[j] + 6.0 * pc_zz[j] * fl1_fx * pb_xyz[j] + 1.5 * pa_z[j] * fl1_fx * pc_xy[j] * pb_zz[j] + 1.5 * pa_z[j] * fl1_fx * pb_xzz[j] * pc_y[j] + 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_yzz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_z[j] * fl1_fx * pb_xyzz[j] + pa_zzz[j] * pb_xy[j] * pc_zz[j] + 2.0 * pa_zzz[j] * pb_xz[j] * pc_yz[j] + 2.0 * pa_zzz[j] * pc_xz[j] * pb_yz[j] + pa_zzz[j] * pc_xy[j] * pb_zz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_xyz[j] + 3.0 * pa_zz[j] * pc_yz[j] * pb_xzz[j] + 3.0 * pa_zz[j] * pc_xz[j] * pb_yzz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xyzz[j]);

                t_zzz_xyzz[j] += fl_s_0_0_3 * (-4.5 * pa_z[j] * fl2_fx * pc_xy[j] - 2.25 * pa_z[j] * fl2_fx * pb_x[j] * pc_y[j] - 2.25 * pa_z[j] * fl2_fx * pc_x[j] * pb_y[j] - 3.75 * pc_xyz[j] * fl2_fx - 7.5 * pc_yz[j] * fl2_fx * pb_x[j] - 7.5 * pc_xz[j] * fl2_fx * pb_y[j] - 3.75 * pc_z[j] * fl2_fx * pb_xy[j] - 3.0 * fl2_fx * pc_xy[j] * pb_z[j] - 1.5 * fl2_fx * pb_xz[j] * pc_y[j] - 1.5 * fl2_fx * pc_x[j] * pb_yz[j] - 0.5 * pa_zzz[j] * pc_xy[j] * fl1_fx - 4.5 * pa_zz[j] * pc_yz[j] * pb_x[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xz[j] * pb_y[j] * fl1_fx - 4.5 * pa_zz[j] * pc_xyz[j] * fl1_fx - 3.0 * pa_zz[j] * fl1_fx * pc_xy[j] * pb_z[j] - 9.0 * pa_z[j] * pc_zz[j] * pb_xy[j] * fl1_fx - 9.0 * pa_z[j] * pc_yzz[j] * pb_x[j] * fl1_fx - 9.0 * pa_z[j] * pc_xzz[j] * pb_y[j] * fl1_fx - 9.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_z[j] - 9.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_xz[j] - 9.0 * pa_z[j] * pc_xz[j] * fl1_fx * pb_yz[j] - 5.0 * pc_zzz[j] * pb_xy[j] * fl1_fx - 6.0 * pc_yzz[j] * fl1_fx * pb_xz[j] - 6.0 * pc_xzz[j] * fl1_fx * pb_yz[j] - 6.0 * pc_zz[j] * fl1_fx * pb_xyz[j] - 1.5 * pa_z[j] * fl1_fx * pc_xy[j] * pb_zz[j] - 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_yzz[j] - pa_zzz[j] * pb_x[j] * pc_yzz[j] - pa_zzz[j] * pc_xzz[j] * pb_y[j] - 2.0 * pa_zzz[j] * pc_xyz[j] * pb_z[j] - 3.0 * pa_zz[j] * pc_zzz[j] * pb_xy[j] - 6.0 * pa_zz[j] * pc_yzz[j] * pb_xz[j] - 6.0 * pa_zz[j] * pc_xzz[j] * pb_yz[j] - 3.0 * pa_zz[j] * pc_xyz[j] * pb_zz[j] - 6.0 * pa_z[j] * pc_zzz[j] * pb_xyz[j] - 3.0 * pa_z[j] * pc_yzz[j] * pb_xzz[j] - 3.0 * pa_z[j] * pc_xzz[j] * pb_yzz[j] - pc_zzz[j] * pb_xyzz[j]);

                t_zzz_xyzz[j] += fl_s_0_0_4 * (2.25 * pa_z[j] * fl2_fx * pc_xy[j] + 7.5 * pc_xyz[j] * fl2_fx + 3.75 * pc_yz[j] * fl2_fx * pb_x[j] + 3.75 * pc_xz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_xy[j] * pb_z[j] + 4.5 * pa_zz[j] * pc_xyz[j] * fl1_fx + 9.0 * pa_z[j] * pc_yzz[j] * pb_x[j] * fl1_fx + 9.0 * pa_z[j] * pc_xzz[j] * pb_y[j] * fl1_fx + 9.0 * pa_z[j] * pc_xyzz[j] * fl1_fx + 9.0 * pa_z[j] * pc_xyz[j] * fl1_fx * pb_z[j] + 5.0 * pc_zzz[j] * pb_xy[j] * fl1_fx + 5.0 * pc_yzzz[j] * pb_x[j] * fl1_fx + 5.0 * pc_xzzz[j] * pb_y[j] * fl1_fx + 6.0 * pc_xyzz[j] * fl1_fx * pb_z[j] + 6.0 * pc_yzz[j] * fl1_fx * pb_xz[j] + 6.0 * pc_xzz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_xyz[j] * fl1_fx * pb_zz[j] + pa_zzz[j] * pc_xyzz[j] + 3.0 * pa_zz[j] * pc_yzzz[j] * pb_x[j] + 3.0 * pa_zz[j] * pc_xzzz[j] * pb_y[j] + 6.0 * pa_zz[j] * pc_xyzz[j] * pb_z[j] + 3.0 * pa_z[j] * pc_zzzz[j] * pb_xy[j] + 6.0 * pa_z[j] * pc_yzzz[j] * pb_xz[j] + 6.0 * pa_z[j] * pc_xzzz[j] * pb_yz[j] + 3.0 * pa_z[j] * pc_xyzz[j] * pb_zz[j] + 2.0 * pc_zzzz[j] * pb_xyz[j] + pc_yzzz[j] * pb_xzz[j] + pc_xzzz[j] * pb_yzz[j]);

                t_zzz_xyzz[j] += fl_s_0_0_5 * (-3.75 * pc_xyz[j] * fl2_fx - 9.0 * pa_z[j] * pc_xyzz[j] * fl1_fx - 5.0 * pc_yzzz[j] * pb_x[j] * fl1_fx - 5.0 * pc_xzzz[j] * pb_y[j] * fl1_fx - 5.0 * pc_xyzzz[j] * fl1_fx - 6.0 * pc_xyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * pc_xyzzz[j] - 3.0 * pa_z[j] * pc_yzzzz[j] * pb_x[j] - 3.0 * pa_z[j] * pc_xzzzz[j] * pb_y[j] - 6.0 * pa_z[j] * pc_xyzzz[j] * pb_z[j] - pc_zzzzz[j] * pb_xy[j] - 2.0 * pc_yzzzz[j] * pb_xz[j] - 2.0 * pc_xzzzz[j] * pb_yz[j] - pc_xyzzz[j] * pb_zz[j]);

                t_zzz_xyzz[j] += fl_s_0_0_6 * (5.0 * pc_xyzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xyzzzz[j] + pc_yzzzzz[j] * pb_x[j] + pc_xzzzzz[j] * pb_y[j] + 2.0 * pc_xyzzzz[j] * pb_z[j]);

                t_zzz_xyzz[j] += -fl_s_0_0_7 * pc_xyzzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_144_147(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (144,147)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_x = pbDistances.data(34 * idx);

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_xz = pbDistances.data(34 * idx + 5);

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_xzz = pbDistances.data(34 * idx + 14);

            auto pb_yyy = pbDistances.data(34 * idx + 15);

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_xzzz = pbDistances.data(34 * idx + 28);

            auto pb_yyyy = pbDistances.data(34 * idx + 29);

            auto pb_yyyz = pbDistances.data(34 * idx + 30);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_x = pcDistances.data(119 * idx);

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_xz = pcDistances.data(119 * idx + 5);

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_xzz = pcDistances.data(119 * idx + 14);

            auto pc_yyy = pcDistances.data(119 * idx + 15);

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_xzzz = pcDistances.data(119 * idx + 28);

            auto pc_yyyy = pcDistances.data(119 * idx + 29);

            auto pc_yyyz = pcDistances.data(119 * idx + 30);

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_xzzzz = pcDistances.data(119 * idx + 48);

            auto pc_yyyyz = pcDistances.data(119 * idx + 50);

            auto pc_yyyzz = pcDistances.data(119 * idx + 51);

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_xzzzzz = pcDistances.data(119 * idx + 75);

            auto pc_yyyyzz = pcDistances.data(119 * idx + 78);

            auto pc_yyyzzz = pcDistances.data(119 * idx + 79);

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_xzzzzzz = pcDistances.data(119 * idx + 110);

            auto pc_yyyyzzz = pcDistances.data(119 * idx + 114);

            auto pc_yyyzzzz = pcDistances.data(119 * idx + 115);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzz_xzzz = primBuffer.data(150 * idx + 144);

            auto t_zzz_yyyy = primBuffer.data(150 * idx + 145);

            auto t_zzz_yyyz = primBuffer.data(150 * idx + 146);

            // Batch of Integrals (144,147)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pb_x, pb_xz, pb_xzz, pb_xzzz, pb_y, pb_yy, pb_yyy, \
                                     pb_yyyy, pb_yyyz, pb_yyz, pb_yz, pb_z, pb_zz, pb_zzz, pc_x, pc_xz, pc_xzz, pc_xzzz, \
                                     pc_xzzzz, pc_xzzzzz, pc_xzzzzzz, pc_y, pc_yy, pc_yyy, pc_yyyy, pc_yyyyz, pc_yyyyzz, \
                                     pc_yyyyzzz, pc_yyyz, pc_yyyzz, pc_yyyzzz, pc_yyyzzzz, pc_yyz, pc_yyzz, pc_yyzzz, \
                                     pc_yyzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_z, pc_zz, pc_zzz, pc_zzzz, pc_zzzzz, \
                                     pc_zzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, \
                                     t_zzz_xzzz, t_zzz_yyyy, t_zzz_yyyz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzz_xzzz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_x[j] + 2.25 * pa_zz[j] * fl2_fx * pb_x[j] + 6.75 * pa_z[j] * fl2_fx * pb_xz[j] + 2.25 * fl2_fx * pb_xzz[j] + 1.5 * pa_zzz[j] * pb_xz[j] * fl1_fx + 4.5 * pa_zz[j] * fl1_fx * pb_xzz[j] + 1.5 * pa_z[j] * fl1_fx * pb_xzzz[j] + pa_zzz[j] * pb_xzzz[j]);

                t_zzz_xzzz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_x[j] - 5.625 * fl3_fx * pb_x[j] - 4.5 * pa_zz[j] * fl2_fx * pb_x[j] - 2.25 * pa_zz[j] * fl2_fx * pc_x[j] - 11.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 6.75 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 13.5 * pa_z[j] * fl2_fx * pb_xz[j] - 11.25 * pc_z[j] * fl2_fx * pb_xz[j] - 2.25 * fl2_fx * pc_x[j] * pb_zz[j] - 4.5 * fl2_fx * pb_xzz[j] - 1.5 * pa_zzz[j] * pb_xz[j] * fl1_fx - 1.5 * pa_zzz[j] * pb_x[j] * pc_z[j] * fl1_fx - 1.5 * pa_zzz[j] * pc_x[j] * pb_z[j] * fl1_fx - 13.5 * pa_zz[j] * pc_z[j] * pb_xz[j] * fl1_fx - 4.5 * pa_zz[j] * fl1_fx * pc_x[j] * pb_zz[j] - 4.5 * pa_zz[j] * fl1_fx * pb_xzz[j] - 13.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xzz[j] - 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_zzz[j] - 1.5 * pa_z[j] * fl1_fx * pb_xzzz[j] - 1.5 * pc_z[j] * fl1_fx * pb_xzzz[j] - 3.0 * pa_zzz[j] * pb_xzz[j] * pc_z[j] - pa_zzz[j] * pc_x[j] * pb_zzz[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_xzzz[j]);

                t_zzz_xzzz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_x[j] + 5.625 * fl3_fx * pb_x[j] + 4.5 * pa_zz[j] * fl2_fx * pc_x[j] + 2.25 * pa_zz[j] * fl2_fx * pb_x[j] + 22.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] + 11.25 * pa_z[j] * pc_xz[j] * fl2_fx + 13.5 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] + 6.75 * pa_z[j] * fl2_fx * pb_xz[j] + 11.25 * pc_zz[j] * fl2_fx * pb_x[j] + 11.25 * pc_xz[j] * fl2_fx * pb_z[j] + 22.5 * pc_z[j] * fl2_fx * pb_xz[j] + 4.5 * fl2_fx * pc_x[j] * pb_zz[j] + 2.25 * fl2_fx * pb_xzz[j] + 1.5 * pa_zzz[j] * pb_x[j] * pc_z[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_x[j] * pb_z[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_xz[j] * fl1_fx + 13.5 * pa_zz[j] * pc_z[j] * pb_xz[j] * fl1_fx + 9.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx + 13.5 * pa_zz[j] * pc_xz[j] * pb_z[j] * fl1_fx + 4.5 * pa_zz[j] * fl1_fx * pc_x[j] * pb_zz[j] + 27.0 * pa_z[j] * pc_zz[j] * pb_xz[j] * fl1_fx + 13.5 * pa_z[j] * pc_xz[j] * fl1_fx * pb_zz[j] + 13.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_xzz[j] + 9.0 * pc_zz[j] * fl1_fx * pb_xzz[j] + 1.5 * pa_z[j] * fl1_fx * pc_x[j] * pb_zzz[j] + 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_z[j] * fl1_fx * pb_xzzz[j] + 3.0 * pa_zzz[j] * pb_xz[j] * pc_zz[j] + 3.0 * pa_zzz[j] * pc_xz[j] * pb_zz[j] + 9.0 * pa_zz[j] * pc_zz[j] * pb_xzz[j] + 3.0 * pa_zz[j] * pc_xz[j] * pb_zzz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_xzzz[j]);

                t_zzz_xzzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_x[j] - 1.875 * fl3_fx * pb_x[j] - 2.25 * pa_zz[j] * fl2_fx * pc_x[j] - 22.5 * pa_z[j] * pc_xz[j] * fl2_fx - 11.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_x[j] - 6.75 * pa_z[j] * fl2_fx * pc_x[j] * pb_z[j] - 22.5 * pc_zz[j] * fl2_fx * pb_x[j] - 11.25 * pc_xzz[j] * fl2_fx - 22.5 * pc_xz[j] * fl2_fx * pb_z[j] - 11.25 * pc_z[j] * fl2_fx * pb_xz[j] - 2.25 * fl2_fx * pc_x[j] * pb_zz[j] - 1.5 * pa_zzz[j] * pc_xz[j] * fl1_fx - 9.0 * pa_zz[j] * pc_zz[j] * pb_x[j] * fl1_fx - 13.5 * pa_zz[j] * pc_xz[j] * pb_z[j] * fl1_fx - 9.0 * pa_zz[j] * pc_xzz[j] * fl1_fx - 27.0 * pa_z[j] * pc_zz[j] * pb_xz[j] * fl1_fx - 15.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx - 27.0 * pa_z[j] * pc_xzz[j] * pb_z[j] * fl1_fx - 13.5 * pa_z[j] * pc_xz[j] * fl1_fx * pb_zz[j] - 15.0 * pc_zzz[j] * pb_xz[j] * fl1_fx - 9.0 * pc_xzz[j] * fl1_fx * pb_zz[j] - 9.0 * pc_zz[j] * fl1_fx * pb_xzz[j] - 1.5 * pc_xz[j] * fl1_fx * pb_zzz[j] - pa_zzz[j] * pb_x[j] * pc_zzz[j] - 3.0 * pa_zzz[j] * pc_xzz[j] * pb_z[j] - 9.0 * pa_zz[j] * pc_zzz[j] * pb_xz[j] - 9.0 * pa_zz[j] * pc_xzz[j] * pb_zz[j] - 9.0 * pa_z[j] * pc_zzz[j] * pb_xzz[j] - 3.0 * pa_z[j] * pc_xzz[j] * pb_zzz[j] - pc_zzz[j] * pb_xzzz[j]);

                t_zzz_xzzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_x[j] + 11.25 * pa_z[j] * pc_xz[j] * fl2_fx + 22.5 * pc_xzz[j] * fl2_fx + 11.25 * pc_zz[j] * fl2_fx * pb_x[j] + 11.25 * pc_xz[j] * fl2_fx * pb_z[j] + 9.0 * pa_zz[j] * pc_xzz[j] * fl1_fx + 15.0 * pa_z[j] * pc_zzz[j] * pb_x[j] * fl1_fx + 27.0 * pa_z[j] * pc_xzz[j] * pb_z[j] * fl1_fx + 15.0 * pa_z[j] * pc_xzzz[j] * fl1_fx + 15.0 * pc_zzz[j] * pb_xz[j] * fl1_fx + 7.5 * pc_zzzz[j] * pb_x[j] * fl1_fx + 15.0 * pc_xzzz[j] * pb_z[j] * fl1_fx + 9.0 * pc_xzz[j] * fl1_fx * pb_zz[j] + pa_zzz[j] * pc_xzzz[j] + 3.0 * pa_zz[j] * pc_zzzz[j] * pb_x[j] + 9.0 * pa_zz[j] * pc_xzzz[j] * pb_z[j] + 9.0 * pa_z[j] * pc_zzzz[j] * pb_xz[j] + 9.0 * pa_z[j] * pc_xzzz[j] * pb_zz[j] + 3.0 * pc_zzzz[j] * pb_xzz[j] + pc_xzzz[j] * pb_zzz[j]);

                t_zzz_xzzz[j] += fl_s_0_0_5 * (-11.25 * pc_xzz[j] * fl2_fx - 15.0 * pa_z[j] * pc_xzzz[j] * fl1_fx - 7.5 * pc_zzzz[j] * pb_x[j] * fl1_fx - 15.0 * pc_xzzz[j] * pb_z[j] * fl1_fx - 7.5 * pc_xzzzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_xzzzz[j] - 3.0 * pa_z[j] * pc_zzzzz[j] * pb_x[j] - 9.0 * pa_z[j] * pc_xzzzz[j] * pb_z[j] - 3.0 * pc_zzzzz[j] * pb_xz[j] - 3.0 * pc_xzzzz[j] * pb_zz[j]);

                t_zzz_xzzz[j] += fl_s_0_0_6 * (7.5 * pc_xzzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_xzzzzz[j] + pc_zzzzzz[j] * pb_x[j] + 3.0 * pc_xzzzzz[j] * pb_z[j]);

                t_zzz_xzzz[j] += -fl_s_0_0_7 * pc_xzzzzzz[j];

                t_zzz_yyyy[j] = fl_s_0_0_0 * (1.125 * pa_z[j] * fl3_fx + 0.75 * pa_zzz[j] * fl2_fx + 4.5 * pa_z[j] * fl2_fx * pb_yy[j] + 3.0 * pa_zzz[j] * pb_yy[j] * fl1_fx + 1.5 * pa_z[j] * fl1_fx * pb_yyyy[j] + pa_zzz[j] * pb_yyyy[j]);

                t_zzz_yyyy[j] += fl_s_0_0_1 * (-3.375 * pa_z[j] * fl3_fx - 1.125 * pc_z[j] * fl3_fx - 1.5 * pa_zzz[j] * fl2_fx - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 9.0 * pa_z[j] * fl2_fx * pb_yy[j] - 9.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 4.5 * pc_z[j] * fl2_fx * pb_yy[j] - 3.0 * pa_zzz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_zzz[j] * pb_y[j] * pc_y[j] * fl1_fx - 9.0 * pa_zz[j] * pc_z[j] * pb_yy[j] * fl1_fx - 6.0 * pa_z[j] * fl1_fx * pb_yyy[j] * pc_y[j] - 1.5 * pa_z[j] * fl1_fx * pb_yyyy[j] - 1.5 * pc_z[j] * fl1_fx * pb_yyyy[j] - 4.0 * pa_zzz[j] * pb_yyy[j] * pc_y[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_yyyy[j]);

                t_zzz_yyyy[j] += fl_s_0_0_2 * (3.375 * pa_z[j] * fl3_fx + 3.375 * pc_z[j] * fl3_fx + 0.75 * pa_zzz[j] * fl2_fx + 4.5 * pa_zz[j] * pc_z[j] * fl2_fx + 2.25 * pa_z[j] * pc_zz[j] * fl2_fx + 18.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] + 4.5 * pa_z[j] * fl2_fx * pc_yy[j] + 4.5 * pa_z[j] * fl2_fx * pb_yy[j] + 9.0 * pc_z[j] * fl2_fx * pb_yy[j] + 9.0 * pc_yz[j] * fl2_fx * pb_y[j] + 6.0 * pa_zzz[j] * pb_y[j] * pc_y[j] * fl1_fx + 3.0 * pa_zzz[j] * pc_yy[j] * fl1_fx + 9.0 * pa_zz[j] * pc_z[j] * pb_yy[j] * fl1_fx + 18.0 * pa_zz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 9.0 * pa_z[j] * pc_zz[j] * pb_yy[j] * fl1_fx + 9.0 * pa_z[j] * fl1_fx * pb_yy[j] * pc_yy[j] + 6.0 * pa_z[j] * fl1_fx * pb_yyy[j] * pc_y[j] + 6.0 * pc_yz[j] * fl1_fx * pb_yyy[j] + 1.5 * pc_z[j] * fl1_fx * pb_yyyy[j] + 6.0 * pa_zzz[j] * pb_yy[j] * pc_yy[j] + 12.0 * pa_zz[j] * pc_yz[j] * pb_yyy[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_yyyy[j]);

                t_zzz_yyyy[j] += fl_s_0_0_3 * (-1.125 * pa_z[j] * fl3_fx - 3.375 * pc_z[j] * fl3_fx - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 4.5 * pa_z[j] * pc_zz[j] * fl2_fx - 0.75 * pc_zzz[j] * fl2_fx - 9.0 * pa_z[j] * fl2_fx * pc_yy[j] - 9.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 18.0 * pc_yz[j] * fl2_fx * pb_y[j] - 4.5 * pc_yyz[j] * fl2_fx - 4.5 * pc_z[j] * fl2_fx * pb_yy[j] - 3.0 * pa_zzz[j] * pc_yy[j] * fl1_fx - 18.0 * pa_zz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 9.0 * pa_zz[j] * pc_yyz[j] * fl1_fx - 9.0 * pa_z[j] * pc_zz[j] * pb_yy[j] * fl1_fx - 18.0 * pa_z[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_zzz[j] * pb_yy[j] * fl1_fx - 6.0 * pa_z[j] * fl1_fx * pb_y[j] * pc_yyy[j] - 9.0 * pa_z[j] * fl1_fx * pb_yy[j] * pc_yy[j] - 9.0 * pc_yyz[j] * fl1_fx * pb_yy[j] - 6.0 * pc_yz[j] * fl1_fx * pb_yyy[j] - 4.0 * pa_zzz[j] * pb_y[j] * pc_yyy[j] - 18.0 * pa_zz[j] * pc_yyz[j] * pb_yy[j] - 12.0 * pa_z[j] * pc_yzz[j] * pb_yyy[j] - pc_zzz[j] * pb_yyyy[j]);

                t_zzz_yyyy[j] += fl_s_0_0_4 * (1.125 * pc_z[j] * fl3_fx + 2.25 * pa_z[j] * pc_zz[j] * fl2_fx + 1.5 * pc_zzz[j] * fl2_fx + 4.5 * pa_z[j] * fl2_fx * pc_yy[j] + 9.0 * pc_yyz[j] * fl2_fx + 9.0 * pc_yz[j] * fl2_fx * pb_y[j] + 9.0 * pa_zz[j] * pc_yyz[j] * fl1_fx + 18.0 * pa_z[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 9.0 * pa_z[j] * pc_yyzz[j] * fl1_fx + 3.0 * pc_zzz[j] * pb_yy[j] * fl1_fx + 6.0 * pc_yzzz[j] * pb_y[j] * fl1_fx + 1.5 * pa_z[j] * fl1_fx * pc_yyyy[j] + 6.0 * pa_z[j] * fl1_fx * pb_y[j] * pc_yyy[j] + 6.0 * pc_yyyz[j] * fl1_fx * pb_y[j] + 9.0 * pc_yyz[j] * fl1_fx * pb_yy[j] + pa_zzz[j] * pc_yyyy[j] + 12.0 * pa_zz[j] * pc_yyyz[j] * pb_y[j] + 18.0 * pa_z[j] * pc_yyzz[j] * pb_yy[j] + 4.0 * pc_yzzz[j] * pb_yyy[j]);

                t_zzz_yyyy[j] += fl_s_0_0_5 * (-0.75 * pc_zzz[j] * fl2_fx - 4.5 * pc_yyz[j] * fl2_fx - 9.0 * pa_z[j] * pc_yyzz[j] * fl1_fx - 6.0 * pc_yzzz[j] * pb_y[j] * fl1_fx - 3.0 * pc_yyzzz[j] * fl1_fx - 1.5 * pa_z[j] * fl1_fx * pc_yyyy[j] - 1.5 * pc_yyyyz[j] * fl1_fx - 6.0 * pc_yyyz[j] * fl1_fx * pb_y[j] - 3.0 * pa_zz[j] * pc_yyyyz[j] - 12.0 * pa_z[j] * pc_yyyzz[j] * pb_y[j] - 6.0 * pc_yyzzz[j] * pb_yy[j]);

                t_zzz_yyyy[j] += fl_s_0_0_6 * (3.0 * pc_yyzzz[j] * fl1_fx + 1.5 * pc_yyyyz[j] * fl1_fx + 3.0 * pa_z[j] * pc_yyyyzz[j] + 4.0 * pc_yyyzzz[j] * pb_y[j]);

                t_zzz_yyyy[j] += -fl_s_0_0_7 * pc_yyyyzzz[j];

                t_zzz_yyyz[j] = fl_s_0_0_0 * (1.125 * fl3_fx * pb_y[j] + 2.25 * pa_zz[j] * fl2_fx * pb_y[j] + 2.25 * pa_z[j] * fl2_fx * pb_yz[j] + 0.75 * fl2_fx * pb_yyy[j] + 1.5 * pa_zzz[j] * pb_yz[j] * fl1_fx + 1.5 * pa_zz[j] * fl1_fx * pb_yyy[j] + 1.5 * pa_z[j] * fl1_fx * pb_yyyz[j] + pa_zzz[j] * pb_yyyz[j]);

                t_zzz_yyyz[j] += fl_s_0_0_1 * (-3.375 * fl3_fx * pb_y[j] - 1.125 * fl3_fx * pc_y[j] - 4.5 * pa_zz[j] * fl2_fx * pb_y[j] - 2.25 * pa_zz[j] * fl2_fx * pc_y[j] - 6.75 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 4.5 * pa_z[j] * fl2_fx * pb_yz[j] - 2.25 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 2.25 * pc_z[j] * fl2_fx * pb_yz[j] - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * fl2_fx * pb_yyy[j] - 1.5 * pa_zzz[j] * pb_y[j] * fl1_fx * pc_z[j] - 1.5 * pa_zzz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_zzz[j] * pc_y[j] * fl1_fx * pb_z[j] - 4.5 * pa_zz[j] * pc_z[j] * pb_yz[j] * fl1_fx - 4.5 * pa_zz[j] * fl1_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_zz[j] * fl1_fx * pb_yyy[j] - 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyy[j] - 4.5 * pa_z[j] * fl1_fx * pb_yyz[j] * pc_y[j] - 1.5 * pa_z[j] * fl1_fx * pb_yyyz[j] - 1.5 * pc_z[j] * fl1_fx * pb_yyyz[j] - pa_zzz[j] * pb_yyy[j] * pc_z[j] - 3.0 * pa_zzz[j] * pb_yyz[j] * pc_y[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_yyyz[j]);

                t_zzz_yyyz[j] += fl_s_0_0_2 * (3.375 * fl3_fx * pc_y[j] + 3.375 * fl3_fx * pb_y[j] + 4.5 * pa_zz[j] * fl2_fx * pc_y[j] + 2.25 * pa_zz[j] * fl2_fx * pb_y[j] + 13.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] + 6.75 * pa_z[j] * pc_yz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_y[j] + 4.5 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] + 2.25 * pa_z[j] * fl2_fx * pb_yz[j] + 4.5 * pc_z[j] * fl2_fx * pb_yz[j] + 2.25 * pc_yz[j] * fl2_fx * pb_z[j] + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 4.5 * fl2_fx * pb_yy[j] * pc_y[j] + 0.75 * fl2_fx * pb_yyy[j] + 1.5 * pa_zzz[j] * pb_y[j] * fl1_fx * pc_z[j] + 1.5 * pa_zzz[j] * pc_yz[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_y[j] * fl1_fx * pb_z[j] + 4.5 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 4.5 * pa_zz[j] * pc_z[j] * pb_yz[j] * fl1_fx + 4.5 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_z[j] + 4.5 * pa_zz[j] * fl1_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_zz[j] * fl1_fx * pb_yy[j] * pc_y[j] + 4.5 * pa_z[j] * pc_zz[j] * pb_yz[j] * fl1_fx + 13.5 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yy[j] + 4.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyy[j] + 3.0 * pc_zz[j] * fl1_fx * pb_yyy[j] + 4.5 * pa_z[j] * fl1_fx * pb_yz[j] * pc_yy[j] + 4.5 * pa_z[j] * fl1_fx * pb_yyz[j] * pc_y[j] + 4.5 * pc_yz[j] * fl1_fx * pb_yyz[j] + 1.5 * pc_z[j] * fl1_fx * pb_yyyz[j] + 3.0 * pa_zzz[j] * pb_yy[j] * pc_yz[j] + 3.0 * pa_zzz[j] * pb_yz[j] * pc_yy[j] + 3.0 * pa_zz[j] * pc_zz[j] * pb_yyy[j] + 9.0 * pa_zz[j] * pc_yz[j] * pb_yyz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_yyyz[j]);

                t_zzz_yyyz[j] += fl_s_0_0_3 * (-3.375 * fl3_fx * pc_y[j] - 1.125 * fl3_fx * pb_y[j] - 2.25 * pa_zz[j] * fl2_fx * pc_y[j] - 13.5 * pa_z[j] * pc_yz[j] * fl2_fx - 6.75 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 9.0 * pc_zz[j] * fl2_fx * pb_y[j] - 4.5 * pc_yzz[j] * fl2_fx - 2.25 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 4.5 * pc_yz[j] * fl2_fx * pb_z[j] - 2.25 * pc_z[j] * fl2_fx * pb_yz[j] - 0.75 * fl2_fx * pc_yyy[j] - 4.5 * fl2_fx * pb_y[j] * pc_yy[j] - 2.25 * fl2_fx * pb_yy[j] * pc_y[j] - 1.5 * pa_zzz[j] * pc_yz[j] * fl1_fx - 4.5 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 4.5 * pa_zz[j] * pc_yzz[j] * fl1_fx - 4.5 * pa_zz[j] * pc_yz[j] * fl1_fx * pb_z[j] - 1.5 * pa_zz[j] * fl1_fx * pc_yyy[j] - 4.5 * pa_zz[j] * fl1_fx * pb_y[j] * pc_yy[j] - 4.5 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 4.5 * pa_z[j] * pc_zz[j] * pb_yz[j] * fl1_fx - 4.5 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_z[j] - 13.5 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_y[j] - 13.5 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yy[j] - 1.5 * pc_zzz[j] * pb_yz[j] * fl1_fx - 9.0 * pc_yzz[j] * fl1_fx * pb_yy[j] - 3.0 * pc_zz[j] * fl1_fx * pb_yyy[j] - 1.5 * pa_z[j] * fl1_fx * pc_yyy[j] * pb_z[j] - 4.5 * pa_z[j] * fl1_fx * pb_yz[j] * pc_yy[j] - 4.5 * pc_yyz[j] * fl1_fx * pb_yz[j] - 4.5 * pc_yz[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_zzz[j] * pb_y[j] * pc_yyz[j] - pa_zzz[j] * pc_yyy[j] * pb_z[j] - 9.0 * pa_zz[j] * pc_yzz[j] * pb_yy[j] - 9.0 * pa_zz[j] * pc_yyz[j] * pb_yz[j] - 3.0 * pa_z[j] * pc_zzz[j] * pb_yyy[j] - 9.0 * pa_z[j] * pc_yzz[j] * pb_yyz[j] - pc_zzz[j] * pb_yyyz[j]);

                t_zzz_yyyz[j] += fl_s_0_0_4 * (1.125 * fl3_fx * pc_y[j] + 6.75 * pa_z[j] * pc_yz[j] * fl2_fx + 9.0 * pc_yzz[j] * fl2_fx + 4.5 * pc_zz[j] * fl2_fx * pb_y[j] + 2.25 * pc_yz[j] * fl2_fx * pb_z[j] + 1.5 * fl2_fx * pc_yyy[j] + 2.25 * fl2_fx * pb_y[j] * pc_yy[j] + 4.5 * pa_zz[j] * pc_yzz[j] * fl1_fx + 1.5 * pa_zz[j] * fl1_fx * pc_yyy[j] + 4.5 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 4.5 * pa_z[j] * pc_yzzz[j] * fl1_fx + 4.5 * pa_z[j] * pc_yzz[j] * fl1_fx * pb_z[j] + 4.5 * pa_z[j] * pc_yyyz[j] * fl1_fx + 13.5 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_y[j] + 1.5 * pc_zzzz[j] * pb_y[j] * fl1_fx + 1.5 * pc_zzz[j] * pb_yz[j] * fl1_fx + 1.5 * pc_yzzz[j] * fl1_fx * pb_z[j] + 9.0 * pc_yyzz[j] * fl1_fx * pb_y[j] + 9.0 * pc_yzz[j] * fl1_fx * pb_yy[j] + 1.5 * pa_z[j] * fl1_fx * pc_yyy[j] * pb_z[j] + 1.5 * pc_yyyz[j] * fl1_fx * pb_z[j] + 4.5 * pc_yyz[j] * fl1_fx * pb_yz[j] + pa_zzz[j] * pc_yyyz[j] + 9.0 * pa_zz[j] * pc_yyzz[j] * pb_y[j] + 3.0 * pa_zz[j] * pc_yyyz[j] * pb_z[j] + 9.0 * pa_z[j] * pc_yzzz[j] * pb_yy[j] + 9.0 * pa_z[j] * pc_yyzz[j] * pb_yz[j] + pc_zzzz[j] * pb_yyy[j] + 3.0 * pc_yzzz[j] * pb_yyz[j]);

                t_zzz_yyyz[j] += fl_s_0_0_5 * (-4.5 * pc_yzz[j] * fl2_fx - 0.75 * fl2_fx * pc_yyy[j] - 4.5 * pa_z[j] * pc_yzzz[j] * fl1_fx - 4.5 * pa_z[j] * pc_yyyz[j] * fl1_fx - 1.5 * pc_zzzz[j] * pb_y[j] * fl1_fx - 1.5 * pc_yzzzz[j] * fl1_fx - 1.5 * pc_yzzz[j] * fl1_fx * pb_z[j] - 3.0 * pc_yyyzz[j] * fl1_fx - 9.0 * pc_yyzz[j] * fl1_fx * pb_y[j] - 1.5 * pc_yyyz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * pc_yyyzz[j] - 9.0 * pa_z[j] * pc_yyzzz[j] * pb_y[j] - 3.0 * pa_z[j] * pc_yyyzz[j] * pb_z[j] - 3.0 * pc_yzzzz[j] * pb_yy[j] - 3.0 * pc_yyzzz[j] * pb_yz[j]);

                t_zzz_yyyz[j] += fl_s_0_0_6 * (1.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pc_yyyzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_yyyzzz[j] + 3.0 * pc_yyzzzz[j] * pb_y[j] + pc_yyyzzz[j] * pb_z[j]);

                t_zzz_yyyz[j] += -fl_s_0_0_7 * pc_yyyzzzz[j];
            }

            idx++;
        }
    }

    void
    compNuclearPotentialForFG_147_150(      CMemBlock2D<double>& primBuffer,
                                      const CMemBlock2D<double>& auxBuffer,
                                      const CMemBlock2D<double>& osFactors,
                                      const CMemBlock2D<double>& paDistances,
                                      const CMemBlock2D<double>& pbDistances,
                                      const CMemBlock2D<double>& pcDistances,
                                      const CGtoBlock&           braGtoBlock,
                                      const CGtoBlock&           ketGtoBlock,
                                      const int32_t              iContrGto)
    {
        // Batch of Integrals (147,150)

        // set up pointers to primitives data on bra side

        auto spos = braGtoBlock.getStartPositions();

        auto epos = braGtoBlock.getEndPositions();

        // set up pointers to primitives data on ket side

        auto nprim = ketGtoBlock.getNumberOfPrimGtos();

        // loop over contracted GTO on bra side

        int32_t idx = 0;

        for (int32_t i = spos[iContrGto]; i < epos[iContrGto]; i++)
        {
            // set up pointers to Obara-Saika factors

            auto fx = osFactors.data(3 * idx);

            // set up pointers to 1-th order tensor of distance R(PA)

            auto pa_z = paDistances.data(19 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PA)

            auto pa_zz = paDistances.data(19 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PA)

            auto pa_zzz = paDistances.data(19 * idx + 18);

            // set up pointers to 1-th order tensor of distance R(PB)

            auto pb_y = pbDistances.data(34 * idx + 1);

            auto pb_z = pbDistances.data(34 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PB)

            auto pb_yy = pbDistances.data(34 * idx + 6);

            auto pb_yz = pbDistances.data(34 * idx + 7);

            auto pb_zz = pbDistances.data(34 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PB)

            auto pb_yyz = pbDistances.data(34 * idx + 16);

            auto pb_yzz = pbDistances.data(34 * idx + 17);

            auto pb_zzz = pbDistances.data(34 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PB)

            auto pb_yyzz = pbDistances.data(34 * idx + 31);

            auto pb_yzzz = pbDistances.data(34 * idx + 32);

            auto pb_zzzz = pbDistances.data(34 * idx + 33);

            // set up pointers to 1-th order tensor of distance R(PC)

            auto pc_y = pcDistances.data(119 * idx + 1);

            auto pc_z = pcDistances.data(119 * idx + 2);

            // set up pointers to 2-th order tensor of distance R(PC)

            auto pc_yy = pcDistances.data(119 * idx + 6);

            auto pc_yz = pcDistances.data(119 * idx + 7);

            auto pc_zz = pcDistances.data(119 * idx + 8);

            // set up pointers to 3-th order tensor of distance R(PC)

            auto pc_yyz = pcDistances.data(119 * idx + 16);

            auto pc_yzz = pcDistances.data(119 * idx + 17);

            auto pc_zzz = pcDistances.data(119 * idx + 18);

            // set up pointers to 4-th order tensor of distance R(PC)

            auto pc_yyzz = pcDistances.data(119 * idx + 31);

            auto pc_yzzz = pcDistances.data(119 * idx + 32);

            auto pc_zzzz = pcDistances.data(119 * idx + 33);

            // set up pointers to 5-th order tensor of distance R(PC)

            auto pc_yyzzz = pcDistances.data(119 * idx + 52);

            auto pc_yzzzz = pcDistances.data(119 * idx + 53);

            auto pc_zzzzz = pcDistances.data(119 * idx + 54);

            // set up pointers to 6-th order tensor of distance R(PC)

            auto pc_yyzzzz = pcDistances.data(119 * idx + 80);

            auto pc_yzzzzz = pcDistances.data(119 * idx + 81);

            auto pc_zzzzzz = pcDistances.data(119 * idx + 82);

            // set up pointers to 7-th order tensor of distance R(PC)

            auto pc_yyzzzzz = pcDistances.data(119 * idx + 116);

            auto pc_yzzzzzz = pcDistances.data(119 * idx + 117);

            auto pc_zzzzzzz = pcDistances.data(119 * idx + 118);

            // set up pointers to auxilary integrals

            auto s_0_0_0 = auxBuffer.data(8 * idx);

            auto s_0_0_1 = auxBuffer.data(8 * idx + 1);

            auto s_0_0_2 = auxBuffer.data(8 * idx + 2);

            auto s_0_0_3 = auxBuffer.data(8 * idx + 3);

            auto s_0_0_4 = auxBuffer.data(8 * idx + 4);

            auto s_0_0_5 = auxBuffer.data(8 * idx + 5);

            auto s_0_0_6 = auxBuffer.data(8 * idx + 6);

            auto s_0_0_7 = auxBuffer.data(8 * idx + 7);

            // set up pointers to integrals

            auto t_zzz_yyzz = primBuffer.data(150 * idx + 147);

            auto t_zzz_yzzz = primBuffer.data(150 * idx + 148);

            auto t_zzz_zzzz = primBuffer.data(150 * idx + 149);

            // Batch of Integrals (147,150)

            #pragma omp simd aligned(fx, pa_z, pa_zz, pa_zzz, pb_y, pb_yy, pb_yyz, pb_yyzz, pb_yz, pb_yzz, pb_yzzz, \
                                     pb_z, pb_zz, pb_zzz, pb_zzzz, pc_y, pc_yy, pc_yyz, pc_yyzz, pc_yyzzz, pc_yyzzzz, \
                                     pc_yyzzzzz, pc_yz, pc_yzz, pc_yzzz, pc_yzzzz, pc_yzzzzz, pc_yzzzzzz, pc_z, pc_zz, pc_zzz, \
                                     pc_zzzz, pc_zzzzz, pc_zzzzzz, pc_zzzzzzz, s_0_0_0, s_0_0_1, s_0_0_2, s_0_0_3, \
                                     s_0_0_4, s_0_0_5, s_0_0_6, s_0_0_7, t_zzz_yyzz, t_zzz_yzzz, t_zzz_zzzz: VLX_ALIGN)
            for (int32_t j = 0; j < nprim; j++)
            {
                double fl_s_0_0_0 = s_0_0_0[j];

                double fl_s_0_0_1 = s_0_0_1[j];

                double fl_s_0_0_2 = s_0_0_2[j];

                double fl_s_0_0_3 = s_0_0_3[j];

                double fl_s_0_0_4 = s_0_0_4[j];

                double fl_s_0_0_5 = s_0_0_5[j];

                double fl_s_0_0_6 = s_0_0_6[j];

                double fl_s_0_0_7 = s_0_0_7[j];

                double fl1_fx = fx[j];

                double fl2_fx = fx[j] * fx[j];

                double fl3_fx = fx[j] * fx[j] * fx[j];

                t_zzz_yyzz[j] = fl_s_0_0_0 * (1.125 * pa_z[j] * fl3_fx + 0.75 * fl3_fx * pb_z[j] + 0.25 * pa_zzz[j] * fl2_fx + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 2.25 * pa_z[j] * fl2_fx * pb_yy[j] + 0.75 * pa_z[j] * fl2_fx * pb_zz[j] + 1.5 * fl2_fx * pb_yyz[j] + 0.5 * pa_zzz[j] * pb_yy[j] * fl1_fx + 0.5 * pa_zzz[j] * fl1_fx * pb_zz[j] + 3.0 * pa_zz[j] * fl1_fx * pb_yyz[j] + 1.5 * pa_z[j] * fl1_fx * pb_yyzz[j] + pa_zzz[j] * pb_yyzz[j]);

                t_zzz_yyzz[j] += fl_s_0_0_1 * (-3.375 * pa_z[j] * fl3_fx - 1.875 * pc_z[j] * fl3_fx - 2.25 * fl3_fx * pb_z[j] - 0.5 * pa_zzz[j] * fl2_fx - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 3.0 * pa_zz[j] * fl2_fx * pb_z[j] - 4.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 4.5 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 4.5 * pa_z[j] * fl2_fx * pb_yy[j] - 3.75 * pc_z[j] * fl2_fx * pb_yy[j] - 1.5 * pa_z[j] * fl2_fx * pb_zz[j] - 0.75 * pc_z[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pb_yz[j] * pc_y[j] - 3.0 * fl2_fx * pb_yyz[j] - 0.5 * pa_zzz[j] * pb_yy[j] * fl1_fx - pa_zzz[j] * pb_y[j] * pc_y[j] * fl1_fx - pa_zzz[j] * fl1_fx * pb_z[j] * pc_z[j] - 0.5 * pa_zzz[j] * fl1_fx * pb_zz[j] - 4.5 * pa_zz[j] * pc_z[j] * pb_yy[j] * fl1_fx - 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_zz[j] - 6.0 * pa_zz[j] * fl1_fx * pb_yz[j] * pc_y[j] - 3.0 * pa_zz[j] * fl1_fx * pb_yyz[j] - 9.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyz[j] - 3.0 * pa_z[j] * fl1_fx * pb_yzz[j] * pc_y[j] - 1.5 * pa_z[j] * fl1_fx * pb_yyzz[j] - 1.5 * pc_z[j] * fl1_fx * pb_yyzz[j] - 2.0 * pa_zzz[j] * pb_yyz[j] * pc_z[j] - 2.0 * pa_zzz[j] * pb_yzz[j] * pc_y[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_yyzz[j]);

                t_zzz_yyzz[j] += fl_s_0_0_2 * (3.375 * pa_z[j] * fl3_fx + 5.625 * pc_z[j] * fl3_fx + 2.25 * fl3_fx * pb_z[j] + 0.25 * pa_zzz[j] * fl2_fx + 4.5 * pa_zz[j] * pc_z[j] * fl2_fx + 1.5 * pa_zz[j] * fl2_fx * pb_z[j] + 4.5 * pa_z[j] * pc_zz[j] * fl2_fx + 9.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] + 2.25 * pa_z[j] * fl2_fx * pc_yy[j] + 9.0 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] + 2.25 * pa_z[j] * fl2_fx * pb_yy[j] + 3.0 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_yz[j] * fl2_fx * pb_y[j] + 7.5 * pc_z[j] * fl2_fx * pb_yy[j] + 0.75 * pa_z[j] * fl2_fx * pb_zz[j] + 1.5 * pc_z[j] * fl2_fx * pb_zz[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 6.0 * fl2_fx * pb_yz[j] * pc_y[j] + 1.5 * fl2_fx * pb_yyz[j] + pa_zzz[j] * pb_y[j] * pc_y[j] * fl1_fx + 0.5 * pa_zzz[j] * pc_yy[j] * fl1_fx + 0.5 * pa_zzz[j] * fl1_fx * pc_zz[j] + pa_zzz[j] * fl1_fx * pb_z[j] * pc_z[j] + 4.5 * pa_zz[j] * pc_z[j] * pb_yy[j] * fl1_fx + 9.0 * pa_zz[j] * pc_yz[j] * pb_y[j] * fl1_fx + 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] + 1.5 * pa_zz[j] * pc_z[j] * fl1_fx * pb_zz[j] + 3.0 * pa_zz[j] * fl1_fx * pc_yy[j] * pb_z[j] + 6.0 * pa_zz[j] * fl1_fx * pb_yz[j] * pc_y[j] + 9.0 * pa_z[j] * pc_zz[j] * pb_yy[j] * fl1_fx + 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_zz[j] + 18.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yz[j] + 9.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_yyz[j] + 6.0 * pc_zz[j] * fl1_fx * pb_yyz[j] + 1.5 * pa_z[j] * fl1_fx * pc_yy[j] * pb_zz[j] + 3.0 * pa_z[j] * fl1_fx * pb_yzz[j] * pc_y[j] + 3.0 * pc_yz[j] * fl1_fx * pb_yzz[j] + 1.5 * pc_z[j] * fl1_fx * pb_yyzz[j] + pa_zzz[j] * pb_yy[j] * pc_zz[j] + 4.0 * pa_zzz[j] * pb_yz[j] * pc_yz[j] + pa_zzz[j] * pc_yy[j] * pb_zz[j] + 6.0 * pa_zz[j] * pc_zz[j] * pb_yyz[j] + 6.0 * pa_zz[j] * pc_yz[j] * pb_yzz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_yyzz[j]);

                t_zzz_yyzz[j] += fl_s_0_0_3 * (-1.125 * pa_z[j] * fl3_fx - 5.625 * pc_z[j] * fl3_fx - 0.75 * fl3_fx * pb_z[j] - 2.25 * pa_zz[j] * pc_z[j] * fl2_fx - 9.0 * pa_z[j] * pc_zz[j] * fl2_fx - 4.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 4.5 * pa_z[j] * fl2_fx * pc_yy[j] - 4.5 * pa_z[j] * fl2_fx * pb_y[j] * pc_y[j] - 2.5 * pc_zzz[j] * fl2_fx - 6.0 * pc_zz[j] * fl2_fx * pb_z[j] - 3.75 * pc_yyz[j] * fl2_fx - 15.0 * pc_yz[j] * fl2_fx * pb_y[j] - 3.75 * pc_z[j] * fl2_fx * pb_yy[j] - 0.75 * pc_z[j] * fl2_fx * pb_zz[j] - 3.0 * fl2_fx * pc_yy[j] * pb_z[j] - 3.0 * fl2_fx * pb_yz[j] * pc_y[j] - 0.5 * pa_zzz[j] * pc_yy[j] * fl1_fx - 0.5 * pa_zzz[j] * fl1_fx * pc_zz[j] - 9.0 * pa_zz[j] * pc_yz[j] * pb_y[j] * fl1_fx - 4.5 * pa_zz[j] * pc_yyz[j] * fl1_fx - 1.5 * pa_zz[j] * pc_zzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_zz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * fl1_fx * pc_yy[j] * pb_z[j] - 9.0 * pa_z[j] * pc_zz[j] * pb_yy[j] * fl1_fx - 18.0 * pa_z[j] * pc_yzz[j] * pb_y[j] * fl1_fx - 3.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] - 1.5 * pa_z[j] * pc_zz[j] * fl1_fx * pb_zz[j] - 9.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_z[j] - 18.0 * pa_z[j] * pc_yz[j] * fl1_fx * pb_yz[j] - 5.0 * pc_zzz[j] * pb_yy[j] * fl1_fx - 0.5 * pc_zzz[j] * fl1_fx * pb_zz[j] - 12.0 * pc_yzz[j] * fl1_fx * pb_yz[j] - 6.0 * pc_zz[j] * fl1_fx * pb_yyz[j] - 1.5 * pa_z[j] * fl1_fx * pc_yy[j] * pb_zz[j] - 1.5 * pc_yyz[j] * fl1_fx * pb_zz[j] - 3.0 * pc_yz[j] * fl1_fx * pb_yzz[j] - 2.0 * pa_zzz[j] * pb_y[j] * pc_yzz[j] - 2.0 * pa_zzz[j] * pc_yyz[j] * pb_z[j] - 3.0 * pa_zz[j] * pc_zzz[j] * pb_yy[j] - 12.0 * pa_zz[j] * pc_yzz[j] * pb_yz[j] - 3.0 * pa_zz[j] * pc_yyz[j] * pb_zz[j] - 6.0 * pa_z[j] * pc_zzz[j] * pb_yyz[j] - 6.0 * pa_z[j] * pc_yzz[j] * pb_yzz[j] - pc_zzz[j] * pb_yyzz[j]);

                t_zzz_yyzz[j] += fl_s_0_0_4 * (1.875 * pc_z[j] * fl3_fx + 4.5 * pa_z[j] * pc_zz[j] * fl2_fx + 2.25 * pa_z[j] * fl2_fx * pc_yy[j] + 5.0 * pc_zzz[j] * fl2_fx + 3.0 * pc_zz[j] * fl2_fx * pb_z[j] + 7.5 * pc_yyz[j] * fl2_fx + 7.5 * pc_yz[j] * fl2_fx * pb_y[j] + 1.5 * fl2_fx * pc_yy[j] * pb_z[j] + 4.5 * pa_zz[j] * pc_yyz[j] * fl1_fx + 1.5 * pa_zz[j] * pc_zzz[j] * fl1_fx + 18.0 * pa_z[j] * pc_yzz[j] * pb_y[j] * fl1_fx + 9.0 * pa_z[j] * pc_yyzz[j] * fl1_fx + 1.5 * pa_z[j] * pc_zzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_zzz[j] * fl1_fx * pb_z[j] + 9.0 * pa_z[j] * pc_yyz[j] * fl1_fx * pb_z[j] + 5.0 * pc_zzz[j] * pb_yy[j] * fl1_fx + 10.0 * pc_yzzz[j] * pb_y[j] * fl1_fx + pc_zzzz[j] * fl1_fx * pb_z[j] + 0.5 * pc_zzz[j] * fl1_fx * pb_zz[j] + 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] + 12.0 * pc_yzz[j] * fl1_fx * pb_yz[j] + 1.5 * pc_yyz[j] * fl1_fx * pb_zz[j] + pa_zzz[j] * pc_yyzz[j] + 6.0 * pa_zz[j] * pc_yzzz[j] * pb_y[j] + 6.0 * pa_zz[j] * pc_yyzz[j] * pb_z[j] + 3.0 * pa_z[j] * pc_zzzz[j] * pb_yy[j] + 12.0 * pa_z[j] * pc_yzzz[j] * pb_yz[j] + 3.0 * pa_z[j] * pc_yyzz[j] * pb_zz[j] + 2.0 * pc_zzzz[j] * pb_yyz[j] + 2.0 * pc_yzzz[j] * pb_yzz[j]);

                t_zzz_yyzz[j] += fl_s_0_0_5 * (-2.5 * pc_zzz[j] * fl2_fx - 3.75 * pc_yyz[j] * fl2_fx - 9.0 * pa_z[j] * pc_yyzz[j] * fl1_fx - 1.5 * pa_z[j] * pc_zzzz[j] * fl1_fx - 10.0 * pc_yzzz[j] * pb_y[j] * fl1_fx - 5.0 * pc_yyzzz[j] * fl1_fx - 0.5 * pc_zzzzz[j] * fl1_fx - pc_zzzz[j] * fl1_fx * pb_z[j] - 6.0 * pc_yyzz[j] * fl1_fx * pb_z[j] - 3.0 * pa_zz[j] * pc_yyzzz[j] - 6.0 * pa_z[j] * pc_yzzzz[j] * pb_y[j] - 6.0 * pa_z[j] * pc_yyzzz[j] * pb_z[j] - pc_zzzzz[j] * pb_yy[j] - 4.0 * pc_yzzzz[j] * pb_yz[j] - pc_yyzzz[j] * pb_zz[j]);

                t_zzz_yyzz[j] += fl_s_0_0_6 * (5.0 * pc_yyzzz[j] * fl1_fx + 0.5 * pc_zzzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_yyzzzz[j] + 2.0 * pc_yzzzzz[j] * pb_y[j] + 2.0 * pc_yyzzzz[j] * pb_z[j]);

                t_zzz_yyzz[j] += -fl_s_0_0_7 * pc_yyzzzzz[j];

                t_zzz_yzzz[j] = fl_s_0_0_0 * (1.875 * fl3_fx * pb_y[j] + 2.25 * pa_zz[j] * fl2_fx * pb_y[j] + 6.75 * pa_z[j] * fl2_fx * pb_yz[j] + 2.25 * fl2_fx * pb_yzz[j] + 1.5 * pa_zzz[j] * pb_yz[j] * fl1_fx + 4.5 * pa_zz[j] * fl1_fx * pb_yzz[j] + 1.5 * pa_z[j] * fl1_fx * pb_yzzz[j] + pa_zzz[j] * pb_yzzz[j]);

                t_zzz_yzzz[j] += fl_s_0_0_1 * (-1.875 * fl3_fx * pc_y[j] - 5.625 * fl3_fx * pb_y[j] - 4.5 * pa_zz[j] * fl2_fx * pb_y[j] - 2.25 * pa_zz[j] * fl2_fx * pc_y[j] - 11.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 6.75 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 13.5 * pa_z[j] * fl2_fx * pb_yz[j] - 11.25 * pc_z[j] * fl2_fx * pb_yz[j] - 2.25 * fl2_fx * pc_y[j] * pb_zz[j] - 4.5 * fl2_fx * pb_yzz[j] - 1.5 * pa_zzz[j] * pb_yz[j] * fl1_fx - 1.5 * pa_zzz[j] * pb_y[j] * pc_z[j] * fl1_fx - 1.5 * pa_zzz[j] * pc_y[j] * pb_z[j] * fl1_fx - 13.5 * pa_zz[j] * pc_z[j] * pb_yz[j] * fl1_fx - 4.5 * pa_zz[j] * fl1_fx * pc_y[j] * pb_zz[j] - 4.5 * pa_zz[j] * fl1_fx * pb_yzz[j] - 13.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_yzz[j] - 1.5 * pa_z[j] * fl1_fx * pc_y[j] * pb_zzz[j] - 1.5 * pa_z[j] * fl1_fx * pb_yzzz[j] - 1.5 * pc_z[j] * fl1_fx * pb_yzzz[j] - 3.0 * pa_zzz[j] * pb_yzz[j] * pc_z[j] - pa_zzz[j] * pc_y[j] * pb_zzz[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_yzzz[j]);

                t_zzz_yzzz[j] += fl_s_0_0_2 * (5.625 * fl3_fx * pc_y[j] + 5.625 * fl3_fx * pb_y[j] + 4.5 * pa_zz[j] * fl2_fx * pc_y[j] + 2.25 * pa_zz[j] * fl2_fx * pb_y[j] + 22.5 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] + 11.25 * pa_z[j] * pc_yz[j] * fl2_fx + 13.5 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] + 6.75 * pa_z[j] * fl2_fx * pb_yz[j] + 11.25 * pc_zz[j] * fl2_fx * pb_y[j] + 11.25 * pc_yz[j] * fl2_fx * pb_z[j] + 22.5 * pc_z[j] * fl2_fx * pb_yz[j] + 4.5 * fl2_fx * pc_y[j] * pb_zz[j] + 2.25 * fl2_fx * pb_yzz[j] + 1.5 * pa_zzz[j] * pb_y[j] * pc_z[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_y[j] * pb_z[j] * fl1_fx + 1.5 * pa_zzz[j] * pc_yz[j] * fl1_fx + 13.5 * pa_zz[j] * pc_z[j] * pb_yz[j] * fl1_fx + 9.0 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx + 13.5 * pa_zz[j] * pc_yz[j] * pb_z[j] * fl1_fx + 4.5 * pa_zz[j] * fl1_fx * pc_y[j] * pb_zz[j] + 27.0 * pa_z[j] * pc_zz[j] * pb_yz[j] * fl1_fx + 13.5 * pa_z[j] * pc_yz[j] * fl1_fx * pb_zz[j] + 13.5 * pa_z[j] * pc_z[j] * fl1_fx * pb_yzz[j] + 9.0 * pc_zz[j] * fl1_fx * pb_yzz[j] + 1.5 * pa_z[j] * fl1_fx * pc_y[j] * pb_zzz[j] + 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_z[j] * fl1_fx * pb_yzzz[j] + 3.0 * pa_zzz[j] * pb_yz[j] * pc_zz[j] + 3.0 * pa_zzz[j] * pc_yz[j] * pb_zz[j] + 9.0 * pa_zz[j] * pc_zz[j] * pb_yzz[j] + 3.0 * pa_zz[j] * pc_yz[j] * pb_zzz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_yzzz[j]);

                t_zzz_yzzz[j] += fl_s_0_0_3 * (-5.625 * fl3_fx * pc_y[j] - 1.875 * fl3_fx * pb_y[j] - 2.25 * pa_zz[j] * fl2_fx * pc_y[j] - 22.5 * pa_z[j] * pc_yz[j] * fl2_fx - 11.25 * pa_z[j] * pc_z[j] * fl2_fx * pb_y[j] - 6.75 * pa_z[j] * fl2_fx * pc_y[j] * pb_z[j] - 22.5 * pc_zz[j] * fl2_fx * pb_y[j] - 11.25 * pc_yzz[j] * fl2_fx - 22.5 * pc_yz[j] * fl2_fx * pb_z[j] - 11.25 * pc_z[j] * fl2_fx * pb_yz[j] - 2.25 * fl2_fx * pc_y[j] * pb_zz[j] - 1.5 * pa_zzz[j] * pc_yz[j] * fl1_fx - 9.0 * pa_zz[j] * pc_zz[j] * pb_y[j] * fl1_fx - 13.5 * pa_zz[j] * pc_yz[j] * pb_z[j] * fl1_fx - 9.0 * pa_zz[j] * pc_yzz[j] * fl1_fx - 27.0 * pa_z[j] * pc_zz[j] * pb_yz[j] * fl1_fx - 15.0 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx - 27.0 * pa_z[j] * pc_yzz[j] * pb_z[j] * fl1_fx - 13.5 * pa_z[j] * pc_yz[j] * fl1_fx * pb_zz[j] - 15.0 * pc_zzz[j] * pb_yz[j] * fl1_fx - 9.0 * pc_yzz[j] * fl1_fx * pb_zz[j] - 9.0 * pc_zz[j] * fl1_fx * pb_yzz[j] - 1.5 * pc_yz[j] * fl1_fx * pb_zzz[j] - pa_zzz[j] * pb_y[j] * pc_zzz[j] - 3.0 * pa_zzz[j] * pc_yzz[j] * pb_z[j] - 9.0 * pa_zz[j] * pc_zzz[j] * pb_yz[j] - 9.0 * pa_zz[j] * pc_yzz[j] * pb_zz[j] - 9.0 * pa_z[j] * pc_zzz[j] * pb_yzz[j] - 3.0 * pa_z[j] * pc_yzz[j] * pb_zzz[j] - pc_zzz[j] * pb_yzzz[j]);

                t_zzz_yzzz[j] += fl_s_0_0_4 * (1.875 * fl3_fx * pc_y[j] + 11.25 * pa_z[j] * pc_yz[j] * fl2_fx + 22.5 * pc_yzz[j] * fl2_fx + 11.25 * pc_zz[j] * fl2_fx * pb_y[j] + 11.25 * pc_yz[j] * fl2_fx * pb_z[j] + 9.0 * pa_zz[j] * pc_yzz[j] * fl1_fx + 15.0 * pa_z[j] * pc_zzz[j] * pb_y[j] * fl1_fx + 27.0 * pa_z[j] * pc_yzz[j] * pb_z[j] * fl1_fx + 15.0 * pa_z[j] * pc_yzzz[j] * fl1_fx + 15.0 * pc_zzz[j] * pb_yz[j] * fl1_fx + 7.5 * pc_zzzz[j] * pb_y[j] * fl1_fx + 15.0 * pc_yzzz[j] * pb_z[j] * fl1_fx + 9.0 * pc_yzz[j] * fl1_fx * pb_zz[j] + pa_zzz[j] * pc_yzzz[j] + 3.0 * pa_zz[j] * pc_zzzz[j] * pb_y[j] + 9.0 * pa_zz[j] * pc_yzzz[j] * pb_z[j] + 9.0 * pa_z[j] * pc_zzzz[j] * pb_yz[j] + 9.0 * pa_z[j] * pc_yzzz[j] * pb_zz[j] + 3.0 * pc_zzzz[j] * pb_yzz[j] + pc_yzzz[j] * pb_zzz[j]);

                t_zzz_yzzz[j] += fl_s_0_0_5 * (-11.25 * pc_yzz[j] * fl2_fx - 15.0 * pa_z[j] * pc_yzzz[j] * fl1_fx - 7.5 * pc_zzzz[j] * pb_y[j] * fl1_fx - 15.0 * pc_yzzz[j] * pb_z[j] * fl1_fx - 7.5 * pc_yzzzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_yzzzz[j] - 3.0 * pa_z[j] * pc_zzzzz[j] * pb_y[j] - 9.0 * pa_z[j] * pc_yzzzz[j] * pb_z[j] - 3.0 * pc_zzzzz[j] * pb_yz[j] - 3.0 * pc_yzzzz[j] * pb_zz[j]);

                t_zzz_yzzz[j] += fl_s_0_0_6 * (7.5 * pc_yzzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_yzzzzz[j] + pc_zzzzzz[j] * pb_y[j] + 3.0 * pc_yzzzzz[j] * pb_z[j]);

                t_zzz_yzzz[j] += -fl_s_0_0_7 * pc_yzzzzzz[j];

                t_zzz_zzzz[j] = fl_s_0_0_0 * (5.625 * pa_z[j] * fl3_fx + 7.5 * fl3_fx * pb_z[j] + 0.75 * pa_zzz[j] * fl2_fx + 9.0 * pa_zz[j] * fl2_fx * pb_z[j] + 13.5 * pa_z[j] * fl2_fx * pb_zz[j] + 3.0 * fl2_fx * pb_zzz[j] + 3.0 * pa_zzz[j] * pb_zz[j] * fl1_fx + 6.0 * pa_zz[j] * fl1_fx * pb_zzz[j] + 1.5 * pa_z[j] * fl1_fx * pb_zzzz[j] + pa_zzz[j] * pb_zzzz[j]);

                t_zzz_zzzz[j] += fl_s_0_0_1 * (-16.875 * pa_z[j] * fl3_fx - 13.125 * pc_z[j] * fl3_fx - 22.5 * fl3_fx * pb_z[j] - 1.5 * pa_zzz[j] * fl2_fx - 11.25 * pa_zz[j] * pc_z[j] * fl2_fx - 18.0 * pa_zz[j] * fl2_fx * pb_z[j] - 45.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 27.0 * pa_z[j] * fl2_fx * pb_zz[j] - 22.5 * pc_z[j] * fl2_fx * pb_zz[j] - 6.0 * fl2_fx * pb_zzz[j] - 3.0 * pa_zzz[j] * pb_zz[j] * fl1_fx - 6.0 * pa_zzz[j] * pb_z[j] * pc_z[j] * fl1_fx - 27.0 * pa_zz[j] * pc_z[j] * pb_zz[j] * fl1_fx - 6.0 * pa_zz[j] * fl1_fx * pb_zzz[j] - 18.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_zzz[j] - 1.5 * pa_z[j] * fl1_fx * pb_zzzz[j] - 1.5 * pc_z[j] * fl1_fx * pb_zzzz[j] - 4.0 * pa_zzz[j] * pb_zzz[j] * pc_z[j] - 3.0 * pa_zz[j] * pc_z[j] * pb_zzzz[j]);

                t_zzz_zzzz[j] += fl_s_0_0_2 * (16.875 * pa_z[j] * fl3_fx + 39.375 * pc_z[j] * fl3_fx + 22.5 * fl3_fx * pb_z[j] + 0.75 * pa_zzz[j] * fl2_fx + 22.5 * pa_zz[j] * pc_z[j] * fl2_fx + 9.0 * pa_zz[j] * fl2_fx * pb_z[j] + 33.75 * pa_z[j] * pc_zz[j] * fl2_fx + 90.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] + 13.5 * pa_z[j] * fl2_fx * pb_zz[j] + 45.0 * pc_zz[j] * fl2_fx * pb_z[j] + 45.0 * pc_z[j] * fl2_fx * pb_zz[j] + 3.0 * fl2_fx * pb_zzz[j] + 6.0 * pa_zzz[j] * pb_z[j] * pc_z[j] * fl1_fx + 3.0 * pa_zzz[j] * pc_zz[j] * fl1_fx + 27.0 * pa_zz[j] * pc_z[j] * pb_zz[j] * fl1_fx + 36.0 * pa_zz[j] * pc_zz[j] * pb_z[j] * fl1_fx + 54.0 * pa_z[j] * pc_zz[j] * pb_zz[j] * fl1_fx + 18.0 * pa_z[j] * pc_z[j] * fl1_fx * pb_zzz[j] + 12.0 * pc_zz[j] * fl1_fx * pb_zzz[j] + 1.5 * pc_z[j] * fl1_fx * pb_zzzz[j] + 6.0 * pa_zzz[j] * pb_zz[j] * pc_zz[j] + 12.0 * pa_zz[j] * pc_zz[j] * pb_zzz[j] + 3.0 * pa_z[j] * pc_zz[j] * pb_zzzz[j]);

                t_zzz_zzzz[j] += fl_s_0_0_3 * (-5.625 * pa_z[j] * fl3_fx - 39.375 * pc_z[j] * fl3_fx - 7.5 * fl3_fx * pb_z[j] - 11.25 * pa_zz[j] * pc_z[j] * fl2_fx - 67.5 * pa_z[j] * pc_zz[j] * fl2_fx - 45.0 * pa_z[j] * pc_z[j] * fl2_fx * pb_z[j] - 26.25 * pc_zzz[j] * fl2_fx - 90.0 * pc_zz[j] * fl2_fx * pb_z[j] - 22.5 * pc_z[j] * fl2_fx * pb_zz[j] - 3.0 * pa_zzz[j] * pc_zz[j] * fl1_fx - 36.0 * pa_zz[j] * pc_zz[j] * pb_z[j] * fl1_fx - 15.0 * pa_zz[j] * pc_zzz[j] * fl1_fx - 54.0 * pa_z[j] * pc_zz[j] * pb_zz[j] * fl1_fx - 60.0 * pa_z[j] * pc_zzz[j] * pb_z[j] * fl1_fx - 30.0 * pc_zzz[j] * pb_zz[j] * fl1_fx - 12.0 * pc_zz[j] * fl1_fx * pb_zzz[j] - 4.0 * pa_zzz[j] * pb_z[j] * pc_zzz[j] - 18.0 * pa_zz[j] * pc_zzz[j] * pb_zz[j] - 12.0 * pa_z[j] * pc_zzz[j] * pb_zzz[j] - pc_zzz[j] * pb_zzzz[j]);

                t_zzz_zzzz[j] += fl_s_0_0_4 * (13.125 * pc_z[j] * fl3_fx + 33.75 * pa_z[j] * pc_zz[j] * fl2_fx + 52.5 * pc_zzz[j] * fl2_fx + 45.0 * pc_zz[j] * fl2_fx * pb_z[j] + 15.0 * pa_zz[j] * pc_zzz[j] * fl1_fx + 60.0 * pa_z[j] * pc_zzz[j] * pb_z[j] * fl1_fx + 22.5 * pa_z[j] * pc_zzzz[j] * fl1_fx + 30.0 * pc_zzz[j] * pb_zz[j] * fl1_fx + 30.0 * pc_zzzz[j] * pb_z[j] * fl1_fx + pa_zzz[j] * pc_zzzz[j] + 12.0 * pa_zz[j] * pc_zzzz[j] * pb_z[j] + 18.0 * pa_z[j] * pc_zzzz[j] * pb_zz[j] + 4.0 * pc_zzzz[j] * pb_zzz[j]);

                t_zzz_zzzz[j] += fl_s_0_0_5 * (-26.25 * pc_zzz[j] * fl2_fx - 22.5 * pa_z[j] * pc_zzzz[j] * fl1_fx - 30.0 * pc_zzzz[j] * pb_z[j] * fl1_fx - 10.5 * pc_zzzzz[j] * fl1_fx - 3.0 * pa_zz[j] * pc_zzzzz[j] - 12.0 * pa_z[j] * pc_zzzzz[j] * pb_z[j] - 6.0 * pc_zzzzz[j] * pb_zz[j]);

                t_zzz_zzzz[j] += fl_s_0_0_6 * (10.5 * pc_zzzzz[j] * fl1_fx + 3.0 * pa_z[j] * pc_zzzzzz[j] + 4.0 * pc_zzzzzz[j] * pb_z[j]);

                t_zzz_zzzz[j] += -fl_s_0_0_7 * pc_zzzzzzz[j];
            }

            idx++;
        }
    }


} // npotrecfunc namespace

