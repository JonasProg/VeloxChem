#
#                           VELOXCHEM 1.0-RC2
#         ----------------------------------------------------
#                     An Electronic Structure Code
#
#  Copyright Â© 2018-2021 by VeloxChem developers. All rights reserved.
#  Contact: https://veloxchem.org/contact
#
#  SPDX-License-Identifier: LGPL-3.0-or-later
#
#  This file is part of VeloxChem.
#
#  VeloxChem is free software: you can redistribute it and/or modify it under
#  the terms of the GNU Lesser General Public License as published by the Free
#  Software Foundation, either version 3 of the License, or (at your option)
#  any later version.
#
#  VeloxChem is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
#  License for more details.
#
#  You should have received a copy of the GNU Lesser General Public License
#  along with VeloxChem. If not, see <https://www.gnu.org/licenses/>.

from mpi4py import MPI
import numpy as np
import time as tm
import sys

from .veloxchemlib import bohr_in_angstroms
from .veloxchemlib import mpi_master
from .veloxchemlib import CommonNeighbors
from .outputstream import OutputStream
from .errorhandler import assert_msg_critical
from .inputparser import parse_input
from .molecule import Molecule
from .treeblock import TreeBlock

class GlobalOptimizationDriver:
    """
    Implements global optimization driver.

    :param comm:
        The MPI communicator.
    :param ostream:
        The output stream.

    Instance variable
        - comm: The MPI communicator.
        - rank: The MPI rank.
        - nodes: Number of MPI processes.
        - ostream: The output stream.
        - cna_bond: The cut-off radius for chemical bond in CNA analysis.
        - cna_rcut: The cut-off radius for chemical bonds environment in
          CNA analysis.
        - max_conformers: The maximum number of conformers generated by
          tree growth algorithm.
        - conformer_energies: The list of conformer energies.
        - conformer_geometries: The list of conformer geometries.
        - energy_thresh: The energetic acceptance threshold for conformer.
        - similarity_thresh: The similarity acceptance threshold for conformer.
        - growth_steps: The number of steps in tree growth algorithm.
        - popt_steps: The number of partial geometry optimzation steps.
        - block_data: The geometrical data of tree build block.
    """

    def __init__(self, comm=None, ostream=None):
        """
        Initializes global optimization driver.
        """

        if comm is None:
            comm = MPI.COMM_WORLD

        if ostream is None:
            ostream = OutputStream(sys.stdout)

        # mpi information
        self.comm = comm
        self.rank = self.comm.Get_rank()
        self.nodes = self.comm.Get_size()

        # output stream
        self.ostream = ostream
        
        # CNA parameters
        self.cna_bond = None
        self.cna_rcut = None
        
        # tree growth parameters
        self.max_conformers = 500
        self.conformer_energies = []
        self.conformer_geometries = []
        self.energy_thresh = 0.1594
        self.similarity_thresh = 0.1594
        self.growth_steps = 0
        self.popt_steps = 0
        self.block_data = None
        self.tree_growth_unit = None
        

    def update_settings(self, gop_dict):
        """
        Updates settings in global optimization driver.

        :param gop_dict:
            The dictionary of global optimization settings.
        """

        gop_keywords = {
            'max_conformers' : 'int',
            'energy_thresh' : 'float',
            'similarity_thresh' : 'float',
            'growth_steps' : 'int',
            'popt_steps' : 'int',
            'block_data' : 'list',
            'cna_bond': 'float',
            'cna_rcut': 'float',
        }
        
        parse_input(self, gop_keywords, gop_dict)
        
        # update CNA bond cut-off radius
        if self.cna_bond is None:
            self.cna_bond = 3.0
        else:
            self.cna_bond /= bohr_in_angstroms()
            
        # update CNA bond environment cut-off radius
        if self.cna_rcut is None:
            self.cna_rcut = 4.5
        else:
            self.cna_rcut /= bohr_in_angstroms()
            
        # update tree growth unit
        self.tree_growth_unit = TreeBlock(self.block_data)
            
    def compute(self, seed):
        """
        Performs global optimization with given molecular seed.
        
        :param seed:
            The molecular seed.
        """
        
        self.print_header()
   
    def print_header(self):
        """
        Prints header for the global optimization driver.
        """
        
        self.ostream.print_blank()
        self.ostream.print_header('Global Optimization Driver Setup')
        self.ostream.print_header(34 * '=')
        self.ostream.print_blank()
        
        str_width = 60
        cur_str = 'Maximum Number of Conformers     : {:<6d}'.format(
            self.max_conformers)
        self.ostream.print_header(cur_str.ljust(str_width))
        cur_str = 'Energetic Acceptance Threshold   : {:.2e}'.format(
            self.energy_thresh)
        self.ostream.print_header(cur_str.ljust(str_width))
        cur_str = 'Similarity Acceptance Threshold  : {:.2f}'.format(
            self.similarity_thresh)
        self.ostream.print_header(cur_str.ljust(str_width))
        cur_str = 'Number of Tree Growth Steps      : {:<6d}'.format(
            self.growth_steps)
        self.ostream.print_header(cur_str.ljust(str_width))
        cur_str = 'Tree Growth Unit                 : ' + self.tree_growth_unit.name()
        self.ostream.print_header(cur_str.ljust(str_width))
        cur_str = 'Number of Optimization Steps     : {:<6d}'.format(
            self.popt_steps)
        self.ostream.print_header(cur_str.ljust(str_width))
        cur_str = 'Bond Distance Cut-Off Radius     : {:.2f}'.format(
            self.cna_bond)
        self.ostream.print_header(cur_str.ljust(str_width))
        cur_str = 'Bonds Environment Cut-Off Radius : {:.2f}'.format(
            self.cna_rcut)
        self.ostream.print_header(cur_str.ljust(str_width))
       
        self.ostream.print_blank()
        self.ostream.flush()
